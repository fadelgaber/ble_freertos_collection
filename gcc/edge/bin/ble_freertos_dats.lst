
../gcc/edge/bin/ble_freertos_dats_asb.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 45 51 02 00 ad 51 02 00 05 08 02 00     .+..EQ...Q......
    c010:	af 51 02 00 af 51 02 00 af 51 02 00 00 00 00 00     .Q...Q...Q......
	...
    c02c:	f1 7b 01 00 b1 51 02 00 00 00 00 00 d1 7d 01 00     .{...Q.......}..
    c03c:	39 7e 01 00 b1 51 02 00 b1 51 02 00 b1 51 02 00     9~...Q...Q...Q..
    c04c:	b1 51 02 00 b1 51 02 00 b1 51 02 00 b1 51 02 00     .Q...Q...Q...Q..
    c05c:	b1 51 02 00 b1 51 02 00 b1 51 02 00 b1 51 02 00     .Q...Q...Q...Q..
    c06c:	b1 51 02 00 b5 b1 01 00 b1 51 02 00 09 b2 01 00     .Q.......Q......
    c07c:	91 b1 01 00 b1 51 02 00 b1 51 02 00 b1 51 02 00     .....Q...Q...Q..
    c08c:	b1 51 02 00 b1 51 02 00 b1 51 02 00 b1 51 02 00     .Q...Q...Q...Q..
    c09c:	b1 80 01 00 dd 80 01 00 b1 51 02 00 b1 51 02 00     .........Q...Q..
    c0ac:	b1 51 02 00 b1 51 02 00 b1 51 02 00 b1 51 02 00     .Q...Q...Q...Q..
    c0bc:	b1 51 02 00                                         .Q..

0000c0c0 <__Patchable>:
	...

0000c100 <memcmp>:
    c100:	2a03      	cmp	r2, #3
    c102:	b470      	push	{r4, r5, r6}
    c104:	d922      	bls.n	c14c <memcmp+0x4c>
    c106:	ea40 0301 	orr.w	r3, r0, r1
    c10a:	079b      	lsls	r3, r3, #30
    c10c:	d011      	beq.n	c132 <memcmp+0x32>
    c10e:	7803      	ldrb	r3, [r0, #0]
    c110:	780c      	ldrb	r4, [r1, #0]
    c112:	42a3      	cmp	r3, r4
    c114:	d11d      	bne.n	c152 <memcmp+0x52>
    c116:	440a      	add	r2, r1
    c118:	3101      	adds	r1, #1
    c11a:	e005      	b.n	c128 <memcmp+0x28>
    c11c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    c120:	f811 4b01 	ldrb.w	r4, [r1], #1
    c124:	42a3      	cmp	r3, r4
    c126:	d114      	bne.n	c152 <memcmp+0x52>
    c128:	4291      	cmp	r1, r2
    c12a:	d1f7      	bne.n	c11c <memcmp+0x1c>
    c12c:	2000      	movs	r0, #0
    c12e:	bc70      	pop	{r4, r5, r6}
    c130:	4770      	bx	lr
    c132:	680d      	ldr	r5, [r1, #0]
    c134:	6806      	ldr	r6, [r0, #0]
    c136:	42ae      	cmp	r6, r5
    c138:	460c      	mov	r4, r1
    c13a:	4603      	mov	r3, r0
    c13c:	f101 0104 	add.w	r1, r1, #4
    c140:	f100 0004 	add.w	r0, r0, #4
    c144:	d108      	bne.n	c158 <memcmp+0x58>
    c146:	3a04      	subs	r2, #4
    c148:	2a03      	cmp	r2, #3
    c14a:	d8f2      	bhi.n	c132 <memcmp+0x32>
    c14c:	2a00      	cmp	r2, #0
    c14e:	d1de      	bne.n	c10e <memcmp+0xe>
    c150:	e7ec      	b.n	c12c <memcmp+0x2c>
    c152:	1b18      	subs	r0, r3, r4
    c154:	bc70      	pop	{r4, r5, r6}
    c156:	4770      	bx	lr
    c158:	4621      	mov	r1, r4
    c15a:	4618      	mov	r0, r3
    c15c:	e7d7      	b.n	c10e <memcmp+0xe>
    c15e:	bf00      	nop

0000c160 <memcpy>:
    c160:	4684      	mov	ip, r0
    c162:	ea41 0300 	orr.w	r3, r1, r0
    c166:	f013 0303 	ands.w	r3, r3, #3
    c16a:	d16d      	bne.n	c248 <memcpy+0xe8>
    c16c:	3a40      	subs	r2, #64	; 0x40
    c16e:	d341      	bcc.n	c1f4 <memcpy+0x94>
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	f851 3b04 	ldr.w	r3, [r1], #4
    c194:	f840 3b04 	str.w	r3, [r0], #4
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	3a40      	subs	r2, #64	; 0x40
    c1f2:	d2bd      	bcs.n	c170 <memcpy+0x10>
    c1f4:	3230      	adds	r2, #48	; 0x30
    c1f6:	d311      	bcc.n	c21c <memcpy+0xbc>
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	3a10      	subs	r2, #16
    c21a:	d2ed      	bcs.n	c1f8 <memcpy+0x98>
    c21c:	320c      	adds	r2, #12
    c21e:	d305      	bcc.n	c22c <memcpy+0xcc>
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	3a04      	subs	r2, #4
    c22a:	d2f9      	bcs.n	c220 <memcpy+0xc0>
    c22c:	3204      	adds	r2, #4
    c22e:	d008      	beq.n	c242 <memcpy+0xe2>
    c230:	07d2      	lsls	r2, r2, #31
    c232:	bf1c      	itt	ne
    c234:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c238:	f800 3b01 	strbne.w	r3, [r0], #1
    c23c:	d301      	bcc.n	c242 <memcpy+0xe2>
    c23e:	880b      	ldrh	r3, [r1, #0]
    c240:	8003      	strh	r3, [r0, #0]
    c242:	4660      	mov	r0, ip
    c244:	4770      	bx	lr
    c246:	bf00      	nop
    c248:	2a08      	cmp	r2, #8
    c24a:	d313      	bcc.n	c274 <memcpy+0x114>
    c24c:	078b      	lsls	r3, r1, #30
    c24e:	d08d      	beq.n	c16c <memcpy+0xc>
    c250:	f010 0303 	ands.w	r3, r0, #3
    c254:	d08a      	beq.n	c16c <memcpy+0xc>
    c256:	f1c3 0304 	rsb	r3, r3, #4
    c25a:	1ad2      	subs	r2, r2, r3
    c25c:	07db      	lsls	r3, r3, #31
    c25e:	bf1c      	itt	ne
    c260:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c264:	f800 3b01 	strbne.w	r3, [r0], #1
    c268:	d380      	bcc.n	c16c <memcpy+0xc>
    c26a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c26e:	f820 3b02 	strh.w	r3, [r0], #2
    c272:	e77b      	b.n	c16c <memcpy+0xc>
    c274:	3a04      	subs	r2, #4
    c276:	d3d9      	bcc.n	c22c <memcpy+0xcc>
    c278:	3a01      	subs	r2, #1
    c27a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c27e:	f800 3b01 	strb.w	r3, [r0], #1
    c282:	d2f9      	bcs.n	c278 <memcpy+0x118>
    c284:	780b      	ldrb	r3, [r1, #0]
    c286:	7003      	strb	r3, [r0, #0]
    c288:	784b      	ldrb	r3, [r1, #1]
    c28a:	7043      	strb	r3, [r0, #1]
    c28c:	788b      	ldrb	r3, [r1, #2]
    c28e:	7083      	strb	r3, [r0, #2]
    c290:	4660      	mov	r0, ip
    c292:	4770      	bx	lr

0000c294 <memset>:
    c294:	b470      	push	{r4, r5, r6}
    c296:	0786      	lsls	r6, r0, #30
    c298:	d046      	beq.n	c328 <memset+0x94>
    c29a:	1e54      	subs	r4, r2, #1
    c29c:	2a00      	cmp	r2, #0
    c29e:	d041      	beq.n	c324 <memset+0x90>
    c2a0:	b2ca      	uxtb	r2, r1
    c2a2:	4603      	mov	r3, r0
    c2a4:	e002      	b.n	c2ac <memset+0x18>
    c2a6:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    c2aa:	d33b      	bcc.n	c324 <memset+0x90>
    c2ac:	f803 2b01 	strb.w	r2, [r3], #1
    c2b0:	079d      	lsls	r5, r3, #30
    c2b2:	d1f8      	bne.n	c2a6 <memset+0x12>
    c2b4:	2c03      	cmp	r4, #3
    c2b6:	d92e      	bls.n	c316 <memset+0x82>
    c2b8:	b2cd      	uxtb	r5, r1
    c2ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c2be:	2c0f      	cmp	r4, #15
    c2c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c2c4:	d919      	bls.n	c2fa <memset+0x66>
    c2c6:	f103 0210 	add.w	r2, r3, #16
    c2ca:	4626      	mov	r6, r4
    c2cc:	3e10      	subs	r6, #16
    c2ce:	2e0f      	cmp	r6, #15
    c2d0:	f842 5c10 	str.w	r5, [r2, #-16]
    c2d4:	f842 5c0c 	str.w	r5, [r2, #-12]
    c2d8:	f842 5c08 	str.w	r5, [r2, #-8]
    c2dc:	f842 5c04 	str.w	r5, [r2, #-4]
    c2e0:	f102 0210 	add.w	r2, r2, #16
    c2e4:	d8f2      	bhi.n	c2cc <memset+0x38>
    c2e6:	f1a4 0210 	sub.w	r2, r4, #16
    c2ea:	f022 020f 	bic.w	r2, r2, #15
    c2ee:	f004 040f 	and.w	r4, r4, #15
    c2f2:	3210      	adds	r2, #16
    c2f4:	2c03      	cmp	r4, #3
    c2f6:	4413      	add	r3, r2
    c2f8:	d90d      	bls.n	c316 <memset+0x82>
    c2fa:	461e      	mov	r6, r3
    c2fc:	4622      	mov	r2, r4
    c2fe:	3a04      	subs	r2, #4
    c300:	2a03      	cmp	r2, #3
    c302:	f846 5b04 	str.w	r5, [r6], #4
    c306:	d8fa      	bhi.n	c2fe <memset+0x6a>
    c308:	1f22      	subs	r2, r4, #4
    c30a:	f022 0203 	bic.w	r2, r2, #3
    c30e:	3204      	adds	r2, #4
    c310:	4413      	add	r3, r2
    c312:	f004 0403 	and.w	r4, r4, #3
    c316:	b12c      	cbz	r4, c324 <memset+0x90>
    c318:	b2c9      	uxtb	r1, r1
    c31a:	441c      	add	r4, r3
    c31c:	f803 1b01 	strb.w	r1, [r3], #1
    c320:	429c      	cmp	r4, r3
    c322:	d1fb      	bne.n	c31c <memset+0x88>
    c324:	bc70      	pop	{r4, r5, r6}
    c326:	4770      	bx	lr
    c328:	4614      	mov	r4, r2
    c32a:	4603      	mov	r3, r0
    c32c:	e7c2      	b.n	c2b4 <memset+0x20>
    c32e:	bf00      	nop

0000c330 <__aeabi_d2f>:
    c330:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c334:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c338:	bf24      	itt	cs
    c33a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c33e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c342:	d90d      	bls.n	c360 <__aeabi_d2f+0x30>
    c344:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c348:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c34c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c350:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c354:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c358:	bf08      	it	eq
    c35a:	f020 0001 	biceq.w	r0, r0, #1
    c35e:	4770      	bx	lr
    c360:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c364:	d121      	bne.n	c3aa <__aeabi_d2f+0x7a>
    c366:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c36a:	bfbc      	itt	lt
    c36c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c370:	4770      	bxlt	lr
    c372:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c376:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c37a:	f1c2 0218 	rsb	r2, r2, #24
    c37e:	f1c2 0c20 	rsb	ip, r2, #32
    c382:	fa10 f30c 	lsls.w	r3, r0, ip
    c386:	fa20 f002 	lsr.w	r0, r0, r2
    c38a:	bf18      	it	ne
    c38c:	f040 0001 	orrne.w	r0, r0, #1
    c390:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c394:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c398:	fa03 fc0c 	lsl.w	ip, r3, ip
    c39c:	ea40 000c 	orr.w	r0, r0, ip
    c3a0:	fa23 f302 	lsr.w	r3, r3, r2
    c3a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c3a8:	e7cc      	b.n	c344 <__aeabi_d2f+0x14>
    c3aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c3ae:	d107      	bne.n	c3c0 <__aeabi_d2f+0x90>
    c3b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c3b4:	bf1e      	ittt	ne
    c3b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c3ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c3be:	4770      	bxne	lr
    c3c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c3c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c3c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c3cc:	4770      	bx	lr
    c3ce:	bf00      	nop

0000c3d0 <smprActSendSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c3d0:	b500      	push	{lr}
    c3d2:	b085      	sub	sp, #20
    c3d4:	9001      	str	r0, [sp, #4]
    c3d6:	9100      	str	r1, [sp, #0]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    c3d8:	9801      	ldr	r0, [sp, #4]
    c3da:	f000 fe01 	bl	cfe0 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_SECURITY_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
    c3de:	200a      	movs	r0, #10
    c3e0:	f002 fa05 	bl	e7ee <smpMsgAlloc>
    c3e4:	9003      	str	r0, [sp, #12]
    c3e6:	9b03      	ldr	r3, [sp, #12]
    c3e8:	2b00      	cmp	r3, #0
    c3ea:	d011      	beq.n	c410 <smprActSendSecurityReq+0x40>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    c3ec:	9b03      	ldr	r3, [sp, #12]
    c3ee:	3308      	adds	r3, #8
    c3f0:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_SECURITY_REQ);
    c3f2:	9b02      	ldr	r3, [sp, #8]
    c3f4:	1c5a      	adds	r2, r3, #1
    c3f6:	9202      	str	r2, [sp, #8]
    c3f8:	220b      	movs	r2, #11
    c3fa:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, pMsg->dm.securityReq.auth);
    c3fc:	9b02      	ldr	r3, [sp, #8]
    c3fe:	1c5a      	adds	r2, r3, #1
    c400:	9202      	str	r2, [sp, #8]
    c402:	9a00      	ldr	r2, [sp, #0]
    c404:	7912      	ldrb	r2, [r2, #4]
    c406:	701a      	strb	r2, [r3, #0]

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    c408:	9903      	ldr	r1, [sp, #12]
    c40a:	9801      	ldr	r0, [sp, #4]
    c40c:	f002 f9ae 	bl	e76c <smpSendPkt>
  }
}
    c410:	bf00      	nop
    c412:	b005      	add	sp, #20
    c414:	f85d fb04 	ldr.w	pc, [sp], #4

0000c418 <smprActProcPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c418:	b500      	push	{lr}
    c41a:	b087      	sub	sp, #28
    c41c:	9001      	str	r0, [sp, #4]
    c41e:	9100      	str	r1, [sp, #0]
  dmSecPairIndEvt_t   pairInd;
  uint8_t             *p;

  /* allocate scratch buffer */
  if (pCcb->pScr == NULL)
    c420:	9b01      	ldr	r3, [sp, #4]
    c422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c424:	2b00      	cmp	r3, #0
    c426:	d114      	bne.n	c452 <smprActProcPairReq+0x3a>
  {
    if ((pCcb->pScr = WsfBufAlloc(sizeof(smpScratch_t))) == NULL)
    c428:	2040      	movs	r0, #64	; 0x40
    c42a:	f00b ff87 	bl	1833c <WsfBufAlloc>
    c42e:	4602      	mov	r2, r0
    c430:	9b01      	ldr	r3, [sp, #4]
    c432:	631a      	str	r2, [r3, #48]	; 0x30
    c434:	9b01      	ldr	r3, [sp, #4]
    c436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c438:	2b00      	cmp	r3, #0
    c43a:	d10d      	bne.n	c458 <smprActProcPairReq+0x40>
    {
      /* alloc failed; cancel pairing */
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    c43c:	9b00      	ldr	r3, [sp, #0]
    c43e:	2208      	movs	r2, #8
    c440:	70da      	strb	r2, [r3, #3]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    c442:	9b00      	ldr	r3, [sp, #0]
    c444:	2203      	movs	r2, #3
    c446:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
    c448:	9900      	ldr	r1, [sp, #0]
    c44a:	9801      	ldr	r0, [sp, #4]
    c44c:	f001 fb0a 	bl	da64 <smpSmExecute>
    c450:	e043      	b.n	c4da <smprActProcPairReq+0xc2>
    }
  }
  else
  {
    /* should not happen */
    SMP_TRACE_ERR0("pScr already allocated");
    c452:	4823      	ldr	r0, [pc, #140]	; (c4e0 <smprActProcPairReq+0xc8>)
    c454:	f00c fc78 	bl	18d48 <WsfTrace>
  }

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    c458:	9b01      	ldr	r3, [sp, #4]
    c45a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    c45e:	2201      	movs	r2, #1
    c460:	2101      	movs	r1, #1
    c462:	4618      	mov	r0, r3
    c464:	f005 f9f2 	bl	1184c <DmConnSetIdle>

  p = pMsg->data.pPacket + L2C_PAYLOAD_START;
    c468:	9b00      	ldr	r3, [sp, #0]
    c46a:	685b      	ldr	r3, [r3, #4]
    c46c:	3308      	adds	r3, #8
    c46e:	9305      	str	r3, [sp, #20]

  /* store packet for later */
  memcpy(pCcb->pairReq, p, SMP_PAIR_REQ_LEN);
    c470:	9b01      	ldr	r3, [sp, #4]
    c472:	3320      	adds	r3, #32
    c474:	2207      	movs	r2, #7
    c476:	9905      	ldr	r1, [sp, #20]
    c478:	4618      	mov	r0, r3
    c47a:	f7ff fe71 	bl	c160 <memcpy>

  /* parse packet to callback event structure */
  p++;    /* skip command code */
    c47e:	9b05      	ldr	r3, [sp, #20]
    c480:	3301      	adds	r3, #1
    c482:	9305      	str	r3, [sp, #20]
  p++;    /* skip IO capabilities */
    c484:	9b05      	ldr	r3, [sp, #20]
    c486:	3301      	adds	r3, #1
    c488:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(pairInd.oob, p);
    c48a:	9b05      	ldr	r3, [sp, #20]
    c48c:	1c5a      	adds	r2, r3, #1
    c48e:	9205      	str	r2, [sp, #20]
    c490:	781b      	ldrb	r3, [r3, #0]
    c492:	f88d 3011 	strb.w	r3, [sp, #17]
  BSTREAM_TO_UINT8(pairInd.auth, p);
    c496:	9b05      	ldr	r3, [sp, #20]
    c498:	1c5a      	adds	r2, r3, #1
    c49a:	9205      	str	r2, [sp, #20]
    c49c:	781b      	ldrb	r3, [r3, #0]
    c49e:	f88d 3010 	strb.w	r3, [sp, #16]
  p++;    /* skip max key len */
    c4a2:	9b05      	ldr	r3, [sp, #20]
    c4a4:	3301      	adds	r3, #1
    c4a6:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
    c4a8:	9b05      	ldr	r3, [sp, #20]
    c4aa:	1c5a      	adds	r2, r3, #1
    c4ac:	9205      	str	r2, [sp, #20]
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	f88d 3012 	strb.w	r3, [sp, #18]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
    c4b4:	9b05      	ldr	r3, [sp, #20]
    c4b6:	1c5a      	adds	r2, r3, #1
    c4b8:	9205      	str	r2, [sp, #20]
    c4ba:	781b      	ldrb	r3, [r3, #0]
    c4bc:	f88d 3013 	strb.w	r3, [sp, #19]

  /* call app callback */
  pairInd.hdr.param = pCcb->connId;
    c4c0:	9b01      	ldr	r3, [sp, #4]
    c4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    c4c6:	b29b      	uxth	r3, r3
    c4c8:	f8ad 300c 	strh.w	r3, [sp, #12]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
    c4cc:	2331      	movs	r3, #49	; 0x31
    c4ce:	f88d 300e 	strb.w	r3, [sp, #14]
  DmSmpCbackExec((dmEvt_t *) &pairInd);
    c4d2:	ab03      	add	r3, sp, #12
    c4d4:	4618      	mov	r0, r3
    c4d6:	f006 f941 	bl	1275c <DmSmpCbackExec>
}
    c4da:	b007      	add	sp, #28
    c4dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c4e0:	00027f58 	.word	0x00027f58

0000c4e4 <smprActSendPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRsp(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c4e4:	b500      	push	{lr}
    c4e6:	b087      	sub	sp, #28
    c4e8:	9001      	str	r0, [sp, #4]
    c4ea:	9100      	str	r1, [sp, #0]
  uint8_t   *p;
  uint8_t   oob;
  uint8_t   display;

  /* build packet to pairing response buffer in ccb */
  p = pCcb->pairRsp;
    c4ec:	9b01      	ldr	r3, [sp, #4]
    c4ee:	3327      	adds	r3, #39	; 0x27
    c4f0:	9305      	str	r3, [sp, #20]
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
    c4f2:	9b05      	ldr	r3, [sp, #20]
    c4f4:	1c5a      	adds	r2, r3, #1
    c4f6:	9205      	str	r2, [sp, #20]
    c4f8:	2202      	movs	r2, #2
    c4fa:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
    c4fc:	9b05      	ldr	r3, [sp, #20]
    c4fe:	1c5a      	adds	r2, r3, #1
    c500:	9205      	str	r2, [sp, #20]
    c502:	4a33      	ldr	r2, [pc, #204]	; (c5d0 <smprActSendPairRsp+0xec>)
    c504:	6812      	ldr	r2, [r2, #0]
    c506:	7912      	ldrb	r2, [r2, #4]
    c508:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.oob);
    c50a:	9b05      	ldr	r3, [sp, #20]
    c50c:	1c5a      	adds	r2, r3, #1
    c50e:	9205      	str	r2, [sp, #20]
    c510:	9a00      	ldr	r2, [sp, #0]
    c512:	7912      	ldrb	r2, [r2, #4]
    c514:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.auth);
    c516:	9b05      	ldr	r3, [sp, #20]
    c518:	1c5a      	adds	r2, r3, #1
    c51a:	9205      	str	r2, [sp, #20]
    c51c:	9a00      	ldr	r2, [sp, #0]
    c51e:	7952      	ldrb	r2, [r2, #5]
    c520:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
    c522:	9b05      	ldr	r3, [sp, #20]
    c524:	1c5a      	adds	r2, r3, #1
    c526:	9205      	str	r2, [sp, #20]
    c528:	4a29      	ldr	r2, [pc, #164]	; (c5d0 <smprActSendPairRsp+0xec>)
    c52a:	6812      	ldr	r2, [r2, #0]
    c52c:	7992      	ldrb	r2, [r2, #6]
    c52e:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
    c530:	9b05      	ldr	r3, [sp, #20]
    c532:	1c5a      	adds	r2, r3, #1
    c534:	9205      	str	r2, [sp, #20]
    c536:	9a00      	ldr	r2, [sp, #0]
    c538:	7992      	ldrb	r2, [r2, #6]
    c53a:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
    c53c:	9b05      	ldr	r3, [sp, #20]
    c53e:	1c5a      	adds	r2, r3, #1
    c540:	9205      	str	r2, [sp, #20]
    c542:	9a00      	ldr	r2, [sp, #0]
    c544:	79d2      	ldrb	r2, [r2, #7]
    c546:	701a      	strb	r2, [r3, #0]

  /* process pairing request and response data */
  if (smpCb.procPairing(pCcb, &oob, &display))
    c548:	4b22      	ldr	r3, [pc, #136]	; (c5d4 <smprActSendPairRsp+0xf0>)
    c54a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    c54e:	f10d 020e 	add.w	r2, sp, #14
    c552:	f10d 010f 	add.w	r1, sp, #15
    c556:	9801      	ldr	r0, [sp, #4]
    c558:	4798      	blx	r3
    c55a:	4603      	mov	r3, r0
    c55c:	2b00      	cmp	r3, #0
    c55e:	d033      	beq.n	c5c8 <smprActSendPairRsp+0xe4>
  {
    /* set next expected packet */
    if ((pCcb->pairReq[SMP_AUTHREQ_POS] & pMsg->dm.pair.auth & SMP_AUTH_SC_FLAG) == SMP_AUTH_SC_FLAG)
    c560:	9b01      	ldr	r3, [sp, #4]
    c562:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    c566:	9b00      	ldr	r3, [sp, #0]
    c568:	795b      	ldrb	r3, [r3, #5]
    c56a:	4013      	ands	r3, r2
    c56c:	b2db      	uxtb	r3, r3
    c56e:	f003 0308 	and.w	r3, r3, #8
    c572:	2b00      	cmp	r3, #0
    c574:	d004      	beq.n	c580 <smprActSendPairRsp+0x9c>
    {
      pCcb->nextCmdCode = SMP_CMD_PUBLIC_KEY;
    c576:	9b01      	ldr	r3, [sp, #4]
    c578:	220c      	movs	r2, #12
    c57a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    c57e:	e003      	b.n	c588 <smprActSendPairRsp+0xa4>
    }
    else
    {
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
    c580:	9b01      	ldr	r3, [sp, #4]
    c582:	2203      	movs	r2, #3
    c584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    /* start smp response timer */
    smpStartRspTimer(pCcb);
    c588:	9801      	ldr	r0, [sp, #4]
    c58a:	f000 fd29 	bl	cfe0 <smpStartRspTimer>

    /* send pairing response; allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_PAIR_RSP_LEN + L2C_PAYLOAD_START)) != NULL)
    c58e:	200f      	movs	r0, #15
    c590:	f002 f92d 	bl	e7ee <smpMsgAlloc>
    c594:	9004      	str	r0, [sp, #16]
    c596:	9b04      	ldr	r3, [sp, #16]
    c598:	2b00      	cmp	r3, #0
    c59a:	d00c      	beq.n	c5b6 <smprActSendPairRsp+0xd2>
    {
      /* build packet from pairing response buffer */
      memcpy(pPkt + L2C_PAYLOAD_START, pCcb->pairRsp, SMP_PAIR_RSP_LEN);
    c59c:	9b04      	ldr	r3, [sp, #16]
    c59e:	f103 0008 	add.w	r0, r3, #8
    c5a2:	9b01      	ldr	r3, [sp, #4]
    c5a4:	3327      	adds	r3, #39	; 0x27
    c5a6:	2207      	movs	r2, #7
    c5a8:	4619      	mov	r1, r3
    c5aa:	f7ff fdd9 	bl	c160 <memcpy>

      /* send packet */
      smpSendPkt(pCcb, pPkt);
    c5ae:	9904      	ldr	r1, [sp, #16]
    c5b0:	9801      	ldr	r0, [sp, #4]
    c5b2:	f002 f8db 	bl	e76c <smpSendPkt>
    }

    /* request authentication data */
    smpCb.procAuthReq(pCcb, oob, display);
    c5b6:	4b07      	ldr	r3, [pc, #28]	; (c5d4 <smprActSendPairRsp+0xf0>)
    c5b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    c5bc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c5c0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    c5c4:	9801      	ldr	r0, [sp, #4]
    c5c6:	4798      	blx	r3
  }
}
    c5c8:	bf00      	nop
    c5ca:	b007      	add	sp, #28
    c5cc:	f85d fb04 	ldr.w	pc, [sp], #4
    c5d0:	10002b94 	.word	0x10002b94
    c5d4:	10008824 	.word	0x10008824

0000c5d8 <smprActProcPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c5d8:	b500      	push	{lr}
    c5da:	b085      	sub	sp, #20
    c5dc:	9001      	str	r0, [sp, #4]
    c5de:	9100      	str	r1, [sp, #0]
  uint8_t   *p;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    c5e0:	9b00      	ldr	r3, [sp, #0]
    c5e2:	685b      	ldr	r3, [r3, #4]
    c5e4:	3309      	adds	r3, #9
    c5e6:	9303      	str	r3, [sp, #12]

  /* store confirm value */
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
    c5e8:	9b01      	ldr	r3, [sp, #4]
    c5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c5ec:	3320      	adds	r3, #32
    c5ee:	2210      	movs	r2, #16
    c5f0:	9903      	ldr	r1, [sp, #12]
    c5f2:	4618      	mov	r0, r3
    c5f4:	f7ff fdb4 	bl	c160 <memcpy>

  /* discard any packets received erroneously at this point */
  pCcb->nextCmdCode = 0;
    c5f8:	9b01      	ldr	r3, [sp, #4]
    c5fa:	2200      	movs	r2, #0
    c5fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
    c600:	bf00      	nop
    c602:	b005      	add	sp, #20
    c604:	f85d fb04 	ldr.w	pc, [sp], #4

0000c608 <smprActProcPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c608:	b500      	push	{lr}
    c60a:	b083      	sub	sp, #12
    c60c:	9001      	str	r0, [sp, #4]
    c60e:	9100      	str	r1, [sp, #0]
  smprActProcPairCnf(pCcb, pMsg);
    c610:	9900      	ldr	r1, [sp, #0]
    c612:	9801      	ldr	r0, [sp, #4]
    c614:	f7ff ffe0 	bl	c5d8 <smprActProcPairCnf>

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
    c618:	9b01      	ldr	r3, [sp, #4]
    c61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c61c:	3330      	adds	r3, #48	; 0x30
    c61e:	2110      	movs	r1, #16
    c620:	4618      	mov	r0, r3
    c622:	f006 fe1f 	bl	13264 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
    c626:	9b01      	ldr	r3, [sp, #4]
    c628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c62a:	4619      	mov	r1, r3
    c62c:	9b01      	ldr	r3, [sp, #4]
    c62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c630:	3330      	adds	r3, #48	; 0x30
    c632:	461a      	mov	r2, r3
    c634:	9801      	ldr	r0, [sp, #4]
    c636:	f001 fe41 	bl	e2bc <smpCalcC1Part1>
}
    c63a:	bf00      	nop
    c63c:	b003      	add	sp, #12
    c63e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c644 <smprActCnfVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActCnfVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c644:	b500      	push	{lr}
    c646:	b083      	sub	sp, #12
    c648:	9001      	str	r0, [sp, #4]
    c64a:	9100      	str	r1, [sp, #0]
  /* compare calculated confirm value with value received earlier */
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
    c64c:	9b00      	ldr	r3, [sp, #0]
    c64e:	6858      	ldr	r0, [r3, #4]
    c650:	9b01      	ldr	r3, [sp, #4]
    c652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c654:	3320      	adds	r3, #32
    c656:	2210      	movs	r2, #16
    c658:	4619      	mov	r1, r3
    c65a:	f7ff fd51 	bl	c100 <memcmp>
    c65e:	4603      	mov	r3, r0
    c660:	2b00      	cmp	r3, #0
    c662:	d024      	beq.n	c6ae <smprActCnfVerify+0x6a>
  {
    /* confirm values don't match; update repeated attempts count */
    pCcb->attempts++;
    c664:	9b01      	ldr	r3, [sp, #4]
    c666:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    c66a:	3301      	adds	r3, #1
    c66c:	b2da      	uxtb	r2, r3
    c66e:	9b01      	ldr	r3, [sp, #4]
    c670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
    c674:	9b01      	ldr	r3, [sp, #4]
    c676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    c67a:	4618      	mov	r0, r3
    c67c:	f001 fbe8 	bl	de50 <SmpDbPairingFailed>
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
    c680:	9b00      	ldr	r3, [sp, #0]
    c682:	2204      	movs	r2, #4
    c684:	70da      	strb	r2, [r3, #3]

    if (pCcb->attempts == pSmpCfg->maxAttempts)
    c686:	9b01      	ldr	r3, [sp, #4]
    c688:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
    c68c:	4b10      	ldr	r3, [pc, #64]	; (c6d0 <smprActCnfVerify+0x8c>)
    c68e:	681b      	ldr	r3, [r3, #0]
    c690:	79db      	ldrb	r3, [r3, #7]
    c692:	429a      	cmp	r2, r3
    c694:	d103      	bne.n	c69e <smprActCnfVerify+0x5a>
    {
      /* max attempts reached */
      pMsg->hdr.event = SMP_MSG_INT_MAX_ATTEMPTS;
    c696:	9b00      	ldr	r3, [sp, #0]
    c698:	220d      	movs	r2, #13
    c69a:	709a      	strb	r2, [r3, #2]
    c69c:	e002      	b.n	c6a4 <smprActCnfVerify+0x60>
    }
    else
    {
      /* else just fail */
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    c69e:	9b00      	ldr	r3, [sp, #0]
    c6a0:	2203      	movs	r2, #3
    c6a2:	709a      	strb	r2, [r3, #2]
    }

    smpSmExecute(pCcb, pMsg);
    c6a4:	9900      	ldr	r1, [sp, #0]
    c6a6:	9801      	ldr	r0, [sp, #4]
    c6a8:	f001 f9dc 	bl	da64 <smpSmExecute>
    return;
    c6ac:	e00c      	b.n	c6c8 <smprActCnfVerify+0x84>
  }

  /* do STK calculation: key, responder rand, initiator rand */
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
    c6ae:	9b01      	ldr	r3, [sp, #4]
    c6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c6b2:	4619      	mov	r1, r3
    c6b4:	9b01      	ldr	r3, [sp, #4]
    c6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c6b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
    c6bc:	9b01      	ldr	r3, [sp, #4]
    c6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c6c0:	3310      	adds	r3, #16
    c6c2:	9801      	ldr	r0, [sp, #4]
    c6c4:	f001 ffc6 	bl	e654 <smpCalcS1>
}
    c6c8:	b003      	add	sp, #12
    c6ca:	f85d fb04 	ldr.w	pc, [sp], #4
    c6ce:	bf00      	nop
    c6d0:	10002b94 	.word	0x10002b94

0000c6d4 <smprActSendPairRandom>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRandom(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c6d4:	b500      	push	{lr}
    c6d6:	b087      	sub	sp, #28
    c6d8:	9001      	str	r0, [sp, #4]
    c6da:	9100      	str	r1, [sp, #0]
  uint8_t   *p;
  uint8_t   encKeyLen;

  /* get max STK length */
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
               pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
    c6dc:	9b01      	ldr	r3, [sp, #4]
    c6de:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    c6e2:	9b01      	ldr	r3, [sp, #4]
    c6e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
    c6e8:	4293      	cmp	r3, r2
    c6ea:	bf28      	it	cs
    c6ec:	4613      	movcs	r3, r2
    c6ee:	f88d 3017 	strb.w	r3, [sp, #23]

  /* store STK and adjust based on max key length */
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
    c6f2:	9b01      	ldr	r3, [sp, #4]
    c6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c6f6:	f103 0020 	add.w	r0, r3, #32
    c6fa:	9b00      	ldr	r3, [sp, #0]
    c6fc:	685b      	ldr	r3, [r3, #4]
    c6fe:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c702:	4619      	mov	r1, r3
    c704:	f7ff fd2c 	bl	c160 <memcpy>
  memset((pCcb->pScr->buf.b3 + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
    c708:	9b01      	ldr	r3, [sp, #4]
    c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c70c:	f103 0220 	add.w	r2, r3, #32
    c710:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c714:	18d0      	adds	r0, r2, r3
    c716:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c71a:	f1c3 0310 	rsb	r3, r3, #16
    c71e:	461a      	mov	r2, r3
    c720:	2100      	movs	r1, #0
    c722:	f7ff fdb7 	bl	c294 <memset>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    c726:	9801      	ldr	r0, [sp, #4]
    c728:	f000 fc5a 	bl	cfe0 <smpStartRspTimer>

  /* allocate packet buffer and send pairing random packet */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
    c72c:	2019      	movs	r0, #25
    c72e:	f002 f85e 	bl	e7ee <smpMsgAlloc>
    c732:	9004      	str	r0, [sp, #16]
    c734:	9b04      	ldr	r3, [sp, #16]
    c736:	2b00      	cmp	r3, #0
    c738:	d013      	beq.n	c762 <smprActSendPairRandom+0x8e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    c73a:	9b04      	ldr	r3, [sp, #16]
    c73c:	3308      	adds	r3, #8
    c73e:	9303      	str	r3, [sp, #12]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
    c740:	9b03      	ldr	r3, [sp, #12]
    c742:	1c5a      	adds	r2, r3, #1
    c744:	9203      	str	r2, [sp, #12]
    c746:	2204      	movs	r2, #4
    c748:	701a      	strb	r2, [r3, #0]
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
    c74a:	9b01      	ldr	r3, [sp, #4]
    c74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c74e:	3330      	adds	r3, #48	; 0x30
    c750:	2210      	movs	r2, #16
    c752:	4619      	mov	r1, r3
    c754:	9803      	ldr	r0, [sp, #12]
    c756:	f7ff fd03 	bl	c160 <memcpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    c75a:	9904      	ldr	r1, [sp, #16]
    c75c:	9801      	ldr	r0, [sp, #4]
    c75e:	f002 f805 	bl	e76c <smpSendPkt>
  }
}
    c762:	bf00      	nop
    c764:	b007      	add	sp, #28
    c766:	f85d fb04 	ldr.w	pc, [sp], #4

0000c76a <smprActSetupKeyDist>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSetupKeyDist(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c76a:	b500      	push	{lr}
    c76c:	b083      	sub	sp, #12
    c76e:	9001      	str	r0, [sp, #4]
    c770:	9100      	str	r1, [sp, #0]
  /* don't receive anything yet */
  pCcb->nextCmdCode = 0;
    c772:	9b01      	ldr	r3, [sp, #4]
    c774:	2200      	movs	r2, #0
    c776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* start smp response timer once for entire key distribution phase */
  smpStartRspTimer(pCcb);
    c77a:	9801      	ldr	r0, [sp, #4]
    c77c:	f000 fc30 	bl	cfe0 <smpStartRspTimer>

  /* initialize parameters in key ind struct */
  pCcb->pScr->keyInd.hdr.param = pCcb->connId;
    c780:	9b01      	ldr	r3, [sp, #4]
    c782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c784:	9a01      	ldr	r2, [sp, #4]
    c786:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
    c78a:	b292      	uxth	r2, r2
    c78c:	801a      	strh	r2, [r3, #0]
  pCcb->pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ?
    c78e:	9b01      	ldr	r3, [sp, #4]
    c790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c792:	9a01      	ldr	r2, [sp, #4]
    c794:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    c798:	f002 0204 	and.w	r2, r2, #4
    c79c:	2a00      	cmp	r2, #0
    c79e:	d001      	beq.n	c7a4 <smprActSetupKeyDist+0x3a>
    c7a0:	2202      	movs	r2, #2
    c7a2:	e000      	b.n	c7a6 <smprActSetupKeyDist+0x3c>
    c7a4:	2201      	movs	r2, #1
    c7a6:	77da      	strb	r2, [r3, #31]
                                DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
  pCcb->pScr->keyInd.encKeyLen =
    c7a8:	9b01      	ldr	r3, [sp, #4]
    c7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
     pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
    c7ac:	9a01      	ldr	r2, [sp, #4]
    c7ae:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
    c7b2:	9a01      	ldr	r2, [sp, #4]
    c7b4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
  pCcb->pScr->keyInd.encKeyLen =
    c7b8:	428a      	cmp	r2, r1
    c7ba:	bf28      	it	cs
    c7bc:	460a      	movcs	r2, r1
    c7be:	b2d2      	uxtb	r2, r2
    c7c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* start key distribution */
  smprActSendKey(pCcb, pMsg);
    c7c4:	9900      	ldr	r1, [sp, #0]
    c7c6:	9801      	ldr	r0, [sp, #4]
    c7c8:	f000 f804 	bl	c7d4 <smprActSendKey>
}
    c7cc:	bf00      	nop
    c7ce:	b003      	add	sp, #12
    c7d0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c7d4 <smprActSendKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c7d4:	b500      	push	{lr}
    c7d6:	b085      	sub	sp, #20
    c7d8:	9001      	str	r0, [sp, #4]
    c7da:	9100      	str	r1, [sp, #0]
  uint8_t     keyDist;

  /* get responder key distribution */
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
    c7dc:	9b01      	ldr	r3, [sp, #4]
    c7de:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    c7e2:	9b01      	ldr	r3, [sp, #4]
    c7e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    c7e8:	4013      	ands	r3, r2
    c7ea:	f88d 300f 	strb.w	r3, [sp, #15]

  /* send next key; if done sending keys set up to receive keys */
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
    c7ee:	9b01      	ldr	r3, [sp, #4]
    c7f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d156      	bne.n	c8a6 <smprActSendKey+0xd2>
    c7f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c7fc:	4619      	mov	r1, r3
    c7fe:	9801      	ldr	r0, [sp, #4]
    c800:	f000 fe7e 	bl	d500 <smpSendKey>
    c804:	4603      	mov	r3, r0
    c806:	2b00      	cmp	r3, #0
    c808:	d04d      	beq.n	c8a6 <smprActSendKey+0xd2>
  {
    pCcb->nextCmdCode = 0;
    c80a:	9b01      	ldr	r3, [sp, #4]
    c80c:	2200      	movs	r2, #0
    c80e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

    /* get initiator key distribution */
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
    c812:	9b01      	ldr	r3, [sp, #4]
    c814:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    c818:	9b01      	ldr	r3, [sp, #4]
    c81a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    c81e:	4013      	ands	r3, r2
    c820:	f88d 300f 	strb.w	r3, [sp, #15]

    /* set up to receive first key distribution packet */
    if (keyDist & SMP_KEY_DIST_ENC)
    c824:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c828:	f003 0301 	and.w	r3, r3, #1
    c82c:	2b00      	cmp	r3, #0
    c82e:	d019      	beq.n	c864 <smprActSendKey+0x90>
    {
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
    c830:	4b1f      	ldr	r3, [pc, #124]	; (c8b0 <smprActSendKey+0xdc>)
    c832:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
    c836:	2b00      	cmp	r3, #0
    c838:	d00f      	beq.n	c85a <smprActSendKey+0x86>
    c83a:	9b01      	ldr	r3, [sp, #4]
    c83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c83e:	781b      	ldrb	r3, [r3, #0]
    c840:	2b00      	cmp	r3, #0
    c842:	d00a      	beq.n	c85a <smprActSendKey+0x86>
      {
        if (keyDist & SMP_KEY_DIST_ID)
    c844:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c848:	f003 0302 	and.w	r3, r3, #2
    c84c:	2b00      	cmp	r3, #0
    c84e:	d01e      	beq.n	c88e <smprActSendKey+0xba>
        {
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
    c850:	9b01      	ldr	r3, [sp, #4]
    c852:	2208      	movs	r2, #8
    c854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        if (keyDist & SMP_KEY_DIST_ID)
    c858:	e019      	b.n	c88e <smprActSendKey+0xba>
        }
      }
      else
      {
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
    c85a:	9b01      	ldr	r3, [sp, #4]
    c85c:	2206      	movs	r2, #6
    c85e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    c862:	e014      	b.n	c88e <smprActSendKey+0xba>
      }
    }
    else if (keyDist & SMP_KEY_DIST_ID)
    c864:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c868:	f003 0302 	and.w	r3, r3, #2
    c86c:	2b00      	cmp	r3, #0
    c86e:	d004      	beq.n	c87a <smprActSendKey+0xa6>
    {
      pCcb->nextCmdCode = SMP_CMD_ID_INFO;
    c870:	9b01      	ldr	r3, [sp, #4]
    c872:	2208      	movs	r2, #8
    c874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    c878:	e009      	b.n	c88e <smprActSendKey+0xba>
    }
    else if (keyDist & SMP_KEY_DIST_SIGN)
    c87a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c87e:	f003 0304 	and.w	r3, r3, #4
    c882:	2b00      	cmp	r3, #0
    c884:	d003      	beq.n	c88e <smprActSendKey+0xba>
    {
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
    c886:	9b01      	ldr	r3, [sp, #4]
    c888:	220a      	movs	r2, #10
    c88a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    if (pCcb->nextCmdCode == 0)
    c88e:	9b01      	ldr	r3, [sp, #4]
    c890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    c894:	2b00      	cmp	r3, #0
    c896:	d106      	bne.n	c8a6 <smprActSendKey+0xd2>
    {
      /* no keys to receive; send ourselves pairing complete msg */
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
    c898:	9b00      	ldr	r3, [sp, #0]
    c89a:	220e      	movs	r2, #14
    c89c:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
    c89e:	9900      	ldr	r1, [sp, #0]
    c8a0:	9801      	ldr	r0, [sp, #4]
    c8a2:	f001 f8df 	bl	da64 <smpSmExecute>
    }
  }
}
    c8a6:	bf00      	nop
    c8a8:	b005      	add	sp, #20
    c8aa:	f85d fb04 	ldr.w	pc, [sp], #4
    c8ae:	bf00      	nop
    c8b0:	10008824 	.word	0x10008824

0000c8b4 <smprActRcvKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActRcvKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c8b4:	b500      	push	{lr}
    c8b6:	b085      	sub	sp, #20
    c8b8:	9001      	str	r0, [sp, #4]
    c8ba:	9100      	str	r1, [sp, #0]
  uint8_t   keyDist;

  /* get initiator key distribution */
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
    c8bc:	9b01      	ldr	r3, [sp, #4]
    c8be:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    c8c2:	9b01      	ldr	r3, [sp, #4]
    c8c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    c8c8:	4013      	ands	r3, r2
    c8ca:	f88d 300f 	strb.w	r3, [sp, #15]

  /* process received key */
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
    c8ce:	9b01      	ldr	r3, [sp, #4]
    c8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c8d2:	4619      	mov	r1, r3
    c8d4:	9b00      	ldr	r3, [sp, #0]
    c8d6:	685a      	ldr	r2, [r3, #4]
    c8d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c8dc:	9801      	ldr	r0, [sp, #4]
    c8de:	f000 ff65 	bl	d7ac <smpProcRcvKey>
    c8e2:	4603      	mov	r3, r0
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	d006      	beq.n	c8f6 <smprActRcvKey+0x42>
  {
    /* no more keys to receive; send ourselves pairing complete msg */
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
    c8e8:	9b00      	ldr	r3, [sp, #0]
    c8ea:	220e      	movs	r2, #14
    c8ec:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
    c8ee:	9900      	ldr	r1, [sp, #0]
    c8f0:	9801      	ldr	r0, [sp, #4]
    c8f2:	f001 f8b7 	bl	da64 <smpSmExecute>
  }
}
    c8f6:	bf00      	nop
    c8f8:	b005      	add	sp, #20
    c8fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c900 <smprScActStoreLescPin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActStoreLescPin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c900:	b500      	push	{lr}
    c902:	b083      	sub	sp, #12
    c904:	9001      	str	r0, [sp, #4]
    c906:	9100      	str	r1, [sp, #0]
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
    c908:	9b01      	ldr	r3, [sp, #4]
    c90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c90c:	785b      	ldrb	r3, [r3, #1]
    c90e:	2b03      	cmp	r3, #3
    c910:	d12d      	bne.n	c96e <smprScActStoreLescPin+0x6e>
  {
    /* Store the pin */
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
    c912:	9b01      	ldr	r3, [sp, #4]
    c914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c916:	695b      	ldr	r3, [r3, #20]
    c918:	3320      	adds	r3, #32
    c91a:	4917      	ldr	r1, [pc, #92]	; (c978 <smprScActStoreLescPin+0x78>)
    c91c:	4618      	mov	r0, r3
    c91e:	f00e fd18 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
    c922:	9b01      	ldr	r3, [sp, #4]
    c924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c926:	695b      	ldr	r3, [r3, #20]
    c928:	3330      	adds	r3, #48	; 0x30
    c92a:	4913      	ldr	r1, [pc, #76]	; (c978 <smprScActStoreLescPin+0x78>)
    c92c:	4618      	mov	r0, r3
    c92e:	f00e fd10 	bl	1b352 <Calc128Cpy>

    if (pMsg->dm.authRsp.authDataLen <= 3)
    c932:	9b00      	ldr	r3, [sp, #0]
    c934:	7d1b      	ldrb	r3, [r3, #20]
    c936:	2b03      	cmp	r3, #3
    c938:	d819      	bhi.n	c96e <smprScActStoreLescPin+0x6e>
    {
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    c93a:	9b01      	ldr	r3, [sp, #4]
    c93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c93e:	695b      	ldr	r3, [r3, #20]
    c940:	f103 002d 	add.w	r0, r3, #45	; 0x2d
    c944:	9b00      	ldr	r3, [sp, #0]
    c946:	1d19      	adds	r1, r3, #4
    c948:	9b00      	ldr	r3, [sp, #0]
    c94a:	7d1b      	ldrb	r3, [r3, #20]
    c94c:	b29b      	uxth	r3, r3
    c94e:	461a      	mov	r2, r3
    c950:	f00e fd37 	bl	1b3c2 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    c954:	9b01      	ldr	r3, [sp, #4]
    c956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c958:	695b      	ldr	r3, [r3, #20]
    c95a:	f103 003d 	add.w	r0, r3, #61	; 0x3d
    c95e:	9b00      	ldr	r3, [sp, #0]
    c960:	1d19      	adds	r1, r3, #4
    c962:	9b00      	ldr	r3, [sp, #0]
    c964:	7d1b      	ldrb	r3, [r3, #20]
    c966:	b29b      	uxth	r3, r3
    c968:	461a      	mov	r2, r3
    c96a:	f00e fd2a 	bl	1b3c2 <WStrReverseCpy>
    }
  }
}
    c96e:	bf00      	nop
    c970:	b003      	add	sp, #12
    c972:	f85d fb04 	ldr.w	pc, [sp], #4
    c976:	bf00      	nop
    c978:	00029a78 	.word	0x00029a78

0000c97c <smprScActSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c97c:	b500      	push	{lr}
    c97e:	b083      	sub	sp, #12
    c980:	9001      	str	r0, [sp, #4]
    c982:	9100      	str	r1, [sp, #0]
  /* Execute Common Auth Select actions */
  smpScActAuthSelect(pCcb, pMsg);
    c984:	9900      	ldr	r1, [sp, #0]
    c986:	9801      	ldr	r0, [sp, #4]
    c988:	f002 fbd2 	bl	f130 <smpScActAuthSelect>

  /* Send our public key */
  smpScSendPubKey(pCcb, pMsg);
    c98c:	9900      	ldr	r1, [sp, #0]
    c98e:	9801      	ldr	r0, [sp, #4]
    c990:	f003 f974 	bl	fc7c <smpScSendPubKey>
}
    c994:	bf00      	nop
    c996:	b003      	add	sp, #12
    c998:	f85d fb04 	ldr.w	pc, [sp], #4

0000c99c <smprScActJwncSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c99c:	b500      	push	{lr}
    c99e:	b083      	sub	sp, #12
    c9a0:	9001      	str	r0, [sp, #4]
    c9a2:	9100      	str	r1, [sp, #0]
  /* Select Random Na (128-bits) */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
    c9a4:	9b01      	ldr	r3, [sp, #4]
    c9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c9a8:	695b      	ldr	r3, [r3, #20]
    c9aa:	3310      	adds	r3, #16
    c9ac:	2110      	movs	r1, #16
    c9ae:	4618      	mov	r0, r3
    c9b0:	f006 fc58 	bl	13264 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
    c9b4:	9b01      	ldr	r3, [sp, #4]
    c9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c9b8:	695b      	ldr	r3, [r3, #20]
    c9ba:	3310      	adds	r3, #16
    c9bc:	2210      	movs	r2, #16
    c9be:	4619      	mov	r1, r3
    c9c0:	480f      	ldr	r0, [pc, #60]	; (ca00 <smprScActJwncSetup+0x64>)
    c9c2:	f003 fb53 	bl	1006c <smpLogByteArray>

  /* Set Ra and Rb to zero */
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
    c9c6:	9b01      	ldr	r3, [sp, #4]
    c9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c9ca:	695b      	ldr	r3, [r3, #20]
    c9cc:	3320      	adds	r3, #32
    c9ce:	490d      	ldr	r1, [pc, #52]	; (ca04 <smprScActJwncSetup+0x68>)
    c9d0:	4618      	mov	r0, r3
    c9d2:	f00e fcbe 	bl	1b352 <Calc128Cpy>
  Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
    c9d6:	9b01      	ldr	r3, [sp, #4]
    c9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c9da:	695b      	ldr	r3, [r3, #20]
    c9dc:	3330      	adds	r3, #48	; 0x30
    c9de:	4909      	ldr	r1, [pc, #36]	; (ca04 <smprScActJwncSetup+0x68>)
    c9e0:	4618      	mov	r0, r3
    c9e2:	f00e fcb6 	bl	1b352 <Calc128Cpy>

  /* Next command is a Pair Rand from Initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    c9e6:	9b01      	ldr	r3, [sp, #4]
    c9e8:	2204      	movs	r2, #4
    c9ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Perform F4 Calculation of Cb */
  smpScActJwncCalcF4(pCcb, pMsg);
    c9ee:	9900      	ldr	r1, [sp, #0]
    c9f0:	9801      	ldr	r0, [sp, #4]
    c9f2:	f002 fc13 	bl	f21c <smpScActJwncCalcF4>
}
    c9f6:	bf00      	nop
    c9f8:	b003      	add	sp, #12
    c9fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c9fe:	bf00      	nop
    ca00:	00027f70 	.word	0x00027f70
    ca04:	00029a78 	.word	0x00029a78

0000ca08 <smprScActJwncSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ca08:	b500      	push	{lr}
    ca0a:	b083      	sub	sp, #12
    ca0c:	9001      	str	r0, [sp, #4]
    ca0e:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("JWNC Confirm", pMsg->aes.pCiphertext);
    ca10:	9b00      	ldr	r3, [sp, #0]
    ca12:	685b      	ldr	r3, [r3, #4]
    ca14:	2210      	movs	r2, #16
    ca16:	4619      	mov	r1, r3
    ca18:	4806      	ldr	r0, [pc, #24]	; (ca34 <smprScActJwncSendCnf+0x2c>)
    ca1a:	f003 fb27 	bl	1006c <smpLogByteArray>

  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
    ca1e:	9b00      	ldr	r3, [sp, #0]
    ca20:	685b      	ldr	r3, [r3, #4]
    ca22:	461a      	mov	r2, r3
    ca24:	9900      	ldr	r1, [sp, #0]
    ca26:	9801      	ldr	r0, [sp, #4]
    ca28:	f003 f9da 	bl	fde0 <smpScSendPairCnf>
}
    ca2c:	bf00      	nop
    ca2e:	b003      	add	sp, #12
    ca30:	f85d fb04 	ldr.w	pc, [sp], #4
    ca34:	00027f78 	.word	0x00027f78

0000ca38 <smprScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ca38:	b500      	push	{lr}
    ca3a:	b085      	sub	sp, #20
    ca3c:	9001      	str	r0, [sp, #4]
    ca3e:	9100      	str	r1, [sp, #0]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    ca40:	9b00      	ldr	r3, [sp, #0]
    ca42:	685b      	ldr	r3, [r3, #4]
    ca44:	3309      	adds	r3, #9
    ca46:	9303      	str	r3, [sp, #12]

  /* Na from initiator is in Random Cmd from initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
    ca48:	9b01      	ldr	r3, [sp, #4]
    ca4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ca4c:	695b      	ldr	r3, [r3, #20]
    ca4e:	2210      	movs	r2, #16
    ca50:	9903      	ldr	r1, [sp, #12]
    ca52:	4618      	mov	r0, r3
    ca54:	f00e fcb5 	bl	1b3c2 <WStrReverseCpy>

  /* Calculate Vb using G2 */
  smpScActJwncCalcG2(pCcb, pMsg);
    ca58:	9900      	ldr	r1, [sp, #0]
    ca5a:	9801      	ldr	r0, [sp, #4]
    ca5c:	f002 fc4c 	bl	f2f8 <smpScActJwncCalcG2>
}
    ca60:	bf00      	nop
    ca62:	b005      	add	sp, #20
    ca64:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca68 <smprScActJwncDisplay>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ca68:	b500      	push	{lr}
    ca6a:	b083      	sub	sp, #12
    ca6c:	9001      	str	r0, [sp, #4]
    ca6e:	9100      	str	r1, [sp, #0]
  /* Next command is a DH Key Check  */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
    ca70:	9b01      	ldr	r3, [sp, #4]
    ca72:	220d      	movs	r2, #13
    ca74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Send Pair Rand Nb to the Initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
    ca78:	9b01      	ldr	r3, [sp, #4]
    ca7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ca7c:	695b      	ldr	r3, [r3, #20]
    ca7e:	3310      	adds	r3, #16
    ca80:	461a      	mov	r2, r3
    ca82:	9900      	ldr	r1, [sp, #0]
    ca84:	9801      	ldr	r0, [sp, #4]
    ca86:	f003 f974 	bl	fd72 <smpScSendRand>

  /* Send Numeric Comparison to application, if applicable */
  smpScActJwncDisplay(pCcb, pMsg);
    ca8a:	9900      	ldr	r1, [sp, #0]
    ca8c:	9801      	ldr	r0, [sp, #4]
    ca8e:	f002 fc85 	bl	f39c <smpScActJwncDisplay>
}
    ca92:	bf00      	nop
    ca94:	b003      	add	sp, #12
    ca96:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca9a <smprScActPkStoreCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ca9a:	b500      	push	{lr}
    ca9c:	b085      	sub	sp, #20
    ca9e:	9001      	str	r0, [sp, #4]
    caa0:	9100      	str	r1, [sp, #0]
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    caa2:	9b00      	ldr	r3, [sp, #0]
    caa4:	685b      	ldr	r3, [r3, #4]
    caa6:	3309      	adds	r3, #9
    caa8:	9303      	str	r3, [sp, #12]

  /* Store the Cai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
    caaa:	9b01      	ldr	r3, [sp, #4]
    caac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    caae:	695b      	ldr	r3, [r3, #20]
    cab0:	3350      	adds	r3, #80	; 0x50
    cab2:	2210      	movs	r2, #16
    cab4:	9903      	ldr	r1, [sp, #12]
    cab6:	4618      	mov	r0, r3
    cab8:	f00e fc83 	bl	1b3c2 <WStrReverseCpy>
}
    cabc:	bf00      	nop
    cabe:	b005      	add	sp, #20
    cac0:	f85d fb04 	ldr.w	pc, [sp], #4

0000cac4 <smprScActPkStoreCnfAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnfAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cac4:	b500      	push	{lr}
    cac6:	b083      	sub	sp, #12
    cac8:	9001      	str	r0, [sp, #4]
    caca:	9100      	str	r1, [sp, #0]
  smprScActPkStoreCnf(pCcb, pMsg);
    cacc:	9900      	ldr	r1, [sp, #0]
    cace:	9801      	ldr	r0, [sp, #4]
    cad0:	f7ff ffe3 	bl	ca9a <smprScActPkStoreCnf>
  smprScActPkCalcCb(pCcb, pMsg);
    cad4:	9900      	ldr	r1, [sp, #0]
    cad6:	9801      	ldr	r0, [sp, #4]
    cad8:	f000 f814 	bl	cb04 <smprScActPkCalcCb>
}
    cadc:	bf00      	nop
    cade:	b003      	add	sp, #12
    cae0:	f85d fb04 	ldr.w	pc, [sp], #4

0000cae4 <smprScActPkStorePinAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStorePinAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cae4:	b500      	push	{lr}
    cae6:	b083      	sub	sp, #12
    cae8:	9001      	str	r0, [sp, #4]
    caea:	9100      	str	r1, [sp, #0]
  smprScActStoreLescPin(pCcb, pMsg);
    caec:	9900      	ldr	r1, [sp, #0]
    caee:	9801      	ldr	r0, [sp, #4]
    caf0:	f7ff ff06 	bl	c900 <smprScActStoreLescPin>
  smprScActPkCalcCb(pCcb, pMsg);
    caf4:	9900      	ldr	r1, [sp, #0]
    caf6:	9801      	ldr	r0, [sp, #4]
    caf8:	f000 f804 	bl	cb04 <smprScActPkCalcCb>
}
    cafc:	bf00      	nop
    cafe:	b003      	add	sp, #12
    cb00:	f85d fb04 	ldr.w	pc, [sp], #4

0000cb04 <smprScActPkCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cb04:	b530      	push	{r4, r5, lr}
    cb06:	b085      	sub	sp, #20
    cb08:	9003      	str	r0, [sp, #12]
    cb0a:	9102      	str	r1, [sp, #8]
  /* Get random Nbi */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
    cb0c:	9b03      	ldr	r3, [sp, #12]
    cb0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cb10:	695b      	ldr	r3, [r3, #20]
    cb12:	3310      	adds	r3, #16
    cb14:	2110      	movs	r1, #16
    cb16:	4618      	mov	r0, r3
    cb18:	f006 fba4 	bl	13264 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
    cb1c:	9b03      	ldr	r3, [sp, #12]
    cb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cb20:	695b      	ldr	r3, [r3, #20]
    cb22:	3310      	adds	r3, #16
    cb24:	2210      	movs	r2, #16
    cb26:	4619      	mov	r1, r3
    cb28:	4811      	ldr	r0, [pc, #68]	; (cb70 <smprScActPkCalcCb+0x6c>)
    cb2a:	f003 fa9f 	bl	1006c <smpLogByteArray>

  /* Next command is the Pair Random */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    cb2e:	9b03      	ldr	r3, [sp, #12]
    cb30:	2204      	movs	r2, #4
    cb32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Cb = f4(PKbx, PKax, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    cb36:	9b03      	ldr	r3, [sp, #12]
    cb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cb3a:	68db      	ldr	r3, [r3, #12]
    cb3c:	461c      	mov	r4, r3
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    cb3e:	9b03      	ldr	r3, [sp, #12]
    cb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cb42:	689b      	ldr	r3, [r3, #8]
    cb44:	461d      	mov	r5, r3
  SmpScCalcF4(pCcb, pMsg,
    cb46:	9803      	ldr	r0, [sp, #12]
    cb48:	f003 f981 	bl	fe4e <smpGetPkBit>
    cb4c:	4603      	mov	r3, r0
    cb4e:	461a      	mov	r2, r3
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
    cb50:	9b03      	ldr	r3, [sp, #12]
    cb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cb54:	695b      	ldr	r3, [r3, #20]
    cb56:	3310      	adds	r3, #16
  SmpScCalcF4(pCcb, pMsg,
    cb58:	9301      	str	r3, [sp, #4]
    cb5a:	9200      	str	r2, [sp, #0]
    cb5c:	462b      	mov	r3, r5
    cb5e:	4622      	mov	r2, r4
    cb60:	9902      	ldr	r1, [sp, #8]
    cb62:	9803      	ldr	r0, [sp, #12]
    cb64:	f003 f800 	bl	fb68 <SmpScCalcF4>
}
    cb68:	bf00      	nop
    cb6a:	b005      	add	sp, #20
    cb6c:	bd30      	pop	{r4, r5, pc}
    cb6e:	bf00      	nop
    cb70:	00027f70 	.word	0x00027f70

0000cb74 <smprScActPkSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cb74:	b500      	push	{lr}
    cb76:	b083      	sub	sp, #12
    cb78:	9001      	str	r0, [sp, #4]
    cb7a:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
    cb7c:	9b00      	ldr	r3, [sp, #0]
    cb7e:	685b      	ldr	r3, [r3, #4]
    cb80:	2210      	movs	r2, #16
    cb82:	4619      	mov	r1, r3
    cb84:	4806      	ldr	r0, [pc, #24]	; (cba0 <smprScActPkSendCnf+0x2c>)
    cb86:	f003 fa71 	bl	1006c <smpLogByteArray>

  /* Send the Cbi to the peer */
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
    cb8a:	9b00      	ldr	r3, [sp, #0]
    cb8c:	685b      	ldr	r3, [r3, #4]
    cb8e:	461a      	mov	r2, r3
    cb90:	9900      	ldr	r1, [sp, #0]
    cb92:	9801      	ldr	r0, [sp, #4]
    cb94:	f003 f924 	bl	fde0 <smpScSendPairCnf>
}
    cb98:	bf00      	nop
    cb9a:	b003      	add	sp, #12
    cb9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cba0:	00027f88 	.word	0x00027f88

0000cba4 <smprScActPkCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cba4:	b530      	push	{r4, r5, lr}
    cba6:	b087      	sub	sp, #28
    cba8:	9003      	str	r0, [sp, #12]
    cbaa:	9102      	str	r1, [sp, #8]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    cbac:	9b02      	ldr	r3, [sp, #8]
    cbae:	685b      	ldr	r3, [r3, #4]
    cbb0:	3309      	adds	r3, #9
    cbb2:	9305      	str	r3, [sp, #20]

  /* Copy the Nai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
    cbb4:	9b03      	ldr	r3, [sp, #12]
    cbb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cbb8:	695b      	ldr	r3, [r3, #20]
    cbba:	2210      	movs	r2, #16
    cbbc:	9905      	ldr	r1, [sp, #20]
    cbbe:	4618      	mov	r0, r3
    cbc0:	f00e fbff 	bl	1b3c2 <WStrReverseCpy>

  /* Cai = f4(PKax, PKbx, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    cbc4:	9b03      	ldr	r3, [sp, #12]
    cbc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cbc8:	689b      	ldr	r3, [r3, #8]
    cbca:	461c      	mov	r4, r3
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    cbcc:	9b03      	ldr	r3, [sp, #12]
    cbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cbd0:	68db      	ldr	r3, [r3, #12]
    cbd2:	461d      	mov	r5, r3
  SmpScCalcF4(pCcb, pMsg,
    cbd4:	9803      	ldr	r0, [sp, #12]
    cbd6:	f003 f93a 	bl	fe4e <smpGetPkBit>
    cbda:	4603      	mov	r3, r0
    cbdc:	461a      	mov	r2, r3
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Na_Ea);
    cbde:	9b03      	ldr	r3, [sp, #12]
    cbe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cbe2:	695b      	ldr	r3, [r3, #20]
  SmpScCalcF4(pCcb, pMsg,
    cbe4:	9301      	str	r3, [sp, #4]
    cbe6:	9200      	str	r2, [sp, #0]
    cbe8:	462b      	mov	r3, r5
    cbea:	4622      	mov	r2, r4
    cbec:	9902      	ldr	r1, [sp, #8]
    cbee:	9803      	ldr	r0, [sp, #12]
    cbf0:	f002 ffba 	bl	fb68 <SmpScCalcF4>
}
    cbf4:	bf00      	nop
    cbf6:	b007      	add	sp, #28
    cbf8:	bd30      	pop	{r4, r5, pc}
	...

0000cbfc <smprScActPkSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cbfc:	b500      	push	{lr}
    cbfe:	b085      	sub	sp, #20
    cc00:	9001      	str	r0, [sp, #4]
    cc02:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
    cc04:	9b00      	ldr	r3, [sp, #0]
    cc06:	685b      	ldr	r3, [r3, #4]
    cc08:	2210      	movs	r2, #16
    cc0a:	4619      	mov	r1, r3
    cc0c:	4824      	ldr	r0, [pc, #144]	; (cca0 <smprScActPkSendRand+0xa4>)
    cc0e:	f003 fa2d 	bl	1006c <smpLogByteArray>
  SMP_TRACE_128("Ca Peer", pCcb->pScCcb->pScratch->PeerCa_Ea);
    cc12:	9b01      	ldr	r3, [sp, #4]
    cc14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cc16:	695b      	ldr	r3, [r3, #20]
    cc18:	3350      	adds	r3, #80	; 0x50
    cc1a:	2210      	movs	r2, #16
    cc1c:	4619      	mov	r1, r3
    cc1e:	4821      	ldr	r0, [pc, #132]	; (cca4 <smprScActPkSendRand+0xa8>)
    cc20:	f003 fa24 	bl	1006c <smpLogByteArray>

  /* Verify the Calculated Cai to previously received Cai */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_RAND_LEN))
    cc24:	9b01      	ldr	r3, [sp, #4]
    cc26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cc28:	695b      	ldr	r3, [r3, #20]
    cc2a:	f103 0050 	add.w	r0, r3, #80	; 0x50
    cc2e:	9b00      	ldr	r3, [sp, #0]
    cc30:	685b      	ldr	r3, [r3, #4]
    cc32:	2210      	movs	r2, #16
    cc34:	4619      	mov	r1, r3
    cc36:	f7ff fa63 	bl	c100 <memcmp>
    cc3a:	4603      	mov	r3, r0
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	d003      	beq.n	cc48 <smprScActPkSendRand+0x4c>
  {
    smpScFailWithReattempt(pCcb);
    cc40:	9801      	ldr	r0, [sp, #4]
    cc42:	f003 f9ff 	bl	10044 <smpScFailWithReattempt>

    /* Post an event to move to the next passkey confirm or complete the process */
    hdr.param = pCcb->connId;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
    cc46:	e027      	b.n	cc98 <smprScActPkSendRand+0x9c>
    if (++pCcb->pScCcb->pkPos >= SMP_PK_BIT_COUNT)
    cc48:	9b01      	ldr	r3, [sp, #4]
    cc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cc4c:	78da      	ldrb	r2, [r3, #3]
    cc4e:	3201      	adds	r2, #1
    cc50:	b2d2      	uxtb	r2, r2
    cc52:	70da      	strb	r2, [r3, #3]
    cc54:	78db      	ldrb	r3, [r3, #3]
    cc56:	2b13      	cmp	r3, #19
    cc58:	d903      	bls.n	cc62 <smprScActPkSendRand+0x66>
      hdr.event = SMP_MSG_INT_PK_CMPL;
    cc5a:	231b      	movs	r3, #27
    cc5c:	f88d 300e 	strb.w	r3, [sp, #14]
    cc60:	e00f      	b.n	cc82 <smprScActPkSendRand+0x86>
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
    cc62:	9b01      	ldr	r3, [sp, #4]
    cc64:	2203      	movs	r2, #3
    cc66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      hdr.event = SMP_MSG_INT_PK_NEXT;
    cc6a:	231a      	movs	r3, #26
    cc6c:	f88d 300e 	strb.w	r3, [sp, #14]
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
    cc70:	9b01      	ldr	r3, [sp, #4]
    cc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cc74:	695b      	ldr	r3, [r3, #20]
    cc76:	3310      	adds	r3, #16
    cc78:	461a      	mov	r2, r3
    cc7a:	9900      	ldr	r1, [sp, #0]
    cc7c:	9801      	ldr	r0, [sp, #4]
    cc7e:	f003 f878 	bl	fd72 <smpScSendRand>
    hdr.param = pCcb->connId;
    cc82:	9b01      	ldr	r3, [sp, #4]
    cc84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    cc88:	b29b      	uxth	r3, r3
    cc8a:	f8ad 300c 	strh.w	r3, [sp, #12]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    cc8e:	ab03      	add	r3, sp, #12
    cc90:	4619      	mov	r1, r3
    cc92:	9801      	ldr	r0, [sp, #4]
    cc94:	f000 fee6 	bl	da64 <smpSmExecute>
}
    cc98:	bf00      	nop
    cc9a:	b005      	add	sp, #20
    cc9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cca0:	00027f8c 	.word	0x00027f8c
    cca4:	00027f90 	.word	0x00027f90

0000cca8 <smprScActOobSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cca8:	b082      	sub	sp, #8
    ccaa:	9001      	str	r0, [sp, #4]
    ccac:	9100      	str	r1, [sp, #0]
  /* The next command is the Pair Rand from the initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    ccae:	9b01      	ldr	r3, [sp, #4]
    ccb0:	2204      	movs	r2, #4
    ccb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
    ccb6:	bf00      	nop
    ccb8:	b002      	add	sp, #8
    ccba:	4770      	bx	lr

0000ccbc <smprScActOobCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ccbc:	b500      	push	{lr}
    ccbe:	b089      	sub	sp, #36	; 0x24
    ccc0:	9003      	str	r0, [sp, #12]
    ccc2:	9102      	str	r1, [sp, #8]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    ccc4:	9b02      	ldr	r3, [sp, #8]
    ccc6:	685b      	ldr	r3, [r3, #4]
    ccc8:	3309      	adds	r3, #9
    ccca:	9307      	str	r3, [sp, #28]

  /* Copy the Na from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
    cccc:	9b03      	ldr	r3, [sp, #12]
    ccce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ccd0:	695b      	ldr	r3, [r3, #20]
    ccd2:	2210      	movs	r2, #16
    ccd4:	9907      	ldr	r1, [sp, #28]
    ccd6:	4618      	mov	r0, r3
    ccd8:	f00e fb73 	bl	1b3c2 <WStrReverseCpy>

  /* If the peer device's OOB data flag does not indicate remote OOB data has been received,
     clear Rb. */
  if (pCcb->pairReq[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
    ccdc:	9b03      	ldr	r3, [sp, #12]
    ccde:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    cce2:	2b01      	cmp	r3, #1
    cce4:	d007      	beq.n	ccf6 <smprScActOobCalcCa+0x3a>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
    cce6:	9b03      	ldr	r3, [sp, #12]
    cce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ccea:	695b      	ldr	r3, [r3, #20]
    ccec:	3330      	adds	r3, #48	; 0x30
    ccee:	491d      	ldr	r1, [pc, #116]	; (cd64 <smprScActOobCalcCa+0xa8>)
    ccf0:	4618      	mov	r0, r3
    ccf2:	f00e fb2e 	bl	1b352 <Calc128Cpy>
  }

  /* If we indicated the presence of remote OOB data has been received, calculate Ca. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
    ccf6:	9b03      	ldr	r3, [sp, #12]
    ccf8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    ccfc:	2b01      	cmp	r3, #1
    ccfe:	d114      	bne.n	cd2a <smprScActOobCalcCa+0x6e>
  {
    /* Calculate Ca using Toolkit function F4 */
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    cd00:	9b03      	ldr	r3, [sp, #12]
    cd02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cd04:	689b      	ldr	r3, [r3, #8]
    cd06:	461a      	mov	r2, r3
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    cd08:	9b03      	ldr	r3, [sp, #12]
    cd0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cd0c:	689b      	ldr	r3, [r3, #8]
    cd0e:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Ra);
    cd10:	9b03      	ldr	r3, [sp, #12]
    cd12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cd14:	695b      	ldr	r3, [r3, #20]
    cd16:	3320      	adds	r3, #32
    SmpScCalcF4(pCcb, pMsg,
    cd18:	9301      	str	r3, [sp, #4]
    cd1a:	2300      	movs	r3, #0
    cd1c:	9300      	str	r3, [sp, #0]
    cd1e:	460b      	mov	r3, r1
    cd20:	9902      	ldr	r1, [sp, #8]
    cd22:	9803      	ldr	r0, [sp, #12]
    cd24:	f002 ff20 	bl	fb68 <SmpScCalcF4>
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
    msg.pPlainText = NULL;

    smpSmExecute(pCcb, (smpMsg_t *) &msg);
  }
}
    cd28:	e017      	b.n	cd5a <smprScActOobCalcCa+0x9e>
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*)calc128Zeros);
    cd2a:	9b03      	ldr	r3, [sp, #12]
    cd2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cd2e:	695b      	ldr	r3, [r3, #20]
    cd30:	3320      	adds	r3, #32
    cd32:	490c      	ldr	r1, [pc, #48]	; (cd64 <smprScActOobCalcCa+0xa8>)
    cd34:	4618      	mov	r0, r3
    cd36:	f00e fb0c 	bl	1b352 <Calc128Cpy>
    msg.hdr.param = pCcb->connId;
    cd3a:	9b03      	ldr	r3, [sp, #12]
    cd3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    cd40:	b29b      	uxth	r3, r3
    cd42:	f8ad 3010 	strh.w	r3, [sp, #16]
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
    cd46:	231c      	movs	r3, #28
    cd48:	f88d 3012 	strb.w	r3, [sp, #18]
    msg.pPlainText = NULL;
    cd4c:	2300      	movs	r3, #0
    cd4e:	9306      	str	r3, [sp, #24]
    smpSmExecute(pCcb, (smpMsg_t *) &msg);
    cd50:	ab04      	add	r3, sp, #16
    cd52:	4619      	mov	r1, r3
    cd54:	9803      	ldr	r0, [sp, #12]
    cd56:	f000 fe85 	bl	da64 <smpSmExecute>
}
    cd5a:	bf00      	nop
    cd5c:	b009      	add	sp, #36	; 0x24
    cd5e:	f85d fb04 	ldr.w	pc, [sp], #4
    cd62:	bf00      	nop
    cd64:	00029a78 	.word	0x00029a78

0000cd68 <smprScActOobSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cd68:	b500      	push	{lr}
    cd6a:	b083      	sub	sp, #12
    cd6c:	9001      	str	r0, [sp, #4]
    cd6e:	9100      	str	r1, [sp, #0]
  /* Only compare Ca if we indicated that we received OOB data. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
    cd70:	9b01      	ldr	r3, [sp, #4]
    cd72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    cd76:	2b01      	cmp	r3, #1
    cd78:	d118      	bne.n	cdac <smprScActOobSendRand+0x44>
  {
    SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
    cd7a:	9b00      	ldr	r3, [sp, #0]
    cd7c:	685b      	ldr	r3, [r3, #4]
    cd7e:	2210      	movs	r2, #16
    cd80:	4619      	mov	r1, r3
    cd82:	481b      	ldr	r0, [pc, #108]	; (cdf0 <smprScActOobSendRand+0x88>)
    cd84:	f003 f972 	bl	1006c <smpLogByteArray>

    /* Check that the Ca value passed via OOB methods match expectations */
    if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN))
    cd88:	9b01      	ldr	r3, [sp, #4]
    cd8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cd8c:	695b      	ldr	r3, [r3, #20]
    cd8e:	f103 0050 	add.w	r0, r3, #80	; 0x50
    cd92:	9b00      	ldr	r3, [sp, #0]
    cd94:	685b      	ldr	r3, [r3, #4]
    cd96:	2210      	movs	r2, #16
    cd98:	4619      	mov	r1, r3
    cd9a:	f7ff f9b1 	bl	c100 <memcmp>
    cd9e:	4603      	mov	r3, r0
    cda0:	2b00      	cmp	r3, #0
    cda2:	d003      	beq.n	cdac <smprScActOobSendRand+0x44>
    {
      smpScFailWithReattempt(pCcb);
    cda4:	9801      	ldr	r0, [sp, #4]
    cda6:	f003 f94d 	bl	10044 <smpScFailWithReattempt>
      return;
    cdaa:	e01d      	b.n	cde8 <smprScActOobSendRand+0x80>
    }
  }

  /* Next command is a DK Key Check from initiator */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
    cdac:	9b01      	ldr	r3, [sp, #4]
    cdae:	220d      	movs	r2, #13
    cdb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Get a random Nb */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
    cdb4:	9b01      	ldr	r3, [sp, #4]
    cdb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cdb8:	695b      	ldr	r3, [r3, #20]
    cdba:	3310      	adds	r3, #16
    cdbc:	2110      	movs	r1, #16
    cdbe:	4618      	mov	r0, r3
    cdc0:	f006 fa50 	bl	13264 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
    cdc4:	9b01      	ldr	r3, [sp, #4]
    cdc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cdc8:	695b      	ldr	r3, [r3, #20]
    cdca:	3310      	adds	r3, #16
    cdcc:	2210      	movs	r2, #16
    cdce:	4619      	mov	r1, r3
    cdd0:	4808      	ldr	r0, [pc, #32]	; (cdf4 <smprScActOobSendRand+0x8c>)
    cdd2:	f003 f94b 	bl	1006c <smpLogByteArray>

  /* Send the rand Nb to the initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
    cdd6:	9b01      	ldr	r3, [sp, #4]
    cdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cdda:	695b      	ldr	r3, [r3, #20]
    cddc:	3310      	adds	r3, #16
    cdde:	461a      	mov	r2, r3
    cde0:	9900      	ldr	r1, [sp, #0]
    cde2:	9801      	ldr	r0, [sp, #4]
    cde4:	f002 ffc5 	bl	fd72 <smpScSendRand>
}
    cde8:	b003      	add	sp, #12
    cdea:	f85d fb04 	ldr.w	pc, [sp], #4
    cdee:	bf00      	nop
    cdf0:	00027f8c 	.word	0x00027f8c
    cdf4:	00027f70 	.word	0x00027f70

0000cdf8 <smprScActStoreDhCheck>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActStoreDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cdf8:	b500      	push	{lr}
    cdfa:	b085      	sub	sp, #20
    cdfc:	9001      	str	r0, [sp, #4]
    cdfe:	9100      	str	r1, [sp, #0]
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    ce00:	9b00      	ldr	r3, [sp, #0]
    ce02:	685b      	ldr	r3, [r3, #4]
    ce04:	3309      	adds	r3, #9
    ce06:	9303      	str	r3, [sp, #12]

  /* Signal that not further commands are expected until Key Distribution phase (if applicable) */
  pCcb->nextCmdCode = SMP_CMD_MAX;
    ce08:	9b01      	ldr	r3, [sp, #4]
    ce0a:	220f      	movs	r2, #15
    ce0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* The Ea from the peer is in the cmd message (copy as MSB First) */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
    ce10:	9b01      	ldr	r3, [sp, #4]
    ce12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ce14:	695b      	ldr	r3, [r3, #20]
    ce16:	3350      	adds	r3, #80	; 0x50
    ce18:	2210      	movs	r2, #16
    ce1a:	9903      	ldr	r1, [sp, #12]
    ce1c:	4618      	mov	r0, r3
    ce1e:	f00e fad0 	bl	1b3c2 <WStrReverseCpy>
}
    ce22:	bf00      	nop
    ce24:	b005      	add	sp, #20
    ce26:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce2a <smprScActWaitDhCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActWaitDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ce2a:	b500      	push	{lr}
    ce2c:	b083      	sub	sp, #12
    ce2e:	9001      	str	r0, [sp, #4]
    ce30:	9100      	str	r1, [sp, #0]
  /* Next command is a DH Key Check */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
    ce32:	9b01      	ldr	r3, [sp, #4]
    ce34:	220d      	movs	r2, #13
    ce36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
    ce3a:	9b01      	ldr	r3, [sp, #4]
    ce3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ce3e:	785b      	ldrb	r3, [r3, #1]
    ce40:	2b03      	cmp	r3, #3
    ce42:	d108      	bne.n	ce56 <smprScActWaitDhCheck+0x2c>
  {
    /* Send the Pair Rand Nb */
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
    ce44:	9b01      	ldr	r3, [sp, #4]
    ce46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ce48:	695b      	ldr	r3, [r3, #20]
    ce4a:	3310      	adds	r3, #16
    ce4c:	461a      	mov	r2, r3
    ce4e:	9900      	ldr	r1, [sp, #0]
    ce50:	9801      	ldr	r0, [sp, #4]
    ce52:	f002 ff8e 	bl	fd72 <smpScSendRand>
  }
}
    ce56:	bf00      	nop
    ce58:	b003      	add	sp, #12
    ce5a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce5e <smprScActCalcDHKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActCalcDHKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ce5e:	b500      	push	{lr}
    ce60:	b085      	sub	sp, #20
    ce62:	9001      	str	r0, [sp, #4]
    ce64:	9100      	str	r1, [sp, #0]
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
    ce66:	9b01      	ldr	r3, [sp, #4]
    ce68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    ce6c:	2b0d      	cmp	r3, #13
    ce6e:	d10c      	bne.n	ce8a <smprScActCalcDHKey+0x2c>
  {
    uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    ce70:	9b00      	ldr	r3, [sp, #0]
    ce72:	685b      	ldr	r3, [r3, #4]
    ce74:	3309      	adds	r3, #9
    ce76:	9303      	str	r3, [sp, #12]

    /* The Ea from the peer is in the cmd message (copy as MSB First) */
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
    ce78:	9b01      	ldr	r3, [sp, #4]
    ce7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ce7c:	695b      	ldr	r3, [r3, #20]
    ce7e:	3350      	adds	r3, #80	; 0x50
    ce80:	2210      	movs	r2, #16
    ce82:	9903      	ldr	r1, [sp, #12]
    ce84:	4618      	mov	r0, r3
    ce86:	f00e fa9c 	bl	1b3c2 <WStrReverseCpy>
  }

  /* Complete the calculation */
  smpScActCalcSharedSecret(pCcb, pMsg);
    ce8a:	9900      	ldr	r1, [sp, #0]
    ce8c:	9801      	ldr	r0, [sp, #4]
    ce8e:	f002 fb31 	bl	f4f4 <smpScActCalcSharedSecret>
}
    ce92:	bf00      	nop
    ce94:	b005      	add	sp, #20
    ce96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000ce9c <smprScActDHKeyCheckSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActDHKeyCheckSend(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ce9c:	b500      	push	{lr}
    ce9e:	b085      	sub	sp, #20
    cea0:	9001      	str	r0, [sp, #4]
    cea2:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
    cea4:	9b00      	ldr	r3, [sp, #0]
    cea6:	685b      	ldr	r3, [r3, #4]
    cea8:	2210      	movs	r2, #16
    ceaa:	4619      	mov	r1, r3
    ceac:	4838      	ldr	r0, [pc, #224]	; (cf90 <smprScActDHKeyCheckSend+0xf4>)
    ceae:	f003 f8dd 	bl	1006c <smpLogByteArray>

  /* The Eb from the CMAC calculation */
  Calc128Cpy(pCcb->pScCcb->pScratch->Nb_Eb, pMsg->aes.pCiphertext);
    ceb2:	9b01      	ldr	r3, [sp, #4]
    ceb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ceb6:	695b      	ldr	r3, [r3, #20]
    ceb8:	f103 0210 	add.w	r2, r3, #16
    cebc:	9b00      	ldr	r3, [sp, #0]
    cebe:	685b      	ldr	r3, [r3, #4]
    cec0:	4619      	mov	r1, r3
    cec2:	4610      	mov	r0, r2
    cec4:	f00e fa45 	bl	1b352 <Calc128Cpy>

  /* Verify the DH Key Check Ea with the value received from the initiator */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN) == 0)
    cec8:	9b01      	ldr	r3, [sp, #4]
    ceca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cecc:	695b      	ldr	r3, [r3, #20]
    cece:	f103 0050 	add.w	r0, r3, #80	; 0x50
    ced2:	9b01      	ldr	r3, [sp, #4]
    ced4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ced6:	695b      	ldr	r3, [r3, #20]
    ced8:	2210      	movs	r2, #16
    ceda:	4619      	mov	r1, r3
    cedc:	f7ff f910 	bl	c100 <memcmp>
    cee0:	4603      	mov	r3, r0
    cee2:	2b00      	cmp	r3, #0
    cee4:	d124      	bne.n	cf30 <smprScActDHKeyCheckSend+0x94>
  {
    /* Adjust key based on max key length */
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
                          pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
    cee6:	9b01      	ldr	r3, [sp, #4]
    cee8:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    ceec:	9b01      	ldr	r3, [sp, #4]
    ceee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
    cef2:	4293      	cmp	r3, r2
    cef4:	bf28      	it	cs
    cef6:	4613      	movcs	r3, r2
    cef8:	f88d 300f 	strb.w	r3, [sp, #15]

    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
    cefc:	9b01      	ldr	r3, [sp, #4]
    cefe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cf00:	699b      	ldr	r3, [r3, #24]
    cf02:	f103 0210 	add.w	r2, r3, #16
    cf06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf0a:	18d0      	adds	r0, r2, r3
    cf0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf10:	f1c3 0310 	rsb	r3, r3, #16
    cf14:	461a      	mov	r2, r3
    cf16:	2100      	movs	r1, #0
    cf18:	f7ff f9bc 	bl	c294 <memset>

    /* Send the DH Key check Eb to the initiator */
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cf20:	695b      	ldr	r3, [r3, #20]
    cf22:	3310      	adds	r3, #16
    cf24:	461a      	mov	r2, r3
    cf26:	9900      	ldr	r1, [sp, #0]
    cf28:	9801      	ldr	r0, [sp, #4]
    cf2a:	f002 feeb 	bl	fd04 <smpScSendDHKeyCheck>
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
    cf2e:	e02a      	b.n	cf86 <smprScActDHKeyCheckSend+0xea>
    hdr.param = pCcb->connId;
    cf30:	9b01      	ldr	r3, [sp, #4]
    cf32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    cf36:	b29b      	uxth	r3, r3
    cf38:	f8ad 3008 	strh.w	r3, [sp, #8]
    hdr.status = SMP_ERR_DH_KEY_CHECK;
    cf3c:	230b      	movs	r3, #11
    cf3e:	f88d 300b 	strb.w	r3, [sp, #11]
    pCcb->attempts++;
    cf42:	9b01      	ldr	r3, [sp, #4]
    cf44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    cf48:	3301      	adds	r3, #1
    cf4a:	b2da      	uxtb	r2, r3
    cf4c:	9b01      	ldr	r3, [sp, #4]
    cf4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
    cf52:	9b01      	ldr	r3, [sp, #4]
    cf54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    cf58:	4618      	mov	r0, r3
    cf5a:	f000 ff79 	bl	de50 <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
    cf5e:	9b01      	ldr	r3, [sp, #4]
    cf60:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
    cf64:	4b0b      	ldr	r3, [pc, #44]	; (cf94 <smprScActDHKeyCheckSend+0xf8>)
    cf66:	681b      	ldr	r3, [r3, #0]
    cf68:	79db      	ldrb	r3, [r3, #7]
    cf6a:	429a      	cmp	r2, r3
    cf6c:	d103      	bne.n	cf76 <smprScActDHKeyCheckSend+0xda>
      hdr.event = SMP_MSG_INT_MAX_ATTEMPTS;
    cf6e:	230d      	movs	r3, #13
    cf70:	f88d 300a 	strb.w	r3, [sp, #10]
    cf74:	e002      	b.n	cf7c <smprScActDHKeyCheckSend+0xe0>
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    cf76:	231d      	movs	r3, #29
    cf78:	f88d 300a 	strb.w	r3, [sp, #10]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    cf7c:	ab02      	add	r3, sp, #8
    cf7e:	4619      	mov	r1, r3
    cf80:	9801      	ldr	r0, [sp, #4]
    cf82:	f000 fd6f 	bl	da64 <smpSmExecute>
}
    cf86:	bf00      	nop
    cf88:	b005      	add	sp, #20
    cf8a:	f85d fb04 	ldr.w	pc, [sp], #4
    cf8e:	bf00      	nop
    cf90:	00027f98 	.word	0x00027f98
    cf94:	10002b94 	.word	0x10002b94

0000cf98 <SmprScInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmprScInit(void)
{
    cf98:	b508      	push	{r3, lr}
  /* set up callback interface */
  smpCb.pSlave = &smprScSmIf;
    cf9a:	4b04      	ldr	r3, [pc, #16]	; (cfac <SmprScInit+0x14>)
    cf9c:	4a04      	ldr	r2, [pc, #16]	; (cfb0 <SmprScInit+0x18>)
    cf9e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* General SMP LESC Initialization */
  SmpScInit();
    cfa2:	f002 fe0f 	bl	fbc4 <SmpScInit>
}
    cfa6:	bf00      	nop
    cfa8:	bd08      	pop	{r3, pc}
    cfaa:	bf00      	nop
    cfac:	10008824 	.word	0x10008824
    cfb0:	000294f4 	.word	0x000294f4

0000cfb4 <SmprInit>:
 */
/*************************************************************************************************/
void SmprInit(void)
{
  /* set up state machine interface */
  smpCb.pSlave = &smprSmIf;
    cfb4:	4b06      	ldr	r3, [pc, #24]	; (cfd0 <SmprInit+0x1c>)
    cfb6:	4a07      	ldr	r2, [pc, #28]	; (cfd4 <SmprInit+0x20>)
    cfb8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  smpCb.procPairing = smpProcPairing;
    cfbc:	4b04      	ldr	r3, [pc, #16]	; (cfd0 <SmprInit+0x1c>)
    cfbe:	4a06      	ldr	r2, [pc, #24]	; (cfd8 <SmprInit+0x24>)
    cfc0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  smpCb.procAuthReq = smpAuthReq;
    cfc4:	4b02      	ldr	r3, [pc, #8]	; (cfd0 <SmprInit+0x1c>)
    cfc6:	4a05      	ldr	r2, [pc, #20]	; (cfdc <SmprInit+0x28>)
    cfc8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
}
    cfcc:	bf00      	nop
    cfce:	4770      	bx	lr
    cfd0:	10008824 	.word	0x10008824
    cfd4:	00029680 	.word	0x00029680
    cfd8:	0000d15d 	.word	0x0000d15d
    cfdc:	0000d365 	.word	0x0000d365

0000cfe0 <smpStartRspTimer>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpStartRspTimer(smpCcb_t *pCcb)
{
    cfe0:	b500      	push	{lr}
    cfe2:	b083      	sub	sp, #12
    cfe4:	9001      	str	r0, [sp, #4]
  /* start smp response timer */
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
    cfe6:	9b01      	ldr	r3, [sp, #4]
    cfe8:	220f      	movs	r2, #15
    cfea:	731a      	strb	r2, [r3, #12]
  pCcb->rspTimer.msg.status = SMP_ERR_TIMEOUT;
    cfec:	9b01      	ldr	r3, [sp, #4]
    cfee:	22e1      	movs	r2, #225	; 0xe1
    cff0:	735a      	strb	r2, [r3, #13]
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
    cff2:	9b01      	ldr	r3, [sp, #4]
    cff4:	211e      	movs	r1, #30
    cff6:	4618      	mov	r0, r3
    cff8:	f00b fdbe 	bl	18b78 <WsfTimerStartSec>
}
    cffc:	bf00      	nop
    cffe:	b003      	add	sp, #12
    d000:	f85d fb04 	ldr.w	pc, [sp], #4

0000d004 <smpActNone>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNone(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d004:	b082      	sub	sp, #8
    d006:	9001      	str	r0, [sp, #4]
    d008:	9100      	str	r1, [sp, #0]
  return;
    d00a:	bf00      	nop
}
    d00c:	b002      	add	sp, #8
    d00e:	4770      	bx	lr

0000d010 <smpCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCleanup(smpCcb_t *pCcb)
{
    d010:	b500      	push	{lr}
    d012:	b083      	sub	sp, #12
    d014:	9001      	str	r0, [sp, #4]
  /* free scratch buffer */
  if (pCcb->pScr != NULL)
    d016:	9b01      	ldr	r3, [sp, #4]
    d018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d01a:	2b00      	cmp	r3, #0
    d01c:	d007      	beq.n	d02e <smpCleanup+0x1e>
  {
    WsfBufFree(pCcb->pScr);
    d01e:	9b01      	ldr	r3, [sp, #4]
    d020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d022:	4618      	mov	r0, r3
    d024:	f00b f9d0 	bl	183c8 <WsfBufFree>
    pCcb->pScr = NULL;
    d028:	9b01      	ldr	r3, [sp, #4]
    d02a:	2200      	movs	r2, #0
    d02c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* stop response timer */
  WsfTimerStop(&pCcb->rspTimer);
    d02e:	9b01      	ldr	r3, [sp, #4]
    d030:	4618      	mov	r0, r3
    d032:	f00b fdc5 	bl	18bc0 <WsfTimerStop>

  /* stop wait interval timer */
  WsfTimerStop(&pCcb->waitTimer);
    d036:	9b01      	ldr	r3, [sp, #4]
    d038:	3310      	adds	r3, #16
    d03a:	4618      	mov	r0, r3
    d03c:	f00b fdc0 	bl	18bc0 <WsfTimerStop>

  pCcb->secReq = FALSE;
    d040:	9b01      	ldr	r3, [sp, #4]
    d042:	2200      	movs	r2, #0
    d044:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    d048:	9b01      	ldr	r3, [sp, #4]
    d04a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d04e:	2b00      	cmp	r3, #0
    d050:	d001      	beq.n	d056 <smpCleanup+0x46>
    d052:	220b      	movs	r2, #11
    d054:	e000      	b.n	d058 <smpCleanup+0x48>
    d056:	2201      	movs	r2, #1
    d058:	9b01      	ldr	r3, [sp, #4]
    d05a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  pCcb->lastSentKey = 0;
    d05e:	9b01      	ldr	r3, [sp, #4]
    d060:	2200      	movs	r2, #0
    d062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
    d066:	bf00      	nop
    d068:	b003      	add	sp, #12
    d06a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d06e <smpActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d06e:	b500      	push	{lr}
    d070:	b083      	sub	sp, #12
    d072:	9001      	str	r0, [sp, #4]
    d074:	9100      	str	r1, [sp, #0]
  smpCleanup(pCcb);
    d076:	9801      	ldr	r0, [sp, #4]
    d078:	f7ff ffca 	bl	d010 <smpCleanup>
}
    d07c:	bf00      	nop
    d07e:	b003      	add	sp, #12
    d080:	f85d fb04 	ldr.w	pc, [sp], #4

0000d084 <smpSendPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPairingFailed(smpCcb_t *pCcb, uint8_t reason)
{
    d084:	b500      	push	{lr}
    d086:	b085      	sub	sp, #20
    d088:	9001      	str	r0, [sp, #4]
    d08a:	460b      	mov	r3, r1
    d08c:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t *pPacket;
  uint8_t *p;

  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
    d090:	200a      	movs	r0, #10
    d092:	f001 fbac 	bl	e7ee <smpMsgAlloc>
    d096:	9003      	str	r0, [sp, #12]
    d098:	9b03      	ldr	r3, [sp, #12]
    d09a:	2b00      	cmp	r3, #0
    d09c:	d011      	beq.n	d0c2 <smpSendPairingFailed+0x3e>
  {
    p = pPacket + L2C_PAYLOAD_START;
    d09e:	9b03      	ldr	r3, [sp, #12]
    d0a0:	3308      	adds	r3, #8
    d0a2:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
    d0a4:	9b02      	ldr	r3, [sp, #8]
    d0a6:	1c5a      	adds	r2, r3, #1
    d0a8:	9202      	str	r2, [sp, #8]
    d0aa:	2205      	movs	r2, #5
    d0ac:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
    d0ae:	9b02      	ldr	r3, [sp, #8]
    d0b0:	1c5a      	adds	r2, r3, #1
    d0b2:	9202      	str	r2, [sp, #8]
    d0b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d0b8:	701a      	strb	r2, [r3, #0]

    smpSendPkt(pCcb, pPacket);
    d0ba:	9903      	ldr	r1, [sp, #12]
    d0bc:	9801      	ldr	r0, [sp, #4]
    d0be:	f001 fb55 	bl	e76c <smpSendPkt>
  }
}
    d0c2:	bf00      	nop
    d0c4:	b005      	add	sp, #20
    d0c6:	f85d fb04 	ldr.w	pc, [sp], #4

0000d0ca <smpActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d0ca:	b500      	push	{lr}
    d0cc:	b083      	sub	sp, #12
    d0ce:	9001      	str	r0, [sp, #4]
    d0d0:	9100      	str	r1, [sp, #0]
  /* clean up */
  smpCleanup(pCcb);
    d0d2:	9801      	ldr	r0, [sp, #4]
    d0d4:	f7ff ff9c 	bl	d010 <smpCleanup>

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    d0d8:	9b01      	ldr	r3, [sp, #4]
    d0da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d0de:	2200      	movs	r2, #0
    d0e0:	2101      	movs	r1, #1
    d0e2:	4618      	mov	r0, r3
    d0e4:	f004 fbb2 	bl	1184c <DmConnSetIdle>

  /* notify DM of pairing failure */
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    d0e8:	9b00      	ldr	r3, [sp, #0]
    d0ea:	222b      	movs	r2, #43	; 0x2b
    d0ec:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    d0ee:	9800      	ldr	r0, [sp, #0]
    d0f0:	f005 fb34 	bl	1275c <DmSmpCbackExec>
}
    d0f4:	bf00      	nop
    d0f6:	b003      	add	sp, #12
    d0f8:	f85d fb04 	ldr.w	pc, [sp], #4

0000d0fc <smpActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d0fc:	b500      	push	{lr}
    d0fe:	b083      	sub	sp, #12
    d100:	9001      	str	r0, [sp, #4]
    d102:	9100      	str	r1, [sp, #0]
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
    d104:	9b00      	ldr	r3, [sp, #0]
    d106:	78db      	ldrb	r3, [r3, #3]
    d108:	4619      	mov	r1, r3
    d10a:	9801      	ldr	r0, [sp, #4]
    d10c:	f7ff ffba 	bl	d084 <smpSendPairingFailed>

  smpActPairingFailed(pCcb, pMsg);
    d110:	9900      	ldr	r1, [sp, #0]
    d112:	9801      	ldr	r0, [sp, #4]
    d114:	f7ff ffd9 	bl	d0ca <smpActPairingFailed>
}
    d118:	bf00      	nop
    d11a:	b003      	add	sp, #12
    d11c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d120 <smpActStorePin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActStorePin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d120:	b500      	push	{lr}
    d122:	b083      	sub	sp, #12
    d124:	9001      	str	r0, [sp, #4]
    d126:	9100      	str	r1, [sp, #0]
  /* copy authentication data to scratchpad */
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    d128:	9b01      	ldr	r3, [sp, #4]
    d12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d12c:	4618      	mov	r0, r3
    d12e:	9b00      	ldr	r3, [sp, #0]
    d130:	1d19      	adds	r1, r3, #4
    d132:	9b00      	ldr	r3, [sp, #0]
    d134:	7d1b      	ldrb	r3, [r3, #20]
    d136:	461a      	mov	r2, r3
    d138:	f7ff f812 	bl	c160 <memcpy>

  /* zero out unused pin data */
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
    d13c:	9b00      	ldr	r3, [sp, #0]
    d13e:	7d1b      	ldrb	r3, [r3, #20]
    d140:	2b03      	cmp	r3, #3
    d142:	d107      	bne.n	d154 <smpActStorePin+0x34>
  {
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
    d144:	9b01      	ldr	r3, [sp, #4]
    d146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d148:	3303      	adds	r3, #3
    d14a:	220d      	movs	r2, #13
    d14c:	2100      	movs	r1, #0
    d14e:	4618      	mov	r0, r3
    d150:	f7ff f8a0 	bl	c294 <memset>
  }
}
    d154:	bf00      	nop
    d156:	b003      	add	sp, #12
    d158:	f85d fb04 	ldr.w	pc, [sp], #4

0000d15c <smpProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
    d15c:	b500      	push	{lr}
    d15e:	b087      	sub	sp, #28
    d160:	9003      	str	r0, [sp, #12]
    d162:	9102      	str	r1, [sp, #8]
    d164:	9201      	str	r2, [sp, #4]
  bool_t          justWorks = TRUE;
    d166:	2301      	movs	r3, #1
    d168:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
    d16c:	9b01      	ldr	r3, [sp, #4]
    d16e:	2200      	movs	r2, #0
    d170:	701a      	strb	r2, [r3, #0]
  *pOob = FALSE;
    d172:	9b02      	ldr	r3, [sp, #8]
    d174:	2200      	movs	r2, #0
    d176:	701a      	strb	r2, [r3, #0]

  /* if OOB available use that */
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
    d178:	9b03      	ldr	r3, [sp, #12]
    d17a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    d17e:	2b01      	cmp	r3, #1
    d180:	d10b      	bne.n	d19a <smpProcPairing+0x3e>
      pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
    d182:	9b03      	ldr	r3, [sp, #12]
    d184:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
    d188:	2b01      	cmp	r3, #1
    d18a:	d106      	bne.n	d19a <smpProcPairing+0x3e>
  {
    *pOob = SMP_OOB_DATA_PRESENT;
    d18c:	9b02      	ldr	r3, [sp, #8]
    d18e:	2201      	movs	r2, #1
    d190:	701a      	strb	r2, [r3, #0]
    justWorks = FALSE;
    d192:	2300      	movs	r3, #0
    d194:	f88d 3017 	strb.w	r3, [sp, #23]
    d198:	e068      	b.n	d26c <smpProcPairing+0x110>
  }
  /* if either device set mitm flag */
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
    d19a:	9b03      	ldr	r3, [sp, #12]
    d19c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    d1a0:	f003 0304 	and.w	r3, r3, #4
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d106      	bne.n	d1b6 <smpProcPairing+0x5a>
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
    d1a8:	9b03      	ldr	r3, [sp, #12]
    d1aa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    d1ae:	f003 0304 	and.w	r3, r3, #4
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d05a      	beq.n	d26c <smpProcPairing+0x110>
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
    d1b6:	9b03      	ldr	r3, [sp, #12]
    d1b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    d1bc:	2b03      	cmp	r3, #3
    d1be:	d055      	beq.n	d26c <smpProcPairing+0x110>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
    d1c0:	9b03      	ldr	r3, [sp, #12]
    d1c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
    d1c6:	2b03      	cmp	r3, #3
    d1c8:	d050      	beq.n	d26c <smpProcPairing+0x110>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
    d1ca:	9b03      	ldr	r3, [sp, #12]
    d1cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d004      	beq.n	d1de <smpProcPairing+0x82>
           (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO)) &&
    d1d4:	9b03      	ldr	r3, [sp, #12]
    d1d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
    d1da:	2b01      	cmp	r3, #1
    d1dc:	d109      	bne.n	d1f2 <smpProcPairing+0x96>
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
    d1de:	9b03      	ldr	r3, [sp, #12]
    d1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d041      	beq.n	d26c <smpProcPairing+0x110>
           (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO))))
    d1e8:	9b03      	ldr	r3, [sp, #12]
    d1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
    d1ee:	2b01      	cmp	r3, #1
    d1f0:	d03c      	beq.n	d26c <smpProcPairing+0x110>
    {
      /* use pin */
      justWorks = FALSE;
    d1f2:	2300      	movs	r3, #0
    d1f4:	f88d 3017 	strb.w	r3, [sp, #23]

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
    d1f8:	9b03      	ldr	r3, [sp, #12]
    d1fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
    d1fe:	2b00      	cmp	r3, #0
    d200:	d013      	beq.n	d22a <smpProcPairing+0xce>
    d202:	9b03      	ldr	r3, [sp, #12]
    d204:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
    d208:	2b01      	cmp	r3, #1
    d20a:	d00e      	beq.n	d22a <smpProcPairing+0xce>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
    d20c:	9b03      	ldr	r3, [sp, #12]
    d20e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
    d212:	2b04      	cmp	r3, #4
    d214:	d10b      	bne.n	d22e <smpProcPairing+0xd2>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
    d216:	9b03      	ldr	r3, [sp, #12]
    d218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
    d21c:	2b02      	cmp	r3, #2
    d21e:	d004      	beq.n	d22a <smpProcPairing+0xce>
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));
    d220:	9b03      	ldr	r3, [sp, #12]
    d222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
    d226:	2b04      	cmp	r3, #4
    d228:	d101      	bne.n	d22e <smpProcPairing+0xd2>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
    d22a:	2301      	movs	r3, #1
    d22c:	e000      	b.n	d230 <smpProcPairing+0xd4>
    d22e:	2300      	movs	r3, #0
      *pDisplay =
    d230:	b2da      	uxtb	r2, r3
    d232:	9b01      	ldr	r3, [sp, #4]
    d234:	701a      	strb	r2, [r3, #0]

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
    d236:	9b03      	ldr	r3, [sp, #12]
    d238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    d23c:	2b02      	cmp	r3, #2
    d23e:	d104      	bne.n	d24a <smpProcPairing+0xee>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
    d240:	9b03      	ldr	r3, [sp, #12]
    d242:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
    d246:	2b02      	cmp	r3, #2
    d248:	d010      	beq.n	d26c <smpProcPairing+0x110>
      {
        *pDisplay ^= !pCcb->initiator;
    d24a:	9b01      	ldr	r3, [sp, #4]
    d24c:	781b      	ldrb	r3, [r3, #0]
    d24e:	b25a      	sxtb	r2, r3
    d250:	9b03      	ldr	r3, [sp, #12]
    d252:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d256:	2b00      	cmp	r3, #0
    d258:	bf0c      	ite	eq
    d25a:	2301      	moveq	r3, #1
    d25c:	2300      	movne	r3, #0
    d25e:	b2db      	uxtb	r3, r3
    d260:	b25b      	sxtb	r3, r3
    d262:	4053      	eors	r3, r2
    d264:	b25b      	sxtb	r3, r3
    d266:	b2da      	uxtb	r2, r3
    d268:	9b01      	ldr	r3, [sp, #4]
    d26a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (!justWorks)
    d26c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d270:	2b00      	cmp	r3, #0
    d272:	d10e      	bne.n	d292 <smpProcPairing+0x136>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
    d274:	9b03      	ldr	r3, [sp, #12]
    d276:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    d27a:	9b03      	ldr	r3, [sp, #12]
    d27c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    d280:	4013      	ands	r3, r2
    d282:	b2db      	uxtb	r3, r3
    d284:	f043 0304 	orr.w	r3, r3, #4
    d288:	b2da      	uxtb	r2, r3
    d28a:	9b03      	ldr	r3, [sp, #12]
    d28c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    d290:	e00d      	b.n	d2ae <smpProcPairing+0x152>
  }
  else
  {
    /* set auth flags with mitm bit cleared */
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
    d292:	9b03      	ldr	r3, [sp, #12]
    d294:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    d298:	9b03      	ldr	r3, [sp, #12]
    d29a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    d29e:	4013      	ands	r3, r2
    d2a0:	b2db      	uxtb	r3, r3
    d2a2:	f023 0304 	bic.w	r3, r3, #4
    d2a6:	b2da      	uxtb	r2, r3
    d2a8:	9b03      	ldr	r3, [sp, #12]
    d2aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
    d2ae:	9b03      	ldr	r3, [sp, #12]
    d2b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d003      	beq.n	d2c0 <smpProcPairing+0x164>
    d2b8:	9b03      	ldr	r3, [sp, #12]
    d2ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    d2be:	e002      	b.n	d2c6 <smpProcPairing+0x16a>
    d2c0:	9b03      	ldr	r3, [sp, #12]
    d2c2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    d2c6:	f88d 3016 	strb.w	r3, [sp, #22]
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    d2ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d2ce:	2b00      	cmp	r3, #0
    d2d0:	d01d      	beq.n	d30e <smpProcPairing+0x1b2>
    d2d2:	4b23      	ldr	r3, [pc, #140]	; (d360 <smpProcPairing+0x204>)
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	7a1a      	ldrb	r2, [r3, #8]
    d2d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d2dc:	4013      	ands	r3, r2
    d2de:	b2db      	uxtb	r3, r3
    d2e0:	f003 0304 	and.w	r3, r3, #4
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d012      	beq.n	d30e <smpProcPairing+0x1b2>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
    d2e8:	9b03      	ldr	r3, [sp, #12]
    d2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d2ee:	b29b      	uxth	r3, r3
    d2f0:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
    d2f4:	2303      	movs	r3, #3
    d2f6:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    d2fa:	2303      	movs	r3, #3
    d2fc:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    d300:	ab04      	add	r3, sp, #16
    d302:	4619      	mov	r1, r3
    d304:	9803      	ldr	r0, [sp, #12]
    d306:	f000 fbad 	bl	da64 <smpSmExecute>
    return FALSE;
    d30a:	2300      	movs	r3, #0
    d30c:	e023      	b.n	d356 <smpProcPairing+0x1fa>
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
    d30e:	9b03      	ldr	r3, [sp, #12]
    d310:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    d314:	4b12      	ldr	r3, [pc, #72]	; (d360 <smpProcPairing+0x204>)
    d316:	681b      	ldr	r3, [r3, #0]
    d318:	795b      	ldrb	r3, [r3, #5]
    d31a:	429a      	cmp	r2, r3
    d31c:	d307      	bcc.n	d32e <smpProcPairing+0x1d2>
      pCcb->pairRsp[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen)
    d31e:	9b03      	ldr	r3, [sp, #12]
    d320:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    d324:	4b0e      	ldr	r3, [pc, #56]	; (d360 <smpProcPairing+0x204>)
    d326:	681b      	ldr	r3, [r3, #0]
    d328:	795b      	ldrb	r3, [r3, #5]
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
    d32a:	429a      	cmp	r2, r3
    d32c:	d212      	bcs.n	d354 <smpProcPairing+0x1f8>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
    d32e:	9b03      	ldr	r3, [sp, #12]
    d330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d334:	b29b      	uxth	r3, r3
    d336:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_ENC_KEY_SIZE;
    d33a:	2306      	movs	r3, #6
    d33c:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    d340:	2303      	movs	r3, #3
    d342:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    d346:	ab04      	add	r3, sp, #16
    d348:	4619      	mov	r1, r3
    d34a:	9803      	ldr	r0, [sp, #12]
    d34c:	f000 fb8a 	bl	da64 <smpSmExecute>
    return FALSE;
    d350:	2300      	movs	r3, #0
    d352:	e000      	b.n	d356 <smpProcPairing+0x1fa>
  }

  return TRUE;
    d354:	2301      	movs	r3, #1
}
    d356:	4618      	mov	r0, r3
    d358:	b007      	add	sp, #28
    d35a:	f85d fb04 	ldr.w	pc, [sp], #4
    d35e:	bf00      	nop
    d360:	10002b94 	.word	0x10002b94

0000d364 <smpAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
    d364:	b500      	push	{lr}
    d366:	b089      	sub	sp, #36	; 0x24
    d368:	9001      	str	r0, [sp, #4]
    d36a:	460b      	mov	r3, r1
    d36c:	f88d 3003 	strb.w	r3, [sp, #3]
    d370:	4613      	mov	r3, r2
    d372:	f88d 3002 	strb.w	r3, [sp, #2]
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
    d376:	9b01      	ldr	r3, [sp, #4]
    d378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    d37c:	f003 0304 	and.w	r3, r3, #4
    d380:	2b00      	cmp	r3, #0
    d382:	d015      	beq.n	d3b0 <smpAuthReq+0x4c>
  {
    /* request pin or oob from user */
    buf.authReq.hdr.param = pCcb->connId;
    d384:	9b01      	ldr	r3, [sp, #4]
    d386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d38a:	b29b      	uxth	r3, r3
    d38c:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    d390:	232e      	movs	r3, #46	; 0x2e
    d392:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authReq.oob = oob;
    d396:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d39a:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authReq.display = display;
    d39e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d3a2:	f88d 300d 	strb.w	r3, [sp, #13]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
    d3a6:	ab02      	add	r3, sp, #8
    d3a8:	4618      	mov	r0, r3
    d3aa:	f005 f9d7 	bl	1275c <DmSmpCbackExec>
    buf.authRsp.authData[1] = 0;
    buf.authRsp.authData[2] = 0;
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
  }
}
    d3ae:	e019      	b.n	d3e4 <smpAuthReq+0x80>
    buf.authRsp.hdr.param = pCcb->connId;
    d3b0:	9b01      	ldr	r3, [sp, #4]
    d3b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d3b6:	b29b      	uxth	r3, r3
    d3b8:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
    d3bc:	2304      	movs	r3, #4
    d3be:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authRsp.authData[0] = 0;
    d3c2:	2300      	movs	r3, #0
    d3c4:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authRsp.authData[1] = 0;
    d3c8:	2300      	movs	r3, #0
    d3ca:	f88d 300d 	strb.w	r3, [sp, #13]
    buf.authRsp.authData[2] = 0;
    d3ce:	2300      	movs	r3, #0
    d3d0:	f88d 300e 	strb.w	r3, [sp, #14]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    d3d4:	2303      	movs	r3, #3
    d3d6:	f88d 301c 	strb.w	r3, [sp, #28]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
    d3da:	ab02      	add	r3, sp, #8
    d3dc:	4619      	mov	r1, r3
    d3de:	9801      	ldr	r0, [sp, #4]
    d3e0:	f000 fb40 	bl	da64 <smpSmExecute>
}
    d3e4:	bf00      	nop
    d3e6:	b009      	add	sp, #36	; 0x24
    d3e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000d3ec <smpActPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d3ec:	b500      	push	{lr}
    d3ee:	b083      	sub	sp, #12
    d3f0:	9001      	str	r0, [sp, #4]
    d3f2:	9100      	str	r1, [sp, #0]
  /* store authentication data */
  smpActStorePin(pCcb, pMsg);
    d3f4:	9900      	ldr	r1, [sp, #0]
    d3f6:	9801      	ldr	r0, [sp, #4]
    d3f8:	f7ff fe92 	bl	d120 <smpActStorePin>

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
    d3fc:	9b01      	ldr	r3, [sp, #4]
    d3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d400:	3330      	adds	r3, #48	; 0x30
    d402:	2110      	movs	r1, #16
    d404:	4618      	mov	r0, r3
    d406:	f005 ff2d 	bl	13264 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
    d40a:	9b01      	ldr	r3, [sp, #4]
    d40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d40e:	4619      	mov	r1, r3
    d410:	9b01      	ldr	r3, [sp, #4]
    d412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d414:	3330      	adds	r3, #48	; 0x30
    d416:	461a      	mov	r2, r3
    d418:	9801      	ldr	r0, [sp, #4]
    d41a:	f000 ff4f 	bl	e2bc <smpCalcC1Part1>
}
    d41e:	bf00      	nop
    d420:	b003      	add	sp, #12
    d422:	f85d fb04 	ldr.w	pc, [sp], #4

0000d426 <smpActPairCnfCalc2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d426:	b500      	push	{lr}
    d428:	b083      	sub	sp, #12
    d42a:	9001      	str	r0, [sp, #4]
    d42c:	9100      	str	r1, [sp, #0]
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
    d42e:	9b01      	ldr	r3, [sp, #4]
    d430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d432:	4619      	mov	r1, r3
    d434:	9b00      	ldr	r3, [sp, #0]
    d436:	685b      	ldr	r3, [r3, #4]
    d438:	461a      	mov	r2, r3
    d43a:	9801      	ldr	r0, [sp, #4]
    d43c:	f001 f82e 	bl	e49c <smpCalcC1Part2>
}
    d440:	bf00      	nop
    d442:	b003      	add	sp, #12
    d444:	f85d fb04 	ldr.w	pc, [sp], #4

0000d448 <smpActSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d448:	b500      	push	{lr}
    d44a:	b085      	sub	sp, #20
    d44c:	9001      	str	r0, [sp, #4]
    d44e:	9100      	str	r1, [sp, #0]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set next expected packet */
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
    d450:	9b01      	ldr	r3, [sp, #4]
    d452:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d456:	2b00      	cmp	r3, #0
    d458:	d001      	beq.n	d45e <smpActSendPairCnf+0x16>
    d45a:	2203      	movs	r2, #3
    d45c:	e000      	b.n	d460 <smpActSendPairCnf+0x18>
    d45e:	2204      	movs	r2, #4
    d460:	9b01      	ldr	r3, [sp, #4]
    d462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    d466:	9801      	ldr	r0, [sp, #4]
    d468:	f7ff fdba 	bl	cfe0 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
    d46c:	2019      	movs	r0, #25
    d46e:	f001 f9be 	bl	e7ee <smpMsgAlloc>
    d472:	9003      	str	r0, [sp, #12]
    d474:	9b03      	ldr	r3, [sp, #12]
    d476:	2b00      	cmp	r3, #0
    d478:	d012      	beq.n	d4a0 <smpActSendPairCnf+0x58>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    d47a:	9b03      	ldr	r3, [sp, #12]
    d47c:	3308      	adds	r3, #8
    d47e:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
    d480:	9b02      	ldr	r3, [sp, #8]
    d482:	1c5a      	adds	r2, r3, #1
    d484:	9202      	str	r2, [sp, #8]
    d486:	2203      	movs	r2, #3
    d488:	701a      	strb	r2, [r3, #0]
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
    d48a:	9b00      	ldr	r3, [sp, #0]
    d48c:	685b      	ldr	r3, [r3, #4]
    d48e:	2210      	movs	r2, #16
    d490:	4619      	mov	r1, r3
    d492:	9802      	ldr	r0, [sp, #8]
    d494:	f7fe fe64 	bl	c160 <memcpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    d498:	9903      	ldr	r1, [sp, #12]
    d49a:	9801      	ldr	r0, [sp, #4]
    d49c:	f001 f966 	bl	e76c <smpSendPkt>
  }
}
    d4a0:	bf00      	nop
    d4a2:	b005      	add	sp, #20
    d4a4:	f85d fb04 	ldr.w	pc, [sp], #4

0000d4a8 <smpActPairCnfVerCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d4a8:	b500      	push	{lr}
    d4aa:	b085      	sub	sp, #20
    d4ac:	9001      	str	r0, [sp, #4]
    d4ae:	9100      	str	r1, [sp, #0]
  uint8_t   *p;

  /* go to start of received pairing random packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    d4b0:	9b00      	ldr	r3, [sp, #0]
    d4b2:	685b      	ldr	r3, [r3, #4]
    d4b4:	3309      	adds	r3, #9
    d4b6:	9303      	str	r3, [sp, #12]

  /* store random value */
  memcpy(pCcb->pScr->buf.b2, p, SMP_RAND_LEN);
    d4b8:	9b01      	ldr	r3, [sp, #4]
    d4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d4bc:	3310      	adds	r3, #16
    d4be:	2210      	movs	r2, #16
    d4c0:	9903      	ldr	r1, [sp, #12]
    d4c2:	4618      	mov	r0, r3
    d4c4:	f7fe fe4c 	bl	c160 <memcpy>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
    d4c8:	9b01      	ldr	r3, [sp, #4]
    d4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d4cc:	9a03      	ldr	r2, [sp, #12]
    d4ce:	4619      	mov	r1, r3
    d4d0:	9801      	ldr	r0, [sp, #4]
    d4d2:	f000 fef3 	bl	e2bc <smpCalcC1Part1>
}
    d4d6:	bf00      	nop
    d4d8:	b005      	add	sp, #20
    d4da:	f85d fb04 	ldr.w	pc, [sp], #4

0000d4de <smpActPairCnfVerCalc2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d4de:	b500      	push	{lr}
    d4e0:	b083      	sub	sp, #12
    d4e2:	9001      	str	r0, [sp, #4]
    d4e4:	9100      	str	r1, [sp, #0]
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
    d4e6:	9b01      	ldr	r3, [sp, #4]
    d4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d4ea:	4619      	mov	r1, r3
    d4ec:	9b00      	ldr	r3, [sp, #0]
    d4ee:	685b      	ldr	r3, [r3, #4]
    d4f0:	461a      	mov	r2, r3
    d4f2:	9801      	ldr	r0, [sp, #4]
    d4f4:	f000 ffd2 	bl	e49c <smpCalcC1Part2>
}
    d4f8:	bf00      	nop
    d4fa:	b003      	add	sp, #12
    d4fc:	f85d fb04 	ldr.w	pc, [sp], #4

0000d500 <smpSendKey>:
 *
 *  \return TRUE if done sending keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpSendKey(smpCcb_t *pCcb, uint8_t keyDist)
{
    d500:	b500      	push	{lr}
    d502:	b08f      	sub	sp, #60	; 0x3c
    d504:	9001      	str	r0, [sp, #4]
    d506:	460b      	mov	r3, r1
    d508:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t     *pPkt;
  uint8_t     *p;
  wsfMsgHdr_t *pHdr;

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
    d50c:	4ba5      	ldr	r3, [pc, #660]	; (d7a4 <smpSendKey+0x2a4>)
    d50e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
    d512:	2b00      	cmp	r3, #0
    d514:	d045      	beq.n	d5a2 <smpSendKey+0xa2>
    d516:	9b01      	ldr	r3, [sp, #4]
    d518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d51a:	781b      	ldrb	r3, [r3, #0]
    d51c:	2b00      	cmp	r3, #0
    d51e:	d040      	beq.n	d5a2 <smpSendKey+0xa2>
    d520:	9b01      	ldr	r3, [sp, #4]
    d522:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d526:	2b00      	cmp	r3, #0
    d528:	d13b      	bne.n	d5a2 <smpSendKey+0xa2>
  {
    dmSecKeyIndEvt_t keyInd;

    /* pass LTK to app via DM */
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
    d52a:	9b01      	ldr	r3, [sp, #4]
    d52c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d530:	4618      	mov	r0, r3
    d532:	f004 fa19 	bl	11968 <DmConnRole>
    d536:	4603      	mov	r3, r0
    d538:	2b00      	cmp	r3, #0
    d53a:	d103      	bne.n	d544 <smpSendKey+0x44>
    {
      keyInd.type = DM_KEY_PEER_LTK;
    d53c:	2302      	movs	r3, #2
    d53e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    d542:	e002      	b.n	d54a <smpSendKey+0x4a>
    }
    else
    {
      keyInd.type = DM_KEY_LOCAL_LTK;
    d544:	2301      	movs	r3, #1
    d546:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    }

    keyInd.hdr.event = DM_SEC_KEY_IND;
    d54a:	232f      	movs	r3, #47	; 0x2f
    d54c:	f88d 300a 	strb.w	r3, [sp, #10]
    keyInd.hdr.param = pCcb->connId;
    d550:	9b01      	ldr	r3, [sp, #4]
    d552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d556:	b29b      	uxth	r3, r3
    d558:	f8ad 3008 	strh.w	r3, [sp, #8]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
    d55c:	9801      	ldr	r0, [sp, #4]
    d55e:	f001 f97b 	bl	e858 <smpGetScSecLevel>
    d562:	4603      	mov	r3, r0
    d564:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    keyInd.keyData.ltk.ediv = 0;
    d568:	2300      	movs	r3, #0
    d56a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    memset(keyInd.keyData.ltk.rand, 0, SMP_RAND8_LEN);
    d56e:	ab02      	add	r3, sp, #8
    d570:	3314      	adds	r3, #20
    d572:	2208      	movs	r2, #8
    d574:	2100      	movs	r1, #0
    d576:	4618      	mov	r0, r3
    d578:	f7fe fe8c 	bl	c294 <memset>
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
    d57c:	9b01      	ldr	r3, [sp, #4]
    d57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d580:	699b      	ldr	r3, [r3, #24]
    d582:	f103 0210 	add.w	r2, r3, #16
    d586:	ab02      	add	r3, sp, #8
    d588:	3304      	adds	r3, #4
    d58a:	4611      	mov	r1, r2
    d58c:	4618      	mov	r0, r3
    d58e:	f00d fee0 	bl	1b352 <Calc128Cpy>
    DmSmpCbackExec((dmEvt_t *)&keyInd);
    d592:	ab02      	add	r3, sp, #8
    d594:	4618      	mov	r0, r3
    d596:	f005 f8e1 	bl	1275c <DmSmpCbackExec>

    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
    d59a:	9b01      	ldr	r3, [sp, #4]
    d59c:	2207      	movs	r2, #7
    d59e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* check if we're done sending keys */
  if ((keyDist == 0) ||
    d5a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d5a6:	2b00      	cmp	r3, #0
    d5a8:	d016      	beq.n	d5d8 <smpSendKey+0xd8>
    d5aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d5ae:	2b01      	cmp	r3, #1
    d5b0:	d104      	bne.n	d5bc <smpSendKey+0xbc>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
    d5b2:	9b01      	ldr	r3, [sp, #4]
    d5b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d5b8:	2b07      	cmp	r3, #7
    d5ba:	d00d      	beq.n	d5d8 <smpSendKey+0xd8>
    d5bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d5c0:	2b03      	cmp	r3, #3
    d5c2:	d804      	bhi.n	d5ce <smpSendKey+0xce>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
    d5c4:	9b01      	ldr	r3, [sp, #4]
    d5c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d5ca:	2b09      	cmp	r3, #9
    d5cc:	d004      	beq.n	d5d8 <smpSendKey+0xd8>
      (pCcb->lastSentKey == SMP_CMD_SIGN_INFO))
    d5ce:	9b01      	ldr	r3, [sp, #4]
    d5d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
    d5d4:	2b0a      	cmp	r3, #10
    d5d6:	d101      	bne.n	d5dc <smpSendKey+0xdc>
  {
      return TRUE;
    d5d8:	2301      	movs	r3, #1
    d5da:	e0de      	b.n	d79a <smpSendKey+0x29a>
  }

  /* if flow disabled return */
  if (pCcb->flowDisabled)
    d5dc:	9b01      	ldr	r3, [sp, #4]
    d5de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    d5e2:	2b00      	cmp	r3, #0
    d5e4:	d001      	beq.n	d5ea <smpSendKey+0xea>
  {
    return FALSE;
    d5e6:	2300      	movs	r3, #0
    d5e8:	e0d7      	b.n	d79a <smpSendKey+0x29a>
  }

  /* allocate packet buffer for largest packet size */
  if ((pPkt = smpMsgAlloc(SMP_ENC_INFO_LEN + L2C_PAYLOAD_START)) != NULL)
    d5ea:	2019      	movs	r0, #25
    d5ec:	f001 f8ff 	bl	e7ee <smpMsgAlloc>
    d5f0:	900d      	str	r0, [sp, #52]	; 0x34
    d5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d5f4:	2b00      	cmp	r3, #0
    d5f6:	f000 80cf 	beq.w	d798 <smpSendKey+0x298>
  {
    p = pPkt + L2C_PAYLOAD_START;
    d5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d5fc:	3308      	adds	r3, #8
    d5fe:	930c      	str	r3, [sp, #48]	; 0x30

    /* determine next key to send */
    if (pCcb->lastSentKey == 0 && (keyDist & SMP_KEY_DIST_ENC))
    d600:	9b01      	ldr	r3, [sp, #4]
    d602:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d606:	2b00      	cmp	r3, #0
    d608:	d115      	bne.n	d636 <smpSendKey+0x136>
    d60a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d60e:	f003 0301 	and.w	r3, r3, #1
    d612:	2b00      	cmp	r3, #0
    d614:	d00f      	beq.n	d636 <smpSendKey+0x136>
    {
      /* generate LTK, EDIV, and RAND */
      smpGenerateLtk(pCcb);
    d616:	9801      	ldr	r0, [sp, #4]
    d618:	f001 f856 	bl	e6c8 <smpGenerateLtk>

      /* send first part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ENC_INFO);
    d61c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d61e:	1c5a      	adds	r2, r3, #1
    d620:	920c      	str	r2, [sp, #48]	; 0x30
    d622:	2206      	movs	r2, #6
    d624:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
    d626:	9b01      	ldr	r3, [sp, #4]
    d628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d62a:	3304      	adds	r3, #4
    d62c:	4619      	mov	r1, r3
    d62e:	980c      	ldr	r0, [sp, #48]	; 0x30
    d630:	f00d fe8f 	bl	1b352 <Calc128Cpy>
    d634:	e08b      	b.n	d74e <smpSendKey+0x24e>
    }
    else if (pCcb->lastSentKey == SMP_CMD_ENC_INFO)
    d636:	9b01      	ldr	r3, [sp, #4]
    d638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d63c:	2b06      	cmp	r3, #6
    d63e:	d11f      	bne.n	d680 <smpSendKey+0x180>
    {
      /* send second part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
    d640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d642:	1c5a      	adds	r2, r3, #1
    d644:	920c      	str	r2, [sp, #48]	; 0x30
    d646:	2207      	movs	r2, #7
    d648:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
    d64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d64c:	1c5a      	adds	r2, r3, #1
    d64e:	920c      	str	r2, [sp, #48]	; 0x30
    d650:	9a01      	ldr	r2, [sp, #4]
    d652:	6b12      	ldr	r2, [r2, #48]	; 0x30
    d654:	8b92      	ldrh	r2, [r2, #28]
    d656:	b2d2      	uxtb	r2, r2
    d658:	701a      	strb	r2, [r3, #0]
    d65a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d65c:	1c5a      	adds	r2, r3, #1
    d65e:	920c      	str	r2, [sp, #48]	; 0x30
    d660:	9a01      	ldr	r2, [sp, #4]
    d662:	6b12      	ldr	r2, [r2, #48]	; 0x30
    d664:	8b92      	ldrh	r2, [r2, #28]
    d666:	0a12      	lsrs	r2, r2, #8
    d668:	b292      	uxth	r2, r2
    d66a:	b2d2      	uxtb	r2, r2
    d66c:	701a      	strb	r2, [r3, #0]
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
    d66e:	9b01      	ldr	r3, [sp, #4]
    d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d672:	3314      	adds	r3, #20
    d674:	2208      	movs	r2, #8
    d676:	4619      	mov	r1, r3
    d678:	980c      	ldr	r0, [sp, #48]	; 0x30
    d67a:	f7fe fd71 	bl	c160 <memcpy>
    d67e:	e066      	b.n	d74e <smpSendKey+0x24e>
    }
    else if ((keyDist & SMP_KEY_DIST_ID) &&
    d680:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d684:	f003 0302 	and.w	r3, r3, #2
    d688:	2b00      	cmp	r3, #0
    d68a:	d016      	beq.n	d6ba <smpSendKey+0x1ba>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
    d68c:	9b01      	ldr	r3, [sp, #4]
    d68e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    else if ((keyDist & SMP_KEY_DIST_ID) &&
    d692:	2b00      	cmp	r3, #0
    d694:	d004      	beq.n	d6a0 <smpSendKey+0x1a0>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
    d696:	9b01      	ldr	r3, [sp, #4]
    d698:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d69c:	2b07      	cmp	r3, #7
    d69e:	d10c      	bne.n	d6ba <smpSendKey+0x1ba>
    {
      /* send first part of IRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_INFO);
    d6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d6a2:	1c5a      	adds	r2, r3, #1
    d6a4:	920c      	str	r2, [sp, #48]	; 0x30
    d6a6:	2208      	movs	r2, #8
    d6a8:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, DmSecGetLocalIrk());
    d6aa:	f005 f8f5 	bl	12898 <DmSecGetLocalIrk>
    d6ae:	4603      	mov	r3, r0
    d6b0:	4619      	mov	r1, r3
    d6b2:	980c      	ldr	r0, [sp, #48]	; 0x30
    d6b4:	f00d fe4d 	bl	1b352 <Calc128Cpy>
    d6b8:	e049      	b.n	d74e <smpSendKey+0x24e>
    }
    else if (pCcb->lastSentKey == SMP_CMD_ID_INFO)
    d6ba:	9b01      	ldr	r3, [sp, #4]
    d6bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d6c0:	2b08      	cmp	r3, #8
    d6c2:	d114      	bne.n	d6ee <smpSendKey+0x1ee>
    {
      /* send second part of IRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
    d6c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d6c6:	1c5a      	adds	r2, r3, #1
    d6c8:	920c      	str	r2, [sp, #48]	; 0x30
    d6ca:	2209      	movs	r2, #9
    d6cc:	701a      	strb	r2, [r3, #0]
      UINT8_TO_BSTREAM(p, DM_ADDR_PUBLIC);
    d6ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d6d0:	1c5a      	adds	r2, r3, #1
    d6d2:	920c      	str	r2, [sp, #48]	; 0x30
    d6d4:	2200      	movs	r2, #0
    d6d6:	701a      	strb	r2, [r3, #0]
      BDA_TO_BSTREAM(p, HciGetBdAddr());
    d6d8:	f010 fef8 	bl	1e4cc <HciGetBdAddr>
    d6dc:	4603      	mov	r3, r0
    d6de:	4619      	mov	r1, r3
    d6e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    d6e2:	f00d fdf1 	bl	1b2c8 <BdaCpy>
    d6e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d6e8:	3306      	adds	r3, #6
    d6ea:	930c      	str	r3, [sp, #48]	; 0x30
    d6ec:	e02f      	b.n	d74e <smpSendKey+0x24e>

    }
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
    d6ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d6f2:	f003 0304 	and.w	r3, r3, #4
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	d01b      	beq.n	d732 <smpSendKey+0x232>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
    d6fa:	9b01      	ldr	r3, [sp, #4]
    d6fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
    d700:	2b00      	cmp	r3, #0
    d702:	d009      	beq.n	d718 <smpSendKey+0x218>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
    d704:	9b01      	ldr	r3, [sp, #4]
    d706:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d70a:	2b09      	cmp	r3, #9
    d70c:	d004      	beq.n	d718 <smpSendKey+0x218>
              pCcb->lastSentKey == SMP_CMD_MASTER_ID))
    d70e:	9b01      	ldr	r3, [sp, #4]
    d710:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
    d714:	2b07      	cmp	r3, #7
    d716:	d10c      	bne.n	d732 <smpSendKey+0x232>
    {
      /* send SRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_SIGN_INFO);
    d718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d71a:	1c5a      	adds	r2, r3, #1
    d71c:	920c      	str	r2, [sp, #48]	; 0x30
    d71e:	220a      	movs	r2, #10
    d720:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, DmSecGetLocalCsrk());
    d722:	f005 f8b3 	bl	1288c <DmSecGetLocalCsrk>
    d726:	4603      	mov	r3, r0
    d728:	4619      	mov	r1, r3
    d72a:	980c      	ldr	r0, [sp, #48]	; 0x30
    d72c:	f00d fe11 	bl	1b352 <Calc128Cpy>
    d730:	e00d      	b.n	d74e <smpSendKey+0x24e>
    }
    else
    {
      /* should never get here */
      WsfMsgFree(pPkt);
    d732:	980d      	ldr	r0, [sp, #52]	; 0x34
    d734:	f00a feb5 	bl	184a2 <WsfMsgFree>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
    d738:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d73c:	9b01      	ldr	r3, [sp, #4]
    d73e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    d742:	461a      	mov	r2, r3
    d744:	4818      	ldr	r0, [pc, #96]	; (d7a8 <smpSendKey+0x2a8>)
    d746:	f00b faff 	bl	18d48 <WsfTrace>
      return TRUE;
    d74a:	2301      	movs	r3, #1
    d74c:	e025      	b.n	d79a <smpSendKey+0x29a>
    }

    /* set last sent key to command code */
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
    d74e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d750:	7a1a      	ldrb	r2, [r3, #8]
    d752:	9b01      	ldr	r3, [sp, #4]
    d754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* send command packet */
    smpSendPkt(pCcb, pPkt);
    d758:	990d      	ldr	r1, [sp, #52]	; 0x34
    d75a:	9801      	ldr	r0, [sp, #4]
    d75c:	f001 f806 	bl	e76c <smpSendPkt>

    /* if flow not disabled set up to send next key */
    if (!pCcb->flowDisabled)
    d760:	9b01      	ldr	r3, [sp, #4]
    d762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    d766:	2b00      	cmp	r3, #0
    d768:	d116      	bne.n	d798 <smpSendKey+0x298>
    {
      if ((pHdr = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
    d76a:	2004      	movs	r0, #4
    d76c:	f00a fe81 	bl	18472 <WsfMsgAlloc>
    d770:	900b      	str	r0, [sp, #44]	; 0x2c
    d772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d774:	2b00      	cmp	r3, #0
    d776:	d00f      	beq.n	d798 <smpSendKey+0x298>
      {
        pHdr->event = SMP_MSG_INT_SEND_NEXT_KEY;
    d778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d77a:	220c      	movs	r2, #12
    d77c:	709a      	strb	r2, [r3, #2]
        pHdr->param = pCcb->connId;
    d77e:	9b01      	ldr	r3, [sp, #4]
    d780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d784:	b29a      	uxth	r2, r3
    d786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d788:	801a      	strh	r2, [r3, #0]
        WsfMsgSend(smpCb.handlerId, pHdr);
    d78a:	4b06      	ldr	r3, [pc, #24]	; (d7a4 <smpSendKey+0x2a4>)
    d78c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
    d790:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d792:	4618      	mov	r0, r3
    d794:	f00a fe91 	bl	184ba <WsfMsgSend>
      }
    }
  }

  return FALSE;
    d798:	2300      	movs	r3, #0
}
    d79a:	4618      	mov	r0, r3
    d79c:	b00f      	add	sp, #60	; 0x3c
    d79e:	f85d fb04 	ldr.w	pc, [sp], #4
    d7a2:	bf00      	nop
    d7a4:	10008824 	.word	0x10008824
    d7a8:	00027fa4 	.word	0x00027fa4

0000d7ac <smpProcRcvKey>:
 *
 *  \return TRUE if done receiving keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcRcvKey(smpCcb_t *pCcb, dmSecKeyIndEvt_t *pKeyInd, uint8_t *pBuf, uint8_t keyDist)
{
    d7ac:	b500      	push	{lr}
    d7ae:	b087      	sub	sp, #28
    d7b0:	9003      	str	r0, [sp, #12]
    d7b2:	9102      	str	r1, [sp, #8]
    d7b4:	9201      	str	r2, [sp, #4]
    d7b6:	f88d 3003 	strb.w	r3, [sp, #3]
  bool_t    keyIndReady = FALSE;
    d7ba:	2300      	movs	r3, #0
    d7bc:	f88d 3017 	strb.w	r3, [sp, #23]
  bool_t    done = FALSE;
    d7c0:	2300      	movs	r3, #0
    d7c2:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t   cmdCode;

  /* go to start of packet */
  pBuf += L2C_PAYLOAD_START;
    d7c6:	9b01      	ldr	r3, [sp, #4]
    d7c8:	3308      	adds	r3, #8
    d7ca:	9301      	str	r3, [sp, #4]
  cmdCode = *pBuf++;
    d7cc:	9b01      	ldr	r3, [sp, #4]
    d7ce:	1c5a      	adds	r2, r3, #1
    d7d0:	9201      	str	r2, [sp, #4]
    d7d2:	781b      	ldrb	r3, [r3, #0]
    d7d4:	f88d 3015 	strb.w	r3, [sp, #21]

  if (cmdCode == SMP_CMD_ENC_INFO)
    d7d8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d7dc:	2b06      	cmp	r3, #6
    d7de:	d106      	bne.n	d7ee <smpProcRcvKey+0x42>
  {
    /* parse encryption information packet */
    Calc128Cpy(pKeyInd->keyData.ltk.key, pBuf);
    d7e0:	9b02      	ldr	r3, [sp, #8]
    d7e2:	3304      	adds	r3, #4
    d7e4:	9901      	ldr	r1, [sp, #4]
    d7e6:	4618      	mov	r0, r3
    d7e8:	f00d fdb3 	bl	1b352 <Calc128Cpy>
    d7ec:	e062      	b.n	d8b4 <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_MASTER_ID)
    d7ee:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d7f2:	2b07      	cmp	r3, #7
    d7f4:	d129      	bne.n	d84a <smpProcRcvKey+0x9e>
  {
    /* parse master identification packet */
    BSTREAM_TO_UINT16(pKeyInd->keyData.ltk.ediv, pBuf);
    d7f6:	9b01      	ldr	r3, [sp, #4]
    d7f8:	781b      	ldrb	r3, [r3, #0]
    d7fa:	b29a      	uxth	r2, r3
    d7fc:	9b01      	ldr	r3, [sp, #4]
    d7fe:	3301      	adds	r3, #1
    d800:	781b      	ldrb	r3, [r3, #0]
    d802:	b29b      	uxth	r3, r3
    d804:	021b      	lsls	r3, r3, #8
    d806:	b29b      	uxth	r3, r3
    d808:	4413      	add	r3, r2
    d80a:	b29a      	uxth	r2, r3
    d80c:	9b02      	ldr	r3, [sp, #8]
    d80e:	839a      	strh	r2, [r3, #28]
    d810:	9b01      	ldr	r3, [sp, #4]
    d812:	3302      	adds	r3, #2
    d814:	9301      	str	r3, [sp, #4]
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
    d816:	9b02      	ldr	r3, [sp, #8]
    d818:	3314      	adds	r3, #20
    d81a:	2208      	movs	r2, #8
    d81c:	9901      	ldr	r1, [sp, #4]
    d81e:	4618      	mov	r0, r3
    d820:	f7fe fc9e 	bl	c160 <memcpy>
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    d824:	9b03      	ldr	r3, [sp, #12]
    d826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    d82a:	f003 0304 	and.w	r3, r3, #4
    d82e:	2b00      	cmp	r3, #0
    d830:	d001      	beq.n	d836 <smpProcRcvKey+0x8a>
    d832:	2202      	movs	r2, #2
    d834:	e000      	b.n	d838 <smpProcRcvKey+0x8c>
    d836:	2201      	movs	r2, #1
    d838:	9b02      	ldr	r3, [sp, #8]
    d83a:	77da      	strb	r2, [r3, #31]
    pKeyInd->type = DM_KEY_PEER_LTK;
    d83c:	9b02      	ldr	r3, [sp, #8]
    d83e:	2202      	movs	r2, #2
    d840:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
    d842:	2301      	movs	r3, #1
    d844:	f88d 3017 	strb.w	r3, [sp, #23]
    d848:	e034      	b.n	d8b4 <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_ID_INFO)
    d84a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d84e:	2b08      	cmp	r3, #8
    d850:	d106      	bne.n	d860 <smpProcRcvKey+0xb4>
  {
    /* parse identity information packet */
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
    d852:	9b02      	ldr	r3, [sp, #8]
    d854:	3304      	adds	r3, #4
    d856:	9901      	ldr	r1, [sp, #4]
    d858:	4618      	mov	r0, r3
    d85a:	f00d fd7a 	bl	1b352 <Calc128Cpy>
    d85e:	e029      	b.n	d8b4 <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_ID_ADDR_INFO)
    d860:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d864:	2b09      	cmp	r3, #9
    d866:	d115      	bne.n	d894 <smpProcRcvKey+0xe8>
  {
    /* parse identity address information packet */
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
    d868:	9b01      	ldr	r3, [sp, #4]
    d86a:	1c5a      	adds	r2, r3, #1
    d86c:	9201      	str	r2, [sp, #4]
    d86e:	781a      	ldrb	r2, [r3, #0]
    d870:	9b02      	ldr	r3, [sp, #8]
    d872:	769a      	strb	r2, [r3, #26]
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
    d874:	9b02      	ldr	r3, [sp, #8]
    d876:	3314      	adds	r3, #20
    d878:	9901      	ldr	r1, [sp, #4]
    d87a:	4618      	mov	r0, r3
    d87c:	f00d fd24 	bl	1b2c8 <BdaCpy>
    d880:	9b01      	ldr	r3, [sp, #4]
    d882:	3306      	adds	r3, #6
    d884:	9301      	str	r3, [sp, #4]
    pKeyInd->type = DM_KEY_IRK;
    d886:	9b02      	ldr	r3, [sp, #8]
    d888:	2204      	movs	r2, #4
    d88a:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
    d88c:	2301      	movs	r3, #1
    d88e:	f88d 3017 	strb.w	r3, [sp, #23]
    d892:	e00f      	b.n	d8b4 <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_SIGN_INFO)
    d894:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d898:	2b0a      	cmp	r3, #10
    d89a:	d10b      	bne.n	d8b4 <smpProcRcvKey+0x108>
  {
    /* parse signing information packet */
    Calc128Cpy(pKeyInd->keyData.csrk.key, pBuf);
    d89c:	9b02      	ldr	r3, [sp, #8]
    d89e:	3304      	adds	r3, #4
    d8a0:	9901      	ldr	r1, [sp, #4]
    d8a2:	4618      	mov	r0, r3
    d8a4:	f00d fd55 	bl	1b352 <Calc128Cpy>
    pKeyInd->type = DM_KEY_CSRK;
    d8a8:	9b02      	ldr	r3, [sp, #8]
    d8aa:	2208      	movs	r2, #8
    d8ac:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
    d8ae:	2301      	movs	r3, #1
    d8b0:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  /* set up to receive next key */

  /* if just got first part of LTK or IRK */
  if (pCcb->nextCmdCode == SMP_CMD_ENC_INFO || pCcb->nextCmdCode == SMP_CMD_ID_INFO)
    d8b4:	9b03      	ldr	r3, [sp, #12]
    d8b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    d8ba:	2b06      	cmp	r3, #6
    d8bc:	d004      	beq.n	d8c8 <smpProcRcvKey+0x11c>
    d8be:	9b03      	ldr	r3, [sp, #12]
    d8c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    d8c4:	2b08      	cmp	r3, #8
    d8c6:	d108      	bne.n	d8da <smpProcRcvKey+0x12e>
  {
    /* wait for second part of LTK or IRK info */
    pCcb->nextCmdCode++;
    d8c8:	9b03      	ldr	r3, [sp, #12]
    d8ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    d8ce:	3301      	adds	r3, #1
    d8d0:	b2da      	uxtb	r2, r3
    d8d2:	9b03      	ldr	r3, [sp, #12]
    d8d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    d8d8:	e027      	b.n	d92a <smpProcRcvKey+0x17e>
  }
  /* else if got LTK and need IRK */
  else if ((keyDist & SMP_KEY_DIST_ID) && (pCcb->nextCmdCode == SMP_CMD_MASTER_ID))
    d8da:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d8de:	f003 0302 	and.w	r3, r3, #2
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	d009      	beq.n	d8fa <smpProcRcvKey+0x14e>
    d8e6:	9b03      	ldr	r3, [sp, #12]
    d8e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    d8ec:	2b07      	cmp	r3, #7
    d8ee:	d104      	bne.n	d8fa <smpProcRcvKey+0x14e>
  {
    /* wait for first part of IRK */
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
    d8f0:	9b03      	ldr	r3, [sp, #12]
    d8f2:	2208      	movs	r2, #8
    d8f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    d8f8:	e017      	b.n	d92a <smpProcRcvKey+0x17e>
  }
  /* else if got LTK or IRK and need SRK */
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
    d8fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d8fe:	f003 0304 	and.w	r3, r3, #4
    d902:	2b00      	cmp	r3, #0
    d904:	d00e      	beq.n	d924 <smpProcRcvKey+0x178>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
    d906:	9b03      	ldr	r3, [sp, #12]
    d908:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
    d90c:	2b07      	cmp	r3, #7
    d90e:	d004      	beq.n	d91a <smpProcRcvKey+0x16e>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
    d910:	9b03      	ldr	r3, [sp, #12]
    d912:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    d916:	2b09      	cmp	r3, #9
    d918:	d104      	bne.n	d924 <smpProcRcvKey+0x178>
  {
    /* wait for SRK */
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
    d91a:	9b03      	ldr	r3, [sp, #12]
    d91c:	220a      	movs	r2, #10
    d91e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    d922:	e002      	b.n	d92a <smpProcRcvKey+0x17e>
  }
  else
  {
    /* done receiving keys */
    done = TRUE;
    d924:	2301      	movs	r3, #1
    d926:	f88d 3016 	strb.w	r3, [sp, #22]
  }

  /* call callback if key ready */
  if (keyIndReady)
    d92a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d92e:	2b00      	cmp	r3, #0
    d930:	d005      	beq.n	d93e <smpProcRcvKey+0x192>
  {
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
    d932:	9b02      	ldr	r3, [sp, #8]
    d934:	222f      	movs	r2, #47	; 0x2f
    d936:	709a      	strb	r2, [r3, #2]
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
    d938:	9802      	ldr	r0, [sp, #8]
    d93a:	f004 ff0f 	bl	1275c <DmSmpCbackExec>
  }

  return done;
    d93e:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    d942:	4618      	mov	r0, r3
    d944:	b007      	add	sp, #28
    d946:	f85d fb04 	ldr.w	pc, [sp], #4

0000d94a <smpActMaxAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActMaxAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d94a:	b500      	push	{lr}
    d94c:	b085      	sub	sp, #20
    d94e:	9001      	str	r0, [sp, #4]
    d950:	9100      	str	r1, [sp, #0]
  uint32_t timeout;

  /* send paring failed packet; note this stops the timer so call this first */
  smpActPairingCancel(pCcb, pMsg);
    d952:	9900      	ldr	r1, [sp, #0]
    d954:	9801      	ldr	r0, [sp, #4]
    d956:	f7ff fbd1 	bl	d0fc <smpActPairingCancel>

  /* Check SMP device DB to determine time to wait before pairing can happen again */
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
    d95a:	9b01      	ldr	r3, [sp, #4]
    d95c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d960:	4618      	mov	r0, r3
    d962:	f000 fa23 	bl	ddac <SmpDbMaxAttemptReached>
    d966:	9003      	str	r0, [sp, #12]

  /* start wait interval timer */
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
    d968:	9b01      	ldr	r3, [sp, #4]
    d96a:	2210      	movs	r2, #16
    d96c:	771a      	strb	r2, [r3, #28]
  WsfTimerStartMs(&pCcb->waitTimer, timeout);
    d96e:	9b01      	ldr	r3, [sp, #4]
    d970:	3310      	adds	r3, #16
    d972:	9903      	ldr	r1, [sp, #12]
    d974:	4618      	mov	r0, r3
    d976:	f00b f90f 	bl	18b98 <WsfTimerStartMs>

  /* clear attempts count */
  pCcb->attempts = 0;
    d97a:	9b01      	ldr	r3, [sp, #4]
    d97c:	2200      	movs	r2, #0
    d97e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
    d982:	bf00      	nop
    d984:	b005      	add	sp, #20
    d986:	f85d fb04 	ldr.w	pc, [sp], #4

0000d98a <smpActAttemptRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActAttemptRcvd(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d98a:	b082      	sub	sp, #8
    d98c:	9001      	str	r0, [sp, #4]
    d98e:	9100      	str	r1, [sp, #0]
  /* set that attempt was received */
  pCcb->attempts = 1;
    d990:	9b01      	ldr	r3, [sp, #4]
    d992:	2201      	movs	r2, #1
    d994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
    d998:	bf00      	nop
    d99a:	b002      	add	sp, #8
    d99c:	4770      	bx	lr

0000d99e <smpActNotifyDmAttemptsFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNotifyDmAttemptsFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d99e:	b500      	push	{lr}
    d9a0:	b083      	sub	sp, #12
    d9a2:	9001      	str	r0, [sp, #4]
    d9a4:	9100      	str	r1, [sp, #0]
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_ATTEMPTS;
    d9a6:	9b00      	ldr	r3, [sp, #0]
    d9a8:	2209      	movs	r2, #9
    d9aa:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    d9ac:	9b00      	ldr	r3, [sp, #0]
    d9ae:	222b      	movs	r2, #43	; 0x2b
    d9b0:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    d9b2:	9800      	ldr	r0, [sp, #0]
    d9b4:	f004 fed2 	bl	1275c <DmSmpCbackExec>
}
    d9b8:	bf00      	nop
    d9ba:	b003      	add	sp, #12
    d9bc:	f85d fb04 	ldr.w	pc, [sp], #4

0000d9c0 <smpActNotifyDmRspToFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNotifyDmRspToFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d9c0:	b500      	push	{lr}
    d9c2:	b083      	sub	sp, #12
    d9c4:	9001      	str	r0, [sp, #4]
    d9c6:	9100      	str	r1, [sp, #0]
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_TIMEOUT;
    d9c8:	9b00      	ldr	r3, [sp, #0]
    d9ca:	22e1      	movs	r2, #225	; 0xe1
    d9cc:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    d9ce:	9b00      	ldr	r3, [sp, #0]
    d9d0:	222b      	movs	r2, #43	; 0x2b
    d9d2:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    d9d4:	9800      	ldr	r0, [sp, #0]
    d9d6:	f004 fec1 	bl	1275c <DmSmpCbackExec>
}
    d9da:	bf00      	nop
    d9dc:	b003      	add	sp, #12
    d9de:	f85d fb04 	ldr.w	pc, [sp], #4

0000d9e2 <smpActCheckAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCheckAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d9e2:	b500      	push	{lr}
    d9e4:	b083      	sub	sp, #12
    d9e6:	9001      	str	r0, [sp, #4]
    d9e8:	9100      	str	r1, [sp, #0]
  /* check if attempt was received */
  if (pCcb->attempts)
    d9ea:	9b01      	ldr	r3, [sp, #4]
    d9ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d00e      	beq.n	da12 <smpActCheckAttempts+0x30>
  {
    pCcb->attempts = 0;
    d9f4:	9b01      	ldr	r3, [sp, #4]
    d9f6:	2200      	movs	r2, #0
    d9f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    smpSendPairingFailed(pCcb, SMP_ERR_ATTEMPTS);
    d9fc:	2109      	movs	r1, #9
    d9fe:	9801      	ldr	r0, [sp, #4]
    da00:	f7ff fb40 	bl	d084 <smpSendPairingFailed>

    /* notify DM of pairing failure */
    smpActNotifyDmAttemptsFailure(pCcb, pMsg);
    da04:	9900      	ldr	r1, [sp, #0]
    da06:	9801      	ldr	r0, [sp, #4]
    da08:	f7ff ffc9 	bl	d99e <smpActNotifyDmAttemptsFailure>

    smpCleanup(pCcb);
    da0c:	9801      	ldr	r0, [sp, #4]
    da0e:	f7ff faff 	bl	d010 <smpCleanup>
  }
}
    da12:	bf00      	nop
    da14:	b003      	add	sp, #12
    da16:	f85d fb04 	ldr.w	pc, [sp], #4

0000da1a <smpActPairingCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCmpl(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    da1a:	b500      	push	{lr}
    da1c:	b085      	sub	sp, #20
    da1e:	9001      	str	r0, [sp, #4]
    da20:	9100      	str	r1, [sp, #0]
  dmSecPairCmplIndEvt_t pairCmpl;

  smpCleanup(pCcb);
    da22:	9801      	ldr	r0, [sp, #4]
    da24:	f7ff faf4 	bl	d010 <smpCleanup>

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    da28:	9b01      	ldr	r3, [sp, #4]
    da2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    da2e:	2200      	movs	r2, #0
    da30:	2101      	movs	r1, #1
    da32:	4618      	mov	r0, r3
    da34:	f003 ff0a 	bl	1184c <DmConnSetIdle>

  pairCmpl.auth = pCcb->auth;
    da38:	9b01      	ldr	r3, [sp, #4]
    da3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    da3e:	f88d 300c 	strb.w	r3, [sp, #12]
  pairCmpl.hdr.param = pCcb->connId;
    da42:	9b01      	ldr	r3, [sp, #4]
    da44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    da48:	b29b      	uxth	r3, r3
    da4a:	f8ad 3008 	strh.w	r3, [sp, #8]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
    da4e:	232a      	movs	r3, #42	; 0x2a
    da50:	f88d 300a 	strb.w	r3, [sp, #10]
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
    da54:	ab02      	add	r3, sp, #8
    da56:	4618      	mov	r0, r3
    da58:	f004 fe80 	bl	1275c <DmSmpCbackExec>
}
    da5c:	bf00      	nop
    da5e:	b005      	add	sp, #20
    da60:	f85d fb04 	ldr.w	pc, [sp], #4

0000da64 <smpSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSmExecute(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    da64:	b500      	push	{lr}
    da66:	b085      	sub	sp, #20
    da68:	9001      	str	r0, [sp, #4]
    da6a:	9100      	str	r1, [sp, #0]
#if SMP_EXTRA_TRACE == TRUE
  if (smpCb.lescSupported)
    SMP_TRACE_INFO2("SMP Exe: evt=%s st=%s", smpEventStr(pMsg->hdr.event), smpStateStr(pCcb->state));
  else
#endif
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
    da6c:	9b00      	ldr	r3, [sp, #0]
    da6e:	789b      	ldrb	r3, [r3, #2]
    da70:	4619      	mov	r1, r3
    da72:	9b01      	ldr	r3, [sp, #4]
    da74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    da78:	461a      	mov	r2, r3
    da7a:	4824      	ldr	r0, [pc, #144]	; (db0c <smpSmExecute+0xa8>)
    da7c:	f00b f964 	bl	18d48 <WsfTrace>

  /* look up state table for state */
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
    da80:	9b01      	ldr	r3, [sp, #4]
    da82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    da86:	4618      	mov	r0, r3
    da88:	f003 ff6e 	bl	11968 <DmConnRole>
    da8c:	4603      	mov	r3, r0
    da8e:	2b01      	cmp	r3, #1
    da90:	d103      	bne.n	da9a <smpSmExecute+0x36>
    da92:	4b1f      	ldr	r3, [pc, #124]	; (db10 <smpSmExecute+0xac>)
    da94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    da98:	e002      	b.n	daa0 <smpSmExecute+0x3c>
    da9a:	4b1d      	ldr	r3, [pc, #116]	; (db10 <smpSmExecute+0xac>)
    da9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    daa0:	9302      	str	r3, [sp, #8]
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
    daa2:	9b02      	ldr	r3, [sp, #8]
    daa4:	681a      	ldr	r2, [r3, #0]
    daa6:	9b01      	ldr	r3, [sp, #4]
    daa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    daac:	009b      	lsls	r3, r3, #2
    daae:	4413      	add	r3, r2
    dab0:	681b      	ldr	r3, [r3, #0]
    dab2:	9303      	str	r3, [sp, #12]
  {
    /* look for event match and execute action */
    do
    {
      /* if match */
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
    dab4:	9b03      	ldr	r3, [sp, #12]
    dab6:	781a      	ldrb	r2, [r3, #0]
    dab8:	9b00      	ldr	r3, [sp, #0]
    daba:	789b      	ldrb	r3, [r3, #2]
    dabc:	429a      	cmp	r2, r3
    dabe:	d10f      	bne.n	dae0 <smpSmExecute+0x7c>
      {
        /* set next state */
        pCcb->state = (*pTblEntry)[SMP_SM_POS_NEXT_STATE];
    dac0:	9b03      	ldr	r3, [sp, #12]
    dac2:	785a      	ldrb	r2, [r3, #1]
    dac4:	9b01      	ldr	r3, [sp, #4]
    dac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* execute action */
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
    daca:	9b02      	ldr	r3, [sp, #8]
    dacc:	685a      	ldr	r2, [r3, #4]
    dace:	9b03      	ldr	r3, [sp, #12]
    dad0:	789b      	ldrb	r3, [r3, #2]
    dad2:	009b      	lsls	r3, r3, #2
    dad4:	4413      	add	r3, r2
    dad6:	681b      	ldr	r3, [r3, #0]
    dad8:	9900      	ldr	r1, [sp, #0]
    dada:	9801      	ldr	r0, [sp, #4]
    dadc:	4798      	blx	r3

        return;
    dade:	e012      	b.n	db06 <smpSmExecute+0xa2>
      }

      /* next entry */
      pTblEntry++;
    dae0:	9b03      	ldr	r3, [sp, #12]
    dae2:	3303      	adds	r3, #3
    dae4:	9303      	str	r3, [sp, #12]

      /* while not at end */
    } while ((*pTblEntry)[SMP_SM_POS_EVENT] != 0);
    dae6:	9b03      	ldr	r3, [sp, #12]
    dae8:	781b      	ldrb	r3, [r3, #0]
    daea:	2b00      	cmp	r3, #0
    daec:	d1e2      	bne.n	dab4 <smpSmExecute+0x50>

    /* if we've reached end of the common state table */
    if (pTblEntry == (pSmIf->pCommonTbl + SMP_STATE_TBL_COMMON_MAX - 1))
    daee:	9b02      	ldr	r3, [sp, #8]
    daf0:	689b      	ldr	r3, [r3, #8]
    daf2:	f103 020c 	add.w	r2, r3, #12
    daf6:	9b03      	ldr	r3, [sp, #12]
    daf8:	429a      	cmp	r2, r3
    dafa:	d003      	beq.n	db04 <smpSmExecute+0xa0>
    }
    /* else we haven't run through common state table yet */
    else
    {
      /* set it up */
      pTblEntry = pSmIf->pCommonTbl;
    dafc:	9b02      	ldr	r3, [sp, #8]
    dafe:	689b      	ldr	r3, [r3, #8]
    db00:	9303      	str	r3, [sp, #12]
  for(;;)
    db02:	e7d7      	b.n	dab4 <smpSmExecute+0x50>
      break;
    db04:	bf00      	nop
    }
  }
}
    db06:	b005      	add	sp, #20
    db08:	f85d fb04 	ldr.w	pc, [sp], #4
    db0c:	00027fdc 	.word	0x00027fdc
    db10:	10008824 	.word	0x10008824

0000db14 <smpDbStartServiceTimer>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpDbStartServiceTimer(void)
{
    db14:	b508      	push	{r3, lr}
  if (smpDbCb.serviceTimer.isStarted == FALSE)
    db16:	4b06      	ldr	r3, [pc, #24]	; (db30 <smpDbStartServiceTimer+0x1c>)
    db18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
    db1c:	2b00      	cmp	r3, #0
    db1e:	d104      	bne.n	db2a <smpDbStartServiceTimer+0x16>
  {
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
    db20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    db24:	4803      	ldr	r0, [pc, #12]	; (db34 <smpDbStartServiceTimer+0x20>)
    db26:	f00b f837 	bl	18b98 <WsfTimerStartMs>
  }
}
    db2a:	bf00      	nop
    db2c:	bd08      	pop	{r3, pc}
    db2e:	bf00      	nop
    db30:	100035b0 	.word	0x100035b0
    db34:	100035f8 	.word	0x100035f8

0000db38 <smpDbRecordInUse>:
 *
 *  \return TRUE if record in use, else FALSE.
 */
/*************************************************************************************************/
static bool_t smpDbRecordInUse(smpDbDevice_t *pRec)
{
    db38:	b082      	sub	sp, #8
    db3a:	9001      	str	r0, [sp, #4]
  /* When failCount, lockMs, and attemptMult are zero, the record can be used for another device. */
  if (pRec->failCount > 0)
    db3c:	9b01      	ldr	r3, [sp, #4]
    db3e:	79db      	ldrb	r3, [r3, #7]
    db40:	2b00      	cmp	r3, #0
    db42:	d001      	beq.n	db48 <smpDbRecordInUse+0x10>
  {
    return TRUE;
    db44:	2301      	movs	r3, #1
    db46:	e00c      	b.n	db62 <smpDbRecordInUse+0x2a>
  }

  if (pRec->lockMs > 0)
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	68db      	ldr	r3, [r3, #12]
    db4c:	2b00      	cmp	r3, #0
    db4e:	d001      	beq.n	db54 <smpDbRecordInUse+0x1c>
  {
    return TRUE;
    db50:	2301      	movs	r3, #1
    db52:	e006      	b.n	db62 <smpDbRecordInUse+0x2a>
  }

  if (pRec->attemptMult > 0)
    db54:	9b01      	ldr	r3, [sp, #4]
    db56:	891b      	ldrh	r3, [r3, #8]
    db58:	2b00      	cmp	r3, #0
    db5a:	d001      	beq.n	db60 <smpDbRecordInUse+0x28>
  {
    return TRUE;
    db5c:	2301      	movs	r3, #1
    db5e:	e000      	b.n	db62 <smpDbRecordInUse+0x2a>
  }

  return FALSE;
    db60:	2300      	movs	r3, #0
}
    db62:	4618      	mov	r0, r3
    db64:	b002      	add	sp, #8
    db66:	4770      	bx	lr

0000db68 <smpDbAddDevice>:
 *
 *  \return Pointer to DB record or NULL if database full.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbAddDevice(uint8_t *pAddr, uint8_t addrType)
{
    db68:	b500      	push	{lr}
    db6a:	b085      	sub	sp, #20
    db6c:	9001      	str	r0, [sp, #4]
    db6e:	460b      	mov	r3, r1
    db70:	f88d 3003 	strb.w	r3, [sp, #3]
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
    db74:	4b17      	ldr	r3, [pc, #92]	; (dbd4 <smpDbAddDevice+0x6c>)
    db76:	9303      	str	r3, [sp, #12]
  uint8_t i;

  SMP_TRACE_INFO0("smpDbAddDevice");
    db78:	4817      	ldr	r0, [pc, #92]	; (dbd8 <smpDbAddDevice+0x70>)
    db7a:	f00b f8e5 	bl	18d48 <WsfTrace>

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
    db7e:	2301      	movs	r3, #1
    db80:	f88d 300b 	strb.w	r3, [sp, #11]
    db84:	e01d      	b.n	dbc2 <smpDbAddDevice+0x5a>
  {
    if (smpDbRecordInUse(pRec) == FALSE)
    db86:	9803      	ldr	r0, [sp, #12]
    db88:	f7ff ffd6 	bl	db38 <smpDbRecordInUse>
    db8c:	4603      	mov	r3, r0
    db8e:	2b00      	cmp	r3, #0
    db90:	d10f      	bne.n	dbb2 <smpDbAddDevice+0x4a>
    {
      /* Reset record. */
      memset(pRec, 0, sizeof(smpDbDevice_t));
    db92:	2218      	movs	r2, #24
    db94:	2100      	movs	r1, #0
    db96:	9803      	ldr	r0, [sp, #12]
    db98:	f7fe fb7c 	bl	c294 <memset>

      pRec->addrType = addrType;
    db9c:	9b03      	ldr	r3, [sp, #12]
    db9e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dba2:	719a      	strb	r2, [r3, #6]
      BdaCpy(pRec->peerAddr, pAddr);
    dba4:	9b03      	ldr	r3, [sp, #12]
    dba6:	9901      	ldr	r1, [sp, #4]
    dba8:	4618      	mov	r0, r3
    dbaa:	f00d fb8d 	bl	1b2c8 <BdaCpy>
      return pRec;
    dbae:	9b03      	ldr	r3, [sp, #12]
    dbb0:	e00c      	b.n	dbcc <smpDbAddDevice+0x64>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
    dbb2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dbb6:	3301      	adds	r3, #1
    dbb8:	f88d 300b 	strb.w	r3, [sp, #11]
    dbbc:	9b03      	ldr	r3, [sp, #12]
    dbbe:	3318      	adds	r3, #24
    dbc0:	9303      	str	r3, [sp, #12]
    dbc2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dbc6:	2b02      	cmp	r3, #2
    dbc8:	d9dd      	bls.n	db86 <smpDbAddDevice+0x1e>
    }
  }

  return NULL;
    dbca:	2300      	movs	r3, #0
}
    dbcc:	4618      	mov	r0, r3
    dbce:	b005      	add	sp, #20
    dbd0:	f85d fb04 	ldr.w	pc, [sp], #4
    dbd4:	100035c8 	.word	0x100035c8
    dbd8:	00027ffc 	.word	0x00027ffc

0000dbdc <smpDbGetRecord>:
 *
 *  \return Pointer to the record associated with the connection or the common record.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbGetRecord(dmConnId_t connId)
{
    dbdc:	b500      	push	{lr}
    dbde:	b087      	sub	sp, #28
    dbe0:	4603      	mov	r3, r0
    dbe2:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
    dbe6:	4b2b      	ldr	r3, [pc, #172]	; (dc94 <smpDbGetRecord+0xb8>)
    dbe8:	9305      	str	r3, [sp, #20]
  uint8_t addrType = DmHostAddrType(DmConnPeerAddrType(connId));
    dbea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbee:	4618      	mov	r0, r3
    dbf0:	f003 fda2 	bl	11738 <DmConnPeerAddrType>
    dbf4:	4603      	mov	r3, r0
    dbf6:	4618      	mov	r0, r3
    dbf8:	f004 f9ec 	bl	11fd4 <DmHostAddrType>
    dbfc:	4603      	mov	r3, r0
    dbfe:	f88d 3012 	strb.w	r3, [sp, #18]
  uint8_t *pAddr = DmConnPeerAddr(connId);
    dc02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc06:	4618      	mov	r0, r3
    dc08:	f003 fdaa 	bl	11760 <DmConnPeerAddr>
    dc0c:	9003      	str	r0, [sp, #12]
  uint8_t i;

  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
    dc0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc12:	f89d 2012 	ldrb.w	r2, [sp, #18]
    dc16:	4619      	mov	r1, r3
    dc18:	481f      	ldr	r0, [pc, #124]	; (dc98 <smpDbGetRecord+0xbc>)
    dc1a:	f00b f895 	bl	18d48 <WsfTrace>

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
    dc1e:	2301      	movs	r3, #1
    dc20:	f88d 3013 	strb.w	r3, [sp, #19]
    dc24:	e01d      	b.n	dc62 <smpDbGetRecord+0x86>
  {
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
    dc26:	9805      	ldr	r0, [sp, #20]
    dc28:	f7ff ff86 	bl	db38 <smpDbRecordInUse>
    dc2c:	4603      	mov	r3, r0
    dc2e:	2b00      	cmp	r3, #0
    dc30:	d00f      	beq.n	dc52 <smpDbGetRecord+0x76>
    dc32:	9b05      	ldr	r3, [sp, #20]
    dc34:	799b      	ldrb	r3, [r3, #6]
    dc36:	f89d 2012 	ldrb.w	r2, [sp, #18]
    dc3a:	429a      	cmp	r2, r3
    dc3c:	d109      	bne.n	dc52 <smpDbGetRecord+0x76>
    dc3e:	9b05      	ldr	r3, [sp, #20]
    dc40:	9903      	ldr	r1, [sp, #12]
    dc42:	4618      	mov	r0, r3
    dc44:	f00d fb4d 	bl	1b2e2 <BdaCmp>
    dc48:	4603      	mov	r3, r0
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	d001      	beq.n	dc52 <smpDbGetRecord+0x76>
    {
      return pRec;
    dc4e:	9b05      	ldr	r3, [sp, #20]
    dc50:	e01b      	b.n	dc8a <smpDbGetRecord+0xae>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
    dc52:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dc56:	3301      	adds	r3, #1
    dc58:	f88d 3013 	strb.w	r3, [sp, #19]
    dc5c:	9b05      	ldr	r3, [sp, #20]
    dc5e:	3318      	adds	r3, #24
    dc60:	9305      	str	r3, [sp, #20]
    dc62:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dc66:	2b02      	cmp	r3, #2
    dc68:	d9dd      	bls.n	dc26 <smpDbGetRecord+0x4a>
    }
  }

  /* Device is not in the database, add the device. */
  pRec = smpDbAddDevice(pAddr, addrType);
    dc6a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    dc6e:	4619      	mov	r1, r3
    dc70:	9803      	ldr	r0, [sp, #12]
    dc72:	f7ff ff79 	bl	db68 <smpDbAddDevice>
    dc76:	9005      	str	r0, [sp, #20]

  if (pRec == NULL)
    dc78:	9b05      	ldr	r3, [sp, #20]
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d104      	bne.n	dc88 <smpDbGetRecord+0xac>
  {
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
    dc7e:	4807      	ldr	r0, [pc, #28]	; (dc9c <smpDbGetRecord+0xc0>)
    dc80:	f00b f862 	bl	18d48 <WsfTrace>

    /* Database is full, use the common record. */
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
    dc84:	4b06      	ldr	r3, [pc, #24]	; (dca0 <smpDbGetRecord+0xc4>)
    dc86:	9305      	str	r3, [sp, #20]
  }

  return pRec;
    dc88:	9b05      	ldr	r3, [sp, #20]
}
    dc8a:	4618      	mov	r0, r3
    dc8c:	b007      	add	sp, #28
    dc8e:	f85d fb04 	ldr.w	pc, [sp], #4
    dc92:	bf00      	nop
    dc94:	100035c8 	.word	0x100035c8
    dc98:	0002800c 	.word	0x0002800c
    dc9c:	00028030 	.word	0x00028030
    dca0:	100035b0 	.word	0x100035b0

0000dca4 <SmpDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbInit(void)
{
    dca4:	b508      	push	{r3, lr}
  /* Stop active service timer. */
  if (smpDbCb.serviceTimer.isStarted == TRUE)
    dca6:	4b0c      	ldr	r3, [pc, #48]	; (dcd8 <SmpDbInit+0x34>)
    dca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
    dcac:	2b01      	cmp	r3, #1
    dcae:	d102      	bne.n	dcb6 <SmpDbInit+0x12>
  {
    WsfTimerStop(&smpDbCb.serviceTimer);
    dcb0:	480a      	ldr	r0, [pc, #40]	; (dcdc <SmpDbInit+0x38>)
    dcb2:	f00a ff85 	bl	18bc0 <WsfTimerStop>
  }

  /* Reset control block. */
  memset(&smpDbCb, 0, sizeof(smpDbCb));
    dcb6:	2258      	movs	r2, #88	; 0x58
    dcb8:	2100      	movs	r1, #0
    dcba:	4807      	ldr	r0, [pc, #28]	; (dcd8 <SmpDbInit+0x34>)
    dcbc:	f7fe faea 	bl	c294 <memset>

  /* Setup service timer. */
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
    dcc0:	4b07      	ldr	r3, [pc, #28]	; (dce0 <SmpDbInit+0x3c>)
    dcc2:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
    dcc6:	4b04      	ldr	r3, [pc, #16]	; (dcd8 <SmpDbInit+0x34>)
    dcc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
    dccc:	4b02      	ldr	r3, [pc, #8]	; (dcd8 <SmpDbInit+0x34>)
    dcce:	221f      	movs	r2, #31
    dcd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
    dcd4:	bf00      	nop
    dcd6:	bd08      	pop	{r3, pc}
    dcd8:	100035b0 	.word	0x100035b0
    dcdc:	100035f8 	.word	0x100035f8
    dce0:	10008824 	.word	0x10008824

0000dce4 <SmpDbGetPairingDisabledTime>:
 *
 *  \return Time pairing is disabled (msec), or zero if pairing isn't disabled.
 */
/*************************************************************************************************/
uint32_t SmpDbGetPairingDisabledTime(dmConnId_t connId)
{
    dce4:	b500      	push	{lr}
    dce6:	b085      	sub	sp, #20
    dce8:	4603      	mov	r3, r0
    dcea:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    dcee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dcf2:	4618      	mov	r0, r3
    dcf4:	f7ff ff72 	bl	dbdc <smpDbGetRecord>
    dcf8:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO3("SmpDbGetPairingDisabledTime: connId: %d period: %d attemptMult: %d",
    dcfa:	f89d 1007 	ldrb.w	r1, [sp, #7]
    dcfe:	9b03      	ldr	r3, [sp, #12]
    dd00:	68da      	ldr	r2, [r3, #12]
    dd02:	9b03      	ldr	r3, [sp, #12]
    dd04:	891b      	ldrh	r3, [r3, #8]
    dd06:	4804      	ldr	r0, [pc, #16]	; (dd18 <SmpDbGetPairingDisabledTime+0x34>)
    dd08:	f00b f81e 	bl	18d48 <WsfTrace>
                  connId, pRec->lockMs, pRec->attemptMult);

  return pRec->lockMs;
    dd0c:	9b03      	ldr	r3, [sp, #12]
    dd0e:	68db      	ldr	r3, [r3, #12]
}
    dd10:	4618      	mov	r0, r3
    dd12:	b005      	add	sp, #20
    dd14:	f85d fb04 	ldr.w	pc, [sp], #4
    dd18:	00028050 	.word	0x00028050

0000dd1c <SmpDbSetFailureCount>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbSetFailureCount(dmConnId_t connId, uint8_t count)
{
    dd1c:	b500      	push	{lr}
    dd1e:	b085      	sub	sp, #20
    dd20:	4603      	mov	r3, r0
    dd22:	460a      	mov	r2, r1
    dd24:	f88d 3007 	strb.w	r3, [sp, #7]
    dd28:	4613      	mov	r3, r2
    dd2a:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    dd2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd32:	4618      	mov	r0, r3
    dd34:	f7ff ff52 	bl	dbdc <smpDbGetRecord>
    dd38:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO2("SmpDbSetFailureCount: connId: %d count: %d", connId, count);
    dd3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    dd42:	4619      	mov	r1, r3
    dd44:	4809      	ldr	r0, [pc, #36]	; (dd6c <SmpDbSetFailureCount+0x50>)
    dd46:	f00a ffff 	bl	18d48 <WsfTrace>

  pRec->failCount = count;
    dd4a:	9b03      	ldr	r3, [sp, #12]
    dd4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    dd50:	71da      	strb	r2, [r3, #7]

  if (count != 0)
    dd52:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dd56:	2b00      	cmp	r3, #0
    dd58:	d004      	beq.n	dd64 <SmpDbSetFailureCount+0x48>
  {
    pRec->failCountToMs = pSmpCfg->maxAttemptTimeout;
    dd5a:	4b05      	ldr	r3, [pc, #20]	; (dd70 <SmpDbSetFailureCount+0x54>)
    dd5c:	681b      	ldr	r3, [r3, #0]
    dd5e:	68da      	ldr	r2, [r3, #12]
    dd60:	9b03      	ldr	r3, [sp, #12]
    dd62:	615a      	str	r2, [r3, #20]
  }
}
    dd64:	bf00      	nop
    dd66:	b005      	add	sp, #20
    dd68:	f85d fb04 	ldr.w	pc, [sp], #4
    dd6c:	00028094 	.word	0x00028094
    dd70:	10002b94 	.word	0x10002b94

0000dd74 <SmpDbGetFailureCount>:
 *
 *  \return The failure count.
 */
/*************************************************************************************************/
uint8_t SmpDbGetFailureCount(dmConnId_t connId)
{
    dd74:	b500      	push	{lr}
    dd76:	b085      	sub	sp, #20
    dd78:	4603      	mov	r3, r0
    dd7a:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    dd7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd82:	4618      	mov	r0, r3
    dd84:	f7ff ff2a 	bl	dbdc <smpDbGetRecord>
    dd88:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO2("SmpDbGetFailureCount: connId: %d count: %d", connId, pRec->failCount);
    dd8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    dd8e:	9b03      	ldr	r3, [sp, #12]
    dd90:	79db      	ldrb	r3, [r3, #7]
    dd92:	461a      	mov	r2, r3
    dd94:	4804      	ldr	r0, [pc, #16]	; (dda8 <SmpDbGetFailureCount+0x34>)
    dd96:	f00a ffd7 	bl	18d48 <WsfTrace>

  return pRec->failCount;
    dd9a:	9b03      	ldr	r3, [sp, #12]
    dd9c:	79db      	ldrb	r3, [r3, #7]
}
    dd9e:	4618      	mov	r0, r3
    dda0:	b005      	add	sp, #20
    dda2:	f85d fb04 	ldr.w	pc, [sp], #4
    dda6:	bf00      	nop
    dda8:	000280c0 	.word	0x000280c0

0000ddac <SmpDbMaxAttemptReached>:
 *
 *  \return Time until device can retry pairing.
 */
/*************************************************************************************************/
uint32_t SmpDbMaxAttemptReached(dmConnId_t connId)
{
    ddac:	b500      	push	{lr}
    ddae:	b085      	sub	sp, #20
    ddb0:	4603      	mov	r3, r0
    ddb2:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    ddb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddba:	4618      	mov	r0, r3
    ddbc:	f7ff ff0e 	bl	dbdc <smpDbGetRecord>
    ddc0:	9002      	str	r0, [sp, #8]
  uint16_t multiplier;

  SMP_TRACE_INFO1("SmpDbMaxAttemptReached: connId: %d", connId);
    ddc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddc6:	4619      	mov	r1, r3
    ddc8:	481f      	ldr	r0, [pc, #124]	; (de48 <SmpDbMaxAttemptReached+0x9c>)
    ddca:	f00a ffbd 	bl	18d48 <WsfTrace>

  if (pRec->attemptMult == 0)
    ddce:	9b02      	ldr	r3, [sp, #8]
    ddd0:	891b      	ldrh	r3, [r3, #8]
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d103      	bne.n	ddde <SmpDbMaxAttemptReached+0x32>
  {
    /* Due to a disconnection, a record exists but the attempt multipier hasn't been set. */
    multiplier = 1;
    ddd6:	2301      	movs	r3, #1
    ddd8:	f8ad 300e 	strh.w	r3, [sp, #14]
    dddc:	e008      	b.n	ddf0 <SmpDbMaxAttemptReached+0x44>
  }
  else
  {
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
    ddde:	9b02      	ldr	r3, [sp, #8]
    dde0:	891a      	ldrh	r2, [r3, #8]
    dde2:	4b1a      	ldr	r3, [pc, #104]	; (de4c <SmpDbMaxAttemptReached+0xa0>)
    dde4:	681b      	ldr	r3, [r3, #0]
    dde6:	8a9b      	ldrh	r3, [r3, #20]
    dde8:	fb12 f303 	smulbb	r3, r2, r3
    ddec:	f8ad 300e 	strh.w	r3, [sp, #14]
  }

  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
    ddf0:	4b16      	ldr	r3, [pc, #88]	; (de4c <SmpDbMaxAttemptReached+0xa0>)
    ddf2:	681b      	ldr	r3, [r3, #0]
    ddf4:	681b      	ldr	r3, [r3, #0]
    ddf6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ddfa:	fb02 f203 	mul.w	r2, r2, r3
    ddfe:	4b13      	ldr	r3, [pc, #76]	; (de4c <SmpDbMaxAttemptReached+0xa0>)
    de00:	681b      	ldr	r3, [r3, #0]
    de02:	68db      	ldr	r3, [r3, #12]
    de04:	429a      	cmp	r2, r3
    de06:	d80d      	bhi.n	de24 <SmpDbMaxAttemptReached+0x78>
  {
    pRec->lockMs = pSmpCfg->attemptTimeout * multiplier;
    de08:	4b10      	ldr	r3, [pc, #64]	; (de4c <SmpDbMaxAttemptReached+0xa0>)
    de0a:	681b      	ldr	r3, [r3, #0]
    de0c:	681b      	ldr	r3, [r3, #0]
    de0e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    de12:	fb02 f203 	mul.w	r2, r2, r3
    de16:	9b02      	ldr	r3, [sp, #8]
    de18:	60da      	str	r2, [r3, #12]
    pRec->attemptMult = multiplier;
    de1a:	9b02      	ldr	r3, [sp, #8]
    de1c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    de20:	811a      	strh	r2, [r3, #8]
    de22:	e004      	b.n	de2e <SmpDbMaxAttemptReached+0x82>
  }
  else
  {
    /* Exponential increase is greater than max timeout. */
    pRec->lockMs = pSmpCfg->maxAttemptTimeout;
    de24:	4b09      	ldr	r3, [pc, #36]	; (de4c <SmpDbMaxAttemptReached+0xa0>)
    de26:	681b      	ldr	r3, [r3, #0]
    de28:	68da      	ldr	r2, [r3, #12]
    de2a:	9b02      	ldr	r3, [sp, #8]
    de2c:	60da      	str	r2, [r3, #12]
  }

  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
    de2e:	4b07      	ldr	r3, [pc, #28]	; (de4c <SmpDbMaxAttemptReached+0xa0>)
    de30:	681b      	ldr	r3, [r3, #0]
    de32:	691a      	ldr	r2, [r3, #16]
    de34:	9b02      	ldr	r3, [sp, #8]
    de36:	611a      	str	r2, [r3, #16]

  /* Ensure the service timer is running. */
  smpDbStartServiceTimer();
    de38:	f7ff fe6c 	bl	db14 <smpDbStartServiceTimer>

  return pRec->lockMs;
    de3c:	9b02      	ldr	r3, [sp, #8]
    de3e:	68db      	ldr	r3, [r3, #12]
}
    de40:	4618      	mov	r0, r3
    de42:	b005      	add	sp, #20
    de44:	f85d fb04 	ldr.w	pc, [sp], #4
    de48:	000280ec 	.word	0x000280ec
    de4c:	10002b94 	.word	0x10002b94

0000de50 <SmpDbPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbPairingFailed(dmConnId_t connId)
{
    de50:	b500      	push	{lr}
    de52:	b085      	sub	sp, #20
    de54:	4603      	mov	r3, r0
    de56:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    de5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de5e:	4618      	mov	r0, r3
    de60:	f7ff febc 	bl	dbdc <smpDbGetRecord>
    de64:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
    de66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de6a:	4619      	mov	r1, r3
    de6c:	4805      	ldr	r0, [pc, #20]	; (de84 <SmpDbPairingFailed+0x34>)
    de6e:	f00a ff6b 	bl	18d48 <WsfTrace>

  /* Reset exponent decrement timer. */
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
    de72:	4b05      	ldr	r3, [pc, #20]	; (de88 <SmpDbPairingFailed+0x38>)
    de74:	681b      	ldr	r3, [r3, #0]
    de76:	691a      	ldr	r2, [r3, #16]
    de78:	9b03      	ldr	r3, [sp, #12]
    de7a:	611a      	str	r2, [r3, #16]
}
    de7c:	bf00      	nop
    de7e:	b005      	add	sp, #20
    de80:	f85d fb04 	ldr.w	pc, [sp], #4
    de84:	00028110 	.word	0x00028110
    de88:	10002b94 	.word	0x10002b94

0000de8c <SmpDbService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbService(void)
{
    de8c:	b500      	push	{lr}
    de8e:	b083      	sub	sp, #12
  uint8_t i;
  smpDbDevice_t *pRec = smpDbCb.db;
    de90:	4b34      	ldr	r3, [pc, #208]	; (df64 <SmpDbService+0xd8>)
    de92:	9300      	str	r3, [sp, #0]

  /* Service device specific records. */
  for (i = 0; i < SMP_DB_MAX_DEVICES; i++, pRec++)
    de94:	2300      	movs	r3, #0
    de96:	f88d 3007 	strb.w	r3, [sp, #7]
    de9a:	e05a      	b.n	df52 <SmpDbService+0xc6>
  {
    if (smpDbRecordInUse(pRec))
    de9c:	9800      	ldr	r0, [sp, #0]
    de9e:	f7ff fe4b 	bl	db38 <smpDbRecordInUse>
    dea2:	4603      	mov	r3, r0
    dea4:	2b00      	cmp	r3, #0
    dea6:	d04c      	beq.n	df42 <SmpDbService+0xb6>
    {
      /* Decrement all time periods. */
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
    dea8:	9b00      	ldr	r3, [sp, #0]
    deaa:	691b      	ldr	r3, [r3, #16]
    deac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    deb0:	d904      	bls.n	debc <SmpDbService+0x30>
    deb2:	9b00      	ldr	r3, [sp, #0]
    deb4:	691b      	ldr	r3, [r3, #16]
    deb6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
    deba:	e000      	b.n	debe <SmpDbService+0x32>
    debc:	2300      	movs	r3, #0
    debe:	9a00      	ldr	r2, [sp, #0]
    dec0:	6113      	str	r3, [r2, #16]
      SMP_DB_DEC_TIMER(pRec->lockMs);
    dec2:	9b00      	ldr	r3, [sp, #0]
    dec4:	68db      	ldr	r3, [r3, #12]
    dec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    deca:	d904      	bls.n	ded6 <SmpDbService+0x4a>
    decc:	9b00      	ldr	r3, [sp, #0]
    dece:	68db      	ldr	r3, [r3, #12]
    ded0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
    ded4:	e000      	b.n	ded8 <SmpDbService+0x4c>
    ded6:	2300      	movs	r3, #0
    ded8:	9a00      	ldr	r2, [sp, #0]
    deda:	60d3      	str	r3, [r2, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    dedc:	9b00      	ldr	r3, [sp, #0]
    dede:	695b      	ldr	r3, [r3, #20]
    dee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    dee4:	d904      	bls.n	def0 <SmpDbService+0x64>
    dee6:	9b00      	ldr	r3, [sp, #0]
    dee8:	695b      	ldr	r3, [r3, #20]
    deea:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
    deee:	e000      	b.n	def2 <SmpDbService+0x66>
    def0:	2300      	movs	r3, #0
    def2:	9a00      	ldr	r2, [sp, #0]
    def4:	6153      	str	r3, [r2, #20]

      /* Process expDecrementMs timeout. */
      if (pRec->expDecrementMs == 0)
    def6:	9b00      	ldr	r3, [sp, #0]
    def8:	691b      	ldr	r3, [r3, #16]
    defa:	2b00      	cmp	r3, #0
    defc:	d112      	bne.n	df24 <SmpDbService+0x98>
      {
        /* Exponential decrease of multiplier. */
        pRec->attemptMult /= pSmpCfg->attemptExp;
    defe:	9b00      	ldr	r3, [sp, #0]
    df00:	891a      	ldrh	r2, [r3, #8]
    df02:	4b19      	ldr	r3, [pc, #100]	; (df68 <SmpDbService+0xdc>)
    df04:	681b      	ldr	r3, [r3, #0]
    df06:	8a9b      	ldrh	r3, [r3, #20]
    df08:	fbb2 f3f3 	udiv	r3, r2, r3
    df0c:	b29a      	uxth	r2, r3
    df0e:	9b00      	ldr	r3, [sp, #0]
    df10:	811a      	strh	r2, [r3, #8]

        if (pRec->attemptMult)
    df12:	9b00      	ldr	r3, [sp, #0]
    df14:	891b      	ldrh	r3, [r3, #8]
    df16:	2b00      	cmp	r3, #0
    df18:	d004      	beq.n	df24 <SmpDbService+0x98>
        {
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
    df1a:	4b13      	ldr	r3, [pc, #76]	; (df68 <SmpDbService+0xdc>)
    df1c:	681b      	ldr	r3, [r3, #0]
    df1e:	691a      	ldr	r2, [r3, #16]
    df20:	9b00      	ldr	r3, [sp, #0]
    df22:	611a      	str	r2, [r3, #16]
        }
      }

      /* Process failCountToMs timeout. */
      if (pRec->failCountToMs == 0)
    df24:	9b00      	ldr	r3, [sp, #0]
    df26:	695b      	ldr	r3, [r3, #20]
    df28:	2b00      	cmp	r3, #0
    df2a:	d102      	bne.n	df32 <SmpDbService+0xa6>
      {
        pRec->failCount = 0;
    df2c:	9b00      	ldr	r3, [sp, #0]
    df2e:	2200      	movs	r2, #0
    df30:	71da      	strb	r2, [r3, #7]
      }

      /* If the record is in use, ensure the service timer is running. */
      if (smpDbRecordInUse(pRec))
    df32:	9800      	ldr	r0, [sp, #0]
    df34:	f7ff fe00 	bl	db38 <smpDbRecordInUse>
    df38:	4603      	mov	r3, r0
    df3a:	2b00      	cmp	r3, #0
    df3c:	d001      	beq.n	df42 <SmpDbService+0xb6>
      {
        smpDbStartServiceTimer();
    df3e:	f7ff fde9 	bl	db14 <smpDbStartServiceTimer>
  for (i = 0; i < SMP_DB_MAX_DEVICES; i++, pRec++)
    df42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df46:	3301      	adds	r3, #1
    df48:	f88d 3007 	strb.w	r3, [sp, #7]
    df4c:	9b00      	ldr	r3, [sp, #0]
    df4e:	3318      	adds	r3, #24
    df50:	9300      	str	r3, [sp, #0]
    df52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df56:	2b02      	cmp	r3, #2
    df58:	d9a0      	bls.n	de9c <SmpDbService+0x10>
      }
    }
  }
}
    df5a:	bf00      	nop
    df5c:	b003      	add	sp, #12
    df5e:	f85d fb04 	ldr.w	pc, [sp], #4
    df62:	bf00      	nop
    df64:	100035b0 	.word	0x100035b0
    df68:	10002b94 	.word	0x10002b94

0000df6c <smpL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
    df6c:	b500      	push	{lr}
    df6e:	b08b      	sub	sp, #44	; 0x2c
    df70:	4603      	mov	r3, r0
    df72:	9200      	str	r2, [sp, #0]
    df74:	f8ad 3006 	strh.w	r3, [sp, #6]
    df78:	460b      	mov	r3, r1
    df7a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       cmdCode;
  smpCcb_t      *pCcb;

  /* get connection control block for this handle, ignore packet if not found */
  if ((pCcb = smpCcbByHandle(handle)) == NULL)
    df7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    df82:	4618      	mov	r0, r3
    df84:	f000 f966 	bl	e254 <smpCcbByHandle>
    df88:	9009      	str	r0, [sp, #36]	; 0x24
    df8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df8c:	2b00      	cmp	r3, #0
    df8e:	d047      	beq.n	e020 <smpL2cDataCback+0xb4>
  {
    return;
  }

  /* parse command code */
  cmdCode = *(pPacket + L2C_PAYLOAD_START);
    df90:	9b00      	ldr	r3, [sp, #0]
    df92:	7a1b      	ldrb	r3, [r3, #8]
    df94:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

  /* verify length and that command is the expected command or pairing failed */
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
    df98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    df9c:	2b00      	cmp	r3, #0
    df9e:	d034      	beq.n	e00a <smpL2cDataCback+0x9e>
    dfa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    dfa4:	2b0e      	cmp	r3, #14
    dfa6:	d830      	bhi.n	e00a <smpL2cDataCback+0x9e>
      (len == smpPktLenTbl[cmdCode]) &&
    dfa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    dfac:	4a1e      	ldr	r2, [pc, #120]	; (e028 <smpL2cDataCback+0xbc>)
    dfae:	5cd3      	ldrb	r3, [r2, r3]
    dfb0:	b29b      	uxth	r3, r3
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
    dfb2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    dfb6:	429a      	cmp	r2, r3
    dfb8:	d127      	bne.n	e00a <smpL2cDataCback+0x9e>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
    dfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dfbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
      (len == smpPktLenTbl[cmdCode]) &&
    dfc0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    dfc4:	429a      	cmp	r2, r3
    dfc6:	d003      	beq.n	dfd0 <smpL2cDataCback+0x64>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
    dfc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    dfcc:	2b05      	cmp	r3, #5
    dfce:	d11c      	bne.n	e00a <smpL2cDataCback+0x9e>
  {
    smpMsg_t msg;

    /* send to state machine */
    if (cmdCode == SMP_CMD_PAIR_FAIL)
    dfd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    dfd4:	2b05      	cmp	r3, #5
    dfd6:	d107      	bne.n	dfe8 <smpL2cDataCback+0x7c>
    {
      msg.hdr.event = SMP_MSG_CMD_PAIRING_FAILED;
    dfd8:	2307      	movs	r3, #7
    dfda:	f88d 300a 	strb.w	r3, [sp, #10]
      msg.hdr.status = *(pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
    dfde:	9b00      	ldr	r3, [sp, #0]
    dfe0:	7a5b      	ldrb	r3, [r3, #9]
    dfe2:	f88d 300b 	strb.w	r3, [sp, #11]
    dfe6:	e002      	b.n	dfee <smpL2cDataCback+0x82>
    }
    else
    {
      msg.hdr.event = SMP_MSG_CMD_PKT;
    dfe8:	2306      	movs	r3, #6
    dfea:	f88d 300a 	strb.w	r3, [sp, #10]
    }

    msg.hdr.param = pCcb->connId;
    dfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    dff4:	b29b      	uxth	r3, r3
    dff6:	f8ad 3008 	strh.w	r3, [sp, #8]
    msg.data.pPacket = pPacket;
    dffa:	9b00      	ldr	r3, [sp, #0]
    dffc:	9303      	str	r3, [sp, #12]
    smpSmExecute(pCcb, &msg);
    dffe:	ab02      	add	r3, sp, #8
    e000:	4619      	mov	r1, r3
    e002:	9809      	ldr	r0, [sp, #36]	; 0x24
    e004:	f7ff fd2e 	bl	da64 <smpSmExecute>
  {
    e008:	e00b      	b.n	e022 <smpL2cDataCback+0xb6>
  }
  /* else ignore it */
  else
  {
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
    e00a:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
    e00e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e012:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e014:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    e018:	4804      	ldr	r0, [pc, #16]	; (e02c <smpL2cDataCback+0xc0>)
    e01a:	f00a fe95 	bl	18d48 <WsfTrace>
    e01e:	e000      	b.n	e022 <smpL2cDataCback+0xb6>
    return;
    e020:	bf00      	nop
  }
}
    e022:	b00b      	add	sp, #44	; 0x2c
    e024:	f85d fb04 	ldr.w	pc, [sp], #4
    e028:	0002968c 	.word	0x0002968c
    e02c:	00028130 	.word	0x00028130

0000e030 <smpL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
    e030:	b500      	push	{lr}
    e032:	b085      	sub	sp, #20
    e034:	9001      	str	r0, [sp, #4]
  smpCcb_t      *pCcb;
  uint8_t       *pPkt;

  /* get connection control block */
  pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);
    e036:	9b01      	ldr	r3, [sp, #4]
    e038:	881b      	ldrh	r3, [r3, #0]
    e03a:	b2db      	uxtb	r3, r3
    e03c:	4618      	mov	r0, r3
    e03e:	f000 f92b 	bl	e298 <smpCcbByConnId>
    e042:	9003      	str	r0, [sp, #12]

  /* verify connection is open */
  if (pCcb->connId != DM_CONN_ID_NONE)
    e044:	9b03      	ldr	r3, [sp, #12]
    e046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e04a:	2b00      	cmp	r3, #0
    e04c:	d02a      	beq.n	e0a4 <smpL2cCtrlCback+0x74>
  {
    /* set flow */
    pCcb->flowDisabled = (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND);
    e04e:	9b01      	ldr	r3, [sp, #4]
    e050:	789b      	ldrb	r3, [r3, #2]
    e052:	2b01      	cmp	r3, #1
    e054:	bf0c      	ite	eq
    e056:	2301      	moveq	r3, #1
    e058:	2300      	movne	r3, #0
    e05a:	b2db      	uxtb	r3, r3
    e05c:	461a      	mov	r2, r3
    e05e:	9b03      	ldr	r3, [sp, #12]
    e060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* if data flow enabled */
    if (!pCcb->flowDisabled)
    e064:	9b03      	ldr	r3, [sp, #12]
    e066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    e06a:	2b00      	cmp	r3, #0
    e06c:	d11a      	bne.n	e0a4 <smpL2cCtrlCback+0x74>
    {
      /* if packet in qeueue */
      if (pCcb->pQueued != NULL)
    e06e:	9b03      	ldr	r3, [sp, #12]
    e070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e072:	2b00      	cmp	r3, #0
    e074:	d009      	beq.n	e08a <smpL2cCtrlCback+0x5a>
      {
        /* send queued packet */
        pPkt = pCcb->pQueued;
    e076:	9b03      	ldr	r3, [sp, #12]
    e078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e07a:	9302      	str	r3, [sp, #8]
        pCcb->pQueued = NULL;
    e07c:	9b03      	ldr	r3, [sp, #12]
    e07e:	2200      	movs	r2, #0
    e080:	635a      	str	r2, [r3, #52]	; 0x34
        smpSendPkt(pCcb, pPkt);
    e082:	9902      	ldr	r1, [sp, #8]
    e084:	9803      	ldr	r0, [sp, #12]
    e086:	f000 fb71 	bl	e76c <smpSendPkt>
      }

      /* if SMP state not idle */
      if (!smpStateIdle(pCcb))
    e08a:	9803      	ldr	r0, [sp, #12]
    e08c:	f000 fba2 	bl	e7d4 <smpStateIdle>
    e090:	4603      	mov	r3, r0
    e092:	2b00      	cmp	r3, #0
    e094:	d106      	bne.n	e0a4 <smpL2cCtrlCback+0x74>
      {
        /* trigger send of next key */
        pMsg->event = SMP_MSG_INT_SEND_NEXT_KEY;
    e096:	9b01      	ldr	r3, [sp, #4]
    e098:	220c      	movs	r2, #12
    e09a:	709a      	strb	r2, [r3, #2]
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
    e09c:	9901      	ldr	r1, [sp, #4]
    e09e:	9803      	ldr	r0, [sp, #12]
    e0a0:	f7ff fce0 	bl	da64 <smpSmExecute>
      }
    }
  }
}
    e0a4:	bf00      	nop
    e0a6:	b005      	add	sp, #20
    e0a8:	f85d fb04 	ldr.w	pc, [sp], #4

0000e0ac <smpResumeAttemptsState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpResumeAttemptsState(dmConnId_t connId)
{
    e0ac:	b500      	push	{lr}
    e0ae:	b085      	sub	sp, #20
    e0b0:	4603      	mov	r3, r0
    e0b2:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t *pCcb = smpCcbByConnId(connId);
    e0b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0ba:	4618      	mov	r0, r3
    e0bc:	f000 f8ec 	bl	e298 <smpCcbByConnId>
    e0c0:	9003      	str	r0, [sp, #12]
  uint32_t timeMs = SmpDbGetPairingDisabledTime(connId);
    e0c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0c6:	4618      	mov	r0, r3
    e0c8:	f7ff fe0c 	bl	dce4 <SmpDbGetPairingDisabledTime>
    e0cc:	9002      	str	r0, [sp, #8]

  if (timeMs)
    e0ce:	9b02      	ldr	r3, [sp, #8]
    e0d0:	2b00      	cmp	r3, #0
    e0d2:	d02a      	beq.n	e12a <smpResumeAttemptsState+0x7e>
  {
    if (smpCb.lescSupported)
    e0d4:	4b17      	ldr	r3, [pc, #92]	; (e134 <smpResumeAttemptsState+0x88>)
    e0d6:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
    e0da:	2b00      	cmp	r3, #0
    e0dc:	d00e      	beq.n	e0fc <smpResumeAttemptsState+0x50>
    {
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
    e0de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0e2:	4618      	mov	r0, r3
    e0e4:	f003 fc40 	bl	11968 <DmConnRole>
    e0e8:	4603      	mov	r3, r0
    e0ea:	2b01      	cmp	r3, #1
    e0ec:	d101      	bne.n	e0f2 <smpResumeAttemptsState+0x46>
    e0ee:	2226      	movs	r2, #38	; 0x26
    e0f0:	e000      	b.n	e0f4 <smpResumeAttemptsState+0x48>
    e0f2:	2224      	movs	r2, #36	; 0x24
    e0f4:	9b03      	ldr	r3, [sp, #12]
    e0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    e0fa:	e00d      	b.n	e118 <smpResumeAttemptsState+0x6c>
    }
    else
    {
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SM_ST_ATTEMPTS : SMPI_SM_ST_ATTEMPTS;
    e0fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e100:	4618      	mov	r0, r3
    e102:	f003 fc31 	bl	11968 <DmConnRole>
    e106:	4603      	mov	r3, r0
    e108:	2b01      	cmp	r3, #1
    e10a:	d101      	bne.n	e110 <smpResumeAttemptsState+0x64>
    e10c:	220d      	movs	r2, #13
    e10e:	e000      	b.n	e112 <smpResumeAttemptsState+0x66>
    e110:	220c      	movs	r2, #12
    e112:	9b03      	ldr	r3, [sp, #12]
    e114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    /* Start smp timer indicating the time to prevent pairing in the attempts state */
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
    e118:	9b03      	ldr	r3, [sp, #12]
    e11a:	2210      	movs	r2, #16
    e11c:	771a      	strb	r2, [r3, #28]
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
    e11e:	9b03      	ldr	r3, [sp, #12]
    e120:	3310      	adds	r3, #16
    e122:	9902      	ldr	r1, [sp, #8]
    e124:	4618      	mov	r0, r3
    e126:	f00a fd37 	bl	18b98 <WsfTimerStartMs>
  }
}
    e12a:	bf00      	nop
    e12c:	b005      	add	sp, #20
    e12e:	f85d fb04 	ldr.w	pc, [sp], #4
    e132:	bf00      	nop
    e134:	10008824 	.word	0x10008824

0000e138 <smpDmConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpDmConnCback(dmEvt_t *pDmEvt)
{
    e138:	b500      	push	{lr}
    e13a:	b085      	sub	sp, #20
    e13c:	9001      	str	r0, [sp, #4]
  smpCcb_t      *pCcb;
  wsfMsgHdr_t   hdr;

  pCcb = smpCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
    e13e:	9b01      	ldr	r3, [sp, #4]
    e140:	881b      	ldrh	r3, [r3, #0]
    e142:	b2db      	uxtb	r3, r3
    e144:	4618      	mov	r0, r3
    e146:	f000 f8a7 	bl	e298 <smpCcbByConnId>
    e14a:	9003      	str	r0, [sp, #12]

  /* if new connection created */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    e14c:	9b01      	ldr	r3, [sp, #4]
    e14e:	789b      	ldrb	r3, [r3, #2]
    e150:	2b27      	cmp	r3, #39	; 0x27
    e152:	d145      	bne.n	e1e0 <smpDmConnCback+0xa8>
  {
    /* set up state machine for master or slave */
    if (DmConnRole((dmConnId_t) pDmEvt->hdr.param) == DM_ROLE_MASTER)
    e154:	9b01      	ldr	r3, [sp, #4]
    e156:	881b      	ldrh	r3, [r3, #0]
    e158:	b2db      	uxtb	r3, r3
    e15a:	4618      	mov	r0, r3
    e15c:	f003 fc04 	bl	11968 <DmConnRole>
    e160:	4603      	mov	r3, r0
    e162:	2b00      	cmp	r3, #0
    e164:	d108      	bne.n	e178 <smpDmConnCback+0x40>
    {
      pCcb->initiator = TRUE;
    e166:	9b03      	ldr	r3, [sp, #12]
    e168:	2201      	movs	r2, #1
    e16a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      pCcb->nextCmdCode = SMP_CMD_SECURITY_REQ;
    e16e:	9b03      	ldr	r3, [sp, #12]
    e170:	220b      	movs	r2, #11
    e172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    e176:	e007      	b.n	e188 <smpDmConnCback+0x50>
    }
    else
    {
      pCcb->initiator = FALSE;
    e178:	9b03      	ldr	r3, [sp, #12]
    e17a:	2200      	movs	r2, #0
    e17c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
    e180:	9b03      	ldr	r3, [sp, #12]
    e182:	2201      	movs	r2, #1
    e184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    /* initialize control block */
    pCcb->handle = pDmEvt->connOpen.handle;
    e188:	9b01      	ldr	r3, [sp, #4]
    e18a:	88da      	ldrh	r2, [r3, #6]
    e18c:	9b03      	ldr	r3, [sp, #12]
    e18e:	871a      	strh	r2, [r3, #56]	; 0x38
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
    e190:	9b01      	ldr	r3, [sp, #4]
    e192:	881b      	ldrh	r3, [r3, #0]
    e194:	b2da      	uxtb	r2, r3
    e196:	9b03      	ldr	r3, [sp, #12]
    e198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    pCcb->secReq = FALSE;
    e19c:	9b03      	ldr	r3, [sp, #12]
    e19e:	2200      	movs	r2, #0
    e1a0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    pCcb->flowDisabled = FALSE;
    e1a4:	9b03      	ldr	r3, [sp, #12]
    e1a6:	2200      	movs	r2, #0
    e1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
    e1ac:	9b01      	ldr	r3, [sp, #4]
    e1ae:	881b      	ldrh	r3, [r3, #0]
    e1b0:	b2db      	uxtb	r3, r3
    e1b2:	4618      	mov	r0, r3
    e1b4:	f7ff fdde 	bl	dd74 <SmpDbGetFailureCount>
    e1b8:	4603      	mov	r3, r0
    e1ba:	461a      	mov	r2, r3
    e1bc:	9b03      	ldr	r3, [sp, #12]
    e1be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    pCcb->lastSentKey = 0;
    e1c2:	9b03      	ldr	r3, [sp, #12]
    e1c4:	2200      	movs	r2, #0
    e1c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pCcb->state = 0;
    e1ca:	9b03      	ldr	r3, [sp, #12]
    e1cc:	2200      	movs	r2, #0
    e1ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Resume the attempts state if necessary */
    smpResumeAttemptsState((dmConnId_t) pDmEvt->hdr.param);
    e1d2:	9b01      	ldr	r3, [sp, #4]
    e1d4:	881b      	ldrh	r3, [r3, #0]
    e1d6:	b2db      	uxtb	r3, r3
    e1d8:	4618      	mov	r0, r3
    e1da:	f7ff ff67 	bl	e0ac <smpResumeAttemptsState>
        WsfMsgFree(pCcb->pQueued);
        pCcb->pQueued = NULL;
      }
    }
  }
}
    e1de:	e034      	b.n	e24a <smpDmConnCback+0x112>
  else if (pCcb->connId != DM_CONN_ID_NONE)
    e1e0:	9b03      	ldr	r3, [sp, #12]
    e1e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e1e6:	2b00      	cmp	r3, #0
    e1e8:	d02f      	beq.n	e24a <smpDmConnCback+0x112>
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
    e1ea:	9b01      	ldr	r3, [sp, #4]
    e1ec:	789b      	ldrb	r3, [r3, #2]
    e1ee:	2b28      	cmp	r3, #40	; 0x28
    e1f0:	d12b      	bne.n	e24a <smpDmConnCback+0x112>
      SmpDbSetFailureCount((dmConnId_t) pDmEvt->hdr.param, pCcb->attempts);
    e1f2:	9b01      	ldr	r3, [sp, #4]
    e1f4:	881b      	ldrh	r3, [r3, #0]
    e1f6:	b2da      	uxtb	r2, r3
    e1f8:	9b03      	ldr	r3, [sp, #12]
    e1fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    e1fe:	4619      	mov	r1, r3
    e200:	4610      	mov	r0, r2
    e202:	f7ff fd8b 	bl	dd1c <SmpDbSetFailureCount>
      hdr.param = pDmEvt->hdr.param;
    e206:	9b01      	ldr	r3, [sp, #4]
    e208:	881b      	ldrh	r3, [r3, #0]
    e20a:	f8ad 3008 	strh.w	r3, [sp, #8]
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
    e20e:	230a      	movs	r3, #10
    e210:	f88d 300a 	strb.w	r3, [sp, #10]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
    e214:	9b01      	ldr	r3, [sp, #4]
    e216:	7a1b      	ldrb	r3, [r3, #8]
    e218:	3320      	adds	r3, #32
    e21a:	b2db      	uxtb	r3, r3
    e21c:	f88d 300b 	strb.w	r3, [sp, #11]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e220:	ab02      	add	r3, sp, #8
    e222:	4619      	mov	r1, r3
    e224:	9803      	ldr	r0, [sp, #12]
    e226:	f7ff fc1d 	bl	da64 <smpSmExecute>
      pCcb->connId = DM_CONN_ID_NONE;
    e22a:	9b03      	ldr	r3, [sp, #12]
    e22c:	2200      	movs	r2, #0
    e22e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (pCcb->pQueued != NULL)
    e232:	9b03      	ldr	r3, [sp, #12]
    e234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e236:	2b00      	cmp	r3, #0
    e238:	d007      	beq.n	e24a <smpDmConnCback+0x112>
        WsfMsgFree(pCcb->pQueued);
    e23a:	9b03      	ldr	r3, [sp, #12]
    e23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e23e:	4618      	mov	r0, r3
    e240:	f00a f92f 	bl	184a2 <WsfMsgFree>
        pCcb->pQueued = NULL;
    e244:	9b03      	ldr	r3, [sp, #12]
    e246:	2200      	movs	r2, #0
    e248:	635a      	str	r2, [r3, #52]	; 0x34
}
    e24a:	bf00      	nop
    e24c:	b005      	add	sp, #20
    e24e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e254 <smpCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
smpCcb_t *smpCcbByHandle(uint16_t handle)
{
    e254:	b500      	push	{lr}
    e256:	b085      	sub	sp, #20
    e258:	4603      	mov	r3, r0
    e25a:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
    e25e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e262:	4618      	mov	r0, r3
    e264:	f003 fa20 	bl	116a8 <DmConnIdByHandle>
    e268:	4603      	mov	r3, r0
    e26a:	f88d 300f 	strb.w	r3, [sp, #15]
    e26e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e272:	2b00      	cmp	r3, #0
    e274:	d009      	beq.n	e28a <smpCcbByHandle+0x36>
  {
    return &smpCb.ccb[connId - 1];
    e276:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e27a:	1e5a      	subs	r2, r3, #1
    e27c:	4613      	mov	r3, r2
    e27e:	00db      	lsls	r3, r3, #3
    e280:	4413      	add	r3, r2
    e282:	00db      	lsls	r3, r3, #3
    e284:	4a03      	ldr	r2, [pc, #12]	; (e294 <smpCcbByHandle+0x40>)
    e286:	4413      	add	r3, r2
    e288:	e000      	b.n	e28c <smpCcbByHandle+0x38>
  }

  return NULL;
    e28a:	2300      	movs	r3, #0
}
    e28c:	4618      	mov	r0, r3
    e28e:	b005      	add	sp, #20
    e290:	f85d fb04 	ldr.w	pc, [sp], #4
    e294:	10008824 	.word	0x10008824

0000e298 <smpCcbByConnId>:
 *
 *  \return Pointer to connection control block.
 */
/*************************************************************************************************/
smpCcb_t *smpCcbByConnId(dmConnId_t connId)
{
    e298:	b082      	sub	sp, #8
    e29a:	4603      	mov	r3, r0
    e29c:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &smpCb.ccb[connId - 1];
    e2a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2a4:	1e5a      	subs	r2, r3, #1
    e2a6:	4613      	mov	r3, r2
    e2a8:	00db      	lsls	r3, r3, #3
    e2aa:	4413      	add	r3, r2
    e2ac:	00db      	lsls	r3, r3, #3
    e2ae:	4a02      	ldr	r2, [pc, #8]	; (e2b8 <smpCcbByConnId+0x20>)
    e2b0:	4413      	add	r3, r2
}
    e2b2:	4618      	mov	r0, r3
    e2b4:	b002      	add	sp, #8
    e2b6:	4770      	bx	lr
    e2b8:	10008824 	.word	0x10008824

0000e2bc <smpCalcC1Part1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcC1Part1(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pRand)
{
    e2bc:	b500      	push	{lr}
    e2be:	b08f      	sub	sp, #60	; 0x3c
    e2c0:	9005      	str	r0, [sp, #20]
    e2c2:	9104      	str	r1, [sp, #16]
    e2c4:	9203      	str	r2, [sp, #12]
  uint8_t   i;
  uint8_t   iAddrType;
  uint8_t   rAddrType;

  /* set initiator/responder address types */
  if (pCcb->initiator)
    e2c6:	9b05      	ldr	r3, [sp, #20]
    e2c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	d034      	beq.n	e33a <smpCalcC1Part1+0x7e>
  {
    /* if local device's using RPA */
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
    e2d0:	9b05      	ldr	r3, [sp, #20]
    e2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e2d6:	4618      	mov	r0, r3
    e2d8:	f003 fa90 	bl	117fc <DmConnLocalRpa>
    e2dc:	4603      	mov	r3, r0
    e2de:	4618      	mov	r0, r3
    e2e0:	f00d f820 	bl	1b324 <BdaIsZeros>
    e2e4:	4603      	mov	r3, r0
    e2e6:	2b00      	cmp	r3, #0
    e2e8:	d103      	bne.n	e2f2 <smpCalcC1Part1+0x36>
    {
      iAddrType = DM_ADDR_RANDOM;
    e2ea:	2301      	movs	r3, #1
    e2ec:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    e2f0:	e008      	b.n	e304 <smpCalcC1Part1+0x48>
    }
    else
    {
      iAddrType = DmConnLocalAddrType(pCcb->connId);
    e2f2:	9b05      	ldr	r3, [sp, #20]
    e2f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e2f8:	4618      	mov	r0, r3
    e2fa:	f003 fa43 	bl	11784 <DmConnLocalAddrType>
    e2fe:	4603      	mov	r3, r0
    e300:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    /* if peer device's using RPA */
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
    e304:	9b05      	ldr	r3, [sp, #20]
    e306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e30a:	4618      	mov	r0, r3
    e30c:	f003 fa62 	bl	117d4 <DmConnPeerRpa>
    e310:	4603      	mov	r3, r0
    e312:	4618      	mov	r0, r3
    e314:	f00d f806 	bl	1b324 <BdaIsZeros>
    e318:	4603      	mov	r3, r0
    e31a:	2b00      	cmp	r3, #0
    e31c:	d103      	bne.n	e326 <smpCalcC1Part1+0x6a>
    {
      rAddrType = DM_ADDR_RANDOM;
    e31e:	2301      	movs	r3, #1
    e320:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    e324:	e03d      	b.n	e3a2 <smpCalcC1Part1+0xe6>
    }
    else
    {
      rAddrType = DmConnPeerAddrType(pCcb->connId);
    e326:	9b05      	ldr	r3, [sp, #20]
    e328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e32c:	4618      	mov	r0, r3
    e32e:	f003 fa03 	bl	11738 <DmConnPeerAddrType>
    e332:	4603      	mov	r3, r0
    e334:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    e338:	e033      	b.n	e3a2 <smpCalcC1Part1+0xe6>
    }
  }
  else
  {
    /* if peer device's using RPA */
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
    e33a:	9b05      	ldr	r3, [sp, #20]
    e33c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e340:	4618      	mov	r0, r3
    e342:	f003 fa47 	bl	117d4 <DmConnPeerRpa>
    e346:	4603      	mov	r3, r0
    e348:	4618      	mov	r0, r3
    e34a:	f00c ffeb 	bl	1b324 <BdaIsZeros>
    e34e:	4603      	mov	r3, r0
    e350:	2b00      	cmp	r3, #0
    e352:	d103      	bne.n	e35c <smpCalcC1Part1+0xa0>
    {
      iAddrType = DM_ADDR_RANDOM;
    e354:	2301      	movs	r3, #1
    e356:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    e35a:	e008      	b.n	e36e <smpCalcC1Part1+0xb2>
    }
    else
    {
      iAddrType = DmConnPeerAddrType(pCcb->connId);
    e35c:	9b05      	ldr	r3, [sp, #20]
    e35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e362:	4618      	mov	r0, r3
    e364:	f003 f9e8 	bl	11738 <DmConnPeerAddrType>
    e368:	4603      	mov	r3, r0
    e36a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    /* if local device's using RPA */
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
    e36e:	9b05      	ldr	r3, [sp, #20]
    e370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e374:	4618      	mov	r0, r3
    e376:	f003 fa41 	bl	117fc <DmConnLocalRpa>
    e37a:	4603      	mov	r3, r0
    e37c:	4618      	mov	r0, r3
    e37e:	f00c ffd1 	bl	1b324 <BdaIsZeros>
    e382:	4603      	mov	r3, r0
    e384:	2b00      	cmp	r3, #0
    e386:	d103      	bne.n	e390 <smpCalcC1Part1+0xd4>
    {
      rAddrType = DM_ADDR_RANDOM;
    e388:	2301      	movs	r3, #1
    e38a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    e38e:	e008      	b.n	e3a2 <smpCalcC1Part1+0xe6>
    }
    else
    {
      rAddrType = DmConnLocalAddrType(pCcb->connId);
    e390:	9b05      	ldr	r3, [sp, #20]
    e392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e396:	4618      	mov	r0, r3
    e398:	f003 f9f4 	bl	11784 <DmConnLocalAddrType>
    e39c:	4603      	mov	r3, r0
    e39e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  }

  /* note all numbers contained in byte arrays are little endian */

  /* create parameter from xor of r and pres, preq, rat, and iat */
  p = buf;
    e3a2:	ab08      	add	r3, sp, #32
    e3a4:	930d      	str	r3, [sp, #52]	; 0x34
  *p++ = iAddrType ^ *pRand++;
    e3a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e3a8:	1c5a      	adds	r2, r3, #1
    e3aa:	920d      	str	r2, [sp, #52]	; 0x34
    e3ac:	9a03      	ldr	r2, [sp, #12]
    e3ae:	1c51      	adds	r1, r2, #1
    e3b0:	9103      	str	r1, [sp, #12]
    e3b2:	7811      	ldrb	r1, [r2, #0]
    e3b4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    e3b8:	404a      	eors	r2, r1
    e3ba:	b2d2      	uxtb	r2, r2
    e3bc:	701a      	strb	r2, [r3, #0]
  *p++ = rAddrType ^ *pRand++;
    e3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e3c0:	1c5a      	adds	r2, r3, #1
    e3c2:	920d      	str	r2, [sp, #52]	; 0x34
    e3c4:	9a03      	ldr	r2, [sp, #12]
    e3c6:	1c51      	adds	r1, r2, #1
    e3c8:	9103      	str	r1, [sp, #12]
    e3ca:	7811      	ldrb	r1, [r2, #0]
    e3cc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    e3d0:	404a      	eors	r2, r1
    e3d2:	b2d2      	uxtb	r2, r2
    e3d4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_REQ_LEN; i++)
    e3d6:	2300      	movs	r3, #0
    e3d8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    e3dc:	e014      	b.n	e408 <smpCalcC1Part1+0x14c>
  {
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    e3de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e3e0:	1c5a      	adds	r2, r3, #1
    e3e2:	920d      	str	r2, [sp, #52]	; 0x34
    e3e4:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    e3e8:	9905      	ldr	r1, [sp, #20]
    e3ea:	440a      	add	r2, r1
    e3ec:	f892 1020 	ldrb.w	r1, [r2, #32]
    e3f0:	9a03      	ldr	r2, [sp, #12]
    e3f2:	1c50      	adds	r0, r2, #1
    e3f4:	9003      	str	r0, [sp, #12]
    e3f6:	7812      	ldrb	r2, [r2, #0]
    e3f8:	404a      	eors	r2, r1
    e3fa:	b2d2      	uxtb	r2, r2
    e3fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_REQ_LEN; i++)
    e3fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    e402:	3301      	adds	r3, #1
    e404:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    e408:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    e40c:	2b06      	cmp	r3, #6
    e40e:	d9e6      	bls.n	e3de <smpCalcC1Part1+0x122>
  }
  for (i = 0; i < SMP_PAIR_RSP_LEN; i++)
    e410:	2300      	movs	r3, #0
    e412:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    e416:	e014      	b.n	e442 <smpCalcC1Part1+0x186>
  {
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    e418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e41a:	1c5a      	adds	r2, r3, #1
    e41c:	920d      	str	r2, [sp, #52]	; 0x34
    e41e:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    e422:	9905      	ldr	r1, [sp, #20]
    e424:	440a      	add	r2, r1
    e426:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
    e42a:	9a03      	ldr	r2, [sp, #12]
    e42c:	1c50      	adds	r0, r2, #1
    e42e:	9003      	str	r0, [sp, #12]
    e430:	7812      	ldrb	r2, [r2, #0]
    e432:	404a      	eors	r2, r1
    e434:	b2d2      	uxtb	r2, r2
    e436:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_RSP_LEN; i++)
    e438:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    e43c:	3301      	adds	r3, #1
    e43e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    e442:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    e446:	2b06      	cmp	r3, #6
    e448:	d9e6      	bls.n	e418 <smpCalcC1Part1+0x15c>
  }

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    e44a:	4b13      	ldr	r3, [pc, #76]	; (e498 <smpCalcC1Part1+0x1dc>)
    e44c:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
    e450:	9b05      	ldr	r3, [sp, #20]
    e452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e456:	b298      	uxth	r0, r3
    e458:	a908      	add	r1, sp, #32
    e45a:	230b      	movs	r3, #11
    e45c:	9300      	str	r3, [sp, #0]
    e45e:	4603      	mov	r3, r0
    e460:	9804      	ldr	r0, [sp, #16]
    e462:	f004 fc1d 	bl	12ca0 <SecAes>
    e466:	4603      	mov	r3, r0
    e468:	461a      	mov	r2, r3
    e46a:	9b05      	ldr	r3, [sp, #20]
    e46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
    e470:	9b05      	ldr	r3, [sp, #20]
    e472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    e476:	2bff      	cmp	r3, #255	; 0xff
    e478:	d10a      	bne.n	e490 <smpCalcC1Part1+0x1d4>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
    e47a:	2308      	movs	r3, #8
    e47c:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    e480:	2303      	movs	r3, #3
    e482:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e486:	ab07      	add	r3, sp, #28
    e488:	4619      	mov	r1, r3
    e48a:	9805      	ldr	r0, [sp, #20]
    e48c:	f7ff faea 	bl	da64 <smpSmExecute>
  }
}
    e490:	bf00      	nop
    e492:	b00f      	add	sp, #60	; 0x3c
    e494:	f85d fb04 	ldr.w	pc, [sp], #4
    e498:	10008824 	.word	0x10008824

0000e49c <smpCalcC1Part2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcC1Part2(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pPart1)
{
    e49c:	b500      	push	{lr}
    e49e:	b091      	sub	sp, #68	; 0x44
    e4a0:	9005      	str	r0, [sp, #20]
    e4a2:	9104      	str	r1, [sp, #16]
    e4a4:	9203      	str	r2, [sp, #12]
  uint8_t   i;
  uint8_t   *pIaddr;
  uint8_t   *pRaddr;

  /* set initiator/responder addresss */
  if (pCcb->initiator)
    e4a6:	9b05      	ldr	r3, [sp, #20]
    e4a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d028      	beq.n	e502 <smpCalcC1Part2+0x66>
  {
    /* use local device's RPA */
    pIaddr = DmConnLocalRpa(pCcb->connId);
    e4b0:	9b05      	ldr	r3, [sp, #20]
    e4b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e4b6:	4618      	mov	r0, r3
    e4b8:	f003 f9a0 	bl	117fc <DmConnLocalRpa>
    e4bc:	900d      	str	r0, [sp, #52]	; 0x34

    /* if local device's not using RPA */
    if (BdaIsZeros(pIaddr))
    e4be:	980d      	ldr	r0, [sp, #52]	; 0x34
    e4c0:	f00c ff30 	bl	1b324 <BdaIsZeros>
    e4c4:	4603      	mov	r3, r0
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d006      	beq.n	e4d8 <smpCalcC1Part2+0x3c>
    {
      /* use local device's address */
      pIaddr = DmConnLocalAddr(pCcb->connId);
    e4ca:	9b05      	ldr	r3, [sp, #20]
    e4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e4d0:	4618      	mov	r0, r3
    e4d2:	f003 f96b 	bl	117ac <DmConnLocalAddr>
    e4d6:	900d      	str	r0, [sp, #52]	; 0x34
    }

    /* use peer device's RPA */
    pRaddr = DmConnPeerRpa(pCcb->connId);
    e4d8:	9b05      	ldr	r3, [sp, #20]
    e4da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e4de:	4618      	mov	r0, r3
    e4e0:	f003 f978 	bl	117d4 <DmConnPeerRpa>
    e4e4:	900c      	str	r0, [sp, #48]	; 0x30

    /* if peer device's not using RPA */
    if (BdaIsZeros(pRaddr))
    e4e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    e4e8:	f00c ff1c 	bl	1b324 <BdaIsZeros>
    e4ec:	4603      	mov	r3, r0
    e4ee:	2b00      	cmp	r3, #0
    e4f0:	d02f      	beq.n	e552 <smpCalcC1Part2+0xb6>
    {
      /* use peer device's address */
      pRaddr = DmConnPeerAddr(pCcb->connId);
    e4f2:	9b05      	ldr	r3, [sp, #20]
    e4f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e4f8:	4618      	mov	r0, r3
    e4fa:	f003 f931 	bl	11760 <DmConnPeerAddr>
    e4fe:	900c      	str	r0, [sp, #48]	; 0x30
    e500:	e027      	b.n	e552 <smpCalcC1Part2+0xb6>
    }
  }
  else
  {
    /* use peer device's RPA */
    pIaddr = DmConnPeerRpa(pCcb->connId);
    e502:	9b05      	ldr	r3, [sp, #20]
    e504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e508:	4618      	mov	r0, r3
    e50a:	f003 f963 	bl	117d4 <DmConnPeerRpa>
    e50e:	900d      	str	r0, [sp, #52]	; 0x34

    /* if peer device's not using RPA */
    if (BdaIsZeros(pIaddr))
    e510:	980d      	ldr	r0, [sp, #52]	; 0x34
    e512:	f00c ff07 	bl	1b324 <BdaIsZeros>
    e516:	4603      	mov	r3, r0
    e518:	2b00      	cmp	r3, #0
    e51a:	d006      	beq.n	e52a <smpCalcC1Part2+0x8e>
    {
      /* use peer device's address */
      pIaddr = DmConnPeerAddr(pCcb->connId);
    e51c:	9b05      	ldr	r3, [sp, #20]
    e51e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e522:	4618      	mov	r0, r3
    e524:	f003 f91c 	bl	11760 <DmConnPeerAddr>
    e528:	900d      	str	r0, [sp, #52]	; 0x34
    }

    /* use local device's RPA */
    pRaddr = DmConnLocalRpa(pCcb->connId);
    e52a:	9b05      	ldr	r3, [sp, #20]
    e52c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e530:	4618      	mov	r0, r3
    e532:	f003 f963 	bl	117fc <DmConnLocalRpa>
    e536:	900c      	str	r0, [sp, #48]	; 0x30

    /* if local device's not using RPA */
    if (BdaIsZeros(pRaddr))
    e538:	980c      	ldr	r0, [sp, #48]	; 0x30
    e53a:	f00c fef3 	bl	1b324 <BdaIsZeros>
    e53e:	4603      	mov	r3, r0
    e540:	2b00      	cmp	r3, #0
    e542:	d006      	beq.n	e552 <smpCalcC1Part2+0xb6>
    {
      /* use local device's address */
      pRaddr = DmConnLocalAddr(pCcb->connId);
    e544:	9b05      	ldr	r3, [sp, #20]
    e546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e54a:	4618      	mov	r0, r3
    e54c:	f003 f92e 	bl	117ac <DmConnLocalAddr>
    e550:	900c      	str	r0, [sp, #48]	; 0x30
  }

  /* note all numbers contained in byte arrays are little endian */

  /* create parameter from xor of part 1 result with ia, ra, and pad */
  p = buf;
    e552:	ab08      	add	r3, sp, #32
    e554:	930f      	str	r3, [sp, #60]	; 0x3c
  for (i = BDA_ADDR_LEN; i > 0; i--)
    e556:	2306      	movs	r3, #6
    e558:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    e55c:	e012      	b.n	e584 <smpCalcC1Part2+0xe8>
  {
    *p++ = *pRaddr++ ^ *pPart1++;
    e55e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e560:	1c5a      	adds	r2, r3, #1
    e562:	920f      	str	r2, [sp, #60]	; 0x3c
    e564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e566:	1c51      	adds	r1, r2, #1
    e568:	910c      	str	r1, [sp, #48]	; 0x30
    e56a:	7811      	ldrb	r1, [r2, #0]
    e56c:	9a03      	ldr	r2, [sp, #12]
    e56e:	1c50      	adds	r0, r2, #1
    e570:	9003      	str	r0, [sp, #12]
    e572:	7812      	ldrb	r2, [r2, #0]
    e574:	404a      	eors	r2, r1
    e576:	b2d2      	uxtb	r2, r2
    e578:	701a      	strb	r2, [r3, #0]
  for (i = BDA_ADDR_LEN; i > 0; i--)
    e57a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    e57e:	3b01      	subs	r3, #1
    e580:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    e584:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    e588:	2b00      	cmp	r3, #0
    e58a:	d1e8      	bne.n	e55e <smpCalcC1Part2+0xc2>
  }
  for (i = BDA_ADDR_LEN; i > 0; i--)
    e58c:	2306      	movs	r3, #6
    e58e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    e592:	e012      	b.n	e5ba <smpCalcC1Part2+0x11e>
  {
    *p++ = *pIaddr++ ^ *pPart1++;
    e594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e596:	1c5a      	adds	r2, r3, #1
    e598:	920f      	str	r2, [sp, #60]	; 0x3c
    e59a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e59c:	1c51      	adds	r1, r2, #1
    e59e:	910d      	str	r1, [sp, #52]	; 0x34
    e5a0:	7811      	ldrb	r1, [r2, #0]
    e5a2:	9a03      	ldr	r2, [sp, #12]
    e5a4:	1c50      	adds	r0, r2, #1
    e5a6:	9003      	str	r0, [sp, #12]
    e5a8:	7812      	ldrb	r2, [r2, #0]
    e5aa:	404a      	eors	r2, r1
    e5ac:	b2d2      	uxtb	r2, r2
    e5ae:	701a      	strb	r2, [r3, #0]
  for (i = BDA_ADDR_LEN; i > 0; i--)
    e5b0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    e5b4:	3b01      	subs	r3, #1
    e5b6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    e5ba:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    e5be:	2b00      	cmp	r3, #0
    e5c0:	d1e8      	bne.n	e594 <smpCalcC1Part2+0xf8>
  }
  *p++ = *pPart1++;
    e5c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e5c4:	1c5a      	adds	r2, r3, #1
    e5c6:	920f      	str	r2, [sp, #60]	; 0x3c
    e5c8:	9a03      	ldr	r2, [sp, #12]
    e5ca:	1c51      	adds	r1, r2, #1
    e5cc:	9103      	str	r1, [sp, #12]
    e5ce:	7812      	ldrb	r2, [r2, #0]
    e5d0:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
    e5d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e5d4:	1c5a      	adds	r2, r3, #1
    e5d6:	920f      	str	r2, [sp, #60]	; 0x3c
    e5d8:	9a03      	ldr	r2, [sp, #12]
    e5da:	1c51      	adds	r1, r2, #1
    e5dc:	9103      	str	r1, [sp, #12]
    e5de:	7812      	ldrb	r2, [r2, #0]
    e5e0:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
    e5e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e5e4:	1c5a      	adds	r2, r3, #1
    e5e6:	920f      	str	r2, [sp, #60]	; 0x3c
    e5e8:	9a03      	ldr	r2, [sp, #12]
    e5ea:	1c51      	adds	r1, r2, #1
    e5ec:	9103      	str	r1, [sp, #12]
    e5ee:	7812      	ldrb	r2, [r2, #0]
    e5f0:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
    e5f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e5f4:	1c5a      	adds	r2, r3, #1
    e5f6:	920f      	str	r2, [sp, #60]	; 0x3c
    e5f8:	9a03      	ldr	r2, [sp, #12]
    e5fa:	1c51      	adds	r1, r2, #1
    e5fc:	9103      	str	r1, [sp, #12]
    e5fe:	7812      	ldrb	r2, [r2, #0]
    e600:	701a      	strb	r2, [r3, #0]

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    e602:	4b13      	ldr	r3, [pc, #76]	; (e650 <smpCalcC1Part2+0x1b4>)
    e604:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
    e608:	9b05      	ldr	r3, [sp, #20]
    e60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e60e:	b298      	uxth	r0, r3
    e610:	a908      	add	r1, sp, #32
    e612:	230b      	movs	r3, #11
    e614:	9300      	str	r3, [sp, #0]
    e616:	4603      	mov	r3, r0
    e618:	9804      	ldr	r0, [sp, #16]
    e61a:	f004 fb41 	bl	12ca0 <SecAes>
    e61e:	4603      	mov	r3, r0
    e620:	461a      	mov	r2, r3
    e622:	9b05      	ldr	r3, [sp, #20]
    e624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
    e628:	9b05      	ldr	r3, [sp, #20]
    e62a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    e62e:	2bff      	cmp	r3, #255	; 0xff
    e630:	d10a      	bne.n	e648 <smpCalcC1Part2+0x1ac>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
    e632:	2308      	movs	r3, #8
    e634:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    e638:	2303      	movs	r3, #3
    e63a:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e63e:	ab07      	add	r3, sp, #28
    e640:	4619      	mov	r1, r3
    e642:	9805      	ldr	r0, [sp, #20]
    e644:	f7ff fa0e 	bl	da64 <smpSmExecute>
  }
}
    e648:	bf00      	nop
    e64a:	b011      	add	sp, #68	; 0x44
    e64c:	f85d fb04 	ldr.w	pc, [sp], #4
    e650:	10008824 	.word	0x10008824

0000e654 <smpCalcS1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcS1(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pRand1, uint8_t *pRand2)
{
    e654:	b500      	push	{lr}
    e656:	b08d      	sub	sp, #52	; 0x34
    e658:	9005      	str	r0, [sp, #20]
    e65a:	9104      	str	r1, [sp, #16]
    e65c:	9203      	str	r2, [sp, #12]
    e65e:	9302      	str	r3, [sp, #8]
  uint8_t   buf[HCI_ENCRYPT_DATA_LEN];

  /* note all numbers contained in byte arrays are little endian */

  /* construct parameter r' from r1 and r2 */
  Calc128Cpy64(buf, pRand2);
    e660:	ab08      	add	r3, sp, #32
    e662:	9902      	ldr	r1, [sp, #8]
    e664:	4618      	mov	r0, r3
    e666:	f00c fe81 	bl	1b36c <Calc128Cpy64>
  Calc128Cpy64(&buf[SMP_RAND8_LEN], pRand1);
    e66a:	ab08      	add	r3, sp, #32
    e66c:	3308      	adds	r3, #8
    e66e:	9903      	ldr	r1, [sp, #12]
    e670:	4618      	mov	r0, r3
    e672:	f00c fe7b 	bl	1b36c <Calc128Cpy64>

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    e676:	4b13      	ldr	r3, [pc, #76]	; (e6c4 <smpCalcS1+0x70>)
    e678:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
    e67c:	9b05      	ldr	r3, [sp, #20]
    e67e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e682:	b298      	uxth	r0, r3
    e684:	a908      	add	r1, sp, #32
    e686:	230b      	movs	r3, #11
    e688:	9300      	str	r3, [sp, #0]
    e68a:	4603      	mov	r3, r0
    e68c:	9804      	ldr	r0, [sp, #16]
    e68e:	f004 fb07 	bl	12ca0 <SecAes>
    e692:	4603      	mov	r3, r0
    e694:	461a      	mov	r2, r3
    e696:	9b05      	ldr	r3, [sp, #20]
    e698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
    e69c:	9b05      	ldr	r3, [sp, #20]
    e69e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    e6a2:	2bff      	cmp	r3, #255	; 0xff
    e6a4:	d10a      	bne.n	e6bc <smpCalcS1+0x68>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
    e6a6:	2308      	movs	r3, #8
    e6a8:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    e6ac:	2303      	movs	r3, #3
    e6ae:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e6b2:	ab07      	add	r3, sp, #28
    e6b4:	4619      	mov	r1, r3
    e6b6:	9805      	ldr	r0, [sp, #20]
    e6b8:	f7ff f9d4 	bl	da64 <smpSmExecute>
  }
}
    e6bc:	bf00      	nop
    e6be:	b00d      	add	sp, #52	; 0x34
    e6c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e6c4:	10008824 	.word	0x10008824

0000e6c8 <smpGenerateLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpGenerateLtk(smpCcb_t *pCcb)
{
    e6c8:	b500      	push	{lr}
    e6ca:	b085      	sub	sp, #20
    e6cc:	9001      	str	r0, [sp, #4]
  uint8_t *p;
  smpScratch_t *pScr = pCcb->pScr;
    e6ce:	9b01      	ldr	r3, [sp, #4]
    e6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e6d2:	9303      	str	r3, [sp, #12]

  /* generated results are stored in scratch buffer */
  p = pScr->keyInd.keyData.ltk.key;
    e6d4:	9b03      	ldr	r3, [sp, #12]
    e6d6:	3304      	adds	r3, #4
    e6d8:	9302      	str	r3, [sp, #8]

  /* generate LTK from random number */
  SecRand(p, pScr->keyInd.encKeyLen);
    e6da:	9b03      	ldr	r3, [sp, #12]
    e6dc:	f893 3020 	ldrb.w	r3, [r3, #32]
    e6e0:	4619      	mov	r1, r3
    e6e2:	9802      	ldr	r0, [sp, #8]
    e6e4:	f004 fdbe 	bl	13264 <SecRand>
  p += pScr->keyInd.encKeyLen;
    e6e8:	9b03      	ldr	r3, [sp, #12]
    e6ea:	f893 3020 	ldrb.w	r3, [r3, #32]
    e6ee:	461a      	mov	r2, r3
    e6f0:	9b02      	ldr	r3, [sp, #8]
    e6f2:	4413      	add	r3, r2
    e6f4:	9302      	str	r3, [sp, #8]

  /* set remaining key bytes to zero */
  memset(p, 0, (SMP_KEY_LEN - pScr->keyInd.encKeyLen));
    e6f6:	9b03      	ldr	r3, [sp, #12]
    e6f8:	f893 3020 	ldrb.w	r3, [r3, #32]
    e6fc:	f1c3 0310 	rsb	r3, r3, #16
    e700:	461a      	mov	r2, r3
    e702:	2100      	movs	r1, #0
    e704:	9802      	ldr	r0, [sp, #8]
    e706:	f7fd fdc5 	bl	c294 <memset>

  /* use existing random number stored in scratch buf b4 for EDIV and RAND */
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
    e70a:	9b03      	ldr	r3, [sp, #12]
    e70c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    e710:	b29a      	uxth	r2, r3
    e712:	9b03      	ldr	r3, [sp, #12]
    e714:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    e718:	b29b      	uxth	r3, r3
    e71a:	021b      	lsls	r3, r3, #8
    e71c:	b29b      	uxth	r3, r3
    e71e:	4413      	add	r3, r2
    e720:	b29a      	uxth	r2, r3
    e722:	9b03      	ldr	r3, [sp, #12]
    e724:	839a      	strh	r2, [r3, #28]
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
    e726:	9b03      	ldr	r3, [sp, #12]
    e728:	f103 0014 	add.w	r0, r3, #20
    e72c:	9b03      	ldr	r3, [sp, #12]
    e72e:	3332      	adds	r3, #50	; 0x32
    e730:	2208      	movs	r2, #8
    e732:	4619      	mov	r1, r3
    e734:	f7fd fd14 	bl	c160 <memcpy>

  /* pass key to app via DM */
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
    e738:	9b03      	ldr	r3, [sp, #12]
    e73a:	2201      	movs	r2, #1
    e73c:	779a      	strb	r2, [r3, #30]
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    e73e:	9b01      	ldr	r3, [sp, #4]
    e740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    e744:	f003 0304 	and.w	r3, r3, #4
    e748:	2b00      	cmp	r3, #0
    e74a:	d001      	beq.n	e750 <smpGenerateLtk+0x88>
    e74c:	2202      	movs	r2, #2
    e74e:	e000      	b.n	e752 <smpGenerateLtk+0x8a>
    e750:	2201      	movs	r2, #1
    e752:	9b03      	ldr	r3, [sp, #12]
    e754:	77da      	strb	r2, [r3, #31]
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
    e756:	9b03      	ldr	r3, [sp, #12]
    e758:	222f      	movs	r2, #47	; 0x2f
    e75a:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
    e75c:	9b03      	ldr	r3, [sp, #12]
    e75e:	4618      	mov	r0, r3
    e760:	f003 fffc 	bl	1275c <DmSmpCbackExec>
}
    e764:	bf00      	nop
    e766:	b005      	add	sp, #20
    e768:	f85d fb04 	ldr.w	pc, [sp], #4

0000e76c <smpSendPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPkt(smpCcb_t *pCcb, uint8_t *pPkt)
{
    e76c:	b500      	push	{lr}
    e76e:	b083      	sub	sp, #12
    e770:	9001      	str	r0, [sp, #4]
    e772:	9100      	str	r1, [sp, #0]
  /* if flow disabled */
  if (pCcb->flowDisabled)
    e774:	9b01      	ldr	r3, [sp, #4]
    e776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    e77a:	2b00      	cmp	r3, #0
    e77c:	d014      	beq.n	e7a8 <smpSendPkt+0x3c>
  {
    /* if packet already queued discard it and replace it with this new packet */
    if (pCcb->pQueued != NULL)
    e77e:	9b01      	ldr	r3, [sp, #4]
    e780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e782:	2b00      	cmp	r3, #0
    e784:	d00c      	beq.n	e7a0 <smpSendPkt+0x34>
    {
      SMP_TRACE_WARN1("smpSendPkt packet discarded cmd:%d", pCcb->pQueued[L2C_PAYLOAD_START]);
    e786:	9b01      	ldr	r3, [sp, #4]
    e788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e78a:	3308      	adds	r3, #8
    e78c:	781b      	ldrb	r3, [r3, #0]
    e78e:	4619      	mov	r1, r3
    e790:	480e      	ldr	r0, [pc, #56]	; (e7cc <smpSendPkt+0x60>)
    e792:	f00a fad9 	bl	18d48 <WsfTrace>
      WsfMsgFree(pCcb->pQueued);
    e796:	9b01      	ldr	r3, [sp, #4]
    e798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e79a:	4618      	mov	r0, r3
    e79c:	f009 fe81 	bl	184a2 <WsfMsgFree>
    }

    /* queue packet */
    pCcb->pQueued = pPkt;
    e7a0:	9b01      	ldr	r3, [sp, #4]
    e7a2:	9a00      	ldr	r2, [sp, #0]
    e7a4:	635a      	str	r2, [r3, #52]	; 0x34
  /* else send it to L2CAP */
  else
  {
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
  }
}
    e7a6:	e00c      	b.n	e7c2 <smpSendPkt+0x56>
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
    e7a8:	9b01      	ldr	r3, [sp, #4]
    e7aa:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    e7ac:	9b00      	ldr	r3, [sp, #0]
    e7ae:	3308      	adds	r3, #8
    e7b0:	781b      	ldrb	r3, [r3, #0]
    e7b2:	461a      	mov	r2, r3
    e7b4:	4b06      	ldr	r3, [pc, #24]	; (e7d0 <smpSendPkt+0x64>)
    e7b6:	5c9b      	ldrb	r3, [r3, r2]
    e7b8:	b29a      	uxth	r2, r3
    e7ba:	9b00      	ldr	r3, [sp, #0]
    e7bc:	2006      	movs	r0, #6
    e7be:	f00d f851 	bl	1b864 <L2cDataReq>
}
    e7c2:	bf00      	nop
    e7c4:	b003      	add	sp, #12
    e7c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e7ca:	bf00      	nop
    e7cc:	00028160 	.word	0x00028160
    e7d0:	0002968c 	.word	0x0002968c

0000e7d4 <smpStateIdle>:
 *
 *  \return TRUE if in idle state, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpStateIdle(smpCcb_t *pCcb)
{
    e7d4:	b082      	sub	sp, #8
    e7d6:	9001      	str	r0, [sp, #4]
  return (pCcb->state == 0);
    e7d8:	9b01      	ldr	r3, [sp, #4]
    e7da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    e7de:	2b00      	cmp	r3, #0
    e7e0:	bf0c      	ite	eq
    e7e2:	2301      	moveq	r3, #1
    e7e4:	2300      	movne	r3, #0
    e7e6:	b2db      	uxtb	r3, r3
}
    e7e8:	4618      	mov	r0, r3
    e7ea:	b002      	add	sp, #8
    e7ec:	4770      	bx	lr

0000e7ee <smpMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *smpMsgAlloc(uint16_t len)
{
    e7ee:	b500      	push	{lr}
    e7f0:	b083      	sub	sp, #12
    e7f2:	4603      	mov	r3, r0
    e7f4:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
    e7f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e7fc:	2100      	movs	r1, #0
    e7fe:	4618      	mov	r0, r3
    e800:	f009 fe1f 	bl	18442 <WsfMsgDataAlloc>
    e804:	4603      	mov	r3, r0
}
    e806:	4618      	mov	r0, r3
    e808:	b003      	add	sp, #12
    e80a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e810 <SmpDmMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmMsgSend(smpDmMsg_t *pMsg)
{
    e810:	b500      	push	{lr}
    e812:	b083      	sub	sp, #12
    e814:	9001      	str	r0, [sp, #4]
  WsfMsgSend(smpCb.handlerId, pMsg);
    e816:	4b05      	ldr	r3, [pc, #20]	; (e82c <SmpDmMsgSend+0x1c>)
    e818:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
    e81c:	9901      	ldr	r1, [sp, #4]
    e81e:	4618      	mov	r0, r3
    e820:	f009 fe4b 	bl	184ba <WsfMsgSend>
}
    e824:	bf00      	nop
    e826:	b003      	add	sp, #12
    e828:	f85d fb04 	ldr.w	pc, [sp], #4
    e82c:	10008824 	.word	0x10008824

0000e830 <SmpDmEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmEncryptInd(wsfMsgHdr_t *pMsg)
{
    e830:	b500      	push	{lr}
    e832:	b083      	sub	sp, #12
    e834:	9001      	str	r0, [sp, #4]
  /* set event to SMP event type */
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
    e836:	9b01      	ldr	r3, [sp, #4]
    e838:	78db      	ldrb	r3, [r3, #3]
    e83a:	2b00      	cmp	r3, #0
    e83c:	d101      	bne.n	e842 <SmpDmEncryptInd+0x12>
    e83e:	2208      	movs	r2, #8
    e840:	e000      	b.n	e844 <SmpDmEncryptInd+0x14>
    e842:	2209      	movs	r2, #9
    e844:	9b01      	ldr	r3, [sp, #4]
    e846:	709a      	strb	r2, [r3, #2]
                 SMP_MSG_DM_ENCRYPT_CMPL : SMP_MSG_DM_ENCRYPT_FAILED;

  /* pass event to handler */
  SmpHandler(0, pMsg);
    e848:	9901      	ldr	r1, [sp, #4]
    e84a:	2000      	movs	r0, #0
    e84c:	f000 f8c4 	bl	e9d8 <SmpHandler>
}
    e850:	bf00      	nop
    e852:	b003      	add	sp, #12
    e854:	f85d fb04 	ldr.w	pc, [sp], #4

0000e858 <smpGetScSecLevel>:
*
*  \return Security level.
*/
/*************************************************************************************************/
uint8_t smpGetScSecLevel(smpCcb_t *pCcb)
{
    e858:	b084      	sub	sp, #16
    e85a:	9001      	str	r0, [sp, #4]
  uint8_t secLevel;

  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
    e85c:	9b01      	ldr	r3, [sp, #4]
    e85e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    e862:	f003 0304 	and.w	r3, r3, #4
    e866:	2b00      	cmp	r3, #0
    e868:	d022      	beq.n	e8b0 <smpGetScSecLevel+0x58>
  {
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
    e86a:	9b01      	ldr	r3, [sp, #4]
    e86c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    e870:	9b01      	ldr	r3, [sp, #4]
    e872:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    e876:	429a      	cmp	r2, r3
    e878:	d208      	bcs.n	e88c <smpGetScSecLevel+0x34>
    e87a:	9b01      	ldr	r3, [sp, #4]
    e87c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    e880:	2b10      	cmp	r3, #16
    e882:	bf0c      	ite	eq
    e884:	2301      	moveq	r3, #1
    e886:	2300      	movne	r3, #0
    e888:	b2db      	uxtb	r3, r3
    e88a:	e007      	b.n	e89c <smpGetScSecLevel+0x44>
    e88c:	9b01      	ldr	r3, [sp, #4]
    e88e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    e892:	2b10      	cmp	r3, #16
    e894:	bf0c      	ite	eq
    e896:	2301      	moveq	r3, #1
    e898:	2300      	movne	r3, #0
    e89a:	b2db      	uxtb	r3, r3
    e89c:	2b00      	cmp	r3, #0
    e89e:	d003      	beq.n	e8a8 <smpGetScSecLevel+0x50>
    {
      secLevel = DM_SEC_LEVEL_ENC_LESC;
    e8a0:	2303      	movs	r3, #3
    e8a2:	f88d 300f 	strb.w	r3, [sp, #15]
    e8a6:	e006      	b.n	e8b6 <smpGetScSecLevel+0x5e>
    }
    else
    {
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
    e8a8:	2302      	movs	r3, #2
    e8aa:	f88d 300f 	strb.w	r3, [sp, #15]
    e8ae:	e002      	b.n	e8b6 <smpGetScSecLevel+0x5e>
    }
  }
  else
  {
    secLevel = DM_SEC_LEVEL_ENC;
    e8b0:	2301      	movs	r3, #1
    e8b2:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  return secLevel;
    e8b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e8ba:	4618      	mov	r0, r3
    e8bc:	b004      	add	sp, #16
    e8be:	4770      	bx	lr

0000e8c0 <SmpDmGetStk>:
 *
 *  \return Pointer to STK or NULL if not available.
 */
/*************************************************************************************************/
uint8_t *SmpDmGetStk(dmConnId_t connId, uint8_t *pSecLevel)
{
    e8c0:	b500      	push	{lr}
    e8c2:	b085      	sub	sp, #20
    e8c4:	4603      	mov	r3, r0
    e8c6:	9100      	str	r1, [sp, #0]
    e8c8:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t     *pCcb;

  /* get connection control block */
  pCcb = smpCcbByConnId(connId);
    e8cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8d0:	4618      	mov	r0, r3
    e8d2:	f7ff fce1 	bl	e298 <smpCcbByConnId>
    e8d6:	9003      	str	r0, [sp, #12]

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
    e8d8:	4b19      	ldr	r3, [pc, #100]	; (e940 <SmpDmGetStk+0x80>)
    e8da:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
    e8de:	2b00      	cmp	r3, #0
    e8e0:	d015      	beq.n	e90e <SmpDmGetStk+0x4e>
    e8e2:	9b03      	ldr	r3, [sp, #12]
    e8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e8e6:	781b      	ldrb	r3, [r3, #0]
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	d010      	beq.n	e90e <SmpDmGetStk+0x4e>
    e8ec:	9b03      	ldr	r3, [sp, #12]
    e8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e8f0:	699b      	ldr	r3, [r3, #24]
    e8f2:	2b00      	cmp	r3, #0
    e8f4:	d00b      	beq.n	e90e <SmpDmGetStk+0x4e>
  {
    /* set security level */
    *pSecLevel = smpGetScSecLevel(pCcb);
    e8f6:	9803      	ldr	r0, [sp, #12]
    e8f8:	f7ff ffae 	bl	e858 <smpGetScSecLevel>
    e8fc:	4603      	mov	r3, r0
    e8fe:	461a      	mov	r2, r3
    e900:	9b00      	ldr	r3, [sp, #0]
    e902:	701a      	strb	r2, [r3, #0]

    /* return buffer containing STK */
    return pCcb->pScCcb->pLtk->ltk_t;
    e904:	9b03      	ldr	r3, [sp, #12]
    e906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e908:	699b      	ldr	r3, [r3, #24]
    e90a:	3310      	adds	r3, #16
    e90c:	e014      	b.n	e938 <SmpDmGetStk+0x78>
  }
  else if (pCcb->pScr != NULL)
    e90e:	9b03      	ldr	r3, [sp, #12]
    e910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e912:	2b00      	cmp	r3, #0
    e914:	d00f      	beq.n	e936 <SmpDmGetStk+0x76>
  {
    /* set security level */
    *pSecLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    e916:	9b03      	ldr	r3, [sp, #12]
    e918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    e91c:	f003 0304 	and.w	r3, r3, #4
    e920:	2b00      	cmp	r3, #0
    e922:	d001      	beq.n	e928 <SmpDmGetStk+0x68>
    e924:	2202      	movs	r2, #2
    e926:	e000      	b.n	e92a <SmpDmGetStk+0x6a>
    e928:	2201      	movs	r2, #1
    e92a:	9b00      	ldr	r3, [sp, #0]
    e92c:	701a      	strb	r2, [r3, #0]

    /* return buffer containing STK */
    return pCcb->pScr->buf.b3;
    e92e:	9b03      	ldr	r3, [sp, #12]
    e930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e932:	3320      	adds	r3, #32
    e934:	e000      	b.n	e938 <SmpDmGetStk+0x78>
  }
  else
  {
    return NULL;
    e936:	2300      	movs	r3, #0
  }
}
    e938:	4618      	mov	r0, r3
    e93a:	b005      	add	sp, #20
    e93c:	f85d fb04 	ldr.w	pc, [sp], #4
    e940:	10008824 	.word	0x10008824

0000e944 <SmpHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpHandlerInit(wsfHandlerId_t handlerId)
{
    e944:	b500      	push	{lr}
    e946:	b085      	sub	sp, #20
    e948:	4603      	mov	r3, r0
    e94a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t     i;
  smpCcb_t   *pCcb;

  /* store handler ID */
  smpCb.handlerId = handlerId;
    e94e:	4a1e      	ldr	r2, [pc, #120]	; (e9c8 <SmpHandlerInit+0x84>)
    e950:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e954:	f882 30e0 	strb.w	r3, [r2, #224]	; 0xe0

  /* Initialize the SMP device database */
  SmpDbInit();
    e958:	f7ff f9a4 	bl	dca4 <SmpDbInit>

  /* Initialize control block CCBs */
  for (i = 0, pCcb = smpCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
    e95c:	2300      	movs	r3, #0
    e95e:	f88d 300f 	strb.w	r3, [sp, #15]
    e962:	4b19      	ldr	r3, [pc, #100]	; (e9c8 <SmpHandlerInit+0x84>)
    e964:	9302      	str	r3, [sp, #8]
    e966:	e01d      	b.n	e9a4 <SmpHandlerInit+0x60>
  {
    /* initialize response timer */
    pCcb->rspTimer.handlerId = handlerId;
    e968:	9b02      	ldr	r3, [sp, #8]
    e96a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e96e:	721a      	strb	r2, [r3, #8]
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
    e970:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e974:	b29b      	uxth	r3, r3
    e976:	3301      	adds	r3, #1
    e978:	b29a      	uxth	r2, r3
    e97a:	9b02      	ldr	r3, [sp, #8]
    e97c:	815a      	strh	r2, [r3, #10]

    /* initialize wait interval timer */
    pCcb->waitTimer.handlerId = handlerId;
    e97e:	9b02      	ldr	r3, [sp, #8]
    e980:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e984:	761a      	strb	r2, [r3, #24]
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
    e986:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e98a:	b29b      	uxth	r3, r3
    e98c:	3301      	adds	r3, #1
    e98e:	b29a      	uxth	r2, r3
    e990:	9b02      	ldr	r3, [sp, #8]
    e992:	835a      	strh	r2, [r3, #26]
  for (i = 0, pCcb = smpCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
    e994:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e998:	3301      	adds	r3, #1
    e99a:	f88d 300f 	strb.w	r3, [sp, #15]
    e99e:	9b02      	ldr	r3, [sp, #8]
    e9a0:	3348      	adds	r3, #72	; 0x48
    e9a2:	9302      	str	r3, [sp, #8]
    e9a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e9a8:	2b02      	cmp	r3, #2
    e9aa:	d9dd      	bls.n	e968 <SmpHandlerInit+0x24>
  }

  /* Register with L2C */
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
    e9ac:	4a07      	ldr	r2, [pc, #28]	; (e9cc <SmpHandlerInit+0x88>)
    e9ae:	4908      	ldr	r1, [pc, #32]	; (e9d0 <SmpHandlerInit+0x8c>)
    e9b0:	2006      	movs	r0, #6
    e9b2:	f00c ff3b 	bl	1b82c <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
    e9b6:	4907      	ldr	r1, [pc, #28]	; (e9d4 <SmpHandlerInit+0x90>)
    e9b8:	2001      	movs	r0, #1
    e9ba:	f002 fd81 	bl	114c0 <DmConnRegister>
}
    e9be:	bf00      	nop
    e9c0:	b005      	add	sp, #20
    e9c2:	f85d fb04 	ldr.w	pc, [sp], #4
    e9c6:	bf00      	nop
    e9c8:	10008824 	.word	0x10008824
    e9cc:	0000e031 	.word	0x0000e031
    e9d0:	0000df6d 	.word	0x0000df6d
    e9d4:	0000e139 	.word	0x0000e139

0000e9d8 <SmpHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    e9d8:	b500      	push	{lr}
    e9da:	b085      	sub	sp, #20
    e9dc:	4603      	mov	r3, r0
    e9de:	9100      	str	r1, [sp, #0]
    e9e0:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t     *pCcb;

  /* Handle message */
  if (pMsg != NULL)
    e9e4:	9b00      	ldr	r3, [sp, #0]
    e9e6:	2b00      	cmp	r3, #0
    e9e8:	d03b      	beq.n	ea62 <SmpHandler+0x8a>
  {
    if (pMsg->event == SMP_DB_SERVICE_IND)
    e9ea:	9b00      	ldr	r3, [sp, #0]
    e9ec:	789b      	ldrb	r3, [r3, #2]
    e9ee:	2b1f      	cmp	r3, #31
    e9f0:	d102      	bne.n	e9f8 <SmpHandler+0x20>
    {
      SmpDbService();
    e9f2:	f7ff fa4b 	bl	de8c <SmpDbService>
  /* Handle events */
  else if (event)
  {

  }
}
    e9f6:	e034      	b.n	ea62 <SmpHandler+0x8a>
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
    e9f8:	9b00      	ldr	r3, [sp, #0]
    e9fa:	789b      	ldrb	r3, [r3, #2]
    e9fc:	2b1c      	cmp	r3, #28
    e9fe:	d10a      	bne.n	ea16 <SmpHandler+0x3e>
        secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
    ea00:	9b00      	ldr	r3, [sp, #0]
    ea02:	9303      	str	r3, [sp, #12]
        if (pCmac->pPlainText)
    ea04:	9b03      	ldr	r3, [sp, #12]
    ea06:	689b      	ldr	r3, [r3, #8]
    ea08:	2b00      	cmp	r3, #0
    ea0a:	d004      	beq.n	ea16 <SmpHandler+0x3e>
          WsfBufFree(pCmac->pPlainText);
    ea0c:	9b03      	ldr	r3, [sp, #12]
    ea0e:	689b      	ldr	r3, [r3, #8]
    ea10:	4618      	mov	r0, r3
    ea12:	f009 fcd9 	bl	183c8 <WsfBufFree>
      pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);
    ea16:	9b00      	ldr	r3, [sp, #0]
    ea18:	881b      	ldrh	r3, [r3, #0]
    ea1a:	b2db      	uxtb	r3, r3
    ea1c:	4618      	mov	r0, r3
    ea1e:	f7ff fc3b 	bl	e298 <smpCcbByConnId>
    ea22:	9002      	str	r0, [sp, #8]
      if (pCcb->connId != DM_CONN_ID_NONE)
    ea24:	9b02      	ldr	r3, [sp, #8]
    ea26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    ea2a:	2b00      	cmp	r3, #0
    ea2c:	d019      	beq.n	ea62 <SmpHandler+0x8a>
        if (pMsg->event == SMP_MSG_WSF_AES_CMPL && pCcb->token != pMsg->status)
    ea2e:	9b00      	ldr	r3, [sp, #0]
    ea30:	789b      	ldrb	r3, [r3, #2]
    ea32:	2b0b      	cmp	r3, #11
    ea34:	d111      	bne.n	ea5a <SmpHandler+0x82>
    ea36:	9b02      	ldr	r3, [sp, #8]
    ea38:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
    ea3c:	9b00      	ldr	r3, [sp, #0]
    ea3e:	78db      	ldrb	r3, [r3, #3]
    ea40:	429a      	cmp	r2, r3
    ea42:	d00a      	beq.n	ea5a <SmpHandler+0x82>
          SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
    ea44:	9b02      	ldr	r3, [sp, #8]
    ea46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    ea4a:	4619      	mov	r1, r3
    ea4c:	9b00      	ldr	r3, [sp, #0]
    ea4e:	78db      	ldrb	r3, [r3, #3]
    ea50:	461a      	mov	r2, r3
    ea52:	4806      	ldr	r0, [pc, #24]	; (ea6c <SmpHandler+0x94>)
    ea54:	f00a f978 	bl	18d48 <WsfTrace>
}
    ea58:	e003      	b.n	ea62 <SmpHandler+0x8a>
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
    ea5a:	9900      	ldr	r1, [sp, #0]
    ea5c:	9802      	ldr	r0, [sp, #8]
    ea5e:	f7ff f801 	bl	da64 <smpSmExecute>
}
    ea62:	bf00      	nop
    ea64:	b005      	add	sp, #20
    ea66:	f85d fb04 	ldr.w	pc, [sp], #4
    ea6a:	bf00      	nop
    ea6c:	00028184 	.word	0x00028184

0000ea70 <smpScCatInitiatorBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatInitiatorBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
    ea70:	b500      	push	{lr}
    ea72:	b085      	sub	sp, #20
    ea74:	9001      	str	r0, [sp, #4]
    ea76:	9100      	str	r1, [sp, #0]
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
    ea78:	9b01      	ldr	r3, [sp, #4]
    ea7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    ea7e:	4618      	mov	r0, r3
    ea80:	f002 f8b2 	bl	10be8 <dmConnCcbById>
    ea84:	9003      	str	r0, [sp, #12]

  if (pDmCcb)
    ea86:	9b03      	ldr	r3, [sp, #12]
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d04b      	beq.n	eb24 <smpScCatInitiatorBdAddr+0xb4>
  {
    if (pCcb->initiator)
    ea8c:	9b01      	ldr	r3, [sp, #4]
    ea8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    ea92:	2b00      	cmp	r3, #0
    ea94:	d022      	beq.n	eadc <smpScCatInitiatorBdAddr+0x6c>
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
    ea96:	9b03      	ldr	r3, [sp, #12]
    ea98:	331a      	adds	r3, #26
    ea9a:	4618      	mov	r0, r3
    ea9c:	f00c fc42 	bl	1b324 <BdaIsZeros>
    eaa0:	4603      	mov	r3, r0
    eaa2:	2b00      	cmp	r3, #0
    eaa4:	d10c      	bne.n	eac0 <smpScCatInitiatorBdAddr+0x50>
      {
        *pBuf++ = DM_ADDR_RANDOM;
    eaa6:	9b00      	ldr	r3, [sp, #0]
    eaa8:	1c5a      	adds	r2, r3, #1
    eaaa:	9200      	str	r2, [sp, #0]
    eaac:	2201      	movs	r2, #1
    eaae:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
    eab0:	9b03      	ldr	r3, [sp, #12]
    eab2:	331a      	adds	r3, #26
    eab4:	2206      	movs	r2, #6
    eab6:	4619      	mov	r1, r3
    eab8:	9800      	ldr	r0, [sp, #0]
    eaba:	f00c fc82 	bl	1b3c2 <WStrReverseCpy>
    eabe:	e02e      	b.n	eb1e <smpScCatInitiatorBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->localAddrType;
    eac0:	9b00      	ldr	r3, [sp, #0]
    eac2:	1c5a      	adds	r2, r3, #1
    eac4:	9200      	str	r2, [sp, #0]
    eac6:	9a03      	ldr	r2, [sp, #12]
    eac8:	7d12      	ldrb	r2, [r2, #20]
    eaca:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
    eacc:	9b03      	ldr	r3, [sp, #12]
    eace:	3306      	adds	r3, #6
    ead0:	2206      	movs	r2, #6
    ead2:	4619      	mov	r1, r3
    ead4:	9800      	ldr	r0, [sp, #0]
    ead6:	f00c fc74 	bl	1b3c2 <WStrReverseCpy>
    eada:	e020      	b.n	eb1e <smpScCatInitiatorBdAddr+0xae>
      }
    }
    else
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
    eadc:	9b03      	ldr	r3, [sp, #12]
    eade:	3320      	adds	r3, #32
    eae0:	4618      	mov	r0, r3
    eae2:	f00c fc1f 	bl	1b324 <BdaIsZeros>
    eae6:	4603      	mov	r3, r0
    eae8:	2b00      	cmp	r3, #0
    eaea:	d10c      	bne.n	eb06 <smpScCatInitiatorBdAddr+0x96>
      {
        *pBuf++ = DM_ADDR_RANDOM;
    eaec:	9b00      	ldr	r3, [sp, #0]
    eaee:	1c5a      	adds	r2, r3, #1
    eaf0:	9200      	str	r2, [sp, #0]
    eaf2:	2201      	movs	r2, #1
    eaf4:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
    eaf6:	9b03      	ldr	r3, [sp, #12]
    eaf8:	3320      	adds	r3, #32
    eafa:	2206      	movs	r2, #6
    eafc:	4619      	mov	r1, r3
    eafe:	9800      	ldr	r0, [sp, #0]
    eb00:	f00c fc5f 	bl	1b3c2 <WStrReverseCpy>
    eb04:	e00b      	b.n	eb1e <smpScCatInitiatorBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->peerAddrType;
    eb06:	9b00      	ldr	r3, [sp, #0]
    eb08:	1c5a      	adds	r2, r3, #1
    eb0a:	9200      	str	r2, [sp, #0]
    eb0c:	9a03      	ldr	r2, [sp, #12]
    eb0e:	7cd2      	ldrb	r2, [r2, #19]
    eb10:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
    eb12:	9b03      	ldr	r3, [sp, #12]
    eb14:	2206      	movs	r2, #6
    eb16:	4619      	mov	r1, r3
    eb18:	9800      	ldr	r0, [sp, #0]
    eb1a:	f00c fc52 	bl	1b3c2 <WStrReverseCpy>
      }
    }

    pBuf += BDA_ADDR_LEN;
    eb1e:	9b00      	ldr	r3, [sp, #0]
    eb20:	3306      	adds	r3, #6
    eb22:	9300      	str	r3, [sp, #0]
  }

  return pBuf;
    eb24:	9b00      	ldr	r3, [sp, #0]
}
    eb26:	4618      	mov	r0, r3
    eb28:	b005      	add	sp, #20
    eb2a:	f85d fb04 	ldr.w	pc, [sp], #4

0000eb2e <smpScCatResponderBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatResponderBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
    eb2e:	b500      	push	{lr}
    eb30:	b085      	sub	sp, #20
    eb32:	9001      	str	r0, [sp, #4]
    eb34:	9100      	str	r1, [sp, #0]
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
    eb36:	9b01      	ldr	r3, [sp, #4]
    eb38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    eb3c:	4618      	mov	r0, r3
    eb3e:	f002 f853 	bl	10be8 <dmConnCcbById>
    eb42:	9003      	str	r0, [sp, #12]

  if (pDmCcb)
    eb44:	9b03      	ldr	r3, [sp, #12]
    eb46:	2b00      	cmp	r3, #0
    eb48:	d04b      	beq.n	ebe2 <smpScCatResponderBdAddr+0xb4>
  {
    if (pCcb->initiator)
    eb4a:	9b01      	ldr	r3, [sp, #4]
    eb4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    eb50:	2b00      	cmp	r3, #0
    eb52:	d021      	beq.n	eb98 <smpScCatResponderBdAddr+0x6a>
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
    eb54:	9b03      	ldr	r3, [sp, #12]
    eb56:	3320      	adds	r3, #32
    eb58:	4618      	mov	r0, r3
    eb5a:	f00c fbe3 	bl	1b324 <BdaIsZeros>
    eb5e:	4603      	mov	r3, r0
    eb60:	2b00      	cmp	r3, #0
    eb62:	d10c      	bne.n	eb7e <smpScCatResponderBdAddr+0x50>
      {
        *pBuf++ = DM_ADDR_RANDOM;
    eb64:	9b00      	ldr	r3, [sp, #0]
    eb66:	1c5a      	adds	r2, r3, #1
    eb68:	9200      	str	r2, [sp, #0]
    eb6a:	2201      	movs	r2, #1
    eb6c:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
    eb6e:	9b03      	ldr	r3, [sp, #12]
    eb70:	3320      	adds	r3, #32
    eb72:	2206      	movs	r2, #6
    eb74:	4619      	mov	r1, r3
    eb76:	9800      	ldr	r0, [sp, #0]
    eb78:	f00c fc23 	bl	1b3c2 <WStrReverseCpy>
    eb7c:	e02e      	b.n	ebdc <smpScCatResponderBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->peerAddrType;
    eb7e:	9b00      	ldr	r3, [sp, #0]
    eb80:	1c5a      	adds	r2, r3, #1
    eb82:	9200      	str	r2, [sp, #0]
    eb84:	9a03      	ldr	r2, [sp, #12]
    eb86:	7cd2      	ldrb	r2, [r2, #19]
    eb88:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
    eb8a:	9b03      	ldr	r3, [sp, #12]
    eb8c:	2206      	movs	r2, #6
    eb8e:	4619      	mov	r1, r3
    eb90:	9800      	ldr	r0, [sp, #0]
    eb92:	f00c fc16 	bl	1b3c2 <WStrReverseCpy>
    eb96:	e021      	b.n	ebdc <smpScCatResponderBdAddr+0xae>
      }
    }
    else
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
    eb98:	9b03      	ldr	r3, [sp, #12]
    eb9a:	331a      	adds	r3, #26
    eb9c:	4618      	mov	r0, r3
    eb9e:	f00c fbc1 	bl	1b324 <BdaIsZeros>
    eba2:	4603      	mov	r3, r0
    eba4:	2b00      	cmp	r3, #0
    eba6:	d10c      	bne.n	ebc2 <smpScCatResponderBdAddr+0x94>
      {
        *pBuf++ = DM_ADDR_RANDOM;
    eba8:	9b00      	ldr	r3, [sp, #0]
    ebaa:	1c5a      	adds	r2, r3, #1
    ebac:	9200      	str	r2, [sp, #0]
    ebae:	2201      	movs	r2, #1
    ebb0:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
    ebb2:	9b03      	ldr	r3, [sp, #12]
    ebb4:	331a      	adds	r3, #26
    ebb6:	2206      	movs	r2, #6
    ebb8:	4619      	mov	r1, r3
    ebba:	9800      	ldr	r0, [sp, #0]
    ebbc:	f00c fc01 	bl	1b3c2 <WStrReverseCpy>
    ebc0:	e00c      	b.n	ebdc <smpScCatResponderBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->localAddrType;
    ebc2:	9b00      	ldr	r3, [sp, #0]
    ebc4:	1c5a      	adds	r2, r3, #1
    ebc6:	9200      	str	r2, [sp, #0]
    ebc8:	9a03      	ldr	r2, [sp, #12]
    ebca:	7d12      	ldrb	r2, [r2, #20]
    ebcc:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
    ebce:	9b03      	ldr	r3, [sp, #12]
    ebd0:	3306      	adds	r3, #6
    ebd2:	2206      	movs	r2, #6
    ebd4:	4619      	mov	r1, r3
    ebd6:	9800      	ldr	r0, [sp, #0]
    ebd8:	f00c fbf3 	bl	1b3c2 <WStrReverseCpy>
      }
    }

    pBuf += BDA_ADDR_LEN;
    ebdc:	9b00      	ldr	r3, [sp, #0]
    ebde:	3306      	adds	r3, #6
    ebe0:	9300      	str	r3, [sp, #0]
  }

  return pBuf;
    ebe2:	9b00      	ldr	r3, [sp, #0]
}
    ebe4:	4618      	mov	r0, r3
    ebe6:	b005      	add	sp, #20
    ebe8:	f85d fb04 	ldr.w	pc, [sp], #4

0000ebec <smpScProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpScProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
    ebec:	b510      	push	{r4, lr}
    ebee:	b086      	sub	sp, #24
    ebf0:	9003      	str	r0, [sp, #12]
    ebf2:	9102      	str	r1, [sp, #8]
    ebf4:	9201      	str	r2, [sp, #4]
  bool_t          justWorks = TRUE;
    ebf6:	2301      	movs	r3, #1
    ebf8:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
    ebfc:	9b01      	ldr	r3, [sp, #4]
    ebfe:	2200      	movs	r2, #0
    ec00:	701a      	strb	r2, [r3, #0]
  *pOob = SMP_OOB_DATA_NONE;
    ec02:	9b02      	ldr	r3, [sp, #8]
    ec04:	2200      	movs	r2, #0
    ec06:	701a      	strb	r2, [r3, #0]

  /* check for LE Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    ec08:	9b03      	ldr	r3, [sp, #12]
    ec0a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    ec0e:	f003 0308 	and.w	r3, r3, #8
    ec12:	2b00      	cmp	r3, #0
    ec14:	d017      	beq.n	ec46 <smpScProcPairing+0x5a>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
    ec16:	9b03      	ldr	r3, [sp, #12]
    ec18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ec1c:	f003 0308 	and.w	r3, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    ec20:	2b00      	cmp	r3, #0
    ec22:	d010      	beq.n	ec46 <smpScProcPairing+0x5a>
  {
    /* if one or both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
    ec24:	9b03      	ldr	r3, [sp, #12]
    ec26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    ec2a:	2b01      	cmp	r3, #1
    ec2c:	d004      	beq.n	ec38 <smpScProcPairing+0x4c>
        (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT))
    ec2e:	9b03      	ldr	r3, [sp, #12]
    ec30:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
    ec34:	2b01      	cmp	r3, #1
    ec36:	d117      	bne.n	ec68 <smpScProcPairing+0x7c>
    {
      *pOob = SMP_OOB_DATA_PRESENT;
    ec38:	9b02      	ldr	r3, [sp, #8]
    ec3a:	2201      	movs	r2, #1
    ec3c:	701a      	strb	r2, [r3, #0]
      justWorks = FALSE;
    ec3e:	2300      	movs	r3, #0
    ec40:	f88d 3017 	strb.w	r3, [sp, #23]
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
    ec44:	e010      	b.n	ec68 <smpScProcPairing+0x7c>
  }
  /* legacy pairing */
  else
  {
    /* if both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
    ec46:	9b03      	ldr	r3, [sp, #12]
    ec48:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    ec4c:	2b01      	cmp	r3, #1
    ec4e:	d10c      	bne.n	ec6a <smpScProcPairing+0x7e>
        (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT))
    ec50:	9b03      	ldr	r3, [sp, #12]
    ec52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
    ec56:	2b01      	cmp	r3, #1
    ec58:	d107      	bne.n	ec6a <smpScProcPairing+0x7e>
    {
      *pOob = SMP_OOB_DATA_PRESENT;
    ec5a:	9b02      	ldr	r3, [sp, #8]
    ec5c:	2201      	movs	r2, #1
    ec5e:	701a      	strb	r2, [r3, #0]
      justWorks = FALSE;
    ec60:	2300      	movs	r3, #0
    ec62:	f88d 3017 	strb.w	r3, [sp, #23]
    ec66:	e000      	b.n	ec6a <smpScProcPairing+0x7e>
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
    ec68:	bf00      	nop
    }
  }

  /* if OOB authentication data not present and either device has set MITM option */
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
    ec6a:	9b02      	ldr	r3, [sp, #8]
    ec6c:	781b      	ldrb	r3, [r3, #0]
    ec6e:	2b00      	cmp	r3, #0
    ec70:	d168      	bne.n	ed44 <smpScProcPairing+0x158>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
    ec72:	9b03      	ldr	r3, [sp, #12]
    ec74:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    ec78:	f003 0304 	and.w	r3, r3, #4
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
    ec7c:	2b00      	cmp	r3, #0
    ec7e:	d106      	bne.n	ec8e <smpScProcPairing+0xa2>
       (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG)))
    ec80:	9b03      	ldr	r3, [sp, #12]
    ec82:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ec86:	f003 0304 	and.w	r3, r3, #4
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
    ec8a:	2b00      	cmp	r3, #0
    ec8c:	d05a      	beq.n	ed44 <smpScProcPairing+0x158>
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
    ec8e:	9b03      	ldr	r3, [sp, #12]
    ec90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    ec94:	2b03      	cmp	r3, #3
    ec96:	d055      	beq.n	ed44 <smpScProcPairing+0x158>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
    ec98:	9b03      	ldr	r3, [sp, #12]
    ec9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
    ec9e:	2b03      	cmp	r3, #3
    eca0:	d050      	beq.n	ed44 <smpScProcPairing+0x158>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
    eca2:	9b03      	ldr	r3, [sp, #12]
    eca4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
    eca8:	2b00      	cmp	r3, #0
    ecaa:	d004      	beq.n	ecb6 <smpScProcPairing+0xca>
           (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO)) &&
    ecac:	9b03      	ldr	r3, [sp, #12]
    ecae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
    ecb2:	2b01      	cmp	r3, #1
    ecb4:	d109      	bne.n	ecca <smpScProcPairing+0xde>
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
    ecb6:	9b03      	ldr	r3, [sp, #12]
    ecb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
    ecbc:	2b00      	cmp	r3, #0
    ecbe:	d041      	beq.n	ed44 <smpScProcPairing+0x158>
           (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO))))
    ecc0:	9b03      	ldr	r3, [sp, #12]
    ecc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
    ecc6:	2b01      	cmp	r3, #1
    ecc8:	d03c      	beq.n	ed44 <smpScProcPairing+0x158>
    {
      /* use pin */
      justWorks = FALSE;
    ecca:	2300      	movs	r3, #0
    eccc:	f88d 3017 	strb.w	r3, [sp, #23]

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
    ecd0:	9b03      	ldr	r3, [sp, #12]
    ecd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
    ecd6:	2b00      	cmp	r3, #0
    ecd8:	d013      	beq.n	ed02 <smpScProcPairing+0x116>
    ecda:	9b03      	ldr	r3, [sp, #12]
    ecdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
    ece0:	2b01      	cmp	r3, #1
    ece2:	d00e      	beq.n	ed02 <smpScProcPairing+0x116>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
    ece4:	9b03      	ldr	r3, [sp, #12]
    ece6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
    ecea:	2b04      	cmp	r3, #4
    ecec:	d10b      	bne.n	ed06 <smpScProcPairing+0x11a>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
    ecee:	9b03      	ldr	r3, [sp, #12]
    ecf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
    ecf4:	2b02      	cmp	r3, #2
    ecf6:	d004      	beq.n	ed02 <smpScProcPairing+0x116>
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));
    ecf8:	9b03      	ldr	r3, [sp, #12]
    ecfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
    ecfe:	2b04      	cmp	r3, #4
    ed00:	d101      	bne.n	ed06 <smpScProcPairing+0x11a>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
    ed02:	2301      	movs	r3, #1
    ed04:	e000      	b.n	ed08 <smpScProcPairing+0x11c>
    ed06:	2300      	movs	r3, #0
      *pDisplay =
    ed08:	b2da      	uxtb	r2, r3
    ed0a:	9b01      	ldr	r3, [sp, #4]
    ed0c:	701a      	strb	r2, [r3, #0]

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
    ed0e:	9b03      	ldr	r3, [sp, #12]
    ed10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    ed14:	2b02      	cmp	r3, #2
    ed16:	d104      	bne.n	ed22 <smpScProcPairing+0x136>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
    ed18:	9b03      	ldr	r3, [sp, #12]
    ed1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
    ed1e:	2b02      	cmp	r3, #2
    ed20:	d010      	beq.n	ed44 <smpScProcPairing+0x158>
      {
        *pDisplay ^= !pCcb->initiator;
    ed22:	9b01      	ldr	r3, [sp, #4]
    ed24:	781b      	ldrb	r3, [r3, #0]
    ed26:	b25a      	sxtb	r2, r3
    ed28:	9b03      	ldr	r3, [sp, #12]
    ed2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    ed2e:	2b00      	cmp	r3, #0
    ed30:	bf0c      	ite	eq
    ed32:	2301      	moveq	r3, #1
    ed34:	2300      	movne	r3, #0
    ed36:	b2db      	uxtb	r3, r3
    ed38:	b25b      	sxtb	r3, r3
    ed3a:	4053      	eors	r3, r2
    ed3c:	b25b      	sxtb	r3, r3
    ed3e:	b2da      	uxtb	r2, r3
    ed40:	9b01      	ldr	r3, [sp, #4]
    ed42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Check for Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    ed44:	9b03      	ldr	r3, [sp, #12]
    ed46:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    ed4a:	f003 0308 	and.w	r3, r3, #8
    ed4e:	2b00      	cmp	r3, #0
    ed50:	f000 80c2 	beq.w	eed8 <smpScProcPairing+0x2ec>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
    ed54:	9b03      	ldr	r3, [sp, #12]
    ed56:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ed5a:	f003 0308 	and.w	r3, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    ed5e:	2b00      	cmp	r3, #0
    ed60:	f000 80ba 	beq.w	eed8 <smpScProcPairing+0x2ec>
  {
    if (smpCb.lescSupported == FALSE)
    ed64:	4bae      	ldr	r3, [pc, #696]	; (f020 <smpScProcPairing+0x434>)
    ed66:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
    ed6a:	2b00      	cmp	r3, #0
    ed6c:	d112      	bne.n	ed94 <smpScProcPairing+0x1a8>
    {
      /* cancel pairing if LESC is not initialized by application */
      hdr.param = pCcb->connId;
    ed6e:	9b03      	ldr	r3, [sp, #12]
    ed70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    ed74:	b29b      	uxth	r3, r3
    ed76:	f8ad 3010 	strh.w	r3, [sp, #16]
      hdr.status = SMP_ERR_AUTH_REQ;
    ed7a:	2303      	movs	r3, #3
    ed7c:	f88d 3013 	strb.w	r3, [sp, #19]
      hdr.event = SMP_MSG_API_CANCEL_REQ;
    ed80:	2303      	movs	r3, #3
    ed82:	f88d 3012 	strb.w	r3, [sp, #18]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    ed86:	ab04      	add	r3, sp, #16
    ed88:	4619      	mov	r1, r3
    ed8a:	9803      	ldr	r0, [sp, #12]
    ed8c:	f7fe fe6a 	bl	da64 <smpSmExecute>
      return FALSE;
    ed90:	2300      	movs	r3, #0
    ed92:	e142      	b.n	f01a <smpScProcPairing+0x42e>
    }
    else
    {
      pCcb->pScCcb->lescEnabled = TRUE;
    ed94:	9b03      	ldr	r3, [sp, #12]
    ed96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ed98:	2201      	movs	r2, #1
    ed9a:	701a      	strb	r2, [r3, #0]
      pCcb->pScCcb->authType = SMP_AUTH_TYPE_JUST_WORKS;
    ed9c:	9b03      	ldr	r3, [sp, #12]
    ed9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    eda0:	2201      	movs	r2, #1
    eda2:	705a      	strb	r2, [r3, #1]
      pCcb->pScCcb->display = *pDisplay;
    eda4:	9b03      	ldr	r3, [sp, #12]
    eda6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    eda8:	9a01      	ldr	r2, [sp, #4]
    edaa:	7812      	ldrb	r2, [r2, #0]
    edac:	711a      	strb	r2, [r3, #4]

      if (*pOob)
    edae:	9b02      	ldr	r3, [sp, #8]
    edb0:	781b      	ldrb	r3, [r3, #0]
    edb2:	2b00      	cmp	r3, #0
    edb4:	d004      	beq.n	edc0 <smpScProcPairing+0x1d4>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_OOB;
    edb6:	9b03      	ldr	r3, [sp, #12]
    edb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    edba:	2202      	movs	r2, #2
    edbc:	705a      	strb	r2, [r3, #1]
    edbe:	e049      	b.n	ee54 <smpScProcPairing+0x268>
      }
      else if (justWorks == FALSE)
    edc0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    edc4:	2b00      	cmp	r3, #0
    edc6:	d134      	bne.n	ee32 <smpScProcPairing+0x246>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_PASSKEY;
    edc8:	9b03      	ldr	r3, [sp, #12]
    edca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    edcc:	2203      	movs	r2, #3
    edce:	705a      	strb	r2, [r3, #1]

        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
    edd0:	9b03      	ldr	r3, [sp, #12]
    edd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    edd6:	2b04      	cmp	r3, #4
    edd8:	d109      	bne.n	edee <smpScProcPairing+0x202>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
    edda:	9b03      	ldr	r3, [sp, #12]
    eddc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
    ede0:	2b01      	cmp	r3, #1
    ede2:	d00e      	beq.n	ee02 <smpScProcPairing+0x216>
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
    ede4:	9b03      	ldr	r3, [sp, #12]
    ede6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
    edea:	2b04      	cmp	r3, #4
    edec:	d009      	beq.n	ee02 <smpScProcPairing+0x216>

            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
    edee:	9b03      	ldr	r3, [sp, #12]
    edf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
    edf4:	2b01      	cmp	r3, #1
    edf6:	d109      	bne.n	ee0c <smpScProcPairing+0x220>
             (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP)))
    edf8:	9b03      	ldr	r3, [sp, #12]
    edfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
    edfe:	2b04      	cmp	r3, #4
    ee00:	d104      	bne.n	ee0c <smpScProcPairing+0x220>
        {
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
    ee02:	9b03      	ldr	r3, [sp, #12]
    ee04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ee06:	2204      	movs	r2, #4
    ee08:	705a      	strb	r2, [r3, #1]
    ee0a:	e023      	b.n	ee54 <smpScProcPairing+0x268>
        }
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
    ee0c:	9b03      	ldr	r3, [sp, #12]
    ee0e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    ee12:	f003 0310 	and.w	r3, r3, #16
    ee16:	2b00      	cmp	r3, #0
    ee18:	d01c      	beq.n	ee54 <smpScProcPairing+0x268>
                 (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG))
    ee1a:	9b03      	ldr	r3, [sp, #12]
    ee1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ee20:	f003 0310 	and.w	r3, r3, #16
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
    ee24:	2b00      	cmp	r3, #0
    ee26:	d015      	beq.n	ee54 <smpScProcPairing+0x268>
        {
          pCcb->pScCcb->kpNotify = TRUE;
    ee28:	9b03      	ldr	r3, [sp, #12]
    ee2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ee2c:	2201      	movs	r2, #1
    ee2e:	709a      	strb	r2, [r3, #2]
    ee30:	e010      	b.n	ee54 <smpScProcPairing+0x268>
        }
      }
      else
      {
        /* Check for numeric comparison */
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
    ee32:	9b03      	ldr	r3, [sp, #12]
    ee34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    ee38:	2b01      	cmp	r3, #1
    ee3a:	d10b      	bne.n	ee54 <smpScProcPairing+0x268>
            (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO))
    ee3c:	9b03      	ldr	r3, [sp, #12]
    ee3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
    ee42:	2b01      	cmp	r3, #1
    ee44:	d106      	bne.n	ee54 <smpScProcPairing+0x268>
        {
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
    ee46:	9b03      	ldr	r3, [sp, #12]
    ee48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ee4a:	2204      	movs	r2, #4
    ee4c:	705a      	strb	r2, [r3, #1]

          /* set false to add in MITM below */
          justWorks = FALSE;
    ee4e:	2300      	movs	r3, #0
    ee50:	f88d 3017 	strb.w	r3, [sp, #23]
        }
      }
    }

    hdr.param = pCcb->connId;
    ee54:	9b03      	ldr	r3, [sp, #12]
    ee56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    ee5a:	b29b      	uxth	r3, r3
    ee5c:	f8ad 3010 	strh.w	r3, [sp, #16]

    /* Allocate a scratch pad for Peer Key and CMAC calculations */
    if (SmpScAllocScratchBuffers(pCcb))
    ee60:	9803      	ldr	r0, [sp, #12]
    ee62:	f000 fd7f 	bl	f964 <SmpScAllocScratchBuffers>
    ee66:	4603      	mov	r3, r0
    ee68:	2b00      	cmp	r3, #0
    ee6a:	d029      	beq.n	eec0 <smpScProcPairing+0x2d4>
    {
      /* Store the current ECC key */
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyX, DmSecGetEccKey()->pubKey_x, SMP_PUB_KEY_LEN);
    ee6c:	9b03      	ldr	r3, [sp, #12]
    ee6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ee70:	68db      	ldr	r3, [r3, #12]
    ee72:	461c      	mov	r4, r3
    ee74:	f003 fdf8 	bl	12a68 <DmSecGetEccKey>
    ee78:	4603      	mov	r3, r0
    ee7a:	2220      	movs	r2, #32
    ee7c:	4619      	mov	r1, r3
    ee7e:	4620      	mov	r0, r4
    ee80:	f7fd f96e 	bl	c160 <memcpy>
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyY, DmSecGetEccKey()->pubKey_y, SMP_PUB_KEY_LEN);
    ee84:	9b03      	ldr	r3, [sp, #12]
    ee86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ee88:	68db      	ldr	r3, [r3, #12]
    ee8a:	f103 0420 	add.w	r4, r3, #32
    ee8e:	f003 fdeb 	bl	12a68 <DmSecGetEccKey>
    ee92:	4603      	mov	r3, r0
    ee94:	3320      	adds	r3, #32
    ee96:	2220      	movs	r2, #32
    ee98:	4619      	mov	r1, r3
    ee9a:	4620      	mov	r0, r4
    ee9c:	f7fd f960 	bl	c160 <memcpy>
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
    eea0:	9b03      	ldr	r3, [sp, #12]
    eea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    eea4:	691c      	ldr	r4, [r3, #16]
    eea6:	f003 fddf 	bl	12a68 <DmSecGetEccKey>
    eeaa:	4603      	mov	r3, r0
    eeac:	3340      	adds	r3, #64	; 0x40
    eeae:	2220      	movs	r2, #32
    eeb0:	4619      	mov	r1, r3
    eeb2:	4620      	mov	r0, r4
    eeb4:	f7fd f954 	bl	c160 <memcpy>

      /* Send internal message indicating LESC was requested */
      hdr.event = SMP_MSG_INT_LESC;
    eeb8:	2311      	movs	r3, #17
    eeba:	f88d 3012 	strb.w	r3, [sp, #18]
    eebe:	e005      	b.n	eecc <smpScProcPairing+0x2e0>
    }
    else
    {
      hdr.status = SMP_ERR_UNSPECIFIED;
    eec0:	2308      	movs	r3, #8
    eec2:	f88d 3013 	strb.w	r3, [sp, #19]
      hdr.event = SMP_MSG_API_CANCEL_REQ;
    eec6:	2303      	movs	r3, #3
    eec8:	f88d 3012 	strb.w	r3, [sp, #18]
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    eecc:	ab04      	add	r3, sp, #16
    eece:	4619      	mov	r1, r3
    eed0:	9803      	ldr	r0, [sp, #12]
    eed2:	f7fe fdc7 	bl	da64 <smpSmExecute>
    eed6:	e02b      	b.n	ef30 <smpScProcPairing+0x344>
  }
  else if ((pSmpCfg->auth & SMP_AUTH_SC_FLAG) != 0)
    eed8:	4b52      	ldr	r3, [pc, #328]	; (f024 <smpScProcPairing+0x438>)
    eeda:	681b      	ldr	r3, [r3, #0]
    eedc:	7a1b      	ldrb	r3, [r3, #8]
    eede:	f003 0308 	and.w	r3, r3, #8
    eee2:	2b00      	cmp	r3, #0
    eee4:	d012      	beq.n	ef0c <smpScProcPairing+0x320>
  {
    /* cancel pairing if configuration requires LESC and we are falling back to legacy */
    hdr.param = pCcb->connId;
    eee6:	9b03      	ldr	r3, [sp, #12]
    eee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    eeec:	b29b      	uxth	r3, r3
    eeee:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
    eef2:	2303      	movs	r3, #3
    eef4:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    eef8:	2303      	movs	r3, #3
    eefa:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    eefe:	ab04      	add	r3, sp, #16
    ef00:	4619      	mov	r1, r3
    ef02:	9803      	ldr	r0, [sp, #12]
    ef04:	f7fe fdae 	bl	da64 <smpSmExecute>
    return FALSE;
    ef08:	2300      	movs	r3, #0
    ef0a:	e086      	b.n	f01a <smpScProcPairing+0x42e>
  }
  else
  {
    /* in case we're falling back to legacy after being paired with SC */
    pCcb->pScCcb->lescEnabled = FALSE;
    ef0c:	9b03      	ldr	r3, [sp, #12]
    ef0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ef10:	2200      	movs	r2, #0
    ef12:	701a      	strb	r2, [r3, #0]

    /* Send internal message indicating legacy security was requested */
    hdr.param = pCcb->connId;
    ef14:	9b03      	ldr	r3, [sp, #12]
    ef16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    ef1a:	b29b      	uxth	r3, r3
    ef1c:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.event = SMP_MSG_INT_LEGACY;
    ef20:	2312      	movs	r3, #18
    ef22:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    ef26:	ab04      	add	r3, sp, #16
    ef28:	4619      	mov	r1, r3
    ef2a:	9803      	ldr	r0, [sp, #12]
    ef2c:	f7fe fd9a 	bl	da64 <smpSmExecute>
  }

  if (!justWorks)
    ef30:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ef34:	2b00      	cmp	r3, #0
    ef36:	d10e      	bne.n	ef56 <smpScProcPairing+0x36a>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
    ef38:	9b03      	ldr	r3, [sp, #12]
    ef3a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    ef3e:	9b03      	ldr	r3, [sp, #12]
    ef40:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ef44:	4013      	ands	r3, r2
    ef46:	b2db      	uxtb	r3, r3
    ef48:	f043 0304 	orr.w	r3, r3, #4
    ef4c:	b2da      	uxtb	r2, r3
    ef4e:	9b03      	ldr	r3, [sp, #12]
    ef50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ef54:	e00d      	b.n	ef72 <smpScProcPairing+0x386>
  }
  else
  {
    /* set auth flags with mitm bit cleared */
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
    ef56:	9b03      	ldr	r3, [sp, #12]
    ef58:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    ef5c:	9b03      	ldr	r3, [sp, #12]
    ef5e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ef62:	4013      	ands	r3, r2
    ef64:	b2db      	uxtb	r3, r3
    ef66:	f023 0304 	bic.w	r3, r3, #4
    ef6a:	b2da      	uxtb	r2, r3
    ef6c:	9b03      	ldr	r3, [sp, #12]
    ef6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
    ef72:	9b03      	ldr	r3, [sp, #12]
    ef74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    ef78:	2b00      	cmp	r3, #0
    ef7a:	d003      	beq.n	ef84 <smpScProcPairing+0x398>
    ef7c:	9b03      	ldr	r3, [sp, #12]
    ef7e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    ef82:	e002      	b.n	ef8a <smpScProcPairing+0x39e>
    ef84:	9b03      	ldr	r3, [sp, #12]
    ef86:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ef8a:	f88d 3016 	strb.w	r3, [sp, #22]
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    ef8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ef92:	2b00      	cmp	r3, #0
    ef94:	d01d      	beq.n	efd2 <smpScProcPairing+0x3e6>
    ef96:	4b23      	ldr	r3, [pc, #140]	; (f024 <smpScProcPairing+0x438>)
    ef98:	681b      	ldr	r3, [r3, #0]
    ef9a:	7a1a      	ldrb	r2, [r3, #8]
    ef9c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    efa0:	4013      	ands	r3, r2
    efa2:	b2db      	uxtb	r3, r3
    efa4:	f003 0304 	and.w	r3, r3, #4
    efa8:	2b00      	cmp	r3, #0
    efaa:	d012      	beq.n	efd2 <smpScProcPairing+0x3e6>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
    efac:	9b03      	ldr	r3, [sp, #12]
    efae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    efb2:	b29b      	uxth	r3, r3
    efb4:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
    efb8:	2303      	movs	r3, #3
    efba:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    efbe:	2303      	movs	r3, #3
    efc0:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    efc4:	ab04      	add	r3, sp, #16
    efc6:	4619      	mov	r1, r3
    efc8:	9803      	ldr	r0, [sp, #12]
    efca:	f7fe fd4b 	bl	da64 <smpSmExecute>
    return FALSE;
    efce:	2300      	movs	r3, #0
    efd0:	e023      	b.n	f01a <smpScProcPairing+0x42e>
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
    efd2:	9b03      	ldr	r3, [sp, #12]
    efd4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    efd8:	4b12      	ldr	r3, [pc, #72]	; (f024 <smpScProcPairing+0x438>)
    efda:	681b      	ldr	r3, [r3, #0]
    efdc:	795b      	ldrb	r3, [r3, #5]
    efde:	429a      	cmp	r2, r3
    efe0:	d307      	bcc.n	eff2 <smpScProcPairing+0x406>
      pCcb->pairRsp[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen)
    efe2:	9b03      	ldr	r3, [sp, #12]
    efe4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    efe8:	4b0e      	ldr	r3, [pc, #56]	; (f024 <smpScProcPairing+0x438>)
    efea:	681b      	ldr	r3, [r3, #0]
    efec:	795b      	ldrb	r3, [r3, #5]
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
    efee:	429a      	cmp	r2, r3
    eff0:	d212      	bcs.n	f018 <smpScProcPairing+0x42c>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
    eff2:	9b03      	ldr	r3, [sp, #12]
    eff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    eff8:	b29b      	uxth	r3, r3
    effa:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_ENC_KEY_SIZE;
    effe:	2306      	movs	r3, #6
    f000:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    f004:	2303      	movs	r3, #3
    f006:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    f00a:	ab04      	add	r3, sp, #16
    f00c:	4619      	mov	r1, r3
    f00e:	9803      	ldr	r0, [sp, #12]
    f010:	f7fe fd28 	bl	da64 <smpSmExecute>
    return FALSE;
    f014:	2300      	movs	r3, #0
    f016:	e000      	b.n	f01a <smpScProcPairing+0x42e>
  }

  return TRUE;
    f018:	2301      	movs	r3, #1
}
    f01a:	4618      	mov	r0, r3
    f01c:	b006      	add	sp, #24
    f01e:	bd10      	pop	{r4, pc}
    f020:	10008824 	.word	0x10008824
    f024:	10002b94 	.word	0x10002b94

0000f028 <smpScAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
    f028:	b500      	push	{lr}
    f02a:	b089      	sub	sp, #36	; 0x24
    f02c:	9001      	str	r0, [sp, #4]
    f02e:	460b      	mov	r3, r1
    f030:	f88d 3003 	strb.w	r3, [sp, #3]
    f034:	4613      	mov	r3, r2
    f036:	f88d 3002 	strb.w	r3, [sp, #2]
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
    f03a:	9b01      	ldr	r3, [sp, #4]
    f03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f03e:	781b      	ldrb	r3, [r3, #0]
    f040:	2b00      	cmp	r3, #0
    f042:	d106      	bne.n	f052 <smpScAuthReq+0x2a>
    f044:	9b01      	ldr	r3, [sp, #4]
    f046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    f04a:	f003 0304 	and.w	r3, r3, #4
    f04e:	2b00      	cmp	r3, #0
    f050:	d109      	bne.n	f066 <smpScAuthReq+0x3e>
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
    f052:	9b01      	ldr	r3, [sp, #4]
    f054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f056:	781b      	ldrb	r3, [r3, #0]
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
    f058:	2b00      	cmp	r3, #0
    f05a:	d01a      	beq.n	f092 <smpScAuthReq+0x6a>
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
    f05c:	9b01      	ldr	r3, [sp, #4]
    f05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f060:	785b      	ldrb	r3, [r3, #1]
    f062:	2b02      	cmp	r3, #2
    f064:	d115      	bne.n	f092 <smpScAuthReq+0x6a>
  {
    /* request pin or oob from user */
    buf.authReq.hdr.param = pCcb->connId;
    f066:	9b01      	ldr	r3, [sp, #4]
    f068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f06c:	b29b      	uxth	r3, r3
    f06e:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    f072:	232e      	movs	r3, #46	; 0x2e
    f074:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authReq.oob = oob;
    f078:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f07c:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authReq.display = display;
    f080:	f89d 3002 	ldrb.w	r3, [sp, #2]
    f084:	f88d 300d 	strb.w	r3, [sp, #13]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
    f088:	ab02      	add	r3, sp, #8
    f08a:	4618      	mov	r0, r3
    f08c:	f003 fb66 	bl	1275c <DmSmpCbackExec>
    f090:	e019      	b.n	f0c6 <smpScAuthReq+0x9e>
  }
  else
  {
    /* else use just works; send ourselves a auth rsp with all zero pin */
    buf.authRsp.hdr.param = pCcb->connId;
    f092:	9b01      	ldr	r3, [sp, #4]
    f094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f098:	b29b      	uxth	r3, r3
    f09a:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
    f09e:	2304      	movs	r3, #4
    f0a0:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authRsp.authData[0] = 0;
    f0a4:	2300      	movs	r3, #0
    f0a6:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authRsp.authData[1] = 0;
    f0aa:	2300      	movs	r3, #0
    f0ac:	f88d 300d 	strb.w	r3, [sp, #13]
    buf.authRsp.authData[2] = 0;
    f0b0:	2300      	movs	r3, #0
    f0b2:	f88d 300e 	strb.w	r3, [sp, #14]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    f0b6:	2303      	movs	r3, #3
    f0b8:	f88d 301c 	strb.w	r3, [sp, #28]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
    f0bc:	ab02      	add	r3, sp, #8
    f0be:	4619      	mov	r1, r3
    f0c0:	9801      	ldr	r0, [sp, #4]
    f0c2:	f7fe fccf 	bl	da64 <smpSmExecute>
  }
}
    f0c6:	bf00      	nop
    f0c8:	b009      	add	sp, #36	; 0x24
    f0ca:	f85d fb04 	ldr.w	pc, [sp], #4

0000f0ce <smpScActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f0ce:	b500      	push	{lr}
    f0d0:	b083      	sub	sp, #12
    f0d2:	9001      	str	r0, [sp, #4]
    f0d4:	9100      	str	r1, [sp, #0]
  smpActCleanup(pCcb, pMsg);
    f0d6:	9900      	ldr	r1, [sp, #0]
    f0d8:	9801      	ldr	r0, [sp, #4]
    f0da:	f7fd ffc8 	bl	d06e <smpActCleanup>

  /* Free scratch buffers */
  SmpScFreeScratchBuffers(pCcb);
    f0de:	9801      	ldr	r0, [sp, #4]
    f0e0:	f000 fc9e 	bl	fa20 <SmpScFreeScratchBuffers>
}
    f0e4:	bf00      	nop
    f0e6:	b003      	add	sp, #12
    f0e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000f0ec <smpScActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f0ec:	b500      	push	{lr}
    f0ee:	b083      	sub	sp, #12
    f0f0:	9001      	str	r0, [sp, #4]
    f0f2:	9100      	str	r1, [sp, #0]
  /* Perform LESC Cleanup */
  smpScActCleanup(pCcb, pMsg);
    f0f4:	9900      	ldr	r1, [sp, #0]
    f0f6:	9801      	ldr	r0, [sp, #4]
    f0f8:	f7ff ffe9 	bl	f0ce <smpScActCleanup>

  /* Process failure */
  smpActPairingFailed(pCcb, pMsg);
    f0fc:	9900      	ldr	r1, [sp, #0]
    f0fe:	9801      	ldr	r0, [sp, #4]
    f100:	f7fd ffe3 	bl	d0ca <smpActPairingFailed>
}
    f104:	bf00      	nop
    f106:	b003      	add	sp, #12
    f108:	f85d fb04 	ldr.w	pc, [sp], #4

0000f10c <smpScActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f10c:	b500      	push	{lr}
    f10e:	b083      	sub	sp, #12
    f110:	9001      	str	r0, [sp, #4]
    f112:	9100      	str	r1, [sp, #0]
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
    f114:	9b00      	ldr	r3, [sp, #0]
    f116:	78db      	ldrb	r3, [r3, #3]
    f118:	4619      	mov	r1, r3
    f11a:	9801      	ldr	r0, [sp, #4]
    f11c:	f7fd ffb2 	bl	d084 <smpSendPairingFailed>

  smpScActPairingFailed(pCcb, pMsg);
    f120:	9900      	ldr	r1, [sp, #0]
    f122:	9801      	ldr	r0, [sp, #4]
    f124:	f7ff ffe2 	bl	f0ec <smpScActPairingFailed>
}
    f128:	bf00      	nop
    f12a:	b003      	add	sp, #12
    f12c:	f85d fb04 	ldr.w	pc, [sp], #4

0000f130 <smpScActAuthSelect>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f130:	b500      	push	{lr}
    f132:	b085      	sub	sp, #20
    f134:	9001      	str	r0, [sp, #4]
    f136:	9100      	str	r1, [sp, #0]
  wsfMsgHdr_t hdr;
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;
    f138:	9b00      	ldr	r3, [sp, #0]
    f13a:	685b      	ldr	r3, [r3, #4]
    f13c:	3308      	adds	r3, #8
    f13e:	9303      	str	r3, [sp, #12]

  /* Process public key from peer (store in MSB first format) */
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
    f140:	9b01      	ldr	r3, [sp, #4]
    f142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f144:	689b      	ldr	r3, [r3, #8]
    f146:	4618      	mov	r0, r3
    f148:	9b03      	ldr	r3, [sp, #12]
    f14a:	3301      	adds	r3, #1
    f14c:	2220      	movs	r2, #32
    f14e:	4619      	mov	r1, r3
    f150:	f00c f937 	bl	1b3c2 <WStrReverseCpy>
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyY, &pPacket[SMP_PUB_KEY_Y_POS], SMP_PUB_KEY_LEN);
    f154:	9b01      	ldr	r3, [sp, #4]
    f156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f158:	689b      	ldr	r3, [r3, #8]
    f15a:	f103 0020 	add.w	r0, r3, #32
    f15e:	9b03      	ldr	r3, [sp, #12]
    f160:	3321      	adds	r3, #33	; 0x21
    f162:	2220      	movs	r2, #32
    f164:	4619      	mov	r1, r3
    f166:	f00c f92c 	bl	1b3c2 <WStrReverseCpy>

  /* Message state machine indicating authorization mode (JW, OOB, or passkey) */
  hdr.param = pCcb->connId;
    f16a:	9b01      	ldr	r3, [sp, #4]
    f16c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f170:	b29b      	uxth	r3, r3
    f172:	f8ad 3008 	strh.w	r3, [sp, #8]

  switch(pCcb->pScCcb->authType)
    f176:	9b01      	ldr	r3, [sp, #4]
    f178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f17a:	785b      	ldrb	r3, [r3, #1]
    f17c:	3b01      	subs	r3, #1
    f17e:	2b03      	cmp	r3, #3
    f180:	d816      	bhi.n	f1b0 <smpScActAuthSelect+0x80>
    f182:	a201      	add	r2, pc, #4	; (adr r2, f188 <smpScActAuthSelect+0x58>)
    f184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f188:	0000f199 	.word	0x0000f199
    f18c:	0000f1a1 	.word	0x0000f1a1
    f190:	0000f1a9 	.word	0x0000f1a9
    f194:	0000f199 	.word	0x0000f199
  {
  case SMP_AUTH_TYPE_NUM_COMP:
  case SMP_AUTH_TYPE_JUST_WORKS:
    hdr.event = SMP_MSG_INT_JW_NC;
    f198:	2313      	movs	r3, #19
    f19a:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
    f19e:	e00e      	b.n	f1be <smpScActAuthSelect+0x8e>
  case SMP_AUTH_TYPE_OOB:
    hdr.event = SMP_MSG_INT_OOB;
    f1a0:	2315      	movs	r3, #21
    f1a2:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
    f1a6:	e00a      	b.n	f1be <smpScActAuthSelect+0x8e>
  case SMP_AUTH_TYPE_PASSKEY:
    hdr.event = SMP_MSG_INT_PASSKEY;
    f1a8:	2314      	movs	r3, #20
    f1aa:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
    f1ae:	e006      	b.n	f1be <smpScActAuthSelect+0x8e>
  default:
    hdr.status = SMP_ERR_UNSPECIFIED;
    f1b0:	2308      	movs	r3, #8
    f1b2:	f88d 300b 	strb.w	r3, [sp, #11]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    f1b6:	2303      	movs	r3, #3
    f1b8:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
    f1bc:	bf00      	nop
  }

  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    f1be:	ab02      	add	r3, sp, #8
    f1c0:	4619      	mov	r1, r3
    f1c2:	9801      	ldr	r0, [sp, #4]
    f1c4:	f7fe fc4e 	bl	da64 <smpSmExecute>
}
    f1c8:	bf00      	nop
    f1ca:	b005      	add	sp, #20
    f1cc:	f85d fb04 	ldr.w	pc, [sp], #4

0000f1d0 <smpScActPkSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f1d0:	b500      	push	{lr}
    f1d2:	b089      	sub	sp, #36	; 0x24
    f1d4:	9001      	str	r0, [sp, #4]
    f1d6:	9100      	str	r1, [sp, #0]
  {
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  pCcb->pScCcb->pkPos = 0;
    f1d8:	9b01      	ldr	r3, [sp, #4]
    f1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f1dc:	2200      	movs	r2, #0
    f1de:	70da      	strb	r2, [r3, #3]

  /* Next command is the Pair Confirm */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
    f1e0:	9b01      	ldr	r3, [sp, #4]
    f1e2:	2203      	movs	r2, #3
    f1e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* request pin or oob from user */
  buf.authReq.hdr.param = pCcb->connId;
    f1e8:	9b01      	ldr	r3, [sp, #4]
    f1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f1ee:	b29b      	uxth	r3, r3
    f1f0:	f8ad 3008 	strh.w	r3, [sp, #8]
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    f1f4:	232e      	movs	r3, #46	; 0x2e
    f1f6:	f88d 300a 	strb.w	r3, [sp, #10]
  buf.authReq.oob = FALSE;
    f1fa:	2300      	movs	r3, #0
    f1fc:	f88d 300c 	strb.w	r3, [sp, #12]
  buf.authReq.display = pCcb->pScCcb->display;
    f200:	9b01      	ldr	r3, [sp, #4]
    f202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f204:	791b      	ldrb	r3, [r3, #4]
    f206:	f88d 300d 	strb.w	r3, [sp, #13]
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
    f20a:	ab02      	add	r3, sp, #8
    f20c:	4618      	mov	r0, r3
    f20e:	f003 faa5 	bl	1275c <DmSmpCbackExec>
}
    f212:	bf00      	nop
    f214:	b009      	add	sp, #36	; 0x24
    f216:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000f21c <smpScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f21c:	b500      	push	{lr}
    f21e:	b085      	sub	sp, #20
    f220:	9003      	str	r0, [sp, #12]
    f222:	9102      	str	r1, [sp, #8]
  /* Cb = f4(PKbx, PKax, Nb, 0x00) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if (pCcb->initiator)
    f224:	9b03      	ldr	r3, [sp, #12]
    f226:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    f22a:	2b00      	cmp	r3, #0
    f22c:	d02d      	beq.n	f28a <smpScActJwncCalcF4+0x6e>
  {
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
    f22e:	9b03      	ldr	r3, [sp, #12]
    f230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f232:	689b      	ldr	r3, [r3, #8]
    f234:	2220      	movs	r2, #32
    f236:	4619      	mov	r1, r3
    f238:	482c      	ldr	r0, [pc, #176]	; (f2ec <smpScActJwncCalcF4+0xd0>)
    f23a:	f000 ff17 	bl	1006c <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pLocalPublicKey->pubKeyX);
    f23e:	9b03      	ldr	r3, [sp, #12]
    f240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f242:	68db      	ldr	r3, [r3, #12]
    f244:	2220      	movs	r2, #32
    f246:	4619      	mov	r1, r3
    f248:	4829      	ldr	r0, [pc, #164]	; (f2f0 <smpScActJwncCalcF4+0xd4>)
    f24a:	f000 ff0f 	bl	1006c <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
    f24e:	9b03      	ldr	r3, [sp, #12]
    f250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f252:	695b      	ldr	r3, [r3, #20]
    f254:	3310      	adds	r3, #16
    f256:	2210      	movs	r2, #16
    f258:	4619      	mov	r1, r3
    f25a:	4826      	ldr	r0, [pc, #152]	; (f2f4 <smpScActJwncCalcF4+0xd8>)
    f25c:	f000 ff06 	bl	1006c <smpLogByteArray>

    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    f260:	9b03      	ldr	r3, [sp, #12]
    f262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f264:	689b      	ldr	r3, [r3, #8]
    f266:	461a      	mov	r2, r3
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    f268:	9b03      	ldr	r3, [sp, #12]
    f26a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f26c:	68db      	ldr	r3, [r3, #12]
    f26e:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Nb_Eb);
    f270:	9b03      	ldr	r3, [sp, #12]
    f272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f274:	695b      	ldr	r3, [r3, #20]
    f276:	3310      	adds	r3, #16
    SmpScCalcF4(pCcb, pMsg,
    f278:	9301      	str	r3, [sp, #4]
    f27a:	2300      	movs	r3, #0
    f27c:	9300      	str	r3, [sp, #0]
    f27e:	460b      	mov	r3, r1
    f280:	9902      	ldr	r1, [sp, #8]
    f282:	9803      	ldr	r0, [sp, #12]
    f284:	f000 fc70 	bl	fb68 <SmpScCalcF4>
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
    f288:	e02c      	b.n	f2e4 <smpScActJwncCalcF4+0xc8>
    SMP_TRACE_256("F4 PKb",  pCcb->pScCcb->pLocalPublicKey->pubKeyX);
    f28a:	9b03      	ldr	r3, [sp, #12]
    f28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f28e:	68db      	ldr	r3, [r3, #12]
    f290:	2220      	movs	r2, #32
    f292:	4619      	mov	r1, r3
    f294:	4815      	ldr	r0, [pc, #84]	; (f2ec <smpScActJwncCalcF4+0xd0>)
    f296:	f000 fee9 	bl	1006c <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
    f29a:	9b03      	ldr	r3, [sp, #12]
    f29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f29e:	689b      	ldr	r3, [r3, #8]
    f2a0:	2220      	movs	r2, #32
    f2a2:	4619      	mov	r1, r3
    f2a4:	4812      	ldr	r0, [pc, #72]	; (f2f0 <smpScActJwncCalcF4+0xd4>)
    f2a6:	f000 fee1 	bl	1006c <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
    f2aa:	9b03      	ldr	r3, [sp, #12]
    f2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f2ae:	695b      	ldr	r3, [r3, #20]
    f2b0:	3310      	adds	r3, #16
    f2b2:	2210      	movs	r2, #16
    f2b4:	4619      	mov	r1, r3
    f2b6:	480f      	ldr	r0, [pc, #60]	; (f2f4 <smpScActJwncCalcF4+0xd8>)
    f2b8:	f000 fed8 	bl	1006c <smpLogByteArray>
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    f2bc:	9b03      	ldr	r3, [sp, #12]
    f2be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f2c0:	68db      	ldr	r3, [r3, #12]
    f2c2:	461a      	mov	r2, r3
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    f2c4:	9b03      	ldr	r3, [sp, #12]
    f2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f2c8:	689b      	ldr	r3, [r3, #8]
    f2ca:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Nb_Eb);
    f2cc:	9b03      	ldr	r3, [sp, #12]
    f2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f2d0:	695b      	ldr	r3, [r3, #20]
    f2d2:	3310      	adds	r3, #16
    SmpScCalcF4(pCcb, pMsg,
    f2d4:	9301      	str	r3, [sp, #4]
    f2d6:	2300      	movs	r3, #0
    f2d8:	9300      	str	r3, [sp, #0]
    f2da:	460b      	mov	r3, r1
    f2dc:	9902      	ldr	r1, [sp, #8]
    f2de:	9803      	ldr	r0, [sp, #12]
    f2e0:	f000 fc42 	bl	fb68 <SmpScCalcF4>
}
    f2e4:	bf00      	nop
    f2e6:	b005      	add	sp, #20
    f2e8:	f85d fb04 	ldr.w	pc, [sp], #4
    f2ec:	000281a0 	.word	0x000281a0
    f2f0:	000281a8 	.word	0x000281a8
    f2f4:	000281b0 	.word	0x000281b0

0000f2f8 <smpScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f2f8:	b500      	push	{lr}
    f2fa:	b087      	sub	sp, #28
    f2fc:	9003      	str	r0, [sp, #12]
    f2fe:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  /* g2(PKax, PKbx, Na, Nb) where g2(U, V, X, Z) = AES-CMACx (U || V || Z) mod 2^32 */
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    f300:	9a02      	ldr	r2, [sp, #8]
    f302:	9903      	ldr	r1, [sp, #12]
    f304:	2050      	movs	r0, #80	; 0x50
    f306:	f000 fc0f 	bl	fb28 <SmpScAlloc>
    f30a:	9004      	str	r0, [sp, #16]
    f30c:	9b04      	ldr	r3, [sp, #16]
    f30e:	2b00      	cmp	r3, #0
    f310:	d03f      	beq.n	f392 <smpScActJwncCalcG2+0x9a>
  {
    uint8_t *pCatBuf = pCmacText;
    f312:	9b04      	ldr	r3, [sp, #16]
    f314:	9305      	str	r3, [sp, #20]

    /* Concatinate PKax, PKbx, Nb */
    if (pCcb->initiator)
    f316:	9b03      	ldr	r3, [sp, #12]
    f318:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    f31c:	2b00      	cmp	r3, #0
    f31e:	d012      	beq.n	f346 <smpScActJwncCalcG2+0x4e>
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    f320:	9b03      	ldr	r3, [sp, #12]
    f322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f324:	68db      	ldr	r3, [r3, #12]
    f326:	2220      	movs	r2, #32
    f328:	4619      	mov	r1, r3
    f32a:	9805      	ldr	r0, [sp, #20]
    f32c:	f000 fc82 	bl	fc34 <SmpScCat>
    f330:	9005      	str	r0, [sp, #20]
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    f332:	9b03      	ldr	r3, [sp, #12]
    f334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f336:	689b      	ldr	r3, [r3, #8]
    f338:	2220      	movs	r2, #32
    f33a:	4619      	mov	r1, r3
    f33c:	9805      	ldr	r0, [sp, #20]
    f33e:	f000 fc79 	bl	fc34 <SmpScCat>
    f342:	9005      	str	r0, [sp, #20]
    f344:	e011      	b.n	f36a <smpScActJwncCalcG2+0x72>
    }
    else
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    f346:	9b03      	ldr	r3, [sp, #12]
    f348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f34a:	689b      	ldr	r3, [r3, #8]
    f34c:	2220      	movs	r2, #32
    f34e:	4619      	mov	r1, r3
    f350:	9805      	ldr	r0, [sp, #20]
    f352:	f000 fc6f 	bl	fc34 <SmpScCat>
    f356:	9005      	str	r0, [sp, #20]
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    f358:	9b03      	ldr	r3, [sp, #12]
    f35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f35c:	68db      	ldr	r3, [r3, #12]
    f35e:	2220      	movs	r2, #32
    f360:	4619      	mov	r1, r3
    f362:	9805      	ldr	r0, [sp, #20]
    f364:	f000 fc66 	bl	fc34 <SmpScCat>
    f368:	9005      	str	r0, [sp, #20]
    }

    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    f36a:	9b03      	ldr	r3, [sp, #12]
    f36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f36e:	695b      	ldr	r3, [r3, #20]
    f370:	3310      	adds	r3, #16
    f372:	4619      	mov	r1, r3
    f374:	9805      	ldr	r0, [sp, #20]
    f376:	f000 fc73 	bl	fc60 <SmpScCat128>
    f37a:	9005      	str	r0, [sp, #20]

    /* Execute CMAC with Na as the key */
    SmpScCmac(pCcb->pScCcb->pScratch->Na_Ea, pCmacText, SMP_G2_TEXT_LEN, pCcb, pMsg);
    f37c:	9b03      	ldr	r3, [sp, #12]
    f37e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f380:	695b      	ldr	r3, [r3, #20]
    f382:	4618      	mov	r0, r3
    f384:	9b02      	ldr	r3, [sp, #8]
    f386:	9300      	str	r3, [sp, #0]
    f388:	9b03      	ldr	r3, [sp, #12]
    f38a:	2250      	movs	r2, #80	; 0x50
    f38c:	9904      	ldr	r1, [sp, #16]
    f38e:	f000 fb99 	bl	fac4 <SmpScCmac>
  }
}
    f392:	bf00      	nop
    f394:	b007      	add	sp, #28
    f396:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000f39c <smpScActJwncDisplay>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f39c:	b500      	push	{lr}
    f39e:	b089      	sub	sp, #36	; 0x24
    f3a0:	9001      	str	r0, [sp, #4]
    f3a2:	9100      	str	r1, [sp, #0]
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
    f3a4:	9b01      	ldr	r3, [sp, #4]
    f3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f3a8:	785b      	ldrb	r3, [r3, #1]
    f3aa:	2b04      	cmp	r3, #4
    f3ac:	d11f      	bne.n	f3ee <smpScActJwncDisplay+0x52>
  {
    dmSecCnfIndEvt_t cnfEvt;

    SMP_TRACE_128("JWNC Display Cnf", pMsg->aes.pCiphertext);
    f3ae:	9b00      	ldr	r3, [sp, #0]
    f3b0:	685b      	ldr	r3, [r3, #4]
    f3b2:	2210      	movs	r2, #16
    f3b4:	4619      	mov	r1, r3
    f3b6:	4818      	ldr	r0, [pc, #96]	; (f418 <smpScActJwncDisplay+0x7c>)
    f3b8:	f000 fe58 	bl	1006c <smpLogByteArray>

    /* Send the confirm value to the application for display to the user */
    Calc128Cpy(cnfEvt.confirm, pMsg->aes.pCiphertext);
    f3bc:	9b00      	ldr	r3, [sp, #0]
    f3be:	685a      	ldr	r2, [r3, #4]
    f3c0:	ab03      	add	r3, sp, #12
    f3c2:	3304      	adds	r3, #4
    f3c4:	4611      	mov	r1, r2
    f3c6:	4618      	mov	r0, r3
    f3c8:	f00b ffc3 	bl	1b352 <Calc128Cpy>
    cnfEvt.hdr.param = pCcb->connId;
    f3cc:	9b01      	ldr	r3, [sp, #4]
    f3ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f3d2:	b29b      	uxth	r3, r3
    f3d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
    f3d8:	2335      	movs	r3, #53	; 0x35
    f3da:	f88d 300e 	strb.w	r3, [sp, #14]
    cnfEvt.hdr.status = HCI_SUCCESS;
    f3de:	2300      	movs	r3, #0
    f3e0:	f88d 300f 	strb.w	r3, [sp, #15]

    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
    f3e4:	ab03      	add	r3, sp, #12
    f3e6:	4618      	mov	r0, r3
    f3e8:	f003 f9b8 	bl	1275c <DmSmpCbackExec>
    hdr.param = pCcb->connId;
    hdr.event = SMP_MSG_API_USER_CONFIRM;
    hdr.status = HCI_SUCCESS;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
    f3ec:	e010      	b.n	f410 <smpScActJwncDisplay+0x74>
    hdr.param = pCcb->connId;
    f3ee:	9b01      	ldr	r3, [sp, #4]
    f3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f3f4:	b29b      	uxth	r3, r3
    f3f6:	f8ad 3008 	strh.w	r3, [sp, #8]
    hdr.event = SMP_MSG_API_USER_CONFIRM;
    f3fa:	2316      	movs	r3, #22
    f3fc:	f88d 300a 	strb.w	r3, [sp, #10]
    hdr.status = HCI_SUCCESS;
    f400:	2300      	movs	r3, #0
    f402:	f88d 300b 	strb.w	r3, [sp, #11]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    f406:	ab02      	add	r3, sp, #8
    f408:	4619      	mov	r1, r3
    f40a:	9801      	ldr	r0, [sp, #4]
    f40c:	f7fe fb2a 	bl	da64 <smpSmExecute>
}
    f410:	bf00      	nop
    f412:	b009      	add	sp, #36	; 0x24
    f414:	f85d fb04 	ldr.w	pc, [sp], #4
    f418:	000281b8 	.word	0x000281b8

0000f41c <smpScActPkKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f41c:	b500      	push	{lr}
    f41e:	b087      	sub	sp, #28
    f420:	9001      	str	r0, [sp, #4]
    f422:	9100      	str	r1, [sp, #0]
  uint8_t *pCmd = pMsg->data.pPacket + L2C_PAYLOAD_START;
    f424:	9b00      	ldr	r3, [sp, #0]
    f426:	685b      	ldr	r3, [r3, #4]
    f428:	3308      	adds	r3, #8
    f42a:	9305      	str	r3, [sp, #20]
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    f42c:	9b00      	ldr	r3, [sp, #0]
    f42e:	685b      	ldr	r3, [r3, #4]
    f430:	3309      	adds	r3, #9
    f432:	9304      	str	r3, [sp, #16]

  if (*pCmd == SMP_CMD_KEYPRESS)
    f434:	9b05      	ldr	r3, [sp, #20]
    f436:	781b      	ldrb	r3, [r3, #0]
    f438:	2b0e      	cmp	r3, #14
    f43a:	d114      	bne.n	f466 <smpScActPkKeypress+0x4a>
  {
    dmSecKeypressIndEvt_t keypressEvt;

    /* Notify the application a keypress message was received from the responder */
    keypressEvt.notificationType = *pPacket;
    f43c:	9b04      	ldr	r3, [sp, #16]
    f43e:	781b      	ldrb	r3, [r3, #0]
    f440:	f88d 300c 	strb.w	r3, [sp, #12]
    keypressEvt.hdr.param = pCcb->connId;
    f444:	9b01      	ldr	r3, [sp, #4]
    f446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f44a:	b29b      	uxth	r3, r3
    f44c:	f8ad 3008 	strh.w	r3, [sp, #8]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
    f450:	2336      	movs	r3, #54	; 0x36
    f452:	f88d 300a 	strb.w	r3, [sp, #10]
    keypressEvt.hdr.status = HCI_SUCCESS;
    f456:	2300      	movs	r3, #0
    f458:	f88d 300b 	strb.w	r3, [sp, #11]

    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
    f45c:	ab02      	add	r3, sp, #8
    f45e:	4618      	mov	r0, r3
    f460:	f003 f97c 	bl	1275c <DmSmpCbackExec>
  }
  else
  {
    /* Unexpected command */
  }
}
    f464:	e00d      	b.n	f482 <smpScActPkKeypress+0x66>
  else if (*pCmd == SMP_CMD_PAIR_CNF)
    f466:	9b05      	ldr	r3, [sp, #20]
    f468:	781b      	ldrb	r3, [r3, #0]
    f46a:	2b03      	cmp	r3, #3
    f46c:	d109      	bne.n	f482 <smpScActPkKeypress+0x66>
    pMsg->hdr.event = SMP_MSG_EARLY_CNF;
    f46e:	9b00      	ldr	r3, [sp, #0]
    f470:	221e      	movs	r2, #30
    f472:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = HCI_SUCCESS;
    f474:	9b00      	ldr	r3, [sp, #0]
    f476:	2200      	movs	r2, #0
    f478:	70da      	strb	r2, [r3, #3]
    smpSmExecute(pCcb, pMsg);
    f47a:	9900      	ldr	r1, [sp, #0]
    f47c:	9801      	ldr	r0, [sp, #4]
    f47e:	f7fe faf1 	bl	da64 <smpSmExecute>
}
    f482:	bf00      	nop
    f484:	b007      	add	sp, #28
    f486:	f85d fb04 	ldr.w	pc, [sp], #4

0000f48a <smpScActPkSendKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSendKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f48a:	b500      	push	{lr}
    f48c:	b087      	sub	sp, #28
    f48e:	9001      	str	r0, [sp, #4]
    f490:	9100      	str	r1, [sp, #0]
  /* Send keypress notification to the peer */
  smpDmKeypress_t *pKeypress = (smpDmKeypress_t *) pMsg;
    f492:	9b00      	ldr	r3, [sp, #0]
    f494:	9305      	str	r3, [sp, #20]
  uint8_t         *pPkt;
  uint8_t         *p;

  if (pCcb->pScCcb->kpNotify)
    f496:	9b01      	ldr	r3, [sp, #4]
    f498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f49a:	789b      	ldrb	r3, [r3, #2]
    f49c:	2b00      	cmp	r3, #0
    f49e:	d024      	beq.n	f4ea <smpScActPkSendKeypress+0x60>
  {
    /* start smp response timer */
    smpStartRspTimer(pCcb);
    f4a0:	9801      	ldr	r0, [sp, #4]
    f4a2:	f7fd fd9d 	bl	cfe0 <smpStartRspTimer>

    /* allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_KEYPRESS_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
    f4a6:	200a      	movs	r0, #10
    f4a8:	f7ff f9a1 	bl	e7ee <smpMsgAlloc>
    f4ac:	9004      	str	r0, [sp, #16]
    f4ae:	9b04      	ldr	r3, [sp, #16]
    f4b0:	2b00      	cmp	r3, #0
    f4b2:	d010      	beq.n	f4d6 <smpScActPkSendKeypress+0x4c>
    {
      /* build packet */
      p = pPkt + L2C_PAYLOAD_START;
    f4b4:	9b04      	ldr	r3, [sp, #16]
    f4b6:	3308      	adds	r3, #8
    f4b8:	9303      	str	r3, [sp, #12]
      UINT8_TO_BSTREAM(p, SMP_CMD_KEYPRESS);
    f4ba:	9b03      	ldr	r3, [sp, #12]
    f4bc:	1c5a      	adds	r2, r3, #1
    f4be:	9203      	str	r2, [sp, #12]
    f4c0:	220e      	movs	r2, #14
    f4c2:	701a      	strb	r2, [r3, #0]

      /* Store keypress notification type */
      *p = pKeypress->keypress;
    f4c4:	9b05      	ldr	r3, [sp, #20]
    f4c6:	791a      	ldrb	r2, [r3, #4]
    f4c8:	9b03      	ldr	r3, [sp, #12]
    f4ca:	701a      	strb	r2, [r3, #0]

      /* send packet */
      smpSendPkt(pCcb, pPkt);
    f4cc:	9904      	ldr	r1, [sp, #16]
    f4ce:	9801      	ldr	r0, [sp, #4]
    f4d0:	f7ff f94c 	bl	e76c <smpSendPkt>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
      smpSmExecute(pCcb, pMsg);
    }
  }
}
    f4d4:	e009      	b.n	f4ea <smpScActPkSendKeypress+0x60>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    f4d6:	9b00      	ldr	r3, [sp, #0]
    f4d8:	2208      	movs	r2, #8
    f4da:	70da      	strb	r2, [r3, #3]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    f4dc:	9b00      	ldr	r3, [sp, #0]
    f4de:	2203      	movs	r2, #3
    f4e0:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
    f4e2:	9900      	ldr	r1, [sp, #0]
    f4e4:	9801      	ldr	r0, [sp, #4]
    f4e6:	f7fe fabd 	bl	da64 <smpSmExecute>
}
    f4ea:	bf00      	nop
    f4ec:	b007      	add	sp, #28
    f4ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000f4f4 <smpScActCalcSharedSecret>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcSharedSecret(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f4f4:	b530      	push	{r4, r5, lr}
    f4f6:	b09b      	sub	sp, #108	; 0x6c
    f4f8:	9001      	str	r0, [sp, #4]
    f4fa:	9100      	str	r1, [sp, #0]
    }
  }
#endif

  /* Use local private key and peer public key to generate the shared secret */
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
    f4fc:	9b01      	ldr	r3, [sp, #4]
    f4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f500:	691b      	ldr	r3, [r3, #16]
    f502:	ac12      	add	r4, sp, #72	; 0x48
    f504:	461d      	mov	r5, r3
    f506:	6828      	ldr	r0, [r5, #0]
    f508:	6869      	ldr	r1, [r5, #4]
    f50a:	68aa      	ldr	r2, [r5, #8]
    f50c:	68eb      	ldr	r3, [r5, #12]
    f50e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f510:	6928      	ldr	r0, [r5, #16]
    f512:	6969      	ldr	r1, [r5, #20]
    f514:	69aa      	ldr	r2, [r5, #24]
    f516:	69eb      	ldr	r3, [r5, #28]
    f518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    f51a:	9b01      	ldr	r3, [sp, #4]
    f51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f51e:	689b      	ldr	r3, [r3, #8]
    f520:	ac02      	add	r4, sp, #8
    f522:	461d      	mov	r5, r3
    f524:	6828      	ldr	r0, [r5, #0]
    f526:	6869      	ldr	r1, [r5, #4]
    f528:	68aa      	ldr	r2, [r5, #8]
    f52a:	68eb      	ldr	r3, [r5, #12]
    f52c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f52e:	6928      	ldr	r0, [r5, #16]
    f530:	6969      	ldr	r1, [r5, #20]
    f532:	69aa      	ldr	r2, [r5, #24]
    f534:	69eb      	ldr	r3, [r5, #28]
    f536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
    f538:	9b01      	ldr	r3, [sp, #4]
    f53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f53c:	689b      	ldr	r3, [r3, #8]
    f53e:	3320      	adds	r3, #32
    f540:	ac0a      	add	r4, sp, #40	; 0x28
    f542:	461d      	mov	r5, r3
    f544:	6828      	ldr	r0, [r5, #0]
    f546:	6869      	ldr	r1, [r5, #4]
    f548:	68aa      	ldr	r2, [r5, #8]
    f54a:	68eb      	ldr	r3, [r5, #12]
    f54c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f54e:	6928      	ldr	r0, [r5, #16]
    f550:	6969      	ldr	r1, [r5, #20]
    f552:	69aa      	ldr	r2, [r5, #24]
    f554:	69eb      	ldr	r3, [r5, #28]
    f556:	c40f      	stmia	r4!, {r0, r1, r2, r3}

  /* Generate the shared secret */
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
    f558:	4b0d      	ldr	r3, [pc, #52]	; (f590 <smpScActCalcSharedSecret+0x9c>)
    f55a:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
    f55e:	9b01      	ldr	r3, [sp, #4]
    f560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f564:	b29a      	uxth	r2, r3
    f566:	a802      	add	r0, sp, #8
    f568:	2319      	movs	r3, #25
    f56a:	f00d fb36 	bl	1cbda <SecEccGenSharedSecret>
    f56e:	4603      	mov	r3, r0
    f570:	2b00      	cmp	r3, #0
    f572:	d109      	bne.n	f588 <smpScActCalcSharedSecret+0x94>
  {
    pMsg->hdr.status = SMP_ERR_MEMORY;
    f574:	9b00      	ldr	r3, [sp, #0]
    f576:	22e0      	movs	r2, #224	; 0xe0
    f578:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    f57a:	9b00      	ldr	r3, [sp, #0]
    f57c:	2203      	movs	r2, #3
    f57e:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
    f580:	9900      	ldr	r1, [sp, #0]
    f582:	9801      	ldr	r0, [sp, #4]
    f584:	f7fe fa6e 	bl	da64 <smpSmExecute>
  }
}
    f588:	bf00      	nop
    f58a:	b01b      	add	sp, #108	; 0x6c
    f58c:	bd30      	pop	{r4, r5, pc}
    f58e:	bf00      	nop
    f590:	10008824 	.word	0x10008824

0000f594 <smpScActCalcF5TKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5TKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f594:	b510      	push	{r4, lr}
    f596:	b08a      	sub	sp, #40	; 0x28
    f598:	9003      	str	r0, [sp, #12]
    f59a:	9102      	str	r1, [sp, #8]
  secEccMsg_t *pSecretMsg = (secEccMsg_t*) pMsg;
    f59c:	9b02      	ldr	r3, [sp, #8]
    f59e:	9309      	str	r3, [sp, #36]	; 0x24
  uint8_t *pCmacText;

  if (pMsg->hdr.status == HCI_SUCCESS)
    f5a0:	9b02      	ldr	r3, [sp, #8]
    f5a2:	78db      	ldrb	r3, [r3, #3]
    f5a4:	2b00      	cmp	r3, #0
    f5a6:	d124      	bne.n	f5f2 <smpScActCalcF5TKey+0x5e>
  {
    /* The shared secret is the DH Key */
    SMP_TRACE_256("DHKey (Shared Secret)", pSecretMsg->data.sharedSecret.secret);
    f5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5aa:	3304      	adds	r3, #4
    f5ac:	2220      	movs	r2, #32
    f5ae:	4619      	mov	r1, r3
    f5b0:	4817      	ldr	r0, [pc, #92]	; (f610 <smpScActCalcF5TKey+0x7c>)
    f5b2:	f000 fd5b 	bl	1006c <smpLogByteArray>

    if ((pCmacText = SmpScAlloc(SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    f5b6:	9a02      	ldr	r2, [sp, #8]
    f5b8:	9903      	ldr	r1, [sp, #12]
    f5ba:	2020      	movs	r0, #32
    f5bc:	f000 fab4 	bl	fb28 <SmpScAlloc>
    f5c0:	9008      	str	r0, [sp, #32]
    f5c2:	9b08      	ldr	r3, [sp, #32]
    f5c4:	2b00      	cmp	r3, #0
    f5c6:	d020      	beq.n	f60a <smpScActCalcF5TKey+0x76>
    {
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
    f5c8:	4b12      	ldr	r3, [pc, #72]	; (f614 <smpScActCalcF5TKey+0x80>)
    f5ca:	ac04      	add	r4, sp, #16
    f5cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f5ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                              0x60, 0x37, 0x0B, 0xDB, 0x5A, 0x60, 0x83, 0xBE};

      /* T = AES-CMACsalt (DHKey) */
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
    f5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5d4:	3304      	adds	r3, #4
    f5d6:	2220      	movs	r2, #32
    f5d8:	4619      	mov	r1, r3
    f5da:	9808      	ldr	r0, [sp, #32]
    f5dc:	f7fc fdc0 	bl	c160 <memcpy>

      /* Execute CMAC with salt as the key */
      SmpScCmac(salt, pCmacText, SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg);
    f5e0:	a804      	add	r0, sp, #16
    f5e2:	9b02      	ldr	r3, [sp, #8]
    f5e4:	9300      	str	r3, [sp, #0]
    f5e6:	9b03      	ldr	r3, [sp, #12]
    f5e8:	2220      	movs	r2, #32
    f5ea:	9908      	ldr	r1, [sp, #32]
    f5ec:	f000 fa6a 	bl	fac4 <SmpScCmac>
  else
  {
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    smpSmExecute(pCcb, pMsg);
  }
}
    f5f0:	e00b      	b.n	f60a <smpScActCalcF5TKey+0x76>
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    f5f2:	9b03      	ldr	r3, [sp, #12]
    f5f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    f5f8:	9902      	ldr	r1, [sp, #8]
    f5fa:	220b      	movs	r2, #11
    f5fc:	4618      	mov	r0, r3
    f5fe:	f000 fcdd 	bl	ffbc <SmpScGetCancelMsgWithReattempt>
    smpSmExecute(pCcb, pMsg);
    f602:	9902      	ldr	r1, [sp, #8]
    f604:	9803      	ldr	r0, [sp, #12]
    f606:	f7fe fa2d 	bl	da64 <smpSmExecute>
}
    f60a:	bf00      	nop
    f60c:	b00a      	add	sp, #40	; 0x28
    f60e:	bd10      	pop	{r4, pc}
    f610:	000281cc 	.word	0x000281cc
    f614:	000281e4 	.word	0x000281e4

0000f618 <smpScActCalcF5MacKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5MacKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f618:	b500      	push	{lr}
    f61a:	b089      	sub	sp, #36	; 0x24
    f61c:	9003      	str	r0, [sp, #12]
    f61e:	9102      	str	r1, [sp, #8]
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
    f620:	9b02      	ldr	r3, [sp, #8]
    f622:	9307      	str	r3, [sp, #28]
  uint8_t *pCmacText;

  /* Copy T from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
    f624:	9b03      	ldr	r3, [sp, #12]
    f626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f628:	699b      	ldr	r3, [r3, #24]
    f62a:	f103 0210 	add.w	r2, r3, #16
    f62e:	9b07      	ldr	r3, [sp, #28]
    f630:	685b      	ldr	r3, [r3, #4]
    f632:	4619      	mov	r1, r3
    f634:	4610      	mov	r0, r2
    f636:	f00b fe8c 	bl	1b352 <Calc128Cpy>

  SMP_TRACE_128("T", pCcb->pScCcb->pLtk->ltk_t);
    f63a:	9b03      	ldr	r3, [sp, #12]
    f63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f63e:	699b      	ldr	r3, [r3, #24]
    f640:	3310      	adds	r3, #16
    f642:	2210      	movs	r2, #16
    f644:	4619      	mov	r1, r3
    f646:	4827      	ldr	r0, [pc, #156]	; (f6e4 <smpScActCalcF5MacKey+0xcc>)
    f648:	f000 fd10 	bl	1006c <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    f64c:	9a02      	ldr	r2, [sp, #8]
    f64e:	9903      	ldr	r1, [sp, #12]
    f650:	2035      	movs	r0, #53	; 0x35
    f652:	f000 fa69 	bl	fb28 <SmpScAlloc>
    f656:	9006      	str	r0, [sp, #24]
    f658:	9b06      	ldr	r3, [sp, #24]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d03d      	beq.n	f6da <smpScActCalcF5MacKey+0xc2>
  {
    uint8_t *pCatBuf = pCmacText;
    f65e:	9b06      	ldr	r3, [sp, #24]
    f660:	9305      	str	r3, [sp, #20]

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* mackey = AES-CMACT (Counter = 0 || keyID ||N1 || N2|| A1|| A2|| Length = 256) */
    *pCatBuf++ = 0;
    f662:	9b05      	ldr	r3, [sp, #20]
    f664:	1c5a      	adds	r2, r3, #1
    f666:	9205      	str	r2, [sp, #20]
    f668:	2200      	movs	r2, #0
    f66a:	701a      	strb	r2, [r3, #0]
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
    f66c:	2204      	movs	r2, #4
    f66e:	491e      	ldr	r1, [pc, #120]	; (f6e8 <smpScActCalcF5MacKey+0xd0>)
    f670:	9805      	ldr	r0, [sp, #20]
    f672:	f000 fadf 	bl	fc34 <SmpScCat>
    f676:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
    f678:	9b03      	ldr	r3, [sp, #12]
    f67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f67c:	695b      	ldr	r3, [r3, #20]
    f67e:	4619      	mov	r1, r3
    f680:	9805      	ldr	r0, [sp, #20]
    f682:	f000 faed 	bl	fc60 <SmpScCat128>
    f686:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    f688:	9b03      	ldr	r3, [sp, #12]
    f68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f68c:	695b      	ldr	r3, [r3, #20]
    f68e:	3310      	adds	r3, #16
    f690:	4619      	mov	r1, r3
    f692:	9805      	ldr	r0, [sp, #20]
    f694:	f000 fae4 	bl	fc60 <SmpScCat128>
    f698:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
    f69a:	9905      	ldr	r1, [sp, #20]
    f69c:	9803      	ldr	r0, [sp, #12]
    f69e:	f7ff f9e7 	bl	ea70 <smpScCatInitiatorBdAddr>
    f6a2:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
    f6a4:	9905      	ldr	r1, [sp, #20]
    f6a6:	9803      	ldr	r0, [sp, #12]
    f6a8:	f7ff fa41 	bl	eb2e <smpScCatResponderBdAddr>
    f6ac:	9005      	str	r0, [sp, #20]
    *pCatBuf++ = 1;
    f6ae:	9b05      	ldr	r3, [sp, #20]
    f6b0:	1c5a      	adds	r2, r3, #1
    f6b2:	9205      	str	r2, [sp, #20]
    f6b4:	2201      	movs	r2, #1
    f6b6:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = 0;
    f6b8:	9b05      	ldr	r3, [sp, #20]
    f6ba:	1c5a      	adds	r2, r3, #1
    f6bc:	9205      	str	r2, [sp, #20]
    f6be:	2200      	movs	r2, #0
    f6c0:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
    f6c2:	9b03      	ldr	r3, [sp, #12]
    f6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f6c6:	699b      	ldr	r3, [r3, #24]
    f6c8:	f103 0010 	add.w	r0, r3, #16
    f6cc:	9b02      	ldr	r3, [sp, #8]
    f6ce:	9300      	str	r3, [sp, #0]
    f6d0:	9b03      	ldr	r3, [sp, #12]
    f6d2:	2235      	movs	r2, #53	; 0x35
    f6d4:	9906      	ldr	r1, [sp, #24]
    f6d6:	f000 f9f5 	bl	fac4 <SmpScCmac>
  }
}
    f6da:	bf00      	nop
    f6dc:	b009      	add	sp, #36	; 0x24
    f6de:	f85d fb04 	ldr.w	pc, [sp], #4
    f6e2:	bf00      	nop
    f6e4:	000281f4 	.word	0x000281f4
    f6e8:	0002969c 	.word	0x0002969c

0000f6ec <smpScActCalcF5Ltk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5Ltk(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f6ec:	b500      	push	{lr}
    f6ee:	b089      	sub	sp, #36	; 0x24
    f6f0:	9003      	str	r0, [sp, #12]
    f6f2:	9102      	str	r1, [sp, #8]
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
    f6f4:	9b02      	ldr	r3, [sp, #8]
    f6f6:	9307      	str	r3, [sp, #28]
  uint8_t *pCmacText;

  SMP_TRACE_128("MAC", pMsg->aes.pCiphertext);
    f6f8:	9b02      	ldr	r3, [sp, #8]
    f6fa:	685b      	ldr	r3, [r3, #4]
    f6fc:	2210      	movs	r2, #16
    f6fe:	4619      	mov	r1, r3
    f700:	482b      	ldr	r0, [pc, #172]	; (f7b0 <smpScActCalcF5Ltk+0xc4>)
    f702:	f000 fcb3 	bl	1006c <smpLogByteArray>

  /* Copy Mac Key from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->mac, pCmac->pCiphertext);
    f706:	9b03      	ldr	r3, [sp, #12]
    f708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f70a:	699b      	ldr	r3, [r3, #24]
    f70c:	461a      	mov	r2, r3
    f70e:	9b07      	ldr	r3, [sp, #28]
    f710:	685b      	ldr	r3, [r3, #4]
    f712:	4619      	mov	r1, r3
    f714:	4610      	mov	r0, r2
    f716:	f00b fe1c 	bl	1b352 <Calc128Cpy>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    f71a:	9a02      	ldr	r2, [sp, #8]
    f71c:	9903      	ldr	r1, [sp, #12]
    f71e:	2035      	movs	r0, #53	; 0x35
    f720:	f000 fa02 	bl	fb28 <SmpScAlloc>
    f724:	9006      	str	r0, [sp, #24]
    f726:	9b06      	ldr	r3, [sp, #24]
    f728:	2b00      	cmp	r3, #0
    f72a:	d03d      	beq.n	f7a8 <smpScActCalcF5Ltk+0xbc>
  {
    uint8_t *pCatBuf = pCmacText;
    f72c:	9b06      	ldr	r3, [sp, #24]
    f72e:	9305      	str	r3, [sp, #20]

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* ltk = AES-CMACT (Counter = 1 || keyID || N1 || N2|| A1|| A2 ||Length = 256) */
    *pCatBuf++ = 1;
    f730:	9b05      	ldr	r3, [sp, #20]
    f732:	1c5a      	adds	r2, r3, #1
    f734:	9205      	str	r2, [sp, #20]
    f736:	2201      	movs	r2, #1
    f738:	701a      	strb	r2, [r3, #0]
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
    f73a:	2204      	movs	r2, #4
    f73c:	491d      	ldr	r1, [pc, #116]	; (f7b4 <smpScActCalcF5Ltk+0xc8>)
    f73e:	9805      	ldr	r0, [sp, #20]
    f740:	f000 fa78 	bl	fc34 <SmpScCat>
    f744:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
    f746:	9b03      	ldr	r3, [sp, #12]
    f748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f74a:	695b      	ldr	r3, [r3, #20]
    f74c:	4619      	mov	r1, r3
    f74e:	9805      	ldr	r0, [sp, #20]
    f750:	f000 fa86 	bl	fc60 <SmpScCat128>
    f754:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    f756:	9b03      	ldr	r3, [sp, #12]
    f758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f75a:	695b      	ldr	r3, [r3, #20]
    f75c:	3310      	adds	r3, #16
    f75e:	4619      	mov	r1, r3
    f760:	9805      	ldr	r0, [sp, #20]
    f762:	f000 fa7d 	bl	fc60 <SmpScCat128>
    f766:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
    f768:	9905      	ldr	r1, [sp, #20]
    f76a:	9803      	ldr	r0, [sp, #12]
    f76c:	f7ff f980 	bl	ea70 <smpScCatInitiatorBdAddr>
    f770:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
    f772:	9905      	ldr	r1, [sp, #20]
    f774:	9803      	ldr	r0, [sp, #12]
    f776:	f7ff f9da 	bl	eb2e <smpScCatResponderBdAddr>
    f77a:	9005      	str	r0, [sp, #20]
    *pCatBuf++ = 1;
    f77c:	9b05      	ldr	r3, [sp, #20]
    f77e:	1c5a      	adds	r2, r3, #1
    f780:	9205      	str	r2, [sp, #20]
    f782:	2201      	movs	r2, #1
    f784:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = 0;
    f786:	9b05      	ldr	r3, [sp, #20]
    f788:	1c5a      	adds	r2, r3, #1
    f78a:	9205      	str	r2, [sp, #20]
    f78c:	2200      	movs	r2, #0
    f78e:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
    f790:	9b03      	ldr	r3, [sp, #12]
    f792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f794:	699b      	ldr	r3, [r3, #24]
    f796:	f103 0010 	add.w	r0, r3, #16
    f79a:	9b02      	ldr	r3, [sp, #8]
    f79c:	9300      	str	r3, [sp, #0]
    f79e:	9b03      	ldr	r3, [sp, #12]
    f7a0:	2235      	movs	r2, #53	; 0x35
    f7a2:	9906      	ldr	r1, [sp, #24]
    f7a4:	f000 f98e 	bl	fac4 <SmpScCmac>
  }
}
    f7a8:	bf00      	nop
    f7aa:	b009      	add	sp, #36	; 0x24
    f7ac:	f85d fb04 	ldr.w	pc, [sp], #4
    f7b0:	000281f8 	.word	0x000281f8
    f7b4:	0002969c 	.word	0x0002969c

0000f7b8 <smpScActDHKeyCalcF6Ea>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Ea(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f7b8:	b500      	push	{lr}
    f7ba:	b087      	sub	sp, #28
    f7bc:	9003      	str	r0, [sp, #12]
    f7be:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  SMP_TRACE_128("LTK", pMsg->aes.pCiphertext);
    f7c0:	9b02      	ldr	r3, [sp, #8]
    f7c2:	685b      	ldr	r3, [r3, #4]
    f7c4:	2210      	movs	r2, #16
    f7c6:	4619      	mov	r1, r3
    f7c8:	4830      	ldr	r0, [pc, #192]	; (f88c <smpScActDHKeyCalcF6Ea+0xd4>)
    f7ca:	f000 fc4f 	bl	1006c <smpLogByteArray>

  /* Copy LTK from the previous state (smpScActCalcF5Ltk) */
  WStrReverseCpy(pCcb->pScCcb->pLtk->ltk_t, pMsg->aes.pCiphertext, 16);
    f7ce:	9b03      	ldr	r3, [sp, #12]
    f7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f7d2:	699b      	ldr	r3, [r3, #24]
    f7d4:	f103 0010 	add.w	r0, r3, #16
    f7d8:	9b02      	ldr	r3, [sp, #8]
    f7da:	685b      	ldr	r3, [r3, #4]
    f7dc:	2210      	movs	r2, #16
    f7de:	4619      	mov	r1, r3
    f7e0:	f00b fdef 	bl	1b3c2 <WStrReverseCpy>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    f7e4:	9a02      	ldr	r2, [sp, #8]
    f7e6:	9903      	ldr	r1, [sp, #12]
    f7e8:	2041      	movs	r0, #65	; 0x41
    f7ea:	f000 f99d 	bl	fb28 <SmpScAlloc>
    f7ee:	9005      	str	r0, [sp, #20]
    f7f0:	9b05      	ldr	r3, [sp, #20]
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	d045      	beq.n	f882 <smpScActDHKeyCalcF6Ea+0xca>
  {
    uint8_t *pCatBuf = pCmacText;
    f7f6:	9b05      	ldr	r3, [sp, #20]
    f7f8:	9304      	str	r3, [sp, #16]

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
    f7fa:	9b03      	ldr	r3, [sp, #12]
    f7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f7fe:	695b      	ldr	r3, [r3, #20]
    f800:	4619      	mov	r1, r3
    f802:	9804      	ldr	r0, [sp, #16]
    f804:	f000 fa2c 	bl	fc60 <SmpScCat128>
    f808:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    f80a:	9b03      	ldr	r3, [sp, #12]
    f80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f80e:	695b      	ldr	r3, [r3, #20]
    f810:	3310      	adds	r3, #16
    f812:	4619      	mov	r1, r3
    f814:	9804      	ldr	r0, [sp, #16]
    f816:	f000 fa23 	bl	fc60 <SmpScCat128>
    f81a:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Rb);
    f81c:	9b03      	ldr	r3, [sp, #12]
    f81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f820:	695b      	ldr	r3, [r3, #20]
    f822:	3330      	adds	r3, #48	; 0x30
    f824:	4619      	mov	r1, r3
    f826:	9804      	ldr	r0, [sp, #16]
    f828:	f000 fa1a 	bl	fc60 <SmpScCat128>
    f82c:	9004      	str	r0, [sp, #16]

    *pCatBuf++ = pCcb->pairReq[SMP_AUTHREQ_POS]; /* AuthReq */
    f82e:	9b04      	ldr	r3, [sp, #16]
    f830:	1c5a      	adds	r2, r3, #1
    f832:	9204      	str	r2, [sp, #16]
    f834:	9a03      	ldr	r2, [sp, #12]
    f836:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
    f83a:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_OOB_POS]; /* OOB Data Flag */
    f83c:	9b04      	ldr	r3, [sp, #16]
    f83e:	1c5a      	adds	r2, r3, #1
    f840:	9204      	str	r2, [sp, #16]
    f842:	9a03      	ldr	r2, [sp, #12]
    f844:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
    f848:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_IO_POS]; /* IO Capability Parameter */
    f84a:	9b04      	ldr	r3, [sp, #16]
    f84c:	1c5a      	adds	r2, r3, #1
    f84e:	9204      	str	r2, [sp, #16]
    f850:	9a03      	ldr	r2, [sp, #12]
    f852:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
    f856:	701a      	strb	r2, [r3, #0]

    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
    f858:	9904      	ldr	r1, [sp, #16]
    f85a:	9803      	ldr	r0, [sp, #12]
    f85c:	f7ff f908 	bl	ea70 <smpScCatInitiatorBdAddr>
    f860:	9004      	str	r0, [sp, #16]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
    f862:	9904      	ldr	r1, [sp, #16]
    f864:	9803      	ldr	r0, [sp, #12]
    f866:	f7ff f962 	bl	eb2e <smpScCatResponderBdAddr>
    f86a:	9004      	str	r0, [sp, #16]

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
    f86c:	9b03      	ldr	r3, [sp, #12]
    f86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f870:	699b      	ldr	r3, [r3, #24]
    f872:	4618      	mov	r0, r3
    f874:	9b02      	ldr	r3, [sp, #8]
    f876:	9300      	str	r3, [sp, #0]
    f878:	9b03      	ldr	r3, [sp, #12]
    f87a:	2241      	movs	r2, #65	; 0x41
    f87c:	9905      	ldr	r1, [sp, #20]
    f87e:	f000 f921 	bl	fac4 <SmpScCmac>
  }
}
    f882:	bf00      	nop
    f884:	b007      	add	sp, #28
    f886:	f85d fb04 	ldr.w	pc, [sp], #4
    f88a:	bf00      	nop
    f88c:	000281fc 	.word	0x000281fc

0000f890 <smpScActDHKeyCalcF6Eb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Eb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    f890:	b500      	push	{lr}
    f892:	b087      	sub	sp, #28
    f894:	9003      	str	r0, [sp, #12]
    f896:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
    f898:	9b02      	ldr	r3, [sp, #8]
    f89a:	685b      	ldr	r3, [r3, #4]
    f89c:	2210      	movs	r2, #16
    f89e:	4619      	mov	r1, r3
    f8a0:	482f      	ldr	r0, [pc, #188]	; (f960 <smpScActDHKeyCalcF6Eb+0xd0>)
    f8a2:	f000 fbe3 	bl	1006c <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    f8a6:	9a02      	ldr	r2, [sp, #8]
    f8a8:	9903      	ldr	r1, [sp, #12]
    f8aa:	2041      	movs	r0, #65	; 0x41
    f8ac:	f000 f93c 	bl	fb28 <SmpScAlloc>
    f8b0:	9005      	str	r0, [sp, #20]
    f8b2:	9b05      	ldr	r3, [sp, #20]
    f8b4:	2b00      	cmp	r3, #0
    f8b6:	d045      	beq.n	f944 <smpScActDHKeyCalcF6Eb+0xb4>
  {
    uint8_t *pCatBuf = pCmacText;
    f8b8:	9b05      	ldr	r3, [sp, #20]
    f8ba:	9304      	str	r3, [sp, #16]

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    f8bc:	9b03      	ldr	r3, [sp, #12]
    f8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f8c0:	695b      	ldr	r3, [r3, #20]
    f8c2:	3310      	adds	r3, #16
    f8c4:	4619      	mov	r1, r3
    f8c6:	9804      	ldr	r0, [sp, #16]
    f8c8:	f000 f9ca 	bl	fc60 <SmpScCat128>
    f8cc:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
    f8ce:	9b03      	ldr	r3, [sp, #12]
    f8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f8d2:	695b      	ldr	r3, [r3, #20]
    f8d4:	4619      	mov	r1, r3
    f8d6:	9804      	ldr	r0, [sp, #16]
    f8d8:	f000 f9c2 	bl	fc60 <SmpScCat128>
    f8dc:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Ra);
    f8de:	9b03      	ldr	r3, [sp, #12]
    f8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f8e2:	695b      	ldr	r3, [r3, #20]
    f8e4:	3320      	adds	r3, #32
    f8e6:	4619      	mov	r1, r3
    f8e8:	9804      	ldr	r0, [sp, #16]
    f8ea:	f000 f9b9 	bl	fc60 <SmpScCat128>
    f8ee:	9004      	str	r0, [sp, #16]

    *pCatBuf++ = pCcb->pairRsp[SMP_AUTHREQ_POS]; /* AuthReq */
    f8f0:	9b04      	ldr	r3, [sp, #16]
    f8f2:	1c5a      	adds	r2, r3, #1
    f8f4:	9204      	str	r2, [sp, #16]
    f8f6:	9a03      	ldr	r2, [sp, #12]
    f8f8:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    f8fc:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_OOB_POS]; /* OOB Data Flag */
    f8fe:	9b04      	ldr	r3, [sp, #16]
    f900:	1c5a      	adds	r2, r3, #1
    f902:	9204      	str	r2, [sp, #16]
    f904:	9a03      	ldr	r2, [sp, #12]
    f906:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
    f90a:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_IO_POS]; /* IO Capability Parameter */
    f90c:	9b04      	ldr	r3, [sp, #16]
    f90e:	1c5a      	adds	r2, r3, #1
    f910:	9204      	str	r2, [sp, #16]
    f912:	9a03      	ldr	r2, [sp, #12]
    f914:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
    f918:	701a      	strb	r2, [r3, #0]

    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
    f91a:	9904      	ldr	r1, [sp, #16]
    f91c:	9803      	ldr	r0, [sp, #12]
    f91e:	f7ff f906 	bl	eb2e <smpScCatResponderBdAddr>
    f922:	9004      	str	r0, [sp, #16]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
    f924:	9904      	ldr	r1, [sp, #16]
    f926:	9803      	ldr	r0, [sp, #12]
    f928:	f7ff f8a2 	bl	ea70 <smpScCatInitiatorBdAddr>
    f92c:	9004      	str	r0, [sp, #16]

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
    f92e:	9b03      	ldr	r3, [sp, #12]
    f930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f932:	699b      	ldr	r3, [r3, #24]
    f934:	4618      	mov	r0, r3
    f936:	9b02      	ldr	r3, [sp, #8]
    f938:	9300      	str	r3, [sp, #0]
    f93a:	9b03      	ldr	r3, [sp, #12]
    f93c:	2241      	movs	r2, #65	; 0x41
    f93e:	9905      	ldr	r1, [sp, #20]
    f940:	f000 f8c0 	bl	fac4 <SmpScCmac>
  }

  /* Copy Ea from the previous state (smpScActDHKeyCalcF6Ea) */
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
    f944:	9b03      	ldr	r3, [sp, #12]
    f946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f948:	695b      	ldr	r3, [r3, #20]
    f94a:	461a      	mov	r2, r3
    f94c:	9b02      	ldr	r3, [sp, #8]
    f94e:	685b      	ldr	r3, [r3, #4]
    f950:	4619      	mov	r1, r3
    f952:	4610      	mov	r0, r2
    f954:	f00b fcfd 	bl	1b352 <Calc128Cpy>
}
    f958:	bf00      	nop
    f95a:	b007      	add	sp, #28
    f95c:	f85d fb04 	ldr.w	pc, [sp], #4
    f960:	00028200 	.word	0x00028200

0000f964 <SmpScAllocScratchBuffers>:
 *
 *  \return TRUE if success, else FALSE.
 */
/*************************************************************************************************/
bool_t SmpScAllocScratchBuffers(smpCcb_t *pCcb)
{
    f964:	b510      	push	{r4, lr}
    f966:	b082      	sub	sp, #8
    f968:	9001      	str	r0, [sp, #4]
  if (pCcb->pScCcb->pScratch == NULL)
    f96a:	9b01      	ldr	r3, [sp, #4]
    f96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f96e:	695b      	ldr	r3, [r3, #20]
    f970:	2b00      	cmp	r3, #0
    f972:	d106      	bne.n	f982 <SmpScAllocScratchBuffers+0x1e>
  {
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
    f974:	9b01      	ldr	r3, [sp, #4]
    f976:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    f978:	2060      	movs	r0, #96	; 0x60
    f97a:	f008 fcdf 	bl	1833c <WsfBufAlloc>
    f97e:	4603      	mov	r3, r0
    f980:	6163      	str	r3, [r4, #20]
  }

  if (pCcb->pScCcb->pPeerPublicKey == NULL)
    f982:	9b01      	ldr	r3, [sp, #4]
    f984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f986:	689b      	ldr	r3, [r3, #8]
    f988:	2b00      	cmp	r3, #0
    f98a:	d106      	bne.n	f99a <SmpScAllocScratchBuffers+0x36>
  {
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
    f98c:	9b01      	ldr	r3, [sp, #4]
    f98e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    f990:	2040      	movs	r0, #64	; 0x40
    f992:	f008 fcd3 	bl	1833c <WsfBufAlloc>
    f996:	4603      	mov	r3, r0
    f998:	60a3      	str	r3, [r4, #8]
  }

  if (pCcb->pScCcb->pLtk == NULL)
    f99a:	9b01      	ldr	r3, [sp, #4]
    f99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f99e:	699b      	ldr	r3, [r3, #24]
    f9a0:	2b00      	cmp	r3, #0
    f9a2:	d106      	bne.n	f9b2 <SmpScAllocScratchBuffers+0x4e>
  {
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
    f9a4:	9b01      	ldr	r3, [sp, #4]
    f9a6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    f9a8:	2020      	movs	r0, #32
    f9aa:	f008 fcc7 	bl	1833c <WsfBufAlloc>
    f9ae:	4603      	mov	r3, r0
    f9b0:	61a3      	str	r3, [r4, #24]
  }

  if (pCcb->pScCcb->pLocalPublicKey == NULL)
    f9b2:	9b01      	ldr	r3, [sp, #4]
    f9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f9b6:	68db      	ldr	r3, [r3, #12]
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d106      	bne.n	f9ca <SmpScAllocScratchBuffers+0x66>
  {
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
    f9bc:	9b01      	ldr	r3, [sp, #4]
    f9be:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    f9c0:	2040      	movs	r0, #64	; 0x40
    f9c2:	f008 fcbb 	bl	1833c <WsfBufAlloc>
    f9c6:	4603      	mov	r3, r0
    f9c8:	60e3      	str	r3, [r4, #12]
  }

  if (pCcb->pScCcb->pPrivateKey == NULL)
    f9ca:	9b01      	ldr	r3, [sp, #4]
    f9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f9ce:	691b      	ldr	r3, [r3, #16]
    f9d0:	2b00      	cmp	r3, #0
    f9d2:	d106      	bne.n	f9e2 <SmpScAllocScratchBuffers+0x7e>
  {
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
    f9d4:	9b01      	ldr	r3, [sp, #4]
    f9d6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    f9d8:	2020      	movs	r0, #32
    f9da:	f008 fcaf 	bl	1833c <WsfBufAlloc>
    f9de:	4603      	mov	r3, r0
    f9e0:	6123      	str	r3, [r4, #16]
  }

  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
    f9e2:	9b01      	ldr	r3, [sp, #4]
    f9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f9e6:	695b      	ldr	r3, [r3, #20]
    f9e8:	2b00      	cmp	r3, #0
    f9ea:	d015      	beq.n	fa18 <SmpScAllocScratchBuffers+0xb4>
    f9ec:	9b01      	ldr	r3, [sp, #4]
    f9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f9f0:	689b      	ldr	r3, [r3, #8]
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	d010      	beq.n	fa18 <SmpScAllocScratchBuffers+0xb4>
    f9f6:	9b01      	ldr	r3, [sp, #4]
    f9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f9fa:	699b      	ldr	r3, [r3, #24]
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	d00b      	beq.n	fa18 <SmpScAllocScratchBuffers+0xb4>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
    fa00:	9b01      	ldr	r3, [sp, #4]
    fa02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa04:	68db      	ldr	r3, [r3, #12]
  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
    fa06:	2b00      	cmp	r3, #0
    fa08:	d006      	beq.n	fa18 <SmpScAllocScratchBuffers+0xb4>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
    fa0a:	9b01      	ldr	r3, [sp, #4]
    fa0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa0e:	691b      	ldr	r3, [r3, #16]
    fa10:	2b00      	cmp	r3, #0
    fa12:	d001      	beq.n	fa18 <SmpScAllocScratchBuffers+0xb4>
  {
    return TRUE;
    fa14:	2301      	movs	r3, #1
    fa16:	e000      	b.n	fa1a <SmpScAllocScratchBuffers+0xb6>
  }

  return FALSE;
    fa18:	2300      	movs	r3, #0
}
    fa1a:	4618      	mov	r0, r3
    fa1c:	b002      	add	sp, #8
    fa1e:	bd10      	pop	{r4, pc}

0000fa20 <SmpScFreeScratchBuffers>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScFreeScratchBuffers(smpCcb_t *pCcb)
{
    fa20:	b500      	push	{lr}
    fa22:	b083      	sub	sp, #12
    fa24:	9001      	str	r0, [sp, #4]
  /* free scratch buffer */
  if (pCcb->pScCcb->pScratch != NULL)
    fa26:	9b01      	ldr	r3, [sp, #4]
    fa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa2a:	695b      	ldr	r3, [r3, #20]
    fa2c:	2b00      	cmp	r3, #0
    fa2e:	d009      	beq.n	fa44 <SmpScFreeScratchBuffers+0x24>
  {
    WsfBufFree(pCcb->pScCcb->pScratch);
    fa30:	9b01      	ldr	r3, [sp, #4]
    fa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa34:	695b      	ldr	r3, [r3, #20]
    fa36:	4618      	mov	r0, r3
    fa38:	f008 fcc6 	bl	183c8 <WsfBufFree>
    pCcb->pScCcb->pScratch = NULL;
    fa3c:	9b01      	ldr	r3, [sp, #4]
    fa3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa40:	2200      	movs	r2, #0
    fa42:	615a      	str	r2, [r3, #20]
  }

  /* free scratch peer public key buffer */
  if (pCcb->pScCcb->pPeerPublicKey != NULL)
    fa44:	9b01      	ldr	r3, [sp, #4]
    fa46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa48:	689b      	ldr	r3, [r3, #8]
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d009      	beq.n	fa62 <SmpScFreeScratchBuffers+0x42>
  {
    WsfBufFree(pCcb->pScCcb->pPeerPublicKey);
    fa4e:	9b01      	ldr	r3, [sp, #4]
    fa50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa52:	689b      	ldr	r3, [r3, #8]
    fa54:	4618      	mov	r0, r3
    fa56:	f008 fcb7 	bl	183c8 <WsfBufFree>
    pCcb->pScCcb->pPeerPublicKey = NULL;
    fa5a:	9b01      	ldr	r3, [sp, #4]
    fa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa5e:	2200      	movs	r2, #0
    fa60:	609a      	str	r2, [r3, #8]
  }

  /* free scratch LTK buffer */
  if (pCcb->pScCcb->pLtk != NULL)
    fa62:	9b01      	ldr	r3, [sp, #4]
    fa64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa66:	699b      	ldr	r3, [r3, #24]
    fa68:	2b00      	cmp	r3, #0
    fa6a:	d009      	beq.n	fa80 <SmpScFreeScratchBuffers+0x60>
  {
    WsfBufFree(pCcb->pScCcb->pLtk);
    fa6c:	9b01      	ldr	r3, [sp, #4]
    fa6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa70:	699b      	ldr	r3, [r3, #24]
    fa72:	4618      	mov	r0, r3
    fa74:	f008 fca8 	bl	183c8 <WsfBufFree>
    pCcb->pScCcb->pLtk = NULL;
    fa78:	9b01      	ldr	r3, [sp, #4]
    fa7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa7c:	2200      	movs	r2, #0
    fa7e:	619a      	str	r2, [r3, #24]
  }

  /* free scratch local public key buffer */
  if (pCcb->pScCcb->pLocalPublicKey != NULL)
    fa80:	9b01      	ldr	r3, [sp, #4]
    fa82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa84:	68db      	ldr	r3, [r3, #12]
    fa86:	2b00      	cmp	r3, #0
    fa88:	d009      	beq.n	fa9e <SmpScFreeScratchBuffers+0x7e>
  {
    WsfBufFree(pCcb->pScCcb->pLocalPublicKey);
    fa8a:	9b01      	ldr	r3, [sp, #4]
    fa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa8e:	68db      	ldr	r3, [r3, #12]
    fa90:	4618      	mov	r0, r3
    fa92:	f008 fc99 	bl	183c8 <WsfBufFree>
    pCcb->pScCcb->pLocalPublicKey = NULL;
    fa96:	9b01      	ldr	r3, [sp, #4]
    fa98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa9a:	2200      	movs	r2, #0
    fa9c:	60da      	str	r2, [r3, #12]
  }

  /* free scratch private key buffer */
  if (pCcb->pScCcb->pPrivateKey != NULL)
    fa9e:	9b01      	ldr	r3, [sp, #4]
    faa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    faa2:	691b      	ldr	r3, [r3, #16]
    faa4:	2b00      	cmp	r3, #0
    faa6:	d009      	beq.n	fabc <SmpScFreeScratchBuffers+0x9c>
  {
    WsfBufFree(pCcb->pScCcb->pPrivateKey);
    faa8:	9b01      	ldr	r3, [sp, #4]
    faaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    faac:	691b      	ldr	r3, [r3, #16]
    faae:	4618      	mov	r0, r3
    fab0:	f008 fc8a 	bl	183c8 <WsfBufFree>
    pCcb->pScCcb->pPrivateKey = NULL;
    fab4:	9b01      	ldr	r3, [sp, #4]
    fab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fab8:	2200      	movs	r2, #0
    faba:	611a      	str	r2, [r3, #16]
  }
}
    fabc:	bf00      	nop
    fabe:	b003      	add	sp, #12
    fac0:	f85d fb04 	ldr.w	pc, [sp], #4

0000fac4 <SmpScCmac>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCmac(const uint8_t *pKey, uint8_t *pText, uint8_t textLen, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    fac4:	b500      	push	{lr}
    fac6:	b087      	sub	sp, #28
    fac8:	9005      	str	r0, [sp, #20]
    faca:	9104      	str	r1, [sp, #16]
    facc:	9302      	str	r3, [sp, #8]
    face:	4613      	mov	r3, r2
    fad0:	f88d 300f 	strb.w	r3, [sp, #15]
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
    fad4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fad8:	b299      	uxth	r1, r3
    fada:	4b12      	ldr	r3, [pc, #72]	; (fb24 <SmpScCmac+0x60>)
    fadc:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    fae0:	9b02      	ldr	r3, [sp, #8]
    fae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    fae6:	b29b      	uxth	r3, r3
    fae8:	221c      	movs	r2, #28
    faea:	9201      	str	r2, [sp, #4]
    faec:	9300      	str	r3, [sp, #0]
    faee:	4603      	mov	r3, r0
    faf0:	460a      	mov	r2, r1
    faf2:	9904      	ldr	r1, [sp, #16]
    faf4:	9805      	ldr	r0, [sp, #20]
    faf6:	f003 faa1 	bl	1303c <SecCmac>
    fafa:	4603      	mov	r3, r0
    fafc:	2b00      	cmp	r3, #0
    fafe:	d10c      	bne.n	fb1a <SmpScCmac+0x56>
  {
    WsfBufFree(pText);
    fb00:	9804      	ldr	r0, [sp, #16]
    fb02:	f008 fc61 	bl	183c8 <WsfBufFree>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    fb06:	9b08      	ldr	r3, [sp, #32]
    fb08:	2208      	movs	r2, #8
    fb0a:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    fb0c:	9b08      	ldr	r3, [sp, #32]
    fb0e:	2203      	movs	r2, #3
    fb10:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
    fb12:	9908      	ldr	r1, [sp, #32]
    fb14:	9802      	ldr	r0, [sp, #8]
    fb16:	f7fd ffa5 	bl	da64 <smpSmExecute>
  }
}
    fb1a:	bf00      	nop
    fb1c:	b007      	add	sp, #28
    fb1e:	f85d fb04 	ldr.w	pc, [sp], #4
    fb22:	bf00      	nop
    fb24:	10008824 	.word	0x10008824

0000fb28 <SmpScAlloc>:
 *
 *  \return Allocated buffer.
 */
/*************************************************************************************************/
uint8_t *SmpScAlloc(uint8_t size, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    fb28:	b500      	push	{lr}
    fb2a:	b087      	sub	sp, #28
    fb2c:	4603      	mov	r3, r0
    fb2e:	9102      	str	r1, [sp, #8]
    fb30:	9201      	str	r2, [sp, #4]
    fb32:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t *pBuf = WsfBufAlloc(size);
    fb36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fb3a:	b29b      	uxth	r3, r3
    fb3c:	4618      	mov	r0, r3
    fb3e:	f008 fbfd 	bl	1833c <WsfBufAlloc>
    fb42:	9005      	str	r0, [sp, #20]

  if (pBuf == NULL)
    fb44:	9b05      	ldr	r3, [sp, #20]
    fb46:	2b00      	cmp	r3, #0
    fb48:	d109      	bne.n	fb5e <SmpScAlloc+0x36>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    fb4a:	9b01      	ldr	r3, [sp, #4]
    fb4c:	2208      	movs	r2, #8
    fb4e:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    fb50:	9b01      	ldr	r3, [sp, #4]
    fb52:	2203      	movs	r2, #3
    fb54:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
    fb56:	9901      	ldr	r1, [sp, #4]
    fb58:	9802      	ldr	r0, [sp, #8]
    fb5a:	f7fd ff83 	bl	da64 <smpSmExecute>
  }

  return pBuf;
    fb5e:	9b05      	ldr	r3, [sp, #20]
}
    fb60:	4618      	mov	r0, r3
    fb62:	b007      	add	sp, #28
    fb64:	f85d fb04 	ldr.w	pc, [sp], #4

0000fb68 <SmpScCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pU, uint8_t *pV, uint8_t z, uint8_t *pX)
{
    fb68:	b500      	push	{lr}
    fb6a:	b089      	sub	sp, #36	; 0x24
    fb6c:	9005      	str	r0, [sp, #20]
    fb6e:	9104      	str	r1, [sp, #16]
    fb70:	9203      	str	r2, [sp, #12]
    fb72:	9302      	str	r3, [sp, #8]
  uint8_t *pCmacText;

  /* f4(pU, pV, pX, z) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if ((pCmacText = SmpScAlloc(SMP_F4_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    fb74:	9a04      	ldr	r2, [sp, #16]
    fb76:	9905      	ldr	r1, [sp, #20]
    fb78:	2041      	movs	r0, #65	; 0x41
    fb7a:	f7ff ffd5 	bl	fb28 <SmpScAlloc>
    fb7e:	9007      	str	r0, [sp, #28]
    fb80:	9b07      	ldr	r3, [sp, #28]
    fb82:	2b00      	cmp	r3, #0
    fb84:	d019      	beq.n	fbba <SmpScCalcF4+0x52>
  {
    uint8_t *pCatBuf = pCmacText;
    fb86:	9b07      	ldr	r3, [sp, #28]
    fb88:	9306      	str	r3, [sp, #24]

    /* Concatinate pU, pV, z */
    pCatBuf = SmpScCat(pCatBuf, pU, SMP_PUB_KEY_LEN);
    fb8a:	2220      	movs	r2, #32
    fb8c:	9903      	ldr	r1, [sp, #12]
    fb8e:	9806      	ldr	r0, [sp, #24]
    fb90:	f000 f850 	bl	fc34 <SmpScCat>
    fb94:	9006      	str	r0, [sp, #24]
    pCatBuf = SmpScCat(pCatBuf, pV, SMP_PUB_KEY_LEN);
    fb96:	2220      	movs	r2, #32
    fb98:	9902      	ldr	r1, [sp, #8]
    fb9a:	9806      	ldr	r0, [sp, #24]
    fb9c:	f000 f84a 	bl	fc34 <SmpScCat>
    fba0:	9006      	str	r0, [sp, #24]
    *pCatBuf = z;
    fba2:	9b06      	ldr	r3, [sp, #24]
    fba4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    fba8:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with Nb as the key */
    SmpScCmac(pX, pCmacText, SMP_F4_TEXT_LEN, pCcb, pMsg);
    fbaa:	9b04      	ldr	r3, [sp, #16]
    fbac:	9300      	str	r3, [sp, #0]
    fbae:	9b05      	ldr	r3, [sp, #20]
    fbb0:	2241      	movs	r2, #65	; 0x41
    fbb2:	9907      	ldr	r1, [sp, #28]
    fbb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fbb6:	f7ff ff85 	bl	fac4 <SmpScCmac>
  }
}
    fbba:	bf00      	nop
    fbbc:	b009      	add	sp, #36	; 0x24
    fbbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000fbc4 <SmpScInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScInit()
{
    fbc4:	b082      	sub	sp, #8
  uint8_t i;

  for (i=0; i<DM_CONN_MAX; i++)
    fbc6:	2300      	movs	r3, #0
    fbc8:	f88d 3007 	strb.w	r3, [sp, #7]
    fbcc:	e016      	b.n	fbfc <SmpScInit+0x38>
  {
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
    fbce:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fbd2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    fbd6:	460b      	mov	r3, r1
    fbd8:	00db      	lsls	r3, r3, #3
    fbda:	1a5b      	subs	r3, r3, r1
    fbdc:	009b      	lsls	r3, r3, #2
    fbde:	4911      	ldr	r1, [pc, #68]	; (fc24 <SmpScInit+0x60>)
    fbe0:	4419      	add	r1, r3
    fbe2:	4811      	ldr	r0, [pc, #68]	; (fc28 <SmpScInit+0x64>)
    fbe4:	4613      	mov	r3, r2
    fbe6:	00db      	lsls	r3, r3, #3
    fbe8:	4413      	add	r3, r2
    fbea:	00db      	lsls	r3, r3, #3
    fbec:	4403      	add	r3, r0
    fbee:	3344      	adds	r3, #68	; 0x44
    fbf0:	6019      	str	r1, [r3, #0]
  for (i=0; i<DM_CONN_MAX; i++)
    fbf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fbf6:	3301      	adds	r3, #1
    fbf8:	f88d 3007 	strb.w	r3, [sp, #7]
    fbfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc00:	2b02      	cmp	r3, #2
    fc02:	d9e4      	bls.n	fbce <SmpScInit+0xa>
  }

  smpCb.procPairing = smpScProcPairing;
    fc04:	4b08      	ldr	r3, [pc, #32]	; (fc28 <SmpScInit+0x64>)
    fc06:	4a09      	ldr	r2, [pc, #36]	; (fc2c <SmpScInit+0x68>)
    fc08:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  smpCb.procAuthReq = smpScAuthReq;
    fc0c:	4b06      	ldr	r3, [pc, #24]	; (fc28 <SmpScInit+0x64>)
    fc0e:	4a08      	ldr	r2, [pc, #32]	; (fc30 <SmpScInit+0x6c>)
    fc10:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  smpCb.lescSupported = TRUE;
    fc14:	4b04      	ldr	r3, [pc, #16]	; (fc28 <SmpScInit+0x64>)
    fc16:	2201      	movs	r2, #1
    fc18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
    fc1c:	bf00      	nop
    fc1e:	b002      	add	sp, #8
    fc20:	4770      	bx	lr
    fc22:	bf00      	nop
    fc24:	10008914 	.word	0x10008914
    fc28:	10008824 	.word	0x10008824
    fc2c:	0000ebed 	.word	0x0000ebed
    fc30:	0000f029 	.word	0x0000f029

0000fc34 <SmpScCat>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat(uint8_t *pDst, const uint8_t *pSrc, uint8_t len)
{
    fc34:	b500      	push	{lr}
    fc36:	b085      	sub	sp, #20
    fc38:	9003      	str	r0, [sp, #12]
    fc3a:	9102      	str	r1, [sp, #8]
    fc3c:	4613      	mov	r3, r2
    fc3e:	f88d 3007 	strb.w	r3, [sp, #7]
  memcpy(pDst, pSrc, len);
    fc42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc46:	461a      	mov	r2, r3
    fc48:	9902      	ldr	r1, [sp, #8]
    fc4a:	9803      	ldr	r0, [sp, #12]
    fc4c:	f7fc fa88 	bl	c160 <memcpy>
  return pDst + len;
    fc50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc54:	9a03      	ldr	r2, [sp, #12]
    fc56:	4413      	add	r3, r2
}
    fc58:	4618      	mov	r0, r3
    fc5a:	b005      	add	sp, #20
    fc5c:	f85d fb04 	ldr.w	pc, [sp], #4

0000fc60 <SmpScCat128>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat128(uint8_t *pDst, uint8_t *pSrc)
{
    fc60:	b500      	push	{lr}
    fc62:	b083      	sub	sp, #12
    fc64:	9001      	str	r0, [sp, #4]
    fc66:	9100      	str	r1, [sp, #0]
  Calc128Cpy(pDst, pSrc);
    fc68:	9900      	ldr	r1, [sp, #0]
    fc6a:	9801      	ldr	r0, [sp, #4]
    fc6c:	f00b fb71 	bl	1b352 <Calc128Cpy>
  return pDst + 16;
    fc70:	9b01      	ldr	r3, [sp, #4]
    fc72:	3310      	adds	r3, #16
}
    fc74:	4618      	mov	r0, r3
    fc76:	b003      	add	sp, #12
    fc78:	f85d fb04 	ldr.w	pc, [sp], #4

0000fc7c <smpScSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    fc7c:	b500      	push	{lr}
    fc7e:	b085      	sub	sp, #20
    fc80:	9001      	str	r0, [sp, #4]
    fc82:	9100      	str	r1, [sp, #0]
  /* Transmit the public key */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    fc84:	9b01      	ldr	r3, [sp, #4]
    fc86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    fc8a:	2201      	movs	r2, #1
    fc8c:	2101      	movs	r1, #1
    fc8e:	4618      	mov	r0, r3
    fc90:	f001 fddc 	bl	1184c <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    fc94:	9801      	ldr	r0, [sp, #4]
    fc96:	f7fd f9a3 	bl	cfe0 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PUB_KEY_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
    fc9a:	2049      	movs	r0, #73	; 0x49
    fc9c:	f7fe fda7 	bl	e7ee <smpMsgAlloc>
    fca0:	9003      	str	r0, [sp, #12]
    fca2:	9b03      	ldr	r3, [sp, #12]
    fca4:	2b00      	cmp	r3, #0
    fca6:	d01f      	beq.n	fce8 <smpScSendPubKey+0x6c>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    fca8:	9b03      	ldr	r3, [sp, #12]
    fcaa:	3308      	adds	r3, #8
    fcac:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PUBLIC_KEY);
    fcae:	9b02      	ldr	r3, [sp, #8]
    fcb0:	1c5a      	adds	r2, r3, #1
    fcb2:	9202      	str	r2, [sp, #8]
    fcb4:	220c      	movs	r2, #12
    fcb6:	701a      	strb	r2, [r3, #0]

    /* Store Public Key X data in LSB first format */
    WStrReverseCpy(p,  pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    fcb8:	9b01      	ldr	r3, [sp, #4]
    fcba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fcbc:	68db      	ldr	r3, [r3, #12]
    fcbe:	2220      	movs	r2, #32
    fcc0:	4619      	mov	r1, r3
    fcc2:	9802      	ldr	r0, [sp, #8]
    fcc4:	f00b fb7d 	bl	1b3c2 <WStrReverseCpy>

    /* Store Public Key Y data in LSB first format */
    WStrReverseCpy(p+SMP_PUB_KEY_LEN, pCcb->pScCcb->pLocalPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
    fcc8:	9b02      	ldr	r3, [sp, #8]
    fcca:	f103 0020 	add.w	r0, r3, #32
    fcce:	9b01      	ldr	r3, [sp, #4]
    fcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fcd2:	68db      	ldr	r3, [r3, #12]
    fcd4:	3320      	adds	r3, #32
    fcd6:	2220      	movs	r2, #32
    fcd8:	4619      	mov	r1, r3
    fcda:	f00b fb72 	bl	1b3c2 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    fcde:	9903      	ldr	r1, [sp, #12]
    fce0:	9801      	ldr	r0, [sp, #4]
    fce2:	f7fe fd43 	bl	e76c <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    fce6:	e009      	b.n	fcfc <smpScSendPubKey+0x80>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    fce8:	9b00      	ldr	r3, [sp, #0]
    fcea:	2208      	movs	r2, #8
    fcec:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    fcee:	9b00      	ldr	r3, [sp, #0]
    fcf0:	2203      	movs	r2, #3
    fcf2:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
    fcf4:	9900      	ldr	r1, [sp, #0]
    fcf6:	9801      	ldr	r0, [sp, #4]
    fcf8:	f7fd feb4 	bl	da64 <smpSmExecute>
}
    fcfc:	bf00      	nop
    fcfe:	b005      	add	sp, #20
    fd00:	f85d fb04 	ldr.w	pc, [sp], #4

0000fd04 <smpScSendDHKeyCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendDHKeyCheck(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCheck)
{
    fd04:	b500      	push	{lr}
    fd06:	b087      	sub	sp, #28
    fd08:	9003      	str	r0, [sp, #12]
    fd0a:	9102      	str	r1, [sp, #8]
    fd0c:	9201      	str	r2, [sp, #4]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    fd0e:	9b03      	ldr	r3, [sp, #12]
    fd10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    fd14:	2201      	movs	r2, #1
    fd16:	2101      	movs	r1, #1
    fd18:	4618      	mov	r0, r3
    fd1a:	f001 fd97 	bl	1184c <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    fd1e:	9803      	ldr	r0, [sp, #12]
    fd20:	f7fd f95e 	bl	cfe0 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_DHKEY_CHECK_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
    fd24:	2019      	movs	r0, #25
    fd26:	f7fe fd62 	bl	e7ee <smpMsgAlloc>
    fd2a:	9005      	str	r0, [sp, #20]
    fd2c:	9b05      	ldr	r3, [sp, #20]
    fd2e:	2b00      	cmp	r3, #0
    fd30:	d011      	beq.n	fd56 <smpScSendDHKeyCheck+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    fd32:	9b05      	ldr	r3, [sp, #20]
    fd34:	3308      	adds	r3, #8
    fd36:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_DHKEY_CHECK);
    fd38:	9b04      	ldr	r3, [sp, #16]
    fd3a:	1c5a      	adds	r2, r3, #1
    fd3c:	9204      	str	r2, [sp, #16]
    fd3e:	220d      	movs	r2, #13
    fd40:	701a      	strb	r2, [r3, #0]

    /* DH Key Check data is result of last CMAC operation (LSB first) */
    WStrReverseCpy(p, pCheck, SMP_DHKEY_CHECK_LEN);
    fd42:	2210      	movs	r2, #16
    fd44:	9901      	ldr	r1, [sp, #4]
    fd46:	9804      	ldr	r0, [sp, #16]
    fd48:	f00b fb3b 	bl	1b3c2 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    fd4c:	9905      	ldr	r1, [sp, #20]
    fd4e:	9803      	ldr	r0, [sp, #12]
    fd50:	f7fe fd0c 	bl	e76c <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    fd54:	e009      	b.n	fd6a <smpScSendDHKeyCheck+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    fd56:	9b02      	ldr	r3, [sp, #8]
    fd58:	2208      	movs	r2, #8
    fd5a:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    fd5c:	9b02      	ldr	r3, [sp, #8]
    fd5e:	2203      	movs	r2, #3
    fd60:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
    fd62:	9902      	ldr	r1, [sp, #8]
    fd64:	9803      	ldr	r0, [sp, #12]
    fd66:	f7fd fe7d 	bl	da64 <smpSmExecute>
}
    fd6a:	bf00      	nop
    fd6c:	b007      	add	sp, #28
    fd6e:	f85d fb04 	ldr.w	pc, [sp], #4

0000fd72 <smpScSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pRand)
{
    fd72:	b500      	push	{lr}
    fd74:	b087      	sub	sp, #28
    fd76:	9003      	str	r0, [sp, #12]
    fd78:	9102      	str	r1, [sp, #8]
    fd7a:	9201      	str	r2, [sp, #4]
  /* Transmit the Pair Rand */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    fd7c:	9b03      	ldr	r3, [sp, #12]
    fd7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    fd82:	2201      	movs	r2, #1
    fd84:	2101      	movs	r1, #1
    fd86:	4618      	mov	r0, r3
    fd88:	f001 fd60 	bl	1184c <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    fd8c:	9803      	ldr	r0, [sp, #12]
    fd8e:	f7fd f927 	bl	cfe0 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
    fd92:	2019      	movs	r0, #25
    fd94:	f7fe fd2b 	bl	e7ee <smpMsgAlloc>
    fd98:	9005      	str	r0, [sp, #20]
    fd9a:	9b05      	ldr	r3, [sp, #20]
    fd9c:	2b00      	cmp	r3, #0
    fd9e:	d011      	beq.n	fdc4 <smpScSendRand+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    fda0:	9b05      	ldr	r3, [sp, #20]
    fda2:	3308      	adds	r3, #8
    fda4:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
    fda6:	9b04      	ldr	r3, [sp, #16]
    fda8:	1c5a      	adds	r2, r3, #1
    fdaa:	9204      	str	r2, [sp, #16]
    fdac:	2204      	movs	r2, #4
    fdae:	701a      	strb	r2, [r3, #0]

    /* Store Random data (LSB first) */
    WStrReverseCpy(p, pRand, SMP_RAND_LEN);
    fdb0:	2210      	movs	r2, #16
    fdb2:	9901      	ldr	r1, [sp, #4]
    fdb4:	9804      	ldr	r0, [sp, #16]
    fdb6:	f00b fb04 	bl	1b3c2 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    fdba:	9905      	ldr	r1, [sp, #20]
    fdbc:	9803      	ldr	r0, [sp, #12]
    fdbe:	f7fe fcd5 	bl	e76c <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    fdc2:	e009      	b.n	fdd8 <smpScSendRand+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    fdc4:	9b02      	ldr	r3, [sp, #8]
    fdc6:	2208      	movs	r2, #8
    fdc8:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    fdca:	9b02      	ldr	r3, [sp, #8]
    fdcc:	2203      	movs	r2, #3
    fdce:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
    fdd0:	9902      	ldr	r1, [sp, #8]
    fdd2:	9803      	ldr	r0, [sp, #12]
    fdd4:	f7fd fe46 	bl	da64 <smpSmExecute>
}
    fdd8:	bf00      	nop
    fdda:	b007      	add	sp, #28
    fddc:	f85d fb04 	ldr.w	pc, [sp], #4

0000fde0 <smpScSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCnf)
{
    fde0:	b500      	push	{lr}
    fde2:	b087      	sub	sp, #28
    fde4:	9003      	str	r0, [sp, #12]
    fde6:	9102      	str	r1, [sp, #8]
    fde8:	9201      	str	r2, [sp, #4]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    fdea:	9b03      	ldr	r3, [sp, #12]
    fdec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    fdf0:	2201      	movs	r2, #1
    fdf2:	2101      	movs	r1, #1
    fdf4:	4618      	mov	r0, r3
    fdf6:	f001 fd29 	bl	1184c <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    fdfa:	9803      	ldr	r0, [sp, #12]
    fdfc:	f7fd f8f0 	bl	cfe0 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
    fe00:	2019      	movs	r0, #25
    fe02:	f7fe fcf4 	bl	e7ee <smpMsgAlloc>
    fe06:	9005      	str	r0, [sp, #20]
    fe08:	9b05      	ldr	r3, [sp, #20]
    fe0a:	2b00      	cmp	r3, #0
    fe0c:	d011      	beq.n	fe32 <smpScSendPairCnf+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    fe0e:	9b05      	ldr	r3, [sp, #20]
    fe10:	3308      	adds	r3, #8
    fe12:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
    fe14:	9b04      	ldr	r3, [sp, #16]
    fe16:	1c5a      	adds	r2, r3, #1
    fe18:	9204      	str	r2, [sp, #16]
    fe1a:	2203      	movs	r2, #3
    fe1c:	701a      	strb	r2, [r3, #0]

    /* Store Confirm data (LSB first) */
    WStrReverseCpy(p, pCnf, SMP_CONFIRM_LEN);
    fe1e:	2210      	movs	r2, #16
    fe20:	9901      	ldr	r1, [sp, #4]
    fe22:	9804      	ldr	r0, [sp, #16]
    fe24:	f00b facd 	bl	1b3c2 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    fe28:	9905      	ldr	r1, [sp, #20]
    fe2a:	9803      	ldr	r0, [sp, #12]
    fe2c:	f7fe fc9e 	bl	e76c <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    fe30:	e009      	b.n	fe46 <smpScSendPairCnf+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    fe32:	9b02      	ldr	r3, [sp, #8]
    fe34:	2208      	movs	r2, #8
    fe36:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    fe38:	9b02      	ldr	r3, [sp, #8]
    fe3a:	2203      	movs	r2, #3
    fe3c:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
    fe3e:	9902      	ldr	r1, [sp, #8]
    fe40:	9803      	ldr	r0, [sp, #12]
    fe42:	f7fd fe0f 	bl	da64 <smpSmExecute>
}
    fe46:	bf00      	nop
    fe48:	b007      	add	sp, #28
    fe4a:	f85d fb04 	ldr.w	pc, [sp], #4

0000fe4e <smpGetPkBit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
uint8_t smpGetPkBit(smpCcb_t *pCcb)
{
    fe4e:	b084      	sub	sp, #16
    fe50:	9001      	str	r0, [sp, #4]
  smpScCcb_t *pScCb = pCcb->pScCcb;
    fe52:	9b01      	ldr	r3, [sp, #4]
    fe54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fe56:	9303      	str	r3, [sp, #12]
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
    fe58:	9b03      	ldr	r3, [sp, #12]
    fe5a:	78db      	ldrb	r3, [r3, #3]
    fe5c:	08db      	lsrs	r3, r3, #3
    fe5e:	b2db      	uxtb	r3, r3
    fe60:	f1c3 030f 	rsb	r3, r3, #15
    fe64:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t bit = pScCb->pkPos % 8;
    fe68:	9b03      	ldr	r3, [sp, #12]
    fe6a:	78db      	ldrb	r3, [r3, #3]
    fe6c:	f003 0307 	and.w	r3, r3, #7
    fe70:	f88d 300a 	strb.w	r3, [sp, #10]

  if (pScCb->pScratch->Ra[indx] & 1<<bit)
    fe74:	9b03      	ldr	r3, [sp, #12]
    fe76:	695a      	ldr	r2, [r3, #20]
    fe78:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fe7c:	4413      	add	r3, r2
    fe7e:	f893 3020 	ldrb.w	r3, [r3, #32]
    fe82:	461a      	mov	r2, r3
    fe84:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fe88:	fa42 f303 	asr.w	r3, r2, r3
    fe8c:	f003 0301 	and.w	r3, r3, #1
    fe90:	2b00      	cmp	r3, #0
    fe92:	d001      	beq.n	fe98 <smpGetPkBit+0x4a>
    return 0x81;
    fe94:	2381      	movs	r3, #129	; 0x81
    fe96:	e000      	b.n	fe9a <smpGetPkBit+0x4c>

  return 0x80;
    fe98:	2380      	movs	r3, #128	; 0x80
}
    fe9a:	4618      	mov	r0, r3
    fe9c:	b004      	add	sp, #16
    fe9e:	4770      	bx	lr

0000fea0 <SmpScSetOobCfg>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SmpScSetOobCfg(dmConnId_t connId, dmSecLescOobCfg_t *pConfig)
{
    fea0:	b500      	push	{lr}
    fea2:	b085      	sub	sp, #20
    fea4:	4603      	mov	r3, r0
    fea6:	9100      	str	r1, [sp, #0]
    fea8:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t *pCcb = smpCcbByConnId(connId);
    feac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    feb0:	4618      	mov	r0, r3
    feb2:	f7fe f9f1 	bl	e298 <smpCcbByConnId>
    feb6:	9003      	str	r0, [sp, #12]

  WSF_ASSERT(pCcb->pScCcb->pScratch);

  SMP_TRACE_128("OOB Peer Confirm", pConfig->peerConfirm);
    feb8:	9b00      	ldr	r3, [sp, #0]
    feba:	3330      	adds	r3, #48	; 0x30
    febc:	2210      	movs	r2, #16
    febe:	4619      	mov	r1, r3
    fec0:	483a      	ldr	r0, [pc, #232]	; (ffac <SmpScSetOobCfg+0x10c>)
    fec2:	f000 f8d3 	bl	1006c <smpLogByteArray>
  SMP_TRACE_128("OOB Peer Random", pConfig->peerRandom);
    fec6:	9b00      	ldr	r3, [sp, #0]
    fec8:	3320      	adds	r3, #32
    feca:	2210      	movs	r2, #16
    fecc:	4619      	mov	r1, r3
    fece:	4838      	ldr	r0, [pc, #224]	; (ffb0 <SmpScSetOobCfg+0x110>)
    fed0:	f000 f8cc 	bl	1006c <smpLogByteArray>
  SMP_TRACE_128("OOB Local Confirm", pConfig->localConfirm);
    fed4:	9b00      	ldr	r3, [sp, #0]
    fed6:	3310      	adds	r3, #16
    fed8:	2210      	movs	r2, #16
    feda:	4619      	mov	r1, r3
    fedc:	4835      	ldr	r0, [pc, #212]	; (ffb4 <SmpScSetOobCfg+0x114>)
    fede:	f000 f8c5 	bl	1006c <smpLogByteArray>
  SMP_TRACE_128("OOB Local Random", pConfig->localRandom);
    fee2:	9b00      	ldr	r3, [sp, #0]
    fee4:	2210      	movs	r2, #16
    fee6:	4619      	mov	r1, r3
    fee8:	4833      	ldr	r0, [pc, #204]	; (ffb8 <SmpScSetOobCfg+0x118>)
    feea:	f000 f8bf 	bl	1006c <smpLogByteArray>

  if (pCcb->initiator)
    feee:	9b03      	ldr	r3, [sp, #12]
    fef0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    fef4:	2b00      	cmp	r3, #0
    fef6:	d02a      	beq.n	ff4e <SmpScSetOobCfg+0xae>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pConfig->localConfirm);
    fef8:	9b03      	ldr	r3, [sp, #12]
    fefa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fefc:	695b      	ldr	r3, [r3, #20]
    fefe:	f103 0250 	add.w	r2, r3, #80	; 0x50
    ff02:	9b00      	ldr	r3, [sp, #0]
    ff04:	3310      	adds	r3, #16
    ff06:	4619      	mov	r1, r3
    ff08:	4610      	mov	r0, r2
    ff0a:	f00b fa22 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, pConfig->localRandom);
    ff0e:	9b03      	ldr	r3, [sp, #12]
    ff10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ff12:	695b      	ldr	r3, [r3, #20]
    ff14:	3320      	adds	r3, #32
    ff16:	9a00      	ldr	r2, [sp, #0]
    ff18:	4611      	mov	r1, r2
    ff1a:	4618      	mov	r0, r3
    ff1c:	f00b fa19 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCb, pConfig->peerConfirm);
    ff20:	9b03      	ldr	r3, [sp, #12]
    ff22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ff24:	695b      	ldr	r3, [r3, #20]
    ff26:	f103 0240 	add.w	r2, r3, #64	; 0x40
    ff2a:	9b00      	ldr	r3, [sp, #0]
    ff2c:	3330      	adds	r3, #48	; 0x30
    ff2e:	4619      	mov	r1, r3
    ff30:	4610      	mov	r0, r2
    ff32:	f00b fa0e 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, pConfig->peerRandom);
    ff36:	9b03      	ldr	r3, [sp, #12]
    ff38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ff3a:	695b      	ldr	r3, [r3, #20]
    ff3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
    ff40:	9b00      	ldr	r3, [sp, #0]
    ff42:	3320      	adds	r3, #32
    ff44:	4619      	mov	r1, r3
    ff46:	4610      	mov	r0, r2
    ff48:	f00b fa03 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCb, pConfig->localConfirm);
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, pConfig->localRandom);
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pConfig->peerConfirm);
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, pConfig->peerRandom);
  }
}
    ff4c:	e029      	b.n	ffa2 <SmpScSetOobCfg+0x102>
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCb, pConfig->localConfirm);
    ff4e:	9b03      	ldr	r3, [sp, #12]
    ff50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ff52:	695b      	ldr	r3, [r3, #20]
    ff54:	f103 0240 	add.w	r2, r3, #64	; 0x40
    ff58:	9b00      	ldr	r3, [sp, #0]
    ff5a:	3310      	adds	r3, #16
    ff5c:	4619      	mov	r1, r3
    ff5e:	4610      	mov	r0, r2
    ff60:	f00b f9f7 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, pConfig->localRandom);
    ff64:	9b03      	ldr	r3, [sp, #12]
    ff66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ff68:	695b      	ldr	r3, [r3, #20]
    ff6a:	3330      	adds	r3, #48	; 0x30
    ff6c:	9a00      	ldr	r2, [sp, #0]
    ff6e:	4611      	mov	r1, r2
    ff70:	4618      	mov	r0, r3
    ff72:	f00b f9ee 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pConfig->peerConfirm);
    ff76:	9b03      	ldr	r3, [sp, #12]
    ff78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ff7a:	695b      	ldr	r3, [r3, #20]
    ff7c:	f103 0250 	add.w	r2, r3, #80	; 0x50
    ff80:	9b00      	ldr	r3, [sp, #0]
    ff82:	3330      	adds	r3, #48	; 0x30
    ff84:	4619      	mov	r1, r3
    ff86:	4610      	mov	r0, r2
    ff88:	f00b f9e3 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, pConfig->peerRandom);
    ff8c:	9b03      	ldr	r3, [sp, #12]
    ff8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ff90:	695b      	ldr	r3, [r3, #20]
    ff92:	f103 0220 	add.w	r2, r3, #32
    ff96:	9b00      	ldr	r3, [sp, #0]
    ff98:	3320      	adds	r3, #32
    ff9a:	4619      	mov	r1, r3
    ff9c:	4610      	mov	r0, r2
    ff9e:	f00b f9d8 	bl	1b352 <Calc128Cpy>
}
    ffa2:	bf00      	nop
    ffa4:	b005      	add	sp, #20
    ffa6:	f85d fb04 	ldr.w	pc, [sp], #4
    ffaa:	bf00      	nop
    ffac:	0002820c 	.word	0x0002820c
    ffb0:	00028220 	.word	0x00028220
    ffb4:	00028230 	.word	0x00028230
    ffb8:	00028244 	.word	0x00028244

0000ffbc <SmpScGetCancelMsgWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SmpScGetCancelMsgWithReattempt(dmConnId_t connId, wsfMsgHdr_t *pHdr, uint8_t status)
{
    ffbc:	b500      	push	{lr}
    ffbe:	b085      	sub	sp, #20
    ffc0:	4603      	mov	r3, r0
    ffc2:	9100      	str	r1, [sp, #0]
    ffc4:	f88d 3007 	strb.w	r3, [sp, #7]
    ffc8:	4613      	mov	r3, r2
    ffca:	f88d 3006 	strb.w	r3, [sp, #6]
  smpCcb_t *pCcb = smpCcbByConnId(connId);
    ffce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ffd2:	4618      	mov	r0, r3
    ffd4:	f7fe f960 	bl	e298 <smpCcbByConnId>
    ffd8:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
    ffda:	9b03      	ldr	r3, [sp, #12]
    ffdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    ffe0:	4619      	mov	r1, r3
    ffe2:	4816      	ldr	r0, [pc, #88]	; (1003c <SmpScGetCancelMsgWithReattempt+0x80>)
    ffe4:	f008 feb0 	bl	18d48 <WsfTrace>

  /* update repeated attempts count */
  pCcb->attempts++;
    ffe8:	9b03      	ldr	r3, [sp, #12]
    ffea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    ffee:	3301      	adds	r3, #1
    fff0:	b2da      	uxtb	r2, r3
    fff2:	9b03      	ldr	r3, [sp, #12]
    fff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  pHdr->param = connId;
    fff8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fffc:	b29a      	uxth	r2, r3
    fffe:	9b00      	ldr	r3, [sp, #0]
   10000:	801a      	strh	r2, [r3, #0]
  pHdr->status = status;
   10002:	9b00      	ldr	r3, [sp, #0]
   10004:	f89d 2006 	ldrb.w	r2, [sp, #6]
   10008:	70da      	strb	r2, [r3, #3]

  SmpDbPairingFailed(connId);
   1000a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1000e:	4618      	mov	r0, r3
   10010:	f7fd ff1e 	bl	de50 <SmpDbPairingFailed>

  if (pCcb->attempts == pSmpCfg->maxAttempts)
   10014:	9b03      	ldr	r3, [sp, #12]
   10016:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   1001a:	4b09      	ldr	r3, [pc, #36]	; (10040 <SmpScGetCancelMsgWithReattempt+0x84>)
   1001c:	681b      	ldr	r3, [r3, #0]
   1001e:	79db      	ldrb	r3, [r3, #7]
   10020:	429a      	cmp	r2, r3
   10022:	d103      	bne.n	1002c <SmpScGetCancelMsgWithReattempt+0x70>
  {
    /* max attempts reached */
    pHdr->event = SMP_MSG_INT_MAX_ATTEMPTS;
   10024:	9b00      	ldr	r3, [sp, #0]
   10026:	220d      	movs	r2, #13
   10028:	709a      	strb	r2, [r3, #2]
  else
  {
    /* else just fail */
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
  }
}
   1002a:	e002      	b.n	10032 <SmpScGetCancelMsgWithReattempt+0x76>
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   1002c:	9b00      	ldr	r3, [sp, #0]
   1002e:	2203      	movs	r2, #3
   10030:	709a      	strb	r2, [r3, #2]
}
   10032:	bf00      	nop
   10034:	b005      	add	sp, #20
   10036:	f85d fb04 	ldr.w	pc, [sp], #4
   1003a:	bf00      	nop
   1003c:	00028258 	.word	0x00028258
   10040:	10002b94 	.word	0x10002b94

00010044 <smpScFailWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void smpScFailWithReattempt(smpCcb_t *pCcb)
{
   10044:	b500      	push	{lr}
   10046:	b085      	sub	sp, #20
   10048:	9001      	str	r0, [sp, #4]
  wsfMsgHdr_t hdr;

  SmpScGetCancelMsgWithReattempt(pCcb->connId, &hdr, SMP_ERR_CONFIRM_VALUE);
   1004a:	9b01      	ldr	r3, [sp, #4]
   1004c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   10050:	a903      	add	r1, sp, #12
   10052:	2204      	movs	r2, #4
   10054:	4618      	mov	r0, r3
   10056:	f7ff ffb1 	bl	ffbc <SmpScGetCancelMsgWithReattempt>

  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   1005a:	ab03      	add	r3, sp, #12
   1005c:	4619      	mov	r1, r3
   1005e:	9801      	ldr	r0, [sp, #4]
   10060:	f7fd fd00 	bl	da64 <smpSmExecute>
}
   10064:	bf00      	nop
   10066:	b005      	add	sp, #20
   10068:	f85d fb04 	ldr.w	pc, [sp], #4

0001006c <smpLogByteArray>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpLogByteArray(char *str, uint8_t *pArray, uint8_t len)
{
   1006c:	b500      	push	{lr}
   1006e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   10072:	ab03      	add	r3, sp, #12
   10074:	6018      	str	r0, [r3, #0]
   10076:	ab02      	add	r3, sp, #8
   10078:	6019      	str	r1, [r3, #0]
   1007a:	f10d 0307 	add.w	r3, sp, #7
   1007e:	701a      	strb	r2, [r3, #0]
#if WSF_TOKEN_ENABLED == TRUE || WSF_TRACE_ENABLED == TRUE

  char buffer[512];
  int i, j=0, pos=0;
   10080:	2300      	movs	r3, #0
   10082:	9388      	str	r3, [sp, #544]	; 0x220
   10084:	2300      	movs	r3, #0
   10086:	9387      	str	r3, [sp, #540]	; 0x21c

  SMP_TRACE_INFO0(str);
   10088:	ab03      	add	r3, sp, #12
   1008a:	6818      	ldr	r0, [r3, #0]
   1008c:	f008 fe5c 	bl	18d48 <WsfTrace>

  while (j < len)
   10090:	e07d      	b.n	1018e <smpLogByteArray+0x122>
  {
    int count = 16;
   10092:	2310      	movs	r3, #16
   10094:	9386      	str	r3, [sp, #536]	; 0x218

    if (len-j < count)
   10096:	f10d 0307 	add.w	r3, sp, #7
   1009a:	781a      	ldrb	r2, [r3, #0]
   1009c:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1009e:	1ad2      	subs	r2, r2, r3
   100a0:	9b86      	ldr	r3, [sp, #536]	; 0x218
   100a2:	429a      	cmp	r2, r3
   100a4:	da01      	bge.n	100aa <smpLogByteArray+0x3e>
      count = j;
   100a6:	9b88      	ldr	r3, [sp, #544]	; 0x220
   100a8:	9386      	str	r3, [sp, #536]	; 0x218

    buffer[pos++] = '[';
   100aa:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   100ac:	1c5a      	adds	r2, r3, #1
   100ae:	9287      	str	r2, [sp, #540]	; 0x21c
   100b0:	aa05      	add	r2, sp, #20
   100b2:	215b      	movs	r1, #91	; 0x5b
   100b4:	54d1      	strb	r1, [r2, r3]

    for (i=0; i<count; i++, j++)
   100b6:	2300      	movs	r3, #0
   100b8:	9389      	str	r3, [sp, #548]	; 0x224
   100ba:	e052      	b.n	10162 <smpLogByteArray+0xf6>
    {
      uint8_t quad;

      if (i && i % 4 == 0)
   100bc:	9b89      	ldr	r3, [sp, #548]	; 0x224
   100be:	2b00      	cmp	r3, #0
   100c0:	d00a      	beq.n	100d8 <smpLogByteArray+0x6c>
   100c2:	9b89      	ldr	r3, [sp, #548]	; 0x224
   100c4:	f003 0303 	and.w	r3, r3, #3
   100c8:	2b00      	cmp	r3, #0
   100ca:	d105      	bne.n	100d8 <smpLogByteArray+0x6c>
        buffer[pos++] = ' ';
   100cc:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   100ce:	1c5a      	adds	r2, r3, #1
   100d0:	9287      	str	r2, [sp, #540]	; 0x21c
   100d2:	aa05      	add	r2, sp, #20
   100d4:	2120      	movs	r1, #32
   100d6:	54d1      	strb	r1, [r2, r3]

      quad = (pArray[j] >> 4) & 0xf;
   100d8:	9b88      	ldr	r3, [sp, #544]	; 0x220
   100da:	aa02      	add	r2, sp, #8
   100dc:	6812      	ldr	r2, [r2, #0]
   100de:	4413      	add	r3, r2
   100e0:	781b      	ldrb	r3, [r3, #0]
   100e2:	091b      	lsrs	r3, r3, #4
   100e4:	f88d 3217 	strb.w	r3, [sp, #535]	; 0x217

      if (quad < 10)
   100e8:	f89d 3217 	ldrb.w	r3, [sp, #535]	; 0x217
   100ec:	2b09      	cmp	r3, #9
   100ee:	d809      	bhi.n	10104 <smpLogByteArray+0x98>
        buffer[pos++] = '0' + quad;
   100f0:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   100f2:	1c5a      	adds	r2, r3, #1
   100f4:	9287      	str	r2, [sp, #540]	; 0x21c
   100f6:	f89d 2217 	ldrb.w	r2, [sp, #535]	; 0x217
   100fa:	3230      	adds	r2, #48	; 0x30
   100fc:	b2d1      	uxtb	r1, r2
   100fe:	aa05      	add	r2, sp, #20
   10100:	54d1      	strb	r1, [r2, r3]
   10102:	e008      	b.n	10116 <smpLogByteArray+0xaa>
      else
        buffer[pos++] = 'a' + quad - 10;
   10104:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   10106:	1c5a      	adds	r2, r3, #1
   10108:	9287      	str	r2, [sp, #540]	; 0x21c
   1010a:	f89d 2217 	ldrb.w	r2, [sp, #535]	; 0x217
   1010e:	3257      	adds	r2, #87	; 0x57
   10110:	b2d1      	uxtb	r1, r2
   10112:	aa05      	add	r2, sp, #20
   10114:	54d1      	strb	r1, [r2, r3]

      quad = pArray[j] & 0xf;
   10116:	9b88      	ldr	r3, [sp, #544]	; 0x220
   10118:	aa02      	add	r2, sp, #8
   1011a:	6812      	ldr	r2, [r2, #0]
   1011c:	4413      	add	r3, r2
   1011e:	781b      	ldrb	r3, [r3, #0]
   10120:	f003 030f 	and.w	r3, r3, #15
   10124:	f88d 3217 	strb.w	r3, [sp, #535]	; 0x217

      if (quad < 10)
   10128:	f89d 3217 	ldrb.w	r3, [sp, #535]	; 0x217
   1012c:	2b09      	cmp	r3, #9
   1012e:	d809      	bhi.n	10144 <smpLogByteArray+0xd8>
        buffer[pos++] = '0' + quad;
   10130:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   10132:	1c5a      	adds	r2, r3, #1
   10134:	9287      	str	r2, [sp, #540]	; 0x21c
   10136:	f89d 2217 	ldrb.w	r2, [sp, #535]	; 0x217
   1013a:	3230      	adds	r2, #48	; 0x30
   1013c:	b2d1      	uxtb	r1, r2
   1013e:	aa05      	add	r2, sp, #20
   10140:	54d1      	strb	r1, [r2, r3]
   10142:	e008      	b.n	10156 <smpLogByteArray+0xea>
      else
        buffer[pos++] = 'a' + quad - 10;
   10144:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   10146:	1c5a      	adds	r2, r3, #1
   10148:	9287      	str	r2, [sp, #540]	; 0x21c
   1014a:	f89d 2217 	ldrb.w	r2, [sp, #535]	; 0x217
   1014e:	3257      	adds	r2, #87	; 0x57
   10150:	b2d1      	uxtb	r1, r2
   10152:	aa05      	add	r2, sp, #20
   10154:	54d1      	strb	r1, [r2, r3]
    for (i=0; i<count; i++, j++)
   10156:	9b89      	ldr	r3, [sp, #548]	; 0x224
   10158:	3301      	adds	r3, #1
   1015a:	9389      	str	r3, [sp, #548]	; 0x224
   1015c:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1015e:	3301      	adds	r3, #1
   10160:	9388      	str	r3, [sp, #544]	; 0x220
   10162:	9a89      	ldr	r2, [sp, #548]	; 0x224
   10164:	9b86      	ldr	r3, [sp, #536]	; 0x218
   10166:	429a      	cmp	r2, r3
   10168:	dba8      	blt.n	100bc <smpLogByteArray+0x50>
    }

    buffer[pos++] = ']';
   1016a:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1016c:	1c5a      	adds	r2, r3, #1
   1016e:	9287      	str	r2, [sp, #540]	; 0x21c
   10170:	aa05      	add	r2, sp, #20
   10172:	215d      	movs	r1, #93	; 0x5d
   10174:	54d1      	strb	r1, [r2, r3]
    buffer[pos++] = '\0';
   10176:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   10178:	1c5a      	adds	r2, r3, #1
   1017a:	9287      	str	r2, [sp, #540]	; 0x21c
   1017c:	aa05      	add	r2, sp, #20
   1017e:	2100      	movs	r1, #0
   10180:	54d1      	strb	r1, [r2, r3]
    SMP_TRACE_INFO0(buffer);
   10182:	ab05      	add	r3, sp, #20
   10184:	4618      	mov	r0, r3
   10186:	f008 fddf 	bl	18d48 <WsfTrace>
    pos = 0;
   1018a:	2300      	movs	r3, #0
   1018c:	9387      	str	r3, [sp, #540]	; 0x21c
  while (j < len)
   1018e:	f10d 0307 	add.w	r3, sp, #7
   10192:	781a      	ldrb	r2, [r3, #0]
   10194:	9b88      	ldr	r3, [sp, #544]	; 0x220
   10196:	429a      	cmp	r2, r3
   10198:	f73f af7b 	bgt.w	10092 <smpLogByteArray+0x26>
  }

  if (pos)
   1019c:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1019e:	2b00      	cmp	r3, #0
   101a0:	d00f      	beq.n	101c2 <smpLogByteArray+0x156>
  {
    buffer[pos++] = ']';
   101a2:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   101a4:	1c5a      	adds	r2, r3, #1
   101a6:	9287      	str	r2, [sp, #540]	; 0x21c
   101a8:	aa05      	add	r2, sp, #20
   101aa:	215d      	movs	r1, #93	; 0x5d
   101ac:	54d1      	strb	r1, [r2, r3]
    buffer[pos++] = '\0';
   101ae:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   101b0:	1c5a      	adds	r2, r3, #1
   101b2:	9287      	str	r2, [sp, #540]	; 0x21c
   101b4:	aa05      	add	r2, sp, #20
   101b6:	2100      	movs	r1, #0
   101b8:	54d1      	strb	r1, [r2, r3]

    SMP_TRACE_INFO0(buffer);
   101ba:	ab05      	add	r3, sp, #20
   101bc:	4618      	mov	r0, r3
   101be:	f008 fdc3 	bl	18d48 <WsfTrace>
  }
#endif
}
   101c2:	bf00      	nop
   101c4:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   101c8:	f85d fb04 	ldr.w	pc, [sp], #4

000101cc <dmAdvCbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvCbInit(uint8_t advHandle)
{
   101cc:	b082      	sub	sp, #8
   101ce:	4603      	mov	r3, r0
   101d0:	f88d 3007 	strb.w	r3, [sp, #7]
  /* initialize control block */
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   101d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101d8:	4a14      	ldr	r2, [pc, #80]	; (1022c <dmAdvCbInit+0x60>)
   101da:	4413      	add	r3, r2
   101dc:	22ff      	movs	r2, #255	; 0xff
   101de:	751a      	strb	r2, [r3, #20]
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   101e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101e4:	4a11      	ldr	r2, [pc, #68]	; (1022c <dmAdvCbInit+0x60>)
   101e6:	3308      	adds	r3, #8
   101e8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   101ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  dmAdvCb.intervalMax[advHandle] = DM_GAP_ADV_SLOW_INT_MAX;
   101f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101f4:	4a0d      	ldr	r2, [pc, #52]	; (1022c <dmAdvCbInit+0x60>)
   101f6:	3308      	adds	r3, #8
   101f8:	005b      	lsls	r3, r3, #1
   101fa:	4413      	add	r3, r2
   101fc:	f44f 62f0 	mov.w	r2, #1920	; 0x780
   10200:	805a      	strh	r2, [r3, #2]
  dmAdvCb.channelMap[advHandle] = DM_ADV_CHAN_ALL;
   10202:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10206:	4a09      	ldr	r2, [pc, #36]	; (1022c <dmAdvCbInit+0x60>)
   10208:	4413      	add	r3, r2
   1020a:	2207      	movs	r2, #7
   1020c:	755a      	strb	r2, [r3, #21]
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   1020e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10212:	4a07      	ldr	r2, [pc, #28]	; (10230 <dmAdvCbInit+0x64>)
   10214:	4413      	add	r3, r2
   10216:	2200      	movs	r2, #0
   10218:	745a      	strb	r2, [r3, #17]
  dmAdvCb.advState[advHandle] = DM_ADV_STATE_IDLE;
   1021a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1021e:	4a03      	ldr	r2, [pc, #12]	; (1022c <dmAdvCbInit+0x60>)
   10220:	4413      	add	r3, r2
   10222:	2200      	movs	r2, #0
   10224:	75da      	strb	r2, [r3, #23]
}
   10226:	bf00      	nop
   10228:	b002      	add	sp, #8
   1022a:	4770      	bx	lr
   1022c:	10008968 	.word	0x10008968
   10230:	10008a50 	.word	0x10008a50

00010234 <dmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvInit(void)
{
   10234:	b500      	push	{lr}
   10236:	b083      	sub	sp, #12
  uint8_t i;

  /* initialize control block */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   10238:	2300      	movs	r3, #0
   1023a:	f88d 3007 	strb.w	r3, [sp, #7]
   1023e:	e009      	b.n	10254 <dmAdvInit+0x20>
  {
    dmAdvCbInit(i);
   10240:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10244:	4618      	mov	r0, r3
   10246:	f7ff ffc1 	bl	101cc <dmAdvCbInit>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1024a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1024e:	3301      	adds	r3, #1
   10250:	f88d 3007 	strb.w	r3, [sp, #7]
   10254:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10258:	2b00      	cmp	r3, #0
   1025a:	d0f1      	beq.n	10240 <dmAdvInit+0xc>
  }

  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   1025c:	4b05      	ldr	r3, [pc, #20]	; (10274 <dmAdvInit+0x40>)
   1025e:	7b1a      	ldrb	r2, [r3, #12]
   10260:	4b05      	ldr	r3, [pc, #20]	; (10278 <dmAdvInit+0x44>)
   10262:	721a      	strb	r2, [r3, #8]
  dmCb.advAddrType = DM_ADDR_PUBLIC;
   10264:	4b03      	ldr	r3, [pc, #12]	; (10274 <dmAdvInit+0x40>)
   10266:	2200      	movs	r2, #0
   10268:	739a      	strb	r2, [r3, #14]
}
   1026a:	bf00      	nop
   1026c:	b003      	add	sp, #12
   1026e:	f85d fb04 	ldr.w	pc, [sp], #4
   10272:	bf00      	nop
   10274:	10008a50 	.word	0x10008a50
   10278:	10008968 	.word	0x10008968

0001027c <dmAdvGenConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvGenConnCmpl(uint8_t advHandle, uint8_t status)
{
   1027c:	b500      	push	{lr}
   1027e:	b08d      	sub	sp, #52	; 0x34
   10280:	4603      	mov	r3, r0
   10282:	460a      	mov	r2, r1
   10284:	f88d 3007 	strb.w	r3, [sp, #7]
   10288:	4613      	mov	r3, r2
   1028a:	f88d 3006 	strb.w	r3, [sp, #6]
  hciLeConnCmplEvt_t  leConnCmpl;

  /* generate enhanced connection complete event */
  memset(&leConnCmpl, 0, sizeof(leConnCmpl));
   1028e:	ab03      	add	r3, sp, #12
   10290:	2224      	movs	r2, #36	; 0x24
   10292:	2100      	movs	r1, #0
   10294:	4618      	mov	r0, r3
   10296:	f7fb fffd 	bl	c294 <memset>

  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   1029a:	2302      	movs	r3, #2
   1029c:	f88d 300e 	strb.w	r3, [sp, #14]
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   102a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   102a4:	f88d 3010 	strb.w	r3, [sp, #16]
   102a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   102ac:	f88d 300f 	strb.w	r3, [sp, #15]
  leConnCmpl.role = DM_ROLE_SLAVE;
   102b0:	2301      	movs	r3, #1
   102b2:	f88d 3014 	strb.w	r3, [sp, #20]
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   102b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   102ba:	4a0f      	ldr	r2, [pc, #60]	; (102f8 <dmAdvGenConnCmpl+0x7c>)
   102bc:	4413      	add	r3, r2
   102be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   102c2:	f88d 3015 	strb.w	r3, [sp, #21]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   102c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   102ca:	4613      	mov	r3, r2
   102cc:	005b      	lsls	r3, r3, #1
   102ce:	4413      	add	r3, r2
   102d0:	005b      	lsls	r3, r3, #1
   102d2:	3318      	adds	r3, #24
   102d4:	4a08      	ldr	r2, [pc, #32]	; (102f8 <dmAdvGenConnCmpl+0x7c>)
   102d6:	4413      	add	r3, r2
   102d8:	1cda      	adds	r2, r3, #3
   102da:	ab03      	add	r3, sp, #12
   102dc:	330a      	adds	r3, #10
   102de:	4611      	mov	r1, r2
   102e0:	4618      	mov	r0, r3
   102e2:	f00a fff1 	bl	1b2c8 <BdaCpy>

  /* pass connection complete event to DM connection management module */
  dmDevPassHciEvtToConn((hciEvt_t *) &leConnCmpl);
   102e6:	ab03      	add	r3, sp, #12
   102e8:	4618      	mov	r0, r3
   102ea:	f001 fdd9 	bl	11ea0 <dmDevPassHciEvtToConn>
}
   102ee:	bf00      	nop
   102f0:	b00d      	add	sp, #52	; 0x34
   102f2:	f85d fb04 	ldr.w	pc, [sp], #4
   102f6:	bf00      	nop
   102f8:	10008968 	.word	0x10008968

000102fc <DmAdvConfig>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvConfig(uint8_t advHandle, uint8_t advType, uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   102fc:	b500      	push	{lr}
   102fe:	b085      	sub	sp, #20
   10300:	9300      	str	r3, [sp, #0]
   10302:	4603      	mov	r3, r0
   10304:	f88d 3007 	strb.w	r3, [sp, #7]
   10308:	460b      	mov	r3, r1
   1030a:	f88d 3006 	strb.w	r3, [sp, #6]
   1030e:	4613      	mov	r3, r2
   10310:	f88d 3005 	strb.w	r3, [sp, #5]
  dmAdvApiConfig_t *pMsg;

  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiConfig_t))) != NULL)
   10314:	200e      	movs	r0, #14
   10316:	f008 f8ac 	bl	18472 <WsfMsgAlloc>
   1031a:	9003      	str	r0, [sp, #12]
   1031c:	9b03      	ldr	r3, [sp, #12]
   1031e:	2b00      	cmp	r3, #0
   10320:	d01a      	beq.n	10358 <DmAdvConfig+0x5c>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_CONFIG;
   10322:	9b03      	ldr	r3, [sp, #12]
   10324:	2200      	movs	r2, #0
   10326:	709a      	strb	r2, [r3, #2]
    pMsg->advType = advType;
   10328:	9b03      	ldr	r3, [sp, #12]
   1032a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1032e:	715a      	strb	r2, [r3, #5]
    pMsg->advHandle = advHandle;
   10330:	9b03      	ldr	r3, [sp, #12]
   10332:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10336:	711a      	strb	r2, [r3, #4]
    pMsg->peerAddrType = peerAddrType;
   10338:	9b03      	ldr	r3, [sp, #12]
   1033a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1033e:	719a      	strb	r2, [r3, #6]
    BdaCpy(pMsg->peerAddr, pPeerAddr);
   10340:	9b03      	ldr	r3, [sp, #12]
   10342:	3307      	adds	r3, #7
   10344:	9900      	ldr	r1, [sp, #0]
   10346:	4618      	mov	r0, r3
   10348:	f00a ffbe 	bl	1b2c8 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   1034c:	4b04      	ldr	r3, [pc, #16]	; (10360 <DmAdvConfig+0x64>)
   1034e:	7b1b      	ldrb	r3, [r3, #12]
   10350:	9903      	ldr	r1, [sp, #12]
   10352:	4618      	mov	r0, r3
   10354:	f008 f8b1 	bl	184ba <WsfMsgSend>
  }
}
   10358:	bf00      	nop
   1035a:	b005      	add	sp, #20
   1035c:	f85d fb04 	ldr.w	pc, [sp], #4
   10360:	10008a50 	.word	0x10008a50

00010364 <DmAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetData(uint8_t advHandle, uint8_t op, uint8_t location, uint8_t len, uint8_t *pData)
{
   10364:	b510      	push	{r4, lr}
   10366:	b084      	sub	sp, #16
   10368:	4604      	mov	r4, r0
   1036a:	4608      	mov	r0, r1
   1036c:	4611      	mov	r1, r2
   1036e:	461a      	mov	r2, r3
   10370:	4623      	mov	r3, r4
   10372:	f88d 3007 	strb.w	r3, [sp, #7]
   10376:	4603      	mov	r3, r0
   10378:	f88d 3006 	strb.w	r3, [sp, #6]
   1037c:	460b      	mov	r3, r1
   1037e:	f88d 3005 	strb.w	r3, [sp, #5]
   10382:	4613      	mov	r3, r2
   10384:	f88d 3004 	strb.w	r3, [sp, #4]
  dmAdvApiSetData_t *pMsg;

  WSF_ASSERT((location == DM_DATA_LOC_SCAN) || (location == DM_DATA_LOC_ADV));
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiSetData_t) + len)) != NULL)
   10388:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1038c:	b29b      	uxth	r3, r3
   1038e:	3308      	adds	r3, #8
   10390:	b29b      	uxth	r3, r3
   10392:	4618      	mov	r0, r3
   10394:	f008 f86d 	bl	18472 <WsfMsgAlloc>
   10398:	9003      	str	r0, [sp, #12]
   1039a:	9b03      	ldr	r3, [sp, #12]
   1039c:	2b00      	cmp	r3, #0
   1039e:	d020      	beq.n	103e2 <DmAdvSetData+0x7e>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
   103a0:	9b03      	ldr	r3, [sp, #12]
   103a2:	2201      	movs	r2, #1
   103a4:	709a      	strb	r2, [r3, #2]
    pMsg->advHandle = advHandle;
   103a6:	9b03      	ldr	r3, [sp, #12]
   103a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   103ac:	711a      	strb	r2, [r3, #4]
    pMsg->op = op;
   103ae:	9b03      	ldr	r3, [sp, #12]
   103b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   103b4:	715a      	strb	r2, [r3, #5]
    pMsg->location = location;
   103b6:	9b03      	ldr	r3, [sp, #12]
   103b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   103bc:	719a      	strb	r2, [r3, #6]
    pMsg->len = len;
   103be:	9b03      	ldr	r3, [sp, #12]
   103c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
   103c4:	71da      	strb	r2, [r3, #7]
    memcpy(pMsg->pData, pData, len);
   103c6:	9b03      	ldr	r3, [sp, #12]
   103c8:	3308      	adds	r3, #8
   103ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
   103ce:	9906      	ldr	r1, [sp, #24]
   103d0:	4618      	mov	r0, r3
   103d2:	f7fb fec5 	bl	c160 <memcpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   103d6:	4b04      	ldr	r3, [pc, #16]	; (103e8 <DmAdvSetData+0x84>)
   103d8:	7b1b      	ldrb	r3, [r3, #12]
   103da:	9903      	ldr	r1, [sp, #12]
   103dc:	4618      	mov	r0, r3
   103de:	f008 f86c 	bl	184ba <WsfMsgSend>
  }
}
   103e2:	bf00      	nop
   103e4:	b004      	add	sp, #16
   103e6:	bd10      	pop	{r4, pc}
   103e8:	10008a50 	.word	0x10008a50

000103ec <DmAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pDuration, uint8_t *pMaxEaEvents)
{
   103ec:	b500      	push	{lr}
   103ee:	b087      	sub	sp, #28
   103f0:	9102      	str	r1, [sp, #8]
   103f2:	9201      	str	r2, [sp, #4]
   103f4:	9300      	str	r3, [sp, #0]
   103f6:	4603      	mov	r3, r0
   103f8:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t i;
  dmAdvApiStart_t *pMsg;

  WSF_ASSERT(numSets <= DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStart_t))) != NULL)
   103fc:	200a      	movs	r0, #10
   103fe:	f008 f838 	bl	18472 <WsfMsgAlloc>
   10402:	9004      	str	r0, [sp, #16]
   10404:	9b04      	ldr	r3, [sp, #16]
   10406:	2b00      	cmp	r3, #0
   10408:	d03e      	beq.n	10488 <DmAdvStart+0x9c>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_START;
   1040a:	9b04      	ldr	r3, [sp, #16]
   1040c:	2202      	movs	r2, #2
   1040e:	709a      	strb	r2, [r3, #2]
    pMsg->numSets = numSets;
   10410:	9b04      	ldr	r3, [sp, #16]
   10412:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10416:	711a      	strb	r2, [r3, #4]

    for (i = 0; i < numSets; i++)
   10418:	2300      	movs	r3, #0
   1041a:	f88d 3017 	strb.w	r3, [sp, #23]
   1041e:	e027      	b.n	10470 <DmAdvStart+0x84>
    {
      pMsg->advHandle[i] = pAdvHandles[i];
   10420:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10424:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10428:	9902      	ldr	r1, [sp, #8]
   1042a:	440a      	add	r2, r1
   1042c:	7811      	ldrb	r1, [r2, #0]
   1042e:	9a04      	ldr	r2, [sp, #16]
   10430:	4413      	add	r3, r2
   10432:	460a      	mov	r2, r1
   10434:	715a      	strb	r2, [r3, #5]
      pMsg->duration[i] = pDuration[i];
   10436:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1043a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1043e:	0052      	lsls	r2, r2, #1
   10440:	9901      	ldr	r1, [sp, #4]
   10442:	440a      	add	r2, r1
   10444:	8811      	ldrh	r1, [r2, #0]
   10446:	9a04      	ldr	r2, [sp, #16]
   10448:	005b      	lsls	r3, r3, #1
   1044a:	4413      	add	r3, r2
   1044c:	460a      	mov	r2, r1
   1044e:	80da      	strh	r2, [r3, #6]
      pMsg->maxEaEvents[i] = pMaxEaEvents[i];
   10450:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10454:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10458:	9900      	ldr	r1, [sp, #0]
   1045a:	440a      	add	r2, r1
   1045c:	7811      	ldrb	r1, [r2, #0]
   1045e:	9a04      	ldr	r2, [sp, #16]
   10460:	4413      	add	r3, r2
   10462:	460a      	mov	r2, r1
   10464:	721a      	strb	r2, [r3, #8]
    for (i = 0; i < numSets; i++)
   10466:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1046a:	3301      	adds	r3, #1
   1046c:	f88d 3017 	strb.w	r3, [sp, #23]
   10470:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10474:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10478:	429a      	cmp	r2, r3
   1047a:	d3d1      	bcc.n	10420 <DmAdvStart+0x34>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   1047c:	4b04      	ldr	r3, [pc, #16]	; (10490 <DmAdvStart+0xa4>)
   1047e:	7b1b      	ldrb	r3, [r3, #12]
   10480:	9904      	ldr	r1, [sp, #16]
   10482:	4618      	mov	r0, r3
   10484:	f008 f819 	bl	184ba <WsfMsgSend>
  }
}
   10488:	bf00      	nop
   1048a:	b007      	add	sp, #28
   1048c:	f85d fb04 	ldr.w	pc, [sp], #4
   10490:	10008a50 	.word	0x10008a50

00010494 <DmAdvSetInterval>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetInterval(uint8_t advHandle, uint16_t intervalMin, uint16_t intervalMax)
{
   10494:	b500      	push	{lr}
   10496:	b083      	sub	sp, #12
   10498:	4603      	mov	r3, r0
   1049a:	f88d 3007 	strb.w	r3, [sp, #7]
   1049e:	460b      	mov	r3, r1
   104a0:	f8ad 3004 	strh.w	r3, [sp, #4]
   104a4:	4613      	mov	r3, r2
   104a6:	f8ad 3002 	strh.w	r3, [sp, #2]
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  WsfTaskLock();
   104aa:	f008 f86f 	bl	1858c <WsfTaskLock>
  dmAdvCb.intervalMin[advHandle] = intervalMin;
   104ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104b2:	490a      	ldr	r1, [pc, #40]	; (104dc <DmAdvSetInterval+0x48>)
   104b4:	3308      	adds	r3, #8
   104b6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   104ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  dmAdvCb.intervalMax[advHandle] = intervalMax;
   104be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104c2:	4a06      	ldr	r2, [pc, #24]	; (104dc <DmAdvSetInterval+0x48>)
   104c4:	3308      	adds	r3, #8
   104c6:	005b      	lsls	r3, r3, #1
   104c8:	4413      	add	r3, r2
   104ca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   104ce:	805a      	strh	r2, [r3, #2]
  WsfTaskUnlock();
   104d0:	f008 f861 	bl	18596 <WsfTaskUnlock>
}
   104d4:	bf00      	nop
   104d6:	b003      	add	sp, #12
   104d8:	f85d fb04 	ldr.w	pc, [sp], #4
   104dc:	10008968 	.word	0x10008968

000104e0 <dmAdvConfig>:
 *
 *  \return None.
*/
/*************************************************************************************************/
static void dmAdvConfig(uint8_t advType, uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   104e0:	b530      	push	{r4, r5, lr}
   104e2:	b087      	sub	sp, #28
   104e4:	4603      	mov	r3, r0
   104e6:	9204      	str	r2, [sp, #16]
   104e8:	f88d 3017 	strb.w	r3, [sp, #23]
   104ec:	460b      	mov	r3, r1
   104ee:	f88d 3016 	strb.w	r3, [sp, #22]
  /* set advertising parameters */
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   104f2:	4b12      	ldr	r3, [pc, #72]	; (1053c <dmAdvConfig+0x5c>)
   104f4:	8a1c      	ldrh	r4, [r3, #16]
   104f6:	4b11      	ldr	r3, [pc, #68]	; (1053c <dmAdvConfig+0x5c>)
   104f8:	8a5d      	ldrh	r5, [r3, #18]
   104fa:	4b11      	ldr	r3, [pc, #68]	; (10540 <dmAdvConfig+0x60>)
   104fc:	7b9b      	ldrb	r3, [r3, #14]
   104fe:	4618      	mov	r0, r3
   10500:	f001 fd46 	bl	11f90 <DmLlAddrType>
   10504:	4603      	mov	r3, r0
   10506:	4618      	mov	r0, r3
   10508:	4b0c      	ldr	r3, [pc, #48]	; (1053c <dmAdvConfig+0x5c>)
   1050a:	7d5b      	ldrb	r3, [r3, #21]
   1050c:	4a0c      	ldr	r2, [pc, #48]	; (10540 <dmAdvConfig+0x60>)
   1050e:	7c52      	ldrb	r2, [r2, #17]
   10510:	f89d 1017 	ldrb.w	r1, [sp, #23]
   10514:	9203      	str	r2, [sp, #12]
   10516:	9302      	str	r3, [sp, #8]
   10518:	9b04      	ldr	r3, [sp, #16]
   1051a:	9301      	str	r3, [sp, #4]
   1051c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   10520:	9300      	str	r3, [sp, #0]
   10522:	4603      	mov	r3, r0
   10524:	460a      	mov	r2, r1
   10526:	4629      	mov	r1, r5
   10528:	4620      	mov	r0, r4
   1052a:	f00c ffc2 	bl	1d4b2 <HciLeSetAdvParamCmd>
                      pPeerAddr,                                  /* pPeerAddr */
                      dmAdvCb.channelMap[DM_ADV_HANDLE_DEFAULT],  /* advChanMap */
                      dmCb.advFiltPolicy[DM_ADV_HANDLE_DEFAULT]); /* advFiltPolicy */

  /* store advertising type */
  dmLegAdvCb.advType = advType;
   1052e:	4a05      	ldr	r2, [pc, #20]	; (10544 <dmAdvConfig+0x64>)
   10530:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10534:	7013      	strb	r3, [r2, #0]
}
   10536:	bf00      	nop
   10538:	b007      	add	sp, #28
   1053a:	bd30      	pop	{r4, r5, pc}
   1053c:	10008968 	.word	0x10008968
   10540:	10008a50 	.word	0x10008a50
   10544:	10003608 	.word	0x10003608

00010548 <dmAdvActConfig>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActConfig(dmAdvMsg_t *pMsg)
{
   10548:	b500      	push	{lr}
   1054a:	b083      	sub	sp, #12
   1054c:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1054e:	4b11      	ldr	r3, [pc, #68]	; (10594 <dmAdvActConfig+0x4c>)
   10550:	7ddb      	ldrb	r3, [r3, #23]
   10552:	4619      	mov	r1, r3
   10554:	4810      	ldr	r0, [pc, #64]	; (10598 <dmAdvActConfig+0x50>)
   10556:	f008 fbf7 	bl	18d48 <WsfTrace>

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   1055a:	4b0e      	ldr	r3, [pc, #56]	; (10594 <dmAdvActConfig+0x4c>)
   1055c:	7ddb      	ldrb	r3, [r3, #23]
   1055e:	2b00      	cmp	r3, #0
   10560:	d114      	bne.n	1058c <dmAdvActConfig+0x44>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   10562:	4b0c      	ldr	r3, [pc, #48]	; (10594 <dmAdvActConfig+0x4c>)
   10564:	7d1b      	ldrb	r3, [r3, #20]
   10566:	2b01      	cmp	r3, #1
   10568:	d003      	beq.n	10572 <dmAdvActConfig+0x2a>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   1056a:	4b0a      	ldr	r3, [pc, #40]	; (10594 <dmAdvActConfig+0x4c>)
   1056c:	7d1b      	ldrb	r3, [r3, #20]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   1056e:	2b04      	cmp	r3, #4
   10570:	d103      	bne.n	1057a <dmAdvActConfig+0x32>
    {
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
   10572:	480a      	ldr	r0, [pc, #40]	; (1059c <dmAdvActConfig+0x54>)
   10574:	f008 fbe8 	bl	18d48 <WsfTrace>
      return;
   10578:	e008      	b.n	1058c <dmAdvActConfig+0x44>
    }

    /* set advertising parameters */
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   1057a:	9b01      	ldr	r3, [sp, #4]
   1057c:	7958      	ldrb	r0, [r3, #5]
   1057e:	9b01      	ldr	r3, [sp, #4]
   10580:	7999      	ldrb	r1, [r3, #6]
   10582:	9b01      	ldr	r3, [sp, #4]
   10584:	3307      	adds	r3, #7
   10586:	461a      	mov	r2, r3
   10588:	f7ff ffaa 	bl	104e0 <dmAdvConfig>
  }
}
   1058c:	b003      	add	sp, #12
   1058e:	f85d fb04 	ldr.w	pc, [sp], #4
   10592:	bf00      	nop
   10594:	10008968 	.word	0x10008968
   10598:	00028454 	.word	0x00028454
   1059c:	00028470 	.word	0x00028470

000105a0 <dmAdvActSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActSetData(dmAdvMsg_t *pMsg)
{
   105a0:	b500      	push	{lr}
   105a2:	b083      	sub	sp, #12
   105a4:	9001      	str	r0, [sp, #4]
  WSF_ASSERT(pMsg->apiSetData.len <= HCI_ADV_DATA_LEN);

  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   105a6:	4b11      	ldr	r3, [pc, #68]	; (105ec <dmAdvActSetData+0x4c>)
   105a8:	7ddb      	ldrb	r3, [r3, #23]
   105aa:	4619      	mov	r1, r3
   105ac:	4810      	ldr	r0, [pc, #64]	; (105f0 <dmAdvActSetData+0x50>)
   105ae:	f008 fbcb 	bl	18d48 <WsfTrace>

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   105b2:	4b0e      	ldr	r3, [pc, #56]	; (105ec <dmAdvActSetData+0x4c>)
   105b4:	7ddb      	ldrb	r3, [r3, #23]
   105b6:	2b00      	cmp	r3, #0
   105b8:	d114      	bne.n	105e4 <dmAdvActSetData+0x44>
  {
    /* set new data in HCI */
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   105ba:	9b01      	ldr	r3, [sp, #4]
   105bc:	799b      	ldrb	r3, [r3, #6]
   105be:	2b00      	cmp	r3, #0
   105c0:	d108      	bne.n	105d4 <dmAdvActSetData+0x34>
    {
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   105c2:	9b01      	ldr	r3, [sp, #4]
   105c4:	79da      	ldrb	r2, [r3, #7]
   105c6:	9b01      	ldr	r3, [sp, #4]
   105c8:	3308      	adds	r3, #8
   105ca:	4619      	mov	r1, r3
   105cc:	4610      	mov	r0, r2
   105ce:	f00c ff3c 	bl	1d44a <HciLeSetAdvDataCmd>
    else
    {
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
    }
  }
}
   105d2:	e007      	b.n	105e4 <dmAdvActSetData+0x44>
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   105d4:	9b01      	ldr	r3, [sp, #4]
   105d6:	79da      	ldrb	r2, [r3, #7]
   105d8:	9b01      	ldr	r3, [sp, #4]
   105da:	3308      	adds	r3, #8
   105dc:	4619      	mov	r1, r3
   105de:	4610      	mov	r0, r2
   105e0:	f00c fff3 	bl	1d5ca <HciLeSetScanRespDataCmd>
}
   105e4:	bf00      	nop
   105e6:	b003      	add	sp, #12
   105e8:	f85d fb04 	ldr.w	pc, [sp], #4
   105ec:	10008968 	.word	0x10008968
   105f0:	0002849c 	.word	0x0002849c

000105f4 <dmAdvActStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActStart(dmAdvMsg_t *pMsg)
{
   105f4:	b500      	push	{lr}
   105f6:	b083      	sub	sp, #12
   105f8:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   105fa:	4b11      	ldr	r3, [pc, #68]	; (10640 <dmAdvActStart+0x4c>)
   105fc:	7ddb      	ldrb	r3, [r3, #23]
   105fe:	4619      	mov	r1, r3
   10600:	4810      	ldr	r0, [pc, #64]	; (10644 <dmAdvActStart+0x50>)
   10602:	f008 fba1 	bl	18d48 <WsfTrace>

   if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   10606:	4b0e      	ldr	r3, [pc, #56]	; (10640 <dmAdvActStart+0x4c>)
   10608:	7ddb      	ldrb	r3, [r3, #23]
   1060a:	2b00      	cmp	r3, #0
   1060c:	d115      	bne.n	1063a <dmAdvActStart+0x46>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   1060e:	4b0c      	ldr	r3, [pc, #48]	; (10640 <dmAdvActStart+0x4c>)
   10610:	7d1b      	ldrb	r3, [r3, #20]
   10612:	2b01      	cmp	r3, #1
   10614:	d003      	beq.n	1061e <dmAdvActStart+0x2a>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   10616:	4b0a      	ldr	r3, [pc, #40]	; (10640 <dmAdvActStart+0x4c>)
   10618:	7d1b      	ldrb	r3, [r3, #20]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   1061a:	2b04      	cmp	r3, #4
   1061c:	d103      	bne.n	10626 <dmAdvActStart+0x32>
    {
      DM_TRACE_WARN0("dmAdvActStart during directed advertising!");
   1061e:	480a      	ldr	r0, [pc, #40]	; (10648 <dmAdvActStart+0x54>)
   10620:	f008 fb92 	bl	18d48 <WsfTrace>
      return;
   10624:	e009      	b.n	1063a <dmAdvActStart+0x46>
    }

    /* start advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STARTING;
   10626:	4b06      	ldr	r3, [pc, #24]	; (10640 <dmAdvActStart+0x4c>)
   10628:	2203      	movs	r2, #3
   1062a:	75da      	strb	r2, [r3, #23]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = pMsg->apiStart.duration[DM_ADV_HANDLE_DEFAULT];
   1062c:	9b01      	ldr	r3, [sp, #4]
   1062e:	88da      	ldrh	r2, [r3, #6]
   10630:	4b03      	ldr	r3, [pc, #12]	; (10640 <dmAdvActStart+0x4c>)
   10632:	831a      	strh	r2, [r3, #24]
    HciLeSetAdvEnableCmd(TRUE);
   10634:	2001      	movs	r0, #1
   10636:	f00c feea 	bl	1d40e <HciLeSetAdvEnableCmd>
  }
}
   1063a:	b003      	add	sp, #12
   1063c:	f85d fb04 	ldr.w	pc, [sp], #4
   10640:	10008968 	.word	0x10008968
   10644:	000284b8 	.word	0x000284b8
   10648:	000284d4 	.word	0x000284d4

0001064c <dmAdvActStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActStop(dmAdvMsg_t *pMsg)
{
   1064c:	b500      	push	{lr}
   1064e:	b083      	sub	sp, #12
   10650:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActStop: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   10652:	4b0f      	ldr	r3, [pc, #60]	; (10690 <dmAdvActStop+0x44>)
   10654:	7ddb      	ldrb	r3, [r3, #23]
   10656:	4619      	mov	r1, r3
   10658:	480e      	ldr	r0, [pc, #56]	; (10694 <dmAdvActStop+0x48>)
   1065a:	f008 fb75 	bl	18d48 <WsfTrace>

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   1065e:	4b0c      	ldr	r3, [pc, #48]	; (10690 <dmAdvActStop+0x44>)
   10660:	7ddb      	ldrb	r3, [r3, #23]
   10662:	2b01      	cmp	r3, #1
   10664:	d111      	bne.n	1068a <dmAdvActStop+0x3e>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   10666:	4b0a      	ldr	r3, [pc, #40]	; (10690 <dmAdvActStop+0x44>)
   10668:	7d1b      	ldrb	r3, [r3, #20]
   1066a:	2b01      	cmp	r3, #1
   1066c:	d003      	beq.n	10676 <dmAdvActStop+0x2a>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   1066e:	4b08      	ldr	r3, [pc, #32]	; (10690 <dmAdvActStop+0x44>)
   10670:	7d1b      	ldrb	r3, [r3, #20]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   10672:	2b04      	cmp	r3, #4
   10674:	d103      	bne.n	1067e <dmAdvActStop+0x32>
    {
      DM_TRACE_WARN0("DmAdvStop during directed advertising!");
   10676:	4808      	ldr	r0, [pc, #32]	; (10698 <dmAdvActStop+0x4c>)
   10678:	f008 fb66 	bl	18d48 <WsfTrace>
      return;
   1067c:	e005      	b.n	1068a <dmAdvActStop+0x3e>
    }

    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   1067e:	4b04      	ldr	r3, [pc, #16]	; (10690 <dmAdvActStop+0x44>)
   10680:	2205      	movs	r2, #5
   10682:	75da      	strb	r2, [r3, #23]
    HciLeSetAdvEnableCmd(FALSE);
   10684:	2000      	movs	r0, #0
   10686:	f00c fec2 	bl	1d40e <HciLeSetAdvEnableCmd>
  }
}
   1068a:	b003      	add	sp, #12
   1068c:	f85d fb04 	ldr.w	pc, [sp], #4
   10690:	10008968 	.word	0x10008968
   10694:	00028500 	.word	0x00028500
   10698:	00028518 	.word	0x00028518

0001069c <dmAdvActRemoveSet>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActRemoveSet(dmAdvMsg_t *pMsg)
{
   1069c:	b082      	sub	sp, #8
   1069e:	9001      	str	r0, [sp, #4]
  /* empty */
}
   106a0:	bf00      	nop
   106a2:	b002      	add	sp, #8
   106a4:	4770      	bx	lr

000106a6 <dmAdvActClearSets>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActClearSets(dmAdvMsg_t *pMsg)
{
   106a6:	b082      	sub	sp, #8
   106a8:	9001      	str	r0, [sp, #4]
  /* empty */
}
   106aa:	bf00      	nop
   106ac:	b002      	add	sp, #8
   106ae:	4770      	bx	lr

000106b0 <dmAdvActSetRandAddr>:
*
*  \return None.
*/
/*************************************************************************************************/
void dmAdvActSetRandAddr(dmAdvMsg_t *pMsg)
{
   106b0:	b082      	sub	sp, #8
   106b2:	9001      	str	r0, [sp, #4]
  /* empty */
}
   106b4:	bf00      	nop
   106b6:	b002      	add	sp, #8
   106b8:	4770      	bx	lr
	...

000106bc <dmAdvActTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActTimeout(dmAdvMsg_t *pMsg)
{
   106bc:	b500      	push	{lr}
   106be:	b083      	sub	sp, #12
   106c0:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO0("dmAdvActTimeout!");
   106c2:	4808      	ldr	r0, [pc, #32]	; (106e4 <dmAdvActTimeout+0x28>)
   106c4:	f008 fb40 	bl	18d48 <WsfTrace>

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   106c8:	4b07      	ldr	r3, [pc, #28]	; (106e8 <dmAdvActTimeout+0x2c>)
   106ca:	7ddb      	ldrb	r3, [r3, #23]
   106cc:	2b01      	cmp	r3, #1
   106ce:	d105      	bne.n	106dc <dmAdvActTimeout+0x20>
  {
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   106d0:	4b05      	ldr	r3, [pc, #20]	; (106e8 <dmAdvActTimeout+0x2c>)
   106d2:	2205      	movs	r2, #5
   106d4:	75da      	strb	r2, [r3, #23]
    HciLeSetAdvEnableCmd(FALSE);
   106d6:	2000      	movs	r0, #0
   106d8:	f00c fe99 	bl	1d40e <HciLeSetAdvEnableCmd>
  }
}
   106dc:	bf00      	nop
   106de:	b003      	add	sp, #12
   106e0:	f85d fb04 	ldr.w	pc, [sp], #4
   106e4:	00028540 	.word	0x00028540
   106e8:	10008968 	.word	0x10008968

000106ec <dmAdvReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvReset(void)
{
   106ec:	b500      	push	{lr}
   106ee:	b083      	sub	sp, #12
  wsfMsgHdr_t advStop;

  /* if stopping undirected advertisement or advertising but not high duty cycle directed adv */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   106f0:	4b0f      	ldr	r3, [pc, #60]	; (10730 <dmAdvReset+0x44>)
   106f2:	7ddb      	ldrb	r3, [r3, #23]
   106f4:	2b05      	cmp	r3, #5
   106f6:	d007      	beq.n	10708 <dmAdvReset+0x1c>
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   106f8:	4b0d      	ldr	r3, [pc, #52]	; (10730 <dmAdvReset+0x44>)
   106fa:	7ddb      	ldrb	r3, [r3, #23]
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   106fc:	2b01      	cmp	r3, #1
   106fe:	d111      	bne.n	10724 <dmAdvReset+0x38>
       (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] != DM_ADV_CONN_DIRECT)))
   10700:	4b0b      	ldr	r3, [pc, #44]	; (10730 <dmAdvReset+0x44>)
   10702:	7d1b      	ldrb	r3, [r3, #20]
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   10704:	2b01      	cmp	r3, #1
   10706:	d00d      	beq.n	10724 <dmAdvReset+0x38>
  {
    /* stop advertising timer */
    WsfTimerStop(&dmAdvCb.advTimer);
   10708:	4809      	ldr	r0, [pc, #36]	; (10730 <dmAdvReset+0x44>)
   1070a:	f008 fa59 	bl	18bc0 <WsfTimerStop>

    /* generate advertising stop event */
    advStop.status = HCI_SUCCESS;
   1070e:	2300      	movs	r3, #0
   10710:	f88d 3007 	strb.w	r3, [sp, #7]
    advStop.event = DM_ADV_STOP_IND;
   10714:	2322      	movs	r3, #34	; 0x22
   10716:	f88d 3006 	strb.w	r3, [sp, #6]

    /* call callback */
    (*dmCb.cback)((dmEvt_t *) &advStop);
   1071a:	4b06      	ldr	r3, [pc, #24]	; (10734 <dmAdvReset+0x48>)
   1071c:	689b      	ldr	r3, [r3, #8]
   1071e:	aa01      	add	r2, sp, #4
   10720:	4610      	mov	r0, r2
   10722:	4798      	blx	r3
  }

  /* reset legacy adv module */
  dmAdvInit();
   10724:	f7ff fd86 	bl	10234 <dmAdvInit>
}
   10728:	bf00      	nop
   1072a:	b003      	add	sp, #12
   1072c:	f85d fb04 	ldr.w	pc, [sp], #4
   10730:	10008968 	.word	0x10008968
   10734:	10008a50 	.word	0x10008a50

00010738 <dmAdvHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvHciHandler(hciEvt_t *pEvent)
{
   10738:	b500      	push	{lr}
   1073a:	b085      	sub	sp, #20
   1073c:	9001      	str	r0, [sp, #4]
  if (pEvent->hdr.event == HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT)
   1073e:	9b01      	ldr	r3, [sp, #4]
   10740:	789b      	ldrb	r3, [r3, #2]
   10742:	2b35      	cmp	r3, #53	; 0x35
   10744:	f040 8085 	bne.w	10852 <dmAdvHciHandler+0x11a>
  {
    uint8_t cbackEvent = 0;
   10748:	2300      	movs	r3, #0
   1074a:	f88d 300f 	strb.w	r3, [sp, #15]

    DM_TRACE_INFO1("HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1074e:	4b43      	ldr	r3, [pc, #268]	; (1085c <dmAdvHciHandler+0x124>)
   10750:	7ddb      	ldrb	r3, [r3, #23]
   10752:	4619      	mov	r1, r3
   10754:	4842      	ldr	r0, [pc, #264]	; (10860 <dmAdvHciHandler+0x128>)
   10756:	f008 faf7 	bl	18d48 <WsfTrace>

    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   1075a:	4b40      	ldr	r3, [pc, #256]	; (1085c <dmAdvHciHandler+0x124>)
   1075c:	7ddb      	ldrb	r3, [r3, #23]
   1075e:	3b02      	subs	r3, #2
   10760:	2b03      	cmp	r3, #3
   10762:	d860      	bhi.n	10826 <dmAdvHciHandler+0xee>
   10764:	a201      	add	r2, pc, #4	; (adr r2, 1076c <dmAdvHciHandler+0x34>)
   10766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1076a:	bf00      	nop
   1076c:	0001077d 	.word	0x0001077d
   10770:	0001077d 	.word	0x0001077d
   10774:	000107d9 	.word	0x000107d9
   10778:	000107d9 	.word	0x000107d9
    {
    case DM_ADV_STATE_STARTING:
    case DM_ADV_STATE_STARTING_DIRECTED:
      if (pEvent->hdr.status == HCI_SUCCESS)
   1077c:	9b01      	ldr	r3, [sp, #4]
   1077e:	78db      	ldrb	r3, [r3, #3]
   10780:	2b00      	cmp	r3, #0
   10782:	d125      	bne.n	107d0 <dmAdvHciHandler+0x98>
      {
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)
   10784:	4b35      	ldr	r3, [pc, #212]	; (1085c <dmAdvHciHandler+0x124>)
   10786:	7ddb      	ldrb	r3, [r3, #23]
   10788:	2b03      	cmp	r3, #3
   1078a:	d113      	bne.n	107b4 <dmAdvHciHandler+0x7c>
        {
          /* start advertising timer if applicable */
          if (dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] > 0)
   1078c:	4b33      	ldr	r3, [pc, #204]	; (1085c <dmAdvHciHandler+0x124>)
   1078e:	8b1b      	ldrh	r3, [r3, #24]
   10790:	2b00      	cmp	r3, #0
   10792:	d008      	beq.n	107a6 <dmAdvHciHandler+0x6e>
          {
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   10794:	4b31      	ldr	r3, [pc, #196]	; (1085c <dmAdvHciHandler+0x124>)
   10796:	2207      	movs	r2, #7
   10798:	731a      	strb	r2, [r3, #12]
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   1079a:	4b30      	ldr	r3, [pc, #192]	; (1085c <dmAdvHciHandler+0x124>)
   1079c:	8b1b      	ldrh	r3, [r3, #24]
   1079e:	4619      	mov	r1, r3
   107a0:	482e      	ldr	r0, [pc, #184]	; (1085c <dmAdvHciHandler+0x124>)
   107a2:	f008 f9f9 	bl	18b98 <WsfTimerStartMs>
          }

          /* Application callbacks only sent in undirected state */
          if (dmLegAdvCb.advType != DM_ADV_CONN_DIRECT_LO_DUTY)
   107a6:	4b2f      	ldr	r3, [pc, #188]	; (10864 <dmAdvHciHandler+0x12c>)
   107a8:	781b      	ldrb	r3, [r3, #0]
   107aa:	2b04      	cmp	r3, #4
   107ac:	d002      	beq.n	107b4 <dmAdvHciHandler+0x7c>
          {
            cbackEvent = DM_ADV_START_IND;
   107ae:	2321      	movs	r3, #33	; 0x21
   107b0:	f88d 300f 	strb.w	r3, [sp, #15]
          }
        }

        /* pass advertising start event to dev priv */
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   107b4:	2300      	movs	r3, #0
   107b6:	2200      	movs	r2, #0
   107b8:	2121      	movs	r1, #33	; 0x21
   107ba:	2014      	movs	r0, #20
   107bc:	f001 fac4 	bl	11d48 <dmDevPassEvtToDevPriv>

        /* store advertising type and state */
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   107c0:	4b28      	ldr	r3, [pc, #160]	; (10864 <dmAdvHciHandler+0x12c>)
   107c2:	781a      	ldrb	r2, [r3, #0]
   107c4:	4b25      	ldr	r3, [pc, #148]	; (1085c <dmAdvHciHandler+0x124>)
   107c6:	751a      	strb	r2, [r3, #20]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   107c8:	4b24      	ldr	r3, [pc, #144]	; (1085c <dmAdvHciHandler+0x124>)
   107ca:	2201      	movs	r2, #1
   107cc:	75da      	strb	r2, [r3, #23]
      }
      else
      {
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
      }
      break;
   107ce:	e02b      	b.n	10828 <dmAdvHciHandler+0xf0>
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   107d0:	4b22      	ldr	r3, [pc, #136]	; (1085c <dmAdvHciHandler+0x124>)
   107d2:	2200      	movs	r2, #0
   107d4:	75da      	strb	r2, [r3, #23]
      break;
   107d6:	e027      	b.n	10828 <dmAdvHciHandler+0xf0>

    case DM_ADV_STATE_STOPPING:
    case DM_ADV_STATE_STOPPING_DIRECTED:
      if (pEvent->hdr.status == HCI_SUCCESS)
   107d8:	9b01      	ldr	r3, [sp, #4]
   107da:	78db      	ldrb	r3, [r3, #3]
   107dc:	2b00      	cmp	r3, #0
   107de:	d11e      	bne.n	1081e <dmAdvHciHandler+0xe6>
      {
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)
   107e0:	4b1e      	ldr	r3, [pc, #120]	; (1085c <dmAdvHciHandler+0x124>)
   107e2:	7ddb      	ldrb	r3, [r3, #23]
   107e4:	2b05      	cmp	r3, #5
   107e6:	d10d      	bne.n	10804 <dmAdvHciHandler+0xcc>
        {
          /* stop advertising timer */
          WsfTimerStop(&dmAdvCb.advTimer);
   107e8:	481c      	ldr	r0, [pc, #112]	; (1085c <dmAdvHciHandler+0x124>)
   107ea:	f008 f9e9 	bl	18bc0 <WsfTimerStop>

          /* Application and DM callbacks only sent in undirected or low duty cycle directed state */
          if (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT_LO_DUTY)
   107ee:	4b1d      	ldr	r3, [pc, #116]	; (10864 <dmAdvHciHandler+0x12c>)
   107f0:	781b      	ldrb	r3, [r3, #0]
   107f2:	2b04      	cmp	r3, #4
   107f4:	d103      	bne.n	107fe <dmAdvHciHandler+0xc6>
          {
            cbackEvent = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   107f6:	2302      	movs	r3, #2
   107f8:	f88d 300f 	strb.w	r3, [sp, #15]
   107fc:	e002      	b.n	10804 <dmAdvHciHandler+0xcc>
          }
          else
          {
            cbackEvent = DM_ADV_STOP_IND;
   107fe:	2322      	movs	r3, #34	; 0x22
   10800:	f88d 300f 	strb.w	r3, [sp, #15]
          }
        }

        /* pass advertising stop event to dev priv */
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   10804:	2300      	movs	r3, #0
   10806:	2200      	movs	r2, #0
   10808:	2122      	movs	r1, #34	; 0x22
   1080a:	2015      	movs	r0, #21
   1080c:	f001 fa9c 	bl	11d48 <dmDevPassEvtToDevPriv>

        /* store advertising type and state */
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   10810:	4b12      	ldr	r3, [pc, #72]	; (1085c <dmAdvHciHandler+0x124>)
   10812:	22ff      	movs	r2, #255	; 0xff
   10814:	751a      	strb	r2, [r3, #20]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   10816:	4b11      	ldr	r3, [pc, #68]	; (1085c <dmAdvHciHandler+0x124>)
   10818:	2200      	movs	r2, #0
   1081a:	75da      	strb	r2, [r3, #23]
      }
      else
      {
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
      }
      break;
   1081c:	e004      	b.n	10828 <dmAdvHciHandler+0xf0>
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   1081e:	4b0f      	ldr	r3, [pc, #60]	; (1085c <dmAdvHciHandler+0x124>)
   10820:	2201      	movs	r2, #1
   10822:	75da      	strb	r2, [r3, #23]
      break;
   10824:	e000      	b.n	10828 <dmAdvHciHandler+0xf0>

    default:
      /* ignore the event */
      break;
   10826:	bf00      	nop
    }

    /* if DM conn notify needed */
    if (cbackEvent == HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT)
   10828:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1082c:	2b02      	cmp	r3, #2
   1082e:	d104      	bne.n	1083a <dmAdvHciHandler+0x102>
    {
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   10830:	213c      	movs	r1, #60	; 0x3c
   10832:	2000      	movs	r0, #0
   10834:	f7ff fd22 	bl	1027c <dmAdvGenConnCmpl>
    {
      pEvent->hdr.event = cbackEvent;
      (*dmCb.cback)((dmEvt_t *) pEvent);
    }
  }
}
   10838:	e00b      	b.n	10852 <dmAdvHciHandler+0x11a>
    else if (cbackEvent)
   1083a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1083e:	2b00      	cmp	r3, #0
   10840:	d007      	beq.n	10852 <dmAdvHciHandler+0x11a>
      pEvent->hdr.event = cbackEvent;
   10842:	9b01      	ldr	r3, [sp, #4]
   10844:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10848:	709a      	strb	r2, [r3, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1084a:	4b07      	ldr	r3, [pc, #28]	; (10868 <dmAdvHciHandler+0x130>)
   1084c:	689b      	ldr	r3, [r3, #8]
   1084e:	9801      	ldr	r0, [sp, #4]
   10850:	4798      	blx	r3
}
   10852:	bf00      	nop
   10854:	b005      	add	sp, #20
   10856:	f85d fb04 	ldr.w	pc, [sp], #4
   1085a:	bf00      	nop
   1085c:	10008968 	.word	0x10008968
   10860:	00028554 	.word	0x00028554
   10864:	10003608 	.word	0x10003608
   10868:	10008a50 	.word	0x10008a50

0001086c <dmAdvMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvMsgHandler(wsfMsgHdr_t *pMsg)
{
   1086c:	b500      	push	{lr}
   1086e:	b083      	sub	sp, #12
   10870:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmAdvAct[DM_MSG_MASK(pMsg->event)])((dmAdvMsg_t *)pMsg);
   10872:	9b01      	ldr	r3, [sp, #4]
   10874:	789b      	ldrb	r3, [r3, #2]
   10876:	f003 030f 	and.w	r3, r3, #15
   1087a:	4a04      	ldr	r2, [pc, #16]	; (1088c <dmAdvMsgHandler+0x20>)
   1087c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10880:	9801      	ldr	r0, [sp, #4]
   10882:	4798      	blx	r3
}
   10884:	bf00      	nop
   10886:	b003      	add	sp, #12
   10888:	f85d fb04 	ldr.w	pc, [sp], #4
   1088c:	000296a0 	.word	0x000296a0

00010890 <dmAdvStartDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStartDirected(uint8_t advType, uint16_t duration, uint8_t addrType, uint8_t *pAddr)
{
   10890:	b500      	push	{lr}
   10892:	b083      	sub	sp, #12
   10894:	9300      	str	r3, [sp, #0]
   10896:	4603      	mov	r3, r0
   10898:	f88d 3007 	strb.w	r3, [sp, #7]
   1089c:	460b      	mov	r3, r1
   1089e:	f8ad 3004 	strh.w	r3, [sp, #4]
   108a2:	4613      	mov	r3, r2
   108a4:	f88d 3006 	strb.w	r3, [sp, #6]
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   108a8:	4b13      	ldr	r3, [pc, #76]	; (108f8 <dmAdvStartDirected+0x68>)
   108aa:	7ddb      	ldrb	r3, [r3, #23]
   108ac:	4619      	mov	r1, r3
   108ae:	4813      	ldr	r0, [pc, #76]	; (108fc <dmAdvStartDirected+0x6c>)
   108b0:	f008 fa4a 	bl	18d48 <WsfTrace>

  /* if not advertising */
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   108b4:	4b10      	ldr	r3, [pc, #64]	; (108f8 <dmAdvStartDirected+0x68>)
   108b6:	7ddb      	ldrb	r3, [r3, #23]
   108b8:	2b00      	cmp	r3, #0
   108ba:	d118      	bne.n	108ee <dmAdvStartDirected+0x5e>
  {
    /* start advertising */
    HciLeSetAdvEnableCmd(TRUE);
   108bc:	2001      	movs	r0, #1
   108be:	f00c fda6 	bl	1d40e <HciLeSetAdvEnableCmd>

    /* store advertising info */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
   108c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   108c6:	2b01      	cmp	r3, #1
   108c8:	d101      	bne.n	108ce <dmAdvStartDirected+0x3e>
   108ca:	2202      	movs	r2, #2
   108cc:	e000      	b.n	108d0 <dmAdvStartDirected+0x40>
   108ce:	2203      	movs	r2, #3
   108d0:	4b09      	ldr	r3, [pc, #36]	; (108f8 <dmAdvStartDirected+0x68>)
   108d2:	75da      	strb	r2, [r3, #23]
                                              DM_ADV_STATE_STARTING_DIRECTED : DM_ADV_STATE_STARTING;

    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
   108d4:	4a08      	ldr	r2, [pc, #32]	; (108f8 <dmAdvStartDirected+0x68>)
   108d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   108da:	8313      	strh	r3, [r2, #24]
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
   108dc:	9900      	ldr	r1, [sp, #0]
   108de:	4808      	ldr	r0, [pc, #32]	; (10900 <dmAdvStartDirected+0x70>)
   108e0:	f00a fcf2 	bl	1b2c8 <BdaCpy>
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
   108e4:	4a04      	ldr	r2, [pc, #16]	; (108f8 <dmAdvStartDirected+0x68>)
   108e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   108ea:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  }
}
   108ee:	bf00      	nop
   108f0:	b003      	add	sp, #12
   108f2:	f85d fb04 	ldr.w	pc, [sp], #4
   108f6:	bf00      	nop
   108f8:	10008968 	.word	0x10008968
   108fc:	00028584 	.word	0x00028584
   10900:	10008983 	.word	0x10008983

00010904 <dmAdvStopDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStopDirected(void)
{
   10904:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvStopDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   10906:	4b10      	ldr	r3, [pc, #64]	; (10948 <dmAdvStopDirected+0x44>)
   10908:	7ddb      	ldrb	r3, [r3, #23]
   1090a:	4619      	mov	r1, r3
   1090c:	480f      	ldr	r0, [pc, #60]	; (1094c <dmAdvStopDirected+0x48>)
   1090e:	f008 fa1b 	bl	18d48 <WsfTrace>

  /* if advertising or starting advertising */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
   10912:	4b0d      	ldr	r3, [pc, #52]	; (10948 <dmAdvStopDirected+0x44>)
   10914:	7ddb      	ldrb	r3, [r3, #23]
   10916:	2b01      	cmp	r3, #1
   10918:	d007      	beq.n	1092a <dmAdvStopDirected+0x26>
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)    ||
   1091a:	4b0b      	ldr	r3, [pc, #44]	; (10948 <dmAdvStopDirected+0x44>)
   1091c:	7ddb      	ldrb	r3, [r3, #23]
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
   1091e:	2b03      	cmp	r3, #3
   10920:	d003      	beq.n	1092a <dmAdvStopDirected+0x26>
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING_DIRECTED))
   10922:	4b09      	ldr	r3, [pc, #36]	; (10948 <dmAdvStopDirected+0x44>)
   10924:	7ddb      	ldrb	r3, [r3, #23]
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)    ||
   10926:	2b02      	cmp	r3, #2
   10928:	d10b      	bne.n	10942 <dmAdvStopDirected+0x3e>
  {
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
   1092a:	4b09      	ldr	r3, [pc, #36]	; (10950 <dmAdvStopDirected+0x4c>)
   1092c:	781b      	ldrb	r3, [r3, #0]
   1092e:	2b01      	cmp	r3, #1
   10930:	d101      	bne.n	10936 <dmAdvStopDirected+0x32>
   10932:	2204      	movs	r2, #4
   10934:	e000      	b.n	10938 <dmAdvStopDirected+0x34>
   10936:	2205      	movs	r2, #5
   10938:	4b03      	ldr	r3, [pc, #12]	; (10948 <dmAdvStopDirected+0x44>)
   1093a:	75da      	strb	r2, [r3, #23]
                                              DM_ADV_STATE_STOPPING_DIRECTED : DM_ADV_STATE_STOPPING;
    HciLeSetAdvEnableCmd(FALSE);
   1093c:	2000      	movs	r0, #0
   1093e:	f00c fd66 	bl	1d40e <HciLeSetAdvEnableCmd>
  }
}
   10942:	bf00      	nop
   10944:	bd08      	pop	{r3, pc}
   10946:	bf00      	nop
   10948:	10008968 	.word	0x10008968
   1094c:	000285a4 	.word	0x000285a4
   10950:	10003608 	.word	0x10003608

00010954 <dmAdvConnected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnected(void)
{
   10954:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvConnected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   10956:	4b0b      	ldr	r3, [pc, #44]	; (10984 <dmAdvConnected+0x30>)
   10958:	7ddb      	ldrb	r3, [r3, #23]
   1095a:	4619      	mov	r1, r3
   1095c:	480a      	ldr	r0, [pc, #40]	; (10988 <dmAdvConnected+0x34>)
   1095e:	f008 f9f3 	bl	18d48 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
   10962:	4808      	ldr	r0, [pc, #32]	; (10984 <dmAdvConnected+0x30>)
   10964:	f008 f92c 	bl	18bc0 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   10968:	2300      	movs	r3, #0
   1096a:	2200      	movs	r2, #0
   1096c:	2122      	movs	r1, #34	; 0x22
   1096e:	2015      	movs	r0, #21
   10970:	f001 f9ea 	bl	11d48 <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   10974:	4b03      	ldr	r3, [pc, #12]	; (10984 <dmAdvConnected+0x30>)
   10976:	22ff      	movs	r2, #255	; 0xff
   10978:	751a      	strb	r2, [r3, #20]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   1097a:	4b02      	ldr	r3, [pc, #8]	; (10984 <dmAdvConnected+0x30>)
   1097c:	2200      	movs	r2, #0
   1097e:	75da      	strb	r2, [r3, #23]
}
   10980:	bf00      	nop
   10982:	bd08      	pop	{r3, pc}
   10984:	10008968 	.word	0x10008968
   10988:	000285c4 	.word	0x000285c4

0001098c <dmAdvConnectFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnectFailed(void)
{
   1098c:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvConnectFailed: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1098e:	4b0b      	ldr	r3, [pc, #44]	; (109bc <dmAdvConnectFailed+0x30>)
   10990:	7ddb      	ldrb	r3, [r3, #23]
   10992:	4619      	mov	r1, r3
   10994:	480a      	ldr	r0, [pc, #40]	; (109c0 <dmAdvConnectFailed+0x34>)
   10996:	f008 f9d7 	bl	18d48 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
   1099a:	4808      	ldr	r0, [pc, #32]	; (109bc <dmAdvConnectFailed+0x30>)
   1099c:	f008 f910 	bl	18bc0 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   109a0:	2300      	movs	r3, #0
   109a2:	2200      	movs	r2, #0
   109a4:	2122      	movs	r1, #34	; 0x22
   109a6:	2015      	movs	r0, #21
   109a8:	f001 f9ce 	bl	11d48 <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   109ac:	4b03      	ldr	r3, [pc, #12]	; (109bc <dmAdvConnectFailed+0x30>)
   109ae:	22ff      	movs	r2, #255	; 0xff
   109b0:	751a      	strb	r2, [r3, #20]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   109b2:	4b02      	ldr	r3, [pc, #8]	; (109bc <dmAdvConnectFailed+0x30>)
   109b4:	2200      	movs	r2, #0
   109b6:	75da      	strb	r2, [r3, #23]
}
   109b8:	bf00      	nop
   109ba:	bd08      	pop	{r3, pc}
   109bc:	10008968 	.word	0x10008968
   109c0:	000285e0 	.word	0x000285e0

000109c4 <DmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvInit(void)
{
   109c4:	b508      	push	{r3, lr}
  WsfTaskLock();
   109c6:	f007 fde1 	bl	1858c <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_ADV] = (dmFcnIf_t *) &dmAdvFcnIf;
   109ca:	4b07      	ldr	r3, [pc, #28]	; (109e8 <DmAdvInit+0x24>)
   109cc:	4a07      	ldr	r2, [pc, #28]	; (109ec <DmAdvInit+0x28>)
   109ce:	601a      	str	r2, [r3, #0]

  /* initialize legacy adv module */
  dmAdvInit();
   109d0:	f7ff fc30 	bl	10234 <dmAdvInit>

  /* clear set advertising set random address callback */
  dmDevCb.advSetRandAddrCback = NULL;
   109d4:	4b06      	ldr	r3, [pc, #24]	; (109f0 <DmAdvInit+0x2c>)
   109d6:	2200      	movs	r2, #0
   109d8:	601a      	str	r2, [r3, #0]

  /* initialize HCI VS module */
  HciVsInit(0);
   109da:	2000      	movs	r0, #0
   109dc:	f00f fed2 	bl	20784 <HciVsInit>

  WsfTaskUnlock();
   109e0:	f007 fdd9 	bl	18596 <WsfTaskUnlock>
}
   109e4:	bf00      	nop
   109e6:	bd08      	pop	{r3, pc}
   109e8:	10002b00 	.word	0x10002b00
   109ec:	000296c0 	.word	0x000296c0
   109f0:	10008a4c 	.word	0x10008a4c

000109f4 <dmConnCmplStates>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
static dmConnCcb_t *dmConnCmplStates(void)
{
   109f4:	b500      	push	{lr}
   109f6:	b083      	sub	sp, #12
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   109f8:	4b18      	ldr	r3, [pc, #96]	; (10a5c <dmConnCmplStates+0x68>)
   109fa:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  /* if there's a ccb in accepting state */
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   109fc:	2303      	movs	r3, #3
   109fe:	f88d 3003 	strb.w	r3, [sp, #3]
   10a02:	e021      	b.n	10a48 <dmConnCmplStates+0x54>
  {
    /* look for connection in accepting state or disconnecting state, cancelled connection */
    if (pCcb->inUse &&
   10a04:	9b01      	ldr	r3, [sp, #4]
   10a06:	7d9b      	ldrb	r3, [r3, #22]
   10a08:	2b00      	cmp	r3, #0
   10a0a:	d015      	beq.n	10a38 <dmConnCmplStates+0x44>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   10a0c:	9b01      	ldr	r3, [sp, #4]
   10a0e:	7d5b      	ldrb	r3, [r3, #21]
    if (pCcb->inUse &&
   10a10:	2b02      	cmp	r3, #2
   10a12:	d009      	beq.n	10a28 <dmConnCmplStates+0x34>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   10a14:	9b01      	ldr	r3, [sp, #4]
   10a16:	7d5b      	ldrb	r3, [r3, #21]
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   10a18:	2b04      	cmp	r3, #4
   10a1a:	d10d      	bne.n	10a38 <dmConnCmplStates+0x44>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   10a1c:	9b01      	ldr	r3, [sp, #4]
   10a1e:	899b      	ldrh	r3, [r3, #12]
   10a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10a24:	4293      	cmp	r3, r2
   10a26:	d107      	bne.n	10a38 <dmConnCmplStates+0x44>
    {
      DM_TRACE_INFO1("dmConnCmplStates %d", pCcb->connId);
   10a28:	9b01      	ldr	r3, [sp, #4]
   10a2a:	7c1b      	ldrb	r3, [r3, #16]
   10a2c:	4619      	mov	r1, r3
   10a2e:	480c      	ldr	r0, [pc, #48]	; (10a60 <dmConnCmplStates+0x6c>)
   10a30:	f008 f98a 	bl	18d48 <WsfTrace>
      return pCcb;
   10a34:	9b01      	ldr	r3, [sp, #4]
   10a36:	e00c      	b.n	10a52 <dmConnCmplStates+0x5e>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   10a38:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a3c:	3b01      	subs	r3, #1
   10a3e:	f88d 3003 	strb.w	r3, [sp, #3]
   10a42:	9b01      	ldr	r3, [sp, #4]
   10a44:	3330      	adds	r3, #48	; 0x30
   10a46:	9301      	str	r3, [sp, #4]
   10a48:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a4c:	2b00      	cmp	r3, #0
   10a4e:	d1d9      	bne.n	10a04 <dmConnCmplStates+0x10>
    }
  }

  return NULL;
   10a50:	2300      	movs	r3, #0
}
   10a52:	4618      	mov	r0, r3
   10a54:	b003      	add	sp, #12
   10a56:	f85d fb04 	ldr.w	pc, [sp], #4
   10a5a:	bf00      	nop
   10a5c:	1000898c 	.word	0x1000898c
   10a60:	00028600 	.word	0x00028600

00010a64 <dmConnCcbAlloc>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbAlloc(uint8_t *pAddr)
{
   10a64:	b500      	push	{lr}
   10a66:	b085      	sub	sp, #20
   10a68:	9001      	str	r0, [sp, #4]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   10a6a:	4b22      	ldr	r3, [pc, #136]	; (10af4 <dmConnCcbAlloc+0x90>)
   10a6c:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   10a6e:	2300      	movs	r3, #0
   10a70:	f88d 300b 	strb.w	r3, [sp, #11]
   10a74:	e031      	b.n	10ada <dmConnCcbAlloc+0x76>
  {
    if (pCcb->inUse == FALSE)
   10a76:	9b03      	ldr	r3, [sp, #12]
   10a78:	7d9b      	ldrb	r3, [r3, #22]
   10a7a:	2b00      	cmp	r3, #0
   10a7c:	d125      	bne.n	10aca <dmConnCcbAlloc+0x66>
    {
      memset(pCcb, 0, sizeof(dmConnCcb_t));
   10a7e:	2230      	movs	r2, #48	; 0x30
   10a80:	2100      	movs	r1, #0
   10a82:	9803      	ldr	r0, [sp, #12]
   10a84:	f7fb fc06 	bl	c294 <memset>

      BdaCpy(pCcb->peerAddr, pAddr);
   10a88:	9b03      	ldr	r3, [sp, #12]
   10a8a:	9901      	ldr	r1, [sp, #4]
   10a8c:	4618      	mov	r0, r3
   10a8e:	f00a fc1b 	bl	1b2c8 <BdaCpy>
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   10a92:	9b03      	ldr	r3, [sp, #12]
   10a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10a98:	819a      	strh	r2, [r3, #12]
      pCcb->connId = i + 1;
   10a9a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10a9e:	3301      	adds	r3, #1
   10aa0:	b2da      	uxtb	r2, r3
   10aa2:	9b03      	ldr	r3, [sp, #12]
   10aa4:	741a      	strb	r2, [r3, #16]
      pCcb->updating = FALSE;
   10aa6:	9b03      	ldr	r3, [sp, #12]
   10aa8:	2200      	movs	r2, #0
   10aaa:	745a      	strb	r2, [r3, #17]
      pCcb->inUse = TRUE;
   10aac:	9b03      	ldr	r3, [sp, #12]
   10aae:	2201      	movs	r2, #1
   10ab0:	759a      	strb	r2, [r3, #22]
      pCcb->featuresPresent = FALSE;
   10ab2:	9b03      	ldr	r3, [sp, #12]
   10ab4:	2200      	movs	r2, #0
   10ab6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   10aba:	9b03      	ldr	r3, [sp, #12]
   10abc:	7c1b      	ldrb	r3, [r3, #16]
   10abe:	4619      	mov	r1, r3
   10ac0:	480d      	ldr	r0, [pc, #52]	; (10af8 <dmConnCcbAlloc+0x94>)
   10ac2:	f008 f941 	bl	18d48 <WsfTrace>

      return pCcb;
   10ac6:	9b03      	ldr	r3, [sp, #12]
   10ac8:	e00f      	b.n	10aea <dmConnCcbAlloc+0x86>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   10aca:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10ace:	3301      	adds	r3, #1
   10ad0:	f88d 300b 	strb.w	r3, [sp, #11]
   10ad4:	9b03      	ldr	r3, [sp, #12]
   10ad6:	3330      	adds	r3, #48	; 0x30
   10ad8:	9303      	str	r3, [sp, #12]
   10ada:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10ade:	2b02      	cmp	r3, #2
   10ae0:	d9c9      	bls.n	10a76 <dmConnCcbAlloc+0x12>
    }
  }

  DM_TRACE_ERR0("dmConnCcbAlloc failed");
   10ae2:	4806      	ldr	r0, [pc, #24]	; (10afc <dmConnCcbAlloc+0x98>)
   10ae4:	f008 f930 	bl	18d48 <WsfTrace>

  return NULL;
   10ae8:	2300      	movs	r3, #0
}
   10aea:	4618      	mov	r0, r3
   10aec:	b005      	add	sp, #20
   10aee:	f85d fb04 	ldr.w	pc, [sp], #4
   10af2:	bf00      	nop
   10af4:	1000898c 	.word	0x1000898c
   10af8:	00028614 	.word	0x00028614
   10afc:	00028628 	.word	0x00028628

00010b00 <dmConnCcbDealloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnCcbDealloc(dmConnCcb_t *pCcb)
{
   10b00:	b500      	push	{lr}
   10b02:	b083      	sub	sp, #12
   10b04:	9001      	str	r0, [sp, #4]
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   10b06:	9b01      	ldr	r3, [sp, #4]
   10b08:	7c1b      	ldrb	r3, [r3, #16]
   10b0a:	4619      	mov	r1, r3
   10b0c:	4804      	ldr	r0, [pc, #16]	; (10b20 <dmConnCcbDealloc+0x20>)
   10b0e:	f008 f91b 	bl	18d48 <WsfTrace>

  pCcb->inUse = FALSE;
   10b12:	9b01      	ldr	r3, [sp, #4]
   10b14:	2200      	movs	r2, #0
   10b16:	759a      	strb	r2, [r3, #22]
}
   10b18:	bf00      	nop
   10b1a:	b003      	add	sp, #12
   10b1c:	f85d fb04 	ldr.w	pc, [sp], #4
   10b20:	00028640 	.word	0x00028640

00010b24 <dmConnCcbByHandle>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbByHandle(uint16_t handle)
{
   10b24:	b500      	push	{lr}
   10b26:	b085      	sub	sp, #20
   10b28:	4603      	mov	r3, r0
   10b2a:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   10b2e:	4b14      	ldr	r3, [pc, #80]	; (10b80 <dmConnCcbByHandle+0x5c>)
   10b30:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   10b32:	2303      	movs	r3, #3
   10b34:	f88d 300b 	strb.w	r3, [sp, #11]
   10b38:	e013      	b.n	10b62 <dmConnCcbByHandle+0x3e>
  {
    if (pCcb->inUse && (pCcb->handle == handle))
   10b3a:	9b03      	ldr	r3, [sp, #12]
   10b3c:	7d9b      	ldrb	r3, [r3, #22]
   10b3e:	2b00      	cmp	r3, #0
   10b40:	d007      	beq.n	10b52 <dmConnCcbByHandle+0x2e>
   10b42:	9b03      	ldr	r3, [sp, #12]
   10b44:	899b      	ldrh	r3, [r3, #12]
   10b46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10b4a:	429a      	cmp	r2, r3
   10b4c:	d101      	bne.n	10b52 <dmConnCcbByHandle+0x2e>
    {
      return pCcb;
   10b4e:	9b03      	ldr	r3, [sp, #12]
   10b50:	e012      	b.n	10b78 <dmConnCcbByHandle+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   10b52:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10b56:	3b01      	subs	r3, #1
   10b58:	f88d 300b 	strb.w	r3, [sp, #11]
   10b5c:	9b03      	ldr	r3, [sp, #12]
   10b5e:	3330      	adds	r3, #48	; 0x30
   10b60:	9303      	str	r3, [sp, #12]
   10b62:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10b66:	2b00      	cmp	r3, #0
   10b68:	d1e7      	bne.n	10b3a <dmConnCcbByHandle+0x16>
    }
  }

  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   10b6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10b6e:	4619      	mov	r1, r3
   10b70:	4804      	ldr	r0, [pc, #16]	; (10b84 <dmConnCcbByHandle+0x60>)
   10b72:	f008 f8e9 	bl	18d48 <WsfTrace>

  return NULL;
   10b76:	2300      	movs	r3, #0
}
   10b78:	4618      	mov	r0, r3
   10b7a:	b005      	add	sp, #20
   10b7c:	f85d fb04 	ldr.w	pc, [sp], #4
   10b80:	1000898c 	.word	0x1000898c
   10b84:	00028654 	.word	0x00028654

00010b88 <dmConnCcbByBdAddr>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbByBdAddr(uint8_t *pAddr)
{
   10b88:	b500      	push	{lr}
   10b8a:	b085      	sub	sp, #20
   10b8c:	9001      	str	r0, [sp, #4]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   10b8e:	4b14      	ldr	r3, [pc, #80]	; (10be0 <dmConnCcbByBdAddr+0x58>)
   10b90:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   10b92:	2303      	movs	r3, #3
   10b94:	f88d 300b 	strb.w	r3, [sp, #11]
   10b98:	e015      	b.n	10bc6 <dmConnCcbByBdAddr+0x3e>
  {
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   10b9a:	9b03      	ldr	r3, [sp, #12]
   10b9c:	7d9b      	ldrb	r3, [r3, #22]
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	d009      	beq.n	10bb6 <dmConnCcbByBdAddr+0x2e>
   10ba2:	9b03      	ldr	r3, [sp, #12]
   10ba4:	9901      	ldr	r1, [sp, #4]
   10ba6:	4618      	mov	r0, r3
   10ba8:	f00a fb9b 	bl	1b2e2 <BdaCmp>
   10bac:	4603      	mov	r3, r0
   10bae:	2b00      	cmp	r3, #0
   10bb0:	d001      	beq.n	10bb6 <dmConnCcbByBdAddr+0x2e>
    {
      return pCcb;
   10bb2:	9b03      	ldr	r3, [sp, #12]
   10bb4:	e00f      	b.n	10bd6 <dmConnCcbByBdAddr+0x4e>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   10bb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10bba:	3b01      	subs	r3, #1
   10bbc:	f88d 300b 	strb.w	r3, [sp, #11]
   10bc0:	9b03      	ldr	r3, [sp, #12]
   10bc2:	3330      	adds	r3, #48	; 0x30
   10bc4:	9303      	str	r3, [sp, #12]
   10bc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d1e5      	bne.n	10b9a <dmConnCcbByBdAddr+0x12>
    }
  }

  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
   10bce:	4805      	ldr	r0, [pc, #20]	; (10be4 <dmConnCcbByBdAddr+0x5c>)
   10bd0:	f008 f8ba 	bl	18d48 <WsfTrace>

  return NULL;
   10bd4:	2300      	movs	r3, #0
}
   10bd6:	4618      	mov	r0, r3
   10bd8:	b005      	add	sp, #20
   10bda:	f85d fb04 	ldr.w	pc, [sp], #4
   10bde:	bf00      	nop
   10be0:	1000898c 	.word	0x1000898c
   10be4:	00028678 	.word	0x00028678

00010be8 <dmConnCcbById>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbById(dmConnId_t connId)
{
   10be8:	b082      	sub	sp, #8
   10bea:	4603      	mov	r3, r0
   10bec:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  connId--;
   10bf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10bf4:	3b01      	subs	r3, #1
   10bf6:	f88d 3007 	strb.w	r3, [sp, #7]
  if (dmConnCb.ccb[connId].inUse)
   10bfa:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10bfe:	490b      	ldr	r1, [pc, #44]	; (10c2c <dmConnCcbById+0x44>)
   10c00:	4613      	mov	r3, r2
   10c02:	005b      	lsls	r3, r3, #1
   10c04:	4413      	add	r3, r2
   10c06:	011b      	lsls	r3, r3, #4
   10c08:	440b      	add	r3, r1
   10c0a:	3316      	adds	r3, #22
   10c0c:	781b      	ldrb	r3, [r3, #0]
   10c0e:	2b00      	cmp	r3, #0
   10c10:	d008      	beq.n	10c24 <dmConnCcbById+0x3c>
  {
    return &dmConnCb.ccb[connId];
   10c12:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10c16:	4613      	mov	r3, r2
   10c18:	005b      	lsls	r3, r3, #1
   10c1a:	4413      	add	r3, r2
   10c1c:	011b      	lsls	r3, r3, #4
   10c1e:	4a03      	ldr	r2, [pc, #12]	; (10c2c <dmConnCcbById+0x44>)
   10c20:	4413      	add	r3, r2
   10c22:	e000      	b.n	10c26 <dmConnCcbById+0x3e>
  }

  return NULL;
   10c24:	2300      	movs	r3, #0
}
   10c26:	4618      	mov	r0, r3
   10c28:	b002      	add	sp, #8
   10c2a:	4770      	bx	lr
   10c2c:	1000898c 	.word	0x1000898c

00010c30 <dmConnNum>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t dmConnNum(void)
{
   10c30:	b082      	sub	sp, #8
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   10c32:	4b11      	ldr	r3, [pc, #68]	; (10c78 <dmConnNum+0x48>)
   10c34:	9301      	str	r3, [sp, #4]
  uint8_t       i, j;

  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   10c36:	2303      	movs	r3, #3
   10c38:	f88d 3003 	strb.w	r3, [sp, #3]
   10c3c:	2300      	movs	r3, #0
   10c3e:	f88d 3002 	strb.w	r3, [sp, #2]
   10c42:	e010      	b.n	10c66 <dmConnNum+0x36>
  {
    if (pCcb->inUse)
   10c44:	9b01      	ldr	r3, [sp, #4]
   10c46:	7d9b      	ldrb	r3, [r3, #22]
   10c48:	2b00      	cmp	r3, #0
   10c4a:	d004      	beq.n	10c56 <dmConnNum+0x26>
    {
      j++;
   10c4c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   10c50:	3301      	adds	r3, #1
   10c52:	f88d 3002 	strb.w	r3, [sp, #2]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   10c56:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10c5a:	3b01      	subs	r3, #1
   10c5c:	f88d 3003 	strb.w	r3, [sp, #3]
   10c60:	9b01      	ldr	r3, [sp, #4]
   10c62:	3330      	adds	r3, #48	; 0x30
   10c64:	9301      	str	r3, [sp, #4]
   10c66:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10c6a:	2b00      	cmp	r3, #0
   10c6c:	d1ea      	bne.n	10c44 <dmConnNum+0x14>
    }
  }

  return j;
   10c6e:	f89d 3002 	ldrb.w	r3, [sp, #2]
}
   10c72:	4618      	mov	r0, r3
   10c74:	b002      	add	sp, #8
   10c76:	4770      	bx	lr
   10c78:	1000898c 	.word	0x1000898c

00010c7c <dmConnExecCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnExecCback(dmConnMsg_t *pMsg)
{
   10c7c:	b500      	push	{lr}
   10c7e:	b085      	sub	sp, #20
   10c80:	9001      	str	r0, [sp, #4]
  uint8_t i;

  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   10c82:	2300      	movs	r3, #0
   10c84:	f88d 300f 	strb.w	r3, [sp, #15]
   10c88:	e014      	b.n	10cb4 <dmConnExecCback+0x38>
  {
    if (dmConnCb.connCback[i] != NULL)
   10c8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c8e:	4a0d      	ldr	r2, [pc, #52]	; (10cc4 <dmConnExecCback+0x48>)
   10c90:	3324      	adds	r3, #36	; 0x24
   10c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c96:	2b00      	cmp	r3, #0
   10c98:	d007      	beq.n	10caa <dmConnExecCback+0x2e>
    {
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   10c9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c9e:	4a09      	ldr	r2, [pc, #36]	; (10cc4 <dmConnExecCback+0x48>)
   10ca0:	3324      	adds	r3, #36	; 0x24
   10ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ca6:	9801      	ldr	r0, [sp, #4]
   10ca8:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   10caa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10cae:	3301      	adds	r3, #1
   10cb0:	f88d 300f 	strb.w	r3, [sp, #15]
   10cb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10cb8:	2b04      	cmp	r3, #4
   10cba:	d9e6      	bls.n	10c8a <dmConnExecCback+0xe>
    }
  }
}
   10cbc:	bf00      	nop
   10cbe:	b005      	add	sp, #20
   10cc0:	f85d fb04 	ldr.w	pc, [sp], #4
   10cc4:	1000898c 	.word	0x1000898c

00010cc8 <dmConnSmActNone>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActNone(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   10cc8:	b082      	sub	sp, #8
   10cca:	9001      	str	r0, [sp, #4]
   10ccc:	9100      	str	r1, [sp, #0]
  return;
   10cce:	bf00      	nop
}
   10cd0:	b002      	add	sp, #8
   10cd2:	4770      	bx	lr

00010cd4 <dmConnSmActClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActClose(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   10cd4:	b500      	push	{lr}
   10cd6:	b083      	sub	sp, #12
   10cd8:	9001      	str	r0, [sp, #4]
   10cda:	9100      	str	r1, [sp, #0]
  HciDisconnectCmd(pCcb->handle, pMsg->apiClose.reason);
   10cdc:	9b01      	ldr	r3, [sp, #4]
   10cde:	899a      	ldrh	r2, [r3, #12]
   10ce0:	9b00      	ldr	r3, [sp, #0]
   10ce2:	791b      	ldrb	r3, [r3, #4]
   10ce4:	4619      	mov	r1, r3
   10ce6:	4610      	mov	r0, r2
   10ce8:	f00c f878 	bl	1cddc <HciDisconnectCmd>
}
   10cec:	bf00      	nop
   10cee:	b003      	add	sp, #12
   10cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00010cf4 <dmConnSmActConnOpened>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnOpened(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   10cf4:	b510      	push	{r4, lr}
   10cf6:	b082      	sub	sp, #8
   10cf8:	9001      	str	r0, [sp, #4]
   10cfa:	9100      	str	r1, [sp, #0]
  /* store peer address, handle, and role */
  BdaCpy(pCcb->peerAddr, pMsg->hciLeConnCmpl.peerAddr);
   10cfc:	9a01      	ldr	r2, [sp, #4]
   10cfe:	9b00      	ldr	r3, [sp, #0]
   10d00:	330a      	adds	r3, #10
   10d02:	4619      	mov	r1, r3
   10d04:	4610      	mov	r0, r2
   10d06:	f00a fadf 	bl	1b2c8 <BdaCpy>
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   10d0a:	9b00      	ldr	r3, [sp, #0]
   10d0c:	88da      	ldrh	r2, [r3, #6]
   10d0e:	9b01      	ldr	r3, [sp, #4]
   10d10:	819a      	strh	r2, [r3, #12]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   10d12:	9b00      	ldr	r3, [sp, #0]
   10d14:	7a5b      	ldrb	r3, [r3, #9]
   10d16:	4618      	mov	r0, r3
   10d18:	f001 f95c 	bl	11fd4 <DmHostAddrType>
   10d1c:	4603      	mov	r3, r0
   10d1e:	461a      	mov	r2, r3
   10d20:	9b01      	ldr	r3, [sp, #4]
   10d22:	74da      	strb	r2, [r3, #19]
  pCcb->role = pMsg->hciLeConnCmpl.role;
   10d24:	9b00      	ldr	r3, [sp, #0]
   10d26:	7a1a      	ldrb	r2, [r3, #8]
   10d28:	9b01      	ldr	r3, [sp, #4]
   10d2a:	765a      	strb	r2, [r3, #25]

  /* set local address type of connection */
  if (pCcb->role == DM_ROLE_MASTER)
   10d2c:	9b01      	ldr	r3, [sp, #4]
   10d2e:	7e5b      	ldrb	r3, [r3, #25]
   10d30:	2b00      	cmp	r3, #0
   10d32:	d104      	bne.n	10d3e <dmConnSmActConnOpened+0x4a>
  {
    pCcb->localAddrType = dmCb.connAddrType;
   10d34:	4b2a      	ldr	r3, [pc, #168]	; (10de0 <dmConnSmActConnOpened+0xec>)
   10d36:	7b5a      	ldrb	r2, [r3, #13]
   10d38:	9b01      	ldr	r3, [sp, #4]
   10d3a:	751a      	strb	r2, [r3, #20]
   10d3c:	e003      	b.n	10d46 <dmConnSmActConnOpened+0x52>
  }
  else
  {
    pCcb->localAddrType = dmCb.advAddrType;
   10d3e:	4b28      	ldr	r3, [pc, #160]	; (10de0 <dmConnSmActConnOpened+0xec>)
   10d40:	7b9a      	ldrb	r2, [r3, #14]
   10d42:	9b01      	ldr	r3, [sp, #4]
   10d44:	751a      	strb	r2, [r3, #20]
  }

  /* set local address of connection */
  if (pCcb->localAddrType == DM_ADDR_PUBLIC)
   10d46:	9b01      	ldr	r3, [sp, #4]
   10d48:	7d1b      	ldrb	r3, [r3, #20]
   10d4a:	2b00      	cmp	r3, #0
   10d4c:	d109      	bne.n	10d62 <dmConnSmActConnOpened+0x6e>
  {
    BdaCpy(pCcb->localAddr, HciGetBdAddr());
   10d4e:	9b01      	ldr	r3, [sp, #4]
   10d50:	1d9c      	adds	r4, r3, #6
   10d52:	f00d fbbb 	bl	1e4cc <HciGetBdAddr>
   10d56:	4603      	mov	r3, r0
   10d58:	4619      	mov	r1, r3
   10d5a:	4620      	mov	r0, r4
   10d5c:	f00a fab4 	bl	1b2c8 <BdaCpy>
   10d60:	e005      	b.n	10d6e <dmConnSmActConnOpened+0x7a>
  }
  else
  {
    BdaCpy(pCcb->localAddr, dmCb.localAddr);
   10d62:	9b01      	ldr	r3, [sp, #4]
   10d64:	3306      	adds	r3, #6
   10d66:	491e      	ldr	r1, [pc, #120]	; (10de0 <dmConnSmActConnOpened+0xec>)
   10d68:	4618      	mov	r0, r3
   10d6a:	f00a faad 	bl	1b2c8 <BdaCpy>
  }

  /* store enhanced fields */
  BdaCpy(pCcb->localRpa, pMsg->hciLeConnCmpl.localRpa);
   10d6e:	9b01      	ldr	r3, [sp, #4]
   10d70:	f103 021a 	add.w	r2, r3, #26
   10d74:	9b00      	ldr	r3, [sp, #0]
   10d76:	3317      	adds	r3, #23
   10d78:	4619      	mov	r1, r3
   10d7a:	4610      	mov	r0, r2
   10d7c:	f00a faa4 	bl	1b2c8 <BdaCpy>
  BdaCpy(pCcb->peerRpa, pMsg->hciLeConnCmpl.peerRpa);
   10d80:	9b01      	ldr	r3, [sp, #4]
   10d82:	f103 0220 	add.w	r2, r3, #32
   10d86:	9b00      	ldr	r3, [sp, #0]
   10d88:	331d      	adds	r3, #29
   10d8a:	4619      	mov	r1, r3
   10d8c:	4610      	mov	r0, r2
   10d8e:	f00a fa9b 	bl	1b2c8 <BdaCpy>

  /* initialize idle state */
  pCcb->idleMask = 0;
   10d92:	9b01      	ldr	r3, [sp, #4]
   10d94:	2200      	movs	r2, #0
   10d96:	81da      	strh	r2, [r3, #14]

  /* if central */
  if (pCcb->role == DM_ROLE_MASTER)
   10d98:	9b01      	ldr	r3, [sp, #4]
   10d9a:	7e5b      	ldrb	r3, [r3, #25]
   10d9c:	2b00      	cmp	r3, #0
   10d9e:	d110      	bne.n	10dc2 <dmConnSmActConnOpened+0xce>
  {
    /* pass connection initiation completed to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0 , 0);
   10da0:	2300      	movs	r3, #0
   10da2:	2200      	movs	r2, #0
   10da4:	2101      	movs	r1, #1
   10da6:	2016      	movs	r0, #22
   10da8:	f000 ffce 	bl	11d48 <dmDevPassEvtToDevPriv>

    /* if first connection opened */
    if (dmConnNum() == 1)
   10dac:	f7ff ff40 	bl	10c30 <dmConnNum>
   10db0:	4603      	mov	r3, r0
   10db2:	2b01      	cmp	r3, #1
   10db4:	d105      	bne.n	10dc2 <dmConnSmActConnOpened+0xce>
    {
      /* pass conn open event to dev priv */
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_CONN_OPEN_IND, 0, 0);
   10db6:	2300      	movs	r3, #0
   10db8:	2200      	movs	r2, #0
   10dba:	2127      	movs	r1, #39	; 0x27
   10dbc:	2014      	movs	r0, #20
   10dbe:	f000 ffc3 	bl	11d48 <dmDevPassEvtToDevPriv>
    }
  }

  /* pass conn open event to Connection CTE */
  dmDevPassEvtToConnCte(DM_CONN_OPEN_IND, pCcb->connId);
   10dc2:	9b01      	ldr	r3, [sp, #4]
   10dc4:	7c1b      	ldrb	r3, [r3, #16]
   10dc6:	4619      	mov	r1, r3
   10dc8:	2027      	movs	r0, #39	; 0x27
   10dca:	f000 fff7 	bl	11dbc <dmDevPassEvtToConnCte>

  pMsg->hdr.event = DM_CONN_OPEN_IND;
   10dce:	9b00      	ldr	r3, [sp, #0]
   10dd0:	2227      	movs	r2, #39	; 0x27
   10dd2:	709a      	strb	r2, [r3, #2]
  dmConnExecCback(pMsg);
   10dd4:	9800      	ldr	r0, [sp, #0]
   10dd6:	f7ff ff51 	bl	10c7c <dmConnExecCback>
}
   10dda:	bf00      	nop
   10ddc:	b002      	add	sp, #8
   10dde:	bd10      	pop	{r4, pc}
   10de0:	10008a50 	.word	0x10008a50

00010de4 <dmConnSmActConnFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   10de4:	b500      	push	{lr}
   10de6:	b083      	sub	sp, #12
   10de8:	9001      	str	r0, [sp, #4]
   10dea:	9100      	str	r1, [sp, #0]
  /* deallocate ccb */
  dmConnCcbDealloc(pCcb);
   10dec:	9801      	ldr	r0, [sp, #4]
   10dee:	f7ff fe87 	bl	10b00 <dmConnCcbDealloc>

  /* if central */
  if (pCcb->role == DM_ROLE_MASTER)
   10df2:	9b01      	ldr	r3, [sp, #4]
   10df4:	7e5b      	ldrb	r3, [r3, #25]
   10df6:	2b00      	cmp	r3, #0
   10df8:	d110      	bne.n	10e1c <dmConnSmActConnFailed+0x38>
  {
    /* pass connection initiation completed to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
   10dfa:	2300      	movs	r3, #0
   10dfc:	2200      	movs	r2, #0
   10dfe:	2101      	movs	r1, #1
   10e00:	2016      	movs	r0, #22
   10e02:	f000 ffa1 	bl	11d48 <dmDevPassEvtToDevPriv>

    /* if last connection closed */
    if (dmConnNum() == 0)
   10e06:	f7ff ff13 	bl	10c30 <dmConnNum>
   10e0a:	4603      	mov	r3, r0
   10e0c:	2b00      	cmp	r3, #0
   10e0e:	d105      	bne.n	10e1c <dmConnSmActConnFailed+0x38>
    {
      /* pass conn close event to dev priv */
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0 , 0);
   10e10:	2300      	movs	r3, #0
   10e12:	2200      	movs	r2, #0
   10e14:	2128      	movs	r1, #40	; 0x28
   10e16:	2015      	movs	r0, #21
   10e18:	f000 ff96 	bl	11d48 <dmDevPassEvtToDevPriv>
    }
  }

  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   10e1c:	9b00      	ldr	r3, [sp, #0]
   10e1e:	2228      	movs	r2, #40	; 0x28
   10e20:	709a      	strb	r2, [r3, #2]
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   10e22:	9b00      	ldr	r3, [sp, #0]
   10e24:	2200      	movs	r2, #0
   10e26:	721a      	strb	r2, [r3, #8]
   10e28:	9b00      	ldr	r3, [sp, #0]
   10e2a:	2200      	movs	r2, #0
   10e2c:	80da      	strh	r2, [r3, #6]
  dmConnExecCback(pMsg);
   10e2e:	9800      	ldr	r0, [sp, #0]
   10e30:	f7ff ff24 	bl	10c7c <dmConnExecCback>
}
   10e34:	bf00      	nop
   10e36:	b003      	add	sp, #12
   10e38:	f85d fb04 	ldr.w	pc, [sp], #4

00010e3c <dmConnSmActConnClosed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnClosed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   10e3c:	b500      	push	{lr}
   10e3e:	b083      	sub	sp, #12
   10e40:	9001      	str	r0, [sp, #4]
   10e42:	9100      	str	r1, [sp, #0]
  /* pass conn close event to Connection CTE */
  dmDevPassEvtToConnCte(DM_CONN_CLOSE_IND, pCcb->connId);
   10e44:	9b01      	ldr	r3, [sp, #4]
   10e46:	7c1b      	ldrb	r3, [r3, #16]
   10e48:	4619      	mov	r1, r3
   10e4a:	2028      	movs	r0, #40	; 0x28
   10e4c:	f000 ffb6 	bl	11dbc <dmDevPassEvtToConnCte>

  /* deallocate ccb */
  dmConnCcbDealloc(pCcb);
   10e50:	9801      	ldr	r0, [sp, #4]
   10e52:	f7ff fe55 	bl	10b00 <dmConnCcbDealloc>

  /* if central and last connection closed */
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   10e56:	9b01      	ldr	r3, [sp, #4]
   10e58:	7e5b      	ldrb	r3, [r3, #25]
   10e5a:	2b00      	cmp	r3, #0
   10e5c:	d10a      	bne.n	10e74 <dmConnSmActConnClosed+0x38>
   10e5e:	f7ff fee7 	bl	10c30 <dmConnNum>
   10e62:	4603      	mov	r3, r0
   10e64:	2b00      	cmp	r3, #0
   10e66:	d105      	bne.n	10e74 <dmConnSmActConnClosed+0x38>
  {
    /* pass conn close event to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0, 0);
   10e68:	2300      	movs	r3, #0
   10e6a:	2200      	movs	r2, #0
   10e6c:	2128      	movs	r1, #40	; 0x28
   10e6e:	2015      	movs	r0, #21
   10e70:	f000 ff6a 	bl	11d48 <dmDevPassEvtToDevPriv>
  }

  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   10e74:	9b00      	ldr	r3, [sp, #0]
   10e76:	2228      	movs	r2, #40	; 0x28
   10e78:	709a      	strb	r2, [r3, #2]
  dmConnExecCback(pMsg);
   10e7a:	9800      	ldr	r0, [sp, #0]
   10e7c:	f7ff fefe 	bl	10c7c <dmConnExecCback>
}
   10e80:	bf00      	nop
   10e82:	b003      	add	sp, #12
   10e84:	f85d fb04 	ldr.w	pc, [sp], #4

00010e88 <dmConnSmActHciUpdated>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActHciUpdated(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   10e88:	b500      	push	{lr}
   10e8a:	b083      	sub	sp, #12
   10e8c:	9001      	str	r0, [sp, #4]
   10e8e:	9100      	str	r1, [sp, #0]
  /* call callback */
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   10e90:	9b00      	ldr	r3, [sp, #0]
   10e92:	2229      	movs	r2, #41	; 0x29
   10e94:	709a      	strb	r2, [r3, #2]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   10e96:	4b04      	ldr	r3, [pc, #16]	; (10ea8 <dmConnSmActHciUpdated+0x20>)
   10e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   10e9c:	9800      	ldr	r0, [sp, #0]
   10e9e:	4798      	blx	r3
}
   10ea0:	bf00      	nop
   10ea2:	b003      	add	sp, #12
   10ea4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ea8:	1000898c 	.word	0x1000898c

00010eac <dmConnReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnReset(void)
{
   10eac:	b500      	push	{lr}
   10eae:	b085      	sub	sp, #20
  dmConnCcb_t             *pCcb = dmConnCb.ccb;
   10eb0:	4b31      	ldr	r3, [pc, #196]	; (10f78 <dmConnReset+0xcc>)
   10eb2:	9303      	str	r3, [sp, #12]
  hciDisconnectCmplEvt_t  disconnectCmpl;
  uint8_t                 i;

  /* generate HCI disconnect complete event */
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   10eb4:	2303      	movs	r3, #3
   10eb6:	f88d 3002 	strb.w	r3, [sp, #2]
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   10eba:	2300      	movs	r3, #0
   10ebc:	f88d 3004 	strb.w	r3, [sp, #4]
   10ec0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10ec4:	f88d 3003 	strb.w	r3, [sp, #3]
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   10ec8:	2316      	movs	r3, #22
   10eca:	f88d 3008 	strb.w	r3, [sp, #8]

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   10ece:	2303      	movs	r3, #3
   10ed0:	f88d 300b 	strb.w	r3, [sp, #11]
   10ed4:	e017      	b.n	10f06 <dmConnReset+0x5a>
  {
    if (pCcb->inUse)
   10ed6:	9b03      	ldr	r3, [sp, #12]
   10ed8:	7d9b      	ldrb	r3, [r3, #22]
   10eda:	2b00      	cmp	r3, #0
   10edc:	d00b      	beq.n	10ef6 <dmConnReset+0x4a>
    {
      /* set connection id */
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   10ede:	9b03      	ldr	r3, [sp, #12]
   10ee0:	899b      	ldrh	r3, [r3, #12]
   10ee2:	f8ad 3006 	strh.w	r3, [sp, #6]
   10ee6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10eea:	f8ad 3000 	strh.w	r3, [sp]

      /* handle the event */
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   10eee:	466b      	mov	r3, sp
   10ef0:	4618      	mov	r0, r3
   10ef2:	f000 f85c 	bl	10fae <dmConnHciHandler>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   10ef6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10efa:	3b01      	subs	r3, #1
   10efc:	f88d 300b 	strb.w	r3, [sp, #11]
   10f00:	9b03      	ldr	r3, [sp, #12]
   10f02:	3330      	adds	r3, #48	; 0x30
   10f04:	9303      	str	r3, [sp, #12]
   10f06:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	d1e3      	bne.n	10ed6 <dmConnReset+0x2a>
    }
  }

  /* initialize control block */
  for (i = 0; i < DM_NUM_PHYS; i++)
   10f0e:	2300      	movs	r3, #0
   10f10:	f88d 300b 	strb.w	r3, [sp, #11]
   10f14:	e021      	b.n	10f5a <dmConnReset+0xae>
  {
    dmConnCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
   10f16:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10f1a:	4a17      	ldr	r2, [pc, #92]	; (10f78 <dmConnReset+0xcc>)
   10f1c:	3358      	adds	r3, #88	; 0x58
   10f1e:	2130      	movs	r1, #48	; 0x30
   10f20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    dmConnCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
   10f24:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10f28:	4a13      	ldr	r2, [pc, #76]	; (10f78 <dmConnReset+0xcc>)
   10f2a:	3358      	adds	r3, #88	; 0x58
   10f2c:	005b      	lsls	r3, r3, #1
   10f2e:	4413      	add	r3, r2
   10f30:	2230      	movs	r2, #48	; 0x30
   10f32:	805a      	strh	r2, [r3, #2]
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   10f34:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10f38:	490f      	ldr	r1, [pc, #60]	; (10f78 <dmConnReset+0xcc>)
   10f3a:	4613      	mov	r3, r2
   10f3c:	005b      	lsls	r3, r3, #1
   10f3e:	4413      	add	r3, r2
   10f40:	009b      	lsls	r3, r3, #2
   10f42:	440b      	add	r3, r1
   10f44:	33a0      	adds	r3, #160	; 0xa0
   10f46:	4a0d      	ldr	r2, [pc, #52]	; (10f7c <dmConnReset+0xd0>)
   10f48:	3304      	adds	r3, #4
   10f4a:	ca07      	ldmia	r2, {r0, r1, r2}
   10f4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for (i = 0; i < DM_NUM_PHYS; i++)
   10f50:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10f54:	3301      	adds	r3, #1
   10f56:	f88d 300b 	strb.w	r3, [sp, #11]
   10f5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10f5e:	2b00      	cmp	r3, #0
   10f60:	d0d9      	beq.n	10f16 <dmConnReset+0x6a>
  }

  dmCb.initFiltPolicy = HCI_FILT_NONE;
   10f62:	4b07      	ldr	r3, [pc, #28]	; (10f80 <dmConnReset+0xd4>)
   10f64:	2200      	movs	r2, #0
   10f66:	74da      	strb	r2, [r3, #19]
  dmCb.connAddrType = DM_ADDR_PUBLIC;
   10f68:	4b05      	ldr	r3, [pc, #20]	; (10f80 <dmConnReset+0xd4>)
   10f6a:	2200      	movs	r2, #0
   10f6c:	735a      	strb	r2, [r3, #13]
}
   10f6e:	bf00      	nop
   10f70:	b005      	add	sp, #20
   10f72:	f85d fb04 	ldr.w	pc, [sp], #4
   10f76:	bf00      	nop
   10f78:	1000898c 	.word	0x1000898c
   10f7c:	000296cc 	.word	0x000296cc
   10f80:	10008a50 	.word	0x10008a50

00010f84 <dmConnMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnMsgHandler(wsfMsgHdr_t *pMsg)
{
   10f84:	b500      	push	{lr}
   10f86:	b085      	sub	sp, #20
   10f88:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   10f8a:	9b01      	ldr	r3, [sp, #4]
   10f8c:	881b      	ldrh	r3, [r3, #0]
   10f8e:	b2db      	uxtb	r3, r3
   10f90:	4618      	mov	r0, r3
   10f92:	f7ff fe29 	bl	10be8 <dmConnCcbById>
   10f96:	9003      	str	r0, [sp, #12]
   10f98:	9b03      	ldr	r3, [sp, #12]
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	d003      	beq.n	10fa6 <dmConnMsgHandler+0x22>
  {
    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   10f9e:	9901      	ldr	r1, [sp, #4]
   10fa0:	9803      	ldr	r0, [sp, #12]
   10fa2:	f000 fdf3 	bl	11b8c <dmConnSmExecute>
  }
}
   10fa6:	bf00      	nop
   10fa8:	b005      	add	sp, #20
   10faa:	f85d fb04 	ldr.w	pc, [sp], #4

00010fae <dmConnHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnHciHandler(hciEvt_t *pEvent)
{
   10fae:	b500      	push	{lr}
   10fb0:	b085      	sub	sp, #20
   10fb2:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* handle special cases for connection complete event */
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   10fb4:	9b01      	ldr	r3, [sp, #4]
   10fb6:	789b      	ldrb	r3, [r3, #2]
   10fb8:	2b01      	cmp	r3, #1
   10fba:	d003      	beq.n	10fc4 <dmConnHciHandler+0x16>
      (pEvent->hdr.event == HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT))
   10fbc:	9b01      	ldr	r3, [sp, #4]
   10fbe:	789b      	ldrb	r3, [r3, #2]
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   10fc0:	2b02      	cmp	r3, #2
   10fc2:	d128      	bne.n	11016 <dmConnHciHandler+0x68>
  {
    /* first check if ccb exists for this bd addr */
    if ((pCcb = dmConnCcbByBdAddr(pEvent->leConnCmpl.peerAddr)) == NULL)
   10fc4:	9b01      	ldr	r3, [sp, #4]
   10fc6:	330a      	adds	r3, #10
   10fc8:	4618      	mov	r0, r3
   10fca:	f7ff fddd 	bl	10b88 <dmConnCcbByBdAddr>
   10fce:	9003      	str	r0, [sp, #12]
   10fd0:	9b03      	ldr	r3, [sp, #12]
   10fd2:	2b00      	cmp	r3, #0
   10fd4:	d113      	bne.n	10ffe <dmConnHciHandler+0x50>
    {
      /* check for special case states */
      if ((pCcb = dmConnCmplStates()) == NULL)
   10fd6:	f7ff fd0d 	bl	109f4 <dmConnCmplStates>
   10fda:	9003      	str	r0, [sp, #12]
   10fdc:	9b03      	ldr	r3, [sp, #12]
   10fde:	2b00      	cmp	r3, #0
   10fe0:	d10d      	bne.n	10ffe <dmConnHciHandler+0x50>
      {
        /* else default case for slave, allocate new ccb */
        if ((pEvent->hdr.status == HCI_SUCCESS) && (pEvent->leConnCmpl.role == HCI_ROLE_SLAVE))
   10fe2:	9b01      	ldr	r3, [sp, #4]
   10fe4:	78db      	ldrb	r3, [r3, #3]
   10fe6:	2b00      	cmp	r3, #0
   10fe8:	d109      	bne.n	10ffe <dmConnHciHandler+0x50>
   10fea:	9b01      	ldr	r3, [sp, #4]
   10fec:	7a1b      	ldrb	r3, [r3, #8]
   10fee:	2b01      	cmp	r3, #1
   10ff0:	d105      	bne.n	10ffe <dmConnHciHandler+0x50>
        {
          pCcb = dmConnCcbAlloc(pEvent->leConnCmpl.peerAddr);
   10ff2:	9b01      	ldr	r3, [sp, #4]
   10ff4:	330a      	adds	r3, #10
   10ff6:	4618      	mov	r0, r3
   10ff8:	f7ff fd34 	bl	10a64 <dmConnCcbAlloc>
   10ffc:	9003      	str	r0, [sp, #12]
        }
      }
    }

    /* translate HCI event to state machine event */
    if (pEvent->hdr.status == HCI_SUCCESS)
   10ffe:	9b01      	ldr	r3, [sp, #4]
   11000:	78db      	ldrb	r3, [r3, #3]
   11002:	2b00      	cmp	r3, #0
   11004:	d103      	bne.n	1100e <dmConnHciHandler+0x60>
    {
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   11006:	9b01      	ldr	r3, [sp, #4]
   11008:	2238      	movs	r2, #56	; 0x38
   1100a:	709a      	strb	r2, [r3, #2]
    if (pEvent->hdr.status == HCI_SUCCESS)
   1100c:	e00f      	b.n	1102e <dmConnHciHandler+0x80>
    }
    else
    {
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   1100e:	9b01      	ldr	r3, [sp, #4]
   11010:	2237      	movs	r2, #55	; 0x37
   11012:	709a      	strb	r2, [r3, #2]
    if (pEvent->hdr.status == HCI_SUCCESS)
   11014:	e00b      	b.n	1102e <dmConnHciHandler+0x80>
    }
  }
  else
  {
    pCcb = dmConnCcbByHandle(pEvent->hdr.param);
   11016:	9b01      	ldr	r3, [sp, #4]
   11018:	881b      	ldrh	r3, [r3, #0]
   1101a:	4618      	mov	r0, r3
   1101c:	f7ff fd82 	bl	10b24 <dmConnCcbByHandle>
   11020:	9003      	str	r0, [sp, #12]

    /* translate HCI event to state machine message */
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   11022:	9b01      	ldr	r3, [sp, #4]
   11024:	789b      	ldrb	r3, [r3, #2]
   11026:	3336      	adds	r3, #54	; 0x36
   11028:	b2da      	uxtb	r2, r3
   1102a:	9b01      	ldr	r3, [sp, #4]
   1102c:	709a      	strb	r2, [r3, #2]
  }

  /* if ccb found */
  if (pCcb != NULL)
   1102e:	9b03      	ldr	r3, [sp, #12]
   11030:	2b00      	cmp	r3, #0
   11032:	d008      	beq.n	11046 <dmConnHciHandler+0x98>
  {
    /* set conn id */
    pEvent->hdr.param = pCcb->connId;
   11034:	9b03      	ldr	r3, [sp, #12]
   11036:	7c1b      	ldrb	r3, [r3, #16]
   11038:	b29a      	uxth	r2, r3
   1103a:	9b01      	ldr	r3, [sp, #4]
   1103c:	801a      	strh	r2, [r3, #0]

    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   1103e:	9901      	ldr	r1, [sp, #4]
   11040:	9803      	ldr	r0, [sp, #12]
   11042:	f000 fda3 	bl	11b8c <dmConnSmExecute>
  }
}
   11046:	bf00      	nop
   11048:	b005      	add	sp, #20
   1104a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00011050 <dmConn2MsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2MsgHandler(wsfMsgHdr_t *pMsg)
{
   11050:	b570      	push	{r4, r5, r6, lr}
   11052:	b08a      	sub	sp, #40	; 0x28
   11054:	9005      	str	r0, [sp, #20]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   11056:	9b05      	ldr	r3, [sp, #20]
   11058:	881b      	ldrh	r3, [r3, #0]
   1105a:	b2db      	uxtb	r3, r3
   1105c:	4618      	mov	r0, r3
   1105e:	f7ff fdc3 	bl	10be8 <dmConnCcbById>
   11062:	9009      	str	r0, [sp, #36]	; 0x24
   11064:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11066:	2b00      	cmp	r3, #0
   11068:	d053      	beq.n	11112 <dmConn2MsgHandler+0xc2>
  {
    dmConn2Msg_t *pConn2Msg = (dmConn2Msg_t *) pMsg;
   1106a:	9b05      	ldr	r3, [sp, #20]
   1106c:	9308      	str	r3, [sp, #32]

    /* handle incoming message */
    switch (pMsg->event)
   1106e:	9b05      	ldr	r3, [sp, #20]
   11070:	789b      	ldrb	r3, [r3, #2]
   11072:	3b41      	subs	r3, #65	; 0x41
   11074:	2b04      	cmp	r3, #4
   11076:	d84b      	bhi.n	11110 <dmConn2MsgHandler+0xc0>
   11078:	a201      	add	r2, pc, #4	; (adr r2, 11080 <dmConn2MsgHandler+0x30>)
   1107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1107e:	bf00      	nop
   11080:	00011095 	.word	0x00011095
   11084:	000110a1 	.word	0x000110a1
   11088:	000110d5 	.word	0x000110d5
   1108c:	000110e7 	.word	0x000110e7
   11090:	000110ff 	.word	0x000110ff
    {
      case DM_CONN_MSG_API_READ_RSSI:
        HciReadRssiCmd(pCcb->handle);
   11094:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11096:	899b      	ldrh	r3, [r3, #12]
   11098:	4618      	mov	r0, r3
   1109a:	f00c fb38 	bl	1d70e <HciReadRssiCmd>
        break;
   1109e:	e038      	b.n	11112 <dmConn2MsgHandler+0xc2>

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY:
        {
          hciConnSpec_t *pConnSpec = &pConn2Msg->apiRemConnParamReqReply.connSpec;
   110a0:	9b08      	ldr	r3, [sp, #32]
   110a2:	3304      	adds	r3, #4
   110a4:	9307      	str	r3, [sp, #28]

          HciLeRemoteConnParamReqReply(pCcb->handle, pConnSpec->connIntervalMin,
   110a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110a8:	8998      	ldrh	r0, [r3, #12]
   110aa:	9b07      	ldr	r3, [sp, #28]
   110ac:	881c      	ldrh	r4, [r3, #0]
   110ae:	9b07      	ldr	r3, [sp, #28]
   110b0:	885d      	ldrh	r5, [r3, #2]
   110b2:	9b07      	ldr	r3, [sp, #28]
   110b4:	889e      	ldrh	r6, [r3, #4]
   110b6:	9b07      	ldr	r3, [sp, #28]
   110b8:	88db      	ldrh	r3, [r3, #6]
   110ba:	9a07      	ldr	r2, [sp, #28]
   110bc:	8912      	ldrh	r2, [r2, #8]
   110be:	9907      	ldr	r1, [sp, #28]
   110c0:	8949      	ldrh	r1, [r1, #10]
   110c2:	9102      	str	r1, [sp, #8]
   110c4:	9201      	str	r2, [sp, #4]
   110c6:	9300      	str	r3, [sp, #0]
   110c8:	4633      	mov	r3, r6
   110ca:	462a      	mov	r2, r5
   110cc:	4621      	mov	r1, r4
   110ce:	f00b ff40 	bl	1cf52 <HciLeRemoteConnParamReqReply>
                                       pConnSpec->connIntervalMax, pConnSpec->connLatency,
                                       pConnSpec->supTimeout, pConnSpec->minCeLen,
                                       pConnSpec->maxCeLen);
        }
        break;
   110d2:	e01e      	b.n	11112 <dmConn2MsgHandler+0xc2>

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY:
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   110d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110d6:	899a      	ldrh	r2, [r3, #12]
   110d8:	9b08      	ldr	r3, [sp, #32]
   110da:	791b      	ldrb	r3, [r3, #4]
   110dc:	4619      	mov	r1, r3
   110de:	4610      	mov	r0, r2
   110e0:	f00b ffcb 	bl	1d07a <HciLeRemoteConnParamReqNegReply>
        break;
   110e4:	e015      	b.n	11112 <dmConn2MsgHandler+0xc2>

      case DM_CONN_MSG_API_SET_DATA_LEN:
        {
          dmConnApiSetDataLen_t *pDataLen = &pConn2Msg->apiSetDataLen;
   110e6:	9b08      	ldr	r3, [sp, #32]
   110e8:	9306      	str	r3, [sp, #24]

          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   110ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110ec:	8998      	ldrh	r0, [r3, #12]
   110ee:	9b06      	ldr	r3, [sp, #24]
   110f0:	8899      	ldrh	r1, [r3, #4]
   110f2:	9b06      	ldr	r3, [sp, #24]
   110f4:	88db      	ldrh	r3, [r3, #6]
   110f6:	461a      	mov	r2, r3
   110f8:	f00b fff1 	bl	1d0de <HciLeSetDataLen>
        }
        break;
   110fc:	e009      	b.n	11112 <dmConn2MsgHandler+0xc2>

      case DM_CONN_MSG_API_WRITE_AUTH_TO:
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   110fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11100:	899a      	ldrh	r2, [r3, #12]
   11102:	9b08      	ldr	r3, [sp, #32]
   11104:	889b      	ldrh	r3, [r3, #4]
   11106:	4619      	mov	r1, r3
   11108:	4610      	mov	r0, r2
   1110a:	f00c fb91 	bl	1d830 <HciWriteAuthPayloadTimeout>
        break;
   1110e:	e000      	b.n	11112 <dmConn2MsgHandler+0xc2>

      default:
        /* should never get here */
        break;
   11110:	bf00      	nop
    }
  }
}
   11112:	bf00      	nop
   11114:	b00a      	add	sp, #40	; 0x28
   11116:	bd70      	pop	{r4, r5, r6, pc}

00011118 <dmConn2HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2HciHandler(hciEvt_t *pEvent)
{
   11118:	b500      	push	{lr}
   1111a:	b085      	sub	sp, #20
   1111c:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   1111e:	9b01      	ldr	r3, [sp, #4]
   11120:	881b      	ldrh	r3, [r3, #0]
   11122:	4618      	mov	r0, r3
   11124:	f7ff fcfe 	bl	10b24 <dmConnCcbByHandle>
   11128:	9003      	str	r0, [sp, #12]
   1112a:	9b03      	ldr	r3, [sp, #12]
   1112c:	2b00      	cmp	r3, #0
   1112e:	d06f      	beq.n	11210 <dmConn2HciHandler+0xf8>
  {
    /* handle incoming event */
    switch (pEvent->hdr.event)
   11130:	9b01      	ldr	r3, [sp, #4]
   11132:	789b      	ldrb	r3, [r3, #2]
   11134:	3b07      	subs	r3, #7
   11136:	2b21      	cmp	r3, #33	; 0x21
   11138:	d869      	bhi.n	1120e <dmConn2HciHandler+0xf6>
   1113a:	a201      	add	r2, pc, #4	; (adr r2, 11140 <dmConn2HciHandler+0x28>)
   1113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11140:	000111c9 	.word	0x000111c9
   11144:	0001120f 	.word	0x0001120f
   11148:	0001120f 	.word	0x0001120f
   1114c:	00011205 	.word	0x00011205
   11150:	000111fb 	.word	0x000111fb
   11154:	0001120f 	.word	0x0001120f
   11158:	0001120f 	.word	0x0001120f
   1115c:	0001120f 	.word	0x0001120f
   11160:	0001120f 	.word	0x0001120f
   11164:	0001120f 	.word	0x0001120f
   11168:	0001120f 	.word	0x0001120f
   1116c:	0001120f 	.word	0x0001120f
   11170:	0001120f 	.word	0x0001120f
   11174:	0001120f 	.word	0x0001120f
   11178:	0001120f 	.word	0x0001120f
   1117c:	0001120f 	.word	0x0001120f
   11180:	0001120f 	.word	0x0001120f
   11184:	0001120f 	.word	0x0001120f
   11188:	0001120f 	.word	0x0001120f
   1118c:	0001120f 	.word	0x0001120f
   11190:	0001120f 	.word	0x0001120f
   11194:	0001120f 	.word	0x0001120f
   11198:	0001120f 	.word	0x0001120f
   1119c:	0001120f 	.word	0x0001120f
   111a0:	0001120f 	.word	0x0001120f
   111a4:	0001120f 	.word	0x0001120f
   111a8:	0001120f 	.word	0x0001120f
   111ac:	0001120f 	.word	0x0001120f
   111b0:	000111d3 	.word	0x000111d3
   111b4:	000111dd 	.word	0x000111dd
   111b8:	0001120f 	.word	0x0001120f
   111bc:	0001120f 	.word	0x0001120f
   111c0:	000111e7 	.word	0x000111e7
   111c4:	000111f1 	.word	0x000111f1
    {
      case HCI_READ_RSSI_CMD_CMPL_CBACK_EVT:
        dmConn2ActRssiRead(pCcb, pEvent);
   111c8:	9901      	ldr	r1, [sp, #4]
   111ca:	9803      	ldr	r0, [sp, #12]
   111cc:	f000 f824 	bl	11218 <dmConn2ActRssiRead>
        break;
   111d0:	e01e      	b.n	11210 <dmConn2HciHandler+0xf8>

      case HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT:
        dmConn2ActRemoteConnParamReq(pCcb, pEvent);
   111d2:	9901      	ldr	r1, [sp, #4]
   111d4:	9803      	ldr	r0, [sp, #12]
   111d6:	f000 f849 	bl	1126c <dmConn2ActRemoteConnParamReq>
        break;
   111da:	e019      	b.n	11210 <dmConn2HciHandler+0xf8>

      case HCI_LE_DATA_LEN_CHANGE_CBACK_EVT:
        dmConn2ActDataLenChange(pCcb, pEvent);
   111dc:	9901      	ldr	r1, [sp, #4]
   111de:	9803      	ldr	r0, [sp, #12]
   111e0:	f000 f874 	bl	112cc <dmConn2ActDataLenChange>
        break;
   111e4:	e014      	b.n	11210 <dmConn2HciHandler+0xf8>

      case HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT:
        dmConn2ActWriteAuthToCmpl(pCcb, pEvent);
   111e6:	9901      	ldr	r1, [sp, #4]
   111e8:	9803      	ldr	r0, [sp, #12]
   111ea:	f000 f89f 	bl	1132c <dmConn2ActWriteAuthToCmpl>
        break;
   111ee:	e00f      	b.n	11210 <dmConn2HciHandler+0xf8>

      case HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT:
        dmConn2ActAuthToExpired(pCcb, pEvent);
   111f0:	9901      	ldr	r1, [sp, #4]
   111f2:	9803      	ldr	r0, [sp, #12]
   111f4:	f000 f8be 	bl	11374 <dmConn2ActAuthToExpired>
        break;
   111f8:	e00a      	b.n	11210 <dmConn2HciHandler+0xf8>

      case HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT:
        dmConn2ActReadRemoteFeaturesCmpl(pCcb, pEvent);
   111fa:	9901      	ldr	r1, [sp, #4]
   111fc:	9803      	ldr	r0, [sp, #12]
   111fe:	f000 f8d9 	bl	113b4 <dmConn2ActReadRemoteFeaturesCmpl>
        break;
   11202:	e005      	b.n	11210 <dmConn2HciHandler+0xf8>

      case HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT:
        dmConn2ActReadRemoteVerInfoCmpl(pCcb, pEvent);
   11204:	9901      	ldr	r1, [sp, #4]
   11206:	9803      	ldr	r0, [sp, #12]
   11208:	f000 f914 	bl	11434 <dmConn2ActReadRemoteVerInfoCmpl>
        break;
   1120c:	e000      	b.n	11210 <dmConn2HciHandler+0xf8>

      default:
        /* should never get here */
        break;
   1120e:	bf00      	nop
    }
  }
}
   11210:	bf00      	nop
   11212:	b005      	add	sp, #20
   11214:	f85d fb04 	ldr.w	pc, [sp], #4

00011218 <dmConn2ActRssiRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActRssiRead(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   11218:	b500      	push	{lr}
   1121a:	b087      	sub	sp, #28
   1121c:	9001      	str	r0, [sp, #4]
   1121e:	9100      	str	r1, [sp, #0]
  hciReadRssiCmdCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   11220:	2339      	movs	r3, #57	; 0x39
   11222:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.hdr.param = pCcb->connId;
   11226:	9b01      	ldr	r3, [sp, #4]
   11228:	7c1b      	ldrb	r3, [r3, #16]
   1122a:	b29b      	uxth	r3, r3
   1122c:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   11230:	9b00      	ldr	r3, [sp, #0]
   11232:	791b      	ldrb	r3, [r3, #4]
   11234:	f88d 300f 	strb.w	r3, [sp, #15]
   11238:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1123c:	f88d 3010 	strb.w	r3, [sp, #16]
  evt.handle = pCcb->handle;
   11240:	9b01      	ldr	r3, [sp, #4]
   11242:	899b      	ldrh	r3, [r3, #12]
   11244:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   11248:	9b00      	ldr	r3, [sp, #0]
   1124a:	f993 3008 	ldrsb.w	r3, [r3, #8]
   1124e:	f88d 3014 	strb.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   11252:	4b05      	ldr	r3, [pc, #20]	; (11268 <dmConn2ActRssiRead+0x50>)
   11254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   11258:	aa03      	add	r2, sp, #12
   1125a:	4610      	mov	r0, r2
   1125c:	4798      	blx	r3
}
   1125e:	bf00      	nop
   11260:	b007      	add	sp, #28
   11262:	f85d fb04 	ldr.w	pc, [sp], #4
   11266:	bf00      	nop
   11268:	1000898c 	.word	0x1000898c

0001126c <dmConn2ActRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActRemoteConnParamReq(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   1126c:	b500      	push	{lr}
   1126e:	b087      	sub	sp, #28
   11270:	9001      	str	r0, [sp, #4]
   11272:	9100      	str	r1, [sp, #0]
  hciLeRemConnParamReqEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_REM_CONN_PARAM_REQ_IND;
   11274:	2340      	movs	r3, #64	; 0x40
   11276:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   1127a:	9b01      	ldr	r3, [sp, #4]
   1127c:	7c1b      	ldrb	r3, [r3, #16]
   1127e:	b29b      	uxth	r3, r3
   11280:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   11284:	2300      	movs	r3, #0
   11286:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pCcb->handle;
   1128a:	9b01      	ldr	r3, [sp, #4]
   1128c:	899b      	ldrh	r3, [r3, #12]
   1128e:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.intervalMin = pEvent->leRemConnParamReq.intervalMin;
   11292:	9b00      	ldr	r3, [sp, #0]
   11294:	88db      	ldrh	r3, [r3, #6]
   11296:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.intervalMax = pEvent->leRemConnParamReq.intervalMax;
   1129a:	9b00      	ldr	r3, [sp, #0]
   1129c:	891b      	ldrh	r3, [r3, #8]
   1129e:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.latency = pEvent->leRemConnParamReq.latency;
   112a2:	9b00      	ldr	r3, [sp, #0]
   112a4:	895b      	ldrh	r3, [r3, #10]
   112a6:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.timeout = pEvent->leRemConnParamReq.timeout;
   112aa:	9b00      	ldr	r3, [sp, #0]
   112ac:	899b      	ldrh	r3, [r3, #12]
   112ae:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   112b2:	4b05      	ldr	r3, [pc, #20]	; (112c8 <dmConn2ActRemoteConnParamReq+0x5c>)
   112b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   112b8:	aa02      	add	r2, sp, #8
   112ba:	4610      	mov	r0, r2
   112bc:	4798      	blx	r3
}
   112be:	bf00      	nop
   112c0:	b007      	add	sp, #28
   112c2:	f85d fb04 	ldr.w	pc, [sp], #4
   112c6:	bf00      	nop
   112c8:	1000898c 	.word	0x1000898c

000112cc <dmConn2ActDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActDataLenChange(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   112cc:	b500      	push	{lr}
   112ce:	b087      	sub	sp, #28
   112d0:	9001      	str	r0, [sp, #4]
   112d2:	9100      	str	r1, [sp, #0]
  hciLeDataLenChangeEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
   112d4:	2341      	movs	r3, #65	; 0x41
   112d6:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   112da:	9b01      	ldr	r3, [sp, #4]
   112dc:	7c1b      	ldrb	r3, [r3, #16]
   112de:	b29b      	uxth	r3, r3
   112e0:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   112e4:	2300      	movs	r3, #0
   112e6:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pCcb->handle;
   112ea:	9b01      	ldr	r3, [sp, #4]
   112ec:	899b      	ldrh	r3, [r3, #12]
   112ee:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   112f2:	9b00      	ldr	r3, [sp, #0]
   112f4:	88db      	ldrh	r3, [r3, #6]
   112f6:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   112fa:	9b00      	ldr	r3, [sp, #0]
   112fc:	891b      	ldrh	r3, [r3, #8]
   112fe:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   11302:	9b00      	ldr	r3, [sp, #0]
   11304:	895b      	ldrh	r3, [r3, #10]
   11306:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   1130a:	9b00      	ldr	r3, [sp, #0]
   1130c:	899b      	ldrh	r3, [r3, #12]
   1130e:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   11312:	4b05      	ldr	r3, [pc, #20]	; (11328 <dmConn2ActDataLenChange+0x5c>)
   11314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   11318:	aa02      	add	r2, sp, #8
   1131a:	4610      	mov	r0, r2
   1131c:	4798      	blx	r3
}
   1131e:	bf00      	nop
   11320:	b007      	add	sp, #28
   11322:	f85d fb04 	ldr.w	pc, [sp], #4
   11326:	bf00      	nop
   11328:	1000898c 	.word	0x1000898c

0001132c <dmConn2ActWriteAuthToCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActWriteAuthToCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   1132c:	b500      	push	{lr}
   1132e:	b085      	sub	sp, #20
   11330:	9001      	str	r0, [sp, #4]
   11332:	9100      	str	r1, [sp, #0]
  hciWriteAuthPayloadToCmdCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_WRITE_AUTH_TO_IND;
   11334:	2342      	movs	r3, #66	; 0x42
   11336:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   1133a:	9b01      	ldr	r3, [sp, #4]
   1133c:	7c1b      	ldrb	r3, [r3, #16]
   1133e:	b29b      	uxth	r3, r3
   11340:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   11344:	2300      	movs	r3, #0
   11346:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   1134a:	9b00      	ldr	r3, [sp, #0]
   1134c:	88db      	ldrh	r3, [r3, #6]
   1134e:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   11352:	9b00      	ldr	r3, [sp, #0]
   11354:	791b      	ldrb	r3, [r3, #4]
   11356:	f88d 300c 	strb.w	r3, [sp, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1135a:	4b05      	ldr	r3, [pc, #20]	; (11370 <dmConn2ActWriteAuthToCmpl+0x44>)
   1135c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   11360:	aa02      	add	r2, sp, #8
   11362:	4610      	mov	r0, r2
   11364:	4798      	blx	r3
}
   11366:	bf00      	nop
   11368:	b005      	add	sp, #20
   1136a:	f85d fb04 	ldr.w	pc, [sp], #4
   1136e:	bf00      	nop
   11370:	1000898c 	.word	0x1000898c

00011374 <dmConn2ActAuthToExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActAuthToExpired(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   11374:	b500      	push	{lr}
   11376:	b085      	sub	sp, #20
   11378:	9001      	str	r0, [sp, #4]
   1137a:	9100      	str	r1, [sp, #0]
  hciAuthPayloadToExpiredEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   1137c:	2343      	movs	r3, #67	; 0x43
   1137e:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   11382:	9b01      	ldr	r3, [sp, #4]
   11384:	7c1b      	ldrb	r3, [r3, #16]
   11386:	b29b      	uxth	r3, r3
   11388:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   1138c:	2300      	movs	r3, #0
   1138e:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pEvent->authPayloadToExpired.handle;
   11392:	9b00      	ldr	r3, [sp, #0]
   11394:	889b      	ldrh	r3, [r3, #4]
   11396:	f8ad 300c 	strh.w	r3, [sp, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1139a:	4b05      	ldr	r3, [pc, #20]	; (113b0 <dmConn2ActAuthToExpired+0x3c>)
   1139c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   113a0:	aa02      	add	r2, sp, #8
   113a2:	4610      	mov	r0, r2
   113a4:	4798      	blx	r3
}
   113a6:	bf00      	nop
   113a8:	b005      	add	sp, #20
   113aa:	f85d fb04 	ldr.w	pc, [sp], #4
   113ae:	bf00      	nop
   113b0:	1000898c 	.word	0x1000898c

000113b4 <dmConn2ActReadRemoteFeaturesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActReadRemoteFeaturesCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   113b4:	b500      	push	{lr}
   113b6:	b087      	sub	sp, #28
   113b8:	9001      	str	r0, [sp, #4]
   113ba:	9100      	str	r1, [sp, #0]
  hciLeReadRemoteFeatCmplEvt_t evt;

  /* Save the features */
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   113bc:	9b00      	ldr	r3, [sp, #0]
   113be:	7a1b      	ldrb	r3, [r3, #8]
   113c0:	461a      	mov	r2, r3
   113c2:	9b00      	ldr	r3, [sp, #0]
   113c4:	7a5b      	ldrb	r3, [r3, #9]
   113c6:	021b      	lsls	r3, r3, #8
   113c8:	441a      	add	r2, r3
   113ca:	9b00      	ldr	r3, [sp, #0]
   113cc:	7a9b      	ldrb	r3, [r3, #10]
   113ce:	041b      	lsls	r3, r3, #16
   113d0:	441a      	add	r2, r3
   113d2:	9b00      	ldr	r3, [sp, #0]
   113d4:	7adb      	ldrb	r3, [r3, #11]
   113d6:	061b      	lsls	r3, r3, #24
   113d8:	441a      	add	r2, r3
   113da:	9b01      	ldr	r3, [sp, #4]
   113dc:	629a      	str	r2, [r3, #40]	; 0x28
  pCcb->featuresPresent = TRUE;
   113de:	9b01      	ldr	r3, [sp, #4]
   113e0:	2201      	movs	r2, #1
   113e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* call callback */
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
   113e6:	2357      	movs	r3, #87	; 0x57
   113e8:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   113ec:	9b01      	ldr	r3, [sp, #4]
   113ee:	7c1b      	ldrb	r3, [r3, #16]
   113f0:	b29b      	uxth	r3, r3
   113f2:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   113f6:	2300      	movs	r3, #0
   113f8:	f88d 300b 	strb.w	r3, [sp, #11]

  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   113fc:	9b00      	ldr	r3, [sp, #0]
   113fe:	791b      	ldrb	r3, [r3, #4]
   11400:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
   11404:	9b00      	ldr	r3, [sp, #0]
   11406:	88db      	ldrh	r3, [r3, #6]
   11408:	f8ad 300e 	strh.w	r3, [sp, #14]
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   1140c:	9b00      	ldr	r3, [sp, #0]
   1140e:	f103 0208 	add.w	r2, r3, #8
   11412:	ab04      	add	r3, sp, #16
   11414:	6810      	ldr	r0, [r2, #0]
   11416:	6851      	ldr	r1, [r2, #4]
   11418:	c303      	stmia	r3!, {r0, r1}

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1141a:	4b05      	ldr	r3, [pc, #20]	; (11430 <dmConn2ActReadRemoteFeaturesCmpl+0x7c>)
   1141c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   11420:	aa02      	add	r2, sp, #8
   11422:	4610      	mov	r0, r2
   11424:	4798      	blx	r3
}
   11426:	bf00      	nop
   11428:	b007      	add	sp, #28
   1142a:	f85d fb04 	ldr.w	pc, [sp], #4
   1142e:	bf00      	nop
   11430:	1000898c 	.word	0x1000898c

00011434 <dmConn2ActReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActReadRemoteVerInfoCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   11434:	b500      	push	{lr}
   11436:	b087      	sub	sp, #28
   11438:	9001      	str	r0, [sp, #4]
   1143a:	9100      	str	r1, [sp, #0]
  hciReadRemoteVerInfoCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   1143c:	2358      	movs	r3, #88	; 0x58
   1143e:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   11442:	9b01      	ldr	r3, [sp, #4]
   11444:	7c1b      	ldrb	r3, [r3, #16]
   11446:	b29b      	uxth	r3, r3
   11448:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   1144c:	2300      	movs	r3, #0
   1144e:	f88d 300b 	strb.w	r3, [sp, #11]

  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   11452:	9b00      	ldr	r3, [sp, #0]
   11454:	791b      	ldrb	r3, [r3, #4]
   11456:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   1145a:	9b00      	ldr	r3, [sp, #0]
   1145c:	88db      	ldrh	r3, [r3, #6]
   1145e:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   11462:	9b00      	ldr	r3, [sp, #0]
   11464:	7a1b      	ldrb	r3, [r3, #8]
   11466:	f88d 3010 	strb.w	r3, [sp, #16]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   1146a:	9b00      	ldr	r3, [sp, #0]
   1146c:	895b      	ldrh	r3, [r3, #10]
   1146e:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.subversion = pEvent->readRemoteVerInfoCmpl.subversion;
   11472:	9b00      	ldr	r3, [sp, #0]
   11474:	899b      	ldrh	r3, [r3, #12]
   11476:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1147a:	4b05      	ldr	r3, [pc, #20]	; (11490 <dmConn2ActReadRemoteVerInfoCmpl+0x5c>)
   1147c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   11480:	aa02      	add	r2, sp, #8
   11482:	4610      	mov	r0, r2
   11484:	4798      	blx	r3
}
   11486:	bf00      	nop
   11488:	b007      	add	sp, #28
   1148a:	f85d fb04 	ldr.w	pc, [sp], #4
   1148e:	bf00      	nop
   11490:	1000898c 	.word	0x1000898c

00011494 <DmConnInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnInit(void)
{
  dmFcnIfTbl[DM_ID_CONN] = (dmFcnIf_t *) &dmConnFcnIf;
   11494:	4b05      	ldr	r3, [pc, #20]	; (114ac <DmConnInit+0x18>)
   11496:	4a06      	ldr	r2, [pc, #24]	; (114b0 <DmConnInit+0x1c>)
   11498:	60da      	str	r2, [r3, #12]
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   1149a:	4b04      	ldr	r3, [pc, #16]	; (114ac <DmConnInit+0x18>)
   1149c:	4a05      	ldr	r2, [pc, #20]	; (114b4 <DmConnInit+0x20>)
   1149e:	611a      	str	r2, [r3, #16]
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   114a0:	4b05      	ldr	r3, [pc, #20]	; (114b8 <DmConnInit+0x24>)
   114a2:	4a06      	ldr	r2, [pc, #24]	; (114bc <DmConnInit+0x28>)
   114a4:	601a      	str	r2, [r3, #0]
}
   114a6:	bf00      	nop
   114a8:	4770      	bx	lr
   114aa:	bf00      	nop
   114ac:	10002b00 	.word	0x10002b00
   114b0:	000296f0 	.word	0x000296f0
   114b4:	000296fc 	.word	0x000296fc
   114b8:	10008a40 	.word	0x10008a40
   114bc:	000296d8 	.word	0x000296d8

000114c0 <DmConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnRegister(uint8_t clientId, dmCback_t cback)
{
   114c0:	b500      	push	{lr}
   114c2:	b083      	sub	sp, #12
   114c4:	4603      	mov	r3, r0
   114c6:	9100      	str	r1, [sp, #0]
   114c8:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT(clientId < DM_CLIENT_ID_MAX);

  /* store callback */
  WsfTaskLock();
   114cc:	f007 f85e 	bl	1858c <WsfTaskLock>
  dmConnCb.connCback[clientId] = cback;
   114d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   114d4:	4905      	ldr	r1, [pc, #20]	; (114ec <DmConnRegister+0x2c>)
   114d6:	3324      	adds	r3, #36	; 0x24
   114d8:	9a00      	ldr	r2, [sp, #0]
   114da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  WsfTaskUnlock();
   114de:	f007 f85a 	bl	18596 <WsfTaskUnlock>
}
   114e2:	bf00      	nop
   114e4:	b003      	add	sp, #12
   114e6:	f85d fb04 	ldr.w	pc, [sp], #4
   114ea:	bf00      	nop
   114ec:	1000898c 	.word	0x1000898c

000114f0 <DmReadRemoteFeatures>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmReadRemoteFeatures(dmConnId_t connId)
{
   114f0:	b500      	push	{lr}
   114f2:	b089      	sub	sp, #36	; 0x24
   114f4:	4603      	mov	r3, r0
   114f6:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbById(connId)) != NULL)
   114fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   114fe:	4618      	mov	r0, r3
   11500:	f7ff fb72 	bl	10be8 <dmConnCcbById>
   11504:	9007      	str	r0, [sp, #28]
   11506:	9b07      	ldr	r3, [sp, #28]
   11508:	2b00      	cmp	r3, #0
   1150a:	d044      	beq.n	11596 <DmReadRemoteFeatures+0xa6>
  {
    if (pCcb->featuresPresent)
   1150c:	9b07      	ldr	r3, [sp, #28]
   1150e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   11512:	2b00      	cmp	r3, #0
   11514:	d03a      	beq.n	1158c <DmReadRemoteFeatures+0x9c>
    {
      hciLeReadRemoteFeatCmplEvt_t evt;
      uint8_t *p = evt.features;
   11516:	ab02      	add	r3, sp, #8
   11518:	3308      	adds	r3, #8
   1151a:	9306      	str	r3, [sp, #24]

      /* call callback */
      evt.hdr.event = DM_REMOTE_FEATURES_IND;
   1151c:	2357      	movs	r3, #87	; 0x57
   1151e:	f88d 300a 	strb.w	r3, [sp, #10]
      evt.hdr.param = pCcb->connId;
   11522:	9b07      	ldr	r3, [sp, #28]
   11524:	7c1b      	ldrb	r3, [r3, #16]
   11526:	b29b      	uxth	r3, r3
   11528:	f8ad 3008 	strh.w	r3, [sp, #8]
      evt.hdr.status = HCI_SUCCESS;
   1152c:	2300      	movs	r3, #0
   1152e:	f88d 300b 	strb.w	r3, [sp, #11]

      evt.status = HCI_SUCCESS;
   11532:	2300      	movs	r3, #0
   11534:	f88d 300c 	strb.w	r3, [sp, #12]
      evt.handle = pCcb->handle;
   11538:	9b07      	ldr	r3, [sp, #28]
   1153a:	899b      	ldrh	r3, [r3, #12]
   1153c:	f8ad 300e 	strh.w	r3, [sp, #14]
      UINT32_TO_BSTREAM(p, pCcb->features);
   11540:	9b06      	ldr	r3, [sp, #24]
   11542:	1c5a      	adds	r2, r3, #1
   11544:	9206      	str	r2, [sp, #24]
   11546:	9a07      	ldr	r2, [sp, #28]
   11548:	6a92      	ldr	r2, [r2, #40]	; 0x28
   1154a:	b2d2      	uxtb	r2, r2
   1154c:	701a      	strb	r2, [r3, #0]
   1154e:	9b06      	ldr	r3, [sp, #24]
   11550:	1c5a      	adds	r2, r3, #1
   11552:	9206      	str	r2, [sp, #24]
   11554:	9a07      	ldr	r2, [sp, #28]
   11556:	6a92      	ldr	r2, [r2, #40]	; 0x28
   11558:	0a12      	lsrs	r2, r2, #8
   1155a:	b2d2      	uxtb	r2, r2
   1155c:	701a      	strb	r2, [r3, #0]
   1155e:	9b06      	ldr	r3, [sp, #24]
   11560:	1c5a      	adds	r2, r3, #1
   11562:	9206      	str	r2, [sp, #24]
   11564:	9a07      	ldr	r2, [sp, #28]
   11566:	6a92      	ldr	r2, [r2, #40]	; 0x28
   11568:	0c12      	lsrs	r2, r2, #16
   1156a:	b2d2      	uxtb	r2, r2
   1156c:	701a      	strb	r2, [r3, #0]
   1156e:	9b06      	ldr	r3, [sp, #24]
   11570:	1c5a      	adds	r2, r3, #1
   11572:	9206      	str	r2, [sp, #24]
   11574:	9a07      	ldr	r2, [sp, #28]
   11576:	6a92      	ldr	r2, [r2, #40]	; 0x28
   11578:	0e12      	lsrs	r2, r2, #24
   1157a:	b2d2      	uxtb	r2, r2
   1157c:	701a      	strb	r2, [r3, #0]

      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1157e:	4b08      	ldr	r3, [pc, #32]	; (115a0 <DmReadRemoteFeatures+0xb0>)
   11580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   11584:	aa02      	add	r2, sp, #8
   11586:	4610      	mov	r0, r2
   11588:	4798      	blx	r3
    {
      /* Request the remote features from the peer */
      HciLeReadRemoteFeatCmd(pCcb->handle);
    }
  }
}
   1158a:	e004      	b.n	11596 <DmReadRemoteFeatures+0xa6>
      HciLeReadRemoteFeatCmd(pCcb->handle);
   1158c:	9b07      	ldr	r3, [sp, #28]
   1158e:	899b      	ldrh	r3, [r3, #12]
   11590:	4618      	mov	r0, r3
   11592:	f00b fef0 	bl	1d376 <HciLeReadRemoteFeatCmd>
}
   11596:	bf00      	nop
   11598:	b009      	add	sp, #36	; 0x24
   1159a:	f85d fb04 	ldr.w	pc, [sp], #4
   1159e:	bf00      	nop
   115a0:	1000898c 	.word	0x1000898c

000115a4 <DmConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnUpdate(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
   115a4:	b500      	push	{lr}
   115a6:	b085      	sub	sp, #20
   115a8:	4603      	mov	r3, r0
   115aa:	9100      	str	r1, [sp, #0]
   115ac:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnApiUpdate_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiUpdate_t))) != NULL)
   115b0:	2010      	movs	r0, #16
   115b2:	f006 ff5e 	bl	18472 <WsfMsgAlloc>
   115b6:	9003      	str	r0, [sp, #12]
   115b8:	9b03      	ldr	r3, [sp, #12]
   115ba:	2b00      	cmp	r3, #0
   115bc:	d01e      	beq.n	115fc <DmConnUpdate+0x58>
  {
    pMsg->hdr.event = (DmConnRole(connId) == DM_ROLE_MASTER) ?
   115be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   115c2:	4618      	mov	r0, r3
   115c4:	f000 f9d0 	bl	11968 <DmConnRole>
   115c8:	4603      	mov	r3, r0
   115ca:	2b00      	cmp	r3, #0
   115cc:	d101      	bne.n	115d2 <DmConnUpdate+0x2e>
   115ce:	2233      	movs	r2, #51	; 0x33
   115d0:	e000      	b.n	115d4 <DmConnUpdate+0x30>
   115d2:	2234      	movs	r2, #52	; 0x34
   115d4:	9b03      	ldr	r3, [sp, #12]
   115d6:	709a      	strb	r2, [r3, #2]
                      DM_CONN_MSG_API_UPDATE_MASTER : DM_CONN_MSG_API_UPDATE_SLAVE;
    pMsg->hdr.param = connId;
   115d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   115dc:	b29a      	uxth	r2, r3
   115de:	9b03      	ldr	r3, [sp, #12]
   115e0:	801a      	strh	r2, [r3, #0]
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   115e2:	9b03      	ldr	r3, [sp, #12]
   115e4:	3304      	adds	r3, #4
   115e6:	220c      	movs	r2, #12
   115e8:	9900      	ldr	r1, [sp, #0]
   115ea:	4618      	mov	r0, r3
   115ec:	f7fa fdb8 	bl	c160 <memcpy>

    WsfMsgSend(dmCb.handlerId, pMsg);
   115f0:	4b04      	ldr	r3, [pc, #16]	; (11604 <DmConnUpdate+0x60>)
   115f2:	7b1b      	ldrb	r3, [r3, #12]
   115f4:	9903      	ldr	r1, [sp, #12]
   115f6:	4618      	mov	r0, r3
   115f8:	f006 ff5f 	bl	184ba <WsfMsgSend>
  }
}
   115fc:	bf00      	nop
   115fe:	b005      	add	sp, #20
   11600:	f85d fb04 	ldr.w	pc, [sp], #4
   11604:	10008a50 	.word	0x10008a50

00011608 <DmRemoteConnParamReqReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmRemoteConnParamReqReply(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
   11608:	b500      	push	{lr}
   1160a:	b085      	sub	sp, #20
   1160c:	4603      	mov	r3, r0
   1160e:	9100      	str	r1, [sp, #0]
   11610:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnApiRemConnParamReqReply_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
   11614:	2010      	movs	r0, #16
   11616:	f006 ff2c 	bl	18472 <WsfMsgAlloc>
   1161a:	9003      	str	r0, [sp, #12]
   1161c:	9b03      	ldr	r3, [sp, #12]
   1161e:	2b00      	cmp	r3, #0
   11620:	d014      	beq.n	1164c <DmRemoteConnParamReqReply+0x44>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY;
   11622:	9b03      	ldr	r3, [sp, #12]
   11624:	2242      	movs	r2, #66	; 0x42
   11626:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   11628:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1162c:	b29a      	uxth	r2, r3
   1162e:	9b03      	ldr	r3, [sp, #12]
   11630:	801a      	strh	r2, [r3, #0]
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   11632:	9b03      	ldr	r3, [sp, #12]
   11634:	3304      	adds	r3, #4
   11636:	220c      	movs	r2, #12
   11638:	9900      	ldr	r1, [sp, #0]
   1163a:	4618      	mov	r0, r3
   1163c:	f7fa fd90 	bl	c160 <memcpy>

    WsfMsgSend(dmCb.handlerId, pMsg);
   11640:	4b04      	ldr	r3, [pc, #16]	; (11654 <DmRemoteConnParamReqReply+0x4c>)
   11642:	7b1b      	ldrb	r3, [r3, #12]
   11644:	9903      	ldr	r1, [sp, #12]
   11646:	4618      	mov	r0, r3
   11648:	f006 ff37 	bl	184ba <WsfMsgSend>
  }
}
   1164c:	bf00      	nop
   1164e:	b005      	add	sp, #20
   11650:	f85d fb04 	ldr.w	pc, [sp], #4
   11654:	10008a50 	.word	0x10008a50

00011658 <DmRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmRemoteConnParamReqNegReply(dmConnId_t connId, uint8_t reason)
{
   11658:	b500      	push	{lr}
   1165a:	b085      	sub	sp, #20
   1165c:	4603      	mov	r3, r0
   1165e:	460a      	mov	r2, r1
   11660:	f88d 3007 	strb.w	r3, [sp, #7]
   11664:	4613      	mov	r3, r2
   11666:	f88d 3006 	strb.w	r3, [sp, #6]
  dmConnApiRemConnParamReqNegReply_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
   1166a:	2006      	movs	r0, #6
   1166c:	f006 ff01 	bl	18472 <WsfMsgAlloc>
   11670:	9003      	str	r0, [sp, #12]
   11672:	9b03      	ldr	r3, [sp, #12]
   11674:	2b00      	cmp	r3, #0
   11676:	d011      	beq.n	1169c <DmRemoteConnParamReqNegReply+0x44>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
   11678:	9b03      	ldr	r3, [sp, #12]
   1167a:	2243      	movs	r2, #67	; 0x43
   1167c:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   1167e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11682:	b29a      	uxth	r2, r3
   11684:	9b03      	ldr	r3, [sp, #12]
   11686:	801a      	strh	r2, [r3, #0]
    pMsg->reason = reason;
   11688:	9b03      	ldr	r3, [sp, #12]
   1168a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1168e:	711a      	strb	r2, [r3, #4]

    WsfMsgSend(dmCb.handlerId, pMsg);
   11690:	4b04      	ldr	r3, [pc, #16]	; (116a4 <DmRemoteConnParamReqNegReply+0x4c>)
   11692:	7b1b      	ldrb	r3, [r3, #12]
   11694:	9903      	ldr	r1, [sp, #12]
   11696:	4618      	mov	r0, r3
   11698:	f006 ff0f 	bl	184ba <WsfMsgSend>
  }
}
   1169c:	bf00      	nop
   1169e:	b005      	add	sp, #20
   116a0:	f85d fb04 	ldr.w	pc, [sp], #4
   116a4:	10008a50 	.word	0x10008a50

000116a8 <DmConnIdByHandle>:
 *
 *  \return Connection ID or DM_CONN_ID_NONE if error.
 */
/*************************************************************************************************/
dmConnId_t DmConnIdByHandle(uint16_t handle)
{
   116a8:	b500      	push	{lr}
   116aa:	b085      	sub	sp, #20
   116ac:	4603      	mov	r3, r0
   116ae:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   116b2:	4b15      	ldr	r3, [pc, #84]	; (11708 <DmConnIdByHandle+0x60>)
   116b4:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   116b6:	2303      	movs	r3, #3
   116b8:	f88d 300b 	strb.w	r3, [sp, #11]
   116bc:	e014      	b.n	116e8 <DmConnIdByHandle+0x40>
  {
    if (pCcb->inUse && (pCcb->handle == handle))
   116be:	9b03      	ldr	r3, [sp, #12]
   116c0:	7d9b      	ldrb	r3, [r3, #22]
   116c2:	2b00      	cmp	r3, #0
   116c4:	d008      	beq.n	116d8 <DmConnIdByHandle+0x30>
   116c6:	9b03      	ldr	r3, [sp, #12]
   116c8:	899b      	ldrh	r3, [r3, #12]
   116ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   116ce:	429a      	cmp	r2, r3
   116d0:	d102      	bne.n	116d8 <DmConnIdByHandle+0x30>
    {
      return pCcb->connId;
   116d2:	9b03      	ldr	r3, [sp, #12]
   116d4:	7c1b      	ldrb	r3, [r3, #16]
   116d6:	e012      	b.n	116fe <DmConnIdByHandle+0x56>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   116d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   116dc:	3b01      	subs	r3, #1
   116de:	f88d 300b 	strb.w	r3, [sp, #11]
   116e2:	9b03      	ldr	r3, [sp, #12]
   116e4:	3330      	adds	r3, #48	; 0x30
   116e6:	9303      	str	r3, [sp, #12]
   116e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   116ec:	2b00      	cmp	r3, #0
   116ee:	d1e6      	bne.n	116be <DmConnIdByHandle+0x16>
    }
  }

  DM_TRACE_WARN1("DmConnIdByHandle not found 0x%04x", handle);
   116f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   116f4:	4619      	mov	r1, r3
   116f6:	4805      	ldr	r0, [pc, #20]	; (1170c <DmConnIdByHandle+0x64>)
   116f8:	f007 fb26 	bl	18d48 <WsfTrace>

  return DM_CONN_ID_NONE;
   116fc:	2300      	movs	r3, #0
}
   116fe:	4618      	mov	r0, r3
   11700:	b005      	add	sp, #20
   11702:	f85d fb04 	ldr.w	pc, [sp], #4
   11706:	bf00      	nop
   11708:	1000898c 	.word	0x1000898c
   1170c:	00028694 	.word	0x00028694

00011710 <DmConnInUse>:
 *
 *  \return TRUE if the connection is in use, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t DmConnInUse(dmConnId_t connId)
{
   11710:	b082      	sub	sp, #8
   11712:	4603      	mov	r3, r0
   11714:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].inUse;
   11718:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1171c:	1e5a      	subs	r2, r3, #1
   1171e:	4905      	ldr	r1, [pc, #20]	; (11734 <DmConnInUse+0x24>)
   11720:	4613      	mov	r3, r2
   11722:	005b      	lsls	r3, r3, #1
   11724:	4413      	add	r3, r2
   11726:	011b      	lsls	r3, r3, #4
   11728:	440b      	add	r3, r1
   1172a:	3316      	adds	r3, #22
   1172c:	781b      	ldrb	r3, [r3, #0]
}
   1172e:	4618      	mov	r0, r3
   11730:	b002      	add	sp, #8
   11732:	4770      	bx	lr
   11734:	1000898c 	.word	0x1000898c

00011738 <DmConnPeerAddrType>:
 *
 *  \return Peer address type.
 */
/*************************************************************************************************/
uint8_t DmConnPeerAddrType(dmConnId_t connId)
{
   11738:	b082      	sub	sp, #8
   1173a:	4603      	mov	r3, r0
   1173c:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddrType;
   11740:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11744:	1e5a      	subs	r2, r3, #1
   11746:	4905      	ldr	r1, [pc, #20]	; (1175c <DmConnPeerAddrType+0x24>)
   11748:	4613      	mov	r3, r2
   1174a:	005b      	lsls	r3, r3, #1
   1174c:	4413      	add	r3, r2
   1174e:	011b      	lsls	r3, r3, #4
   11750:	440b      	add	r3, r1
   11752:	3313      	adds	r3, #19
   11754:	781b      	ldrb	r3, [r3, #0]
}
   11756:	4618      	mov	r0, r3
   11758:	b002      	add	sp, #8
   1175a:	4770      	bx	lr
   1175c:	1000898c 	.word	0x1000898c

00011760 <DmConnPeerAddr>:
 *
 *  \return Pointer to peer device address.
 */
/*************************************************************************************************/
uint8_t *DmConnPeerAddr(dmConnId_t connId)
{
   11760:	b082      	sub	sp, #8
   11762:	4603      	mov	r3, r0
   11764:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddr;
   11768:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1176c:	1e5a      	subs	r2, r3, #1
   1176e:	4613      	mov	r3, r2
   11770:	005b      	lsls	r3, r3, #1
   11772:	4413      	add	r3, r2
   11774:	011b      	lsls	r3, r3, #4
   11776:	4a02      	ldr	r2, [pc, #8]	; (11780 <DmConnPeerAddr+0x20>)
   11778:	4413      	add	r3, r2
}
   1177a:	4618      	mov	r0, r3
   1177c:	b002      	add	sp, #8
   1177e:	4770      	bx	lr
   11780:	1000898c 	.word	0x1000898c

00011784 <DmConnLocalAddrType>:
 *
 *  \return Local address type.
 */
/*************************************************************************************************/
uint8_t DmConnLocalAddrType(dmConnId_t connId)
{
   11784:	b082      	sub	sp, #8
   11786:	4603      	mov	r3, r0
   11788:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddrType;
   1178c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11790:	1e5a      	subs	r2, r3, #1
   11792:	4905      	ldr	r1, [pc, #20]	; (117a8 <DmConnLocalAddrType+0x24>)
   11794:	4613      	mov	r3, r2
   11796:	005b      	lsls	r3, r3, #1
   11798:	4413      	add	r3, r2
   1179a:	011b      	lsls	r3, r3, #4
   1179c:	440b      	add	r3, r1
   1179e:	3314      	adds	r3, #20
   117a0:	781b      	ldrb	r3, [r3, #0]
}
   117a2:	4618      	mov	r0, r3
   117a4:	b002      	add	sp, #8
   117a6:	4770      	bx	lr
   117a8:	1000898c 	.word	0x1000898c

000117ac <DmConnLocalAddr>:
 *
 *  \return Pointer to local address.
 */
/*************************************************************************************************/
uint8_t *DmConnLocalAddr(dmConnId_t connId)
{
   117ac:	b082      	sub	sp, #8
   117ae:	4603      	mov	r3, r0
   117b0:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddr;
   117b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117b8:	1e5a      	subs	r2, r3, #1
   117ba:	4613      	mov	r3, r2
   117bc:	005b      	lsls	r3, r3, #1
   117be:	4413      	add	r3, r2
   117c0:	011b      	lsls	r3, r3, #4
   117c2:	4a03      	ldr	r2, [pc, #12]	; (117d0 <DmConnLocalAddr+0x24>)
   117c4:	4413      	add	r3, r2
   117c6:	3306      	adds	r3, #6
}
   117c8:	4618      	mov	r0, r3
   117ca:	b002      	add	sp, #8
   117cc:	4770      	bx	lr
   117ce:	bf00      	nop
   117d0:	1000898c 	.word	0x1000898c

000117d4 <DmConnPeerRpa>:
*
*  \return Pointer to peer RPA.
*/
/*************************************************************************************************/
uint8_t *DmConnPeerRpa(dmConnId_t connId)
{
   117d4:	b082      	sub	sp, #8
   117d6:	4603      	mov	r3, r0
   117d8:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].peerRpa;
   117dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117e0:	1e5a      	subs	r2, r3, #1
   117e2:	4613      	mov	r3, r2
   117e4:	005b      	lsls	r3, r3, #1
   117e6:	4413      	add	r3, r2
   117e8:	011b      	lsls	r3, r3, #4
   117ea:	3320      	adds	r3, #32
   117ec:	4a02      	ldr	r2, [pc, #8]	; (117f8 <DmConnPeerRpa+0x24>)
   117ee:	4413      	add	r3, r2
}
   117f0:	4618      	mov	r0, r3
   117f2:	b002      	add	sp, #8
   117f4:	4770      	bx	lr
   117f6:	bf00      	nop
   117f8:	1000898c 	.word	0x1000898c

000117fc <DmConnLocalRpa>:
*
*  \return Pointer to local RPA.
*/
/*************************************************************************************************/
uint8_t *DmConnLocalRpa(dmConnId_t connId)
{
   117fc:	b082      	sub	sp, #8
   117fe:	4603      	mov	r3, r0
   11800:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].localRpa;
   11804:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11808:	1e5a      	subs	r2, r3, #1
   1180a:	4613      	mov	r3, r2
   1180c:	005b      	lsls	r3, r3, #1
   1180e:	4413      	add	r3, r2
   11810:	011b      	lsls	r3, r3, #4
   11812:	3318      	adds	r3, #24
   11814:	4a02      	ldr	r2, [pc, #8]	; (11820 <DmConnLocalRpa+0x24>)
   11816:	4413      	add	r3, r2
   11818:	3302      	adds	r3, #2
}
   1181a:	4618      	mov	r0, r3
   1181c:	b002      	add	sp, #8
   1181e:	4770      	bx	lr
   11820:	1000898c 	.word	0x1000898c

00011824 <DmConnSecLevel>:
 *
 *  \return Security level of the connection.
 */
/*************************************************************************************************/
uint8_t DmConnSecLevel(dmConnId_t connId)
{
   11824:	b082      	sub	sp, #8
   11826:	4603      	mov	r3, r0
   11828:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].secLevel;
   1182c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11830:	1e5a      	subs	r2, r3, #1
   11832:	4905      	ldr	r1, [pc, #20]	; (11848 <DmConnSecLevel+0x24>)
   11834:	4613      	mov	r3, r2
   11836:	005b      	lsls	r3, r3, #1
   11838:	4413      	add	r3, r2
   1183a:	011b      	lsls	r3, r3, #4
   1183c:	440b      	add	r3, r1
   1183e:	3317      	adds	r3, #23
   11840:	781b      	ldrb	r3, [r3, #0]
}
   11842:	4618      	mov	r0, r3
   11844:	b002      	add	sp, #8
   11846:	4770      	bx	lr
   11848:	1000898c 	.word	0x1000898c

0001184c <DmConnSetIdle>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSetIdle(dmConnId_t connId, uint16_t idleMask, uint8_t idle)
{
   1184c:	b500      	push	{lr}
   1184e:	b083      	sub	sp, #12
   11850:	4603      	mov	r3, r0
   11852:	f88d 3007 	strb.w	r3, [sp, #7]
   11856:	460b      	mov	r3, r1
   11858:	f8ad 3004 	strh.w	r3, [sp, #4]
   1185c:	4613      	mov	r3, r2
   1185e:	f88d 3006 	strb.w	r3, [sp, #6]
  WsfTaskLock();
   11862:	f006 fe93 	bl	1858c <WsfTaskLock>

  if (DmConnInUse(connId))
   11866:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1186a:	4618      	mov	r0, r3
   1186c:	f7ff ff50 	bl	11710 <DmConnInUse>
   11870:	4603      	mov	r3, r0
   11872:	2b00      	cmp	r3, #0
   11874:	d03e      	beq.n	118f4 <DmConnSetIdle+0xa8>
  {
    if (idle == DM_CONN_IDLE)
   11876:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1187a:	2b00      	cmp	r3, #0
   1187c:	d11f      	bne.n	118be <DmConnSetIdle+0x72>
    {
      /* clear bit if idle */
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   1187e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11882:	1e5a      	subs	r2, r3, #1
   11884:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11888:	1e59      	subs	r1, r3, #1
   1188a:	4826      	ldr	r0, [pc, #152]	; (11924 <DmConnSetIdle+0xd8>)
   1188c:	460b      	mov	r3, r1
   1188e:	005b      	lsls	r3, r3, #1
   11890:	440b      	add	r3, r1
   11892:	011b      	lsls	r3, r3, #4
   11894:	4403      	add	r3, r0
   11896:	330e      	adds	r3, #14
   11898:	881b      	ldrh	r3, [r3, #0]
   1189a:	b219      	sxth	r1, r3
   1189c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   118a0:	43db      	mvns	r3, r3
   118a2:	b21b      	sxth	r3, r3
   118a4:	400b      	ands	r3, r1
   118a6:	b21b      	sxth	r3, r3
   118a8:	b298      	uxth	r0, r3
   118aa:	491e      	ldr	r1, [pc, #120]	; (11924 <DmConnSetIdle+0xd8>)
   118ac:	4613      	mov	r3, r2
   118ae:	005b      	lsls	r3, r3, #1
   118b0:	4413      	add	r3, r2
   118b2:	011b      	lsls	r3, r3, #4
   118b4:	440b      	add	r3, r1
   118b6:	330e      	adds	r3, #14
   118b8:	4602      	mov	r2, r0
   118ba:	801a      	strh	r2, [r3, #0]
   118bc:	e01a      	b.n	118f4 <DmConnSetIdle+0xa8>
    }
    else
    {
      /* set bit if busy */
      dmConnCb.ccb[connId-1].idleMask |= idleMask;
   118be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   118c2:	1e5a      	subs	r2, r3, #1
   118c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   118c8:	1e59      	subs	r1, r3, #1
   118ca:	4816      	ldr	r0, [pc, #88]	; (11924 <DmConnSetIdle+0xd8>)
   118cc:	460b      	mov	r3, r1
   118ce:	005b      	lsls	r3, r3, #1
   118d0:	440b      	add	r3, r1
   118d2:	011b      	lsls	r3, r3, #4
   118d4:	4403      	add	r3, r0
   118d6:	330e      	adds	r3, #14
   118d8:	8819      	ldrh	r1, [r3, #0]
   118da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   118de:	430b      	orrs	r3, r1
   118e0:	b298      	uxth	r0, r3
   118e2:	4910      	ldr	r1, [pc, #64]	; (11924 <DmConnSetIdle+0xd8>)
   118e4:	4613      	mov	r3, r2
   118e6:	005b      	lsls	r3, r3, #1
   118e8:	4413      	add	r3, r2
   118ea:	011b      	lsls	r3, r3, #4
   118ec:	440b      	add	r3, r1
   118ee:	330e      	adds	r3, #14
   118f0:	4602      	mov	r2, r0
   118f2:	801a      	strh	r2, [r3, #0]
    }
  }

  WsfTaskUnlock();
   118f4:	f006 fe4f 	bl	18596 <WsfTaskUnlock>

  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   118f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   118fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11900:	1e5a      	subs	r2, r3, #1
   11902:	4908      	ldr	r1, [pc, #32]	; (11924 <DmConnSetIdle+0xd8>)
   11904:	4613      	mov	r3, r2
   11906:	005b      	lsls	r3, r3, #1
   11908:	4413      	add	r3, r2
   1190a:	011b      	lsls	r3, r3, #4
   1190c:	440b      	add	r3, r1
   1190e:	330e      	adds	r3, #14
   11910:	881b      	ldrh	r3, [r3, #0]
   11912:	461a      	mov	r2, r3
   11914:	4601      	mov	r1, r0
   11916:	4804      	ldr	r0, [pc, #16]	; (11928 <DmConnSetIdle+0xdc>)
   11918:	f007 fa16 	bl	18d48 <WsfTrace>
}
   1191c:	bf00      	nop
   1191e:	b003      	add	sp, #12
   11920:	f85d fb04 	ldr.w	pc, [sp], #4
   11924:	1000898c 	.word	0x1000898c
   11928:	000286b8 	.word	0x000286b8

0001192c <DmConnCheckIdle>:
 *
 *  \return Zero if connection is idle, nonzero if busy.
 */
/*************************************************************************************************/
uint16_t DmConnCheckIdle(dmConnId_t connId)
{
   1192c:	b500      	push	{lr}
   1192e:	b085      	sub	sp, #20
   11930:	4603      	mov	r3, r0
   11932:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t idleMask;

  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  WsfTaskLock();
   11936:	f006 fe29 	bl	1858c <WsfTaskLock>
  idleMask = dmConnCb.ccb[connId-1].idleMask;
   1193a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1193e:	1e5a      	subs	r2, r3, #1
   11940:	4908      	ldr	r1, [pc, #32]	; (11964 <DmConnCheckIdle+0x38>)
   11942:	4613      	mov	r3, r2
   11944:	005b      	lsls	r3, r3, #1
   11946:	4413      	add	r3, r2
   11948:	011b      	lsls	r3, r3, #4
   1194a:	440b      	add	r3, r1
   1194c:	330e      	adds	r3, #14
   1194e:	881b      	ldrh	r3, [r3, #0]
   11950:	f8ad 300e 	strh.w	r3, [sp, #14]
  WsfTaskUnlock();
   11954:	f006 fe1f 	bl	18596 <WsfTaskUnlock>

  return idleMask;
   11958:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   1195c:	4618      	mov	r0, r3
   1195e:	b005      	add	sp, #20
   11960:	f85d fb04 	ldr.w	pc, [sp], #4
   11964:	1000898c 	.word	0x1000898c

00011968 <DmConnRole>:
 *
 *  \return Connection role.
 */
/*************************************************************************************************/
uint8_t DmConnRole(dmConnId_t connId)
{
   11968:	b082      	sub	sp, #8
   1196a:	4603      	mov	r3, r0
   1196c:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].role;
   11970:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11974:	1e5a      	subs	r2, r3, #1
   11976:	4905      	ldr	r1, [pc, #20]	; (1198c <DmConnRole+0x24>)
   11978:	4613      	mov	r3, r2
   1197a:	005b      	lsls	r3, r3, #1
   1197c:	4413      	add	r3, r2
   1197e:	011b      	lsls	r3, r3, #4
   11980:	440b      	add	r3, r1
   11982:	3319      	adds	r3, #25
   11984:	781b      	ldrb	r3, [r3, #0]
}
   11986:	4618      	mov	r0, r3
   11988:	b002      	add	sp, #8
   1198a:	4770      	bx	lr
   1198c:	1000898c 	.word	0x1000898c

00011990 <dmConnUpdateCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConnUpdateCback(dmConnCcb_t *pCcb, uint8_t status)
{
   11990:	b500      	push	{lr}
   11992:	b087      	sub	sp, #28
   11994:	9001      	str	r0, [sp, #4]
   11996:	460b      	mov	r3, r1
   11998:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeConnUpdateCmplEvt_t  evt;

  /* call callback */
  evt.hdr.event = DM_CONN_UPDATE_IND;
   1199c:	2329      	movs	r3, #41	; 0x29
   1199e:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   119a2:	9b01      	ldr	r3, [sp, #4]
   119a4:	7c1b      	ldrb	r3, [r3, #16]
   119a6:	b29b      	uxth	r3, r3
   119a8:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.status = evt.hdr.status = status;
   119ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
   119b0:	f88d 300b 	strb.w	r3, [sp, #11]
   119b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   119b8:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pCcb->handle;
   119bc:	9b01      	ldr	r3, [sp, #4]
   119be:	899b      	ldrh	r3, [r3, #12]
   119c0:	f8ad 300e 	strh.w	r3, [sp, #14]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   119c4:	4b04      	ldr	r3, [pc, #16]	; (119d8 <dmConnUpdateCback+0x48>)
   119c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   119ca:	aa02      	add	r2, sp, #8
   119cc:	4610      	mov	r0, r2
   119ce:	4798      	blx	r3
}
   119d0:	bf00      	nop
   119d2:	b007      	add	sp, #28
   119d4:	f85d fb04 	ldr.w	pc, [sp], #4
   119d8:	1000898c 	.word	0x1000898c

000119dc <dmConnSmActUpdateSlave>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActUpdateSlave(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   119dc:	b500      	push	{lr}
   119de:	b083      	sub	sp, #12
   119e0:	9001      	str	r0, [sp, #4]
   119e2:	9100      	str	r1, [sp, #0]
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   119e4:	9b01      	ldr	r3, [sp, #4]
   119e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119e8:	f003 0302 	and.w	r3, r3, #2
   119ec:	2b00      	cmp	r3, #0
   119ee:	d00f      	beq.n	11a10 <dmConnSmActUpdateSlave+0x34>
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
   119f0:	f00c fd7a 	bl	1e4e8 <HciGetLeSupFeat>
   119f4:	4603      	mov	r3, r0
   119f6:	f003 0302 	and.w	r3, r3, #2
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   119fa:	2b00      	cmp	r3, #0
   119fc:	d008      	beq.n	11a10 <dmConnSmActUpdateSlave+0x34>
  {
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
   119fe:	9b01      	ldr	r3, [sp, #4]
   11a00:	899a      	ldrh	r2, [r3, #12]
   11a02:	9b00      	ldr	r3, [sp, #0]
   11a04:	3304      	adds	r3, #4
   11a06:	4619      	mov	r1, r3
   11a08:	4610      	mov	r0, r2
   11a0a:	f00b fa19 	bl	1ce40 <HciLeConnUpdateCmd>
  else
  {
    /* call callback */
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
  }
}
   11a0e:	e013      	b.n	11a38 <dmConnSmActUpdateSlave+0x5c>
  else if (!pCcb->updating)
   11a10:	9b01      	ldr	r3, [sp, #4]
   11a12:	7c5b      	ldrb	r3, [r3, #17]
   11a14:	2b00      	cmp	r3, #0
   11a16:	d10b      	bne.n	11a30 <dmConnSmActUpdateSlave+0x54>
    pCcb->updating = TRUE;
   11a18:	9b01      	ldr	r3, [sp, #4]
   11a1a:	2201      	movs	r2, #1
   11a1c:	745a      	strb	r2, [r3, #17]
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   11a1e:	9b01      	ldr	r3, [sp, #4]
   11a20:	899a      	ldrh	r2, [r3, #12]
   11a22:	9b00      	ldr	r3, [sp, #0]
   11a24:	3304      	adds	r3, #4
   11a26:	4619      	mov	r1, r3
   11a28:	4610      	mov	r0, r2
   11a2a:	f00a f849 	bl	1bac0 <L2cDmConnUpdateReq>
}
   11a2e:	e003      	b.n	11a38 <dmConnSmActUpdateSlave+0x5c>
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
   11a30:	210c      	movs	r1, #12
   11a32:	9801      	ldr	r0, [sp, #4]
   11a34:	f7ff ffac 	bl	11990 <dmConnUpdateCback>
}
   11a38:	bf00      	nop
   11a3a:	b003      	add	sp, #12
   11a3c:	f85d fb04 	ldr.w	pc, [sp], #4

00011a40 <dmConnSmActL2cUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActL2cUpdateCnf(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   11a40:	b500      	push	{lr}
   11a42:	b083      	sub	sp, #12
   11a44:	9001      	str	r0, [sp, #4]
   11a46:	9100      	str	r1, [sp, #0]
  /* if connection update in progress */
  if (pCcb->updating)
   11a48:	9b01      	ldr	r3, [sp, #4]
   11a4a:	7c5b      	ldrb	r3, [r3, #17]
   11a4c:	2b00      	cmp	r3, #0
   11a4e:	d00d      	beq.n	11a6c <dmConnSmActL2cUpdateCnf+0x2c>
  {
    pCcb->updating = FALSE;
   11a50:	9b01      	ldr	r3, [sp, #4]
   11a52:	2200      	movs	r2, #0
   11a54:	745a      	strb	r2, [r3, #17]

    /* if reason indicates failure */
    if (pMsg->l2cUpdateCnf.result != L2C_CONN_PARAM_ACCEPTED)
   11a56:	9b00      	ldr	r3, [sp, #0]
   11a58:	889b      	ldrh	r3, [r3, #4]
   11a5a:	2b00      	cmp	r3, #0
   11a5c:	d006      	beq.n	11a6c <dmConnSmActL2cUpdateCnf+0x2c>
    {
      /* call callback */
      dmConnUpdateCback(pCcb, (uint8_t) pMsg->l2cUpdateCnf.result);
   11a5e:	9b00      	ldr	r3, [sp, #0]
   11a60:	889b      	ldrh	r3, [r3, #4]
   11a62:	b2db      	uxtb	r3, r3
   11a64:	4619      	mov	r1, r3
   11a66:	9801      	ldr	r0, [sp, #4]
   11a68:	f7ff ff92 	bl	11990 <dmConnUpdateCback>
    }
  }
}
   11a6c:	bf00      	nop
   11a6e:	b003      	add	sp, #12
   11a70:	f85d fb04 	ldr.w	pc, [sp], #4

00011a74 <DmL2cConnUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cConnUpdateCnf(uint16_t handle, uint16_t result)
{
   11a74:	b500      	push	{lr}
   11a76:	b087      	sub	sp, #28
   11a78:	4603      	mov	r3, r0
   11a7a:	460a      	mov	r2, r1
   11a7c:	f8ad 3006 	strh.w	r3, [sp, #6]
   11a80:	4613      	mov	r3, r2
   11a82:	f8ad 3004 	strh.w	r3, [sp, #4]
  dmConnL2cUpdateCnf_t  updateCnf;
  dmConnCcb_t           *pCcb;

  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
   11a86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11a8a:	4618      	mov	r0, r3
   11a8c:	f7ff f84a 	bl	10b24 <dmConnCcbByHandle>
   11a90:	9005      	str	r0, [sp, #20]
   11a92:	9b05      	ldr	r3, [sp, #20]
   11a94:	2b00      	cmp	r3, #0
   11a96:	d00b      	beq.n	11ab0 <DmL2cConnUpdateCnf+0x3c>
  {
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
   11a98:	2336      	movs	r3, #54	; 0x36
   11a9a:	f88d 300e 	strb.w	r3, [sp, #14]
    updateCnf.result = result;
   11a9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11aa2:	f8ad 3010 	strh.w	r3, [sp, #16]

    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
   11aa6:	ab03      	add	r3, sp, #12
   11aa8:	4619      	mov	r1, r3
   11aaa:	9805      	ldr	r0, [sp, #20]
   11aac:	f000 f86e 	bl	11b8c <dmConnSmExecute>
  }
}
   11ab0:	bf00      	nop
   11ab2:	b007      	add	sp, #28
   11ab4:	f85d fb04 	ldr.w	pc, [sp], #4

00011ab8 <DmL2cCmdRejInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cCmdRejInd(uint16_t handle, uint16_t result)
{
   11ab8:	b500      	push	{lr}
   11aba:	b085      	sub	sp, #20
   11abc:	4603      	mov	r3, r0
   11abe:	460a      	mov	r2, r1
   11ac0:	f8ad 3006 	strh.w	r3, [sp, #6]
   11ac4:	4613      	mov	r3, r2
   11ac6:	f8ad 3004 	strh.w	r3, [sp, #4]
  dmL2cCmdRejEvt_t  evt;

  /* call callback */
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
   11aca:	2363      	movs	r3, #99	; 0x63
   11acc:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.status = HCI_SUCCESS;
   11ad0:	2300      	movs	r3, #0
   11ad2:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.reason = result;
   11ad6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11ada:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.handle = handle;
   11ade:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11ae2:	f8ad 300e 	strh.w	r3, [sp, #14]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   11ae6:	4b05      	ldr	r3, [pc, #20]	; (11afc <DmL2cCmdRejInd+0x44>)
   11ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   11aec:	aa02      	add	r2, sp, #8
   11aee:	4610      	mov	r0, r2
   11af0:	4798      	blx	r3
}
   11af2:	bf00      	nop
   11af4:	b005      	add	sp, #20
   11af6:	f85d fb04 	ldr.w	pc, [sp], #4
   11afa:	bf00      	nop
   11afc:	1000898c 	.word	0x1000898c

00011b00 <dmConnSmActAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   11b00:	b500      	push	{lr}
   11b02:	b083      	sub	sp, #12
   11b04:	9001      	str	r0, [sp, #4]
   11b06:	9100      	str	r1, [sp, #0]
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
   11b08:	9b00      	ldr	r3, [sp, #0]
   11b0a:	7998      	ldrb	r0, [r3, #6]
   11b0c:	9b00      	ldr	r3, [sp, #0]
   11b0e:	8919      	ldrh	r1, [r3, #8]
   11b10:	9b00      	ldr	r3, [sp, #0]
   11b12:	7c5a      	ldrb	r2, [r3, #17]
                     pMsg->apiOpen.peerAddr);
   11b14:	9b00      	ldr	r3, [sp, #0]
   11b16:	330b      	adds	r3, #11
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
   11b18:	f7fe feba 	bl	10890 <dmAdvStartDirected>
}
   11b1c:	bf00      	nop
   11b1e:	b003      	add	sp, #12
   11b20:	f85d fb04 	ldr.w	pc, [sp], #4

00011b24 <dmConnSmActCancelAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActCancelAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   11b24:	b500      	push	{lr}
   11b26:	b083      	sub	sp, #12
   11b28:	9001      	str	r0, [sp, #4]
   11b2a:	9100      	str	r1, [sp, #0]
  dmAdvStopDirected();
   11b2c:	f7fe feea 	bl	10904 <dmAdvStopDirected>

  dmConnSmActConnFailed(pCcb, pMsg);
   11b30:	9900      	ldr	r1, [sp, #0]
   11b32:	9801      	ldr	r0, [sp, #4]
   11b34:	f7ff f956 	bl	10de4 <dmConnSmActConnFailed>
}
   11b38:	bf00      	nop
   11b3a:	b003      	add	sp, #12
   11b3c:	f85d fb04 	ldr.w	pc, [sp], #4

00011b40 <dmConnSmActConnAccepted>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnAccepted(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   11b40:	b500      	push	{lr}
   11b42:	b083      	sub	sp, #12
   11b44:	9001      	str	r0, [sp, #4]
   11b46:	9100      	str	r1, [sp, #0]
  dmAdvConnected();
   11b48:	f7fe ff04 	bl	10954 <dmAdvConnected>

  dmConnSmActConnOpened(pCcb, pMsg);
   11b4c:	9900      	ldr	r1, [sp, #0]
   11b4e:	9801      	ldr	r0, [sp, #4]
   11b50:	f7ff f8d0 	bl	10cf4 <dmConnSmActConnOpened>
}
   11b54:	bf00      	nop
   11b56:	b003      	add	sp, #12
   11b58:	f85d fb04 	ldr.w	pc, [sp], #4

00011b5c <dmConnSmActAcceptFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAcceptFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   11b5c:	b500      	push	{lr}
   11b5e:	b083      	sub	sp, #12
   11b60:	9001      	str	r0, [sp, #4]
   11b62:	9100      	str	r1, [sp, #0]
  dmAdvConnectFailed();
   11b64:	f7fe ff12 	bl	1098c <dmAdvConnectFailed>

  dmConnSmActConnFailed(pCcb, pMsg);
   11b68:	9900      	ldr	r1, [sp, #0]
   11b6a:	9801      	ldr	r0, [sp, #4]
   11b6c:	f7ff f93a 	bl	10de4 <dmConnSmActConnFailed>
}
   11b70:	bf00      	nop
   11b72:	b003      	add	sp, #12
   11b74:	f85d fb04 	ldr.w	pc, [sp], #4

00011b78 <DmConnSlaveInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSlaveInit(void)
{
  dmConnActSet[DM_CONN_ACT_SET_SLAVE] = (dmConnAct_t *) dmConnActSetSlave;
   11b78:	4b02      	ldr	r3, [pc, #8]	; (11b84 <DmConnSlaveInit+0xc>)
   11b7a:	4a03      	ldr	r2, [pc, #12]	; (11b88 <DmConnSlaveInit+0x10>)
   11b7c:	609a      	str	r2, [r3, #8]
}
   11b7e:	bf00      	nop
   11b80:	4770      	bx	lr
   11b82:	bf00      	nop
   11b84:	10008a40 	.word	0x10008a40
   11b88:	00029708 	.word	0x00029708

00011b8c <dmConnSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmExecute(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   11b8c:	b500      	push	{lr}
   11b8e:	b085      	sub	sp, #20
   11b90:	9001      	str	r0, [sp, #4]
   11b92:	9100      	str	r1, [sp, #0]
  dmConnAct_t       *actSet;
  uint8_t           action;
  uint8_t           event;

  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   11b94:	9b00      	ldr	r3, [sp, #0]
   11b96:	789b      	ldrb	r3, [r3, #2]
   11b98:	4619      	mov	r1, r3
   11b9a:	9b01      	ldr	r3, [sp, #4]
   11b9c:	7d5b      	ldrb	r3, [r3, #21]
   11b9e:	461a      	mov	r2, r3
   11ba0:	4824      	ldr	r0, [pc, #144]	; (11c34 <dmConnSmExecute+0xa8>)
   11ba2:	f007 f8d1 	bl	18d48 <WsfTrace>

  /* get the event */
  event = DM_MSG_MASK(pMsg->hdr.event);
   11ba6:	9b00      	ldr	r3, [sp, #0]
   11ba8:	789b      	ldrb	r3, [r3, #2]
   11baa:	f003 030f 	and.w	r3, r3, #15
   11bae:	f88d 300f 	strb.w	r3, [sp, #15]

  /* get action */
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   11bb2:	9b01      	ldr	r3, [sp, #4]
   11bb4:	7d5b      	ldrb	r3, [r3, #21]
   11bb6:	461a      	mov	r2, r3
   11bb8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11bbc:	481e      	ldr	r0, [pc, #120]	; (11c38 <dmConnSmExecute+0xac>)
   11bbe:	4613      	mov	r3, r2
   11bc0:	005b      	lsls	r3, r3, #1
   11bc2:	4413      	add	r3, r2
   11bc4:	009b      	lsls	r3, r3, #2
   11bc6:	4413      	add	r3, r2
   11bc8:	440b      	add	r3, r1
   11bca:	005b      	lsls	r3, r3, #1
   11bcc:	4403      	add	r3, r0
   11bce:	785b      	ldrb	r3, [r3, #1]
   11bd0:	f88d 300e 	strb.w	r3, [sp, #14]

  /* set next state */
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   11bd4:	9b01      	ldr	r3, [sp, #4]
   11bd6:	7d5b      	ldrb	r3, [r3, #21]
   11bd8:	461a      	mov	r2, r3
   11bda:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11bde:	4816      	ldr	r0, [pc, #88]	; (11c38 <dmConnSmExecute+0xac>)
   11be0:	4613      	mov	r3, r2
   11be2:	005b      	lsls	r3, r3, #1
   11be4:	4413      	add	r3, r2
   11be6:	009b      	lsls	r3, r3, #2
   11be8:	4413      	add	r3, r2
   11bea:	440b      	add	r3, r1
   11bec:	f810 2013 	ldrb.w	r2, [r0, r3, lsl #1]
   11bf0:	9b01      	ldr	r3, [sp, #4]
   11bf2:	755a      	strb	r2, [r3, #21]

  /* look up action set */
  actSet = dmConnActSet[DM_CONN_ACT_SET_ID(action)];
   11bf4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11bf8:	091b      	lsrs	r3, r3, #4
   11bfa:	b2db      	uxtb	r3, r3
   11bfc:	461a      	mov	r2, r3
   11bfe:	4b0f      	ldr	r3, [pc, #60]	; (11c3c <dmConnSmExecute+0xb0>)
   11c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c04:	9302      	str	r3, [sp, #8]

  /* if action set present */
  if (actSet != NULL)
   11c06:	9b02      	ldr	r3, [sp, #8]
   11c08:	2b00      	cmp	r3, #0
   11c0a:	d00b      	beq.n	11c24 <dmConnSmExecute+0x98>
  {
    /* execute action function in action set */
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   11c0c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11c10:	f003 030f 	and.w	r3, r3, #15
   11c14:	009b      	lsls	r3, r3, #2
   11c16:	9a02      	ldr	r2, [sp, #8]
   11c18:	4413      	add	r3, r2
   11c1a:	681b      	ldr	r3, [r3, #0]
   11c1c:	9900      	ldr	r1, [sp, #0]
   11c1e:	9801      	ldr	r0, [sp, #4]
   11c20:	4798      	blx	r3
  else
  {
     /* no action */
     dmConnSmActNone(pCcb, pMsg);
  }
}
   11c22:	e003      	b.n	11c2c <dmConnSmExecute+0xa0>
     dmConnSmActNone(pCcb, pMsg);
   11c24:	9900      	ldr	r1, [sp, #0]
   11c26:	9801      	ldr	r0, [sp, #4]
   11c28:	f7ff f84e 	bl	10cc8 <dmConnSmActNone>
}
   11c2c:	bf00      	nop
   11c2e:	b005      	add	sp, #20
   11c30:	f85d fb04 	ldr.w	pc, [sp], #4
   11c34:	000286d4 	.word	0x000286d4
   11c38:	00029720 	.word	0x00029720
   11c3c:	10008a40 	.word	0x10008a40

00011c40 <dmDevActReset>:
 *
 *  \return None.
*/
/*************************************************************************************************/
void dmDevActReset(wsfMsgHdr_t *pMsg)
{
   11c40:	b500      	push	{lr}
   11c42:	b085      	sub	sp, #20
   11c44:	9001      	str	r0, [sp, #4]
  uint8_t i;

  /* if DM not resetting */
  if (!dmCb.resetting)
   11c46:	4b10      	ldr	r3, [pc, #64]	; (11c88 <dmDevActReset+0x48>)
   11c48:	7c1b      	ldrb	r3, [r3, #16]
   11c4a:	2b00      	cmp	r3, #0
   11c4c:	d118      	bne.n	11c80 <dmDevActReset+0x40>
  {
    /* set resetting state */
    dmCb.resetting = TRUE;
   11c4e:	4b0e      	ldr	r3, [pc, #56]	; (11c88 <dmDevActReset+0x48>)
   11c50:	2201      	movs	r2, #1
   11c52:	741a      	strb	r2, [r3, #16]

    /* for each DM component */
    for (i = 0; i < DM_NUM_IDS; i++)
   11c54:	2300      	movs	r3, #0
   11c56:	f88d 300f 	strb.w	r3, [sp, #15]
   11c5a:	e00b      	b.n	11c74 <dmDevActReset+0x34>
    {
      /* call component's reset function */
      (*(dmFcnIfTbl[i]->reset))();
   11c5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11c60:	4a0a      	ldr	r2, [pc, #40]	; (11c8c <dmDevActReset+0x4c>)
   11c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c66:	681b      	ldr	r3, [r3, #0]
   11c68:	4798      	blx	r3
    for (i = 0; i < DM_NUM_IDS; i++)
   11c6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11c6e:	3301      	adds	r3, #1
   11c70:	f88d 300f 	strb.w	r3, [sp, #15]
   11c74:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11c78:	2b0d      	cmp	r3, #13
   11c7a:	d9ef      	bls.n	11c5c <dmDevActReset+0x1c>
    }

    /* start HCI reset sequence */
    HciResetSequence();
   11c7c:	f00c fa76 	bl	1e16c <HciResetSequence>
  }
}
   11c80:	bf00      	nop
   11c82:	b005      	add	sp, #20
   11c84:	f85d fb04 	ldr.w	pc, [sp], #4
   11c88:	10008a50 	.word	0x10008a50
   11c8c:	10002b00 	.word	0x10002b00

00011c90 <dmDevHciEvtReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtReset(hciEvt_t *pEvent)
{
   11c90:	b500      	push	{lr}
   11c92:	b083      	sub	sp, #12
   11c94:	9001      	str	r0, [sp, #4]
  /* reset resetting state */
  dmCb.resetting = FALSE;
   11c96:	4b07      	ldr	r3, [pc, #28]	; (11cb4 <dmDevHciEvtReset+0x24>)
   11c98:	2200      	movs	r2, #0
   11c9a:	741a      	strb	r2, [r3, #16]

  pEvent->hdr.event = DM_RESET_CMPL_IND;
   11c9c:	9b01      	ldr	r3, [sp, #4]
   11c9e:	2220      	movs	r2, #32
   11ca0:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   11ca2:	4b04      	ldr	r3, [pc, #16]	; (11cb4 <dmDevHciEvtReset+0x24>)
   11ca4:	689b      	ldr	r3, [r3, #8]
   11ca6:	9801      	ldr	r0, [sp, #4]
   11ca8:	4798      	blx	r3
}
   11caa:	bf00      	nop
   11cac:	b003      	add	sp, #12
   11cae:	f85d fb04 	ldr.w	pc, [sp], #4
   11cb2:	bf00      	nop
   11cb4:	10008a50 	.word	0x10008a50

00011cb8 <dmDevHciEvtVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtVendorSpec(hciEvt_t *pEvent)
{
   11cb8:	b500      	push	{lr}
   11cba:	b083      	sub	sp, #12
   11cbc:	9001      	str	r0, [sp, #4]
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   11cbe:	9b01      	ldr	r3, [sp, #4]
   11cc0:	2266      	movs	r2, #102	; 0x66
   11cc2:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   11cc4:	4b03      	ldr	r3, [pc, #12]	; (11cd4 <dmDevHciEvtVendorSpec+0x1c>)
   11cc6:	689b      	ldr	r3, [r3, #8]
   11cc8:	9801      	ldr	r0, [sp, #4]
   11cca:	4798      	blx	r3
}
   11ccc:	bf00      	nop
   11cce:	b003      	add	sp, #12
   11cd0:	f85d fb04 	ldr.w	pc, [sp], #4
   11cd4:	10008a50 	.word	0x10008a50

00011cd8 <dmDevHciEvtHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtHwError(hciEvt_t *pEvent)
{
   11cd8:	b500      	push	{lr}
   11cda:	b083      	sub	sp, #12
   11cdc:	9001      	str	r0, [sp, #4]
  pEvent->hdr.event = DM_HW_ERROR_IND;
   11cde:	9b01      	ldr	r3, [sp, #4]
   11ce0:	2265      	movs	r2, #101	; 0x65
   11ce2:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   11ce4:	4b03      	ldr	r3, [pc, #12]	; (11cf4 <dmDevHciEvtHwError+0x1c>)
   11ce6:	689b      	ldr	r3, [r3, #8]
   11ce8:	9801      	ldr	r0, [sp, #4]
   11cea:	4798      	blx	r3
}
   11cec:	bf00      	nop
   11cee:	b003      	add	sp, #12
   11cf0:	f85d fb04 	ldr.w	pc, [sp], #4
   11cf4:	10008a50 	.word	0x10008a50

00011cf8 <dmDevHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevHciHandler(hciEvt_t *pEvent)
{
   11cf8:	b500      	push	{lr}
   11cfa:	b083      	sub	sp, #12
   11cfc:	9001      	str	r0, [sp, #4]
  switch (pEvent->hdr.event)
   11cfe:	9b01      	ldr	r3, [sp, #4]
   11d00:	789b      	ldrb	r3, [r3, #2]
   11d02:	2b13      	cmp	r3, #19
   11d04:	d008      	beq.n	11d18 <dmDevHciHandler+0x20>
   11d06:	2b14      	cmp	r3, #20
   11d08:	d00a      	beq.n	11d20 <dmDevHciHandler+0x28>
   11d0a:	2b00      	cmp	r3, #0
   11d0c:	d000      	beq.n	11d10 <dmDevHciHandler+0x18>
      dmDevHciEvtHwError(pEvent);
      break;

    default:
      /* ignore event */
      break;
   11d0e:	e00b      	b.n	11d28 <dmDevHciHandler+0x30>
      dmDevHciEvtReset(pEvent);
   11d10:	9801      	ldr	r0, [sp, #4]
   11d12:	f7ff ffbd 	bl	11c90 <dmDevHciEvtReset>
      break;
   11d16:	e007      	b.n	11d28 <dmDevHciHandler+0x30>
      dmDevHciEvtVendorSpec(pEvent);
   11d18:	9801      	ldr	r0, [sp, #4]
   11d1a:	f7ff ffcd 	bl	11cb8 <dmDevHciEvtVendorSpec>
      break;
   11d1e:	e003      	b.n	11d28 <dmDevHciHandler+0x30>
      dmDevHciEvtHwError(pEvent);
   11d20:	9801      	ldr	r0, [sp, #4]
   11d22:	f7ff ffd9 	bl	11cd8 <dmDevHciEvtHwError>
      break;
   11d26:	bf00      	nop
  }
}
   11d28:	bf00      	nop
   11d2a:	b003      	add	sp, #12
   11d2c:	f85d fb04 	ldr.w	pc, [sp], #4

00011d30 <dmDevMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevMsgHandler(wsfMsgHdr_t *pMsg)
{
   11d30:	b500      	push	{lr}
   11d32:	b083      	sub	sp, #12
   11d34:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmDevAct[DM_MSG_MASK(pMsg->event)])(pMsg);
   11d36:	4b03      	ldr	r3, [pc, #12]	; (11d44 <dmDevMsgHandler+0x14>)
   11d38:	9801      	ldr	r0, [sp, #4]
   11d3a:	4798      	blx	r3
}
   11d3c:	bf00      	nop
   11d3e:	b003      	add	sp, #12
   11d40:	f85d fb04 	ldr.w	pc, [sp], #4
   11d44:	00011c41 	.word	0x00011c41

00011d48 <dmDevPassEvtToDevPriv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToDevPriv(uint8_t event, uint8_t param, uint8_t advHandle, bool_t connectable)
{
   11d48:	b510      	push	{r4, lr}
   11d4a:	b084      	sub	sp, #16
   11d4c:	4604      	mov	r4, r0
   11d4e:	4608      	mov	r0, r1
   11d50:	4611      	mov	r1, r2
   11d52:	461a      	mov	r2, r3
   11d54:	4623      	mov	r3, r4
   11d56:	f88d 3007 	strb.w	r3, [sp, #7]
   11d5a:	4603      	mov	r3, r0
   11d5c:	f88d 3006 	strb.w	r3, [sp, #6]
   11d60:	460b      	mov	r3, r1
   11d62:	f88d 3005 	strb.w	r3, [sp, #5]
   11d66:	4613      	mov	r3, r2
   11d68:	f88d 3004 	strb.w	r3, [sp, #4]
  dmDevPrivMsg_t evt;

  DM_TRACE_INFO3("dmDevPassEvtToDevPriv: event: %d, param: %d, advHandle: %d", event, param, advHandle);
   11d6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   11d70:	f89d 2006 	ldrb.w	r2, [sp, #6]
   11d74:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11d78:	480e      	ldr	r0, [pc, #56]	; (11db4 <dmDevPassEvtToDevPriv+0x6c>)
   11d7a:	f006 ffe5 	bl	18d48 <WsfTrace>

  /* build event */
  evt.hdr.event = event;
   11d7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11d82:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = param;
   11d86:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11d8a:	b29b      	uxth	r3, r3
   11d8c:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.privCtrl.advHandle = advHandle;
   11d90:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11d94:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.privCtrl.connectable = connectable;
   11d98:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11d9c:	f88d 300d 	strb.w	r3, [sp, #13]

  /* pass event to device privacy */
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   11da0:	4b05      	ldr	r3, [pc, #20]	; (11db8 <dmDevPassEvtToDevPriv+0x70>)
   11da2:	685b      	ldr	r3, [r3, #4]
   11da4:	689b      	ldr	r3, [r3, #8]
   11da6:	aa02      	add	r2, sp, #8
   11da8:	4610      	mov	r0, r2
   11daa:	4798      	blx	r3
}
   11dac:	bf00      	nop
   11dae:	b004      	add	sp, #16
   11db0:	bd10      	pop	{r4, pc}
   11db2:	bf00      	nop
   11db4:	000286f8 	.word	0x000286f8
   11db8:	10002b00 	.word	0x10002b00

00011dbc <dmDevPassEvtToConnCte>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToConnCte(uint8_t state, dmConnId_t connId)
{
   11dbc:	b500      	push	{lr}
   11dbe:	b085      	sub	sp, #20
   11dc0:	4603      	mov	r3, r0
   11dc2:	460a      	mov	r2, r1
   11dc4:	f88d 3007 	strb.w	r3, [sp, #7]
   11dc8:	4613      	mov	r3, r2
   11dca:	f88d 3006 	strb.w	r3, [sp, #6]
  wsfMsgHdr_t evt;

  /* build event */
  evt.event = DM_CONN_CTE_MSG_STATE;
   11dce:	23d7      	movs	r3, #215	; 0xd7
   11dd0:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.status = state;
   11dd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11dd8:	f88d 300f 	strb.w	r3, [sp, #15]
  evt.param = connId;
   11ddc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11de0:	b29b      	uxth	r3, r3
   11de2:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* pass event to Connection CTE */
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   11de6:	4b05      	ldr	r3, [pc, #20]	; (11dfc <dmDevPassEvtToConnCte+0x40>)
   11de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11dea:	689b      	ldr	r3, [r3, #8]
   11dec:	aa03      	add	r2, sp, #12
   11dee:	4610      	mov	r0, r2
   11df0:	4798      	blx	r3
}
   11df2:	bf00      	nop
   11df4:	b005      	add	sp, #20
   11df6:	f85d fb04 	ldr.w	pc, [sp], #4
   11dfa:	bf00      	nop
   11dfc:	10002b00 	.word	0x10002b00

00011e00 <DmDevReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevReset(void)
{
   11e00:	b500      	push	{lr}
   11e02:	b083      	sub	sp, #12
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   11e04:	2004      	movs	r0, #4
   11e06:	f006 fb34 	bl	18472 <WsfMsgAlloc>
   11e0a:	9001      	str	r0, [sp, #4]
   11e0c:	9b01      	ldr	r3, [sp, #4]
   11e0e:	2b00      	cmp	r3, #0
   11e10:	d008      	beq.n	11e24 <DmDevReset+0x24>
  {
    pMsg->event = DM_DEV_MSG_API_RESET;
   11e12:	9b01      	ldr	r3, [sp, #4]
   11e14:	2270      	movs	r2, #112	; 0x70
   11e16:	709a      	strb	r2, [r3, #2]

    WsfMsgSend(dmCb.handlerId, pMsg);
   11e18:	4b04      	ldr	r3, [pc, #16]	; (11e2c <DmDevReset+0x2c>)
   11e1a:	7b1b      	ldrb	r3, [r3, #12]
   11e1c:	9901      	ldr	r1, [sp, #4]
   11e1e:	4618      	mov	r0, r3
   11e20:	f006 fb4b 	bl	184ba <WsfMsgSend>
  }
}
   11e24:	bf00      	nop
   11e26:	b003      	add	sp, #12
   11e28:	f85d fb04 	ldr.w	pc, [sp], #4
   11e2c:	10008a50 	.word	0x10008a50

00011e30 <DmDevVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevVsInit(uint8_t param)
{
   11e30:	b500      	push	{lr}
   11e32:	b083      	sub	sp, #12
   11e34:	4603      	mov	r3, r0
   11e36:	f88d 3007 	strb.w	r3, [sp, #7]
  HciVsInit(param);
   11e3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11e3e:	4618      	mov	r0, r3
   11e40:	f00e fca0 	bl	20784 <HciVsInit>
}
   11e44:	bf00      	nop
   11e46:	b003      	add	sp, #12
   11e48:	f85d fb04 	ldr.w	pc, [sp], #4

00011e4c <dmHciEvtCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmHciEvtCback(hciEvt_t *pEvent)
{
   11e4c:	b500      	push	{lr}
   11e4e:	b083      	sub	sp, #12
   11e50:	9001      	str	r0, [sp, #4]
  WSF_ASSERT(pEvent->hdr.event <= HCI_LE_READ_ANTENNA_INFO_CMD_CMPL_CBACK_EVT);

  /* if DM not resetting or resetting but incoming event is HCI reset sequence complete event */
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   11e52:	4b0c      	ldr	r3, [pc, #48]	; (11e84 <dmHciEvtCback+0x38>)
   11e54:	7c1b      	ldrb	r3, [r3, #16]
   11e56:	2b00      	cmp	r3, #0
   11e58:	d003      	beq.n	11e62 <dmHciEvtCback+0x16>
   11e5a:	9b01      	ldr	r3, [sp, #4]
   11e5c:	789b      	ldrb	r3, [r3, #2]
   11e5e:	2b00      	cmp	r3, #0
   11e60:	d10b      	bne.n	11e7a <dmHciEvtCback+0x2e>
  {
    /* route event to DM component handling function */
    (*(dmFcnIfTbl[dmHciToIdTbl[pEvent->hdr.event]]->hciHandler))(pEvent);
   11e62:	9b01      	ldr	r3, [sp, #4]
   11e64:	789b      	ldrb	r3, [r3, #2]
   11e66:	461a      	mov	r2, r3
   11e68:	4b07      	ldr	r3, [pc, #28]	; (11e88 <dmHciEvtCback+0x3c>)
   11e6a:	5c9b      	ldrb	r3, [r3, r2]
   11e6c:	461a      	mov	r2, r3
   11e6e:	4b07      	ldr	r3, [pc, #28]	; (11e8c <dmHciEvtCback+0x40>)
   11e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11e74:	685b      	ldr	r3, [r3, #4]
   11e76:	9801      	ldr	r0, [sp, #4]
   11e78:	4798      	blx	r3
  }
}
   11e7a:	bf00      	nop
   11e7c:	b003      	add	sp, #12
   11e7e:	f85d fb04 	ldr.w	pc, [sp], #4
   11e82:	bf00      	nop
   11e84:	10008a50 	.word	0x10008a50
   11e88:	000297b0 	.word	0x000297b0
   11e8c:	10002b00 	.word	0x10002b00

00011e90 <dmEmptyReset>:
 */
/*************************************************************************************************/
void dmEmptyReset(void)
{
  /* empty */
}
   11e90:	bf00      	nop
   11e92:	4770      	bx	lr

00011e94 <dmEmptyHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmEmptyHandler(wsfMsgHdr_t *pMsg)
{
   11e94:	b082      	sub	sp, #8
   11e96:	9001      	str	r0, [sp, #4]
  return;
   11e98:	bf00      	nop
}
   11e9a:	b002      	add	sp, #8
   11e9c:	4770      	bx	lr
	...

00011ea0 <dmDevPassHciEvtToConn>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassHciEvtToConn(hciEvt_t *pEvent)
{
   11ea0:	b500      	push	{lr}
   11ea2:	b083      	sub	sp, #12
   11ea4:	9001      	str	r0, [sp, #4]
  /* pass event to DM connection management module */
  (*(dmFcnIfTbl[DM_ID_CONN]->hciHandler))(pEvent);
   11ea6:	4b04      	ldr	r3, [pc, #16]	; (11eb8 <dmDevPassHciEvtToConn+0x18>)
   11ea8:	68db      	ldr	r3, [r3, #12]
   11eaa:	685b      	ldr	r3, [r3, #4]
   11eac:	9801      	ldr	r0, [sp, #4]
   11eae:	4798      	blx	r3
}
   11eb0:	bf00      	nop
   11eb2:	b003      	add	sp, #12
   11eb4:	f85d fb04 	ldr.w	pc, [sp], #4
   11eb8:	10002b00 	.word	0x10002b00

00011ebc <DmRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmRegister(dmCback_t cback)
{
   11ebc:	b500      	push	{lr}
   11ebe:	b09d      	sub	sp, #116	; 0x74
   11ec0:	9001      	str	r0, [sp, #4]
  dmCb.cback = cback;
   11ec2:	4a10      	ldr	r2, [pc, #64]	; (11f04 <DmRegister+0x48>)
   11ec4:	9b01      	ldr	r3, [sp, #4]
   11ec6:	6093      	str	r3, [r2, #8]

  /* if LESC is enabled */
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   11ec8:	4b0f      	ldr	r3, [pc, #60]	; (11f08 <DmRegister+0x4c>)
   11eca:	6a1b      	ldr	r3, [r3, #32]
   11ecc:	4a0f      	ldr	r2, [pc, #60]	; (11f0c <DmRegister+0x50>)
   11ece:	4293      	cmp	r3, r2
   11ed0:	d013      	beq.n	11efa <DmRegister+0x3e>
  {
    /* if largest LESC key length is larger than maximum RX PDU length */
    if (SMP_PUB_KEY_MSG_LEN > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   11ed2:	f00c fb11 	bl	1e4f8 <HciGetMaxRxAclLen>
   11ed6:	4603      	mov	r3, r0
   11ed8:	3b04      	subs	r3, #4
   11eda:	2b40      	cmp	r3, #64	; 0x40
   11edc:	dc0d      	bgt.n	11efa <DmRegister+0x3e>
    {
      dmEvt_t evt;

      evt.hdr.param = 0;
   11ede:	2300      	movs	r3, #0
   11ee0:	f8ad 300c 	strh.w	r3, [sp, #12]
      evt.hdr.event = DM_ERROR_IND;
   11ee4:	2364      	movs	r3, #100	; 0x64
   11ee6:	f88d 300e 	strb.w	r3, [sp, #14]
      evt.hdr.status = DM_ERR_SMP_RX_PDU_LEN_EXCEEDED;
   11eea:	2301      	movs	r3, #1
   11eec:	f88d 300f 	strb.w	r3, [sp, #15]

      (*dmCb.cback)(&evt);
   11ef0:	4b04      	ldr	r3, [pc, #16]	; (11f04 <DmRegister+0x48>)
   11ef2:	689b      	ldr	r3, [r3, #8]
   11ef4:	aa03      	add	r2, sp, #12
   11ef6:	4610      	mov	r0, r2
   11ef8:	4798      	blx	r3
    }
  }
}
   11efa:	bf00      	nop
   11efc:	b01d      	add	sp, #116	; 0x74
   11efe:	f85d fb04 	ldr.w	pc, [sp], #4
   11f02:	bf00      	nop
   11f04:	10008a50 	.word	0x10008a50
   11f08:	10002b00 	.word	0x10002b00
   11f0c:	00029884 	.word	0x00029884

00011f10 <DmHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmHandlerInit(wsfHandlerId_t handlerId)
{
   11f10:	b500      	push	{lr}
   11f12:	b083      	sub	sp, #12
   11f14:	4603      	mov	r3, r0
   11f16:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  dmCb.handlerId = handlerId;
   11f1a:	4a08      	ldr	r2, [pc, #32]	; (11f3c <DmHandlerInit+0x2c>)
   11f1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11f20:	7313      	strb	r3, [r2, #12]

  dmCb.llPrivEnabled = FALSE;
   11f22:	4b06      	ldr	r3, [pc, #24]	; (11f3c <DmHandlerInit+0x2c>)
   11f24:	2200      	movs	r2, #0
   11f26:	755a      	strb	r2, [r3, #21]
  dmCb.resetting = FALSE;
   11f28:	4b04      	ldr	r3, [pc, #16]	; (11f3c <DmHandlerInit+0x2c>)
   11f2a:	2200      	movs	r2, #0
   11f2c:	741a      	strb	r2, [r3, #16]

  /* register with the HCI event interface */
  HciEvtRegister(dmHciEvtCback);
   11f2e:	4804      	ldr	r0, [pc, #16]	; (11f40 <DmHandlerInit+0x30>)
   11f30:	f00a fdc8 	bl	1cac4 <HciEvtRegister>
}
   11f34:	bf00      	nop
   11f36:	b003      	add	sp, #12
   11f38:	f85d fb04 	ldr.w	pc, [sp], #4
   11f3c:	10008a50 	.word	0x10008a50
   11f40:	00011e4d 	.word	0x00011e4d

00011f44 <DmHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   11f44:	b500      	push	{lr}
   11f46:	b083      	sub	sp, #12
   11f48:	4603      	mov	r3, r0
   11f4a:	9100      	str	r1, [sp, #0]
   11f4c:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
   11f50:	9b00      	ldr	r3, [sp, #0]
   11f52:	2b00      	cmp	r3, #0
   11f54:	d00e      	beq.n	11f74 <DmHandler+0x30>
  {
    WSF_ASSERT(DM_ID_FROM_MSG(pMsg->event) < DM_NUM_IDS);

    /* if DM not resetting */
    if (!dmCb.resetting)
   11f56:	4b09      	ldr	r3, [pc, #36]	; (11f7c <DmHandler+0x38>)
   11f58:	7c1b      	ldrb	r3, [r3, #16]
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	d10a      	bne.n	11f74 <DmHandler+0x30>
    {
      /* route message to DM component handling function */
      (*(dmFcnIfTbl[DM_ID_FROM_MSG(pMsg->event)]->msgHandler))(pMsg);
   11f5e:	9b00      	ldr	r3, [sp, #0]
   11f60:	789b      	ldrb	r3, [r3, #2]
   11f62:	091b      	lsrs	r3, r3, #4
   11f64:	b2db      	uxtb	r3, r3
   11f66:	461a      	mov	r2, r3
   11f68:	4b05      	ldr	r3, [pc, #20]	; (11f80 <DmHandler+0x3c>)
   11f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11f6e:	689b      	ldr	r3, [r3, #8]
   11f70:	9800      	ldr	r0, [sp, #0]
   11f72:	4798      	blx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   11f74:	bf00      	nop
   11f76:	b003      	add	sp, #12
   11f78:	f85d fb04 	ldr.w	pc, [sp], #4
   11f7c:	10008a50 	.word	0x10008a50
   11f80:	10002b00 	.word	0x10002b00

00011f84 <DmLlPrivEnabled>:
 *  \return TRUE if LL Privacy is enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmLlPrivEnabled(void)
{
  return dmCb.llPrivEnabled;
   11f84:	4b01      	ldr	r3, [pc, #4]	; (11f8c <DmLlPrivEnabled+0x8>)
   11f86:	7d5b      	ldrb	r3, [r3, #21]
}
   11f88:	4618      	mov	r0, r3
   11f8a:	4770      	bx	lr
   11f8c:	10008a50 	.word	0x10008a50

00011f90 <DmLlAddrType>:
 *
 *  \return Address type used by LL.
 */
/*************************************************************************************************/
uint8_t DmLlAddrType(uint8_t addrType)
{
   11f90:	b084      	sub	sp, #16
   11f92:	4603      	mov	r3, r0
   11f94:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t llAddrType = addrType;
   11f98:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11f9c:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   11fa0:	4b0b      	ldr	r3, [pc, #44]	; (11fd0 <DmLlAddrType+0x40>)
   11fa2:	7d5b      	ldrb	r3, [r3, #21]
   11fa4:	2b00      	cmp	r3, #0
   11fa6:	d00e      	beq.n	11fc6 <DmLlAddrType+0x36>
  {
    if (addrType == DM_ADDR_PUBLIC)
   11fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11fac:	2b00      	cmp	r3, #0
   11fae:	d103      	bne.n	11fb8 <DmLlAddrType+0x28>
    {
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
   11fb0:	2302      	movs	r3, #2
   11fb2:	f88d 300f 	strb.w	r3, [sp, #15]
   11fb6:	e006      	b.n	11fc6 <DmLlAddrType+0x36>
    }
    else if (addrType == DM_ADDR_RANDOM)
   11fb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11fbc:	2b01      	cmp	r3, #1
   11fbe:	d102      	bne.n	11fc6 <DmLlAddrType+0x36>
    {
      llAddrType = DM_ADDR_RANDOM_IDENTITY;
   11fc0:	2303      	movs	r3, #3
   11fc2:	f88d 300f 	strb.w	r3, [sp, #15]
    }
  }

  return llAddrType;
   11fc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   11fca:	4618      	mov	r0, r3
   11fcc:	b004      	add	sp, #16
   11fce:	4770      	bx	lr
   11fd0:	10008a50 	.word	0x10008a50

00011fd4 <DmHostAddrType>:
 *
 *  \return Address type used by Host.
 */
/*************************************************************************************************/
uint8_t DmHostAddrType(uint8_t addrType)
{
   11fd4:	b084      	sub	sp, #16
   11fd6:	4603      	mov	r3, r0
   11fd8:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t hostAddrType = addrType;
   11fdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11fe0:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   11fe4:	4b0b      	ldr	r3, [pc, #44]	; (12014 <DmHostAddrType+0x40>)
   11fe6:	7d5b      	ldrb	r3, [r3, #21]
   11fe8:	2b00      	cmp	r3, #0
   11fea:	d00e      	beq.n	1200a <DmHostAddrType+0x36>
  {
    if (addrType == DM_ADDR_PUBLIC_IDENTITY)
   11fec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11ff0:	2b02      	cmp	r3, #2
   11ff2:	d103      	bne.n	11ffc <DmHostAddrType+0x28>
    {
      hostAddrType = DM_ADDR_PUBLIC;
   11ff4:	2300      	movs	r3, #0
   11ff6:	f88d 300f 	strb.w	r3, [sp, #15]
   11ffa:	e006      	b.n	1200a <DmHostAddrType+0x36>
    }
    else if (addrType == DM_ADDR_RANDOM_IDENTITY)
   11ffc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12000:	2b03      	cmp	r3, #3
   12002:	d102      	bne.n	1200a <DmHostAddrType+0x36>
    {
      hostAddrType = DM_ADDR_RANDOM;
   12004:	2301      	movs	r3, #1
   12006:	f88d 300f 	strb.w	r3, [sp, #15]
    }
  }

  return hostAddrType;
   1200a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1200e:	4618      	mov	r0, r3
   12010:	b004      	add	sp, #16
   12012:	4770      	bx	lr
   12014:	10008a50 	.word	0x10008a50

00012018 <DmSizeOfEvt>:
 *
 *  \return Size of DM callback event.
 */
/*************************************************************************************************/
uint16_t DmSizeOfEvt(dmEvt_t *pDmEvt)
{
   12018:	b084      	sub	sp, #16
   1201a:	9001      	str	r0, [sp, #4]
  uint16_t len;

  /* if a valid DM event ID */
  if ((pDmEvt->hdr.event >= DM_CBACK_START) && (pDmEvt->hdr.event <= DM_CBACK_END))
   1201c:	9b01      	ldr	r3, [sp, #4]
   1201e:	789b      	ldrb	r3, [r3, #2]
   12020:	2b1f      	cmp	r3, #31
   12022:	d90c      	bls.n	1203e <DmSizeOfEvt+0x26>
   12024:	9b01      	ldr	r3, [sp, #4]
   12026:	789b      	ldrb	r3, [r3, #2]
   12028:	2b67      	cmp	r3, #103	; 0x67
   1202a:	d808      	bhi.n	1203e <DmSizeOfEvt+0x26>
  {
    len = dmEvtCbackLen[pDmEvt->hdr.event - DM_CBACK_START];
   1202c:	9b01      	ldr	r3, [sp, #4]
   1202e:	789b      	ldrb	r3, [r3, #2]
   12030:	3b20      	subs	r3, #32
   12032:	4a07      	ldr	r2, [pc, #28]	; (12050 <DmSizeOfEvt+0x38>)
   12034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   12038:	f8ad 300e 	strh.w	r3, [sp, #14]
   1203c:	e002      	b.n	12044 <DmSizeOfEvt+0x2c>
  }
  else
  {
    len = sizeof(wsfMsgHdr_t);
   1203e:	2304      	movs	r3, #4
   12040:	f8ad 300e 	strh.w	r3, [sp, #14]
  }

  return len;
   12044:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   12048:	4618      	mov	r0, r3
   1204a:	b004      	add	sp, #16
   1204c:	4770      	bx	lr
   1204e:	bf00      	nop
   12050:	000297f4 	.word	0x000297f4

00012054 <dmPrivActResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActResolveAddr(dmPrivMsg_t *pMsg)
{
   12054:	b510      	push	{r4, lr}
   12056:	b088      	sub	sp, #32
   12058:	9003      	str	r0, [sp, #12]
  uint8_t buf[DM_PRIV_PLAINTEXT_LEN];

  /* verify no resolution procedure currently in progress */
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   1205a:	4b1f      	ldr	r3, [pc, #124]	; (120d8 <dmPrivActResolveAddr+0x84>)
   1205c:	78db      	ldrb	r3, [r3, #3]
   1205e:	f003 0301 	and.w	r3, r3, #1
   12062:	2b00      	cmp	r3, #0
   12064:	d12a      	bne.n	120bc <dmPrivActResolveAddr+0x68>
  {
    /* store hash */
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   12066:	9b03      	ldr	r3, [sp, #12]
   12068:	f103 0214 	add.w	r2, r3, #20
   1206c:	4b1a      	ldr	r3, [pc, #104]	; (120d8 <dmPrivActResolveAddr+0x84>)
   1206e:	8811      	ldrh	r1, [r2, #0]
   12070:	7892      	ldrb	r2, [r2, #2]
   12072:	8019      	strh	r1, [r3, #0]
   12074:	709a      	strb	r2, [r3, #2]

    /* copy random part of address with padding for address resolution calculation */
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   12076:	9b03      	ldr	r3, [sp, #12]
   12078:	f103 0117 	add.w	r1, r3, #23
   1207c:	ab04      	add	r3, sp, #16
   1207e:	2203      	movs	r2, #3
   12080:	4618      	mov	r0, r3
   12082:	f7fa f86d 	bl	c160 <memcpy>
    memset(buf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   12086:	ab04      	add	r3, sp, #16
   12088:	3303      	adds	r3, #3
   1208a:	220d      	movs	r2, #13
   1208c:	2100      	movs	r1, #0
   1208e:	4618      	mov	r0, r3
   12090:	f7fa f900 	bl	c294 <memset>

    /* set in progress */
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_RES_ADDR;
   12094:	4b10      	ldr	r3, [pc, #64]	; (120d8 <dmPrivActResolveAddr+0x84>)
   12096:	78db      	ldrb	r3, [r3, #3]
   12098:	f043 0301 	orr.w	r3, r3, #1
   1209c:	b2da      	uxtb	r2, r3
   1209e:	4b0e      	ldr	r3, [pc, #56]	; (120d8 <dmPrivActResolveAddr+0x84>)
   120a0:	70da      	strb	r2, [r3, #3]

    /* run calculation */
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   120a2:	9b03      	ldr	r3, [sp, #12]
   120a4:	1d18      	adds	r0, r3, #4
   120a6:	4b0d      	ldr	r3, [pc, #52]	; (120dc <dmPrivActResolveAddr+0x88>)
   120a8:	7b1a      	ldrb	r2, [r3, #12]
   120aa:	9b03      	ldr	r3, [sp, #12]
   120ac:	881c      	ldrh	r4, [r3, #0]
   120ae:	a904      	add	r1, sp, #16
   120b0:	2361      	movs	r3, #97	; 0x61
   120b2:	9300      	str	r3, [sp, #0]
   120b4:	4623      	mov	r3, r4
   120b6:	f000 fdf3 	bl	12ca0 <SecAes>
    /* call callback with error (note hdr.param is already set) */
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
}
   120ba:	e009      	b.n	120d0 <dmPrivActResolveAddr+0x7c>
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
   120bc:	9b03      	ldr	r3, [sp, #12]
   120be:	2207      	movs	r2, #7
   120c0:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   120c2:	9b03      	ldr	r3, [sp, #12]
   120c4:	2237      	movs	r2, #55	; 0x37
   120c6:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   120c8:	4b04      	ldr	r3, [pc, #16]	; (120dc <dmPrivActResolveAddr+0x88>)
   120ca:	689b      	ldr	r3, [r3, #8]
   120cc:	9803      	ldr	r0, [sp, #12]
   120ce:	4798      	blx	r3
}
   120d0:	bf00      	nop
   120d2:	b008      	add	sp, #32
   120d4:	bd10      	pop	{r4, pc}
   120d6:	bf00      	nop
   120d8:	10008a68 	.word	0x10008a68
   120dc:	10008a50 	.word	0x10008a50

000120e0 <dmPrivActResAddrAesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActResAddrAesCmpl(dmPrivMsg_t *pMsg)
{
   120e0:	b500      	push	{lr}
   120e2:	b083      	sub	sp, #12
   120e4:	9001      	str	r0, [sp, #4]
  /* compare calculated value with hash */
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   120e6:	9b01      	ldr	r3, [sp, #4]
   120e8:	685b      	ldr	r3, [r3, #4]
   120ea:	2203      	movs	r2, #3
   120ec:	4619      	mov	r1, r3
   120ee:	480f      	ldr	r0, [pc, #60]	; (1212c <dmPrivActResAddrAesCmpl+0x4c>)
   120f0:	f7fa f806 	bl	c100 <memcmp>
   120f4:	4603      	mov	r3, r0
   120f6:	2b00      	cmp	r3, #0
   120f8:	d103      	bne.n	12102 <dmPrivActResAddrAesCmpl+0x22>
  {
    pMsg->hdr.status = HCI_SUCCESS;
   120fa:	9b01      	ldr	r3, [sp, #4]
   120fc:	2200      	movs	r2, #0
   120fe:	70da      	strb	r2, [r3, #3]
   12100:	e002      	b.n	12108 <dmPrivActResAddrAesCmpl+0x28>
  }
  else
  {
    pMsg->hdr.status = HCI_ERR_AUTH_FAILURE;
   12102:	9b01      	ldr	r3, [sp, #4]
   12104:	2205      	movs	r2, #5
   12106:	70da      	strb	r2, [r3, #3]
  }

  /* clear in progress */
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   12108:	4b08      	ldr	r3, [pc, #32]	; (1212c <dmPrivActResAddrAesCmpl+0x4c>)
   1210a:	78db      	ldrb	r3, [r3, #3]
   1210c:	f023 0301 	bic.w	r3, r3, #1
   12110:	b2da      	uxtb	r2, r3
   12112:	4b06      	ldr	r3, [pc, #24]	; (1212c <dmPrivActResAddrAesCmpl+0x4c>)
   12114:	70da      	strb	r2, [r3, #3]

  /* call client callback (note hdr.param is already set) */
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   12116:	9b01      	ldr	r3, [sp, #4]
   12118:	2237      	movs	r2, #55	; 0x37
   1211a:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   1211c:	4b04      	ldr	r3, [pc, #16]	; (12130 <dmPrivActResAddrAesCmpl+0x50>)
   1211e:	689b      	ldr	r3, [r3, #8]
   12120:	9801      	ldr	r0, [sp, #4]
   12122:	4798      	blx	r3
}
   12124:	bf00      	nop
   12126:	b003      	add	sp, #12
   12128:	f85d fb04 	ldr.w	pc, [sp], #4
   1212c:	10008a68 	.word	0x10008a68
   12130:	10008a50 	.word	0x10008a50

00012134 <dmPrivActAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActAddDevToResList(dmPrivMsg_t *pMsg)
{
   12134:	b500      	push	{lr}
   12136:	b085      	sub	sp, #20
   12138:	9001      	str	r0, [sp, #4]
  dmPrivApiAddDevToResList_t *pDev = &pMsg->apiAddDevToResList;
   1213a:	9b01      	ldr	r3, [sp, #4]
   1213c:	9303      	str	r3, [sp, #12]

  /* save whether asked to enable address resolution */
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   1213e:	9b03      	ldr	r3, [sp, #12]
   12140:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   12144:	4b0a      	ldr	r3, [pc, #40]	; (12170 <dmPrivActAddDevToResList+0x3c>)
   12146:	721a      	strb	r2, [r3, #8]

  /* save client-defined parameter for callback event */
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   12148:	9b01      	ldr	r3, [sp, #4]
   1214a:	881a      	ldrh	r2, [r3, #0]
   1214c:	4b08      	ldr	r3, [pc, #32]	; (12170 <dmPrivActAddDevToResList+0x3c>)
   1214e:	809a      	strh	r2, [r3, #4]

  /* add device to resolving list */
  HciLeAddDeviceToResolvingListCmd(pDev->addrType, pDev->peerAddr, pDev->peerIrk, pDev->localIrk);
   12150:	9b03      	ldr	r3, [sp, #12]
   12152:	7918      	ldrb	r0, [r3, #4]
   12154:	9b03      	ldr	r3, [sp, #12]
   12156:	1d59      	adds	r1, r3, #5
   12158:	9b03      	ldr	r3, [sp, #12]
   1215a:	f103 020b 	add.w	r2, r3, #11
   1215e:	9b03      	ldr	r3, [sp, #12]
   12160:	331b      	adds	r3, #27
   12162:	f00b fba1 	bl	1d8a8 <HciLeAddDeviceToResolvingListCmd>
}
   12166:	bf00      	nop
   12168:	b005      	add	sp, #20
   1216a:	f85d fb04 	ldr.w	pc, [sp], #4
   1216e:	bf00      	nop
   12170:	10008a68 	.word	0x10008a68

00012174 <dmPrivActRemDevFromResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActRemDevFromResList(dmPrivMsg_t *pMsg)
{
   12174:	b500      	push	{lr}
   12176:	b085      	sub	sp, #20
   12178:	9001      	str	r0, [sp, #4]
  dmPrivApiRemDevFromResList_t *pDev = &pMsg->apiRemDevFromResList;
   1217a:	9b01      	ldr	r3, [sp, #4]
   1217c:	9303      	str	r3, [sp, #12]

  /* save client-defined parameter for callback event */
  dmPrivCb.remDevFromResListParam = pMsg->hdr.param;
   1217e:	9b01      	ldr	r3, [sp, #4]
   12180:	881a      	ldrh	r2, [r3, #0]
   12182:	4b07      	ldr	r3, [pc, #28]	; (121a0 <dmPrivActRemDevFromResList+0x2c>)
   12184:	80da      	strh	r2, [r3, #6]

  /* remove device from resolving list */
  HciLeRemoveDeviceFromResolvingList(pDev->addrType, pDev->peerAddr);
   12186:	9b03      	ldr	r3, [sp, #12]
   12188:	791a      	ldrb	r2, [r3, #4]
   1218a:	9b03      	ldr	r3, [sp, #12]
   1218c:	3305      	adds	r3, #5
   1218e:	4619      	mov	r1, r3
   12190:	4610      	mov	r0, r2
   12192:	f00b fbbe 	bl	1d912 <HciLeRemoveDeviceFromResolvingList>
}
   12196:	bf00      	nop
   12198:	b005      	add	sp, #20
   1219a:	f85d fb04 	ldr.w	pc, [sp], #4
   1219e:	bf00      	nop
   121a0:	10008a68 	.word	0x10008a68

000121a4 <dmPrivActClearResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActClearResList(dmPrivMsg_t *pMsg)
{
   121a4:	b500      	push	{lr}
   121a6:	b083      	sub	sp, #12
   121a8:	9001      	str	r0, [sp, #4]
  /* clear resolving list */
  HciLeClearResolvingList();
   121aa:	f00b fbd8 	bl	1d95e <HciLeClearResolvingList>
}
   121ae:	bf00      	nop
   121b0:	b003      	add	sp, #12
   121b2:	f85d fb04 	ldr.w	pc, [sp], #4

000121b6 <dmPrivActSetAddrResEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActSetAddrResEnable(dmPrivMsg_t *pMsg)
{
   121b6:	b500      	push	{lr}
   121b8:	b085      	sub	sp, #20
   121ba:	9001      	str	r0, [sp, #4]
  dmPrivApiSetAddrResEnable_t *pAddrRes = &pMsg->apiSetAddrResEnable;
   121bc:	9b01      	ldr	r3, [sp, #4]
   121be:	9303      	str	r3, [sp, #12]

  /* enable or disable address resolution in LL */
  dmPrivSetAddrResEnable(pAddrRes->enable);
   121c0:	9b03      	ldr	r3, [sp, #12]
   121c2:	791b      	ldrb	r3, [r3, #4]
   121c4:	4618      	mov	r0, r3
   121c6:	f000 f911 	bl	123ec <dmPrivSetAddrResEnable>
}
   121ca:	bf00      	nop
   121cc:	b005      	add	sp, #20
   121ce:	f85d fb04 	ldr.w	pc, [sp], #4

000121d2 <dmPrivActSetPrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActSetPrivacyMode(dmPrivMsg_t *pMsg)
{
   121d2:	b500      	push	{lr}
   121d4:	b085      	sub	sp, #20
   121d6:	9001      	str	r0, [sp, #4]
  dmPrivApiSetPrivacyMode_t *pPrivacyMode = &pMsg->apiSetPrivacyMode;
   121d8:	9b01      	ldr	r3, [sp, #4]
   121da:	9303      	str	r3, [sp, #12]

  /* set privacy mode */
  HciLeSetPrivacyModeCmd(pPrivacyMode->addrType, pPrivacyMode->peerAddr, pPrivacyMode->mode);
   121dc:	9b03      	ldr	r3, [sp, #12]
   121de:	7918      	ldrb	r0, [r3, #4]
   121e0:	9b03      	ldr	r3, [sp, #12]
   121e2:	1d59      	adds	r1, r3, #5
   121e4:	9b03      	ldr	r3, [sp, #12]
   121e6:	7adb      	ldrb	r3, [r3, #11]
   121e8:	461a      	mov	r2, r3
   121ea:	f00b fbfa 	bl	1d9e2 <HciLeSetPrivacyModeCmd>
}
   121ee:	bf00      	nop
   121f0:	b005      	add	sp, #20
   121f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000121f8 <dmPrivActGenAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActGenAddr(dmPrivMsg_t *pMsg)
{
   121f8:	b500      	push	{lr}
   121fa:	b085      	sub	sp, #20
   121fc:	9003      	str	r0, [sp, #12]
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   121fe:	4b1f      	ldr	r3, [pc, #124]	; (1227c <dmPrivActGenAddr+0x84>)
   12200:	78db      	ldrb	r3, [r3, #3]
   12202:	f003 0302 	and.w	r3, r3, #2
   12206:	2b00      	cmp	r3, #0
   12208:	d129      	bne.n	1225e <dmPrivActGenAddr+0x66>
  {
    /* get random number */
    SecRand(dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   1220a:	2103      	movs	r1, #3
   1220c:	481c      	ldr	r0, [pc, #112]	; (12280 <dmPrivActGenAddr+0x88>)
   1220e:	f001 f829 	bl	13264 <SecRand>

    /* set address type in random number */
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   12212:	4b1a      	ldr	r3, [pc, #104]	; (1227c <dmPrivActGenAddr+0x84>)
   12214:	7b1b      	ldrb	r3, [r3, #12]
   12216:	b25b      	sxtb	r3, r3
   12218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1221c:	b25b      	sxtb	r3, r3
   1221e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12222:	b25b      	sxtb	r3, r3
   12224:	b2da      	uxtb	r2, r3
   12226:	4b15      	ldr	r3, [pc, #84]	; (1227c <dmPrivActGenAddr+0x84>)
   12228:	731a      	strb	r2, [r3, #12]

    /* pad buffer */
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   1222a:	4b16      	ldr	r3, [pc, #88]	; (12284 <dmPrivActGenAddr+0x8c>)
   1222c:	220d      	movs	r2, #13
   1222e:	2100      	movs	r1, #0
   12230:	4618      	mov	r0, r3
   12232:	f7fa f82f 	bl	c294 <memset>

    /* set in progress */
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   12236:	4b11      	ldr	r3, [pc, #68]	; (1227c <dmPrivActGenAddr+0x84>)
   12238:	78db      	ldrb	r3, [r3, #3]
   1223a:	f043 0302 	orr.w	r3, r3, #2
   1223e:	b2da      	uxtb	r2, r3
   12240:	4b0e      	ldr	r3, [pc, #56]	; (1227c <dmPrivActGenAddr+0x84>)
   12242:	70da      	strb	r2, [r3, #3]

    /* run calculation */
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   12244:	9b03      	ldr	r3, [sp, #12]
   12246:	1d18      	adds	r0, r3, #4
   12248:	4b0f      	ldr	r3, [pc, #60]	; (12288 <dmPrivActGenAddr+0x90>)
   1224a:	7b1a      	ldrb	r2, [r3, #12]
   1224c:	9b03      	ldr	r3, [sp, #12]
   1224e:	8819      	ldrh	r1, [r3, #0]
   12250:	2368      	movs	r3, #104	; 0x68
   12252:	9300      	str	r3, [sp, #0]
   12254:	460b      	mov	r3, r1
   12256:	490a      	ldr	r1, [pc, #40]	; (12280 <dmPrivActGenAddr+0x88>)
   12258:	f000 fd22 	bl	12ca0 <SecAes>
    /* call callback with error (note hdr.param is already set) */
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
}
   1225c:	e009      	b.n	12272 <dmPrivActGenAddr+0x7a>
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
   1225e:	9b03      	ldr	r3, [sp, #12]
   12260:	2207      	movs	r2, #7
   12262:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   12264:	9b03      	ldr	r3, [sp, #12]
   12266:	2238      	movs	r2, #56	; 0x38
   12268:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   1226a:	4b07      	ldr	r3, [pc, #28]	; (12288 <dmPrivActGenAddr+0x90>)
   1226c:	689b      	ldr	r3, [r3, #8]
   1226e:	9803      	ldr	r0, [sp, #12]
   12270:	4798      	blx	r3
}
   12272:	bf00      	nop
   12274:	b005      	add	sp, #20
   12276:	f85d fb04 	ldr.w	pc, [sp], #4
   1227a:	bf00      	nop
   1227c:	10008a68 	.word	0x10008a68
   12280:	10008a72 	.word	0x10008a72
   12284:	10008a75 	.word	0x10008a75
   12288:	10008a50 	.word	0x10008a50

0001228c <dmPrivActGenAddrAesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActGenAddrAesCmpl(dmPrivMsg_t *pMsg)
{
   1228c:	b500      	push	{lr}
   1228e:	b085      	sub	sp, #20
   12290:	9001      	str	r0, [sp, #4]
  dmPrivGenAddrIndEvt_t *pAddrEvt = (dmPrivGenAddrIndEvt_t*) pMsg;
   12292:	9b01      	ldr	r3, [sp, #4]
   12294:	9303      	str	r3, [sp, #12]

  /* copy the hash and address to buffer */
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   12296:	9b03      	ldr	r3, [sp, #12]
   12298:	1d18      	adds	r0, r3, #4
   1229a:	9b01      	ldr	r3, [sp, #4]
   1229c:	685b      	ldr	r3, [r3, #4]
   1229e:	2203      	movs	r2, #3
   122a0:	4619      	mov	r1, r3
   122a2:	f7f9 ff5d 	bl	c160 <memcpy>
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   122a6:	9b03      	ldr	r3, [sp, #12]
   122a8:	3304      	adds	r3, #4
   122aa:	3303      	adds	r3, #3
   122ac:	2203      	movs	r2, #3
   122ae:	490c      	ldr	r1, [pc, #48]	; (122e0 <dmPrivActGenAddrAesCmpl+0x54>)
   122b0:	4618      	mov	r0, r3
   122b2:	f7f9 ff55 	bl	c160 <memcpy>

  /* clear in progress */
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   122b6:	4b0b      	ldr	r3, [pc, #44]	; (122e4 <dmPrivActGenAddrAesCmpl+0x58>)
   122b8:	78db      	ldrb	r3, [r3, #3]
   122ba:	f023 0302 	bic.w	r3, r3, #2
   122be:	b2da      	uxtb	r2, r3
   122c0:	4b08      	ldr	r3, [pc, #32]	; (122e4 <dmPrivActGenAddrAesCmpl+0x58>)
   122c2:	70da      	strb	r2, [r3, #3]

  /* call client callback */
  pAddrEvt->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   122c4:	9b03      	ldr	r3, [sp, #12]
   122c6:	2238      	movs	r2, #56	; 0x38
   122c8:	709a      	strb	r2, [r3, #2]
  pMsg->hdr.status = HCI_SUCCESS;
   122ca:	9b01      	ldr	r3, [sp, #4]
   122cc:	2200      	movs	r2, #0
   122ce:	70da      	strb	r2, [r3, #3]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   122d0:	4b05      	ldr	r3, [pc, #20]	; (122e8 <dmPrivActGenAddrAesCmpl+0x5c>)
   122d2:	689b      	ldr	r3, [r3, #8]
   122d4:	9803      	ldr	r0, [sp, #12]
   122d6:	4798      	blx	r3
}
   122d8:	bf00      	nop
   122da:	b005      	add	sp, #20
   122dc:	f85d fb04 	ldr.w	pc, [sp], #4
   122e0:	10008a72 	.word	0x10008a72
   122e4:	10008a68 	.word	0x10008a68
   122e8:	10008a50 	.word	0x10008a50

000122ec <dmPrivHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivHciHandler(hciEvt_t *pEvent)
{
   122ec:	b500      	push	{lr}
   122ee:	b083      	sub	sp, #12
   122f0:	9001      	str	r0, [sp, #4]
  /* handle incoming event */
  switch (pEvent->hdr.event)
   122f2:	9b01      	ldr	r3, [sp, #4]
   122f4:	789b      	ldrb	r3, [r3, #2]
   122f6:	3b15      	subs	r3, #21
   122f8:	2b05      	cmp	r3, #5
   122fa:	d86e      	bhi.n	123da <dmPrivHciHandler+0xee>
   122fc:	a201      	add	r2, pc, #4	; (adr r2, 12304 <dmPrivHciHandler+0x18>)
   122fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12302:	bf00      	nop
   12304:	0001231d 	.word	0x0001231d
   12308:	0001234b 	.word	0x0001234b
   1230c:	0001235b 	.word	0x0001235b
   12310:	00012379 	.word	0x00012379
   12314:	00012381 	.word	0x00012381
   12318:	00012389 	.word	0x00012389
  {
    case HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_ADD_DEV_TO_RES_LIST_IND;
   1231c:	9b01      	ldr	r3, [sp, #4]
   1231e:	223a      	movs	r2, #58	; 0x3a
   12320:	709a      	strb	r2, [r3, #2]
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   12322:	4b30      	ldr	r3, [pc, #192]	; (123e4 <dmPrivHciHandler+0xf8>)
   12324:	889a      	ldrh	r2, [r3, #4]
   12326:	9b01      	ldr	r3, [sp, #4]
   12328:	801a      	strh	r2, [r3, #0]

      /* if LE add device to resolving list command succeeded and been asked to enable address
       * resolution in LL and it's not enabled yet
       */
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   1232a:	9b01      	ldr	r3, [sp, #4]
   1232c:	78db      	ldrb	r3, [r3, #3]
   1232e:	2b00      	cmp	r3, #0
   12330:	d149      	bne.n	123c6 <dmPrivHciHandler+0xda>
   12332:	4b2c      	ldr	r3, [pc, #176]	; (123e4 <dmPrivHciHandler+0xf8>)
   12334:	7a1b      	ldrb	r3, [r3, #8]
   12336:	2b00      	cmp	r3, #0
   12338:	d045      	beq.n	123c6 <dmPrivHciHandler+0xda>
   1233a:	4b2b      	ldr	r3, [pc, #172]	; (123e8 <dmPrivHciHandler+0xfc>)
   1233c:	7d5b      	ldrb	r3, [r3, #21]
   1233e:	2b00      	cmp	r3, #0
   12340:	d141      	bne.n	123c6 <dmPrivHciHandler+0xda>
      {
        /* enable address resolution in LL */
        dmPrivSetAddrResEnable(TRUE);
   12342:	2001      	movs	r0, #1
   12344:	f000 f852 	bl	123ec <dmPrivSetAddrResEnable>
      }
      break;
   12348:	e03d      	b.n	123c6 <dmPrivHciHandler+0xda>

    case HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   1234a:	9b01      	ldr	r3, [sp, #4]
   1234c:	223b      	movs	r2, #59	; 0x3b
   1234e:	709a      	strb	r2, [r3, #2]
      pEvent->hdr.param = dmPrivCb.remDevFromResListParam;
   12350:	4b24      	ldr	r3, [pc, #144]	; (123e4 <dmPrivHciHandler+0xf8>)
   12352:	88da      	ldrh	r2, [r3, #6]
   12354:	9b01      	ldr	r3, [sp, #4]
   12356:	801a      	strh	r2, [r3, #0]
      break;
   12358:	e03a      	b.n	123d0 <dmPrivHciHandler+0xe4>

    case HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_CLEAR_RES_LIST_IND;
   1235a:	9b01      	ldr	r3, [sp, #4]
   1235c:	223c      	movs	r2, #60	; 0x3c
   1235e:	709a      	strb	r2, [r3, #2]

      /* if LE clear resolving list command succeeded and address resolution's enabled in LL */
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   12360:	9b01      	ldr	r3, [sp, #4]
   12362:	78db      	ldrb	r3, [r3, #3]
   12364:	2b00      	cmp	r3, #0
   12366:	d130      	bne.n	123ca <dmPrivHciHandler+0xde>
   12368:	4b1f      	ldr	r3, [pc, #124]	; (123e8 <dmPrivHciHandler+0xfc>)
   1236a:	7d5b      	ldrb	r3, [r3, #21]
   1236c:	2b00      	cmp	r3, #0
   1236e:	d02c      	beq.n	123ca <dmPrivHciHandler+0xde>
      {
        /* disable address resolution in LL */
        dmPrivSetAddrResEnable(FALSE);
   12370:	2000      	movs	r0, #0
   12372:	f000 f83b 	bl	123ec <dmPrivSetAddrResEnable>
      }
      break;
   12376:	e028      	b.n	123ca <dmPrivHciHandler+0xde>

    case HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_READ_PEER_RES_ADDR_IND;
   12378:	9b01      	ldr	r3, [sp, #4]
   1237a:	223d      	movs	r2, #61	; 0x3d
   1237c:	709a      	strb	r2, [r3, #2]
      break;
   1237e:	e027      	b.n	123d0 <dmPrivHciHandler+0xe4>

    case HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_READ_LOCAL_RES_ADDR_IND;
   12380:	9b01      	ldr	r3, [sp, #4]
   12382:	223e      	movs	r2, #62	; 0x3e
   12384:	709a      	strb	r2, [r3, #2]
      break;
   12386:	e023      	b.n	123d0 <dmPrivHciHandler+0xe4>

    case HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_SET_ADDR_RES_ENABLE_IND;
   12388:	9b01      	ldr	r3, [sp, #4]
   1238a:	223f      	movs	r2, #63	; 0x3f
   1238c:	709a      	strb	r2, [r3, #2]

      /* if LE set address resoultion enable command succeeded */
      if (pEvent->hdr.status == HCI_SUCCESS)
   1238e:	9b01      	ldr	r3, [sp, #4]
   12390:	78db      	ldrb	r3, [r3, #3]
   12392:	2b00      	cmp	r3, #0
   12394:	d11b      	bne.n	123ce <dmPrivHciHandler+0xe2>
      {
        /* update LL Privacy Enabled flag */
        dmCb.llPrivEnabled = dmPrivCb.addrResEnable;
   12396:	4b13      	ldr	r3, [pc, #76]	; (123e4 <dmPrivHciHandler+0xf8>)
   12398:	7a5a      	ldrb	r2, [r3, #9]
   1239a:	4b13      	ldr	r3, [pc, #76]	; (123e8 <dmPrivHciHandler+0xfc>)
   1239c:	755a      	strb	r2, [r3, #21]

        /* pass LL Privacy enable/disable event to dev priv */
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   1239e:	4b12      	ldr	r3, [pc, #72]	; (123e8 <dmPrivHciHandler+0xfc>)
   123a0:	7d5b      	ldrb	r3, [r3, #21]
   123a2:	2b00      	cmp	r3, #0
   123a4:	d001      	beq.n	123aa <dmPrivHciHandler+0xbe>
   123a6:	2015      	movs	r0, #21
   123a8:	e000      	b.n	123ac <dmPrivHciHandler+0xc0>
   123aa:	2014      	movs	r0, #20
                              dmCb.llPrivEnabled ? TRUE : FALSE, 0, 0);
   123ac:	4b0e      	ldr	r3, [pc, #56]	; (123e8 <dmPrivHciHandler+0xfc>)
   123ae:	7d5b      	ldrb	r3, [r3, #21]
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   123b0:	2b00      	cmp	r3, #0
   123b2:	bf14      	ite	ne
   123b4:	2301      	movne	r3, #1
   123b6:	2300      	moveq	r3, #0
   123b8:	b2db      	uxtb	r3, r3
   123ba:	4619      	mov	r1, r3
   123bc:	2300      	movs	r3, #0
   123be:	2200      	movs	r2, #0
   123c0:	f7ff fcc2 	bl	11d48 <dmDevPassEvtToDevPriv>
      }
      break;
   123c4:	e003      	b.n	123ce <dmPrivHciHandler+0xe2>
      break;
   123c6:	bf00      	nop
   123c8:	e002      	b.n	123d0 <dmPrivHciHandler+0xe4>
      break;
   123ca:	bf00      	nop
   123cc:	e000      	b.n	123d0 <dmPrivHciHandler+0xe4>
      break;
   123ce:	bf00      	nop
      /* should never get here */
      return;
  }

  /* call callback (note hdr.status is already set) */
  (*dmCb.cback)((dmEvt_t *)pEvent);
   123d0:	4b05      	ldr	r3, [pc, #20]	; (123e8 <dmPrivHciHandler+0xfc>)
   123d2:	689b      	ldr	r3, [r3, #8]
   123d4:	9801      	ldr	r0, [sp, #4]
   123d6:	4798      	blx	r3
   123d8:	e000      	b.n	123dc <dmPrivHciHandler+0xf0>
      return;
   123da:	bf00      	nop
}
   123dc:	b003      	add	sp, #12
   123de:	f85d fb04 	ldr.w	pc, [sp], #4
   123e2:	bf00      	nop
   123e4:	10008a68 	.word	0x10008a68
   123e8:	10008a50 	.word	0x10008a50

000123ec <dmPrivSetAddrResEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmPrivSetAddrResEnable(bool_t enable)
{
   123ec:	b500      	push	{lr}
   123ee:	b083      	sub	sp, #12
   123f0:	4603      	mov	r3, r0
   123f2:	f88d 3007 	strb.w	r3, [sp, #7]
  /* save input parameter */
  dmPrivCb.addrResEnable = enable;
   123f6:	4a06      	ldr	r2, [pc, #24]	; (12410 <dmPrivSetAddrResEnable+0x24>)
   123f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   123fc:	7253      	strb	r3, [r2, #9]

  /* enable or disable address resolution in LL */
  HciLeSetAddrResolutionEnable(enable);
   123fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12402:	4618      	mov	r0, r3
   12404:	f00b facf 	bl	1d9a6 <HciLeSetAddrResolutionEnable>
}
   12408:	bf00      	nop
   1240a:	b003      	add	sp, #12
   1240c:	f85d fb04 	ldr.w	pc, [sp], #4
   12410:	10008a68 	.word	0x10008a68

00012414 <dmPrivMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivMsgHandler(wsfMsgHdr_t *pMsg)
{
   12414:	b500      	push	{lr}
   12416:	b083      	sub	sp, #12
   12418:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmPrivAct[DM_MSG_MASK(pMsg->event)])((dmPrivMsg_t *) pMsg);
   1241a:	9b01      	ldr	r3, [sp, #4]
   1241c:	789b      	ldrb	r3, [r3, #2]
   1241e:	f003 030f 	and.w	r3, r3, #15
   12422:	4a04      	ldr	r2, [pc, #16]	; (12434 <dmPrivMsgHandler+0x20>)
   12424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12428:	9801      	ldr	r0, [sp, #4]
   1242a:	4798      	blx	r3
}
   1242c:	bf00      	nop
   1242e:	b003      	add	sp, #12
   12430:	f85d fb04 	ldr.w	pc, [sp], #4
   12434:	00029890 	.word	0x00029890

00012438 <dmPrivReset>:
 */
/*************************************************************************************************/
void dmPrivReset(void)
{
  /* initialize control block */
  dmPrivCb.inProgress = 0;
   12438:	4b03      	ldr	r3, [pc, #12]	; (12448 <dmPrivReset+0x10>)
   1243a:	2200      	movs	r2, #0
   1243c:	70da      	strb	r2, [r3, #3]
  dmCb.llPrivEnabled = FALSE;
   1243e:	4b03      	ldr	r3, [pc, #12]	; (1244c <dmPrivReset+0x14>)
   12440:	2200      	movs	r2, #0
   12442:	755a      	strb	r2, [r3, #21]
}
   12444:	bf00      	nop
   12446:	4770      	bx	lr
   12448:	10008a68 	.word	0x10008a68
   1244c:	10008a50 	.word	0x10008a50

00012450 <DmPrivInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivInit(void)
{
  dmFcnIfTbl[DM_ID_PRIV] = (dmFcnIf_t *) &dmPrivFcnIf;
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <DmPrivInit+0xc>)
   12452:	4a03      	ldr	r2, [pc, #12]	; (12460 <DmPrivInit+0x10>)
   12454:	619a      	str	r2, [r3, #24]
}
   12456:	bf00      	nop
   12458:	4770      	bx	lr
   1245a:	bf00      	nop
   1245c:	10002b00 	.word	0x10002b00
   12460:	000298b4 	.word	0x000298b4

00012464 <DmPrivResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivResolveAddr(uint8_t *pAddr, uint8_t *pIrk, uint16_t param)
{
   12464:	b500      	push	{lr}
   12466:	b087      	sub	sp, #28
   12468:	9003      	str	r0, [sp, #12]
   1246a:	9102      	str	r1, [sp, #8]
   1246c:	4613      	mov	r3, r2
   1246e:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmPrivApiResolveAddr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
   12472:	201a      	movs	r0, #26
   12474:	f005 fffd 	bl	18472 <WsfMsgAlloc>
   12478:	9005      	str	r0, [sp, #20]
   1247a:	9b05      	ldr	r3, [sp, #20]
   1247c:	2b00      	cmp	r3, #0
   1247e:	d018      	beq.n	124b2 <DmPrivResolveAddr+0x4e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_RESOLVE_ADDR;
   12480:	9b05      	ldr	r3, [sp, #20]
   12482:	2260      	movs	r2, #96	; 0x60
   12484:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   12486:	9b05      	ldr	r3, [sp, #20]
   12488:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1248c:	801a      	strh	r2, [r3, #0]
    Calc128Cpy(pMsg->irk, pIrk);
   1248e:	9b05      	ldr	r3, [sp, #20]
   12490:	3304      	adds	r3, #4
   12492:	9902      	ldr	r1, [sp, #8]
   12494:	4618      	mov	r0, r3
   12496:	f008 ff5c 	bl	1b352 <Calc128Cpy>
    BdaCpy(pMsg->addr, pAddr);
   1249a:	9b05      	ldr	r3, [sp, #20]
   1249c:	3314      	adds	r3, #20
   1249e:	9903      	ldr	r1, [sp, #12]
   124a0:	4618      	mov	r0, r3
   124a2:	f008 ff11 	bl	1b2c8 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   124a6:	4b05      	ldr	r3, [pc, #20]	; (124bc <DmPrivResolveAddr+0x58>)
   124a8:	7b1b      	ldrb	r3, [r3, #12]
   124aa:	9905      	ldr	r1, [sp, #20]
   124ac:	4618      	mov	r0, r3
   124ae:	f006 f804 	bl	184ba <WsfMsgSend>
  }
}
   124b2:	bf00      	nop
   124b4:	b007      	add	sp, #28
   124b6:	f85d fb04 	ldr.w	pc, [sp], #4
   124ba:	bf00      	nop
   124bc:	10008a50 	.word	0x10008a50

000124c0 <DmPrivAddDevToResList>:
 *          to resolving list to enable address resolution in the Controller.
 */
/*************************************************************************************************/
void DmPrivAddDevToResList(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t *pPeerIrk,
                           uint8_t *pLocalIrk, bool_t enableLlPriv, uint16_t param)
{
   124c0:	b500      	push	{lr}
   124c2:	b087      	sub	sp, #28
   124c4:	9102      	str	r1, [sp, #8]
   124c6:	9201      	str	r2, [sp, #4]
   124c8:	9300      	str	r3, [sp, #0]
   124ca:	4603      	mov	r3, r0
   124cc:	f88d 300f 	strb.w	r3, [sp, #15]
  dmPrivApiAddDevToResList_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
   124d0:	202c      	movs	r0, #44	; 0x2c
   124d2:	f005 ffce 	bl	18472 <WsfMsgAlloc>
   124d6:	9005      	str	r0, [sp, #20]
   124d8:	9b05      	ldr	r3, [sp, #20]
   124da:	2b00      	cmp	r3, #0
   124dc:	d027      	beq.n	1252e <DmPrivAddDevToResList+0x6e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_ADD_DEV_TO_RES_LIST;
   124de:	9b05      	ldr	r3, [sp, #20]
   124e0:	2262      	movs	r2, #98	; 0x62
   124e2:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   124e4:	9b05      	ldr	r3, [sp, #20]
   124e6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   124ea:	801a      	strh	r2, [r3, #0]
    pMsg->addrType = addrType;
   124ec:	9b05      	ldr	r3, [sp, #20]
   124ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
   124f2:	711a      	strb	r2, [r3, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   124f4:	9b05      	ldr	r3, [sp, #20]
   124f6:	3305      	adds	r3, #5
   124f8:	9902      	ldr	r1, [sp, #8]
   124fa:	4618      	mov	r0, r3
   124fc:	f008 fee4 	bl	1b2c8 <BdaCpy>
    Calc128Cpy(pMsg->peerIrk, pPeerIrk);
   12500:	9b05      	ldr	r3, [sp, #20]
   12502:	330b      	adds	r3, #11
   12504:	9901      	ldr	r1, [sp, #4]
   12506:	4618      	mov	r0, r3
   12508:	f008 ff23 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(pMsg->localIrk, pLocalIrk);
   1250c:	9b05      	ldr	r3, [sp, #20]
   1250e:	331b      	adds	r3, #27
   12510:	9900      	ldr	r1, [sp, #0]
   12512:	4618      	mov	r0, r3
   12514:	f008 ff1d 	bl	1b352 <Calc128Cpy>
    pMsg->enableLlPriv = enableLlPriv;
   12518:	9b05      	ldr	r3, [sp, #20]
   1251a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1251e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    WsfMsgSend(dmCb.handlerId, pMsg);
   12522:	4b05      	ldr	r3, [pc, #20]	; (12538 <DmPrivAddDevToResList+0x78>)
   12524:	7b1b      	ldrb	r3, [r3, #12]
   12526:	9905      	ldr	r1, [sp, #20]
   12528:	4618      	mov	r0, r3
   1252a:	f005 ffc6 	bl	184ba <WsfMsgSend>
  }
}
   1252e:	bf00      	nop
   12530:	b007      	add	sp, #28
   12532:	f85d fb04 	ldr.w	pc, [sp], #4
   12536:	bf00      	nop
   12538:	10008a50 	.word	0x10008a50

0001253c <DmPrivSetPrivacyMode>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetPrivacyMode(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t mode)
{
   1253c:	b500      	push	{lr}
   1253e:	b085      	sub	sp, #20
   12540:	4603      	mov	r3, r0
   12542:	9100      	str	r1, [sp, #0]
   12544:	f88d 3007 	strb.w	r3, [sp, #7]
   12548:	4613      	mov	r3, r2
   1254a:	f88d 3006 	strb.w	r3, [sp, #6]
  dmPrivApiSetPrivacyMode_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
   1254e:	200c      	movs	r0, #12
   12550:	f005 ff8f 	bl	18472 <WsfMsgAlloc>
   12554:	9003      	str	r0, [sp, #12]
   12556:	9b03      	ldr	r3, [sp, #12]
   12558:	2b00      	cmp	r3, #0
   1255a:	d016      	beq.n	1258a <DmPrivSetPrivacyMode+0x4e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_PRIVACY_MODE;
   1255c:	9b03      	ldr	r3, [sp, #12]
   1255e:	2266      	movs	r2, #102	; 0x66
   12560:	709a      	strb	r2, [r3, #2]
    pMsg->addrType = addrType;
   12562:	9b03      	ldr	r3, [sp, #12]
   12564:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12568:	711a      	strb	r2, [r3, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   1256a:	9b03      	ldr	r3, [sp, #12]
   1256c:	3305      	adds	r3, #5
   1256e:	9900      	ldr	r1, [sp, #0]
   12570:	4618      	mov	r0, r3
   12572:	f008 fea9 	bl	1b2c8 <BdaCpy>
    pMsg->mode = mode;
   12576:	9b03      	ldr	r3, [sp, #12]
   12578:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1257c:	72da      	strb	r2, [r3, #11]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1257e:	4b05      	ldr	r3, [pc, #20]	; (12594 <DmPrivSetPrivacyMode+0x58>)
   12580:	7b1b      	ldrb	r3, [r3, #12]
   12582:	9903      	ldr	r1, [sp, #12]
   12584:	4618      	mov	r0, r3
   12586:	f005 ff98 	bl	184ba <WsfMsgSend>
  }
}
   1258a:	bf00      	nop
   1258c:	b005      	add	sp, #20
   1258e:	f85d fb04 	ldr.w	pc, [sp], #4
   12592:	bf00      	nop
   12594:	10008a50 	.word	0x10008a50

00012598 <dmSecHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecHciHandler(hciEvt_t *pEvent)
{
   12598:	b500      	push	{lr}
   1259a:	b089      	sub	sp, #36	; 0x24
   1259c:	9001      	str	r0, [sp, #4]
  dmConnCcb_t           *pCcb;
  uint8_t               *pKey;
  dmSecEncryptIndEvt_t  encryptInd;
  uint8_t               secLevel;

  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   1259e:	9b01      	ldr	r3, [sp, #4]
   125a0:	881b      	ldrh	r3, [r3, #0]
   125a2:	4618      	mov	r0, r3
   125a4:	f7fe fabe 	bl	10b24 <dmConnCcbByHandle>
   125a8:	9007      	str	r0, [sp, #28]
   125aa:	9b07      	ldr	r3, [sp, #28]
   125ac:	2b00      	cmp	r3, #0
   125ae:	d07e      	beq.n	126ae <dmSecHciHandler+0x116>
  {
    if (pEvent->hdr.event == HCI_LE_LTK_REQ_CBACK_EVT)
   125b0:	9b01      	ldr	r3, [sp, #4]
   125b2:	789b      	ldrb	r3, [r3, #2]
   125b4:	2b10      	cmp	r3, #16
   125b6:	d13e      	bne.n	12636 <dmSecHciHandler+0x9e>
    {
      /* if ediv and rand are zero then check if STK is available from SMP */
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   125b8:	9b01      	ldr	r3, [sp, #4]
   125ba:	89db      	ldrh	r3, [r3, #14]
   125bc:	2b00      	cmp	r3, #0
   125be:	d123      	bne.n	12608 <dmSecHciHandler+0x70>
          (memcmp(pEvent->leLtkReq.randNum, calc128Zeros, HCI_RAND_LEN) == 0))
   125c0:	9b01      	ldr	r3, [sp, #4]
   125c2:	3306      	adds	r3, #6
   125c4:	2208      	movs	r2, #8
   125c6:	493b      	ldr	r1, [pc, #236]	; (126b4 <dmSecHciHandler+0x11c>)
   125c8:	4618      	mov	r0, r3
   125ca:	f7f9 fd99 	bl	c100 <memcmp>
   125ce:	4603      	mov	r3, r0
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   125d0:	2b00      	cmp	r3, #0
   125d2:	d119      	bne.n	12608 <dmSecHciHandler+0x70>
      {
        if ((pKey = SmpDmGetStk(pCcb->connId, &secLevel)) != NULL)
   125d4:	9b07      	ldr	r3, [sp, #28]
   125d6:	7c1b      	ldrb	r3, [r3, #16]
   125d8:	f10d 020f 	add.w	r2, sp, #15
   125dc:	4611      	mov	r1, r2
   125de:	4618      	mov	r0, r3
   125e0:	f7fc f96e 	bl	e8c0 <SmpDmGetStk>
   125e4:	9006      	str	r0, [sp, #24]
   125e6:	9b06      	ldr	r3, [sp, #24]
   125e8:	2b00      	cmp	r3, #0
   125ea:	d00d      	beq.n	12608 <dmSecHciHandler+0x70>
        {
          /* store security level */
          pCcb->tmpSecLevel = secLevel;
   125ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
   125f0:	9b07      	ldr	r3, [sp, #28]
   125f2:	761a      	strb	r2, [r3, #24]

          /* not using LTK */
          pCcb->usingLtk = FALSE;
   125f4:	9b07      	ldr	r3, [sp, #28]
   125f6:	2200      	movs	r2, #0
   125f8:	749a      	strb	r2, [r3, #18]

          /* provide key to HCI */
          HciLeLtkReqReplCmd(pEvent->hdr.param, pKey);
   125fa:	9b01      	ldr	r3, [sp, #4]
   125fc:	881b      	ldrh	r3, [r3, #0]
   125fe:	9906      	ldr	r1, [sp, #24]
   12600:	4618      	mov	r0, r3
   12602:	f00a fe54 	bl	1d2ae <HciLeLtkReqReplCmd>
   12606:	e052      	b.n	126ae <dmSecHciHandler+0x116>
      }

      /* call callback to get key from app */

      /* set connection busy */
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   12608:	9b07      	ldr	r3, [sp, #28]
   1260a:	7c1b      	ldrb	r3, [r3, #16]
   1260c:	2201      	movs	r2, #1
   1260e:	2102      	movs	r1, #2
   12610:	4618      	mov	r0, r3
   12612:	f7ff f91b 	bl	1184c <DmConnSetIdle>

      /* using LTK */
      pCcb->usingLtk = TRUE;
   12616:	9b07      	ldr	r3, [sp, #28]
   12618:	2201      	movs	r2, #1
   1261a:	749a      	strb	r2, [r3, #18]

      /* use the header from the encryptInd struct for efficiency */
      pEvent->hdr.param = pCcb->connId;
   1261c:	9b07      	ldr	r3, [sp, #28]
   1261e:	7c1b      	ldrb	r3, [r3, #16]
   12620:	b29a      	uxth	r2, r3
   12622:	9b01      	ldr	r3, [sp, #4]
   12624:	801a      	strh	r2, [r3, #0]
      pEvent->hdr.event = DM_SEC_LTK_REQ_IND;
   12626:	9b01      	ldr	r3, [sp, #4]
   12628:	2230      	movs	r2, #48	; 0x30
   1262a:	709a      	strb	r2, [r3, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1262c:	4b22      	ldr	r3, [pc, #136]	; (126b8 <dmSecHciHandler+0x120>)
   1262e:	689b      	ldr	r3, [r3, #8]
   12630:	9801      	ldr	r0, [sp, #4]
   12632:	4798      	blx	r3
   12634:	e03b      	b.n	126ae <dmSecHciHandler+0x116>
    }
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   12636:	9b01      	ldr	r3, [sp, #4]
   12638:	789b      	ldrb	r3, [r3, #2]
   1263a:	2b0e      	cmp	r3, #14
   1263c:	d003      	beq.n	12646 <dmSecHciHandler+0xae>
             pEvent->hdr.event == HCI_ENC_CHANGE_CBACK_EVT)
   1263e:	9b01      	ldr	r3, [sp, #4]
   12640:	789b      	ldrb	r3, [r3, #2]
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   12642:	2b0f      	cmp	r3, #15
   12644:	d133      	bne.n	126ae <dmSecHciHandler+0x116>
    {
      /* set connection idle */
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   12646:	9b07      	ldr	r3, [sp, #28]
   12648:	7c1b      	ldrb	r3, [r3, #16]
   1264a:	2200      	movs	r2, #0
   1264c:	2102      	movs	r1, #2
   1264e:	4618      	mov	r0, r3
   12650:	f7ff f8fc 	bl	1184c <DmConnSetIdle>

      encryptInd.hdr.param = pCcb->connId;
   12654:	9b07      	ldr	r3, [sp, #28]
   12656:	7c1b      	ldrb	r3, [r3, #16]
   12658:	b29b      	uxth	r3, r3
   1265a:	f8ad 3010 	strh.w	r3, [sp, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   1265e:	9b01      	ldr	r3, [sp, #4]
   12660:	78db      	ldrb	r3, [r3, #3]
   12662:	f88d 3013 	strb.w	r3, [sp, #19]
      if (encryptInd.hdr.status == HCI_SUCCESS)
   12666:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1266a:	2b00      	cmp	r3, #0
   1266c:	d10b      	bne.n	12686 <dmSecHciHandler+0xee>
      {
        encryptInd.hdr.event = DM_SEC_ENCRYPT_IND;
   1266e:	232c      	movs	r3, #44	; 0x2c
   12670:	f88d 3012 	strb.w	r3, [sp, #18]

        /* update security level of connection */
        pCcb->secLevel = pCcb->tmpSecLevel;
   12674:	9b07      	ldr	r3, [sp, #28]
   12676:	7e1a      	ldrb	r2, [r3, #24]
   12678:	9b07      	ldr	r3, [sp, #28]
   1267a:	75da      	strb	r2, [r3, #23]

        /* set LTK flag */
        encryptInd.usingLtk = pCcb->usingLtk;
   1267c:	9b07      	ldr	r3, [sp, #28]
   1267e:	7c9b      	ldrb	r3, [r3, #18]
   12680:	f88d 3014 	strb.w	r3, [sp, #20]
   12684:	e002      	b.n	1268c <dmSecHciHandler+0xf4>
      }
      else
      {
        encryptInd.hdr.event = DM_SEC_ENCRYPT_FAIL_IND;
   12686:	232d      	movs	r3, #45	; 0x2d
   12688:	f88d 3012 	strb.w	r3, [sp, #18]
      }

      /* call callback before passing to SMP */
      DmSmpCbackExec((dmEvt_t *) &encryptInd);
   1268c:	ab04      	add	r3, sp, #16
   1268e:	4618      	mov	r0, r3
   12690:	f000 f864 	bl	1275c <DmSmpCbackExec>

      /* pass to SMP */
      encryptInd.hdr.param = pCcb->connId;
   12694:	9b07      	ldr	r3, [sp, #28]
   12696:	7c1b      	ldrb	r3, [r3, #16]
   12698:	b29b      	uxth	r3, r3
   1269a:	f8ad 3010 	strh.w	r3, [sp, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   1269e:	9b01      	ldr	r3, [sp, #4]
   126a0:	78db      	ldrb	r3, [r3, #3]
   126a2:	f88d 3013 	strb.w	r3, [sp, #19]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   126a6:	ab04      	add	r3, sp, #16
   126a8:	4618      	mov	r0, r3
   126aa:	f7fc f8c1 	bl	e830 <SmpDmEncryptInd>
    }
  }
}
   126ae:	b009      	add	sp, #36	; 0x24
   126b0:	f85d fb04 	ldr.w	pc, [sp], #4
   126b4:	00029a78 	.word	0x00029a78
   126b8:	10008a50 	.word	0x10008a50

000126bc <dmSecMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecMsgHandler(dmSecMsg_t *pMsg)
{
   126bc:	b500      	push	{lr}
   126be:	b085      	sub	sp, #20
   126c0:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->hdr.param)) != NULL)
   126c2:	9b01      	ldr	r3, [sp, #4]
   126c4:	881b      	ldrh	r3, [r3, #0]
   126c6:	b2db      	uxtb	r3, r3
   126c8:	4618      	mov	r0, r3
   126ca:	f7fe fa8d 	bl	10be8 <dmConnCcbById>
   126ce:	9003      	str	r0, [sp, #12]
   126d0:	9b03      	ldr	r3, [sp, #12]
   126d2:	2b00      	cmp	r3, #0
   126d4:	d03e      	beq.n	12754 <dmSecMsgHandler+0x98>
  {
    /* process API encrypt req */
    switch (pMsg->hdr.event)
   126d6:	9b01      	ldr	r3, [sp, #4]
   126d8:	789b      	ldrb	r3, [r3, #2]
   126da:	2b50      	cmp	r3, #80	; 0x50
   126dc:	d002      	beq.n	126e4 <dmSecMsgHandler+0x28>
   126de:	2b51      	cmp	r3, #81	; 0x51
   126e0:	d01a      	beq.n	12718 <dmSecMsgHandler+0x5c>
        HciLeLtkReqNegReplCmd(pCcb->handle);
      }
      break;

    default:
      break;
   126e2:	e037      	b.n	12754 <dmSecMsgHandler+0x98>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   126e4:	9b03      	ldr	r3, [sp, #12]
   126e6:	7c1b      	ldrb	r3, [r3, #16]
   126e8:	2201      	movs	r2, #1
   126ea:	2102      	movs	r1, #2
   126ec:	4618      	mov	r0, r3
   126ee:	f7ff f8ad 	bl	1184c <DmConnSetIdle>
      pCcb->tmpSecLevel = pMsg->encryptReq.secLevel;
   126f2:	9b01      	ldr	r3, [sp, #4]
   126f4:	7f9a      	ldrb	r2, [r3, #30]
   126f6:	9b03      	ldr	r3, [sp, #12]
   126f8:	761a      	strb	r2, [r3, #24]
      pCcb->usingLtk = TRUE;
   126fa:	9b03      	ldr	r3, [sp, #12]
   126fc:	2201      	movs	r2, #1
   126fe:	749a      	strb	r2, [r3, #18]
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   12700:	9b03      	ldr	r3, [sp, #12]
   12702:	8998      	ldrh	r0, [r3, #12]
   12704:	9b01      	ldr	r3, [sp, #4]
   12706:	f103 0114 	add.w	r1, r3, #20
   1270a:	9b01      	ldr	r3, [sp, #4]
   1270c:	8b9a      	ldrh	r2, [r3, #28]
                              pMsg->encryptReq.ltk.ediv, pMsg->encryptReq.ltk.key);
   1270e:	9b01      	ldr	r3, [sp, #4]
   12710:	3304      	adds	r3, #4
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   12712:	f00a ff8e 	bl	1d632 <HciLeStartEncryptionCmd>
      break;
   12716:	e01d      	b.n	12754 <dmSecMsgHandler+0x98>
      if (pMsg->ltkRsp.keyFound)
   12718:	9b01      	ldr	r3, [sp, #4]
   1271a:	7d1b      	ldrb	r3, [r3, #20]
   1271c:	2b00      	cmp	r3, #0
   1271e:	d00c      	beq.n	1273a <dmSecMsgHandler+0x7e>
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   12720:	9b01      	ldr	r3, [sp, #4]
   12722:	7d5a      	ldrb	r2, [r3, #21]
   12724:	9b03      	ldr	r3, [sp, #12]
   12726:	761a      	strb	r2, [r3, #24]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   12728:	9b03      	ldr	r3, [sp, #12]
   1272a:	899a      	ldrh	r2, [r3, #12]
   1272c:	9b01      	ldr	r3, [sp, #4]
   1272e:	3304      	adds	r3, #4
   12730:	4619      	mov	r1, r3
   12732:	4610      	mov	r0, r2
   12734:	f00a fdbb 	bl	1d2ae <HciLeLtkReqReplCmd>
      break;
   12738:	e00b      	b.n	12752 <dmSecMsgHandler+0x96>
        DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   1273a:	9b03      	ldr	r3, [sp, #12]
   1273c:	7c1b      	ldrb	r3, [r3, #16]
   1273e:	2200      	movs	r2, #0
   12740:	2102      	movs	r1, #2
   12742:	4618      	mov	r0, r3
   12744:	f7ff f882 	bl	1184c <DmConnSetIdle>
        HciLeLtkReqNegReplCmd(pCcb->handle);
   12748:	9b03      	ldr	r3, [sp, #12]
   1274a:	899b      	ldrh	r3, [r3, #12]
   1274c:	4618      	mov	r0, r3
   1274e:	f00a fd86 	bl	1d25e <HciLeLtkReqNegReplCmd>
      break;
   12752:	bf00      	nop
    }
  }
}
   12754:	bf00      	nop
   12756:	b005      	add	sp, #20
   12758:	f85d fb04 	ldr.w	pc, [sp], #4

0001275c <DmSmpCbackExec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSmpCbackExec(dmEvt_t *pDmEvt)
{
   1275c:	b500      	push	{lr}
   1275e:	b083      	sub	sp, #12
   12760:	9001      	str	r0, [sp, #4]
  /* certain messages need to get to ATT */
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   12762:	9b01      	ldr	r3, [sp, #4]
   12764:	789b      	ldrb	r3, [r3, #2]
   12766:	2b2a      	cmp	r3, #42	; 0x2a
   12768:	d003      	beq.n	12772 <DmSmpCbackExec+0x16>
      pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   1276a:	9b01      	ldr	r3, [sp, #4]
   1276c:	789b      	ldrb	r3, [r3, #2]
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   1276e:	2b2c      	cmp	r3, #44	; 0x2c
   12770:	d109      	bne.n	12786 <DmSmpCbackExec+0x2a>
  {
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   12772:	4b09      	ldr	r3, [pc, #36]	; (12798 <DmSmpCbackExec+0x3c>)
   12774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   12778:	2b00      	cmp	r3, #0
   1277a:	d004      	beq.n	12786 <DmSmpCbackExec+0x2a>
    {
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   1277c:	4b06      	ldr	r3, [pc, #24]	; (12798 <DmSmpCbackExec+0x3c>)
   1277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   12782:	9801      	ldr	r0, [sp, #4]
   12784:	4798      	blx	r3
    }
  }

  /* execute DM client callback */
  (*dmCb.cback)(pDmEvt);
   12786:	4b05      	ldr	r3, [pc, #20]	; (1279c <DmSmpCbackExec+0x40>)
   12788:	689b      	ldr	r3, [r3, #8]
   1278a:	9801      	ldr	r0, [sp, #4]
   1278c:	4798      	blx	r3
}
   1278e:	bf00      	nop
   12790:	b003      	add	sp, #12
   12792:	f85d fb04 	ldr.w	pc, [sp], #4
   12796:	bf00      	nop
   12798:	1000898c 	.word	0x1000898c
   1279c:	10008a50 	.word	0x10008a50

000127a0 <DmSecCancelReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecCancelReq(dmConnId_t connId, uint8_t reason)
{
   127a0:	b500      	push	{lr}
   127a2:	b085      	sub	sp, #20
   127a4:	4603      	mov	r3, r0
   127a6:	460a      	mov	r2, r1
   127a8:	f88d 3007 	strb.w	r3, [sp, #7]
   127ac:	4613      	mov	r3, r2
   127ae:	f88d 3006 	strb.w	r3, [sp, #6]
  wsfMsgHdr_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   127b2:	2004      	movs	r0, #4
   127b4:	f005 fe5d 	bl	18472 <WsfMsgAlloc>
   127b8:	9003      	str	r0, [sp, #12]
   127ba:	9b03      	ldr	r3, [sp, #12]
   127bc:	2b00      	cmp	r3, #0
   127be:	d00e      	beq.n	127de <DmSecCancelReq+0x3e>
  {
    pMsg->event = SMP_MSG_API_CANCEL_REQ;
   127c0:	9b03      	ldr	r3, [sp, #12]
   127c2:	2203      	movs	r2, #3
   127c4:	709a      	strb	r2, [r3, #2]
    pMsg->param = connId;
   127c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127ca:	b29a      	uxth	r2, r3
   127cc:	9b03      	ldr	r3, [sp, #12]
   127ce:	801a      	strh	r2, [r3, #0]
    pMsg->status = reason;
   127d0:	9b03      	ldr	r3, [sp, #12]
   127d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   127d6:	70da      	strb	r2, [r3, #3]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   127d8:	9803      	ldr	r0, [sp, #12]
   127da:	f7fc f819 	bl	e810 <SmpDmMsgSend>
  }
}
   127de:	bf00      	nop
   127e0:	b005      	add	sp, #20
   127e2:	f85d fb04 	ldr.w	pc, [sp], #4

000127e6 <DmSecAuthRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecAuthRsp(dmConnId_t connId, uint8_t authDataLen, uint8_t *pAuthData)
{
   127e6:	b500      	push	{lr}
   127e8:	b085      	sub	sp, #20
   127ea:	4603      	mov	r3, r0
   127ec:	9200      	str	r2, [sp, #0]
   127ee:	f88d 3007 	strb.w	r3, [sp, #7]
   127f2:	460b      	mov	r3, r1
   127f4:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmAuthRsp_t   *pMsg;

  WSF_ASSERT(authDataLen <= SMP_OOB_LEN);

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
   127f8:	2016      	movs	r0, #22
   127fa:	f005 fe3a 	bl	18472 <WsfMsgAlloc>
   127fe:	9003      	str	r0, [sp, #12]
   12800:	9b03      	ldr	r3, [sp, #12]
   12802:	2b00      	cmp	r3, #0
   12804:	d019      	beq.n	1283a <DmSecAuthRsp+0x54>
  {
    pMsg->hdr.event = SMP_MSG_API_AUTH_RSP;
   12806:	9b03      	ldr	r3, [sp, #12]
   12808:	2204      	movs	r2, #4
   1280a:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   1280c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12810:	b29a      	uxth	r2, r3
   12812:	9b03      	ldr	r3, [sp, #12]
   12814:	801a      	strh	r2, [r3, #0]
    pMsg->authDataLen = authDataLen;
   12816:	9b03      	ldr	r3, [sp, #12]
   12818:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1281c:	751a      	strb	r2, [r3, #20]

    if (pAuthData != NULL)
   1281e:	9b00      	ldr	r3, [sp, #0]
   12820:	2b00      	cmp	r3, #0
   12822:	d007      	beq.n	12834 <DmSecAuthRsp+0x4e>
    {
      memcpy(pMsg->authData, pAuthData, authDataLen);
   12824:	9b03      	ldr	r3, [sp, #12]
   12826:	3304      	adds	r3, #4
   12828:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1282c:	9900      	ldr	r1, [sp, #0]
   1282e:	4618      	mov	r0, r3
   12830:	f7f9 fc96 	bl	c160 <memcpy>
    }

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   12834:	9803      	ldr	r0, [sp, #12]
   12836:	f7fb ffeb 	bl	e810 <SmpDmMsgSend>
  }
}
   1283a:	bf00      	nop
   1283c:	b005      	add	sp, #20
   1283e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00012844 <DmSecInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecInit(void)
{
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   12844:	4b05      	ldr	r3, [pc, #20]	; (1285c <DmSecInit+0x18>)
   12846:	4a06      	ldr	r2, [pc, #24]	; (12860 <DmSecInit+0x1c>)
   12848:	615a      	str	r2, [r3, #20]

  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   1284a:	4b06      	ldr	r3, [pc, #24]	; (12864 <DmSecInit+0x20>)
   1284c:	4a06      	ldr	r2, [pc, #24]	; (12868 <DmSecInit+0x24>)
   1284e:	601a      	str	r2, [r3, #0]
   12850:	4b04      	ldr	r3, [pc, #16]	; (12864 <DmSecInit+0x20>)
   12852:	681b      	ldr	r3, [r3, #0]
   12854:	4a03      	ldr	r2, [pc, #12]	; (12864 <DmSecInit+0x20>)
   12856:	6053      	str	r3, [r2, #4]
}
   12858:	bf00      	nop
   1285a:	4770      	bx	lr
   1285c:	10002b00 	.word	0x10002b00
   12860:	000298c0 	.word	0x000298c0
   12864:	10008a84 	.word	0x10008a84
   12868:	00029a78 	.word	0x00029a78

0001286c <DmSecSetLocalIrk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSetLocalIrk(uint8_t *pIrk)
{
   1286c:	b500      	push	{lr}
   1286e:	b083      	sub	sp, #12
   12870:	9001      	str	r0, [sp, #4]
  WsfTaskLock();
   12872:	f005 fe8b 	bl	1858c <WsfTaskLock>
  dmSecCb.pIrk = pIrk;
   12876:	4a04      	ldr	r2, [pc, #16]	; (12888 <DmSecSetLocalIrk+0x1c>)
   12878:	9b01      	ldr	r3, [sp, #4]
   1287a:	6013      	str	r3, [r2, #0]
  WsfTaskUnlock();
   1287c:	f005 fe8b 	bl	18596 <WsfTaskUnlock>
}
   12880:	bf00      	nop
   12882:	b003      	add	sp, #12
   12884:	f85d fb04 	ldr.w	pc, [sp], #4
   12888:	10008a84 	.word	0x10008a84

0001288c <DmSecGetLocalCsrk>:
 *  \return Pointer to CSRK.
 */
/*************************************************************************************************/
uint8_t *DmSecGetLocalCsrk(void)
{
  return dmSecCb.pCsrk;
   1288c:	4b01      	ldr	r3, [pc, #4]	; (12894 <DmSecGetLocalCsrk+0x8>)
   1288e:	685b      	ldr	r3, [r3, #4]
}
   12890:	4618      	mov	r0, r3
   12892:	4770      	bx	lr
   12894:	10008a84 	.word	0x10008a84

00012898 <DmSecGetLocalIrk>:
 *  \return Pointer to IRK.
 */
/*************************************************************************************************/
uint8_t *DmSecGetLocalIrk(void)
{
  return dmSecCb.pIrk;
   12898:	4b01      	ldr	r3, [pc, #4]	; (128a0 <DmSecGetLocalIrk+0x8>)
   1289a:	681b      	ldr	r3, [r3, #0]
}
   1289c:	4618      	mov	r0, r3
   1289e:	4770      	bx	lr
   128a0:	10008a84 	.word	0x10008a84

000128a4 <dmSecReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecReset(void)
{
   128a4:	b508      	push	{r3, lr}
  /* initialize smp database */
  SmpDbInit();
   128a6:	f7fb f9fd 	bl	dca4 <SmpDbInit>
}
   128aa:	bf00      	nop
   128ac:	bd08      	pop	{r3, pc}
	...

000128b0 <dmSecLescMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecLescMsgHandler(dmSecMsg_t *pMsg)
{
   128b0:	b500      	push	{lr}
   128b2:	b08d      	sub	sp, #52	; 0x34
   128b4:	9001      	str	r0, [sp, #4]
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   128b6:	9b01      	ldr	r3, [sp, #4]
   128b8:	789b      	ldrb	r3, [r3, #2]
   128ba:	2b81      	cmp	r3, #129	; 0x81
   128bc:	d107      	bne.n	128ce <dmSecLescMsgHandler+0x1e>
  {
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
   128be:	9b01      	ldr	r3, [sp, #4]
   128c0:	2234      	movs	r2, #52	; 0x34
   128c2:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   128c4:	4b19      	ldr	r3, [pc, #100]	; (1292c <dmSecLescMsgHandler+0x7c>)
   128c6:	689b      	ldr	r3, [r3, #8]
   128c8:	9801      	ldr	r0, [sp, #4]
   128ca:	4798      	blx	r3

    WsfBufFree(dmSecOobRand);

    (*dmCb.cback)((dmEvt_t *) &oobEvt);
  }
}
   128cc:	e02a      	b.n	12924 <dmSecLescMsgHandler+0x74>
  else if (pMsg->hdr.event == DM_SEC_MSG_CALC_OOB_CNF)
   128ce:	9b01      	ldr	r3, [sp, #4]
   128d0:	789b      	ldrb	r3, [r3, #2]
   128d2:	2b80      	cmp	r3, #128	; 0x80
   128d4:	d126      	bne.n	12924 <dmSecLescMsgHandler+0x74>
    secCmacMsg_t *pCmacMsg = (secCmacMsg_t *) pMsg;
   128d6:	9b01      	ldr	r3, [sp, #4]
   128d8:	930b      	str	r3, [sp, #44]	; 0x2c
    WsfBufFree(pCmacMsg->pPlainText);
   128da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   128dc:	689b      	ldr	r3, [r3, #8]
   128de:	4618      	mov	r0, r3
   128e0:	f005 fd72 	bl	183c8 <WsfBufFree>
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   128e4:	2333      	movs	r3, #51	; 0x33
   128e6:	f88d 300a 	strb.w	r3, [sp, #10]
    oobEvt.hdr.status = HCI_SUCCESS;
   128ea:	2300      	movs	r3, #0
   128ec:	f88d 300b 	strb.w	r3, [sp, #11]
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   128f0:	9b01      	ldr	r3, [sp, #4]
   128f2:	685a      	ldr	r2, [r3, #4]
   128f4:	ab02      	add	r3, sp, #8
   128f6:	3304      	adds	r3, #4
   128f8:	4611      	mov	r1, r2
   128fa:	4618      	mov	r0, r3
   128fc:	f008 fd29 	bl	1b352 <Calc128Cpy>
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   12900:	4b0b      	ldr	r3, [pc, #44]	; (12930 <dmSecLescMsgHandler+0x80>)
   12902:	681a      	ldr	r2, [r3, #0]
   12904:	ab02      	add	r3, sp, #8
   12906:	3314      	adds	r3, #20
   12908:	4611      	mov	r1, r2
   1290a:	4618      	mov	r0, r3
   1290c:	f008 fd21 	bl	1b352 <Calc128Cpy>
    WsfBufFree(dmSecOobRand);
   12910:	4b07      	ldr	r3, [pc, #28]	; (12930 <dmSecLescMsgHandler+0x80>)
   12912:	681b      	ldr	r3, [r3, #0]
   12914:	4618      	mov	r0, r3
   12916:	f005 fd57 	bl	183c8 <WsfBufFree>
    (*dmCb.cback)((dmEvt_t *) &oobEvt);
   1291a:	4b04      	ldr	r3, [pc, #16]	; (1292c <dmSecLescMsgHandler+0x7c>)
   1291c:	689b      	ldr	r3, [r3, #8]
   1291e:	aa02      	add	r2, sp, #8
   12920:	4610      	mov	r0, r2
   12922:	4798      	blx	r3
}
   12924:	bf00      	nop
   12926:	b00d      	add	sp, #52	; 0x34
   12928:	f85d fb04 	ldr.w	pc, [sp], #4
   1292c:	10008a50 	.word	0x10008a50
   12930:	1000360c 	.word	0x1000360c

00012934 <DmSecSetOob>:
 *
 *  \return Pointer to IRK.
 */
/*************************************************************************************************/
void DmSecSetOob(dmConnId_t connId, dmSecLescOobCfg_t *pCfg)
{
   12934:	b500      	push	{lr}
   12936:	b083      	sub	sp, #12
   12938:	4603      	mov	r3, r0
   1293a:	9100      	str	r1, [sp, #0]
   1293c:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Update the Security Manager control structure with random and confirm values from the peer */
  SmpScSetOobCfg(connId, pCfg);
   12940:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12944:	9900      	ldr	r1, [sp, #0]
   12946:	4618      	mov	r0, r3
   12948:	f7fd faaa 	bl	fea0 <SmpScSetOobCfg>
}
   1294c:	bf00      	nop
   1294e:	b003      	add	sp, #12
   12950:	f85d fb04 	ldr.w	pc, [sp], #4

00012954 <DmSecCalcOobReq>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void DmSecCalcOobReq(uint8_t *pRand, uint8_t *pPubKeyX)
{
   12954:	b500      	push	{lr}
   12956:	b091      	sub	sp, #68	; 0x44
   12958:	9003      	str	r0, [sp, #12]
   1295a:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;
  dmSecOobCalcIndEvt_t pEvt;

  SMP_TRACE_256("DmSecCalcOobReq Key", pPubKeyX);
   1295c:	2220      	movs	r2, #32
   1295e:	9902      	ldr	r1, [sp, #8]
   12960:	482e      	ldr	r0, [pc, #184]	; (12a1c <DmSecCalcOobReq+0xc8>)
   12962:	f7fd fb83 	bl	1006c <smpLogByteArray>
  SMP_TRACE_128("DmSecCalcOobReq Rand", pRand);
   12966:	2210      	movs	r2, #16
   12968:	9903      	ldr	r1, [sp, #12]
   1296a:	482d      	ldr	r0, [pc, #180]	; (12a20 <DmSecCalcOobReq+0xcc>)
   1296c:	f7fd fb7e 	bl	1006c <smpLogByteArray>

  if ((dmSecOobRand = WsfBufAlloc(SMP_RAND_LEN)) != NULL)
   12970:	2010      	movs	r0, #16
   12972:	f005 fce3 	bl	1833c <WsfBufAlloc>
   12976:	4602      	mov	r2, r0
   12978:	4b2a      	ldr	r3, [pc, #168]	; (12a24 <DmSecCalcOobReq+0xd0>)
   1297a:	601a      	str	r2, [r3, #0]
   1297c:	4b29      	ldr	r3, [pc, #164]	; (12a24 <DmSecCalcOobReq+0xd0>)
   1297e:	681b      	ldr	r3, [r3, #0]
   12980:	2b00      	cmp	r3, #0
   12982:	d035      	beq.n	129f0 <DmSecCalcOobReq+0x9c>
  {
    /* Store the random value */
    Calc128Cpy(dmSecOobRand, pRand);
   12984:	4b27      	ldr	r3, [pc, #156]	; (12a24 <DmSecCalcOobReq+0xd0>)
   12986:	681b      	ldr	r3, [r3, #0]
   12988:	9903      	ldr	r1, [sp, #12]
   1298a:	4618      	mov	r0, r3
   1298c:	f008 fce1 	bl	1b352 <Calc128Cpy>

    /* Cnf = f4(PKx, PKx, rand, 0x00) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
    if ((pCmacText = (uint8_t*) WsfBufAlloc(SMP_F4_TEXT_LEN)) !=  NULL)
   12990:	2041      	movs	r0, #65	; 0x41
   12992:	f005 fcd3 	bl	1833c <WsfBufAlloc>
   12996:	900f      	str	r0, [sp, #60]	; 0x3c
   12998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1299a:	2b00      	cmp	r3, #0
   1299c:	d023      	beq.n	129e6 <DmSecCalcOobReq+0x92>
    {
      uint8_t *pCatBuf = pCmacText;
   1299e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   129a0:	930e      	str	r3, [sp, #56]	; 0x38

      /* Concatinate PKx, PKx, 0x00 */
      pCatBuf = SmpScCat(pCatBuf, pPubKeyX, SMP_PUB_KEY_LEN);
   129a2:	2220      	movs	r2, #32
   129a4:	9902      	ldr	r1, [sp, #8]
   129a6:	980e      	ldr	r0, [sp, #56]	; 0x38
   129a8:	f7fd f944 	bl	fc34 <SmpScCat>
   129ac:	900e      	str	r0, [sp, #56]	; 0x38
      pCatBuf = SmpScCat(pCatBuf, pPubKeyX, SMP_PUB_KEY_LEN);
   129ae:	2220      	movs	r2, #32
   129b0:	9902      	ldr	r1, [sp, #8]
   129b2:	980e      	ldr	r0, [sp, #56]	; 0x38
   129b4:	f7fd f93e 	bl	fc34 <SmpScCat>
   129b8:	900e      	str	r0, [sp, #56]	; 0x38
      *pCatBuf = 0;
   129ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   129bc:	2200      	movs	r2, #0
   129be:	701a      	strb	r2, [r3, #0]

      /* Execute CMAC with rand as the key */
      if (SecCmac(dmSecOobRand, pCmacText, SMP_F4_TEXT_LEN, dmCb.handlerId, 0, DM_SEC_MSG_CALC_OOB_CNF))
   129c0:	4b18      	ldr	r3, [pc, #96]	; (12a24 <DmSecCalcOobReq+0xd0>)
   129c2:	6818      	ldr	r0, [r3, #0]
   129c4:	4b18      	ldr	r3, [pc, #96]	; (12a28 <DmSecCalcOobReq+0xd4>)
   129c6:	7b1a      	ldrb	r2, [r3, #12]
   129c8:	2380      	movs	r3, #128	; 0x80
   129ca:	9301      	str	r3, [sp, #4]
   129cc:	2300      	movs	r3, #0
   129ce:	9300      	str	r3, [sp, #0]
   129d0:	4613      	mov	r3, r2
   129d2:	2241      	movs	r2, #65	; 0x41
   129d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   129d6:	f000 fb31 	bl	1303c <SecCmac>
   129da:	4603      	mov	r3, r0
   129dc:	2b00      	cmp	r3, #0
   129de:	d119      	bne.n	12a14 <DmSecCalcOobReq+0xc0>
      {
        return;
      }

      WsfBufFree(pCmacText);
   129e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   129e2:	f005 fcf1 	bl	183c8 <WsfBufFree>
    }

    WsfBufFree(dmSecOobRand);
   129e6:	4b0f      	ldr	r3, [pc, #60]	; (12a24 <DmSecCalcOobReq+0xd0>)
   129e8:	681b      	ldr	r3, [r3, #0]
   129ea:	4618      	mov	r0, r3
   129ec:	f005 fcec 	bl	183c8 <WsfBufFree>
  }

  /* Notify the application of a failure */
  memset(&pEvt, 0, sizeof(dmSecOobCalcIndEvt_t));
   129f0:	ab05      	add	r3, sp, #20
   129f2:	2224      	movs	r2, #36	; 0x24
   129f4:	2100      	movs	r1, #0
   129f6:	4618      	mov	r0, r3
   129f8:	f7f9 fc4c 	bl	c294 <memset>

  pEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   129fc:	2333      	movs	r3, #51	; 0x33
   129fe:	f88d 3016 	strb.w	r3, [sp, #22]
  pEvt.hdr.status = HCI_ERR_MEMORY_EXCEEDED;
   12a02:	2307      	movs	r3, #7
   12a04:	f88d 3017 	strb.w	r3, [sp, #23]

  (*dmCb.cback)((dmEvt_t *) &pEvt);
   12a08:	4b07      	ldr	r3, [pc, #28]	; (12a28 <DmSecCalcOobReq+0xd4>)
   12a0a:	689b      	ldr	r3, [r3, #8]
   12a0c:	aa05      	add	r2, sp, #20
   12a0e:	4610      	mov	r0, r2
   12a10:	4798      	blx	r3
   12a12:	e000      	b.n	12a16 <DmSecCalcOobReq+0xc2>
        return;
   12a14:	bf00      	nop
}
   12a16:	b011      	add	sp, #68	; 0x44
   12a18:	f85d fb04 	ldr.w	pc, [sp], #4
   12a1c:	00028734 	.word	0x00028734
   12a20:	00028748 	.word	0x00028748
   12a24:	1000360c 	.word	0x1000360c
   12a28:	10008a50 	.word	0x10008a50

00012a2c <DmSecGenerateEccKeyReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecGenerateEccKeyReq()
{
   12a2c:	b508      	push	{r3, lr}
  SecEccGenKey(dmCb.handlerId, 0, DM_SEC_MSG_ECC_KEY_CNF);
   12a2e:	4b04      	ldr	r3, [pc, #16]	; (12a40 <DmSecGenerateEccKeyReq+0x14>)
   12a30:	7b1b      	ldrb	r3, [r3, #12]
   12a32:	2281      	movs	r2, #129	; 0x81
   12a34:	2100      	movs	r1, #0
   12a36:	4618      	mov	r0, r3
   12a38:	f00a f89d 	bl	1cb76 <SecEccGenKey>
}
   12a3c:	bf00      	nop
   12a3e:	bd08      	pop	{r3, pc}
   12a40:	10008a50 	.word	0x10008a50

00012a44 <DmSecSetEccKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSetEccKey(secEccKey_t *pKey)
{
   12a44:	b500      	push	{lr}
   12a46:	b083      	sub	sp, #12
   12a48:	9001      	str	r0, [sp, #4]
  memcpy(&localEccKey, pKey, sizeof(secEccKey_t));
   12a4a:	4a06      	ldr	r2, [pc, #24]	; (12a64 <DmSecSetEccKey+0x20>)
   12a4c:	9b01      	ldr	r3, [sp, #4]
   12a4e:	4610      	mov	r0, r2
   12a50:	4619      	mov	r1, r3
   12a52:	2360      	movs	r3, #96	; 0x60
   12a54:	461a      	mov	r2, r3
   12a56:	f7f9 fb83 	bl	c160 <memcpy>
}
   12a5a:	bf00      	nop
   12a5c:	b003      	add	sp, #12
   12a5e:	f85d fb04 	ldr.w	pc, [sp], #4
   12a62:	bf00      	nop
   12a64:	10003610 	.word	0x10003610

00012a68 <DmSecGetEccKey>:
 *  \return Pointer to local ECC key.
 */
/*************************************************************************************************/
secEccKey_t *DmSecGetEccKey(void)
{
  return &localEccKey;
   12a68:	4b01      	ldr	r3, [pc, #4]	; (12a70 <DmSecGetEccKey+0x8>)
}
   12a6a:	4618      	mov	r0, r3
   12a6c:	4770      	bx	lr
   12a6e:	bf00      	nop
   12a70:	10003610 	.word	0x10003610

00012a74 <DmSecCompareRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecCompareRsp(dmConnId_t connId, bool_t valid)
{
   12a74:	b500      	push	{lr}
   12a76:	b085      	sub	sp, #20
   12a78:	4603      	mov	r3, r0
   12a7a:	460a      	mov	r2, r1
   12a7c:	f88d 3007 	strb.w	r3, [sp, #7]
   12a80:	4613      	mov	r3, r2
   12a82:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmMsg_t))) != NULL)
   12a86:	2016      	movs	r0, #22
   12a88:	f005 fcf3 	bl	18472 <WsfMsgAlloc>
   12a8c:	9003      	str	r0, [sp, #12]
   12a8e:	9b03      	ldr	r3, [sp, #12]
   12a90:	2b00      	cmp	r3, #0
   12a92:	d016      	beq.n	12ac2 <DmSecCompareRsp+0x4e>
  {
    /* Execution an an SMP state machine event to send the compare response */
    pMsg->hdr.param = connId;
   12a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a98:	b29a      	uxth	r2, r3
   12a9a:	9b03      	ldr	r3, [sp, #12]
   12a9c:	801a      	strh	r2, [r3, #0]

    if (valid)
   12a9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   12aa2:	2b00      	cmp	r3, #0
   12aa4:	d003      	beq.n	12aae <DmSecCompareRsp+0x3a>
    {
      pMsg->hdr.event = SMP_MSG_API_USER_CONFIRM;
   12aa6:	9b03      	ldr	r3, [sp, #12]
   12aa8:	2216      	movs	r2, #22
   12aaa:	709a      	strb	r2, [r3, #2]
   12aac:	e006      	b.n	12abc <DmSecCompareRsp+0x48>
    }
    else
    {
      SmpScGetCancelMsgWithReattempt(connId, (wsfMsgHdr_t *) pMsg, SMP_ERR_NUMERIC_COMPARISON);
   12aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ab2:	220c      	movs	r2, #12
   12ab4:	9903      	ldr	r1, [sp, #12]
   12ab6:	4618      	mov	r0, r3
   12ab8:	f7fd fa80 	bl	ffbc <SmpScGetCancelMsgWithReattempt>
    }

    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   12abc:	9803      	ldr	r0, [sp, #12]
   12abe:	f7fb fea7 	bl	e810 <SmpDmMsgSend>
  }
}
   12ac2:	bf00      	nop
   12ac4:	b005      	add	sp, #20
   12ac6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00012acc <DmSecGetCompareValue>:
 *
 *  \return Six-digit compare value.
 */
/*************************************************************************************************/
uint32_t DmSecGetCompareValue(uint8_t *pConfirm)
{
   12acc:	b084      	sub	sp, #16
   12ace:	9001      	str	r0, [sp, #4]
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   12ad0:	9b01      	ldr	r3, [sp, #4]
   12ad2:	330f      	adds	r3, #15
   12ad4:	781b      	ldrb	r3, [r3, #0]
   12ad6:	461a      	mov	r2, r3
                     ((uint32_t) pConfirm[14] << 8)  +
   12ad8:	9b01      	ldr	r3, [sp, #4]
   12ada:	330e      	adds	r3, #14
   12adc:	781b      	ldrb	r3, [r3, #0]
   12ade:	021b      	lsls	r3, r3, #8
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   12ae0:	441a      	add	r2, r3
                     ((uint32_t) pConfirm[13] << 16) +
   12ae2:	9b01      	ldr	r3, [sp, #4]
   12ae4:	330d      	adds	r3, #13
   12ae6:	781b      	ldrb	r3, [r3, #0]
   12ae8:	041b      	lsls	r3, r3, #16
                     ((uint32_t) pConfirm[14] << 8)  +
   12aea:	441a      	add	r2, r3
                     ((uint32_t) pConfirm[12] << 24));
   12aec:	9b01      	ldr	r3, [sp, #4]
   12aee:	330c      	adds	r3, #12
   12af0:	781b      	ldrb	r3, [r3, #0]
   12af2:	061b      	lsls	r3, r3, #24
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   12af4:	4413      	add	r3, r2
   12af6:	9303      	str	r3, [sp, #12]

  /* return the least significant six digits */
  return compare % 1000000;
   12af8:	9a03      	ldr	r2, [sp, #12]
   12afa:	4b05      	ldr	r3, [pc, #20]	; (12b10 <DmSecGetCompareValue+0x44>)
   12afc:	fba3 1302 	umull	r1, r3, r3, r2
   12b00:	0c9b      	lsrs	r3, r3, #18
   12b02:	4904      	ldr	r1, [pc, #16]	; (12b14 <DmSecGetCompareValue+0x48>)
   12b04:	fb01 f303 	mul.w	r3, r1, r3
   12b08:	1ad3      	subs	r3, r2, r3
}
   12b0a:	4618      	mov	r0, r3
   12b0c:	b004      	add	sp, #16
   12b0e:	4770      	bx	lr
   12b10:	431bde83 	.word	0x431bde83
   12b14:	000f4240 	.word	0x000f4240

00012b18 <DmSecLescInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLescInit(void)
{
  dmFcnIfTbl[DM_ID_LESC] = (dmFcnIf_t *) &dmSecLescFcnIf;
   12b18:	4b02      	ldr	r3, [pc, #8]	; (12b24 <DmSecLescInit+0xc>)
   12b1a:	4a03      	ldr	r2, [pc, #12]	; (12b28 <DmSecLescInit+0x10>)
   12b1c:	621a      	str	r2, [r3, #32]
}
   12b1e:	bf00      	nop
   12b20:	4770      	bx	lr
   12b22:	bf00      	nop
   12b24:	10002b00 	.word	0x10002b00
   12b28:	000298cc 	.word	0x000298cc

00012b2c <DmSecPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecPairRsp(dmConnId_t connId, uint8_t oob, uint8_t auth, uint8_t iKeyDist, uint8_t rKeyDist)
{
   12b2c:	b510      	push	{r4, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	4604      	mov	r4, r0
   12b32:	4608      	mov	r0, r1
   12b34:	4611      	mov	r1, r2
   12b36:	461a      	mov	r2, r3
   12b38:	4623      	mov	r3, r4
   12b3a:	f88d 3007 	strb.w	r3, [sp, #7]
   12b3e:	4603      	mov	r3, r0
   12b40:	f88d 3006 	strb.w	r3, [sp, #6]
   12b44:	460b      	mov	r3, r1
   12b46:	f88d 3005 	strb.w	r3, [sp, #5]
   12b4a:	4613      	mov	r3, r2
   12b4c:	f88d 3004 	strb.w	r3, [sp, #4]
  smpDmPair_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
   12b50:	2008      	movs	r0, #8
   12b52:	f005 fc8e 	bl	18472 <WsfMsgAlloc>
   12b56:	9003      	str	r0, [sp, #12]
   12b58:	9b03      	ldr	r3, [sp, #12]
   12b5a:	2b00      	cmp	r3, #0
   12b5c:	d020      	beq.n	12ba0 <DmSecPairRsp+0x74>
  {
    pMsg->hdr.event = SMP_MSG_API_PAIR_RSP;
   12b5e:	9b03      	ldr	r3, [sp, #12]
   12b60:	2202      	movs	r2, #2
   12b62:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   12b64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b68:	b29a      	uxth	r2, r3
   12b6a:	9b03      	ldr	r3, [sp, #12]
   12b6c:	801a      	strh	r2, [r3, #0]
    pMsg->oob = oob;
   12b6e:	9b03      	ldr	r3, [sp, #12]
   12b70:	f89d 2006 	ldrb.w	r2, [sp, #6]
   12b74:	711a      	strb	r2, [r3, #4]
    pMsg->auth = auth;
   12b76:	9b03      	ldr	r3, [sp, #12]
   12b78:	f89d 2005 	ldrb.w	r2, [sp, #5]
   12b7c:	715a      	strb	r2, [r3, #5]

    /* clear any erroneous key dist bits set by app */
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
   12b7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12b82:	f003 0307 	and.w	r3, r3, #7
   12b86:	b2da      	uxtb	r2, r3
   12b88:	9b03      	ldr	r3, [sp, #12]
   12b8a:	719a      	strb	r2, [r3, #6]
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
   12b8c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12b90:	f003 0307 	and.w	r3, r3, #7
   12b94:	b2da      	uxtb	r2, r3
   12b96:	9b03      	ldr	r3, [sp, #12]
   12b98:	71da      	strb	r2, [r3, #7]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   12b9a:	9803      	ldr	r0, [sp, #12]
   12b9c:	f7fb fe38 	bl	e810 <SmpDmMsgSend>
  }
}
   12ba0:	bf00      	nop
   12ba2:	b004      	add	sp, #16
   12ba4:	bd10      	pop	{r4, pc}

00012ba6 <DmSecSlaveReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSlaveReq(dmConnId_t connId, uint8_t auth)
{
   12ba6:	b500      	push	{lr}
   12ba8:	b085      	sub	sp, #20
   12baa:	4603      	mov	r3, r0
   12bac:	460a      	mov	r2, r1
   12bae:	f88d 3007 	strb.w	r3, [sp, #7]
   12bb2:	4613      	mov	r3, r2
   12bb4:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmSecurityReq_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmSecurityReq_t))) != NULL)
   12bb8:	2006      	movs	r0, #6
   12bba:	f005 fc5a 	bl	18472 <WsfMsgAlloc>
   12bbe:	9003      	str	r0, [sp, #12]
   12bc0:	9b03      	ldr	r3, [sp, #12]
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	d00e      	beq.n	12be4 <DmSecSlaveReq+0x3e>
  {
    pMsg->hdr.event = SMP_MSG_API_SECURITY_REQ;
   12bc6:	9b03      	ldr	r3, [sp, #12]
   12bc8:	2205      	movs	r2, #5
   12bca:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   12bcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bd0:	b29a      	uxth	r2, r3
   12bd2:	9b03      	ldr	r3, [sp, #12]
   12bd4:	801a      	strh	r2, [r3, #0]
    pMsg->auth = auth;
   12bd6:	9b03      	ldr	r3, [sp, #12]
   12bd8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   12bdc:	711a      	strb	r2, [r3, #4]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   12bde:	9803      	ldr	r0, [sp, #12]
   12be0:	f7fb fe16 	bl	e810 <SmpDmMsgSend>
  }
}
   12be4:	bf00      	nop
   12be6:	b005      	add	sp, #20
   12be8:	f85d fb04 	ldr.w	pc, [sp], #4

00012bec <DmSecLtkRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLtkRsp(dmConnId_t connId, bool_t keyFound, uint8_t secLevel, uint8_t *pKey)
{
   12bec:	b500      	push	{lr}
   12bee:	b085      	sub	sp, #20
   12bf0:	9300      	str	r3, [sp, #0]
   12bf2:	4603      	mov	r3, r0
   12bf4:	f88d 3007 	strb.w	r3, [sp, #7]
   12bf8:	460b      	mov	r3, r1
   12bfa:	f88d 3006 	strb.w	r3, [sp, #6]
   12bfe:	4613      	mov	r3, r2
   12c00:	f88d 3005 	strb.w	r3, [sp, #5]
  dmSecApiLtkRsp_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiLtkRsp_t))) != NULL)
   12c04:	2016      	movs	r0, #22
   12c06:	f005 fc34 	bl	18472 <WsfMsgAlloc>
   12c0a:	9003      	str	r0, [sp, #12]
   12c0c:	9b03      	ldr	r3, [sp, #12]
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d01f      	beq.n	12c52 <DmSecLtkRsp+0x66>
  {
    pMsg->hdr.event = DM_SEC_MSG_API_LTK_RSP;
   12c12:	9b03      	ldr	r3, [sp, #12]
   12c14:	2251      	movs	r2, #81	; 0x51
   12c16:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   12c18:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c1c:	b29a      	uxth	r2, r3
   12c1e:	9b03      	ldr	r3, [sp, #12]
   12c20:	801a      	strh	r2, [r3, #0]
    pMsg->keyFound = keyFound;
   12c22:	9b03      	ldr	r3, [sp, #12]
   12c24:	f89d 2006 	ldrb.w	r2, [sp, #6]
   12c28:	751a      	strb	r2, [r3, #20]
    pMsg->secLevel = secLevel;
   12c2a:	9b03      	ldr	r3, [sp, #12]
   12c2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   12c30:	755a      	strb	r2, [r3, #21]
    if (keyFound)
   12c32:	f89d 3006 	ldrb.w	r3, [sp, #6]
   12c36:	2b00      	cmp	r3, #0
   12c38:	d005      	beq.n	12c46 <DmSecLtkRsp+0x5a>
    {
      Calc128Cpy(pMsg->key, pKey);
   12c3a:	9b03      	ldr	r3, [sp, #12]
   12c3c:	3304      	adds	r3, #4
   12c3e:	9900      	ldr	r1, [sp, #0]
   12c40:	4618      	mov	r0, r3
   12c42:	f008 fb86 	bl	1b352 <Calc128Cpy>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   12c46:	4b05      	ldr	r3, [pc, #20]	; (12c5c <DmSecLtkRsp+0x70>)
   12c48:	7b1b      	ldrb	r3, [r3, #12]
   12c4a:	9903      	ldr	r1, [sp, #12]
   12c4c:	4618      	mov	r0, r3
   12c4e:	f005 fc34 	bl	184ba <WsfMsgSend>
  }
}
   12c52:	bf00      	nop
   12c54:	b005      	add	sp, #20
   12c56:	f85d fb04 	ldr.w	pc, [sp], #4
   12c5a:	bf00      	nop
   12c5c:	10008a50 	.word	0x10008a50

00012c60 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   12c60:	b082      	sub	sp, #8
  uint8_t token = secCb.token++;
   12c62:	4b0e      	ldr	r3, [pc, #56]	; (12c9c <getNextToken+0x3c>)
   12c64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12c68:	1c5a      	adds	r2, r3, #1
   12c6a:	b2d1      	uxtb	r1, r2
   12c6c:	4a0b      	ldr	r2, [pc, #44]	; (12c9c <getNextToken+0x3c>)
   12c6e:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   12c72:	f88d 3007 	strb.w	r3, [sp, #7]

  if (token == SEC_TOKEN_INVALID)
   12c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c7a:	2bff      	cmp	r3, #255	; 0xff
   12c7c:	d109      	bne.n	12c92 <getNextToken+0x32>
  {
    token = secCb.token++;
   12c7e:	4b07      	ldr	r3, [pc, #28]	; (12c9c <getNextToken+0x3c>)
   12c80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12c84:	1c5a      	adds	r2, r3, #1
   12c86:	b2d1      	uxtb	r1, r2
   12c88:	4a04      	ldr	r2, [pc, #16]	; (12c9c <getNextToken+0x3c>)
   12c8a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   12c8e:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return token;
   12c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
   12c96:	4618      	mov	r0, r3
   12c98:	b002      	add	sp, #8
   12c9a:	4770      	bx	lr
   12c9c:	10008a8c 	.word	0x10008a8c

00012ca0 <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   12ca0:	b500      	push	{lr}
   12ca2:	b087      	sub	sp, #28
   12ca4:	9003      	str	r0, [sp, #12]
   12ca6:	9102      	str	r1, [sp, #8]
   12ca8:	4611      	mov	r1, r2
   12caa:	461a      	mov	r2, r3
   12cac:	460b      	mov	r3, r1
   12cae:	f88d 3007 	strb.w	r3, [sp, #7]
   12cb2:	4613      	mov	r3, r2
   12cb4:	f8ad 3004 	strh.w	r3, [sp, #4]
  secQueueBuf_t  *pBuf;

  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   12cb8:	2038      	movs	r0, #56	; 0x38
   12cba:	f005 fbda 	bl	18472 <WsfMsgAlloc>
   12cbe:	9005      	str	r0, [sp, #20]
   12cc0:	9b05      	ldr	r3, [sp, #20]
   12cc2:	2b00      	cmp	r3, #0
   12cc4:	d01f      	beq.n	12d06 <SecAes+0x66>
  {
    pBuf->msg.hdr.status = getNextToken();
   12cc6:	f7ff ffcb 	bl	12c60 <getNextToken>
   12cca:	4603      	mov	r3, r0
   12ccc:	461a      	mov	r2, r3
   12cce:	9b05      	ldr	r3, [sp, #20]
   12cd0:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   12cd2:	9b05      	ldr	r3, [sp, #20]
   12cd4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   12cd8:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   12cda:	9b05      	ldr	r3, [sp, #20]
   12cdc:	f89d 2020 	ldrb.w	r2, [sp, #32]
   12ce0:	709a      	strb	r2, [r3, #2]

    pBuf->type = SEC_TYPE_AES;
   12ce2:	9b05      	ldr	r3, [sp, #20]
   12ce4:	2200      	movs	r2, #0
   12ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* queue buffer */
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   12cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12cee:	9a05      	ldr	r2, [sp, #20]
   12cf0:	4619      	mov	r1, r3
   12cf2:	4807      	ldr	r0, [pc, #28]	; (12d10 <SecAes+0x70>)
   12cf4:	f005 fbfc 	bl	184f0 <WsfMsgEnq>

    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   12cf8:	9902      	ldr	r1, [sp, #8]
   12cfa:	9803      	ldr	r0, [sp, #12]
   12cfc:	f00a fa8b 	bl	1d216 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   12d00:	9b05      	ldr	r3, [sp, #20]
   12d02:	78db      	ldrb	r3, [r3, #3]
   12d04:	e000      	b.n	12d08 <SecAes+0x68>
  }

  return SEC_TOKEN_INVALID;
   12d06:	23ff      	movs	r3, #255	; 0xff
}
   12d08:	4618      	mov	r0, r3
   12d0a:	b007      	add	sp, #28
   12d0c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d10:	10008aac 	.word	0x10008aac

00012d14 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   12d14:	b500      	push	{lr}
   12d16:	b087      	sub	sp, #28
   12d18:	9003      	str	r0, [sp, #12]
   12d1a:	9102      	str	r1, [sp, #8]
   12d1c:	4613      	mov	r3, r2
   12d1e:	f88d 3007 	strb.w	r3, [sp, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   12d22:	9b03      	ldr	r3, [sp, #12]
   12d24:	9305      	str	r3, [sp, #20]

  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   12d26:	9b03      	ldr	r3, [sp, #12]
   12d28:	f103 0210 	add.w	r2, r3, #16
   12d2c:	9b05      	ldr	r3, [sp, #20]
   12d2e:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   12d30:	9b05      	ldr	r3, [sp, #20]
   12d32:	685a      	ldr	r2, [r3, #4]
   12d34:	9b02      	ldr	r3, [sp, #8]
   12d36:	3305      	adds	r3, #5
   12d38:	4619      	mov	r1, r3
   12d3a:	4610      	mov	r0, r2
   12d3c:	f008 fb09 	bl	1b352 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   12d40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12d44:	9905      	ldr	r1, [sp, #20]
   12d46:	4618      	mov	r0, r3
   12d48:	f005 fbb7 	bl	184ba <WsfMsgSend>
}
   12d4c:	bf00      	nop
   12d4e:	b007      	add	sp, #28
   12d50:	f85d fb04 	ldr.w	pc, [sp], #4

00012d54 <SecAesInit>:
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   12d54:	4b02      	ldr	r3, [pc, #8]	; (12d60 <SecAesInit+0xc>)
   12d56:	4a03      	ldr	r2, [pc, #12]	; (12d64 <SecAesInit+0x10>)
   12d58:	63da      	str	r2, [r3, #60]	; 0x3c
}
   12d5a:	bf00      	nop
   12d5c:	4770      	bx	lr
   12d5e:	bf00      	nop
   12d60:	10008a8c 	.word	0x10008a8c
   12d64:	00012d15 	.word	0x00012d15

00012d68 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   12d68:	b500      	push	{lr}
   12d6a:	b08b      	sub	sp, #44	; 0x2c
   12d6c:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   12d6e:	9b01      	ldr	r3, [sp, #4]
   12d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12d72:	9309      	str	r3, [sp, #36]	; 0x24
  uint8_t text[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   12d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d76:	681b      	ldr	r3, [r3, #0]
   12d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12d7a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12d7c:	4413      	add	r3, r2
   12d7e:	9308      	str	r3, [sp, #32]
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   12d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d82:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   12d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12d88:	1ad3      	subs	r3, r2, r3
   12d8a:	b29b      	uxth	r3, r3
   12d8c:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   12d90:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   12d94:	2b10      	cmp	r3, #16
   12d96:	dc2a      	bgt.n	12dee <secCmacProcessBlock+0x86>
  {
    memcpy(text, pMn, remaining);
   12d98:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
   12d9c:	ab03      	add	r3, sp, #12
   12d9e:	9908      	ldr	r1, [sp, #32]
   12da0:	4618      	mov	r0, r3
   12da2:	f7f9 f9dd 	bl	c160 <memcpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   12da6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   12daa:	2b10      	cmp	r3, #16
   12dac:	d012      	beq.n	12dd4 <secCmacProcessBlock+0x6c>
    {
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
   12dae:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   12db2:	aa03      	add	r2, sp, #12
   12db4:	18d0      	adds	r0, r2, r3
   12db6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   12dba:	f1c3 0310 	rsb	r3, r3, #16
   12dbe:	461a      	mov	r2, r3
   12dc0:	2100      	movs	r1, #0
   12dc2:	f7f9 fa67 	bl	c294 <memset>
      text[remaining] = 0x80;
   12dc6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   12dca:	aa0a      	add	r2, sp, #40	; 0x28
   12dcc:	4413      	add	r3, r2
   12dce:	2280      	movs	r2, #128	; 0x80
   12dd0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(text, pCmac->subkey);
   12dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12dd6:	f103 0214 	add.w	r2, r3, #20
   12dda:	ab03      	add	r3, sp, #12
   12ddc:	4611      	mov	r1, r2
   12dde:	4618      	mov	r0, r3
   12de0:	f008 fad1 	bl	1b386 <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   12de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12de6:	2202      	movs	r2, #2
   12de8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   12dec:	e004      	b.n	12df8 <secCmacProcessBlock+0x90>
  }
  else
  {
    /* Copy the block to the buffer */
    Calc128Cpy(text, pMn);
   12dee:	ab03      	add	r3, sp, #12
   12df0:	9908      	ldr	r1, [sp, #32]
   12df2:	4618      	mov	r0, r3
   12df4:	f008 faad 	bl	1b352 <Calc128Cpy>
  }

  if (pCmac->position != 0)
   12df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12dfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12dfc:	2b00      	cmp	r3, #0
   12dfe:	d007      	beq.n	12e10 <secCmacProcessBlock+0xa8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(text, pBuf->ciphertext);
   12e00:	9b01      	ldr	r3, [sp, #4]
   12e02:	f103 0210 	add.w	r2, r3, #16
   12e06:	ab03      	add	r3, sp, #12
   12e08:	4611      	mov	r1, r2
   12e0a:	4618      	mov	r0, r3
   12e0c:	f008 fabb 	bl	1b386 <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   12e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12e14:	3310      	adds	r3, #16
   12e16:	b29a      	uxth	r2, r3
   12e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e1a:	849a      	strh	r2, [r3, #36]	; 0x24

  SecLeEncryptCmd(pCmac->key, text, pBuf, pCmac->handlerId);
   12e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e1e:	1d18      	adds	r0, r3, #4
   12e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   12e26:	a903      	add	r1, sp, #12
   12e28:	9a01      	ldr	r2, [sp, #4]
   12e2a:	f000 fa6d 	bl	13308 <SecLeEncryptCmd>
}
   12e2e:	bf00      	nop
   12e30:	b00b      	add	sp, #44	; 0x2c
   12e32:	f85d fb04 	ldr.w	pc, [sp], #4

00012e36 <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   12e36:	b500      	push	{lr}
   12e38:	b089      	sub	sp, #36	; 0x24
   12e3a:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   12e3c:	9b01      	ldr	r3, [sp, #4]
   12e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12e40:	9307      	str	r3, [sp, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   12e42:	ab03      	add	r3, sp, #12
   12e44:	2210      	movs	r2, #16
   12e46:	2100      	movs	r1, #0
   12e48:	4618      	mov	r0, r3
   12e4a:	f7f9 fa23 	bl	c294 <memset>

  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   12e4e:	9b07      	ldr	r3, [sp, #28]
   12e50:	1d18      	adds	r0, r3, #4
   12e52:	9b07      	ldr	r3, [sp, #28]
   12e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   12e58:	a903      	add	r1, sp, #12
   12e5a:	9a01      	ldr	r2, [sp, #4]
   12e5c:	f000 fa54 	bl	13308 <SecLeEncryptCmd>
}
   12e60:	bf00      	nop
   12e62:	b009      	add	sp, #36	; 0x24
   12e64:	f85d fb04 	ldr.w	pc, [sp], #4

00012e68 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   12e68:	b084      	sub	sp, #16
   12e6a:	9001      	str	r0, [sp, #4]
   12e6c:	460b      	mov	r3, r1
   12e6e:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t overflow, i;
  uint8_t finalOverflow = pBuf[0] >> (8 - shift);
   12e72:	9b01      	ldr	r3, [sp, #4]
   12e74:	781b      	ldrb	r3, [r3, #0]
   12e76:	461a      	mov	r2, r3
   12e78:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12e7c:	f1c3 0308 	rsb	r3, r3, #8
   12e80:	fa42 f303 	asr.w	r3, r2, r3
   12e84:	f88d 300d 	strb.w	r3, [sp, #13]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   12e88:	2300      	movs	r3, #0
   12e8a:	f88d 300e 	strb.w	r3, [sp, #14]
   12e8e:	e030      	b.n	12ef2 <secCmacKeyShift+0x8a>
  {
    /* store shifted bits for next byte */
    if (i < SEC_CMAC_KEY_LEN-1)
   12e90:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12e94:	2b0e      	cmp	r3, #14
   12e96:	d80f      	bhi.n	12eb8 <secCmacKeyShift+0x50>
    {
      overflow = pBuf[i+1] >> (8 - shift);
   12e98:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12e9c:	3301      	adds	r3, #1
   12e9e:	9a01      	ldr	r2, [sp, #4]
   12ea0:	4413      	add	r3, r2
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	461a      	mov	r2, r3
   12ea6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12eaa:	f1c3 0308 	rsb	r3, r3, #8
   12eae:	fa42 f303 	asr.w	r3, r2, r3
   12eb2:	f88d 300f 	strb.w	r3, [sp, #15]
   12eb6:	e002      	b.n	12ebe <secCmacKeyShift+0x56>
    }
    else
    {
      overflow = 0;
   12eb8:	2300      	movs	r3, #0
   12eba:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | overflow;
   12ebe:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12ec2:	9a01      	ldr	r2, [sp, #4]
   12ec4:	4413      	add	r3, r2
   12ec6:	f89d 200e 	ldrb.w	r2, [sp, #14]
   12eca:	9901      	ldr	r1, [sp, #4]
   12ecc:	440a      	add	r2, r1
   12ece:	7812      	ldrb	r2, [r2, #0]
   12ed0:	4611      	mov	r1, r2
   12ed2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   12ed6:	fa01 f202 	lsl.w	r2, r1, r2
   12eda:	b251      	sxtb	r1, r2
   12edc:	f99d 200f 	ldrsb.w	r2, [sp, #15]
   12ee0:	430a      	orrs	r2, r1
   12ee2:	b252      	sxtb	r2, r2
   12ee4:	b2d2      	uxtb	r2, r2
   12ee6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   12ee8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12eec:	3301      	adds	r3, #1
   12eee:	f88d 300e 	strb.w	r3, [sp, #14]
   12ef2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12ef6:	2b0f      	cmp	r3, #15
   12ef8:	d9ca      	bls.n	12e90 <secCmacKeyShift+0x28>
  }

  return finalOverflow;
   12efa:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
   12efe:	4618      	mov	r0, r3
   12f00:	b004      	add	sp, #16
   12f02:	4770      	bx	lr

00012f04 <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   12f04:	b500      	push	{lr}
   12f06:	b085      	sub	sp, #20
   12f08:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   12f0a:	9b01      	ldr	r3, [sp, #4]
   12f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12f0e:	9303      	str	r3, [sp, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   12f10:	9b03      	ldr	r3, [sp, #12]
   12f12:	f103 0214 	add.w	r2, r3, #20
   12f16:	9b01      	ldr	r3, [sp, #4]
   12f18:	3310      	adds	r3, #16
   12f1a:	4619      	mov	r1, r3
   12f1c:	4610      	mov	r0, r2
   12f1e:	f008 fa18 	bl	1b352 <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   12f22:	9b03      	ldr	r3, [sp, #12]
   12f24:	3314      	adds	r3, #20
   12f26:	2101      	movs	r1, #1
   12f28:	4618      	mov	r0, r3
   12f2a:	f7ff ff9d 	bl	12e68 <secCmacKeyShift>
   12f2e:	4603      	mov	r3, r0
   12f30:	f88d 300b 	strb.w	r3, [sp, #11]

  if (overflow)
   12f34:	f89d 300b 	ldrb.w	r3, [sp, #11]
   12f38:	2b00      	cmp	r3, #0
   12f3a:	d009      	beq.n	12f50 <secCmacGenSubkey2+0x4c>
  {
    pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   12f3c:	9b03      	ldr	r3, [sp, #12]
   12f3e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   12f42:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   12f46:	43db      	mvns	r3, r3
   12f48:	b2da      	uxtb	r2, r3
   12f4a:	9b03      	ldr	r3, [sp, #12]
   12f4c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   12f50:	9b03      	ldr	r3, [sp, #12]
   12f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   12f54:	f003 030f 	and.w	r3, r3, #15
   12f58:	b29b      	uxth	r3, r3
   12f5a:	2b00      	cmp	r3, #0
   12f5c:	d016      	beq.n	12f8c <secCmacGenSubkey2+0x88>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   12f5e:	9b03      	ldr	r3, [sp, #12]
   12f60:	3314      	adds	r3, #20
   12f62:	2101      	movs	r1, #1
   12f64:	4618      	mov	r0, r3
   12f66:	f7ff ff7f 	bl	12e68 <secCmacKeyShift>
   12f6a:	4603      	mov	r3, r0
   12f6c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (overflow)
   12f70:	f89d 300b 	ldrb.w	r3, [sp, #11]
   12f74:	2b00      	cmp	r3, #0
   12f76:	d009      	beq.n	12f8c <secCmacGenSubkey2+0x88>
    {
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   12f78:	9b03      	ldr	r3, [sp, #12]
   12f7a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   12f7e:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   12f82:	43db      	mvns	r3, r3
   12f84:	b2da      	uxtb	r2, r3
   12f86:	9b03      	ldr	r3, [sp, #12]
   12f88:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   12f8c:	9b03      	ldr	r3, [sp, #12]
   12f8e:	2201      	movs	r2, #1
   12f90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   12f94:	9801      	ldr	r0, [sp, #4]
   12f96:	f7ff fee7 	bl	12d68 <secCmacProcessBlock>
}
   12f9a:	bf00      	nop
   12f9c:	b005      	add	sp, #20
   12f9e:	f85d fb04 	ldr.w	pc, [sp], #4

00012fa2 <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   12fa2:	b500      	push	{lr}
   12fa4:	b085      	sub	sp, #20
   12fa6:	9001      	str	r0, [sp, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   12fa8:	9b01      	ldr	r3, [sp, #4]
   12faa:	9303      	str	r3, [sp, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   12fac:	9b01      	ldr	r3, [sp, #4]
   12fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12fb0:	9302      	str	r3, [sp, #8]

  pMsg->pCiphertext = pBuf->ciphertext;
   12fb2:	9b01      	ldr	r3, [sp, #4]
   12fb4:	f103 0210 	add.w	r2, r3, #16
   12fb8:	9b03      	ldr	r3, [sp, #12]
   12fba:	605a      	str	r2, [r3, #4]
  pMsg->pPlainText = pCmac->pPlainText;
   12fbc:	9b02      	ldr	r3, [sp, #8]
   12fbe:	681a      	ldr	r2, [r3, #0]
   12fc0:	9b03      	ldr	r3, [sp, #12]
   12fc2:	609a      	str	r2, [r3, #8]

  WsfMsgSend(pCmac->handlerId, pMsg);
   12fc4:	9b02      	ldr	r3, [sp, #8]
   12fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   12fca:	9903      	ldr	r1, [sp, #12]
   12fcc:	4618      	mov	r0, r3
   12fce:	f005 fa74 	bl	184ba <WsfMsgSend>
}
   12fd2:	bf00      	nop
   12fd4:	b005      	add	sp, #20
   12fd6:	f85d fb04 	ldr.w	pc, [sp], #4

00012fda <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   12fda:	b500      	push	{lr}
   12fdc:	b087      	sub	sp, #28
   12fde:	9003      	str	r0, [sp, #12]
   12fe0:	9102      	str	r1, [sp, #8]
   12fe2:	4613      	mov	r3, r2
   12fe4:	f88d 3007 	strb.w	r3, [sp, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   12fe8:	9b03      	ldr	r3, [sp, #12]
   12fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12fec:	9305      	str	r3, [sp, #20]

  if (pCmac)
   12fee:	9b05      	ldr	r3, [sp, #20]
   12ff0:	2b00      	cmp	r3, #0
   12ff2:	d01e      	beq.n	13032 <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   12ff4:	9b03      	ldr	r3, [sp, #12]
   12ff6:	f103 0210 	add.w	r2, r3, #16
   12ffa:	9b02      	ldr	r3, [sp, #8]
   12ffc:	3305      	adds	r3, #5
   12ffe:	4619      	mov	r1, r3
   13000:	4610      	mov	r0, r2
   13002:	f008 f9a6 	bl	1b352 <Calc128Cpy>

    switch (pCmac->state)
   13006:	9b05      	ldr	r3, [sp, #20]
   13008:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1300c:	2b01      	cmp	r3, #1
   1300e:	d008      	beq.n	13022 <SecCmacHciCback+0x48>
   13010:	2b02      	cmp	r3, #2
   13012:	d00a      	beq.n	1302a <SecCmacHciCback+0x50>
   13014:	2b00      	cmp	r3, #0
   13016:	d000      	beq.n	1301a <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   13018:	e00b      	b.n	13032 <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
   1301a:	9803      	ldr	r0, [sp, #12]
   1301c:	f7ff ff72 	bl	12f04 <secCmacGenSubkey2>
      break;
   13020:	e007      	b.n	13032 <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
   13022:	9803      	ldr	r0, [sp, #12]
   13024:	f7ff fea0 	bl	12d68 <secCmacProcessBlock>
      break;
   13028:	e003      	b.n	13032 <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
   1302a:	9803      	ldr	r0, [sp, #12]
   1302c:	f7ff ffb9 	bl	12fa2 <secCmacComplete>
      break;
   13030:	bf00      	nop
}
   13032:	bf00      	nop
   13034:	b007      	add	sp, #28
   13036:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001303c <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint16_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   1303c:	b500      	push	{lr}
   1303e:	b089      	sub	sp, #36	; 0x24
   13040:	9003      	str	r0, [sp, #12]
   13042:	9102      	str	r1, [sp, #8]
   13044:	4611      	mov	r1, r2
   13046:	461a      	mov	r2, r3
   13048:	460b      	mov	r3, r1
   1304a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1304e:	4613      	mov	r3, r2
   13050:	f88d 3005 	strb.w	r3, [sp, #5]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   13054:	2364      	movs	r3, #100	; 0x64
   13056:	f8ad 301e 	strh.w	r3, [sp, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1305a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1305e:	4618      	mov	r0, r3
   13060:	f005 fa07 	bl	18472 <WsfMsgAlloc>
   13064:	9006      	str	r0, [sp, #24]
   13066:	9b06      	ldr	r3, [sp, #24]
   13068:	2b00      	cmp	r3, #0
   1306a:	d039      	beq.n	130e0 <SecCmac+0xa4>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   1306c:	9b06      	ldr	r3, [sp, #24]
   1306e:	3338      	adds	r3, #56	; 0x38
   13070:	9305      	str	r3, [sp, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   13072:	9b06      	ldr	r3, [sp, #24]
   13074:	9a05      	ldr	r2, [sp, #20]
   13076:	631a      	str	r2, [r3, #48]	; 0x30
    pBuf->type = SEC_TYPE_CMAC;
   13078:	9b06      	ldr	r3, [sp, #24]
   1307a:	2201      	movs	r2, #1
   1307c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    pBuf->msg.hdr.status = secCb.token++;
   13080:	4b1a      	ldr	r3, [pc, #104]	; (130ec <SecCmac+0xb0>)
   13082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13086:	1c5a      	adds	r2, r3, #1
   13088:	b2d1      	uxtb	r1, r2
   1308a:	4a18      	ldr	r2, [pc, #96]	; (130ec <SecCmac+0xb0>)
   1308c:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   13090:	9a06      	ldr	r2, [sp, #24]
   13092:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   13094:	9b06      	ldr	r3, [sp, #24]
   13096:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1309a:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1309c:	9b06      	ldr	r3, [sp, #24]
   1309e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   130a2:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   130a4:	9b05      	ldr	r3, [sp, #20]
   130a6:	9a02      	ldr	r2, [sp, #8]
   130a8:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   130aa:	9b05      	ldr	r3, [sp, #20]
   130ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   130b0:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   130b2:	9b05      	ldr	r3, [sp, #20]
   130b4:	2200      	movs	r2, #0
   130b6:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   130b8:	9b05      	ldr	r3, [sp, #20]
   130ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
   130be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   130c2:	9b05      	ldr	r3, [sp, #20]
   130c4:	2200      	movs	r2, #0
   130c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   130ca:	9b05      	ldr	r3, [sp, #20]
   130cc:	3304      	adds	r3, #4
   130ce:	9903      	ldr	r1, [sp, #12]
   130d0:	4618      	mov	r0, r3
   130d2:	f008 f93e 	bl	1b352 <Calc128Cpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   130d6:	9806      	ldr	r0, [sp, #24]
   130d8:	f7ff fead 	bl	12e36 <secCmacGenSubkey1>

    return TRUE;
   130dc:	2301      	movs	r3, #1
   130de:	e000      	b.n	130e2 <SecCmac+0xa6>
  }

  return FALSE;
   130e0:	2300      	movs	r3, #0
}
   130e2:	4618      	mov	r0, r3
   130e4:	b009      	add	sp, #36	; 0x24
   130e6:	f85d fb04 	ldr.w	pc, [sp], #4
   130ea:	bf00      	nop
   130ec:	10008a8c 	.word	0x10008a8c

000130f0 <SecCmacInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   130f0:	4b02      	ldr	r3, [pc, #8]	; (130fc <SecCmacInit+0xc>)
   130f2:	4a03      	ldr	r2, [pc, #12]	; (13100 <SecCmacInit+0x10>)
   130f4:	641a      	str	r2, [r3, #64]	; 0x40
}
   130f6:	bf00      	nop
   130f8:	4770      	bx	lr
   130fa:	bf00      	nop
   130fc:	10008a8c 	.word	0x10008a8c
   13100:	00012fdb 	.word	0x00012fdb

00013104 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   13104:	b500      	push	{lr}
   13106:	b085      	sub	sp, #20
   13108:	9001      	str	r0, [sp, #4]
  secQueueBuf_t *pBuf = NULL;
   1310a:	2300      	movs	r3, #0
   1310c:	9303      	str	r3, [sp, #12]
  wsfHandlerId_t handlerId = 0;
   1310e:	2300      	movs	r3, #0
   13110:	f88d 300b 	strb.w	r3, [sp, #11]

  /* Handle random number event. */
  switch (pEvent->hdr.event)
   13114:	9b01      	ldr	r3, [sp, #4]
   13116:	789b      	ldrb	r3, [r3, #2]
   13118:	3b1b      	subs	r3, #27
   1311a:	2b0b      	cmp	r3, #11
   1311c:	d863      	bhi.n	131e6 <secHciCback+0xe2>
   1311e:	a201      	add	r2, pc, #4	; (adr r2, 13124 <secHciCback+0x20>)
   13120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13124:	0001318d 	.word	0x0001318d
   13128:	00013155 	.word	0x00013155
   1312c:	000131e7 	.word	0x000131e7
   13130:	000131e7 	.word	0x000131e7
   13134:	000131e7 	.word	0x000131e7
   13138:	000131e7 	.word	0x000131e7
   1313c:	000131e7 	.word	0x000131e7
   13140:	000131e7 	.word	0x000131e7
   13144:	000131e7 	.word	0x000131e7
   13148:	000131e7 	.word	0x000131e7
   1314c:	000131c7 	.word	0x000131c7
   13150:	000131d7 	.word	0x000131d7
  {
  case HCI_LE_RAND_CMD_CMPL_CBACK_EVT:

    /* Copy new data to circular buffer of random data. */
    memcpy(&secCb.rand[HCI_RAND_LEN * secCb.randTop], pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   13154:	4b2f      	ldr	r3, [pc, #188]	; (13214 <secHciCback+0x110>)
   13156:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   1315a:	00db      	lsls	r3, r3, #3
   1315c:	4a2d      	ldr	r2, [pc, #180]	; (13214 <secHciCback+0x110>)
   1315e:	1898      	adds	r0, r3, r2
   13160:	9b01      	ldr	r3, [sp, #4]
   13162:	3305      	adds	r3, #5
   13164:	2208      	movs	r2, #8
   13166:	4619      	mov	r1, r3
   13168:	f7f8 fffa 	bl	c160 <memcpy>
    secCb.randTop = (secCb.randTop >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randTop + 1;
   1316c:	4b29      	ldr	r3, [pc, #164]	; (13214 <secHciCback+0x110>)
   1316e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   13172:	2b02      	cmp	r3, #2
   13174:	d805      	bhi.n	13182 <secHciCback+0x7e>
   13176:	4b27      	ldr	r3, [pc, #156]	; (13214 <secHciCback+0x110>)
   13178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   1317c:	3301      	adds	r3, #1
   1317e:	b2db      	uxtb	r3, r3
   13180:	e000      	b.n	13184 <secHciCback+0x80>
   13182:	2300      	movs	r3, #0
   13184:	4a23      	ldr	r2, [pc, #140]	; (13214 <secHciCback+0x110>)
   13186:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    break;
   1318a:	e02f      	b.n	131ec <secHciCback+0xe8>

  case HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   1318c:	f10d 030b 	add.w	r3, sp, #11
   13190:	4619      	mov	r1, r3
   13192:	4821      	ldr	r0, [pc, #132]	; (13218 <secHciCback+0x114>)
   13194:	f005 f9c2 	bl	1851c <WsfMsgDeq>
   13198:	9003      	str	r0, [sp, #12]

    WSF_ASSERT(pBuf != NULL);

    /* note: pBuf should never be NULL and is checked by assert above. */
    /* coverity[dereference] */
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   1319a:	9b03      	ldr	r3, [sp, #12]
   1319c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   131a0:	2b03      	cmp	r3, #3
   131a2:	d009      	beq.n	131b8 <secHciCback+0xb4>
   131a4:	9b03      	ldr	r3, [sp, #12]
   131a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   131aa:	2b01      	cmp	r3, #1
   131ac:	d004      	beq.n	131b8 <secHciCback+0xb4>
   131ae:	9b03      	ldr	r3, [sp, #12]
   131b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   131b4:	2b04      	cmp	r3, #4
   131b6:	d118      	bne.n	131ea <secHciCback+0xe6>
    {
      WStrReverse(pEvent->leEncryptCmdCmpl.data, HCI_ENCRYPT_DATA_LEN);
   131b8:	9b01      	ldr	r3, [sp, #4]
   131ba:	3305      	adds	r3, #5
   131bc:	2110      	movs	r1, #16
   131be:	4618      	mov	r0, r3
   131c0:	f008 f928 	bl	1b414 <WStrReverse>
    }
    break;
   131c4:	e011      	b.n	131ea <secHciCback+0xe6>

  case HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
   131c6:	f10d 030b 	add.w	r3, sp, #11
   131ca:	4619      	mov	r1, r3
   131cc:	4813      	ldr	r0, [pc, #76]	; (1321c <secHciCback+0x118>)
   131ce:	f005 f9a5 	bl	1851c <WsfMsgDeq>
   131d2:	9003      	str	r0, [sp, #12]
    break;
   131d4:	e00a      	b.n	131ec <secHciCback+0xe8>

  case HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.dhKeyQueue, &handlerId);
   131d6:	f10d 030b 	add.w	r3, sp, #11
   131da:	4619      	mov	r1, r3
   131dc:	4810      	ldr	r0, [pc, #64]	; (13220 <secHciCback+0x11c>)
   131de:	f005 f99d 	bl	1851c <WsfMsgDeq>
   131e2:	9003      	str	r0, [sp, #12]
    break;
   131e4:	e002      	b.n	131ec <secHciCback+0xe8>

  default:
    break;
   131e6:	bf00      	nop
   131e8:	e000      	b.n	131ec <secHciCback+0xe8>
    break;
   131ea:	bf00      	nop
  }

  if (pBuf)
   131ec:	9b03      	ldr	r3, [sp, #12]
   131ee:	2b00      	cmp	r3, #0
   131f0:	d00c      	beq.n	1320c <secHciCback+0x108>
  {
    WSF_ASSERT(secCb.hciCbackTbl[pBuf->type]);
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   131f2:	9b03      	ldr	r3, [sp, #12]
   131f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   131f8:	4a06      	ldr	r2, [pc, #24]	; (13214 <secHciCback+0x110>)
   131fa:	330e      	adds	r3, #14
   131fc:	009b      	lsls	r3, r3, #2
   131fe:	4413      	add	r3, r2
   13200:	685b      	ldr	r3, [r3, #4]
   13202:	f89d 200b 	ldrb.w	r2, [sp, #11]
   13206:	9901      	ldr	r1, [sp, #4]
   13208:	9803      	ldr	r0, [sp, #12]
   1320a:	4798      	blx	r3
  }
}
   1320c:	bf00      	nop
   1320e:	b005      	add	sp, #20
   13210:	f85d fb04 	ldr.w	pc, [sp], #4
   13214:	10008a8c 	.word	0x10008a8c
   13218:	10008aac 	.word	0x10008aac
   1321c:	10008ab4 	.word	0x10008ab4
   13220:	10008abc 	.word	0x10008abc

00013224 <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   13224:	b508      	push	{r3, lr}
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   13226:	4b0d      	ldr	r3, [pc, #52]	; (1325c <SecInit+0x38>)
   13228:	2200      	movs	r2, #0
   1322a:	621a      	str	r2, [r3, #32]
   1322c:	4b0b      	ldr	r3, [pc, #44]	; (1325c <SecInit+0x38>)
   1322e:	2200      	movs	r2, #0
   13230:	625a      	str	r2, [r3, #36]	; 0x24
  WSF_QUEUE_INIT(&secCb.pubKeyQueue);
   13232:	4b0a      	ldr	r3, [pc, #40]	; (1325c <SecInit+0x38>)
   13234:	2200      	movs	r2, #0
   13236:	629a      	str	r2, [r3, #40]	; 0x28
   13238:	4b08      	ldr	r3, [pc, #32]	; (1325c <SecInit+0x38>)
   1323a:	2200      	movs	r2, #0
   1323c:	62da      	str	r2, [r3, #44]	; 0x2c
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);
   1323e:	4b07      	ldr	r3, [pc, #28]	; (1325c <SecInit+0x38>)
   13240:	2200      	movs	r2, #0
   13242:	631a      	str	r2, [r3, #48]	; 0x30
   13244:	4b05      	ldr	r3, [pc, #20]	; (1325c <SecInit+0x38>)
   13246:	2200      	movs	r2, #0
   13248:	635a      	str	r2, [r3, #52]	; 0x34

  secCb.token = 0;
   1324a:	4b04      	ldr	r3, [pc, #16]	; (1325c <SecInit+0x38>)
   1324c:	2200      	movs	r2, #0
   1324e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   13252:	4803      	ldr	r0, [pc, #12]	; (13260 <SecInit+0x3c>)
   13254:	f009 fc40 	bl	1cad8 <HciSecRegister>
}
   13258:	bf00      	nop
   1325a:	bd08      	pop	{r3, pc}
   1325c:	10008a8c 	.word	0x10008a8c
   13260:	00013105 	.word	0x00013105

00013264 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   13264:	b500      	push	{lr}
   13266:	b085      	sub	sp, #20
   13268:	9001      	str	r0, [sp, #4]
   1326a:	460b      	mov	r3, r1
   1326c:	f88d 3003 	strb.w	r3, [sp, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   13270:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13274:	3307      	adds	r3, #7
   13276:	2b00      	cmp	r3, #0
   13278:	da00      	bge.n	1327c <SecRand+0x18>
   1327a:	3307      	adds	r3, #7
   1327c:	10db      	asrs	r3, r3, #3
   1327e:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   13282:	4b20      	ldr	r3, [pc, #128]	; (13304 <SecRand+0xa0>)
   13284:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13288:	00db      	lsls	r3, r3, #3
   1328a:	f88d 300e 	strb.w	r3, [sp, #14]

  WSF_ASSERT(randLen <= SEC_RAND_DATA_LEN);

  /* Copy from circular buffer of random data. */
  while (randLen--)
   1328e:	e013      	b.n	132b8 <SecRand+0x54>
  {
    *pRand++ = secCb.rand[index];
   13290:	9b01      	ldr	r3, [sp, #4]
   13292:	1c5a      	adds	r2, r3, #1
   13294:	9201      	str	r2, [sp, #4]
   13296:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1329a:	491a      	ldr	r1, [pc, #104]	; (13304 <SecRand+0xa0>)
   1329c:	5c8a      	ldrb	r2, [r1, r2]
   1329e:	701a      	strb	r2, [r3, #0]
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   132a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   132a4:	2b1f      	cmp	r3, #31
   132a6:	d004      	beq.n	132b2 <SecRand+0x4e>
   132a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   132ac:	3301      	adds	r3, #1
   132ae:	b2db      	uxtb	r3, r3
   132b0:	e000      	b.n	132b4 <SecRand+0x50>
   132b2:	2300      	movs	r3, #0
   132b4:	f88d 300e 	strb.w	r3, [sp, #14]
  while (randLen--)
   132b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   132bc:	1e5a      	subs	r2, r3, #1
   132be:	f88d 2003 	strb.w	r2, [sp, #3]
   132c2:	2b00      	cmp	r3, #0
   132c4:	d1e4      	bne.n	13290 <SecRand+0x2c>
  }

  while (count--)
   132c6:	e010      	b.n	132ea <SecRand+0x86>
  {
    /* Request more random data. */
    HciLeRandCmd();
   132c8:	f00a f81f 	bl	1d30a <HciLeRandCmd>

    /* Update copy index. */
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   132cc:	4b0d      	ldr	r3, [pc, #52]	; (13304 <SecRand+0xa0>)
   132ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   132d2:	2b02      	cmp	r3, #2
   132d4:	d805      	bhi.n	132e2 <SecRand+0x7e>
   132d6:	4b0b      	ldr	r3, [pc, #44]	; (13304 <SecRand+0xa0>)
   132d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   132dc:	3301      	adds	r3, #1
   132de:	b2db      	uxtb	r3, r3
   132e0:	e000      	b.n	132e4 <SecRand+0x80>
   132e2:	2300      	movs	r3, #0
   132e4:	4a07      	ldr	r2, [pc, #28]	; (13304 <SecRand+0xa0>)
   132e6:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  while (count--)
   132ea:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   132ee:	b2da      	uxtb	r2, r3
   132f0:	3a01      	subs	r2, #1
   132f2:	b2d2      	uxtb	r2, r2
   132f4:	f88d 200f 	strb.w	r2, [sp, #15]
   132f8:	2b00      	cmp	r3, #0
   132fa:	d1e5      	bne.n	132c8 <SecRand+0x64>
  }
}
   132fc:	bf00      	nop
   132fe:	b005      	add	sp, #20
   13300:	f85d fb04 	ldr.w	pc, [sp], #4
   13304:	10008a8c 	.word	0x10008a8c

00013308 <SecLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecLeEncryptCmd(uint8_t *pKey, uint8_t *pText, void *pBuf, wsfHandlerId_t handlerId)
{
   13308:	b500      	push	{lr}
   1330a:	b08d      	sub	sp, #52	; 0x34
   1330c:	9003      	str	r0, [sp, #12]
   1330e:	9102      	str	r1, [sp, #8]
   13310:	9201      	str	r2, [sp, #4]
   13312:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t revKey[HCI_KEY_LEN];
  uint8_t revText[HCI_ENCRYPT_DATA_LEN];

  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   13316:	ab08      	add	r3, sp, #32
   13318:	2210      	movs	r2, #16
   1331a:	9903      	ldr	r1, [sp, #12]
   1331c:	4618      	mov	r0, r3
   1331e:	f008 f850 	bl	1b3c2 <WStrReverseCpy>
  WStrReverseCpy(revText, pText, HCI_ENCRYPT_DATA_LEN);
   13322:	ab04      	add	r3, sp, #16
   13324:	2210      	movs	r2, #16
   13326:	9902      	ldr	r1, [sp, #8]
   13328:	4618      	mov	r0, r3
   1332a:	f008 f84a 	bl	1b3c2 <WStrReverseCpy>

  WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   1332e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13332:	9a01      	ldr	r2, [sp, #4]
   13334:	4619      	mov	r1, r3
   13336:	4806      	ldr	r0, [pc, #24]	; (13350 <SecLeEncryptCmd+0x48>)
   13338:	f005 f8da 	bl	184f0 <WsfMsgEnq>
  HciLeEncryptCmd(revKey, revText);
   1333c:	aa04      	add	r2, sp, #16
   1333e:	ab08      	add	r3, sp, #32
   13340:	4611      	mov	r1, r2
   13342:	4618      	mov	r0, r3
   13344:	f009 ff67 	bl	1d216 <HciLeEncryptCmd>
}
   13348:	bf00      	nop
   1334a:	b00d      	add	sp, #52	; 0x34
   1334c:	f85d fb04 	ldr.w	pc, [sp], #4
   13350:	10008aac 	.word	0x10008aac

00013354 <attcPendWriteCmd>:
 *  \return TRUE if app callback's pending or maximum number of simultaneous write commands reached.
 *          FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t attcPendWriteCmd(attcCcb_t *pCcb, attcApiMsg_t *pMsg)
{
   13354:	b084      	sub	sp, #16
   13356:	9001      	str	r0, [sp, #4]
   13358:	9100      	str	r1, [sp, #0]
  uint8_t     pendRsp;
  uint8_t     i;

  /* initialize number of response callbacks pending */
  pendRsp = 0;
   1335a:	2300      	movs	r3, #0
   1335c:	f88d 300f 	strb.w	r3, [sp, #15]

  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   13360:	2300      	movs	r3, #0
   13362:	f88d 300e 	strb.w	r3, [sp, #14]
   13366:	e01f      	b.n	133a8 <attcPendWriteCmd+0x54>
  {
    /* if callback pending for write command */
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   13368:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1336c:	9a01      	ldr	r2, [sp, #4]
   1336e:	3318      	adds	r3, #24
   13370:	005b      	lsls	r3, r3, #1
   13372:	4413      	add	r3, r2
   13374:	88db      	ldrh	r3, [r3, #6]
   13376:	2b00      	cmp	r3, #0
   13378:	d011      	beq.n	1339e <attcPendWriteCmd+0x4a>
    {
      /* if callback pending for this handle */
      if (pCcb->pendWriteCmdHandle[i] == pMsg->handle)
   1337a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1337e:	9a01      	ldr	r2, [sp, #4]
   13380:	3318      	adds	r3, #24
   13382:	005b      	lsls	r3, r3, #1
   13384:	4413      	add	r3, r2
   13386:	88da      	ldrh	r2, [r3, #6]
   13388:	9b00      	ldr	r3, [sp, #0]
   1338a:	891b      	ldrh	r3, [r3, #8]
   1338c:	429a      	cmp	r2, r3
   1338e:	d101      	bne.n	13394 <attcPendWriteCmd+0x40>
      {
        /* callback pending for this write command */
        return TRUE;
   13390:	2301      	movs	r3, #1
   13392:	e014      	b.n	133be <attcPendWriteCmd+0x6a>
      }

      pendRsp++;
   13394:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13398:	3301      	adds	r3, #1
   1339a:	f88d 300f 	strb.w	r3, [sp, #15]
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   1339e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   133a2:	3301      	adds	r3, #1
   133a4:	f88d 300e 	strb.w	r3, [sp, #14]
   133a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   133ac:	2b00      	cmp	r3, #0
   133ae:	d0db      	beq.n	13368 <attcPendWriteCmd+0x14>
    }
  }

  /* no callback is pending for this write command but see if the maximum number of simultaneous
     write commands has been reached */
  return (pendRsp < ATT_NUM_SIMUL_WRITE_CMD) ? FALSE : TRUE;
   133b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   133b4:	2b00      	cmp	r3, #0
   133b6:	bf14      	ite	ne
   133b8:	2301      	movne	r3, #1
   133ba:	2300      	moveq	r3, #0
   133bc:	b2db      	uxtb	r3, r3
}
   133be:	4618      	mov	r0, r3
   133c0:	b004      	add	sp, #16
   133c2:	4770      	bx	lr

000133c4 <attcSetPendWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSetPendWriteCmd(attcCcb_t *pCcb)
{
   133c4:	b084      	sub	sp, #16
   133c6:	9001      	str	r0, [sp, #4]
  uint8_t     i;

  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   133c8:	2300      	movs	r3, #0
   133ca:	f88d 300f 	strb.w	r3, [sp, #15]
   133ce:	e018      	b.n	13402 <attcSetPendWriteCmd+0x3e>
  {
    /* if entry free */
    if (pCcb->pendWriteCmdHandle[i] == ATT_HANDLE_NONE)
   133d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   133d4:	9a01      	ldr	r2, [sp, #4]
   133d6:	3318      	adds	r3, #24
   133d8:	005b      	lsls	r3, r3, #1
   133da:	4413      	add	r3, r2
   133dc:	88db      	ldrh	r3, [r3, #6]
   133de:	2b00      	cmp	r3, #0
   133e0:	d10a      	bne.n	133f8 <attcSetPendWriteCmd+0x34>
    {
      /* set pending write command handle */
      pCcb->pendWriteCmdHandle[i] = pCcb->outReq.handle;
   133e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   133e6:	9a01      	ldr	r2, [sp, #4]
   133e8:	8b11      	ldrh	r1, [r2, #24]
   133ea:	9a01      	ldr	r2, [sp, #4]
   133ec:	3318      	adds	r3, #24
   133ee:	005b      	lsls	r3, r3, #1
   133f0:	4413      	add	r3, r2
   133f2:	460a      	mov	r2, r1
   133f4:	80da      	strh	r2, [r3, #6]
      break;
   133f6:	e008      	b.n	1340a <attcSetPendWriteCmd+0x46>
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   133f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   133fc:	3301      	adds	r3, #1
   133fe:	f88d 300f 	strb.w	r3, [sp, #15]
   13402:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13406:	2b00      	cmp	r3, #0
   13408:	d0e2      	beq.n	133d0 <attcSetPendWriteCmd+0xc>
    }
  }
}
   1340a:	bf00      	nop
   1340c:	b004      	add	sp, #16
   1340e:	4770      	bx	lr

00013410 <attcWriteCmdCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcWriteCmdCallback(dmConnId_t connId, attcCcb_t *pCcb, uint8_t status)
{
   13410:	b500      	push	{lr}
   13412:	b085      	sub	sp, #20
   13414:	4603      	mov	r3, r0
   13416:	9100      	str	r1, [sp, #0]
   13418:	f88d 3007 	strb.w	r3, [sp, #7]
   1341c:	4613      	mov	r3, r2
   1341e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t     i;

  /* if any pending write command callback */
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   13422:	2300      	movs	r3, #0
   13424:	f88d 300f 	strb.w	r3, [sp, #15]
   13428:	e023      	b.n	13472 <attcWriteCmdCallback+0x62>
  {
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   1342a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1342e:	9a00      	ldr	r2, [sp, #0]
   13430:	3318      	adds	r3, #24
   13432:	005b      	lsls	r3, r3, #1
   13434:	4413      	add	r3, r2
   13436:	88db      	ldrh	r3, [r3, #6]
   13438:	2b00      	cmp	r3, #0
   1343a:	d015      	beq.n	13468 <attcWriteCmdCallback+0x58>
    {
      /* call callback with status */
      attcExecCallback(connId, ATTC_WRITE_CMD_RSP, pCcb->pendWriteCmdHandle[i], status);
   1343c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13440:	9a00      	ldr	r2, [sp, #0]
   13442:	3318      	adds	r3, #24
   13444:	005b      	lsls	r3, r3, #1
   13446:	4413      	add	r3, r2
   13448:	88da      	ldrh	r2, [r3, #6]
   1344a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1344e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13452:	210a      	movs	r1, #10
   13454:	f000 fbbf 	bl	13bd6 <attcExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
   13458:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1345c:	9a00      	ldr	r2, [sp, #0]
   1345e:	3318      	adds	r3, #24
   13460:	005b      	lsls	r3, r3, #1
   13462:	4413      	add	r3, r2
   13464:	2200      	movs	r2, #0
   13466:	80da      	strh	r2, [r3, #6]
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   13468:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1346c:	3301      	adds	r3, #1
   1346e:	f88d 300f 	strb.w	r3, [sp, #15]
   13472:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13476:	2b00      	cmp	r3, #0
   13478:	d0d7      	beq.n	1342a <attcWriteCmdCallback+0x1a>
    }
  }
}
   1347a:	bf00      	nop
   1347c:	b005      	add	sp, #20
   1347e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013484 <attcSendSimpleReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendSimpleReq(attcCcb_t *pCcb)
{
   13484:	b500      	push	{lr}
   13486:	b085      	sub	sp, #20
   13488:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   1348a:	9b01      	ldr	r3, [sp, #4]
   1348c:	695b      	ldr	r3, [r3, #20]
   1348e:	9303      	str	r3, [sp, #12]

  /* clear stored packet pointer */
  pCcb->outReq.pPkt = NULL;
   13490:	9b01      	ldr	r3, [sp, #4]
   13492:	2200      	movs	r2, #0
   13494:	615a      	str	r2, [r3, #20]

  /* start request timer (except for write command) */
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   13496:	9b01      	ldr	r3, [sp, #4]
   13498:	7c9b      	ldrb	r3, [r3, #18]
   1349a:	2b0a      	cmp	r3, #10
   1349c:	d00d      	beq.n	134ba <attcSendSimpleReq+0x36>
  {
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   1349e:	9b01      	ldr	r3, [sp, #4]
   134a0:	2210      	movs	r2, #16
   134a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   134a6:	9b01      	ldr	r3, [sp, #4]
   134a8:	f103 0224 	add.w	r2, r3, #36	; 0x24
   134ac:	4b09      	ldr	r3, [pc, #36]	; (134d4 <attcSendSimpleReq+0x50>)
   134ae:	681b      	ldr	r3, [r3, #0]
   134b0:	799b      	ldrb	r3, [r3, #6]
   134b2:	4619      	mov	r1, r3
   134b4:	4610      	mov	r0, r2
   134b6:	f005 fb5f 	bl	18b78 <WsfTimerStartSec>
  }

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   134ba:	9b01      	ldr	r3, [sp, #4]
   134bc:	681b      	ldr	r3, [r3, #0]
   134be:	8b19      	ldrh	r1, [r3, #24]
   134c0:	9b03      	ldr	r3, [sp, #12]
   134c2:	881a      	ldrh	r2, [r3, #0]
   134c4:	9b03      	ldr	r3, [sp, #12]
   134c6:	2004      	movs	r0, #4
   134c8:	f008 f9cc 	bl	1b864 <L2cDataReq>
}
   134cc:	bf00      	nop
   134ce:	b005      	add	sp, #20
   134d0:	f85d fb04 	ldr.w	pc, [sp], #4
   134d4:	10002b90 	.word	0x10002b90

000134d8 <attcSendContinuingReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendContinuingReq(attcCcb_t *pCcb)
{
   134d8:	b500      	push	{lr}
   134da:	b085      	sub	sp, #20
   134dc:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   134de:	9b01      	ldr	r3, [sp, #4]
   134e0:	7cdb      	ldrb	r3, [r3, #19]
   134e2:	2b01      	cmp	r3, #1
   134e4:	d11e      	bne.n	13524 <attcSendContinuingReq+0x4c>
  {
    /* allocate new buffer */
    if ((pPkt = attMsgAlloc(pCcb->outReq.pPkt->len + L2C_PAYLOAD_START)) != NULL)
   134e6:	9b01      	ldr	r3, [sp, #4]
   134e8:	695b      	ldr	r3, [r3, #20]
   134ea:	881b      	ldrh	r3, [r3, #0]
   134ec:	3308      	adds	r3, #8
   134ee:	b29b      	uxth	r3, r3
   134f0:	4618      	mov	r0, r3
   134f2:	f004 fa4b 	bl	1798c <attMsgAlloc>
   134f6:	9003      	str	r0, [sp, #12]
   134f8:	9b03      	ldr	r3, [sp, #12]
   134fa:	2b00      	cmp	r3, #0
   134fc:	d00a      	beq.n	13514 <attcSendContinuingReq+0x3c>
    {
      /* copy stored packet to new */
      memcpy(pPkt, pCcb->outReq.pPkt, pCcb->outReq.pPkt->len + L2C_PAYLOAD_START);
   134fe:	9b01      	ldr	r3, [sp, #4]
   13500:	6959      	ldr	r1, [r3, #20]
   13502:	9b01      	ldr	r3, [sp, #4]
   13504:	695b      	ldr	r3, [r3, #20]
   13506:	881b      	ldrh	r3, [r3, #0]
   13508:	3308      	adds	r3, #8
   1350a:	461a      	mov	r2, r3
   1350c:	9803      	ldr	r0, [sp, #12]
   1350e:	f7f8 fe27 	bl	c160 <memcpy>
   13512:	e00d      	b.n	13530 <attcSendContinuingReq+0x58>
    }
    /* else handle error case of allocation failure */
    else
    {
      /* free stored packet and call callback with failure status */
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_MEMORY);
   13514:	9b01      	ldr	r3, [sp, #4]
   13516:	3310      	adds	r3, #16
   13518:	2270      	movs	r2, #112	; 0x70
   1351a:	4619      	mov	r1, r3
   1351c:	9801      	ldr	r0, [sp, #4]
   1351e:	f000 fb80 	bl	13c22 <attcReqClear>
      return;
   13522:	e057      	b.n	135d4 <attcSendContinuingReq+0xfc>
  }
  /* else not continuing */
  else
  {
    /* send the stored packet */
    pPkt = pCcb->outReq.pPkt;
   13524:	9b01      	ldr	r3, [sp, #4]
   13526:	695b      	ldr	r3, [r3, #20]
   13528:	9303      	str	r3, [sp, #12]

    /* clear stored packet pointer */
    pCcb->outReq.pPkt = NULL;
   1352a:	9b01      	ldr	r3, [sp, #4]
   1352c:	2200      	movs	r2, #0
   1352e:	615a      	str	r2, [r3, #20]
  }

  /* build remaining fields of packet from stored parameters */
  p = (uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_HDR_LEN;
   13530:	9b03      	ldr	r3, [sp, #12]
   13532:	3309      	adds	r3, #9
   13534:	9302      	str	r3, [sp, #8]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
   13536:	9b01      	ldr	r3, [sp, #4]
   13538:	7c9b      	ldrb	r3, [r3, #18]
   1353a:	2b06      	cmp	r3, #6
   1353c:	d113      	bne.n	13566 <attcSendContinuingReq+0x8e>
  {
    /* build offset field */
    p += sizeof(uint16_t);
   1353e:	9b02      	ldr	r3, [sp, #8]
   13540:	3302      	adds	r3, #2
   13542:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
   13544:	9b02      	ldr	r3, [sp, #8]
   13546:	1c5a      	adds	r2, r3, #1
   13548:	9202      	str	r2, [sp, #8]
   1354a:	9a01      	ldr	r2, [sp, #4]
   1354c:	8bd2      	ldrh	r2, [r2, #30]
   1354e:	b2d2      	uxtb	r2, r2
   13550:	701a      	strb	r2, [r3, #0]
   13552:	9b02      	ldr	r3, [sp, #8]
   13554:	1c5a      	adds	r2, r3, #1
   13556:	9202      	str	r2, [sp, #8]
   13558:	9a01      	ldr	r2, [sp, #4]
   1355a:	8bd2      	ldrh	r2, [r2, #30]
   1355c:	0a12      	lsrs	r2, r2, #8
   1355e:	b292      	uxth	r2, r2
   13560:	b2d2      	uxtb	r2, r2
   13562:	701a      	strb	r2, [r3, #0]
   13564:	e01f      	b.n	135a6 <attcSendContinuingReq+0xce>
  {
    /*
     * Find Info, Find By Type Value, Read By Type, and Read By Group Type
     * request packets all begin with a start handle and end handle.
     */
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.startHandle);
   13566:	9b02      	ldr	r3, [sp, #8]
   13568:	1c5a      	adds	r2, r3, #1
   1356a:	9202      	str	r2, [sp, #8]
   1356c:	9a01      	ldr	r2, [sp, #4]
   1356e:	8bd2      	ldrh	r2, [r2, #30]
   13570:	b2d2      	uxtb	r2, r2
   13572:	701a      	strb	r2, [r3, #0]
   13574:	9b02      	ldr	r3, [sp, #8]
   13576:	1c5a      	adds	r2, r3, #1
   13578:	9202      	str	r2, [sp, #8]
   1357a:	9a01      	ldr	r2, [sp, #4]
   1357c:	8bd2      	ldrh	r2, [r2, #30]
   1357e:	0a12      	lsrs	r2, r2, #8
   13580:	b292      	uxth	r2, r2
   13582:	b2d2      	uxtb	r2, r2
   13584:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.endHandle);
   13586:	9b02      	ldr	r3, [sp, #8]
   13588:	1c5a      	adds	r2, r3, #1
   1358a:	9202      	str	r2, [sp, #8]
   1358c:	9a01      	ldr	r2, [sp, #4]
   1358e:	8c12      	ldrh	r2, [r2, #32]
   13590:	b2d2      	uxtb	r2, r2
   13592:	701a      	strb	r2, [r3, #0]
   13594:	9b02      	ldr	r3, [sp, #8]
   13596:	1c5a      	adds	r2, r3, #1
   13598:	9202      	str	r2, [sp, #8]
   1359a:	9a01      	ldr	r2, [sp, #4]
   1359c:	8c12      	ldrh	r2, [r2, #32]
   1359e:	0a12      	lsrs	r2, r2, #8
   135a0:	b292      	uxth	r2, r2
   135a2:	b2d2      	uxtb	r2, r2
   135a4:	701a      	strb	r2, [r3, #0]
  }

  /* start request timer */
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   135a6:	9b01      	ldr	r3, [sp, #4]
   135a8:	2210      	movs	r2, #16
   135aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   135ae:	9b01      	ldr	r3, [sp, #4]
   135b0:	f103 0224 	add.w	r2, r3, #36	; 0x24
   135b4:	4b09      	ldr	r3, [pc, #36]	; (135dc <attcSendContinuingReq+0x104>)
   135b6:	681b      	ldr	r3, [r3, #0]
   135b8:	799b      	ldrb	r3, [r3, #6]
   135ba:	4619      	mov	r1, r3
   135bc:	4610      	mov	r0, r2
   135be:	f005 fadb 	bl	18b78 <WsfTimerStartSec>

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   135c2:	9b01      	ldr	r3, [sp, #4]
   135c4:	681b      	ldr	r3, [r3, #0]
   135c6:	8b19      	ldrh	r1, [r3, #24]
   135c8:	9b03      	ldr	r3, [sp, #12]
   135ca:	881a      	ldrh	r2, [r3, #0]
   135cc:	9b03      	ldr	r3, [sp, #12]
   135ce:	2004      	movs	r0, #4
   135d0:	f008 f948 	bl	1b864 <L2cDataReq>
}
   135d4:	b005      	add	sp, #20
   135d6:	f85d fb04 	ldr.w	pc, [sp], #4
   135da:	bf00      	nop
   135dc:	10002b90 	.word	0x10002b90

000135e0 <attcSendMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendMtuReq(attcCcb_t *pCcb)
{
   135e0:	b500      	push	{lr}
   135e2:	b083      	sub	sp, #12
   135e4:	9001      	str	r0, [sp, #4]
  /* if MTU already exchanged */
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
   135e6:	9b01      	ldr	r3, [sp, #4]
   135e8:	681b      	ldr	r3, [r3, #0]
   135ea:	7f5b      	ldrb	r3, [r3, #29]
   135ec:	f003 0301 	and.w	r3, r3, #1
   135f0:	2b00      	cmp	r3, #0
   135f2:	d00b      	beq.n	1360c <attcSendMtuReq+0x2c>
  {
    /* discard request */
    attcFreePkt(&pCcb->outReq);
   135f4:	9b01      	ldr	r3, [sp, #4]
   135f6:	3310      	adds	r3, #16
   135f8:	4618      	mov	r0, r3
   135fa:	f000 fad9 	bl	13bb0 <attcFreePkt>

    /* clear out req */
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   135fe:	9b01      	ldr	r3, [sp, #4]
   13600:	2200      	movs	r2, #0
   13602:	749a      	strb	r2, [r3, #18]

    ATT_TRACE_WARN0("MTU req discarded");
   13604:	4809      	ldr	r0, [pc, #36]	; (1362c <attcSendMtuReq+0x4c>)
   13606:	f005 fb9f 	bl	18d48 <WsfTrace>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;

    /* send packet */
    attcSendSimpleReq(pCcb);
  }
}
   1360a:	e00b      	b.n	13624 <attcSendMtuReq+0x44>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;
   1360c:	9b01      	ldr	r3, [sp, #4]
   1360e:	681b      	ldr	r3, [r3, #0]
   13610:	9a01      	ldr	r2, [sp, #4]
   13612:	6812      	ldr	r2, [r2, #0]
   13614:	7f52      	ldrb	r2, [r2, #29]
   13616:	f042 0201 	orr.w	r2, r2, #1
   1361a:	b2d2      	uxtb	r2, r2
   1361c:	775a      	strb	r2, [r3, #29]
    attcSendSimpleReq(pCcb);
   1361e:	9801      	ldr	r0, [sp, #4]
   13620:	f7ff ff30 	bl	13484 <attcSendSimpleReq>
}
   13624:	bf00      	nop
   13626:	b003      	add	sp, #12
   13628:	f85d fb04 	ldr.w	pc, [sp], #4
   1362c:	000287d8 	.word	0x000287d8

00013630 <attcSendWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendWriteCmd(attcCcb_t *pCcb)
{
   13630:	b500      	push	{lr}
   13632:	b083      	sub	sp, #12
   13634:	9001      	str	r0, [sp, #4]
  /* send packet */
  attcSendSimpleReq(pCcb);
   13636:	9801      	ldr	r0, [sp, #4]
   13638:	f7ff ff24 	bl	13484 <attcSendSimpleReq>

  /* if flow not disabled */
  if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   1363c:	9b01      	ldr	r3, [sp, #4]
   1363e:	681b      	ldr	r3, [r3, #0]
   13640:	7f5b      	ldrb	r3, [r3, #29]
   13642:	f003 0302 	and.w	r3, r3, #2
   13646:	2b00      	cmp	r3, #0
   13648:	d109      	bne.n	1365e <attcSendWriteCmd+0x2e>
  {
    /* call callback */
    attcExecCallback(pCcb->pMainCcb->connId, ATTC_WRITE_CMD_RSP, pCcb->outReq.handle, ATT_SUCCESS);
   1364a:	9b01      	ldr	r3, [sp, #4]
   1364c:	681b      	ldr	r3, [r3, #0]
   1364e:	7f18      	ldrb	r0, [r3, #28]
   13650:	9b01      	ldr	r3, [sp, #4]
   13652:	8b1a      	ldrh	r2, [r3, #24]
   13654:	2300      	movs	r3, #0
   13656:	210a      	movs	r1, #10
   13658:	f000 fabd 	bl	13bd6 <attcExecCallback>
   1365c:	e002      	b.n	13664 <attcSendWriteCmd+0x34>
  }
  else
  {
    /* set pending write command callback for this handle */
    attcSetPendWriteCmd(pCcb);
   1365e:	9801      	ldr	r0, [sp, #4]
   13660:	f7ff feb0 	bl	133c4 <attcSetPendWriteCmd>
  }

  /* clear out req */
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   13664:	9b01      	ldr	r3, [sp, #4]
   13666:	2200      	movs	r2, #0
   13668:	749a      	strb	r2, [r3, #18]
}
   1366a:	bf00      	nop
   1366c:	b003      	add	sp, #12
   1366e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013674 <attcSendPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendPrepWriteReq(attcCcb_t *pCcb)
{
   13674:	b500      	push	{lr}
   13676:	b087      	sub	sp, #28
   13678:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt;
  uint8_t         *p;
  uint16_t        dataLen;

  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   1367a:	9b01      	ldr	r3, [sp, #4]
   1367c:	7cdb      	ldrb	r3, [r3, #19]
   1367e:	2b01      	cmp	r3, #1
   13680:	d147      	bne.n	13712 <attcSendPrepWriteReq+0x9e>
  {
    /* determine size of buffer to allocate */
    if (pCcb->outReqParams.w.len < (pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN))
   13682:	9b01      	ldr	r3, [sp, #4]
   13684:	8b9b      	ldrh	r3, [r3, #28]
   13686:	461a      	mov	r2, r3
   13688:	9b01      	ldr	r3, [sp, #4]
   1368a:	681b      	ldr	r3, [r3, #0]
   1368c:	8b5b      	ldrh	r3, [r3, #26]
   1368e:	3b05      	subs	r3, #5
   13690:	429a      	cmp	r2, r3
   13692:	da04      	bge.n	1369e <attcSendPrepWriteReq+0x2a>
    {
      dataLen = pCcb->outReqParams.w.len;
   13694:	9b01      	ldr	r3, [sp, #4]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	f8ad 3012 	strh.w	r3, [sp, #18]
   1369c:	e005      	b.n	136aa <attcSendPrepWriteReq+0x36>
    }
    else
    {
      dataLen = pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN;
   1369e:	9b01      	ldr	r3, [sp, #4]
   136a0:	681b      	ldr	r3, [r3, #0]
   136a2:	8b5b      	ldrh	r3, [r3, #26]
   136a4:	3b05      	subs	r3, #5
   136a6:	f8ad 3012 	strh.w	r3, [sp, #18]
    }

    /* allocate new buffer */
    if ((pPkt = attMsgAlloc(dataLen + ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   136aa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   136ae:	330d      	adds	r3, #13
   136b0:	b29b      	uxth	r3, r3
   136b2:	4618      	mov	r0, r3
   136b4:	f004 f96a 	bl	1798c <attMsgAlloc>
   136b8:	9005      	str	r0, [sp, #20]
   136ba:	9b05      	ldr	r3, [sp, #20]
   136bc:	2b00      	cmp	r3, #0
   136be:	d020      	beq.n	13702 <attcSendPrepWriteReq+0x8e>
    {
      /* copy fixed fields */
      memcpy(pPkt, pCcb->outReq.pPkt, ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START);
   136c0:	9b01      	ldr	r3, [sp, #4]
   136c2:	695b      	ldr	r3, [r3, #20]
   136c4:	220d      	movs	r2, #13
   136c6:	4619      	mov	r1, r3
   136c8:	9805      	ldr	r0, [sp, #20]
   136ca:	f7f8 fd49 	bl	c160 <memcpy>

      /* copy data */
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
   136ce:	9b05      	ldr	r3, [sp, #20]
   136d0:	f103 000d 	add.w	r0, r3, #13
             pCcb->outReqParams.w.pValue, dataLen);
   136d4:	9b01      	ldr	r3, [sp, #4]
   136d6:	6a1b      	ldr	r3, [r3, #32]
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
   136d8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   136dc:	4619      	mov	r1, r3
   136de:	f7f8 fd3f 	bl	c160 <memcpy>

      /* update length and data pointer */
      pCcb->outReqParams.w.pValue += dataLen;
   136e2:	9b01      	ldr	r3, [sp, #4]
   136e4:	6a1a      	ldr	r2, [r3, #32]
   136e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   136ea:	441a      	add	r2, r3
   136ec:	9b01      	ldr	r3, [sp, #4]
   136ee:	621a      	str	r2, [r3, #32]
      pCcb->outReqParams.w.len -= dataLen;
   136f0:	9b01      	ldr	r3, [sp, #4]
   136f2:	8b9a      	ldrh	r2, [r3, #28]
   136f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   136f8:	1ad3      	subs	r3, r2, r3
   136fa:	b29a      	uxth	r2, r3
   136fc:	9b01      	ldr	r3, [sp, #4]
   136fe:	839a      	strh	r2, [r3, #28]
   13700:	e011      	b.n	13726 <attcSendPrepWriteReq+0xb2>
    }
    /* else handle error case of allocation failure */
    else
    {
      /* free stored packet and call callback with failure status */
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_MEMORY);
   13702:	9b01      	ldr	r3, [sp, #4]
   13704:	3310      	adds	r3, #16
   13706:	2270      	movs	r2, #112	; 0x70
   13708:	4619      	mov	r1, r3
   1370a:	9801      	ldr	r0, [sp, #4]
   1370c:	f000 fa89 	bl	13c22 <attcReqClear>
      return;
   13710:	e03d      	b.n	1378e <attcSendPrepWriteReq+0x11a>
    }
  }
  /* else not continuing */
  else
  {
    dataLen = pCcb->outReqParams.w.len;
   13712:	9b01      	ldr	r3, [sp, #4]
   13714:	8b9b      	ldrh	r3, [r3, #28]
   13716:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* send the stored packet */
    pPkt = pCcb->outReq.pPkt;
   1371a:	9b01      	ldr	r3, [sp, #4]
   1371c:	695b      	ldr	r3, [r3, #20]
   1371e:	9305      	str	r3, [sp, #20]

    /* clear stored packet pointer */
    pCcb->outReq.pPkt = NULL;
   13720:	9b01      	ldr	r3, [sp, #4]
   13722:	2200      	movs	r2, #0
   13724:	615a      	str	r2, [r3, #20]
  }

  /* build remaining fields of packet from stored parameters */
  p = (uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_HDR_LEN + sizeof(uint16_t);
   13726:	9b05      	ldr	r3, [sp, #20]
   13728:	330b      	adds	r3, #11
   1372a:	9303      	str	r3, [sp, #12]
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
   1372c:	9b03      	ldr	r3, [sp, #12]
   1372e:	1c5a      	adds	r2, r3, #1
   13730:	9203      	str	r2, [sp, #12]
   13732:	9a01      	ldr	r2, [sp, #4]
   13734:	8bd2      	ldrh	r2, [r2, #30]
   13736:	b2d2      	uxtb	r2, r2
   13738:	701a      	strb	r2, [r3, #0]
   1373a:	9b03      	ldr	r3, [sp, #12]
   1373c:	1c5a      	adds	r2, r3, #1
   1373e:	9203      	str	r2, [sp, #12]
   13740:	9a01      	ldr	r2, [sp, #4]
   13742:	8bd2      	ldrh	r2, [r2, #30]
   13744:	0a12      	lsrs	r2, r2, #8
   13746:	b292      	uxth	r2, r2
   13748:	b2d2      	uxtb	r2, r2
   1374a:	701a      	strb	r2, [r3, #0]

  /* update offset after building packet */
  pCcb->outReqParams.w.offset += dataLen;
   1374c:	9b01      	ldr	r3, [sp, #4]
   1374e:	8bda      	ldrh	r2, [r3, #30]
   13750:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   13754:	4413      	add	r3, r2
   13756:	b29a      	uxth	r2, r3
   13758:	9b01      	ldr	r3, [sp, #4]
   1375a:	83da      	strh	r2, [r3, #30]

  /* start request timer */
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   1375c:	9b01      	ldr	r3, [sp, #4]
   1375e:	2210      	movs	r2, #16
   13760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   13764:	9b01      	ldr	r3, [sp, #4]
   13766:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1376a:	4b0a      	ldr	r3, [pc, #40]	; (13794 <attcSendPrepWriteReq+0x120>)
   1376c:	681b      	ldr	r3, [r3, #0]
   1376e:	799b      	ldrb	r3, [r3, #6]
   13770:	4619      	mov	r1, r3
   13772:	4610      	mov	r0, r2
   13774:	f005 fa00 	bl	18b78 <WsfTimerStartSec>

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
   13778:	9b01      	ldr	r3, [sp, #4]
   1377a:	681b      	ldr	r3, [r3, #0]
   1377c:	8b19      	ldrh	r1, [r3, #24]
   1377e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   13782:	3305      	adds	r3, #5
   13784:	b29a      	uxth	r2, r3
   13786:	9b05      	ldr	r3, [sp, #20]
   13788:	2004      	movs	r0, #4
   1378a:	f008 f86b 	bl	1b864 <L2cDataReq>
}
   1378e:	b007      	add	sp, #28
   13790:	f85d fb04 	ldr.w	pc, [sp], #4
   13794:	10002b90 	.word	0x10002b90

00013798 <attcSendReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendReq(attcCcb_t *pCcb)
{
   13798:	b500      	push	{lr}
   1379a:	b083      	sub	sp, #12
   1379c:	9001      	str	r0, [sp, #4]
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   1379e:	9b01      	ldr	r3, [sp, #4]
   137a0:	7c9b      	ldrb	r3, [r3, #18]
   137a2:	461a      	mov	r2, r3
   137a4:	4b04      	ldr	r3, [pc, #16]	; (137b8 <attcSendReq+0x20>)
   137a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   137aa:	9801      	ldr	r0, [sp, #4]
   137ac:	4798      	blx	r3
}
   137ae:	bf00      	nop
   137b0:	b003      	add	sp, #12
   137b2:	f85d fb04 	ldr.w	pc, [sp], #4
   137b6:	bf00      	nop
   137b8:	000298e8 	.word	0x000298e8

000137bc <attcSetupReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSetupReq(attcCcb_t *pCcb, attcApiMsg_t *pMsg)
{
   137bc:	b500      	push	{lr}
   137be:	b083      	sub	sp, #12
   137c0:	9001      	str	r0, [sp, #4]
   137c2:	9100      	str	r1, [sp, #0]
  /* set out req to api message */
  pCcb->outReq = *pMsg;
   137c4:	9b01      	ldr	r3, [sp, #4]
   137c6:	9a00      	ldr	r2, [sp, #0]
   137c8:	3310      	adds	r3, #16
   137ca:	ca07      	ldmia	r2, {r0, r1, r2}
   137cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* store parameters */
  pCcb->outReqParams = *(pMsg->pPkt);
   137d0:	9b00      	ldr	r3, [sp, #0]
   137d2:	685a      	ldr	r2, [r3, #4]
   137d4:	9b01      	ldr	r3, [sp, #4]
   137d6:	331c      	adds	r3, #28
   137d8:	e892 0003 	ldmia.w	r2, {r0, r1}
   137dc:	e883 0003 	stmia.w	r3, {r0, r1}

  /* build and send request */
  attcSendReq(pCcb);
   137e0:	9801      	ldr	r0, [sp, #4]
   137e2:	f7ff ffd9 	bl	13798 <attcSendReq>
}
   137e6:	bf00      	nop
   137e8:	b003      	add	sp, #12
   137ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000137f0 <attcDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   137f0:	b500      	push	{lr}
   137f2:	b085      	sub	sp, #20
   137f4:	4603      	mov	r3, r0
   137f6:	9200      	str	r2, [sp, #0]
   137f8:	f8ad 3006 	strh.w	r3, [sp, #6]
   137fc:	460b      	mov	r3, r1
   137fe:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       opcode;
  attcCcb_t     *pCcb;

  /* get connection control block for this handle, ignore packet if not found */
  if ((pCcb = attcCcbByHandle(handle)) == NULL)
   13802:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   13806:	4618      	mov	r0, r3
   13808:	f000 f9b0 	bl	13b6c <attcCcbByHandle>
   1380c:	9003      	str	r0, [sp, #12]
   1380e:	9b03      	ldr	r3, [sp, #12]
   13810:	2b00      	cmp	r3, #0
   13812:	d026      	beq.n	13862 <attcDataCback+0x72>
  {
    return;
  }

  /* parse opcode */
  opcode = *(pPacket + L2C_PAYLOAD_START);
   13814:	9b00      	ldr	r3, [sp, #0]
   13816:	7a1b      	ldrb	r3, [r3, #8]
   13818:	f88d 300b 	strb.w	r3, [sp, #11]

  /* if response */
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
   1381c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13820:	2b19      	cmp	r3, #25
   13822:	d807      	bhi.n	13834 <attcDataCback+0x44>
  {
    attcProcRsp(pCcb, len, pPacket);
   13824:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   13828:	9a00      	ldr	r2, [sp, #0]
   1382a:	4619      	mov	r1, r3
   1382c:	9803      	ldr	r0, [sp, #12]
   1382e:	f000 fbc3 	bl	13fb8 <attcProcRsp>
   13832:	e017      	b.n	13864 <attcDataCback+0x74>
  }
  /* else if indication or notification */
  else if ((opcode == ATT_PDU_VALUE_NTF) || (opcode == ATT_PDU_VALUE_IND))
   13834:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13838:	2b1b      	cmp	r3, #27
   1383a:	d003      	beq.n	13844 <attcDataCback+0x54>
   1383c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13840:	2b1d      	cmp	r3, #29
   13842:	d107      	bne.n	13854 <attcDataCback+0x64>
  {
    attcProcInd(pCcb, len, pPacket);
   13844:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   13848:	9a00      	ldr	r2, [sp, #0]
   1384a:	4619      	mov	r1, r3
   1384c:	9803      	ldr	r0, [sp, #12]
   1384e:	f000 fc39 	bl	140c4 <attcProcInd>
   13852:	e007      	b.n	13864 <attcDataCback+0x74>
  }
  /* else unknown opcode */
  else
  {
    ATT_TRACE_WARN1("attc unknown opcode 0x%02x", opcode);
   13854:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13858:	4619      	mov	r1, r3
   1385a:	4804      	ldr	r0, [pc, #16]	; (1386c <attcDataCback+0x7c>)
   1385c:	f005 fa74 	bl	18d48 <WsfTrace>
   13860:	e000      	b.n	13864 <attcDataCback+0x74>
    return;
   13862:	bf00      	nop
  }
}
   13864:	b005      	add	sp, #20
   13866:	f85d fb04 	ldr.w	pc, [sp], #4
   1386a:	bf00      	nop
   1386c:	000287ec 	.word	0x000287ec

00013870 <attcCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcCtrlCback(wsfMsgHdr_t *pMsg)
{
   13870:	b500      	push	{lr}
   13872:	b085      	sub	sp, #20
   13874:	9001      	str	r0, [sp, #4]
  attcCcb_t     *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   13876:	9b01      	ldr	r3, [sp, #4]
   13878:	881b      	ldrh	r3, [r3, #0]
   1387a:	b2db      	uxtb	r3, r3
   1387c:	4618      	mov	r0, r3
   1387e:	f000 f94f 	bl	13b20 <attcCcbByConnId>
   13882:	9003      	str	r0, [sp, #12]
   13884:	9b03      	ldr	r3, [sp, #12]
   13886:	2b00      	cmp	r3, #0
   13888:	d00d      	beq.n	138a6 <attcCtrlCback+0x36>
  {
    /* if confirmation pending try sending now */
    AttcIndConfirm((dmConnId_t) pMsg->param);
   1388a:	9b01      	ldr	r3, [sp, #4]
   1388c:	881b      	ldrh	r3, [r3, #0]
   1388e:	b2db      	uxtb	r3, r3
   13890:	4618      	mov	r0, r3
   13892:	f000 fd59 	bl	14348 <AttcIndConfirm>

    /* call pending write command callback */
    attcWriteCmdCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   13896:	9b01      	ldr	r3, [sp, #4]
   13898:	881b      	ldrh	r3, [r3, #0]
   1389a:	b2db      	uxtb	r3, r3
   1389c:	2200      	movs	r2, #0
   1389e:	9903      	ldr	r1, [sp, #12]
   138a0:	4618      	mov	r0, r3
   138a2:	f7ff fdb5 	bl	13410 <attcWriteCmdCallback>
  }
}
   138a6:	bf00      	nop
   138a8:	b005      	add	sp, #20
   138aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000138b0 <attcConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   138b0:	b510      	push	{r4, lr}
   138b2:	b084      	sub	sp, #16
   138b4:	9001      	str	r0, [sp, #4]
   138b6:	9100      	str	r1, [sp, #0]
  attcCcb_t *pClient;
  uint16_t  localMtu;
  uint8_t   status;

  /* if connection opened */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   138b8:	9b00      	ldr	r3, [sp, #0]
   138ba:	789b      	ldrb	r3, [r3, #2]
   138bc:	2b27      	cmp	r3, #39	; 0x27
   138be:	d129      	bne.n	13914 <attcConnCback+0x64>
  {
    /* if we initiated connection send MTU request */
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   138c0:	9b01      	ldr	r3, [sp, #4]
   138c2:	7f1b      	ldrb	r3, [r3, #28]
   138c4:	4618      	mov	r0, r3
   138c6:	f7fe f84f 	bl	11968 <DmConnRole>
   138ca:	4603      	mov	r3, r0
   138cc:	2b00      	cmp	r3, #0
   138ce:	d179      	bne.n	139c4 <attcConnCback+0x114>
    {
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   138d0:	4b3e      	ldr	r3, [pc, #248]	; (139cc <attcConnCback+0x11c>)
   138d2:	681b      	ldr	r3, [r3, #0]
   138d4:	889b      	ldrh	r3, [r3, #4]
   138d6:	461c      	mov	r4, r3
   138d8:	f00a fe0e 	bl	1e4f8 <HciGetMaxRxAclLen>
   138dc:	4603      	mov	r3, r0
   138de:	3b04      	subs	r3, #4
   138e0:	429c      	cmp	r4, r3
   138e2:	da03      	bge.n	138ec <attcConnCback+0x3c>
   138e4:	4b39      	ldr	r3, [pc, #228]	; (139cc <attcConnCback+0x11c>)
   138e6:	681b      	ldr	r3, [r3, #0]
   138e8:	889b      	ldrh	r3, [r3, #4]
   138ea:	e004      	b.n	138f6 <attcConnCback+0x46>
   138ec:	f00a fe04 	bl	1e4f8 <HciGetMaxRxAclLen>
   138f0:	4603      	mov	r3, r0
   138f2:	3b04      	subs	r3, #4
   138f4:	b29b      	uxth	r3, r3
   138f6:	f8ad 300c 	strh.w	r3, [sp, #12]

      /* if desired MTU is not the default */
      if (localMtu != ATT_DEFAULT_MTU)
   138fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   138fe:	2b17      	cmp	r3, #23
   13900:	d060      	beq.n	139c4 <attcConnCback+0x114>
      {
        AttcMtuReq(pCcb->connId, localMtu);
   13902:	9b01      	ldr	r3, [sp, #4]
   13904:	7f1b      	ldrb	r3, [r3, #28]
   13906:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1390a:	4611      	mov	r1, r2
   1390c:	4618      	mov	r0, r3
   1390e:	f000 fce3 	bl	142d8 <AttcMtuReq>
    }

    /* call pending write command callback */
    attcWriteCmdCallback(pCcb->connId, pClient, status);
  }
}
   13912:	e057      	b.n	139c4 <attcConnCback+0x114>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   13914:	9b00      	ldr	r3, [sp, #0]
   13916:	789b      	ldrb	r3, [r3, #2]
   13918:	2b28      	cmp	r3, #40	; 0x28
   1391a:	d153      	bne.n	139c4 <attcConnCback+0x114>
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   1391c:	9b00      	ldr	r3, [sp, #0]
   1391e:	78db      	ldrb	r3, [r3, #3]
   13920:	2b00      	cmp	r3, #0
   13922:	d105      	bne.n	13930 <attcConnCback+0x80>
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   13924:	9b00      	ldr	r3, [sp, #0]
   13926:	7a1b      	ldrb	r3, [r3, #8]
   13928:	3320      	adds	r3, #32
   1392a:	f88d 300f 	strb.w	r3, [sp, #15]
   1392e:	e004      	b.n	1393a <attcConnCback+0x8a>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   13930:	9b00      	ldr	r3, [sp, #0]
   13932:	78db      	ldrb	r3, [r3, #3]
   13934:	3320      	adds	r3, #32
   13936:	f88d 300f 	strb.w	r3, [sp, #15]
    pClient = &attcCb.ccb[pCcb->connId - 1];
   1393a:	9b01      	ldr	r3, [sp, #4]
   1393c:	7f1b      	ldrb	r3, [r3, #28]
   1393e:	1e5a      	subs	r2, r3, #1
   13940:	4613      	mov	r3, r2
   13942:	00db      	lsls	r3, r3, #3
   13944:	1a9b      	subs	r3, r3, r2
   13946:	00db      	lsls	r3, r3, #3
   13948:	4a21      	ldr	r2, [pc, #132]	; (139d0 <attcConnCback+0x120>)
   1394a:	4413      	add	r3, r2
   1394c:	9302      	str	r3, [sp, #8]
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
   1394e:	9b02      	ldr	r3, [sp, #8]
   13950:	7c9b      	ldrb	r3, [r3, #18]
   13952:	2b00      	cmp	r3, #0
   13954:	d00c      	beq.n	13970 <attcConnCback+0xc0>
      WsfTimerStop(&pClient->outReqTimer);
   13956:	9b02      	ldr	r3, [sp, #8]
   13958:	3324      	adds	r3, #36	; 0x24
   1395a:	4618      	mov	r0, r3
   1395c:	f005 f930 	bl	18bc0 <WsfTimerStop>
      attcReqClear(pClient, &pClient->outReq, status);
   13960:	9b02      	ldr	r3, [sp, #8]
   13962:	3310      	adds	r3, #16
   13964:	f89d 200f 	ldrb.w	r2, [sp, #15]
   13968:	4619      	mov	r1, r3
   1396a:	9802      	ldr	r0, [sp, #8]
   1396c:	f000 f959 	bl	13c22 <attcReqClear>
    if (pClient->onDeck.hdr.event != ATTC_MSG_API_NONE)
   13970:	9b02      	ldr	r3, [sp, #8]
   13972:	799b      	ldrb	r3, [r3, #6]
   13974:	2b00      	cmp	r3, #0
   13976:	d007      	beq.n	13988 <attcConnCback+0xd8>
      attcReqClear(pClient, &pClient->onDeck, status);
   13978:	9b02      	ldr	r3, [sp, #8]
   1397a:	3304      	adds	r3, #4
   1397c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   13980:	4619      	mov	r1, r3
   13982:	9802      	ldr	r0, [sp, #8]
   13984:	f000 f94d 	bl	13c22 <attcReqClear>
    pClient->flowDisabled = FALSE;
   13988:	9b02      	ldr	r3, [sp, #8]
   1398a:	2200      	movs	r2, #0
   1398c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    pClient->cnfPending = FALSE;
   13990:	9b02      	ldr	r3, [sp, #8]
   13992:	2200      	movs	r2, #0
   13994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (attcCb.pSign != NULL)
   13998:	4b0d      	ldr	r3, [pc, #52]	; (139d0 <attcConnCback+0x120>)
   1399a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1399e:	2b00      	cmp	r3, #0
   139a0:	d008      	beq.n	139b4 <attcConnCback+0x104>
      (*attcCb.pSign->closeCback)(pClient, status);
   139a2:	4b0b      	ldr	r3, [pc, #44]	; (139d0 <attcConnCback+0x120>)
   139a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   139a8:	685b      	ldr	r3, [r3, #4]
   139aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   139ae:	4611      	mov	r1, r2
   139b0:	9802      	ldr	r0, [sp, #8]
   139b2:	4798      	blx	r3
    attcWriteCmdCallback(pCcb->connId, pClient, status);
   139b4:	9b01      	ldr	r3, [sp, #4]
   139b6:	7f1b      	ldrb	r3, [r3, #28]
   139b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   139bc:	9902      	ldr	r1, [sp, #8]
   139be:	4618      	mov	r0, r3
   139c0:	f7ff fd26 	bl	13410 <attcWriteCmdCallback>
}
   139c4:	bf00      	nop
   139c6:	b004      	add	sp, #16
   139c8:	bd10      	pop	{r4, pc}
   139ca:	bf00      	nop
   139cc:	10002b90 	.word	0x10002b90
   139d0:	10008adc 	.word	0x10008adc

000139d4 <attcMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcMsgCback(attcApiMsg_t *pMsg)
{
   139d4:	b500      	push	{lr}
   139d6:	b085      	sub	sp, #20
   139d8:	9001      	str	r0, [sp, #4]
  attcCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   139da:	9b01      	ldr	r3, [sp, #4]
   139dc:	881b      	ldrh	r3, [r3, #0]
   139de:	b2db      	uxtb	r3, r3
   139e0:	4618      	mov	r0, r3
   139e2:	f000 f89d 	bl	13b20 <attcCcbByConnId>
   139e6:	9003      	str	r0, [sp, #12]
   139e8:	9b03      	ldr	r3, [sp, #12]
   139ea:	2b00      	cmp	r3, #0
   139ec:	d10d      	bne.n	13a0a <attcMsgCback+0x36>
  {
    /* if message has a packet buffer */
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
   139ee:	9b01      	ldr	r3, [sp, #4]
   139f0:	789b      	ldrb	r3, [r3, #2]
   139f2:	2b00      	cmp	r3, #0
   139f4:	f000 808e 	beq.w	13b14 <attcMsgCback+0x140>
        pMsg->hdr.event <= ATTC_MSG_API_SIGNED_WRITE_CMD)
   139f8:	9b01      	ldr	r3, [sp, #4]
   139fa:	789b      	ldrb	r3, [r3, #2]
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
   139fc:	2b0d      	cmp	r3, #13
   139fe:	f200 8089 	bhi.w	13b14 <attcMsgCback+0x140>
    {
      /* free packet buffer */
      attcFreePkt(pMsg);
   13a02:	9801      	ldr	r0, [sp, #4]
   13a04:	f000 f8d4 	bl	13bb0 <attcFreePkt>
    }

    /* ignore if connection not in use */
    return;
   13a08:	e084      	b.n	13b14 <attcMsgCback+0x140>
  }

  /* if an API request to send packet (non-signed) */
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   13a0a:	9b01      	ldr	r3, [sp, #4]
   13a0c:	789b      	ldrb	r3, [r3, #2]
   13a0e:	2b0c      	cmp	r3, #12
   13a10:	d82d      	bhi.n	13a6e <attcMsgCback+0x9a>
  {
    /* verify no API request already waiting on deck, in progress, or no pending write command
       already for this handle */
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   13a12:	9b03      	ldr	r3, [sp, #12]
   13a14:	799b      	ldrb	r3, [r3, #6]
   13a16:	2b00      	cmp	r3, #0
   13a18:	d10e      	bne.n	13a38 <attcMsgCback+0x64>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   13a1a:	9b03      	ldr	r3, [sp, #12]
   13a1c:	7c9b      	ldrb	r3, [r3, #18]
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   13a1e:	2b01      	cmp	r3, #1
   13a20:	d80a      	bhi.n	13a38 <attcMsgCback+0x64>
        ((pMsg->hdr.event == ATTC_MSG_API_WRITE_CMD)  &&
   13a22:	9b01      	ldr	r3, [sp, #4]
   13a24:	789b      	ldrb	r3, [r3, #2]
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   13a26:	2b0a      	cmp	r3, #10
   13a28:	d10c      	bne.n	13a44 <attcMsgCback+0x70>
         attcPendWriteCmd(pCcb, pMsg)))
   13a2a:	9901      	ldr	r1, [sp, #4]
   13a2c:	9803      	ldr	r0, [sp, #12]
   13a2e:	f7ff fc91 	bl	13354 <attcPendWriteCmd>
   13a32:	4603      	mov	r3, r0
        ((pMsg->hdr.event == ATTC_MSG_API_WRITE_CMD)  &&
   13a34:	2b00      	cmp	r3, #0
   13a36:	d005      	beq.n	13a44 <attcMsgCback+0x70>
    {
      /* free request and call callback with failure status */
      attcReqClear(pCcb, pMsg, ATT_ERR_OVERFLOW);
   13a38:	2272      	movs	r2, #114	; 0x72
   13a3a:	9901      	ldr	r1, [sp, #4]
   13a3c:	9803      	ldr	r0, [sp, #12]
   13a3e:	f000 f8f0 	bl	13c22 <attcReqClear>
      return;
   13a42:	e068      	b.n	13b16 <attcMsgCback+0x142>
    }

    /* if MTU request in progress or flow controlled */
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_MTU || pCcb->flowDisabled)
   13a44:	9b03      	ldr	r3, [sp, #12]
   13a46:	7c9b      	ldrb	r3, [r3, #18]
   13a48:	2b01      	cmp	r3, #1
   13a4a:	d004      	beq.n	13a56 <attcMsgCback+0x82>
   13a4c:	9b03      	ldr	r3, [sp, #12]
   13a4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   13a52:	2b00      	cmp	r3, #0
   13a54:	d006      	beq.n	13a64 <attcMsgCback+0x90>
    {
      /* put request "on deck" for processing later */
      pCcb->onDeck = *pMsg;
   13a56:	9b03      	ldr	r3, [sp, #12]
   13a58:	9a01      	ldr	r2, [sp, #4]
   13a5a:	3304      	adds	r3, #4
   13a5c:	ca07      	ldmia	r2, {r0, r1, r2}
   13a5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   13a62:	e058      	b.n	13b16 <attcMsgCback+0x142>
    }
    /* otherwise ready to send; set up request */
    else
    {
      attcSetupReq(pCcb, pMsg);
   13a64:	9901      	ldr	r1, [sp, #4]
   13a66:	9803      	ldr	r0, [sp, #12]
   13a68:	f7ff fea8 	bl	137bc <attcSetupReq>
   13a6c:	e053      	b.n	13b16 <attcMsgCback+0x142>
    }
  }
  /* else if signed data event */
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
   13a6e:	9b01      	ldr	r3, [sp, #4]
   13a70:	789b      	ldrb	r3, [r3, #2]
   13a72:	2b0c      	cmp	r3, #12
   13a74:	d910      	bls.n	13a98 <attcMsgCback+0xc4>
           pMsg->hdr.event <= ATTC_MSG_CMAC_CMPL)
   13a76:	9b01      	ldr	r3, [sp, #4]
   13a78:	789b      	ldrb	r3, [r3, #2]
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
   13a7a:	2b0e      	cmp	r3, #14
   13a7c:	d80c      	bhi.n	13a98 <attcMsgCback+0xc4>
  {
    /* pass to message callback for signed data */
    if (attcCb.pSign != NULL)
   13a7e:	4b27      	ldr	r3, [pc, #156]	; (13b1c <attcMsgCback+0x148>)
   13a80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   13a84:	2b00      	cmp	r3, #0
   13a86:	d046      	beq.n	13b16 <attcMsgCback+0x142>
    {
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
   13a88:	4b24      	ldr	r3, [pc, #144]	; (13b1c <attcMsgCback+0x148>)
   13a8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   13a8e:	681b      	ldr	r3, [r3, #0]
   13a90:	9901      	ldr	r1, [sp, #4]
   13a92:	9803      	ldr	r0, [sp, #12]
   13a94:	4798      	blx	r3
    if (attcCb.pSign != NULL)
   13a96:	e03e      	b.n	13b16 <attcMsgCback+0x142>
    }
  }
  /* else if cancel request */
  else if (pMsg->hdr.event == ATTC_MSG_API_CANCEL)
   13a98:	9b01      	ldr	r3, [sp, #4]
   13a9a:	789b      	ldrb	r3, [r3, #2]
   13a9c:	2b0f      	cmp	r3, #15
   13a9e:	d120      	bne.n	13ae2 <attcMsgCback+0x10e>
  {
    /* free any out req (except mtu req) */
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
   13aa0:	9b03      	ldr	r3, [sp, #12]
   13aa2:	7c9b      	ldrb	r3, [r3, #18]
   13aa4:	2b00      	cmp	r3, #0
   13aa6:	d010      	beq.n	13aca <attcMsgCback+0xf6>
        pCcb->outReq.hdr.event != ATTC_MSG_API_MTU)
   13aa8:	9b03      	ldr	r3, [sp, #12]
   13aaa:	7c9b      	ldrb	r3, [r3, #18]
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
   13aac:	2b01      	cmp	r3, #1
   13aae:	d00c      	beq.n	13aca <attcMsgCback+0xf6>
    {
      WsfTimerStop(&pCcb->outReqTimer);
   13ab0:	9b03      	ldr	r3, [sp, #12]
   13ab2:	3324      	adds	r3, #36	; 0x24
   13ab4:	4618      	mov	r0, r3
   13ab6:	f005 f883 	bl	18bc0 <WsfTimerStop>
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_CANCELLED);
   13aba:	9b03      	ldr	r3, [sp, #12]
   13abc:	3310      	adds	r3, #16
   13abe:	2274      	movs	r2, #116	; 0x74
   13ac0:	4619      	mov	r1, r3
   13ac2:	9803      	ldr	r0, [sp, #12]
   13ac4:	f000 f8ad 	bl	13c22 <attcReqClear>
   13ac8:	e025      	b.n	13b16 <attcMsgCback+0x142>
    }
    /* else free any req on deck */
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   13aca:	9b03      	ldr	r3, [sp, #12]
   13acc:	799b      	ldrb	r3, [r3, #6]
   13ace:	2b00      	cmp	r3, #0
   13ad0:	d021      	beq.n	13b16 <attcMsgCback+0x142>
    {
      attcReqClear(pCcb, &pCcb->onDeck, ATT_ERR_CANCELLED);
   13ad2:	9b03      	ldr	r3, [sp, #12]
   13ad4:	3304      	adds	r3, #4
   13ad6:	2274      	movs	r2, #116	; 0x74
   13ad8:	4619      	mov	r1, r3
   13ada:	9803      	ldr	r0, [sp, #12]
   13adc:	f000 f8a1 	bl	13c22 <attcReqClear>
   13ae0:	e019      	b.n	13b16 <attcMsgCback+0x142>
    }
  }
  /* else if timeout */
  else if (pMsg->hdr.event == ATTC_MSG_REQ_TIMEOUT)
   13ae2:	9b01      	ldr	r3, [sp, #4]
   13ae4:	789b      	ldrb	r3, [r3, #2]
   13ae6:	2b10      	cmp	r3, #16
   13ae8:	d115      	bne.n	13b16 <attcMsgCback+0x142>
  {
    /* free any out req */
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE)
   13aea:	9b03      	ldr	r3, [sp, #12]
   13aec:	7c9b      	ldrb	r3, [r3, #18]
   13aee:	2b00      	cmp	r3, #0
   13af0:	d011      	beq.n	13b16 <attcMsgCback+0x142>
    {
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_TIMEOUT);
   13af2:	9b03      	ldr	r3, [sp, #12]
   13af4:	3310      	adds	r3, #16
   13af6:	2271      	movs	r2, #113	; 0x71
   13af8:	4619      	mov	r1, r3
   13afa:	9803      	ldr	r0, [sp, #12]
   13afc:	f000 f891 	bl	13c22 <attcReqClear>
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   13b00:	9b03      	ldr	r3, [sp, #12]
   13b02:	681b      	ldr	r3, [r3, #0]
   13b04:	9a03      	ldr	r2, [sp, #12]
   13b06:	6812      	ldr	r2, [r2, #0]
   13b08:	7f52      	ldrb	r2, [r2, #29]
   13b0a:	f042 0204 	orr.w	r2, r2, #4
   13b0e:	b2d2      	uxtb	r2, r2
   13b10:	775a      	strb	r2, [r3, #29]
   13b12:	e000      	b.n	13b16 <attcMsgCback+0x142>
    return;
   13b14:	bf00      	nop
    }
  }
}
   13b16:	b005      	add	sp, #20
   13b18:	f85d fb04 	ldr.w	pc, [sp], #4
   13b1c:	10008adc 	.word	0x10008adc

00013b20 <attcCcbByConnId>:
 *
 *  \return Pointer to connection control block or NULL if not in use.
 */
/*************************************************************************************************/
attcCcb_t *attcCcbByConnId(dmConnId_t connId)
{
   13b20:	b500      	push	{lr}
   13b22:	b083      	sub	sp, #12
   13b24:	4603      	mov	r3, r0
   13b26:	f88d 3007 	strb.w	r3, [sp, #7]
  if (DmConnInUse(connId))
   13b2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13b2e:	4618      	mov	r0, r3
   13b30:	f7fd fdee 	bl	11710 <DmConnInUse>
   13b34:	4603      	mov	r3, r0
   13b36:	2b00      	cmp	r3, #0
   13b38:	d009      	beq.n	13b4e <attcCcbByConnId+0x2e>
  {
    return &attcCb.ccb[connId - 1];
   13b3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13b3e:	1e5a      	subs	r2, r3, #1
   13b40:	4613      	mov	r3, r2
   13b42:	00db      	lsls	r3, r3, #3
   13b44:	1a9b      	subs	r3, r3, r2
   13b46:	00db      	lsls	r3, r3, #3
   13b48:	4a06      	ldr	r2, [pc, #24]	; (13b64 <attcCcbByConnId+0x44>)
   13b4a:	4413      	add	r3, r2
   13b4c:	e006      	b.n	13b5c <attcCcbByConnId+0x3c>
  }
  else
  {
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   13b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13b52:	4619      	mov	r1, r3
   13b54:	4804      	ldr	r0, [pc, #16]	; (13b68 <attcCcbByConnId+0x48>)
   13b56:	f005 f8f7 	bl	18d48 <WsfTrace>
    return NULL;
   13b5a:	2300      	movs	r3, #0
  }
}
   13b5c:	4618      	mov	r0, r3
   13b5e:	b003      	add	sp, #12
   13b60:	f85d fb04 	ldr.w	pc, [sp], #4
   13b64:	10008adc 	.word	0x10008adc
   13b68:	00028808 	.word	0x00028808

00013b6c <attcCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
attcCcb_t *attcCcbByHandle(uint16_t handle)
{
   13b6c:	b500      	push	{lr}
   13b6e:	b085      	sub	sp, #20
   13b70:	4603      	mov	r3, r0
   13b72:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   13b76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   13b7a:	4618      	mov	r0, r3
   13b7c:	f7fd fd94 	bl	116a8 <DmConnIdByHandle>
   13b80:	4603      	mov	r3, r0
   13b82:	f88d 300f 	strb.w	r3, [sp, #15]
   13b86:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13b8a:	2b00      	cmp	r3, #0
   13b8c:	d009      	beq.n	13ba2 <attcCcbByHandle+0x36>
  {
    return &attcCb.ccb[connId - 1];
   13b8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13b92:	1e5a      	subs	r2, r3, #1
   13b94:	4613      	mov	r3, r2
   13b96:	00db      	lsls	r3, r3, #3
   13b98:	1a9b      	subs	r3, r3, r2
   13b9a:	00db      	lsls	r3, r3, #3
   13b9c:	4a03      	ldr	r2, [pc, #12]	; (13bac <attcCcbByHandle+0x40>)
   13b9e:	4413      	add	r3, r2
   13ba0:	e000      	b.n	13ba4 <attcCcbByHandle+0x38>
  }

  return NULL;
   13ba2:	2300      	movs	r3, #0
}
   13ba4:	4618      	mov	r0, r3
   13ba6:	b005      	add	sp, #20
   13ba8:	f85d fb04 	ldr.w	pc, [sp], #4
   13bac:	10008adc 	.word	0x10008adc

00013bb0 <attcFreePkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcFreePkt(attcApiMsg_t *pMsg)
{
   13bb0:	b500      	push	{lr}
   13bb2:	b083      	sub	sp, #12
   13bb4:	9001      	str	r0, [sp, #4]
  if (pMsg->pPkt != NULL)
   13bb6:	9b01      	ldr	r3, [sp, #4]
   13bb8:	685b      	ldr	r3, [r3, #4]
   13bba:	2b00      	cmp	r3, #0
   13bbc:	d007      	beq.n	13bce <attcFreePkt+0x1e>
  {
    WsfMsgFree(pMsg->pPkt);
   13bbe:	9b01      	ldr	r3, [sp, #4]
   13bc0:	685b      	ldr	r3, [r3, #4]
   13bc2:	4618      	mov	r0, r3
   13bc4:	f004 fc6d 	bl	184a2 <WsfMsgFree>
    pMsg->pPkt = NULL;
   13bc8:	9b01      	ldr	r3, [sp, #4]
   13bca:	2200      	movs	r2, #0
   13bcc:	605a      	str	r2, [r3, #4]
  }
}
   13bce:	bf00      	nop
   13bd0:	b003      	add	sp, #12
   13bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00013bd6 <attcExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status)
{
   13bd6:	b510      	push	{r4, lr}
   13bd8:	b084      	sub	sp, #16
   13bda:	4604      	mov	r4, r0
   13bdc:	4608      	mov	r0, r1
   13bde:	4611      	mov	r1, r2
   13be0:	461a      	mov	r2, r3
   13be2:	4623      	mov	r3, r4
   13be4:	f88d 300f 	strb.w	r3, [sp, #15]
   13be8:	4603      	mov	r3, r0
   13bea:	f88d 300e 	strb.w	r3, [sp, #14]
   13bee:	460b      	mov	r3, r1
   13bf0:	f8ad 300c 	strh.w	r3, [sp, #12]
   13bf4:	4613      	mov	r3, r2
   13bf6:	f88d 300b 	strb.w	r3, [sp, #11]
  if (event != ATT_METHOD_MTU)
   13bfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
   13bfe:	2b01      	cmp	r3, #1
   13c00:	d00c      	beq.n	13c1c <attcExecCallback+0x46>
  {
    attExecCallback(connId, event, handle, status, 0);
   13c02:	f89d 400b 	ldrb.w	r4, [sp, #11]
   13c06:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   13c0a:	f89d 100e 	ldrb.w	r1, [sp, #14]
   13c0e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   13c12:	2300      	movs	r3, #0
   13c14:	9300      	str	r3, [sp, #0]
   13c16:	4623      	mov	r3, r4
   13c18:	f003 fe7c 	bl	17914 <attExecCallback>
  }
}
   13c1c:	bf00      	nop
   13c1e:	b004      	add	sp, #16
   13c20:	bd10      	pop	{r4, pc}

00013c22 <attcReqClear>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcReqClear(attcCcb_t *pCcb, attcApiMsg_t *pMsg, uint8_t status)
{
   13c22:	b500      	push	{lr}
   13c24:	b085      	sub	sp, #20
   13c26:	9003      	str	r0, [sp, #12]
   13c28:	9102      	str	r1, [sp, #8]
   13c2a:	4613      	mov	r3, r2
   13c2c:	f88d 3007 	strb.w	r3, [sp, #7]
  attcFreePkt(pMsg);
   13c30:	9802      	ldr	r0, [sp, #8]
   13c32:	f7ff ffbd 	bl	13bb0 <attcFreePkt>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   13c36:	9b03      	ldr	r3, [sp, #12]
   13c38:	681b      	ldr	r3, [r3, #0]
   13c3a:	7f18      	ldrb	r0, [r3, #28]
   13c3c:	9b02      	ldr	r3, [sp, #8]
   13c3e:	7899      	ldrb	r1, [r3, #2]
   13c40:	9b02      	ldr	r3, [sp, #8]
   13c42:	891a      	ldrh	r2, [r3, #8]
   13c44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13c48:	f7ff ffc5 	bl	13bd6 <attcExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   13c4c:	9b02      	ldr	r3, [sp, #8]
   13c4e:	2200      	movs	r2, #0
   13c50:	709a      	strb	r2, [r3, #2]
}
   13c52:	bf00      	nop
   13c54:	b005      	add	sp, #20
   13c56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013c5c <AttcInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcInit(void)
{
   13c5c:	b082      	sub	sp, #8
  uint8_t     i;
  attcCcb_t   *pCcb;

  /* Initialize control block */
  attcCb.pSign = NULL;
   13c5e:	4b1b      	ldr	r3, [pc, #108]	; (13ccc <AttcInit+0x70>)
   13c60:	2200      	movs	r2, #0
   13c62:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  attcCb.autoCnf = TRUE;
   13c66:	4b19      	ldr	r3, [pc, #100]	; (13ccc <AttcInit+0x70>)
   13c68:	2201      	movs	r2, #1
   13c6a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attcCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   13c6e:	2300      	movs	r3, #0
   13c70:	f88d 3007 	strb.w	r3, [sp, #7]
   13c74:	4b15      	ldr	r3, [pc, #84]	; (13ccc <AttcInit+0x70>)
   13c76:	9300      	str	r3, [sp, #0]
   13c78:	e01e      	b.n	13cb8 <AttcInit+0x5c>
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
   13c7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   13c7e:	4613      	mov	r3, r2
   13c80:	00db      	lsls	r3, r3, #3
   13c82:	4413      	add	r3, r2
   13c84:	009b      	lsls	r3, r3, #2
   13c86:	4a12      	ldr	r2, [pc, #72]	; (13cd0 <AttcInit+0x74>)
   13c88:	441a      	add	r2, r3
   13c8a:	9b00      	ldr	r3, [sp, #0]
   13c8c:	601a      	str	r2, [r3, #0]

    /* initialize timer */
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   13c8e:	4b10      	ldr	r3, [pc, #64]	; (13cd0 <AttcInit+0x74>)
   13c90:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   13c94:	9b00      	ldr	r3, [sp, #0]
   13c96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   13c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13c9e:	b29b      	uxth	r3, r3
   13ca0:	3301      	adds	r3, #1
   13ca2:	b29a      	uxth	r2, r3
   13ca4:	9b00      	ldr	r3, [sp, #0]
   13ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
  for (i = 0, pCcb = attcCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   13ca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13cac:	3301      	adds	r3, #1
   13cae:	f88d 3007 	strb.w	r3, [sp, #7]
   13cb2:	9b00      	ldr	r3, [sp, #0]
   13cb4:	3338      	adds	r3, #56	; 0x38
   13cb6:	9300      	str	r3, [sp, #0]
   13cb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13cbc:	2b02      	cmp	r3, #2
   13cbe:	d9dc      	bls.n	13c7a <AttcInit+0x1e>
  }

  /* set up callback interface */
  attCb.pClient = &attcFcnIf;
   13cc0:	4b03      	ldr	r3, [pc, #12]	; (13cd0 <AttcInit+0x74>)
   13cc2:	4a04      	ldr	r2, [pc, #16]	; (13cd4 <AttcInit+0x78>)
   13cc4:	66da      	str	r2, [r3, #108]	; 0x6c
}
   13cc6:	bf00      	nop
   13cc8:	b002      	add	sp, #8
   13cca:	4770      	bx	lr
   13ccc:	10008adc 	.word	0x10008adc
   13cd0:	10008c08 	.word	0x10008c08
   13cd4:	000298d8 	.word	0x000298d8

00013cd8 <attcProcErrRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcErrRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   13cd8:	b086      	sub	sp, #24
   13cda:	9003      	str	r0, [sp, #12]
   13cdc:	9201      	str	r2, [sp, #4]
   13cde:	9300      	str	r3, [sp, #0]
   13ce0:	460b      	mov	r3, r1
   13ce2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t *p;

  p =  pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   13ce6:	9b01      	ldr	r3, [sp, #4]
   13ce8:	3309      	adds	r3, #9
   13cea:	9305      	str	r3, [sp, #20]

  /* set callback event from stored method */
  pEvt->hdr.event = pCcb->outReq.hdr.event;
   13cec:	9b03      	ldr	r3, [sp, #12]
   13cee:	7c9a      	ldrb	r2, [r3, #18]
   13cf0:	9b00      	ldr	r3, [sp, #0]
   13cf2:	709a      	strb	r2, [r3, #2]

  /* ignore request opcode in the error response */
  p++;
   13cf4:	9b05      	ldr	r3, [sp, #20]
   13cf6:	3301      	adds	r3, #1
   13cf8:	9305      	str	r3, [sp, #20]

  /* if request was a read or write with a specific handle */
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
   13cfa:	9b00      	ldr	r3, [sp, #0]
   13cfc:	789b      	ldrb	r3, [r3, #2]
   13cfe:	2b05      	cmp	r3, #5
   13d00:	d00b      	beq.n	13d1a <attcProcErrRsp+0x42>
   13d02:	9b00      	ldr	r3, [sp, #0]
   13d04:	789b      	ldrb	r3, [r3, #2]
   13d06:	2b06      	cmp	r3, #6
   13d08:	d007      	beq.n	13d1a <attcProcErrRsp+0x42>
      pEvt->hdr.event == ATTC_WRITE_RSP || pEvt->hdr.event == ATTC_PREPARE_WRITE_RSP)
   13d0a:	9b00      	ldr	r3, [sp, #0]
   13d0c:	789b      	ldrb	r3, [r3, #2]
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
   13d0e:	2b09      	cmp	r3, #9
   13d10:	d003      	beq.n	13d1a <attcProcErrRsp+0x42>
      pEvt->hdr.event == ATTC_WRITE_RSP || pEvt->hdr.event == ATTC_PREPARE_WRITE_RSP)
   13d12:	9b00      	ldr	r3, [sp, #0]
   13d14:	789b      	ldrb	r3, [r3, #2]
   13d16:	2b0b      	cmp	r3, #11
   13d18:	d103      	bne.n	13d22 <attcProcErrRsp+0x4a>
  {
    /* ignore handle in the error response; callback will use stored handle from request */
    p += 2;
   13d1a:	9b05      	ldr	r3, [sp, #20]
   13d1c:	3302      	adds	r3, #2
   13d1e:	9305      	str	r3, [sp, #20]
   13d20:	e00f      	b.n	13d42 <attcProcErrRsp+0x6a>
  }
  else
  {
    /* set handle from packet */
    BSTREAM_TO_UINT16(pEvt->handle, p);
   13d22:	9b05      	ldr	r3, [sp, #20]
   13d24:	781b      	ldrb	r3, [r3, #0]
   13d26:	b29a      	uxth	r2, r3
   13d28:	9b05      	ldr	r3, [sp, #20]
   13d2a:	3301      	adds	r3, #1
   13d2c:	781b      	ldrb	r3, [r3, #0]
   13d2e:	b29b      	uxth	r3, r3
   13d30:	021b      	lsls	r3, r3, #8
   13d32:	b29b      	uxth	r3, r3
   13d34:	4413      	add	r3, r2
   13d36:	b29a      	uxth	r2, r3
   13d38:	9b00      	ldr	r3, [sp, #0]
   13d3a:	815a      	strh	r2, [r3, #10]
   13d3c:	9b05      	ldr	r3, [sp, #20]
   13d3e:	3302      	adds	r3, #2
   13d40:	9305      	str	r3, [sp, #20]
  }

  /* set status from error code in packet, but verify it's not 'success' */
  BSTREAM_TO_UINT8(pEvt->hdr.status, p);
   13d42:	9b05      	ldr	r3, [sp, #20]
   13d44:	1c5a      	adds	r2, r3, #1
   13d46:	9205      	str	r2, [sp, #20]
   13d48:	781a      	ldrb	r2, [r3, #0]
   13d4a:	9b00      	ldr	r3, [sp, #0]
   13d4c:	70da      	strb	r2, [r3, #3]
  if (pEvt->hdr.status == ATT_SUCCESS)
   13d4e:	9b00      	ldr	r3, [sp, #0]
   13d50:	78db      	ldrb	r3, [r3, #3]
   13d52:	2b00      	cmp	r3, #0
   13d54:	d102      	bne.n	13d5c <attcProcErrRsp+0x84>
  {
    pEvt->hdr.status = ATT_ERR_UNDEFINED;
   13d56:	9b00      	ldr	r3, [sp, #0]
   13d58:	2275      	movs	r2, #117	; 0x75
   13d5a:	70da      	strb	r2, [r3, #3]
  }

  /* no parameters so clear length */
  pEvt->valueLen = 0;
   13d5c:	9b00      	ldr	r3, [sp, #0]
   13d5e:	2200      	movs	r2, #0
   13d60:	811a      	strh	r2, [r3, #8]
}
   13d62:	bf00      	nop
   13d64:	b006      	add	sp, #24
   13d66:	4770      	bx	lr

00013d68 <attcProcMtuRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcMtuRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   13d68:	b530      	push	{r4, r5, lr}
   13d6a:	b087      	sub	sp, #28
   13d6c:	9003      	str	r0, [sp, #12]
   13d6e:	9201      	str	r2, [sp, #4]
   13d70:	9300      	str	r3, [sp, #0]
   13d72:	460b      	mov	r3, r1
   13d74:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t  mtu;

  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   13d78:	9b01      	ldr	r3, [sp, #4]
   13d7a:	3309      	adds	r3, #9
   13d7c:	781b      	ldrb	r3, [r3, #0]
   13d7e:	b29a      	uxth	r2, r3
   13d80:	9b01      	ldr	r3, [sp, #4]
   13d82:	330a      	adds	r3, #10
   13d84:	781b      	ldrb	r3, [r3, #0]
   13d86:	b29b      	uxth	r3, r3
   13d88:	021b      	lsls	r3, r3, #8
   13d8a:	b29b      	uxth	r3, r3
   13d8c:	4413      	add	r3, r2
   13d8e:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* verify */
  if (mtu < ATT_DEFAULT_MTU)
   13d92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13d96:	2b16      	cmp	r3, #22
   13d98:	d802      	bhi.n	13da0 <attcProcMtuRsp+0x38>
  {
    mtu = ATT_DEFAULT_MTU;
   13d9a:	2317      	movs	r3, #23
   13d9c:	f8ad 3016 	strh.w	r3, [sp, #22]
  }

  /* set mtu for the connection */
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   13da0:	9b03      	ldr	r3, [sp, #12]
   13da2:	681c      	ldr	r4, [r3, #0]
   13da4:	4b0d      	ldr	r3, [pc, #52]	; (13ddc <attcProcMtuRsp+0x74>)
   13da6:	681b      	ldr	r3, [r3, #0]
   13da8:	889b      	ldrh	r3, [r3, #4]
   13daa:	461d      	mov	r5, r3
   13dac:	f00a fba4 	bl	1e4f8 <HciGetMaxRxAclLen>
   13db0:	4603      	mov	r3, r0
   13db2:	3b04      	subs	r3, #4
   13db4:	429d      	cmp	r5, r3
   13db6:	da03      	bge.n	13dc0 <attcProcMtuRsp+0x58>
   13db8:	4b08      	ldr	r3, [pc, #32]	; (13ddc <attcProcMtuRsp+0x74>)
   13dba:	681b      	ldr	r3, [r3, #0]
   13dbc:	889b      	ldrh	r3, [r3, #4]
   13dbe:	e004      	b.n	13dca <attcProcMtuRsp+0x62>
   13dc0:	f00a fb9a 	bl	1e4f8 <HciGetMaxRxAclLen>
   13dc4:	4603      	mov	r3, r0
   13dc6:	3b04      	subs	r3, #4
   13dc8:	b29b      	uxth	r3, r3
   13dca:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   13dce:	461a      	mov	r2, r3
   13dd0:	4620      	mov	r0, r4
   13dd2:	f003 fd75 	bl	178c0 <attSetMtu>
}
   13dd6:	bf00      	nop
   13dd8:	b007      	add	sp, #28
   13dda:	bd30      	pop	{r4, r5, pc}
   13ddc:	10002b90 	.word	0x10002b90

00013de0 <attcProcFindOrReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindOrReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   13de0:	b08a      	sub	sp, #40	; 0x28
   13de2:	9003      	str	r0, [sp, #12]
   13de4:	9201      	str	r2, [sp, #4]
   13de6:	9300      	str	r3, [sp, #0]
   13de8:	460b      	mov	r3, r1
   13dea:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t  handle;
  uint16_t  nextHandle;
  uint16_t  prevHandle;
  uint8_t   paramLen;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   13dee:	9b01      	ldr	r3, [sp, #4]
   13df0:	3309      	adds	r3, #9
   13df2:	9309      	str	r3, [sp, #36]	; 0x24
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   13df4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   13df8:	3308      	adds	r3, #8
   13dfa:	9a01      	ldr	r2, [sp, #4]
   13dfc:	4413      	add	r3, r2
   13dfe:	9306      	str	r3, [sp, #24]

  /* parameter length depends on packet type */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   13e00:	9b03      	ldr	r3, [sp, #12]
   13e02:	7c9b      	ldrb	r3, [r3, #18]
   13e04:	2b02      	cmp	r3, #2
   13e06:	d10d      	bne.n	13e24 <attcProcFindOrReadRsp+0x44>
  {
    /* length in find info response is coded by UUID */
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
   13e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13e0a:	1c5a      	adds	r2, r3, #1
   13e0c:	9209      	str	r2, [sp, #36]	; 0x24
   13e0e:	781b      	ldrb	r3, [r3, #0]
   13e10:	2b01      	cmp	r3, #1
   13e12:	d103      	bne.n	13e1c <attcProcFindOrReadRsp+0x3c>
    {
      paramLen = ATT_16_UUID_LEN;
   13e14:	2302      	movs	r3, #2
   13e16:	f88d 301f 	strb.w	r3, [sp, #31]
   13e1a:	e016      	b.n	13e4a <attcProcFindOrReadRsp+0x6a>
    }
    else
    {
      paramLen = ATT_128_UUID_LEN;
   13e1c:	2310      	movs	r3, #16
   13e1e:	f88d 301f 	strb.w	r3, [sp, #31]
   13e22:	e012      	b.n	13e4a <attcProcFindOrReadRsp+0x6a>
    }
  }
  else if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_TYPE)
   13e24:	9b03      	ldr	r3, [sp, #12]
   13e26:	7c9b      	ldrb	r3, [r3, #18]
   13e28:	2b04      	cmp	r3, #4
   13e2a:	d107      	bne.n	13e3c <attcProcFindOrReadRsp+0x5c>
  {
    /* length in read by type response is handle plus parameter length */
    paramLen = *p++ - sizeof(uint16_t);
   13e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13e2e:	1c5a      	adds	r2, r3, #1
   13e30:	9209      	str	r2, [sp, #36]	; 0x24
   13e32:	781b      	ldrb	r3, [r3, #0]
   13e34:	3b02      	subs	r3, #2
   13e36:	f88d 301f 	strb.w	r3, [sp, #31]
   13e3a:	e006      	b.n	13e4a <attcProcFindOrReadRsp+0x6a>
  }
  else
  {
    /* length in read by group type response is two handles plus parameter length */
    paramLen = *p++ - (2 * sizeof(uint16_t));
   13e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13e3e:	1c5a      	adds	r2, r3, #1
   13e40:	9209      	str	r2, [sp, #36]	; 0x24
   13e42:	781b      	ldrb	r3, [r3, #0]
   13e44:	3b04      	subs	r3, #4
   13e46:	f88d 301f 	strb.w	r3, [sp, #31]
  }

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   13e4a:	9b03      	ldr	r3, [sp, #12]
   13e4c:	8bdb      	ldrh	r3, [r3, #30]
   13e4e:	f8ad 3020 	strh.w	r3, [sp, #32]
  while (p < pEnd)
   13e52:	e073      	b.n	13f3c <attcProcFindOrReadRsp+0x15c>
  {
    /* get and compare handle */
    BSTREAM_TO_UINT16(handle, p);
   13e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13e56:	781b      	ldrb	r3, [r3, #0]
   13e58:	b29a      	uxth	r2, r3
   13e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13e5c:	3301      	adds	r3, #1
   13e5e:	781b      	ldrb	r3, [r3, #0]
   13e60:	b29b      	uxth	r3, r3
   13e62:	021b      	lsls	r3, r3, #8
   13e64:	b29b      	uxth	r3, r3
   13e66:	4413      	add	r3, r2
   13e68:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   13e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13e6e:	3302      	adds	r3, #2
   13e70:	9309      	str	r3, [sp, #36]	; 0x24
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   13e72:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   13e76:	2b00      	cmp	r3, #0
   13e78:	d00f      	beq.n	13e9a <attcProcFindOrReadRsp+0xba>
   13e7a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13e7e:	2b00      	cmp	r3, #0
   13e80:	d00b      	beq.n	13e9a <attcProcFindOrReadRsp+0xba>
   13e82:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   13e86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13e8a:	429a      	cmp	r2, r3
   13e8c:	d305      	bcc.n	13e9a <attcProcFindOrReadRsp+0xba>
        handle > pCcb->outReqParams.h.endHandle)
   13e8e:	9b03      	ldr	r3, [sp, #12]
   13e90:	8c1b      	ldrh	r3, [r3, #32]
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   13e92:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   13e96:	429a      	cmp	r2, r3
   13e98:	d903      	bls.n	13ea2 <attcProcFindOrReadRsp+0xc2>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   13e9a:	9b00      	ldr	r3, [sp, #0]
   13e9c:	2273      	movs	r2, #115	; 0x73
   13e9e:	70da      	strb	r2, [r3, #3]
      break;
   13ea0:	e050      	b.n	13f44 <attcProcFindOrReadRsp+0x164>
    }

    /* if read by group type response get second handle */
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_GROUP_TYPE)
   13ea2:	9b03      	ldr	r3, [sp, #12]
   13ea4:	7c9b      	ldrb	r3, [r3, #18]
   13ea6:	2b08      	cmp	r3, #8
   13ea8:	d12c      	bne.n	13f04 <attcProcFindOrReadRsp+0x124>
    {
      prevHandle = handle;
   13eaa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   13eae:	f8ad 3016 	strh.w	r3, [sp, #22]
      BSTREAM_TO_UINT16(handle, p);
   13eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13eb4:	781b      	ldrb	r3, [r3, #0]
   13eb6:	b29a      	uxth	r2, r3
   13eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13eba:	3301      	adds	r3, #1
   13ebc:	781b      	ldrb	r3, [r3, #0]
   13ebe:	b29b      	uxth	r3, r3
   13ec0:	021b      	lsls	r3, r3, #8
   13ec2:	b29b      	uxth	r3, r3
   13ec4:	4413      	add	r3, r2
   13ec6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   13eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13ecc:	3302      	adds	r3, #2
   13ece:	9309      	str	r3, [sp, #36]	; 0x24
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
   13ed0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   13ed4:	2b00      	cmp	r3, #0
   13ed6:	d011      	beq.n	13efc <attcProcFindOrReadRsp+0x11c>
   13ed8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   13edc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13ee0:	429a      	cmp	r2, r3
   13ee2:	d30b      	bcc.n	13efc <attcProcFindOrReadRsp+0x11c>
   13ee4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   13ee8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13eec:	429a      	cmp	r2, r3
   13eee:	d305      	bcc.n	13efc <attcProcFindOrReadRsp+0x11c>
          handle > pCcb->outReqParams.h.endHandle)
   13ef0:	9b03      	ldr	r3, [sp, #12]
   13ef2:	8c1b      	ldrh	r3, [r3, #32]
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
   13ef4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   13ef8:	429a      	cmp	r2, r3
   13efa:	d903      	bls.n	13f04 <attcProcFindOrReadRsp+0x124>
      {
        pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   13efc:	9b00      	ldr	r3, [sp, #0]
   13efe:	2273      	movs	r2, #115	; 0x73
   13f00:	70da      	strb	r2, [r3, #3]
        break;
   13f02:	e01f      	b.n	13f44 <attcProcFindOrReadRsp+0x164>
      }
    }

    /* set next expected handle, with special case for max handle */
    if (handle == ATT_HANDLE_MAX)
   13f04:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   13f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13f0c:	4293      	cmp	r3, r2
   13f0e:	d103      	bne.n	13f18 <attcProcFindOrReadRsp+0x138>
    {
      nextHandle = 0;
   13f10:	2300      	movs	r3, #0
   13f12:	f8ad 3020 	strh.w	r3, [sp, #32]
   13f16:	e004      	b.n	13f22 <attcProcFindOrReadRsp+0x142>
    }
    else
    {
      nextHandle = handle + 1;
   13f18:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   13f1c:	3301      	adds	r3, #1
   13f1e:	f8ad 3020 	strh.w	r3, [sp, #32]
    }

    /* skip over parameter */
    p += paramLen;
   13f22:	f89d 301f 	ldrb.w	r3, [sp, #31]
   13f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13f28:	4413      	add	r3, r2
   13f2a:	9309      	str	r3, [sp, #36]	; 0x24

    /* check for truncated response */
    if (p > pEnd)
   13f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13f2e:	9b06      	ldr	r3, [sp, #24]
   13f30:	429a      	cmp	r2, r3
   13f32:	d903      	bls.n	13f3c <attcProcFindOrReadRsp+0x15c>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   13f34:	9b00      	ldr	r3, [sp, #0]
   13f36:	2273      	movs	r2, #115	; 0x73
   13f38:	70da      	strb	r2, [r3, #3]
      break;
   13f3a:	e003      	b.n	13f44 <attcProcFindOrReadRsp+0x164>
  while (p < pEnd)
   13f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13f3e:	9b06      	ldr	r3, [sp, #24]
   13f40:	429a      	cmp	r2, r3
   13f42:	d387      	bcc.n	13e54 <attcProcFindOrReadRsp+0x74>
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   13f44:	9b00      	ldr	r3, [sp, #0]
   13f46:	78db      	ldrb	r3, [r3, #3]
   13f48:	2b00      	cmp	r3, #0
   13f4a:	d11a      	bne.n	13f82 <attcProcFindOrReadRsp+0x1a2>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   13f4c:	9b03      	ldr	r3, [sp, #12]
   13f4e:	7cdb      	ldrb	r3, [r3, #19]
   13f50:	2b01      	cmp	r3, #1
   13f52:	d116      	bne.n	13f82 <attcProcFindOrReadRsp+0x1a2>
    {
      /* if all handles read */
      if (nextHandle == 0 || nextHandle == (pCcb->outReqParams.h.endHandle + 1))
   13f54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13f58:	2b00      	cmp	r3, #0
   13f5a:	d006      	beq.n	13f6a <attcProcFindOrReadRsp+0x18a>
   13f5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   13f60:	9b03      	ldr	r3, [sp, #12]
   13f62:	8c1b      	ldrh	r3, [r3, #32]
   13f64:	3301      	adds	r3, #1
   13f66:	429a      	cmp	r2, r3
   13f68:	d103      	bne.n	13f72 <attcProcFindOrReadRsp+0x192>
      {
        /* we're done */
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   13f6a:	9b03      	ldr	r3, [sp, #12]
   13f6c:	2200      	movs	r2, #0
   13f6e:	74da      	strb	r2, [r3, #19]
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   13f70:	e007      	b.n	13f82 <attcProcFindOrReadRsp+0x1a2>
        pCcb->outReqParams.h.startHandle = nextHandle;
   13f72:	9b03      	ldr	r3, [sp, #12]
   13f74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   13f78:	83da      	strh	r2, [r3, #30]
        pCcb->outReq.handle = nextHandle;
   13f7a:	9b03      	ldr	r3, [sp, #12]
   13f7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   13f80:	831a      	strh	r2, [r3, #24]
}
   13f82:	bf00      	nop
   13f84:	b00a      	add	sp, #40	; 0x28
   13f86:	4770      	bx	lr

00013f88 <attcProcReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   13f88:	b084      	sub	sp, #16
   13f8a:	9003      	str	r0, [sp, #12]
   13f8c:	9201      	str	r2, [sp, #4]
   13f8e:	9300      	str	r3, [sp, #0]
   13f90:	460b      	mov	r3, r1
   13f92:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* nothing to process */
}
   13f96:	bf00      	nop
   13f98:	b004      	add	sp, #16
   13f9a:	4770      	bx	lr

00013f9c <attcProcWriteRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   13f9c:	b084      	sub	sp, #16
   13f9e:	9003      	str	r0, [sp, #12]
   13fa0:	9201      	str	r2, [sp, #4]
   13fa2:	9300      	str	r3, [sp, #0]
   13fa4:	460b      	mov	r3, r1
   13fa6:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* no parameters so clear length */
  pEvt->valueLen = 0;
   13faa:	9b00      	ldr	r3, [sp, #0]
   13fac:	2200      	movs	r2, #0
   13fae:	811a      	strh	r2, [r3, #8]
}
   13fb0:	bf00      	nop
   13fb2:	b004      	add	sp, #16
   13fb4:	4770      	bx	lr
	...

00013fb8 <attcProcRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   13fb8:	b510      	push	{r4, lr}
   13fba:	b088      	sub	sp, #32
   13fbc:	9003      	str	r0, [sp, #12]
   13fbe:	460b      	mov	r3, r1
   13fc0:	9201      	str	r2, [sp, #4]
   13fc2:	f8ad 300a 	strh.w	r3, [sp, #10]
  attEvt_t    evt;

  /* if no request in progress ignore response */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_NONE)
   13fc6:	9b03      	ldr	r3, [sp, #12]
   13fc8:	7c9b      	ldrb	r3, [r3, #18]
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d071      	beq.n	140b2 <attcProcRsp+0xfa>
  {
    return;
  }

  /* get method */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   13fce:	9b01      	ldr	r3, [sp, #4]
   13fd0:	3308      	adds	r3, #8
   13fd2:	781b      	ldrb	r3, [r3, #0]
   13fd4:	105b      	asrs	r3, r3, #1
   13fd6:	b2db      	uxtb	r3, r3
   13fd8:	f88d 3012 	strb.w	r3, [sp, #18]

  /* if response method is not error and does not match stored method ignore response */
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
   13fdc:	f89d 3012 	ldrb.w	r3, [sp, #18]
   13fe0:	2b00      	cmp	r3, #0
   13fe2:	d005      	beq.n	13ff0 <attcProcRsp+0x38>
   13fe4:	f89d 2012 	ldrb.w	r2, [sp, #18]
   13fe8:	9b03      	ldr	r3, [sp, #12]
   13fea:	7c9b      	ldrb	r3, [r3, #18]
   13fec:	429a      	cmp	r2, r3
   13fee:	d162      	bne.n	140b6 <attcProcRsp+0xfe>
  {
    return;
  }

  /* stop request timer */
  WsfTimerStop(&pCcb->outReqTimer);
   13ff0:	9b03      	ldr	r3, [sp, #12]
   13ff2:	3324      	adds	r3, #36	; 0x24
   13ff4:	4618      	mov	r0, r3
   13ff6:	f004 fde3 	bl	18bc0 <WsfTimerStop>

  /* initialize event structure then process response */
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   13ffa:	9b01      	ldr	r3, [sp, #4]
   13ffc:	3309      	adds	r3, #9
   13ffe:	9305      	str	r3, [sp, #20]
  evt.valueLen = len - ATT_HDR_LEN;
   14000:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   14004:	3b01      	subs	r3, #1
   14006:	b29b      	uxth	r3, r3
   14008:	f8ad 3018 	strh.w	r3, [sp, #24]
  evt.handle = pCcb->outReq.handle;
   1400c:	9b03      	ldr	r3, [sp, #12]
   1400e:	8b1b      	ldrh	r3, [r3, #24]
   14010:	f8ad 301a 	strh.w	r3, [sp, #26]
  evt.hdr.status = ATT_SUCCESS;
   14014:	2300      	movs	r3, #0
   14016:	f88d 3013 	strb.w	r3, [sp, #19]
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   1401a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1401e:	461a      	mov	r2, r3
   14020:	4b26      	ldr	r3, [pc, #152]	; (140bc <attcProcRsp+0x104>)
   14022:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   14026:	ab04      	add	r3, sp, #16
   14028:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1402c:	9a01      	ldr	r2, [sp, #4]
   1402e:	9803      	ldr	r0, [sp, #12]
   14030:	47a0      	blx	r4

  /* if not continuing or status is not success */
  if ((pCcb->outReq.hdr.status == ATTC_NOT_CONTINUING) || (evt.hdr.status != ATT_SUCCESS))
   14032:	9b03      	ldr	r3, [sp, #12]
   14034:	7cdb      	ldrb	r3, [r3, #19]
   14036:	2b00      	cmp	r3, #0
   14038:	d003      	beq.n	14042 <attcProcRsp+0x8a>
   1403a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1403e:	2b00      	cmp	r3, #0
   14040:	d007      	beq.n	14052 <attcProcRsp+0x9a>
  {
    /* we're not sending another request so clear the out req */
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   14042:	9b03      	ldr	r3, [sp, #12]
   14044:	2200      	movs	r2, #0
   14046:	749a      	strb	r2, [r3, #18]
    attcFreePkt(&pCcb->outReq);
   14048:	9b03      	ldr	r3, [sp, #12]
   1404a:	3310      	adds	r3, #16
   1404c:	4618      	mov	r0, r3
   1404e:	f7ff fdaf 	bl	13bb0 <attcFreePkt>
  }

  /* call callback (if not mtu rsp) */
  if ((evt.hdr.event != ATT_METHOD_MTU) && attCb.cback)
   14052:	f89d 3012 	ldrb.w	r3, [sp, #18]
   14056:	2b01      	cmp	r3, #1
   14058:	d010      	beq.n	1407c <attcProcRsp+0xc4>
   1405a:	4b19      	ldr	r3, [pc, #100]	; (140c0 <attcProcRsp+0x108>)
   1405c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1405e:	2b00      	cmp	r3, #0
   14060:	d00c      	beq.n	1407c <attcProcRsp+0xc4>
  {
    /* set additional parameters and call callback */
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
   14062:	9b03      	ldr	r3, [sp, #12]
   14064:	7cdb      	ldrb	r3, [r3, #19]
   14066:	f88d 301c 	strb.w	r3, [sp, #28]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
   1406a:	9b03      	ldr	r3, [sp, #12]
   1406c:	8a1b      	ldrh	r3, [r3, #16]
   1406e:	f8ad 3010 	strh.w	r3, [sp, #16]
    (*attCb.cback)(&evt);
   14072:	4b13      	ldr	r3, [pc, #76]	; (140c0 <attcProcRsp+0x108>)
   14074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   14076:	aa04      	add	r2, sp, #16
   14078:	4610      	mov	r0, r2
   1407a:	4798      	blx	r3
  }

  /* if no flow control */
  if (!pCcb->flowDisabled)
   1407c:	9b03      	ldr	r3, [sp, #12]
   1407e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   14082:	2b00      	cmp	r3, #0
   14084:	d118      	bne.n	140b8 <attcProcRsp+0x100>
  {
    /* if out req ready */
    if (pCcb->outReq.pPkt != NULL)
   14086:	9b03      	ldr	r3, [sp, #12]
   14088:	695b      	ldr	r3, [r3, #20]
   1408a:	2b00      	cmp	r3, #0
   1408c:	d003      	beq.n	14096 <attcProcRsp+0xde>
    {
      /* build and send request */
      attcSendReq(pCcb);
   1408e:	9803      	ldr	r0, [sp, #12]
   14090:	f7ff fb82 	bl	13798 <attcSendReq>
   14094:	e010      	b.n	140b8 <attcProcRsp+0x100>
    }
    /* else if api is on deck */
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   14096:	9b03      	ldr	r3, [sp, #12]
   14098:	799b      	ldrb	r3, [r3, #6]
   1409a:	2b00      	cmp	r3, #0
   1409c:	d00c      	beq.n	140b8 <attcProcRsp+0x100>
    {
      /* set up and send request */
      attcSetupReq(pCcb, &pCcb->onDeck);
   1409e:	9b03      	ldr	r3, [sp, #12]
   140a0:	3304      	adds	r3, #4
   140a2:	4619      	mov	r1, r3
   140a4:	9803      	ldr	r0, [sp, #12]
   140a6:	f7ff fb89 	bl	137bc <attcSetupReq>

      /* clear on deck */
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
   140aa:	9b03      	ldr	r3, [sp, #12]
   140ac:	2200      	movs	r2, #0
   140ae:	719a      	strb	r2, [r3, #6]
   140b0:	e002      	b.n	140b8 <attcProcRsp+0x100>
    return;
   140b2:	bf00      	nop
   140b4:	e000      	b.n	140b8 <attcProcRsp+0x100>
    return;
   140b6:	bf00      	nop
    }
  }
}
   140b8:	b008      	add	sp, #32
   140ba:	bd10      	pop	{r4, pc}
   140bc:	0002991c 	.word	0x0002991c
   140c0:	10008c08 	.word	0x10008c08

000140c4 <attcProcInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcInd(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   140c4:	b500      	push	{lr}
   140c6:	b08b      	sub	sp, #44	; 0x2c
   140c8:	9003      	str	r0, [sp, #12]
   140ca:	460b      	mov	r3, r1
   140cc:	9201      	str	r2, [sp, #4]
   140ce:	f8ad 300a 	strh.w	r3, [sp, #10]
  attEvt_t    evt;
  uint8_t     *p;
  uint8_t     *pPkt;

  p = pPacket + L2C_PAYLOAD_START;
   140d2:	9b01      	ldr	r3, [sp, #4]
   140d4:	3308      	adds	r3, #8
   140d6:	9309      	str	r3, [sp, #36]	; 0x24

  /* parse packet and set callback event struct */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
   140d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   140da:	1c5a      	adds	r2, r3, #1
   140dc:	9209      	str	r2, [sp, #36]	; 0x24
   140de:	781b      	ldrb	r3, [r3, #0]
   140e0:	105b      	asrs	r3, r3, #1
   140e2:	b2db      	uxtb	r3, r3
   140e4:	f88d 3012 	strb.w	r3, [sp, #18]
  BSTREAM_TO_UINT16(evt.handle, p);
   140e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   140ea:	781b      	ldrb	r3, [r3, #0]
   140ec:	b29a      	uxth	r2, r3
   140ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   140f0:	3301      	adds	r3, #1
   140f2:	781b      	ldrb	r3, [r3, #0]
   140f4:	b29b      	uxth	r3, r3
   140f6:	021b      	lsls	r3, r3, #8
   140f8:	b29b      	uxth	r3, r3
   140fa:	4413      	add	r3, r2
   140fc:	b29b      	uxth	r3, r3
   140fe:	f8ad 301a 	strh.w	r3, [sp, #26]
   14102:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14104:	3302      	adds	r3, #2
   14106:	9309      	str	r3, [sp, #36]	; 0x24
  evt.pValue = p;
   14108:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1410a:	9305      	str	r3, [sp, #20]
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
   1410c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   14110:	3b03      	subs	r3, #3
   14112:	b29b      	uxth	r3, r3
   14114:	f8ad 3018 	strh.w	r3, [sp, #24]
  evt.hdr.param = pCcb->pMainCcb->connId;
   14118:	9b03      	ldr	r3, [sp, #12]
   1411a:	681b      	ldr	r3, [r3, #0]
   1411c:	7f1b      	ldrb	r3, [r3, #28]
   1411e:	b29b      	uxth	r3, r3
   14120:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.hdr.status = ATT_SUCCESS;
   14124:	2300      	movs	r3, #0
   14126:	f88d 3013 	strb.w	r3, [sp, #19]
  evt.continuing = FALSE;
   1412a:	2300      	movs	r3, #0
   1412c:	f88d 301c 	strb.w	r3, [sp, #28]

  /* verify handle and call callback */
  if ((evt.handle != 0) && attCb.cback)
   14130:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   14134:	2b00      	cmp	r3, #0
   14136:	d008      	beq.n	1414a <attcProcInd+0x86>
   14138:	4b19      	ldr	r3, [pc, #100]	; (141a0 <attcProcInd+0xdc>)
   1413a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1413c:	2b00      	cmp	r3, #0
   1413e:	d004      	beq.n	1414a <attcProcInd+0x86>
  {
    (*attCb.cback)(&evt);
   14140:	4b17      	ldr	r3, [pc, #92]	; (141a0 <attcProcInd+0xdc>)
   14142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   14144:	aa04      	add	r2, sp, #16
   14146:	4610      	mov	r0, r2
   14148:	4798      	blx	r3
  }

  /* if indication send confirm */
  if (attcCb.autoCnf && (evt.hdr.event == ATT_METHOD_VALUE_IND))
   1414a:	4b16      	ldr	r3, [pc, #88]	; (141a4 <attcProcInd+0xe0>)
   1414c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
   14150:	2b00      	cmp	r3, #0
   14152:	d01c      	beq.n	1418e <attcProcInd+0xca>
   14154:	f89d 3012 	ldrb.w	r3, [sp, #18]
   14158:	2b0e      	cmp	r3, #14
   1415a:	d118      	bne.n	1418e <attcProcInd+0xca>
  {
    if (!pCcb->flowDisabled)
   1415c:	9b03      	ldr	r3, [sp, #12]
   1415e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   14162:	2b00      	cmp	r3, #0
   14164:	d118      	bne.n	14198 <attcProcInd+0xd4>
    {
      if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   14166:	2009      	movs	r0, #9
   14168:	f003 fc10 	bl	1798c <attMsgAlloc>
   1416c:	9008      	str	r0, [sp, #32]
   1416e:	9b08      	ldr	r3, [sp, #32]
   14170:	2b00      	cmp	r3, #0
   14172:	d011      	beq.n	14198 <attcProcInd+0xd4>
      {
        *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   14174:	9b08      	ldr	r3, [sp, #32]
   14176:	3308      	adds	r3, #8
   14178:	221e      	movs	r2, #30
   1417a:	701a      	strb	r2, [r3, #0]
        L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   1417c:	9b03      	ldr	r3, [sp, #12]
   1417e:	681b      	ldr	r3, [r3, #0]
   14180:	8b19      	ldrh	r1, [r3, #24]
   14182:	9b08      	ldr	r3, [sp, #32]
   14184:	2201      	movs	r2, #1
   14186:	2004      	movs	r0, #4
   14188:	f007 fb6c 	bl	1b864 <L2cDataReq>
   1418c:	e005      	b.n	1419a <attcProcInd+0xd6>

    return;
  }

  /* mark confirm as pending; will be sent when flow enabled or application sends it. */
  pCcb->cnfPending = TRUE;
   1418e:	9b03      	ldr	r3, [sp, #12]
   14190:	2201      	movs	r2, #1
   14192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   14196:	e000      	b.n	1419a <attcProcInd+0xd6>
    return;
   14198:	bf00      	nop
}
   1419a:	b00b      	add	sp, #44	; 0x2c
   1419c:	f85d fb04 	ldr.w	pc, [sp], #4
   141a0:	10008c08 	.word	0x10008c08
   141a4:	10008adc 	.word	0x10008adc

000141a8 <attcSendMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendMsg(dmConnId_t connId, uint16_t handle, uint8_t msgId, attcPktParam_t *pPkt, bool_t continuing)
{
   141a8:	b500      	push	{lr}
   141aa:	b087      	sub	sp, #28
   141ac:	9300      	str	r3, [sp, #0]
   141ae:	4603      	mov	r3, r0
   141b0:	f88d 3007 	strb.w	r3, [sp, #7]
   141b4:	460b      	mov	r3, r1
   141b6:	f8ad 3004 	strh.w	r3, [sp, #4]
   141ba:	4613      	mov	r3, r2
   141bc:	f88d 3006 	strb.w	r3, [sp, #6]
  attcCcb_t   *pCcb;
  uint16_t    mtu;
  bool_t      transTimedOut;

  WsfTaskLock();
   141c0:	f004 f9e4 	bl	1858c <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   141c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   141c8:	4618      	mov	r0, r3
   141ca:	f7ff fca9 	bl	13b20 <attcCcbByConnId>
   141ce:	9003      	str	r0, [sp, #12]
   141d0:	9b03      	ldr	r3, [sp, #12]
   141d2:	2b00      	cmp	r3, #0
   141d4:	d011      	beq.n	141fa <attcSendMsg+0x52>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
   141d6:	9b03      	ldr	r3, [sp, #12]
   141d8:	681b      	ldr	r3, [r3, #0]
   141da:	8b5b      	ldrh	r3, [r3, #26]
   141dc:	f8ad 3016 	strh.w	r3, [sp, #22]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   141e0:	9b03      	ldr	r3, [sp, #12]
   141e2:	681b      	ldr	r3, [r3, #0]
   141e4:	7f5b      	ldrb	r3, [r3, #29]
   141e6:	f003 0304 	and.w	r3, r3, #4
   141ea:	2b00      	cmp	r3, #0
   141ec:	bf14      	ite	ne
   141ee:	2301      	movne	r3, #1
   141f0:	2300      	moveq	r3, #0
   141f2:	b2db      	uxtb	r3, r3
   141f4:	f88d 3015 	strb.w	r3, [sp, #21]
   141f8:	e005      	b.n	14206 <attcSendMsg+0x5e>
  }
  /* else connection not in use */
  else
  {
    /* MTU size unknown */
    mtu = 0;
   141fa:	2300      	movs	r3, #0
   141fc:	f8ad 3016 	strh.w	r3, [sp, #22]
    transTimedOut = FALSE;
   14200:	2300      	movs	r3, #0
   14202:	f88d 3015 	strb.w	r3, [sp, #21]
  }

  WsfTaskUnlock();
   14206:	f004 f9c6 	bl	18596 <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
   1420a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1420e:	2b00      	cmp	r3, #0
   14210:	d057      	beq.n	142c2 <attcSendMsg+0x11a>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
   14212:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14216:	2b00      	cmp	r3, #0
   14218:	d14a      	bne.n	142b0 <attcSendMsg+0x108>
    {
      uint16_t dataLen = 0;
   1421a:	2300      	movs	r3, #0
   1421c:	f8ad 3012 	strh.w	r3, [sp, #18]

      /* if packet is not null then find out its length */
      if (pPkt != NULL)
   14220:	9b00      	ldr	r3, [sp, #0]
   14222:	2b00      	cmp	r3, #0
   14224:	d011      	beq.n	1424a <attcSendMsg+0xa2>
      {
        /* if not prepare write request */
        if (msgId != ATTC_MSG_API_PREP_WRITE)
   14226:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1422a:	2b0b      	cmp	r3, #11
   1422c:	d004      	beq.n	14238 <attcSendMsg+0x90>
        {
          dataLen = pPkt->len;
   1422e:	9b00      	ldr	r3, [sp, #0]
   14230:	881b      	ldrh	r3, [r3, #0]
   14232:	f8ad 3012 	strh.w	r3, [sp, #18]
   14236:	e008      	b.n	1424a <attcSendMsg+0xa2>
        }
        /* else prepare write request */
        else
        {
          /* if not continuing */
          if (!continuing)
   14238:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1423c:	2b00      	cmp	r3, #0
   1423e:	d104      	bne.n	1424a <attcSendMsg+0xa2>
          {
            /* single prepare write request */
            dataLen = ATT_PREP_WRITE_REQ_LEN + pPkt->w.len;
   14240:	9b00      	ldr	r3, [sp, #0]
   14242:	881b      	ldrh	r3, [r3, #0]
   14244:	3305      	adds	r3, #5
   14246:	f8ad 3012 	strh.w	r3, [sp, #18]
          /* else will be sent as multiple prepare write requests */
        }
      }

      /* if packet length is less than or equal to negotiated MTU */
      if (dataLen <= mtu)
   1424a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1424e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   14252:	429a      	cmp	r2, r3
   14254:	d822      	bhi.n	1429c <attcSendMsg+0xf4>
      {
        attcApiMsg_t *pMsg;

        /* allocate message buffer */
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   14256:	200c      	movs	r0, #12
   14258:	f004 f90b 	bl	18472 <WsfMsgAlloc>
   1425c:	9002      	str	r0, [sp, #8]
   1425e:	9b02      	ldr	r3, [sp, #8]
   14260:	2b00      	cmp	r3, #0
   14262:	d02e      	beq.n	142c2 <attcSendMsg+0x11a>
        {
          /* set parameters */
          pMsg->hdr.param = connId;
   14264:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14268:	b29a      	uxth	r2, r3
   1426a:	9b02      	ldr	r3, [sp, #8]
   1426c:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = continuing;
   1426e:	9b02      	ldr	r3, [sp, #8]
   14270:	f89d 2020 	ldrb.w	r2, [sp, #32]
   14274:	70da      	strb	r2, [r3, #3]
          pMsg->hdr.event = msgId;
   14276:	9b02      	ldr	r3, [sp, #8]
   14278:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1427c:	709a      	strb	r2, [r3, #2]
          pMsg->pPkt = pPkt;
   1427e:	9b02      	ldr	r3, [sp, #8]
   14280:	9a00      	ldr	r2, [sp, #0]
   14282:	605a      	str	r2, [r3, #4]
          pMsg->handle = handle;
   14284:	9b02      	ldr	r3, [sp, #8]
   14286:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1428a:	811a      	strh	r2, [r3, #8]

          /* send message */
          WsfMsgSend(attCb.handlerId, pMsg);
   1428c:	4b11      	ldr	r3, [pc, #68]	; (142d4 <attcSendMsg+0x12c>)
   1428e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   14292:	9902      	ldr	r1, [sp, #8]
   14294:	4618      	mov	r0, r3
   14296:	f004 f910 	bl	184ba <WsfMsgSend>
          return;
   1429a:	e018      	b.n	142ce <attcSendMsg+0x126>
      }
      /* else packet length exceeds MTU size */
      else
      {
        /* call callback with failure status */
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   1429c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   142a0:	f89d 1006 	ldrb.w	r1, [sp, #6]
   142a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   142a8:	2377      	movs	r3, #119	; 0x77
   142aa:	f7ff fc94 	bl	13bd6 <attcExecCallback>
   142ae:	e008      	b.n	142c2 <attcSendMsg+0x11a>
    }
    else
    /* transaction's timed out */
    {
      /* call callback with failure status */
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   142b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   142b4:	f89d 1006 	ldrb.w	r1, [sp, #6]
   142b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   142bc:	2371      	movs	r3, #113	; 0x71
   142be:	f7ff fc8a 	bl	13bd6 <attcExecCallback>
    }
  }

  /* alloc failed, transaction's timed out or packet length exceeded MTU size; free packet buffer */
  if (pPkt != NULL)
   142c2:	9b00      	ldr	r3, [sp, #0]
   142c4:	2b00      	cmp	r3, #0
   142c6:	d002      	beq.n	142ce <attcSendMsg+0x126>
  {
    WsfMsgFree(pPkt);
   142c8:	9800      	ldr	r0, [sp, #0]
   142ca:	f004 f8ea 	bl	184a2 <WsfMsgFree>
  }
}
   142ce:	b007      	add	sp, #28
   142d0:	f85d fb04 	ldr.w	pc, [sp], #4
   142d4:	10008c08 	.word	0x10008c08

000142d8 <AttcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcMtuReq(dmConnId_t connId, uint16_t mtu)
{
   142d8:	b500      	push	{lr}
   142da:	b087      	sub	sp, #28
   142dc:	4603      	mov	r3, r0
   142de:	460a      	mov	r2, r1
   142e0:	f88d 300f 	strb.w	r3, [sp, #15]
   142e4:	4613      	mov	r3, r2
   142e6:	f8ad 300c 	strh.w	r3, [sp, #12]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
   142ea:	200b      	movs	r0, #11
   142ec:	f003 fb4e 	bl	1798c <attMsgAlloc>
   142f0:	9005      	str	r0, [sp, #20]
   142f2:	9b05      	ldr	r3, [sp, #20]
   142f4:	2b00      	cmp	r3, #0
   142f6:	d023      	beq.n	14340 <AttcMtuReq+0x68>
  {
    /* set length */
    pPkt->len = ATT_MTU_REQ_LEN;
   142f8:	9b05      	ldr	r3, [sp, #20]
   142fa:	2203      	movs	r2, #3
   142fc:	801a      	strh	r2, [r3, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
   142fe:	9b05      	ldr	r3, [sp, #20]
   14300:	3308      	adds	r3, #8
   14302:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_REQ);
   14304:	9b04      	ldr	r3, [sp, #16]
   14306:	1c5a      	adds	r2, r3, #1
   14308:	9204      	str	r2, [sp, #16]
   1430a:	2202      	movs	r2, #2
   1430c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, mtu);
   1430e:	9b04      	ldr	r3, [sp, #16]
   14310:	1c5a      	adds	r2, r3, #1
   14312:	9204      	str	r2, [sp, #16]
   14314:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   14318:	b2d2      	uxtb	r2, r2
   1431a:	701a      	strb	r2, [r3, #0]
   1431c:	9b04      	ldr	r3, [sp, #16]
   1431e:	1c5a      	adds	r2, r3, #1
   14320:	9204      	str	r2, [sp, #16]
   14322:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   14326:	0a12      	lsrs	r2, r2, #8
   14328:	b292      	uxth	r2, r2
   1432a:	b2d2      	uxtb	r2, r2
   1432c:	701a      	strb	r2, [r3, #0]

    /* send message */
    attcSendMsg(connId, 0, ATTC_MSG_API_MTU, pPkt, FALSE);
   1432e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14332:	2300      	movs	r3, #0
   14334:	9300      	str	r3, [sp, #0]
   14336:	9b05      	ldr	r3, [sp, #20]
   14338:	2201      	movs	r2, #1
   1433a:	2100      	movs	r1, #0
   1433c:	f7ff ff34 	bl	141a8 <attcSendMsg>
  }
}
   14340:	bf00      	nop
   14342:	b007      	add	sp, #28
   14344:	f85d fb04 	ldr.w	pc, [sp], #4

00014348 <AttcIndConfirm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcIndConfirm(dmConnId_t connId)
{
   14348:	b500      	push	{lr}
   1434a:	b085      	sub	sp, #20
   1434c:	4603      	mov	r3, r0
   1434e:	f88d 3007 	strb.w	r3, [sp, #7]
  attcCcb_t   *pCcb;
  uint8_t     *pPkt;

  pCcb = attcCcbByHandle(connId - 1);
   14352:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14356:	b29b      	uxth	r3, r3
   14358:	3b01      	subs	r3, #1
   1435a:	b29b      	uxth	r3, r3
   1435c:	4618      	mov	r0, r3
   1435e:	f7ff fc05 	bl	13b6c <attcCcbByHandle>
   14362:	9003      	str	r0, [sp, #12]

  /* If confirmation is pending */
  if (pCcb && pCcb->cnfPending && !pCcb->flowDisabled)
   14364:	9b03      	ldr	r3, [sp, #12]
   14366:	2b00      	cmp	r3, #0
   14368:	d020      	beq.n	143ac <AttcIndConfirm+0x64>
   1436a:	9b03      	ldr	r3, [sp, #12]
   1436c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
   14370:	2b00      	cmp	r3, #0
   14372:	d01b      	beq.n	143ac <AttcIndConfirm+0x64>
   14374:	9b03      	ldr	r3, [sp, #12]
   14376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   1437a:	2b00      	cmp	r3, #0
   1437c:	d116      	bne.n	143ac <AttcIndConfirm+0x64>
  {
    if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1437e:	2009      	movs	r0, #9
   14380:	f003 fb04 	bl	1798c <attMsgAlloc>
   14384:	9002      	str	r0, [sp, #8]
   14386:	9b02      	ldr	r3, [sp, #8]
   14388:	2b00      	cmp	r3, #0
   1438a:	d00f      	beq.n	143ac <AttcIndConfirm+0x64>
    {
      pCcb->cnfPending = FALSE;
   1438c:	9b03      	ldr	r3, [sp, #12]
   1438e:	2200      	movs	r2, #0
   14390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   14394:	9b02      	ldr	r3, [sp, #8]
   14396:	3308      	adds	r3, #8
   14398:	221e      	movs	r2, #30
   1439a:	701a      	strb	r2, [r3, #0]
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   1439c:	9b03      	ldr	r3, [sp, #12]
   1439e:	681b      	ldr	r3, [r3, #0]
   143a0:	8b19      	ldrh	r1, [r3, #24]
   143a2:	9b02      	ldr	r3, [sp, #8]
   143a4:	2201      	movs	r2, #1
   143a6:	2004      	movs	r0, #4
   143a8:	f007 fa5c 	bl	1b864 <L2cDataReq>
    }
  }
}
   143ac:	bf00      	nop
   143ae:	b005      	add	sp, #20
   143b0:	f85d fb04 	ldr.w	pc, [sp], #4

000143b4 <attcProcFindByTypeRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindByTypeRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   143b4:	b088      	sub	sp, #32
   143b6:	9003      	str	r0, [sp, #12]
   143b8:	9201      	str	r2, [sp, #4]
   143ba:	9300      	str	r3, [sp, #0]
   143bc:	460b      	mov	r3, r1
   143be:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t   *pEnd;
  uint16_t  startHandle;
  uint16_t  endHandle;
  uint16_t  nextHandle;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   143c2:	9b01      	ldr	r3, [sp, #4]
   143c4:	3309      	adds	r3, #9
   143c6:	9307      	str	r3, [sp, #28]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   143c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   143cc:	3308      	adds	r3, #8
   143ce:	9a01      	ldr	r2, [sp, #4]
   143d0:	4413      	add	r3, r2
   143d2:	9305      	str	r3, [sp, #20]

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   143d4:	9b03      	ldr	r3, [sp, #12]
   143d6:	8bdb      	ldrh	r3, [r3, #30]
   143d8:	f8ad 301a 	strh.w	r3, [sp, #26]
  while (p < pEnd)
   143dc:	e04e      	b.n	1447c <attcProcFindByTypeRsp+0xc8>
  {
    /* get handle pair */
    BSTREAM_TO_UINT16(startHandle, p);
   143de:	9b07      	ldr	r3, [sp, #28]
   143e0:	781b      	ldrb	r3, [r3, #0]
   143e2:	b29a      	uxth	r2, r3
   143e4:	9b07      	ldr	r3, [sp, #28]
   143e6:	3301      	adds	r3, #1
   143e8:	781b      	ldrb	r3, [r3, #0]
   143ea:	b29b      	uxth	r3, r3
   143ec:	021b      	lsls	r3, r3, #8
   143ee:	b29b      	uxth	r3, r3
   143f0:	4413      	add	r3, r2
   143f2:	f8ad 3012 	strh.w	r3, [sp, #18]
   143f6:	9b07      	ldr	r3, [sp, #28]
   143f8:	3302      	adds	r3, #2
   143fa:	9307      	str	r3, [sp, #28]
    BSTREAM_TO_UINT16(endHandle, p);
   143fc:	9b07      	ldr	r3, [sp, #28]
   143fe:	781b      	ldrb	r3, [r3, #0]
   14400:	b29a      	uxth	r2, r3
   14402:	9b07      	ldr	r3, [sp, #28]
   14404:	3301      	adds	r3, #1
   14406:	781b      	ldrb	r3, [r3, #0]
   14408:	b29b      	uxth	r3, r3
   1440a:	021b      	lsls	r3, r3, #8
   1440c:	b29b      	uxth	r3, r3
   1440e:	4413      	add	r3, r2
   14410:	f8ad 3010 	strh.w	r3, [sp, #16]
   14414:	9b07      	ldr	r3, [sp, #28]
   14416:	3302      	adds	r3, #2
   14418:	9307      	str	r3, [sp, #28]
     *  not greater than end handle of handle pair
     *  not less than than start handle of request or end handle of previous handle pair
     *  not greater than end handle of request
     * and no additional handle pairs following end handle = 0xFFFF
     */
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   1441a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1441e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14422:	429a      	cmp	r2, r3
   14424:	d80f      	bhi.n	14446 <attcProcFindByTypeRsp+0x92>
   14426:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1442a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1442e:	429a      	cmp	r2, r3
   14430:	d309      	bcc.n	14446 <attcProcFindByTypeRsp+0x92>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
   14432:	9b03      	ldr	r3, [sp, #12]
   14434:	8c1b      	ldrh	r3, [r3, #32]
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   14436:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1443a:	429a      	cmp	r2, r3
   1443c:	d803      	bhi.n	14446 <attcProcFindByTypeRsp+0x92>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
   1443e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   14442:	2b00      	cmp	r3, #0
   14444:	d103      	bne.n	1444e <attcProcFindByTypeRsp+0x9a>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   14446:	9b00      	ldr	r3, [sp, #0]
   14448:	2273      	movs	r2, #115	; 0x73
   1444a:	70da      	strb	r2, [r3, #3]
      break;
   1444c:	e01a      	b.n	14484 <attcProcFindByTypeRsp+0xd0>
    }

    /* set next expected handle, with special case for max handle */
    if (endHandle == ATT_HANDLE_MAX)
   1444e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14452:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14456:	4293      	cmp	r3, r2
   14458:	d103      	bne.n	14462 <attcProcFindByTypeRsp+0xae>
    {
      nextHandle = 0;
   1445a:	2300      	movs	r3, #0
   1445c:	f8ad 301a 	strh.w	r3, [sp, #26]
   14460:	e004      	b.n	1446c <attcProcFindByTypeRsp+0xb8>
    }
    else
    {
      nextHandle = endHandle + 1;
   14462:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14466:	3301      	adds	r3, #1
   14468:	f8ad 301a 	strh.w	r3, [sp, #26]
    }

    /* check for truncated response */
    if (p > pEnd)
   1446c:	9a07      	ldr	r2, [sp, #28]
   1446e:	9b05      	ldr	r3, [sp, #20]
   14470:	429a      	cmp	r2, r3
   14472:	d903      	bls.n	1447c <attcProcFindByTypeRsp+0xc8>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   14474:	9b00      	ldr	r3, [sp, #0]
   14476:	2273      	movs	r2, #115	; 0x73
   14478:	70da      	strb	r2, [r3, #3]
      break;
   1447a:	e003      	b.n	14484 <attcProcFindByTypeRsp+0xd0>
  while (p < pEnd)
   1447c:	9a07      	ldr	r2, [sp, #28]
   1447e:	9b05      	ldr	r3, [sp, #20]
   14480:	429a      	cmp	r2, r3
   14482:	d3ac      	bcc.n	143de <attcProcFindByTypeRsp+0x2a>
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   14484:	9b00      	ldr	r3, [sp, #0]
   14486:	78db      	ldrb	r3, [r3, #3]
   14488:	2b00      	cmp	r3, #0
   1448a:	d119      	bne.n	144c0 <attcProcFindByTypeRsp+0x10c>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   1448c:	9b03      	ldr	r3, [sp, #12]
   1448e:	7cdb      	ldrb	r3, [r3, #19]
   14490:	2b01      	cmp	r3, #1
   14492:	d115      	bne.n	144c0 <attcProcFindByTypeRsp+0x10c>
    {
      /* if all handles read */
      if (nextHandle == 0 || nextHandle > pCcb->outReqParams.h.endHandle)
   14494:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   14498:	2b00      	cmp	r3, #0
   1449a:	d005      	beq.n	144a8 <attcProcFindByTypeRsp+0xf4>
   1449c:	9b03      	ldr	r3, [sp, #12]
   1449e:	8c1b      	ldrh	r3, [r3, #32]
   144a0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   144a4:	429a      	cmp	r2, r3
   144a6:	d903      	bls.n	144b0 <attcProcFindByTypeRsp+0xfc>
      {
        /* we're done */
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   144a8:	9b03      	ldr	r3, [sp, #12]
   144aa:	2200      	movs	r2, #0
   144ac:	74da      	strb	r2, [r3, #19]
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   144ae:	e007      	b.n	144c0 <attcProcFindByTypeRsp+0x10c>
        pCcb->outReqParams.h.startHandle = nextHandle;
   144b0:	9b03      	ldr	r3, [sp, #12]
   144b2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   144b6:	83da      	strh	r2, [r3, #30]
        pCcb->outReq.handle = nextHandle;
   144b8:	9b03      	ldr	r3, [sp, #12]
   144ba:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   144be:	831a      	strh	r2, [r3, #24]
}
   144c0:	bf00      	nop
   144c2:	b008      	add	sp, #32
   144c4:	4770      	bx	lr

000144c6 <attcProcReadLongRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcReadLongRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   144c6:	b084      	sub	sp, #16
   144c8:	9003      	str	r0, [sp, #12]
   144ca:	9201      	str	r2, [sp, #4]
   144cc:	9300      	str	r3, [sp, #0]
   144ce:	460b      	mov	r3, r1
   144d0:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   144d4:	9b03      	ldr	r3, [sp, #12]
   144d6:	7cdb      	ldrb	r3, [r3, #19]
   144d8:	2b01      	cmp	r3, #1
   144da:	d112      	bne.n	14502 <attcProcReadLongRsp+0x3c>
  {
    /* length of response is less than mtu */
    if (len < pCcb->pMainCcb->mtu)
   144dc:	9b03      	ldr	r3, [sp, #12]
   144de:	681b      	ldr	r3, [r3, #0]
   144e0:	8b5b      	ldrh	r3, [r3, #26]
   144e2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   144e6:	429a      	cmp	r2, r3
   144e8:	d203      	bcs.n	144f2 <attcProcReadLongRsp+0x2c>
    {
      /* we're done */
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   144ea:	9b03      	ldr	r3, [sp, #12]
   144ec:	2200      	movs	r2, #0
   144ee:	74da      	strb	r2, [r3, #19]
    else
    {
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    }
  }
}
   144f0:	e007      	b.n	14502 <attcProcReadLongRsp+0x3c>
      pCcb->outReqParams.o.offset += pEvt->valueLen;
   144f2:	9b03      	ldr	r3, [sp, #12]
   144f4:	8bda      	ldrh	r2, [r3, #30]
   144f6:	9b00      	ldr	r3, [sp, #0]
   144f8:	891b      	ldrh	r3, [r3, #8]
   144fa:	4413      	add	r3, r2
   144fc:	b29a      	uxth	r2, r3
   144fe:	9b03      	ldr	r3, [sp, #12]
   14500:	83da      	strh	r2, [r3, #30]
}
   14502:	bf00      	nop
   14504:	b004      	add	sp, #16
   14506:	4770      	bx	lr

00014508 <attcProcPrepWriteRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcPrepWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   14508:	b084      	sub	sp, #16
   1450a:	9003      	str	r0, [sp, #12]
   1450c:	9201      	str	r2, [sp, #4]
   1450e:	9300      	str	r3, [sp, #0]
   14510:	460b      	mov	r3, r1
   14512:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   14516:	9b03      	ldr	r3, [sp, #12]
   14518:	7cdb      	ldrb	r3, [r3, #19]
   1451a:	2b01      	cmp	r3, #1
   1451c:	d106      	bne.n	1452c <attcProcPrepWriteRsp+0x24>
  {
    /* if no more data to send */
    if (pCcb->outReqParams.w.len == 0)
   1451e:	9b03      	ldr	r3, [sp, #12]
   14520:	8b9b      	ldrh	r3, [r3, #28]
   14522:	2b00      	cmp	r3, #0
   14524:	d102      	bne.n	1452c <attcProcPrepWriteRsp+0x24>
    {
      /* we're done */
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   14526:	9b03      	ldr	r3, [sp, #12]
   14528:	2200      	movs	r2, #0
   1452a:	74da      	strb	r2, [r3, #19]
    }
  }

  /* adjust attribute value and its length (adjusted by ATT header length already) */
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   1452c:	9b00      	ldr	r3, [sp, #0]
   1452e:	685b      	ldr	r3, [r3, #4]
   14530:	1d1a      	adds	r2, r3, #4
   14532:	9b00      	ldr	r3, [sp, #0]
   14534:	605a      	str	r2, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   14536:	9b00      	ldr	r3, [sp, #0]
   14538:	891b      	ldrh	r3, [r3, #8]
   1453a:	3b04      	subs	r3, #4
   1453c:	b29a      	uxth	r2, r3
   1453e:	9b00      	ldr	r3, [sp, #0]
   14540:	811a      	strh	r2, [r3, #8]
}
   14542:	bf00      	nop
   14544:	b004      	add	sp, #16
   14546:	4770      	bx	lr

00014548 <attsCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsCccCback(dmConnId_t connId, uint8_t idx, uint16_t handle, uint16_t value)
{
   14548:	b510      	push	{r4, lr}
   1454a:	b086      	sub	sp, #24
   1454c:	4604      	mov	r4, r0
   1454e:	4608      	mov	r0, r1
   14550:	4611      	mov	r1, r2
   14552:	461a      	mov	r2, r3
   14554:	4623      	mov	r3, r4
   14556:	f88d 3007 	strb.w	r3, [sp, #7]
   1455a:	4603      	mov	r3, r0
   1455c:	f88d 3006 	strb.w	r3, [sp, #6]
   14560:	460b      	mov	r3, r1
   14562:	f8ad 3004 	strh.w	r3, [sp, #4]
   14566:	4613      	mov	r3, r2
   14568:	f8ad 3002 	strh.w	r3, [sp, #2]
  attsCccEvt_t  evt;

  evt.hdr.event = ATTS_CCC_STATE_IND;
   1456c:	2310      	movs	r3, #16
   1456e:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.hdr.param = connId;
   14572:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14576:	b29b      	uxth	r3, r3
   14578:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.idx = idx;
   1457c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14580:	f88d 3014 	strb.w	r3, [sp, #20]
  evt.handle = handle;
   14584:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14588:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.value = value;
   1458c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14590:	f8ad 3012 	strh.w	r3, [sp, #18]

  (*attsCccCb.cback)(&evt);
   14594:	4b03      	ldr	r3, [pc, #12]	; (145a4 <attsCccCback+0x5c>)
   14596:	691b      	ldr	r3, [r3, #16]
   14598:	aa03      	add	r2, sp, #12
   1459a:	4610      	mov	r0, r2
   1459c:	4798      	blx	r3
}
   1459e:	bf00      	nop
   145a0:	b006      	add	sp, #24
   145a2:	bd10      	pop	{r4, pc}
   145a4:	10003670 	.word	0x10003670

000145a8 <attsCccAllocTbl>:
 *
 *  \return Pointer into the CCC table.
 */
/*************************************************************************************************/
static uint16_t *attsCccAllocTbl(dmConnId_t connId)
{
   145a8:	b510      	push	{r4, lr}
   145aa:	b082      	sub	sp, #8
   145ac:	4603      	mov	r3, r0
   145ae:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  /* if not already allocated */
  if (attsCccCb.pCccTbl[connId - 1] == NULL)
   145b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   145b6:	3b01      	subs	r3, #1
   145b8:	4a0e      	ldr	r2, [pc, #56]	; (145f4 <attsCccAllocTbl+0x4c>)
   145ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145be:	2b00      	cmp	r3, #0
   145c0:	d10e      	bne.n	145e0 <attsCccAllocTbl+0x38>
  {
    WSF_ASSERT(attsCccCb.setLen > 0);

    /* allocate new buffer */
    attsCccCb.pCccTbl[connId - 1] = WsfBufAlloc(attsCccCb.setLen * sizeof(uint16_t));
   145c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   145c6:	1e5c      	subs	r4, r3, #1
   145c8:	4b0a      	ldr	r3, [pc, #40]	; (145f4 <attsCccAllocTbl+0x4c>)
   145ca:	7d1b      	ldrb	r3, [r3, #20]
   145cc:	b29b      	uxth	r3, r3
   145ce:	005b      	lsls	r3, r3, #1
   145d0:	b29b      	uxth	r3, r3
   145d2:	4618      	mov	r0, r3
   145d4:	f003 feb2 	bl	1833c <WsfBufAlloc>
   145d8:	4602      	mov	r2, r0
   145da:	4b06      	ldr	r3, [pc, #24]	; (145f4 <attsCccAllocTbl+0x4c>)
   145dc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  }

  return attsCccCb.pCccTbl[connId - 1];
   145e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   145e4:	3b01      	subs	r3, #1
   145e6:	4a03      	ldr	r2, [pc, #12]	; (145f4 <attsCccAllocTbl+0x4c>)
   145e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
   145ec:	4618      	mov	r0, r3
   145ee:	b002      	add	sp, #8
   145f0:	bd10      	pop	{r4, pc}
   145f2:	bf00      	nop
   145f4:	10003670 	.word	0x10003670

000145f8 <attsCccGetTbl>:
 *
 *  \return Pointer into the CCC table.
 */
/*************************************************************************************************/
static uint16_t *attsCccGetTbl(dmConnId_t connId)
{
   145f8:	b082      	sub	sp, #8
   145fa:	4603      	mov	r3, r0
   145fc:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return attsCccCb.pCccTbl[connId - 1];
   14600:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14604:	3b01      	subs	r3, #1
   14606:	4a03      	ldr	r2, [pc, #12]	; (14614 <attsCccGetTbl+0x1c>)
   14608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
   1460c:	4618      	mov	r0, r3
   1460e:	b002      	add	sp, #8
   14610:	4770      	bx	lr
   14612:	bf00      	nop
   14614:	10003670 	.word	0x10003670

00014618 <attsCccFreeTbl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsCccFreeTbl(dmConnId_t connId)
{
   14618:	b500      	push	{lr}
   1461a:	b083      	sub	sp, #12
   1461c:	4603      	mov	r3, r0
   1461e:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  if (attsCccCb.pCccTbl[connId - 1] != NULL)
   14622:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14626:	3b01      	subs	r3, #1
   14628:	4a0c      	ldr	r2, [pc, #48]	; (1465c <attsCccFreeTbl+0x44>)
   1462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1462e:	2b00      	cmp	r3, #0
   14630:	d00f      	beq.n	14652 <attsCccFreeTbl+0x3a>
  {
    WsfBufFree(attsCccCb.pCccTbl[connId - 1]);
   14632:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14636:	3b01      	subs	r3, #1
   14638:	4a08      	ldr	r2, [pc, #32]	; (1465c <attsCccFreeTbl+0x44>)
   1463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1463e:	4618      	mov	r0, r3
   14640:	f003 fec2 	bl	183c8 <WsfBufFree>
    attsCccCb.pCccTbl[connId - 1] = NULL;
   14644:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14648:	3b01      	subs	r3, #1
   1464a:	4a04      	ldr	r2, [pc, #16]	; (1465c <attsCccFreeTbl+0x44>)
   1464c:	2100      	movs	r1, #0
   1464e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
}
   14652:	bf00      	nop
   14654:	b003      	add	sp, #12
   14656:	f85d fb04 	ldr.w	pc, [sp], #4
   1465a:	bf00      	nop
   1465c:	10003670 	.word	0x10003670

00014660 <attsCccReadValue>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccReadValue(dmConnId_t connId, uint16_t handle, uint8_t *pValue)
{
   14660:	b500      	push	{lr}
   14662:	b087      	sub	sp, #28
   14664:	4603      	mov	r3, r0
   14666:	9200      	str	r2, [sp, #0]
   14668:	f88d 3007 	strb.w	r3, [sp, #7]
   1466c:	460b      	mov	r3, r1
   1466e:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsCccSet_t  *pSet;
  uint16_t      *pTbl;
  uint8_t       i;

  /* find handle in handle array */
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   14672:	4b26      	ldr	r3, [pc, #152]	; (1470c <attsCccReadValue+0xac>)
   14674:	68db      	ldr	r3, [r3, #12]
   14676:	9305      	str	r3, [sp, #20]
   14678:	2300      	movs	r3, #0
   1467a:	f88d 3013 	strb.w	r3, [sp, #19]
   1467e:	e00d      	b.n	1469c <attsCccReadValue+0x3c>
  {
    if (pSet->handle == handle)
   14680:	9b05      	ldr	r3, [sp, #20]
   14682:	881b      	ldrh	r3, [r3, #0]
   14684:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   14688:	429a      	cmp	r2, r3
   1468a:	d00e      	beq.n	146aa <attsCccReadValue+0x4a>
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   1468c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14690:	3301      	adds	r3, #1
   14692:	f88d 3013 	strb.w	r3, [sp, #19]
   14696:	9b05      	ldr	r3, [sp, #20]
   14698:	3306      	adds	r3, #6
   1469a:	9305      	str	r3, [sp, #20]
   1469c:	4b1b      	ldr	r3, [pc, #108]	; (1470c <attsCccReadValue+0xac>)
   1469e:	7d1b      	ldrb	r3, [r3, #20]
   146a0:	f89d 2013 	ldrb.w	r2, [sp, #19]
   146a4:	429a      	cmp	r2, r3
   146a6:	d3eb      	bcc.n	14680 <attsCccReadValue+0x20>
   146a8:	e000      	b.n	146ac <attsCccReadValue+0x4c>
    {
      break;
   146aa:	bf00      	nop
    }
  }

  /* if handle not found return error */
  if (i == attsCccCb.setLen)
   146ac:	4b17      	ldr	r3, [pc, #92]	; (1470c <attsCccReadValue+0xac>)
   146ae:	7d1b      	ldrb	r3, [r3, #20]
   146b0:	f89d 2013 	ldrb.w	r2, [sp, #19]
   146b4:	429a      	cmp	r2, r3
   146b6:	d101      	bne.n	146bc <attsCccReadValue+0x5c>
  {
    return ATT_ERR_NOT_FOUND;
   146b8:	230a      	movs	r3, #10
   146ba:	e023      	b.n	14704 <attsCccReadValue+0xa4>
  }

  /* get pointer to the table for this connection */
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   146bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146c0:	4618      	mov	r0, r3
   146c2:	f7ff ff99 	bl	145f8 <attsCccGetTbl>
   146c6:	9003      	str	r0, [sp, #12]
   146c8:	9b03      	ldr	r3, [sp, #12]
   146ca:	2b00      	cmp	r3, #0
   146cc:	d019      	beq.n	14702 <attsCccReadValue+0xa2>
  {
    /* read value */
    UINT16_TO_BSTREAM(pValue, pTbl[i]);
   146ce:	9b00      	ldr	r3, [sp, #0]
   146d0:	1c5a      	adds	r2, r3, #1
   146d2:	9200      	str	r2, [sp, #0]
   146d4:	f89d 2013 	ldrb.w	r2, [sp, #19]
   146d8:	0052      	lsls	r2, r2, #1
   146da:	9903      	ldr	r1, [sp, #12]
   146dc:	440a      	add	r2, r1
   146de:	8812      	ldrh	r2, [r2, #0]
   146e0:	b2d2      	uxtb	r2, r2
   146e2:	701a      	strb	r2, [r3, #0]
   146e4:	9b00      	ldr	r3, [sp, #0]
   146e6:	1c5a      	adds	r2, r3, #1
   146e8:	9200      	str	r2, [sp, #0]
   146ea:	f89d 2013 	ldrb.w	r2, [sp, #19]
   146ee:	0052      	lsls	r2, r2, #1
   146f0:	9903      	ldr	r1, [sp, #12]
   146f2:	440a      	add	r2, r1
   146f4:	8812      	ldrh	r2, [r2, #0]
   146f6:	0a12      	lsrs	r2, r2, #8
   146f8:	b292      	uxth	r2, r2
   146fa:	b2d2      	uxtb	r2, r2
   146fc:	701a      	strb	r2, [r3, #0]

    return ATT_SUCCESS;
   146fe:	2300      	movs	r3, #0
   14700:	e000      	b.n	14704 <attsCccReadValue+0xa4>
  }
  else
  {
    return ATT_ERR_RESOURCES;
   14702:	2311      	movs	r3, #17
  }
}
   14704:	4618      	mov	r0, r3
   14706:	b007      	add	sp, #28
   14708:	f85d fb04 	ldr.w	pc, [sp], #4
   1470c:	10003670 	.word	0x10003670

00014710 <attsCccWriteValue>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccWriteValue(dmConnId_t connId, uint16_t handle, uint8_t *pValue)
{
   14710:	b500      	push	{lr}
   14712:	b087      	sub	sp, #28
   14714:	4603      	mov	r3, r0
   14716:	9200      	str	r2, [sp, #0]
   14718:	f88d 3007 	strb.w	r3, [sp, #7]
   1471c:	460b      	mov	r3, r1
   1471e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       i;
  uint16_t      value;
  uint16_t      prevValue;

  /* find handle in handle array */
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   14722:	4b3d      	ldr	r3, [pc, #244]	; (14818 <attsCccWriteValue+0x108>)
   14724:	68db      	ldr	r3, [r3, #12]
   14726:	9305      	str	r3, [sp, #20]
   14728:	2300      	movs	r3, #0
   1472a:	f88d 3013 	strb.w	r3, [sp, #19]
   1472e:	e00d      	b.n	1474c <attsCccWriteValue+0x3c>
  {
    if (pSet->handle == handle)
   14730:	9b05      	ldr	r3, [sp, #20]
   14732:	881b      	ldrh	r3, [r3, #0]
   14734:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   14738:	429a      	cmp	r2, r3
   1473a:	d00e      	beq.n	1475a <attsCccWriteValue+0x4a>
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   1473c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14740:	3301      	adds	r3, #1
   14742:	f88d 3013 	strb.w	r3, [sp, #19]
   14746:	9b05      	ldr	r3, [sp, #20]
   14748:	3306      	adds	r3, #6
   1474a:	9305      	str	r3, [sp, #20]
   1474c:	4b32      	ldr	r3, [pc, #200]	; (14818 <attsCccWriteValue+0x108>)
   1474e:	7d1b      	ldrb	r3, [r3, #20]
   14750:	f89d 2013 	ldrb.w	r2, [sp, #19]
   14754:	429a      	cmp	r2, r3
   14756:	d3eb      	bcc.n	14730 <attsCccWriteValue+0x20>
   14758:	e000      	b.n	1475c <attsCccWriteValue+0x4c>
    {
      break;
   1475a:	bf00      	nop
    }
  }

  /* if handle not found return error */
  if (i == attsCccCb.setLen)
   1475c:	4b2e      	ldr	r3, [pc, #184]	; (14818 <attsCccWriteValue+0x108>)
   1475e:	7d1b      	ldrb	r3, [r3, #20]
   14760:	f89d 2013 	ldrb.w	r2, [sp, #19]
   14764:	429a      	cmp	r2, r3
   14766:	d101      	bne.n	1476c <attsCccWriteValue+0x5c>
  {
    return ATT_ERR_NOT_FOUND;
   14768:	230a      	movs	r3, #10
   1476a:	e051      	b.n	14810 <attsCccWriteValue+0x100>
  }

  BYTES_TO_UINT16(value, pValue);
   1476c:	9b00      	ldr	r3, [sp, #0]
   1476e:	781b      	ldrb	r3, [r3, #0]
   14770:	b29a      	uxth	r2, r3
   14772:	9b00      	ldr	r3, [sp, #0]
   14774:	3301      	adds	r3, #1
   14776:	781b      	ldrb	r3, [r3, #0]
   14778:	b29b      	uxth	r3, r3
   1477a:	021b      	lsls	r3, r3, #8
   1477c:	b29b      	uxth	r3, r3
   1477e:	4413      	add	r3, r2
   14780:	f8ad 3010 	strh.w	r3, [sp, #16]

  /* verify value range */
  if (((value != 0) && (value != ATT_CLIENT_CFG_NOTIFY) && (value != ATT_CLIENT_CFG_INDICATE)) ||
   14784:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14788:	2b00      	cmp	r3, #0
   1478a:	d007      	beq.n	1479c <attsCccWriteValue+0x8c>
   1478c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14790:	2b01      	cmp	r3, #1
   14792:	d003      	beq.n	1479c <attsCccWriteValue+0x8c>
   14794:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14798:	2b02      	cmp	r3, #2
   1479a:	d10b      	bne.n	147b4 <attsCccWriteValue+0xa4>
   1479c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   147a0:	2b00      	cmp	r3, #0
   147a2:	d009      	beq.n	147b8 <attsCccWriteValue+0xa8>
      ((value != 0) && ((value & pSet->valueRange) == 0)))
   147a4:	9b05      	ldr	r3, [sp, #20]
   147a6:	885a      	ldrh	r2, [r3, #2]
   147a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   147ac:	4013      	ands	r3, r2
   147ae:	b29b      	uxth	r3, r3
   147b0:	2b00      	cmp	r3, #0
   147b2:	d101      	bne.n	147b8 <attsCccWriteValue+0xa8>
  {
    return ATT_ERR_VALUE_RANGE;
   147b4:	2380      	movs	r3, #128	; 0x80
   147b6:	e02b      	b.n	14810 <attsCccWriteValue+0x100>
  }

  /* get pointer to the table for this connection */
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   147b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   147bc:	4618      	mov	r0, r3
   147be:	f7ff ff1b 	bl	145f8 <attsCccGetTbl>
   147c2:	9003      	str	r0, [sp, #12]
   147c4:	9b03      	ldr	r3, [sp, #12]
   147c6:	2b00      	cmp	r3, #0
   147c8:	d021      	beq.n	1480e <attsCccWriteValue+0xfe>
  {
    /* write value */
    prevValue = pTbl[i];
   147ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
   147ce:	005b      	lsls	r3, r3, #1
   147d0:	9a03      	ldr	r2, [sp, #12]
   147d2:	4413      	add	r3, r2
   147d4:	881b      	ldrh	r3, [r3, #0]
   147d6:	f8ad 300a 	strh.w	r3, [sp, #10]
    pTbl[i] = value;
   147da:	f89d 3013 	ldrb.w	r3, [sp, #19]
   147de:	005b      	lsls	r3, r3, #1
   147e0:	9a03      	ldr	r2, [sp, #12]
   147e2:	4413      	add	r3, r2
   147e4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   147e8:	801a      	strh	r2, [r3, #0]

    /* if value changed call callback */
    if (prevValue != value)
   147ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   147ee:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   147f2:	429a      	cmp	r2, r3
   147f4:	d009      	beq.n	1480a <attsCccWriteValue+0xfa>
    {
      attsCccCback(connId, i, handle, value);
   147f6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   147fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   147fe:	f89d 1013 	ldrb.w	r1, [sp, #19]
   14802:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14806:	f7ff fe9f 	bl	14548 <attsCccCback>
    }

    return ATT_SUCCESS;
   1480a:	2300      	movs	r3, #0
   1480c:	e000      	b.n	14810 <attsCccWriteValue+0x100>
  }
  else
  {
    return ATT_ERR_RESOURCES;
   1480e:	2311      	movs	r3, #17
  }
}
   14810:	4618      	mov	r0, r3
   14812:	b007      	add	sp, #28
   14814:	f85d fb04 	ldr.w	pc, [sp], #4
   14818:	10003670 	.word	0x10003670

0001481c <attsCccMainCback>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccMainCback(dmConnId_t connId, uint8_t method, uint16_t handle, uint8_t *pValue)
{
   1481c:	b500      	push	{lr}
   1481e:	b083      	sub	sp, #12
   14820:	9300      	str	r3, [sp, #0]
   14822:	4603      	mov	r3, r0
   14824:	f88d 3007 	strb.w	r3, [sp, #7]
   14828:	460b      	mov	r3, r1
   1482a:	f88d 3006 	strb.w	r3, [sp, #6]
   1482e:	4613      	mov	r3, r2
   14830:	f8ad 3004 	strh.w	r3, [sp, #4]
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);
   14834:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14838:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1483c:	4619      	mov	r1, r3
   1483e:	480f      	ldr	r0, [pc, #60]	; (1487c <attsCccMainCback+0x60>)
   14840:	f004 fa82 	bl	18d48 <WsfTrace>

  if (method == ATT_METHOD_READ)
   14844:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14848:	2b05      	cmp	r3, #5
   1484a:	d109      	bne.n	14860 <attsCccMainCback+0x44>
  {
    return attsCccReadValue(connId, handle, pValue);
   1484c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   14850:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14854:	9a00      	ldr	r2, [sp, #0]
   14856:	4618      	mov	r0, r3
   14858:	f7ff ff02 	bl	14660 <attsCccReadValue>
   1485c:	4603      	mov	r3, r0
   1485e:	e008      	b.n	14872 <attsCccMainCback+0x56>
  }
  else
  {
    return attsCccWriteValue(connId, handle, pValue);
   14860:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   14864:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14868:	9a00      	ldr	r2, [sp, #0]
   1486a:	4618      	mov	r0, r3
   1486c:	f7ff ff50 	bl	14710 <attsCccWriteValue>
   14870:	4603      	mov	r3, r0
  }
}
   14872:	4618      	mov	r0, r3
   14874:	b003      	add	sp, #12
   14876:	f85d fb04 	ldr.w	pc, [sp], #4
   1487a:	bf00      	nop
   1487c:	00028820 	.word	0x00028820

00014880 <AttsCccRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccRegister(uint8_t setLen, attsCccSet_t *pSet, attsCccCback_t cback)
{
   14880:	b084      	sub	sp, #16
   14882:	4603      	mov	r3, r0
   14884:	9102      	str	r1, [sp, #8]
   14886:	9201      	str	r2, [sp, #4]
   14888:	f88d 300f 	strb.w	r3, [sp, #15]
  attsCccCb.setLen = setLen;
   1488c:	4a07      	ldr	r2, [pc, #28]	; (148ac <AttsCccRegister+0x2c>)
   1488e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14892:	7513      	strb	r3, [r2, #20]
  attsCccCb.pSet = pSet;
   14894:	4a05      	ldr	r2, [pc, #20]	; (148ac <AttsCccRegister+0x2c>)
   14896:	9b02      	ldr	r3, [sp, #8]
   14898:	60d3      	str	r3, [r2, #12]
  attsCccCb.cback = cback;
   1489a:	4a04      	ldr	r2, [pc, #16]	; (148ac <AttsCccRegister+0x2c>)
   1489c:	9b01      	ldr	r3, [sp, #4]
   1489e:	6113      	str	r3, [r2, #16]

  attsCb.cccCback = attsCccMainCback;
   148a0:	4b03      	ldr	r3, [pc, #12]	; (148b0 <AttsCccRegister+0x30>)
   148a2:	4a04      	ldr	r2, [pc, #16]	; (148b4 <AttsCccRegister+0x34>)
   148a4:	615a      	str	r2, [r3, #20]
}
   148a6:	bf00      	nop
   148a8:	b004      	add	sp, #16
   148aa:	4770      	bx	lr
   148ac:	10003670 	.word	0x10003670
   148b0:	10008bf0 	.word	0x10008bf0
   148b4:	0001481d 	.word	0x0001481d

000148b8 <AttsCccInitTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccInitTable(dmConnId_t connId, uint16_t *pCccTbl)
{
   148b8:	b500      	push	{lr}
   148ba:	b085      	sub	sp, #20
   148bc:	4603      	mov	r3, r0
   148be:	9100      	str	r1, [sp, #0]
   148c0:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t   i;
  uint16_t  *pTbl;

  ATT_TRACE_INFO1("AttsCccInitTable connId=%d", connId);
   148c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   148c8:	4619      	mov	r1, r3
   148ca:	4821      	ldr	r0, [pc, #132]	; (14950 <AttsCccInitTable+0x98>)
   148cc:	f004 fa3c 	bl	18d48 <WsfTrace>

  if ((pTbl = attsCccAllocTbl(connId)) != NULL)
   148d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   148d4:	4618      	mov	r0, r3
   148d6:	f7ff fe67 	bl	145a8 <attsCccAllocTbl>
   148da:	9002      	str	r0, [sp, #8]
   148dc:	9b02      	ldr	r3, [sp, #8]
   148de:	2b00      	cmp	r3, #0
   148e0:	d031      	beq.n	14946 <AttsCccInitTable+0x8e>
  {
    /* if initializer table is passed in */
    if (pCccTbl != NULL)
   148e2:	9b00      	ldr	r3, [sp, #0]
   148e4:	2b00      	cmp	r3, #0
   148e6:	d026      	beq.n	14936 <AttsCccInitTable+0x7e>
    {
      /* initialize table */
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
   148e8:	2300      	movs	r3, #0
   148ea:	f88d 300f 	strb.w	r3, [sp, #15]
   148ee:	e01b      	b.n	14928 <AttsCccInitTable+0x70>
      {
        /* copy value */
        *pTbl = *pCccTbl;
   148f0:	9b00      	ldr	r3, [sp, #0]
   148f2:	881a      	ldrh	r2, [r3, #0]
   148f4:	9b02      	ldr	r3, [sp, #8]
   148f6:	801a      	strh	r2, [r3, #0]

        /* execute callback for each nonzero entry in table */
        if (*pCccTbl != 0)
   148f8:	9b00      	ldr	r3, [sp, #0]
   148fa:	881b      	ldrh	r3, [r3, #0]
   148fc:	2b00      	cmp	r3, #0
   148fe:	d008      	beq.n	14912 <AttsCccInitTable+0x5a>
        {
          attsCccCback(connId, i, ATT_HANDLE_NONE, *pCccTbl);
   14900:	9b00      	ldr	r3, [sp, #0]
   14902:	881b      	ldrh	r3, [r3, #0]
   14904:	f89d 100f 	ldrb.w	r1, [sp, #15]
   14908:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1490c:	2200      	movs	r2, #0
   1490e:	f7ff fe1b 	bl	14548 <attsCccCback>
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
   14912:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14916:	3301      	adds	r3, #1
   14918:	f88d 300f 	strb.w	r3, [sp, #15]
   1491c:	9b00      	ldr	r3, [sp, #0]
   1491e:	3302      	adds	r3, #2
   14920:	9300      	str	r3, [sp, #0]
   14922:	9b02      	ldr	r3, [sp, #8]
   14924:	3302      	adds	r3, #2
   14926:	9302      	str	r3, [sp, #8]
   14928:	4b0a      	ldr	r3, [pc, #40]	; (14954 <AttsCccInitTable+0x9c>)
   1492a:	7d1b      	ldrb	r3, [r3, #20]
   1492c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14930:	429a      	cmp	r2, r3
   14932:	d3dd      	bcc.n	148f0 <AttsCccInitTable+0x38>
    {
      /* initialize table to zero */
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
    }
  }
}
   14934:	e007      	b.n	14946 <AttsCccInitTable+0x8e>
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
   14936:	4b07      	ldr	r3, [pc, #28]	; (14954 <AttsCccInitTable+0x9c>)
   14938:	7d1b      	ldrb	r3, [r3, #20]
   1493a:	005b      	lsls	r3, r3, #1
   1493c:	461a      	mov	r2, r3
   1493e:	2100      	movs	r1, #0
   14940:	9802      	ldr	r0, [sp, #8]
   14942:	f7f7 fca7 	bl	c294 <memset>
}
   14946:	bf00      	nop
   14948:	b005      	add	sp, #20
   1494a:	f85d fb04 	ldr.w	pc, [sp], #4
   1494e:	bf00      	nop
   14950:	00028848 	.word	0x00028848
   14954:	10003670 	.word	0x10003670

00014958 <AttsCccClearTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccClearTable(dmConnId_t connId)
{
   14958:	b500      	push	{lr}
   1495a:	b083      	sub	sp, #12
   1495c:	4603      	mov	r3, r0
   1495e:	f88d 3007 	strb.w	r3, [sp, #7]
  ATT_TRACE_INFO1("AttsCccClearTable connId=%d", connId);
   14962:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14966:	4619      	mov	r1, r3
   14968:	4805      	ldr	r0, [pc, #20]	; (14980 <AttsCccClearTable+0x28>)
   1496a:	f004 f9ed 	bl	18d48 <WsfTrace>

  attsCccFreeTbl(connId);
   1496e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14972:	4618      	mov	r0, r3
   14974:	f7ff fe50 	bl	14618 <attsCccFreeTbl>
}
   14978:	bf00      	nop
   1497a:	b003      	add	sp, #12
   1497c:	f85d fb04 	ldr.w	pc, [sp], #4
   14980:	00028864 	.word	0x00028864

00014984 <AttsCccGet>:
 *
 *  \return Value of the descriptor.
 */
/*************************************************************************************************/
uint16_t AttsCccGet(dmConnId_t connId, uint8_t idx)
{
   14984:	b500      	push	{lr}
   14986:	b085      	sub	sp, #20
   14988:	4603      	mov	r3, r0
   1498a:	460a      	mov	r2, r1
   1498c:	f88d 3007 	strb.w	r3, [sp, #7]
   14990:	4613      	mov	r3, r2
   14992:	f88d 3006 	strb.w	r3, [sp, #6]
  uint16_t      *pTbl;

  WSF_ASSERT(idx < attsCccCb.setLen);

  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   14996:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1499a:	4618      	mov	r0, r3
   1499c:	f7ff fe2c 	bl	145f8 <attsCccGetTbl>
   149a0:	9003      	str	r0, [sp, #12]
   149a2:	9b03      	ldr	r3, [sp, #12]
   149a4:	2b00      	cmp	r3, #0
   149a6:	d006      	beq.n	149b6 <AttsCccGet+0x32>
  {
    /* return value from table */
    return pTbl[idx];
   149a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   149ac:	005b      	lsls	r3, r3, #1
   149ae:	9a03      	ldr	r2, [sp, #12]
   149b0:	4413      	add	r3, r2
   149b2:	881b      	ldrh	r3, [r3, #0]
   149b4:	e000      	b.n	149b8 <AttsCccGet+0x34>
  }
  else
  {
    return 0;
   149b6:	2300      	movs	r3, #0
  }
}
   149b8:	4618      	mov	r0, r3
   149ba:	b005      	add	sp, #20
   149bc:	f85d fb04 	ldr.w	pc, [sp], #4

000149c0 <AttsCccEnabled>:
 *
 *  \return Value of the descriptor if security level is met, otherwise zero.
 */
/*************************************************************************************************/
uint16_t AttsCccEnabled(dmConnId_t connId, uint8_t idx)
{
   149c0:	b500      	push	{lr}
   149c2:	b083      	sub	sp, #12
   149c4:	4603      	mov	r3, r0
   149c6:	460a      	mov	r2, r1
   149c8:	f88d 3007 	strb.w	r3, [sp, #7]
   149cc:	4613      	mov	r3, r2
   149ce:	f88d 3006 	strb.w	r3, [sp, #6]
  WSF_ASSERT(idx < attsCccCb.setLen);

  /* check security level */
  if (DmConnSecLevel(connId) < attsCccCb.pSet[idx].secLevel)
   149d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149d6:	4618      	mov	r0, r3
   149d8:	f7fc ff24 	bl	11824 <DmConnSecLevel>
   149dc:	4603      	mov	r3, r0
   149de:	4618      	mov	r0, r3
   149e0:	4b0d      	ldr	r3, [pc, #52]	; (14a18 <AttsCccEnabled+0x58>)
   149e2:	68d9      	ldr	r1, [r3, #12]
   149e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   149e8:	4613      	mov	r3, r2
   149ea:	005b      	lsls	r3, r3, #1
   149ec:	4413      	add	r3, r2
   149ee:	005b      	lsls	r3, r3, #1
   149f0:	440b      	add	r3, r1
   149f2:	791b      	ldrb	r3, [r3, #4]
   149f4:	4298      	cmp	r0, r3
   149f6:	d201      	bcs.n	149fc <AttsCccEnabled+0x3c>
  {
    return 0;
   149f8:	2300      	movs	r3, #0
   149fa:	e008      	b.n	14a0e <AttsCccEnabled+0x4e>
  }

  /* get value */
  return AttsCccGet(connId, idx);
   149fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
   14a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a04:	4611      	mov	r1, r2
   14a06:	4618      	mov	r0, r3
   14a08:	f7ff ffbc 	bl	14984 <AttsCccGet>
   14a0c:	4603      	mov	r3, r0
}
   14a0e:	4618      	mov	r0, r3
   14a10:	b003      	add	sp, #12
   14a12:	f85d fb04 	ldr.w	pc, [sp], #4
   14a16:	bf00      	nop
   14a18:	10003670 	.word	0x10003670

00014a1c <AttsGetCccTableLen>:
 *  \return  Number of CCC entries in table.
 */
/*************************************************************************************************/
uint8_t AttsGetCccTableLen(void)
{
  return attsCccCb.setLen;
   14a1c:	4b01      	ldr	r3, [pc, #4]	; (14a24 <AttsGetCccTableLen+0x8>)
   14a1e:	7d1b      	ldrb	r3, [r3, #20]
}
   14a20:	4618      	mov	r0, r3
   14a22:	4770      	bx	lr
   14a24:	10003670 	.word	0x10003670

00014a28 <attsCsfSetHashUpdateStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCsfSetHashUpdateStatus(bool_t isUpdating)
{
   14a28:	b500      	push	{lr}
   14a2a:	b085      	sub	sp, #20
   14a2c:	4603      	mov	r3, r0
   14a2e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (attsCsfCb.isHashUpdating == isUpdating)
   14a32:	4b1c      	ldr	r3, [pc, #112]	; (14aa4 <attsCsfSetHashUpdateStatus+0x7c>)
   14a34:	7b1b      	ldrb	r3, [r3, #12]
   14a36:	f89d 2007 	ldrb.w	r2, [sp, #7]
   14a3a:	429a      	cmp	r2, r3
   14a3c:	d02d      	beq.n	14a9a <attsCsfSetHashUpdateStatus+0x72>
    return;
  }
  else
  {
    /* Update state. */
    attsCsfCb.isHashUpdating = isUpdating;
   14a3e:	4a19      	ldr	r2, [pc, #100]	; (14aa4 <attsCsfSetHashUpdateStatus+0x7c>)
   14a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a44:	7313      	strb	r3, [r2, #12]
  }

  /* Update complete.
   * Check if clients were pending on the hash value and fulfill their requests.
   */
  if (isUpdating == FALSE)
   14a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a4a:	2b00      	cmp	r3, #0
   14a4c:	d105      	bne.n	14a5a <attsCsfSetHashUpdateStatus+0x32>
  {
    ATT_TRACE_INFO0("Database hash calculation complete");
   14a4e:	4816      	ldr	r0, [pc, #88]	; (14aa8 <attsCsfSetHashUpdateStatus+0x80>)
   14a50:	f004 f97a 	bl	18d48 <WsfTrace>

    attsCheckPendDbHashReadRsp();
   14a54:	f000 fed0 	bl	157f8 <attsCheckPendDbHashReadRsp>
   14a58:	e020      	b.n	14a9c <attsCsfSetHashUpdateStatus+0x74>
     * sync.
     */
  }
  else
  {
    ATT_TRACE_INFO0("Calculating database hash");
   14a5a:	4814      	ldr	r0, [pc, #80]	; (14aac <attsCsfSetHashUpdateStatus+0x84>)
   14a5c:	f004 f974 	bl	18d48 <WsfTrace>
    /* If the application, for whatever reason, previously recalculated the database hash over an
     * unchanged database and a client pended on a Read By Type Request of the database hash, then
     * that clients state may be out of step if the application did not initiate a state
     * transition.  That state transition is forced here to keep handle next transition.
     */
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   14a60:	2300      	movs	r3, #0
   14a62:	f88d 300f 	strb.w	r3, [sp, #15]
   14a66:	e013      	b.n	14a90 <attsCsfSetHashUpdateStatus+0x68>
    {
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   14a68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14a6c:	4a0d      	ldr	r2, [pc, #52]	; (14aa4 <attsCsfSetHashUpdateStatus+0x7c>)
   14a6e:	005b      	lsls	r3, r3, #1
   14a70:	4413      	add	r3, r2
   14a72:	785b      	ldrb	r3, [r3, #1]
   14a74:	2b02      	cmp	r3, #2
   14a76:	d106      	bne.n	14a86 <attsCsfSetHashUpdateStatus+0x5e>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   14a78:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14a7c:	4a09      	ldr	r2, [pc, #36]	; (14aa4 <attsCsfSetHashUpdateStatus+0x7c>)
   14a7e:	005b      	lsls	r3, r3, #1
   14a80:	4413      	add	r3, r2
   14a82:	2201      	movs	r2, #1
   14a84:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   14a86:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14a8a:	3301      	adds	r3, #1
   14a8c:	f88d 300f 	strb.w	r3, [sp, #15]
   14a90:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14a94:	2b02      	cmp	r3, #2
   14a96:	d9e7      	bls.n	14a68 <attsCsfSetHashUpdateStatus+0x40>
   14a98:	e000      	b.n	14a9c <attsCsfSetHashUpdateStatus+0x74>
    return;
   14a9a:	bf00      	nop
      }
    }
  }
}
   14a9c:	b005      	add	sp, #20
   14a9e:	f85d fb04 	ldr.w	pc, [sp], #4
   14aa2:	bf00      	nop
   14aa4:	10008b8c 	.word	0x10008b8c
   14aa8:	00028880 	.word	0x00028880
   14aac:	000288a4 	.word	0x000288a4

00014ab0 <attsCsfGetHashUpdateStatus>:
*  \return \ref TRUE if update in progress, \ref FALSE otherwise.
*/
/*************************************************************************************************/
uint8_t attsCsfGetHashUpdateStatus(void)
{
  return attsCsfCb.isHashUpdating;
   14ab0:	4b01      	ldr	r3, [pc, #4]	; (14ab8 <attsCsfGetHashUpdateStatus+0x8>)
   14ab2:	7b1b      	ldrb	r3, [r3, #12]
}
   14ab4:	4618      	mov	r0, r3
   14ab6:	4770      	bx	lr
   14ab8:	10008b8c 	.word	0x10008b8c

00014abc <attsCsfIsClientChangeAware>:
 *
 *  \return \ref TRUE if client is aware, otherwise \ref FALSE.
 */
/*************************************************************************************************/
uint8_t attsCsfIsClientChangeAware(dmConnId_t connId, uint16_t handle)
{
   14abc:	b082      	sub	sp, #8
   14abe:	4603      	mov	r3, r0
   14ac0:	460a      	mov	r2, r1
   14ac2:	f88d 3007 	strb.w	r3, [sp, #7]
   14ac6:	4613      	mov	r3, r2
   14ac8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
   14acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ad0:	3b01      	subs	r3, #1
   14ad2:	4a0d      	ldr	r2, [pc, #52]	; (14b08 <attsCsfIsClientChangeAware+0x4c>)
   14ad4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
   14ad8:	f003 0301 	and.w	r3, r3, #1
   14adc:	2b00      	cmp	r3, #0
   14ade:	d00e      	beq.n	14afe <attsCsfIsClientChangeAware+0x42>
      (attsCsfCb.attsCsfTable[connId - 1].changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE) &&
   14ae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ae4:	3b01      	subs	r3, #1
   14ae6:	4a08      	ldr	r2, [pc, #32]	; (14b08 <attsCsfIsClientChangeAware+0x4c>)
   14ae8:	005b      	lsls	r3, r3, #1
   14aea:	4413      	add	r3, r2
   14aec:	785b      	ldrb	r3, [r3, #1]
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
   14aee:	2b03      	cmp	r3, #3
   14af0:	d105      	bne.n	14afe <attsCsfIsClientChangeAware+0x42>
      (attsCsfCb.attsCsfTable[connId - 1].changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE) &&
   14af2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14af6:	2b12      	cmp	r3, #18
   14af8:	d001      	beq.n	14afe <attsCsfIsClientChangeAware+0x42>
      (handle != GATT_SC_HDL))
  {
    return FALSE;
   14afa:	2300      	movs	r3, #0
   14afc:	e000      	b.n	14b00 <attsCsfIsClientChangeAware+0x44>
  }

  return TRUE;
   14afe:	2301      	movs	r3, #1
}
   14b00:	4618      	mov	r0, r3
   14b02:	b002      	add	sp, #8
   14b04:	4770      	bx	lr
   14b06:	bf00      	nop
   14b08:	10008b8c 	.word	0x10008b8c

00014b0c <attsCsfActClientState>:
 *
 *  \return \ref ATT_SUCCESS if client is change-aware, else \ref ATT_ERR_DATABASE_OUT_OF_SYNC.
 */
/*************************************************************************************************/
uint8_t attsCsfActClientState(uint16_t handle, uint8_t opcode, uint8_t *pPacket)
{
   14b0c:	b500      	push	{lr}
   14b0e:	b087      	sub	sp, #28
   14b10:	4603      	mov	r3, r0
   14b12:	9200      	str	r2, [sp, #0]
   14b14:	f8ad 3006 	strh.w	r3, [sp, #6]
   14b18:	460b      	mov	r3, r1
   14b1a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t err = ATT_SUCCESS;
   14b1e:	2300      	movs	r3, #0
   14b20:	f88d 3017 	strb.w	r3, [sp, #23]
  attsCsfRec_t *pRec;

  /* PDU which do not operate on att handles are handled agnostically of the client's state. */
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
   14b24:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14b28:	2b02      	cmp	r3, #2
   14b2a:	d003      	beq.n	14b34 <attsCsfActClientState+0x28>
   14b2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14b30:	2b1e      	cmp	r3, #30
   14b32:	d102      	bne.n	14b3a <attsCsfActClientState+0x2e>
  {
    return err;
   14b34:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14b38:	e08a      	b.n	14c50 <attsCsfActClientState+0x144>
  }

  pRec = &attsCsfCb.attsCsfTable[handle];
   14b3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14b3e:	005b      	lsls	r3, r3, #1
   14b40:	4a45      	ldr	r2, [pc, #276]	; (14c58 <attsCsfActClientState+0x14c>)
   14b42:	4413      	add	r3, r2
   14b44:	9304      	str	r3, [sp, #16]

  /* If the client is change-unaware */
  if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   14b46:	9b04      	ldr	r3, [sp, #16]
   14b48:	785b      	ldrb	r3, [r3, #1]
   14b4a:	2b03      	cmp	r3, #3
   14b4c:	d120      	bne.n	14b90 <attsCsfActClientState+0x84>
  {
    /* If not a command */
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   14b4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14b56:	2b00      	cmp	r3, #0
   14b58:	d10a      	bne.n	14b70 <attsCsfActClientState+0x64>
      /* Note: there is no need to call back to the application here.  The application only
       * needs to know when a transition to or from the change-aware state occurs.
       */

      /* Move client change-aware state to pending */
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   14b5a:	9b04      	ldr	r3, [sp, #16]
   14b5c:	2201      	movs	r2, #1
   14b5e:	705a      	strb	r2, [r3, #1]

      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   14b60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14b64:	3301      	adds	r3, #1
   14b66:	2201      	movs	r2, #1
   14b68:	4619      	mov	r1, r3
   14b6a:	483c      	ldr	r0, [pc, #240]	; (14c5c <attsCsfActClientState+0x150>)
   14b6c:	f004 f8ec 	bl	18d48 <WsfTrace>
    }

    /* If this is a command or the Client has indicated Robust Caching, set an error so that
     * this command or request is not processed.
     */
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
   14b70:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d105      	bne.n	14b88 <attsCsfActClientState+0x7c>
        (pRec->csf & ATTS_CSF_ROBUST_CACHING))
   14b7c:	9b04      	ldr	r3, [sp, #16]
   14b7e:	781b      	ldrb	r3, [r3, #0]
   14b80:	f003 0301 	and.w	r3, r3, #1
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
   14b84:	2b00      	cmp	r3, #0
   14b86:	d02b      	beq.n	14be0 <attsCsfActClientState+0xd4>
    {
      /* return a database out of sync error */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
   14b88:	2312      	movs	r3, #18
   14b8a:	f88d 3017 	strb.w	r3, [sp, #23]
   14b8e:	e027      	b.n	14be0 <attsCsfActClientState+0xd4>
    }
  }
  else if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_PENDING_AWARE)
   14b90:	9b04      	ldr	r3, [sp, #16]
   14b92:	785b      	ldrb	r3, [r3, #1]
   14b94:	2b01      	cmp	r3, #1
   14b96:	d123      	bne.n	14be0 <attsCsfActClientState+0xd4>
  {
    /* If not a command */
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   14b98:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14ba0:	2b00      	cmp	r3, #0
   14ba2:	d11a      	bne.n	14bda <attsCsfActClientState+0xce>
    {
      /* Move client change-aware state to aware */
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE;
   14ba4:	9b04      	ldr	r3, [sp, #16]
   14ba6:	2200      	movs	r2, #0
   14ba8:	705a      	strb	r2, [r3, #1]

      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
   14baa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14bae:	3301      	adds	r3, #1
   14bb0:	2200      	movs	r2, #0
   14bb2:	4619      	mov	r1, r3
   14bb4:	4829      	ldr	r0, [pc, #164]	; (14c5c <attsCsfActClientState+0x150>)
   14bb6:	f004 f8c7 	bl	18d48 <WsfTrace>

      /* Callback to application to store updated awareness, if bonded. */
      if (attsCsfCb.writeCback != NULL)
   14bba:	4b27      	ldr	r3, [pc, #156]	; (14c58 <attsCsfActClientState+0x14c>)
   14bbc:	689b      	ldr	r3, [r3, #8]
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	d00e      	beq.n	14be0 <attsCsfActClientState+0xd4>
      {
        attsCsfCb.writeCback(handle + 1, pRec->changeAwareState, &pRec->csf);
   14bc2:	4b25      	ldr	r3, [pc, #148]	; (14c58 <attsCsfActClientState+0x14c>)
   14bc4:	689b      	ldr	r3, [r3, #8]
   14bc6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14bca:	b2d2      	uxtb	r2, r2
   14bcc:	3201      	adds	r2, #1
   14bce:	b2d0      	uxtb	r0, r2
   14bd0:	9a04      	ldr	r2, [sp, #16]
   14bd2:	7851      	ldrb	r1, [r2, #1]
   14bd4:	9a04      	ldr	r2, [sp, #16]
   14bd6:	4798      	blx	r3
   14bd8:	e002      	b.n	14be0 <attsCsfActClientState+0xd4>
      }
    }
    else
    {
      /* Return an error so that command is not processed. */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
   14bda:	2312      	movs	r3, #18
   14bdc:	f88d 3017 	strb.w	r3, [sp, #23]
    }
  }

  /* If this is Read by Type request */
  if (opcode == ATT_PDU_READ_TYPE_REQ)
   14be0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14be4:	2b08      	cmp	r3, #8
   14be6:	d124      	bne.n	14c32 <attsCsfActClientState+0x126>
  {
    uint16_t    uuid;

    /* Extract UUID: Skip L2C, ATT Header and 4 byte handle range */
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
   14be8:	9b00      	ldr	r3, [sp, #0]
   14bea:	330d      	adds	r3, #13
   14bec:	781b      	ldrb	r3, [r3, #0]
   14bee:	b29a      	uxth	r2, r3
   14bf0:	9b00      	ldr	r3, [sp, #0]
   14bf2:	330e      	adds	r3, #14
   14bf4:	781b      	ldrb	r3, [r3, #0]
   14bf6:	b29b      	uxth	r3, r3
   14bf8:	021b      	lsls	r3, r3, #8
   14bfa:	b29b      	uxth	r3, r3
   14bfc:	4413      	add	r3, r2
   14bfe:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If this is a Read By Type Request of the Database Hash characteristic value */
    if (uuid == ATT_UUID_DATABASE_HASH)
   14c02:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   14c06:	f642 322a 	movw	r2, #11050	; 0x2b2a
   14c0a:	4293      	cmp	r3, r2
   14c0c:	d111      	bne.n	14c32 <attsCsfActClientState+0x126>
    {
      err = ATT_SUCCESS;
   14c0e:	2300      	movs	r3, #0
   14c10:	f88d 3017 	strb.w	r3, [sp, #23]

      /* Reading the hash during a hash update causes the new hash to be returned and counts
       * towards the peer's progression towards a change-aware state.
       */
      if (attsCsfCb.isHashUpdating)
   14c14:	4b10      	ldr	r3, [pc, #64]	; (14c58 <attsCsfActClientState+0x14c>)
   14c16:	7b1b      	ldrb	r3, [r3, #12]
   14c18:	2b00      	cmp	r3, #0
   14c1a:	d00a      	beq.n	14c32 <attsCsfActClientState+0x126>
      {
        /* This read will not be processed until after the hash update completes, so this read
        * request shall be counted as a move from change-unaware to chang-aware pending.
        */
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
   14c1c:	9b04      	ldr	r3, [sp, #16]
   14c1e:	2202      	movs	r2, #2
   14c20:	705a      	strb	r2, [r3, #1]

        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   14c22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14c26:	3301      	adds	r3, #1
   14c28:	2202      	movs	r2, #2
   14c2a:	4619      	mov	r1, r3
   14c2c:	480b      	ldr	r0, [pc, #44]	; (14c5c <attsCsfActClientState+0x150>)
   14c2e:	f004 f88b 	bl	18d48 <WsfTrace>
                        ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING);
      }
    }
  }

  if (err == ATT_ERR_DATABASE_OUT_OF_SYNC)
   14c32:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14c36:	2b12      	cmp	r3, #18
   14c38:	d108      	bne.n	14c4c <attsCsfActClientState+0x140>
  {
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
   14c3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14c3e:	3301      	adds	r3, #1
   14c40:	f89d 2005 	ldrb.w	r2, [sp, #5]
   14c44:	4619      	mov	r1, r3
   14c46:	4806      	ldr	r0, [pc, #24]	; (14c60 <attsCsfActClientState+0x154>)
   14c48:	f004 f87e 	bl	18d48 <WsfTrace>
  }

  return err;
   14c4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   14c50:	4618      	mov	r0, r3
   14c52:	b007      	add	sp, #28
   14c54:	f85d fb04 	ldr.w	pc, [sp], #4
   14c58:	10008b8c 	.word	0x10008b8c
   14c5c:	000288c0 	.word	0x000288c0
   14c60:	000288e4 	.word	0x000288e4

00014c64 <AttsCsfConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfConnOpen(dmConnId_t connId, uint8_t changeAwareState, uint8_t *pCsf)
{
   14c64:	b500      	push	{lr}
   14c66:	b083      	sub	sp, #12
   14c68:	4603      	mov	r3, r0
   14c6a:	9200      	str	r2, [sp, #0]
   14c6c:	f88d 3007 	strb.w	r3, [sp, #7]
   14c70:	460b      	mov	r3, r1
   14c72:	f88d 3006 	strb.w	r3, [sp, #6]
  if (pCsf != NULL)
   14c76:	9b00      	ldr	r3, [sp, #0]
   14c78:	2b00      	cmp	r3, #0
   14c7a:	d012      	beq.n	14ca2 <AttsCsfConnOpen+0x3e>
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = changeAwareState;
   14c7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14c80:	3b01      	subs	r3, #1
   14c82:	4a0f      	ldr	r2, [pc, #60]	; (14cc0 <AttsCsfConnOpen+0x5c>)
   14c84:	005b      	lsls	r3, r3, #1
   14c86:	4413      	add	r3, r2
   14c88:	f89d 2006 	ldrb.w	r2, [sp, #6]
   14c8c:	705a      	strb	r2, [r3, #1]
    memcpy(&attsCsfCb.attsCsfTable[connId - 1].csf, pCsf, ATT_CSF_LEN);
   14c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14c92:	3b01      	subs	r3, #1
   14c94:	005b      	lsls	r3, r3, #1
   14c96:	4a0a      	ldr	r2, [pc, #40]	; (14cc0 <AttsCsfConnOpen+0x5c>)
   14c98:	4413      	add	r3, r2
   14c9a:	9a00      	ldr	r2, [sp, #0]
   14c9c:	7812      	ldrb	r2, [r2, #0]
   14c9e:	701a      	strb	r2, [r3, #0]
  else
  {
    /* Note: this set client to the change-aware state. */
    memset(&attsCsfCb.attsCsfTable[connId - 1], 0, sizeof(attsCsfRec_t));
  }
}
   14ca0:	e00a      	b.n	14cb8 <AttsCsfConnOpen+0x54>
    memset(&attsCsfCb.attsCsfTable[connId - 1], 0, sizeof(attsCsfRec_t));
   14ca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ca6:	3b01      	subs	r3, #1
   14ca8:	005b      	lsls	r3, r3, #1
   14caa:	4a05      	ldr	r2, [pc, #20]	; (14cc0 <AttsCsfConnOpen+0x5c>)
   14cac:	4413      	add	r3, r2
   14cae:	2202      	movs	r2, #2
   14cb0:	2100      	movs	r1, #0
   14cb2:	4618      	mov	r0, r3
   14cb4:	f7f7 faee 	bl	c294 <memset>
}
   14cb8:	bf00      	nop
   14cba:	b003      	add	sp, #12
   14cbc:	f85d fb04 	ldr.w	pc, [sp], #4
   14cc0:	10008b8c 	.word	0x10008b8c

00014cc4 <AttsCsfGetFeatures>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfGetFeatures(dmConnId_t connId, uint8_t *pCsfOut, uint8_t pCsfOutLen)
{
   14cc4:	b500      	push	{lr}
   14cc6:	b083      	sub	sp, #12
   14cc8:	4603      	mov	r3, r0
   14cca:	9100      	str	r1, [sp, #0]
   14ccc:	f88d 3007 	strb.w	r3, [sp, #7]
   14cd0:	4613      	mov	r3, r2
   14cd2:	f88d 3006 	strb.w	r3, [sp, #6]
  if (pCsfOutLen <= ATT_CSF_LEN)
   14cd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14cda:	2b01      	cmp	r3, #1
   14cdc:	d80b      	bhi.n	14cf6 <AttsCsfGetFeatures+0x32>
  {
    memcpy(pCsfOut, &attsCsfCb.attsCsfTable[connId - 1].csf, pCsfOutLen);
   14cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ce2:	3b01      	subs	r3, #1
   14ce4:	005b      	lsls	r3, r3, #1
   14ce6:	4a06      	ldr	r2, [pc, #24]	; (14d00 <AttsCsfGetFeatures+0x3c>)
   14ce8:	4413      	add	r3, r2
   14cea:	f89d 2006 	ldrb.w	r2, [sp, #6]
   14cee:	4619      	mov	r1, r3
   14cf0:	9800      	ldr	r0, [sp, #0]
   14cf2:	f7f7 fa35 	bl	c160 <memcpy>
  }
}
   14cf6:	bf00      	nop
   14cf8:	b003      	add	sp, #12
   14cfa:	f85d fb04 	ldr.w	pc, [sp], #4
   14cfe:	bf00      	nop
   14d00:	10008b8c 	.word	0x10008b8c

00014d04 <AttsCsfGetChangeAwareState>:
 *
 *  \return Client's change-aware state.
 */
/*************************************************************************************************/
uint8_t AttsCsfGetChangeAwareState(dmConnId_t connId)
{
   14d04:	b082      	sub	sp, #8
   14d06:	4603      	mov	r3, r0
   14d08:	f88d 3007 	strb.w	r3, [sp, #7]
  return attsCsfCb.attsCsfTable[connId - 1].changeAwareState;
   14d0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14d10:	3b01      	subs	r3, #1
   14d12:	4a03      	ldr	r2, [pc, #12]	; (14d20 <AttsCsfGetChangeAwareState+0x1c>)
   14d14:	005b      	lsls	r3, r3, #1
   14d16:	4413      	add	r3, r2
   14d18:	785b      	ldrb	r3, [r3, #1]
}
   14d1a:	4618      	mov	r0, r3
   14d1c:	b002      	add	sp, #8
   14d1e:	4770      	bx	lr
   14d20:	10008b8c 	.word	0x10008b8c

00014d24 <attsIndCcbByConnId>:
 *
 *  \return Pointer to connection control block or NULL if not in use.
 */
/*************************************************************************************************/
static attsIndCcb_t *attsIndCcbByConnId(dmConnId_t connId)
{
   14d24:	b500      	push	{lr}
   14d26:	b083      	sub	sp, #12
   14d28:	4603      	mov	r3, r0
   14d2a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (DmConnInUse(connId))
   14d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14d32:	4618      	mov	r0, r3
   14d34:	f7fc fcec 	bl	11710 <DmConnInUse>
   14d38:	4603      	mov	r3, r0
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	d009      	beq.n	14d52 <attsIndCcbByConnId+0x2e>
  {
    return &attsIndCb.ccb[connId - 1];
   14d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14d42:	1e5a      	subs	r2, r3, #1
   14d44:	4613      	mov	r3, r2
   14d46:	00db      	lsls	r3, r3, #3
   14d48:	1a9b      	subs	r3, r3, r2
   14d4a:	009b      	lsls	r3, r3, #2
   14d4c:	4a06      	ldr	r2, [pc, #24]	; (14d68 <attsIndCcbByConnId+0x44>)
   14d4e:	4413      	add	r3, r2
   14d50:	e006      	b.n	14d60 <attsIndCcbByConnId+0x3c>
  }
  else
  {
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   14d52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14d56:	4619      	mov	r1, r3
   14d58:	4804      	ldr	r0, [pc, #16]	; (14d6c <attsIndCcbByConnId+0x48>)
   14d5a:	f003 fff5 	bl	18d48 <WsfTrace>
    return NULL;
   14d5e:	2300      	movs	r3, #0
  }
}
   14d60:	4618      	mov	r0, r3
   14d62:	b003      	add	sp, #12
   14d64:	f85d fb04 	ldr.w	pc, [sp], #4
   14d68:	10008b9c 	.word	0x10008b9c
   14d6c:	0002893c 	.word	0x0002893c

00014d70 <attsPendIndNtfHandle>:
 *  \return TRUE if app callback's pending or max number of simultaneous notifications reached.
 *          FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t attsPendIndNtfHandle(attsIndCcb_t *pCcb, attsPktParam_t *pPkt)
{
   14d70:	b084      	sub	sp, #16
   14d72:	9001      	str	r0, [sp, #4]
   14d74:	9100      	str	r1, [sp, #0]
  uint8_t     opcode;
  uint8_t     pendNtfs;
  uint8_t     i;

  /* extract opcode */
  opcode = *(((uint8_t *) pPkt) + L2C_PAYLOAD_START);
   14d76:	9b00      	ldr	r3, [sp, #0]
   14d78:	7a1b      	ldrb	r3, [r3, #8]
   14d7a:	f88d 300d 	strb.w	r3, [sp, #13]

  /* if indication */
  if (opcode == ATT_PDU_VALUE_IND)
   14d7e:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14d82:	2b1d      	cmp	r3, #29
   14d84:	d107      	bne.n	14d96 <attsPendIndNtfHandle+0x26>
  {
    /* see if callback pending for indication */
    return (pCcb->pendIndHandle == ATT_HANDLE_NONE) ? FALSE : TRUE;
   14d86:	9b01      	ldr	r3, [sp, #4]
   14d88:	8adb      	ldrh	r3, [r3, #22]
   14d8a:	2b00      	cmp	r3, #0
   14d8c:	bf14      	ite	ne
   14d8e:	2301      	movne	r3, #1
   14d90:	2300      	moveq	r3, #0
   14d92:	b2db      	uxtb	r3, r3
   14d94:	e02f      	b.n	14df6 <attsPendIndNtfHandle+0x86>
  }

  /* initialize number of notification callbacks pending */
  pendNtfs = 0;
   14d96:	2300      	movs	r3, #0
   14d98:	f88d 300f 	strb.w	r3, [sp, #15]

  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   14d9c:	2300      	movs	r3, #0
   14d9e:	f88d 300e 	strb.w	r3, [sp, #14]
   14da2:	e01d      	b.n	14de0 <attsPendIndNtfHandle+0x70>
  {
    /* if callback pending for notification */
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   14da4:	f89d 200e 	ldrb.w	r2, [sp, #14]
   14da8:	9b01      	ldr	r3, [sp, #4]
   14daa:	320c      	adds	r2, #12
   14dac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   14db0:	2b00      	cmp	r3, #0
   14db2:	d010      	beq.n	14dd6 <attsPendIndNtfHandle+0x66>
    {
      /* if callback pending for this handle */
      if (pCcb->pendNtfHandle[i] == pPkt->handle)
   14db4:	f89d 200e 	ldrb.w	r2, [sp, #14]
   14db8:	9b01      	ldr	r3, [sp, #4]
   14dba:	320c      	adds	r2, #12
   14dbc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   14dc0:	9b00      	ldr	r3, [sp, #0]
   14dc2:	885b      	ldrh	r3, [r3, #2]
   14dc4:	429a      	cmp	r2, r3
   14dc6:	d101      	bne.n	14dcc <attsPendIndNtfHandle+0x5c>
      {
        /* callback pending for this notification */
        return TRUE;
   14dc8:	2301      	movs	r3, #1
   14dca:	e014      	b.n	14df6 <attsPendIndNtfHandle+0x86>
      }

      pendNtfs++;
   14dcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14dd0:	3301      	adds	r3, #1
   14dd2:	f88d 300f 	strb.w	r3, [sp, #15]
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   14dd6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14dda:	3301      	adds	r3, #1
   14ddc:	f88d 300e 	strb.w	r3, [sp, #14]
   14de0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14de4:	2b00      	cmp	r3, #0
   14de6:	d0dd      	beq.n	14da4 <attsPendIndNtfHandle+0x34>
    }
  }

  /* no callback is pending for this notification but see if the maximum number of simultaneous
     notifications has been reached */
  return (pendNtfs < ATT_NUM_SIMUL_NTF) ? FALSE : TRUE;
   14de8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14dec:	2b00      	cmp	r3, #0
   14dee:	bf14      	ite	ne
   14df0:	2301      	movne	r3, #1
   14df2:	2300      	moveq	r3, #0
   14df4:	b2db      	uxtb	r3, r3
}
   14df6:	4618      	mov	r0, r3
   14df8:	b004      	add	sp, #16
   14dfa:	4770      	bx	lr

00014dfc <attsSetPendNtfHandle>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsSetPendNtfHandle(attsIndCcb_t *pCcb, uint16_t handle)
{
   14dfc:	b084      	sub	sp, #16
   14dfe:	9001      	str	r0, [sp, #4]
   14e00:	460b      	mov	r3, r1
   14e02:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t     i;

  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   14e06:	2300      	movs	r3, #0
   14e08:	f88d 300f 	strb.w	r3, [sp, #15]
   14e0c:	e015      	b.n	14e3a <attsSetPendNtfHandle+0x3e>
  {
    /* if entry free */
    if (pCcb->pendNtfHandle[i] == ATT_HANDLE_NONE)
   14e0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	320c      	adds	r2, #12
   14e16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	d108      	bne.n	14e30 <attsSetPendNtfHandle+0x34>
    {
      /* set pending notification handle */
      pCcb->pendNtfHandle[i] = handle;
   14e1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14e22:	9b01      	ldr	r3, [sp, #4]
   14e24:	320c      	adds	r2, #12
   14e26:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14e2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      break;
   14e2e:	e008      	b.n	14e42 <attsSetPendNtfHandle+0x46>
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   14e30:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14e34:	3301      	adds	r3, #1
   14e36:	f88d 300f 	strb.w	r3, [sp, #15]
   14e3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14e3e:	2b00      	cmp	r3, #0
   14e40:	d0e5      	beq.n	14e0e <attsSetPendNtfHandle+0x12>
    }
  }
}
   14e42:	bf00      	nop
   14e44:	b004      	add	sp, #16
   14e46:	4770      	bx	lr

00014e48 <attsExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsExecCallback(dmConnId_t connId, uint16_t handle, uint8_t status)
{
   14e48:	b500      	push	{lr}
   14e4a:	b085      	sub	sp, #20
   14e4c:	4603      	mov	r3, r0
   14e4e:	f88d 300f 	strb.w	r3, [sp, #15]
   14e52:	460b      	mov	r3, r1
   14e54:	f8ad 300c 	strh.w	r3, [sp, #12]
   14e58:	4613      	mov	r3, r2
   14e5a:	f88d 300e 	strb.w	r3, [sp, #14]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   14e5e:	f89d 100e 	ldrb.w	r1, [sp, #14]
   14e62:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   14e66:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14e6a:	2300      	movs	r3, #0
   14e6c:	9300      	str	r3, [sp, #0]
   14e6e:	460b      	mov	r3, r1
   14e70:	210f      	movs	r1, #15
   14e72:	f002 fd4f 	bl	17914 <attExecCallback>
}
   14e76:	bf00      	nop
   14e78:	b005      	add	sp, #20
   14e7a:	f85d fb04 	ldr.w	pc, [sp], #4

00014e7e <attsIndNtfCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndNtfCallback(dmConnId_t connId, attsIndCcb_t *pCcb, uint8_t status)
{
   14e7e:	b500      	push	{lr}
   14e80:	b085      	sub	sp, #20
   14e82:	4603      	mov	r3, r0
   14e84:	9100      	str	r1, [sp, #0]
   14e86:	f88d 3007 	strb.w	r3, [sp, #7]
   14e8a:	4613      	mov	r3, r2
   14e8c:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t     i;

  /* if pending indication callback */
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   14e90:	9b00      	ldr	r3, [sp, #0]
   14e92:	8adb      	ldrh	r3, [r3, #22]
   14e94:	2b00      	cmp	r3, #0
   14e96:	d00b      	beq.n	14eb0 <attsIndNtfCallback+0x32>
  {
    /* call indication callback with status */
    attsExecCallback(connId, pCcb->pendIndHandle, status);
   14e98:	9b00      	ldr	r3, [sp, #0]
   14e9a:	8ad9      	ldrh	r1, [r3, #22]
   14e9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   14ea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ea4:	4618      	mov	r0, r3
   14ea6:	f7ff ffcf 	bl	14e48 <attsExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   14eaa:	9b00      	ldr	r3, [sp, #0]
   14eac:	2200      	movs	r2, #0
   14eae:	82da      	strh	r2, [r3, #22]
  }

  /* if any pending notification callback */
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   14eb0:	2300      	movs	r3, #0
   14eb2:	f88d 300f 	strb.w	r3, [sp, #15]
   14eb6:	e020      	b.n	14efa <attsIndNtfCallback+0x7c>
  {
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   14eb8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14ebc:	9b00      	ldr	r3, [sp, #0]
   14ebe:	320c      	adds	r2, #12
   14ec0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   14ec4:	2b00      	cmp	r3, #0
   14ec6:	d013      	beq.n	14ef0 <attsIndNtfCallback+0x72>
    {
      /* call notification callback with status */
      attsExecCallback(connId, pCcb->pendNtfHandle[i], status);
   14ec8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14ecc:	9b00      	ldr	r3, [sp, #0]
   14ece:	320c      	adds	r2, #12
   14ed0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   14ed4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   14ed8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14edc:	4618      	mov	r0, r3
   14ede:	f7ff ffb3 	bl	14e48 <attsExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   14ee2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14ee6:	9b00      	ldr	r3, [sp, #0]
   14ee8:	320c      	adds	r2, #12
   14eea:	2100      	movs	r1, #0
   14eec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   14ef0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14ef4:	3301      	adds	r3, #1
   14ef6:	f88d 300f 	strb.w	r3, [sp, #15]
   14efa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14efe:	2b00      	cmp	r3, #0
   14f00:	d0da      	beq.n	14eb8 <attsIndNtfCallback+0x3a>
    }
  }
}
   14f02:	bf00      	nop
   14f04:	b005      	add	sp, #20
   14f06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00014f0c <attsSetupMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsSetupMsg(attsIndCcb_t *pCcb, dmConnId_t connId, attsPktParam_t *pPkt)
{
   14f0c:	b500      	push	{lr}
   14f0e:	b087      	sub	sp, #28
   14f10:	9003      	str	r0, [sp, #12]
   14f12:	460b      	mov	r3, r1
   14f14:	9201      	str	r2, [sp, #4]
   14f16:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t     opcode;
  uint16_t    handle;

  /* extract opcode */
  opcode = *(((uint8_t *) pPkt) + L2C_PAYLOAD_START);
   14f1a:	9b01      	ldr	r3, [sp, #4]
   14f1c:	7a1b      	ldrb	r3, [r3, #8]
   14f1e:	f88d 3017 	strb.w	r3, [sp, #23]

  /* copy handle (it may be overwritten in pPkt) */
  handle = pPkt->handle;
   14f22:	9b01      	ldr	r3, [sp, #4]
   14f24:	885b      	ldrh	r3, [r3, #2]
   14f26:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* send pdu */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   14f2a:	9b03      	ldr	r3, [sp, #12]
   14f2c:	691b      	ldr	r3, [r3, #16]
   14f2e:	8b19      	ldrh	r1, [r3, #24]
   14f30:	9b01      	ldr	r3, [sp, #4]
   14f32:	881a      	ldrh	r2, [r3, #0]
   14f34:	9b01      	ldr	r3, [sp, #4]
   14f36:	2004      	movs	r0, #4
   14f38:	f006 fc94 	bl	1b864 <L2cDataReq>

  /* if indication store handle and start timer */
  if (opcode == ATT_PDU_VALUE_IND)
   14f3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14f40:	2b1d      	cmp	r3, #29
   14f42:	d113      	bne.n	14f6c <attsSetupMsg+0x60>
  {
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   14f44:	9b03      	ldr	r3, [sp, #12]
   14f46:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   14f4a:	82da      	strh	r2, [r3, #22]
   14f4c:	9b03      	ldr	r3, [sp, #12]
   14f4e:	8ada      	ldrh	r2, [r3, #22]
   14f50:	9b03      	ldr	r3, [sp, #12]
   14f52:	829a      	strh	r2, [r3, #20]
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   14f54:	9b03      	ldr	r3, [sp, #12]
   14f56:	2222      	movs	r2, #34	; 0x22
   14f58:	731a      	strb	r2, [r3, #12]
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   14f5a:	9a03      	ldr	r2, [sp, #12]
   14f5c:	4b10      	ldr	r3, [pc, #64]	; (14fa0 <attsSetupMsg+0x94>)
   14f5e:	681b      	ldr	r3, [r3, #0]
   14f60:	799b      	ldrb	r3, [r3, #6]
   14f62:	4619      	mov	r1, r3
   14f64:	4610      	mov	r0, r2
   14f66:	f003 fe07 	bl	18b78 <WsfTimerStartSec>
  /* else set pending notification callback for this handle */
  else
  {
    attsSetPendNtfHandle(pCcb, handle);
  }
}
   14f6a:	e015      	b.n	14f98 <attsSetupMsg+0x8c>
  else if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   14f6c:	9b03      	ldr	r3, [sp, #12]
   14f6e:	691b      	ldr	r3, [r3, #16]
   14f70:	7f5b      	ldrb	r3, [r3, #29]
   14f72:	f003 0302 	and.w	r3, r3, #2
   14f76:	2b00      	cmp	r3, #0
   14f78:	d108      	bne.n	14f8c <attsSetupMsg+0x80>
    attsExecCallback(connId, handle, ATT_SUCCESS);
   14f7a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   14f7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14f82:	2200      	movs	r2, #0
   14f84:	4618      	mov	r0, r3
   14f86:	f7ff ff5f 	bl	14e48 <attsExecCallback>
}
   14f8a:	e005      	b.n	14f98 <attsSetupMsg+0x8c>
    attsSetPendNtfHandle(pCcb, handle);
   14f8c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   14f90:	4619      	mov	r1, r3
   14f92:	9803      	ldr	r0, [sp, #12]
   14f94:	f7ff ff32 	bl	14dfc <attsSetPendNtfHandle>
}
   14f98:	bf00      	nop
   14f9a:	b007      	add	sp, #28
   14f9c:	f85d fb04 	ldr.w	pc, [sp], #4
   14fa0:	10002b90 	.word	0x10002b90

00014fa4 <attsIndConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   14fa4:	b500      	push	{lr}
   14fa6:	b085      	sub	sp, #20
   14fa8:	9001      	str	r0, [sp, #4]
   14faa:	9100      	str	r1, [sp, #0]
  attsIndCcb_t *pIndCcb;
  uint8_t      status;

  /* if connection opened */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   14fac:	9b00      	ldr	r3, [sp, #0]
   14fae:	789b      	ldrb	r3, [r3, #2]
   14fb0:	2b27      	cmp	r3, #39	; 0x27
   14fb2:	d02f      	beq.n	15014 <attsIndConnCback+0x70>
  {

  }
  /* if connection closed */
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   14fb4:	9b00      	ldr	r3, [sp, #0]
   14fb6:	789b      	ldrb	r3, [r3, #2]
   14fb8:	2b28      	cmp	r3, #40	; 0x28
   14fba:	d12b      	bne.n	15014 <attsIndConnCback+0x70>
  {
    /* set status */
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   14fbc:	9b00      	ldr	r3, [sp, #0]
   14fbe:	78db      	ldrb	r3, [r3, #3]
   14fc0:	2b00      	cmp	r3, #0
   14fc2:	d105      	bne.n	14fd0 <attsIndConnCback+0x2c>
    {
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   14fc4:	9b00      	ldr	r3, [sp, #0]
   14fc6:	7a1b      	ldrb	r3, [r3, #8]
   14fc8:	3320      	adds	r3, #32
   14fca:	f88d 300f 	strb.w	r3, [sp, #15]
   14fce:	e004      	b.n	14fda <attsIndConnCback+0x36>
    }
    else
    {
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   14fd0:	9b00      	ldr	r3, [sp, #0]
   14fd2:	78db      	ldrb	r3, [r3, #3]
   14fd4:	3320      	adds	r3, #32
   14fd6:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    /* get server control block directly */
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   14fda:	9b01      	ldr	r3, [sp, #4]
   14fdc:	7f1b      	ldrb	r3, [r3, #28]
   14fde:	1e5a      	subs	r2, r3, #1
   14fe0:	4613      	mov	r3, r2
   14fe2:	00db      	lsls	r3, r3, #3
   14fe4:	1a9b      	subs	r3, r3, r2
   14fe6:	009b      	lsls	r3, r3, #2
   14fe8:	4a0c      	ldr	r2, [pc, #48]	; (1501c <attsIndConnCback+0x78>)
   14fea:	4413      	add	r3, r2
   14fec:	9302      	str	r3, [sp, #8]

    /* if outstanding indication */
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   14fee:	9b02      	ldr	r3, [sp, #8]
   14ff0:	8a9b      	ldrh	r3, [r3, #20]
   14ff2:	2b00      	cmp	r3, #0
   14ff4:	d006      	beq.n	15004 <attsIndConnCback+0x60>
    {
      /* stop timer */
      WsfTimerStop(&pIndCcb->outIndTimer);
   14ff6:	9b02      	ldr	r3, [sp, #8]
   14ff8:	4618      	mov	r0, r3
   14ffa:	f003 fde1 	bl	18bc0 <WsfTimerStop>
      pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   14ffe:	9b02      	ldr	r3, [sp, #8]
   15000:	2200      	movs	r2, #0
   15002:	829a      	strh	r2, [r3, #20]
    }

    /* call pending indication and notification callback */
    attsIndNtfCallback(pCcb->connId, pIndCcb, status);
   15004:	9b01      	ldr	r3, [sp, #4]
   15006:	7f1b      	ldrb	r3, [r3, #28]
   15008:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1500c:	9902      	ldr	r1, [sp, #8]
   1500e:	4618      	mov	r0, r3
   15010:	f7ff ff35 	bl	14e7e <attsIndNtfCallback>
  }
}
   15014:	bf00      	nop
   15016:	b005      	add	sp, #20
   15018:	f85d fb04 	ldr.w	pc, [sp], #4
   1501c:	10008b9c 	.word	0x10008b9c

00015020 <attsIndMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndMsgCback(attsApiMsg_t *pMsg)
{
   15020:	b500      	push	{lr}
   15022:	b085      	sub	sp, #20
   15024:	9001      	str	r0, [sp, #4]
  attsIndCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   15026:	9b01      	ldr	r3, [sp, #4]
   15028:	881b      	ldrh	r3, [r3, #0]
   1502a:	b2db      	uxtb	r3, r3
   1502c:	4618      	mov	r0, r3
   1502e:	f7ff fe79 	bl	14d24 <attsIndCcbByConnId>
   15032:	9003      	str	r0, [sp, #12]
   15034:	9b03      	ldr	r3, [sp, #12]
   15036:	2b00      	cmp	r3, #0
   15038:	d109      	bne.n	1504e <attsIndMsgCback+0x2e>
  {
    /* if message has a packet buffer free packet buffer */
    if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   1503a:	9b01      	ldr	r3, [sp, #4]
   1503c:	789b      	ldrb	r3, [r3, #2]
   1503e:	2b21      	cmp	r3, #33	; 0x21
   15040:	d14d      	bne.n	150de <attsIndMsgCback+0xbe>
    {
      WsfMsgFree(pMsg->pPkt);
   15042:	9b01      	ldr	r3, [sp, #4]
   15044:	685b      	ldr	r3, [r3, #4]
   15046:	4618      	mov	r0, r3
   15048:	f003 fa2b 	bl	184a2 <WsfMsgFree>
    }

    /* ignore if connection not in use */
    return;
   1504c:	e047      	b.n	150de <attsIndMsgCback+0xbe>
  }

  /* if an API message to send packet */
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   1504e:	9b01      	ldr	r3, [sp, #4]
   15050:	789b      	ldrb	r3, [r3, #2]
   15052:	2b21      	cmp	r3, #33	; 0x21
   15054:	d122      	bne.n	1509c <attsIndMsgCback+0x7c>
  {
    /* verify no API message already pending */
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   15056:	9b01      	ldr	r3, [sp, #4]
   15058:	685b      	ldr	r3, [r3, #4]
   1505a:	4619      	mov	r1, r3
   1505c:	9803      	ldr	r0, [sp, #12]
   1505e:	f7ff fe87 	bl	14d70 <attsPendIndNtfHandle>
   15062:	4603      	mov	r3, r0
   15064:	2b00      	cmp	r3, #0
   15066:	d00f      	beq.n	15088 <attsIndMsgCback+0x68>
    {
      /* call callback with failure status and free packet buffer */
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pMsg->pPkt->handle, ATT_ERR_OVERFLOW);
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	881b      	ldrh	r3, [r3, #0]
   1506c:	b2d8      	uxtb	r0, r3
   1506e:	9b01      	ldr	r3, [sp, #4]
   15070:	685b      	ldr	r3, [r3, #4]
   15072:	885b      	ldrh	r3, [r3, #2]
   15074:	2272      	movs	r2, #114	; 0x72
   15076:	4619      	mov	r1, r3
   15078:	f7ff fee6 	bl	14e48 <attsExecCallback>
      WsfMsgFree(pMsg->pPkt);
   1507c:	9b01      	ldr	r3, [sp, #4]
   1507e:	685b      	ldr	r3, [r3, #4]
   15080:	4618      	mov	r0, r3
   15082:	f003 fa0e 	bl	184a2 <WsfMsgFree>
   15086:	e02b      	b.n	150e0 <attsIndMsgCback+0xc0>
    }
    /* otherwise ready to send; set up request */
    else
    {
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
   15088:	9b01      	ldr	r3, [sp, #4]
   1508a:	881b      	ldrh	r3, [r3, #0]
   1508c:	b2d9      	uxtb	r1, r3
   1508e:	9b01      	ldr	r3, [sp, #4]
   15090:	685b      	ldr	r3, [r3, #4]
   15092:	461a      	mov	r2, r3
   15094:	9803      	ldr	r0, [sp, #12]
   15096:	f7ff ff39 	bl	14f0c <attsSetupMsg>
   1509a:	e021      	b.n	150e0 <attsIndMsgCback+0xc0>
    }
  }
  /* else if indication timeout */
  else if (pMsg->hdr.event == ATTS_MSG_IND_TIMEOUT)
   1509c:	9b01      	ldr	r3, [sp, #4]
   1509e:	789b      	ldrb	r3, [r3, #2]
   150a0:	2b22      	cmp	r3, #34	; 0x22
   150a2:	d11d      	bne.n	150e0 <attsIndMsgCback+0xc0>
  {
    /* if outstanding indication */
    if (pCcb->outIndHandle != ATT_HANDLE_NONE)
   150a4:	9b03      	ldr	r3, [sp, #12]
   150a6:	8a9b      	ldrh	r3, [r3, #20]
   150a8:	2b00      	cmp	r3, #0
   150aa:	d019      	beq.n	150e0 <attsIndMsgCback+0xc0>
    {
      /* clear out handle */
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   150ac:	9b03      	ldr	r3, [sp, #12]
   150ae:	2200      	movs	r2, #0
   150b0:	829a      	strh	r2, [r3, #20]

      /* call callback with timeout error */
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pCcb->pendIndHandle, ATT_ERR_TIMEOUT);
   150b2:	9b01      	ldr	r3, [sp, #4]
   150b4:	881b      	ldrh	r3, [r3, #0]
   150b6:	b2d8      	uxtb	r0, r3
   150b8:	9b03      	ldr	r3, [sp, #12]
   150ba:	8adb      	ldrh	r3, [r3, #22]
   150bc:	2271      	movs	r2, #113	; 0x71
   150be:	4619      	mov	r1, r3
   150c0:	f7ff fec2 	bl	14e48 <attsExecCallback>
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
   150c4:	9b03      	ldr	r3, [sp, #12]
   150c6:	2200      	movs	r2, #0
   150c8:	82da      	strh	r2, [r3, #22]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   150ca:	9b03      	ldr	r3, [sp, #12]
   150cc:	691b      	ldr	r3, [r3, #16]
   150ce:	9a03      	ldr	r2, [sp, #12]
   150d0:	6912      	ldr	r2, [r2, #16]
   150d2:	7f52      	ldrb	r2, [r2, #29]
   150d4:	f042 0204 	orr.w	r2, r2, #4
   150d8:	b2d2      	uxtb	r2, r2
   150da:	775a      	strb	r2, [r3, #29]
   150dc:	e000      	b.n	150e0 <attsIndMsgCback+0xc0>
    return;
   150de:	bf00      	nop
    }
  }
}
   150e0:	b005      	add	sp, #20
   150e2:	f85d fb04 	ldr.w	pc, [sp], #4

000150e6 <attsIndCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndCtrlCback(wsfMsgHdr_t *pMsg)
{
   150e6:	b500      	push	{lr}
   150e8:	b085      	sub	sp, #20
   150ea:	9001      	str	r0, [sp, #4]
  attsIndCcb_t   *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   150ec:	9b01      	ldr	r3, [sp, #4]
   150ee:	881b      	ldrh	r3, [r3, #0]
   150f0:	b2db      	uxtb	r3, r3
   150f2:	4618      	mov	r0, r3
   150f4:	f7ff fe16 	bl	14d24 <attsIndCcbByConnId>
   150f8:	9003      	str	r0, [sp, #12]
   150fa:	9b03      	ldr	r3, [sp, #12]
   150fc:	2b00      	cmp	r3, #0
   150fe:	d007      	beq.n	15110 <attsIndCtrlCback+0x2a>
  {
    /* call pending indication and notification callback */
    attsIndNtfCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   15100:	9b01      	ldr	r3, [sp, #4]
   15102:	881b      	ldrh	r3, [r3, #0]
   15104:	b2db      	uxtb	r3, r3
   15106:	2200      	movs	r2, #0
   15108:	9903      	ldr	r1, [sp, #12]
   1510a:	4618      	mov	r0, r3
   1510c:	f7ff feb7 	bl	14e7e <attsIndNtfCallback>
  }
}
   15110:	bf00      	nop
   15112:	b005      	add	sp, #20
   15114:	f85d fb04 	ldr.w	pc, [sp], #4

00015118 <attsHandleValueIndNtf>:
 *  \return None.
 */
/*************************************************************************************************/
static void attsHandleValueIndNtf(dmConnId_t connId, uint16_t handle, uint16_t valueLen,
                                  uint8_t *pValue, uint8_t opcode, bool_t zeroCpy)
{
   15118:	b500      	push	{lr}
   1511a:	b089      	sub	sp, #36	; 0x24
   1511c:	9301      	str	r3, [sp, #4]
   1511e:	4603      	mov	r3, r0
   15120:	f88d 300f 	strb.w	r3, [sp, #15]
   15124:	460b      	mov	r3, r1
   15126:	f8ad 300c 	strh.w	r3, [sp, #12]
   1512a:	4613      	mov	r3, r2
   1512c:	f8ad 300a 	strh.w	r3, [sp, #10]
  attsIndCcb_t   *pCcb;
  uint16_t       mtu;
  bool_t         transTimedOut;
  bool_t         pktSent = FALSE;
   15130:	2300      	movs	r3, #0
   15132:	f88d 301c 	strb.w	r3, [sp, #28]

  WsfTaskLock();
   15136:	f003 fa29 	bl	1858c <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId(connId)) != NULL)
   1513a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1513e:	4618      	mov	r0, r3
   15140:	f7ff fdf0 	bl	14d24 <attsIndCcbByConnId>
   15144:	9006      	str	r0, [sp, #24]
   15146:	9b06      	ldr	r3, [sp, #24]
   15148:	2b00      	cmp	r3, #0
   1514a:	d011      	beq.n	15170 <attsHandleValueIndNtf+0x58>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
   1514c:	9b06      	ldr	r3, [sp, #24]
   1514e:	691b      	ldr	r3, [r3, #16]
   15150:	8b5b      	ldrh	r3, [r3, #26]
   15152:	f8ad 301e 	strh.w	r3, [sp, #30]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   15156:	9b06      	ldr	r3, [sp, #24]
   15158:	691b      	ldr	r3, [r3, #16]
   1515a:	7f5b      	ldrb	r3, [r3, #29]
   1515c:	f003 0304 	and.w	r3, r3, #4
   15160:	2b00      	cmp	r3, #0
   15162:	bf14      	ite	ne
   15164:	2301      	movne	r3, #1
   15166:	2300      	moveq	r3, #0
   15168:	b2db      	uxtb	r3, r3
   1516a:	f88d 301d 	strb.w	r3, [sp, #29]
   1516e:	e005      	b.n	1517c <attsHandleValueIndNtf+0x64>
  }
  /* else connection not in use */
  else
  {
    /* MTU size unknown */
    mtu = 0;
   15170:	2300      	movs	r3, #0
   15172:	f8ad 301e 	strh.w	r3, [sp, #30]
    transTimedOut = FALSE;
   15176:	2300      	movs	r3, #0
   15178:	f88d 301d 	strb.w	r3, [sp, #29]
  }

  WsfTaskUnlock();
   1517c:	f003 fa0b 	bl	18596 <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
   15180:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15184:	2b00      	cmp	r3, #0
   15186:	f000 808f 	beq.w	152a8 <attsHandleValueIndNtf+0x190>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
   1518a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1518e:	2b00      	cmp	r3, #0
   15190:	f040 8082 	bne.w	15298 <attsHandleValueIndNtf+0x180>
    {
      /* Only send notifications and indications if client is aware of any database changes. */
      if (attsCsfIsClientChangeAware(connId, handle))
   15194:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   15198:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1519c:	4611      	mov	r1, r2
   1519e:	4618      	mov	r0, r3
   151a0:	f7ff fc8c 	bl	14abc <attsCsfIsClientChangeAware>
   151a4:	4603      	mov	r3, r0
   151a6:	2b00      	cmp	r3, #0
   151a8:	d07e      	beq.n	152a8 <attsHandleValueIndNtf+0x190>
      {
        /* if packet length is less than or equal to negotiated MTU */
        if ((valueLen + ATT_VALUE_NTF_LEN) <= mtu)
   151aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   151ae:	1cda      	adds	r2, r3, #3
   151b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   151b4:	429a      	cmp	r2, r3
   151b6:	dc66      	bgt.n	15286 <attsHandleValueIndNtf+0x16e>
        {
          attsApiMsg_t  *pMsg;
          uint8_t       *p;

          /* allocate message buffer */
          if ((pMsg = WsfMsgAlloc(sizeof(attsApiMsg_t))) != NULL)
   151b8:	2008      	movs	r0, #8
   151ba:	f003 f95a 	bl	18472 <WsfMsgAlloc>
   151be:	9005      	str	r0, [sp, #20]
   151c0:	9b05      	ldr	r3, [sp, #20]
   151c2:	2b00      	cmp	r3, #0
   151c4:	d070      	beq.n	152a8 <attsHandleValueIndNtf+0x190>
          {
            /* set parameters */
            pMsg->hdr.param = connId;
   151c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   151ca:	b29a      	uxth	r2, r3
   151cc:	9b05      	ldr	r3, [sp, #20]
   151ce:	801a      	strh	r2, [r3, #0]
            pMsg->hdr.event = ATTS_MSG_API_VALUE_IND_NTF;
   151d0:	9b05      	ldr	r3, [sp, #20]
   151d2:	2221      	movs	r2, #33	; 0x21
   151d4:	709a      	strb	r2, [r3, #2]

            if (zeroCpy)
   151d6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   151da:	2b00      	cmp	r3, #0
   151dc:	d005      	beq.n	151ea <attsHandleValueIndNtf+0xd2>
            {
              /* use packet buffer provided */
              pMsg->pPkt = (attsPktParam_t *)(pValue - ATT_VALUE_IND_NTF_BUF_LEN);
   151de:	9b01      	ldr	r3, [sp, #4]
   151e0:	f1a3 020b 	sub.w	r2, r3, #11
   151e4:	9b05      	ldr	r3, [sp, #20]
   151e6:	605a      	str	r2, [r3, #4]
   151e8:	e009      	b.n	151fe <attsHandleValueIndNtf+0xe6>
            }
            else
            {
              /* allocate packet buffer */
              pMsg->pPkt = attMsgAlloc(ATT_VALUE_IND_NTF_BUF_LEN + valueLen);
   151ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   151ee:	330b      	adds	r3, #11
   151f0:	b29b      	uxth	r3, r3
   151f2:	4618      	mov	r0, r3
   151f4:	f002 fbca 	bl	1798c <attMsgAlloc>
   151f8:	4602      	mov	r2, r0
   151fa:	9b05      	ldr	r3, [sp, #20]
   151fc:	605a      	str	r2, [r3, #4]
            }

            if (pMsg->pPkt != NULL)
   151fe:	9b05      	ldr	r3, [sp, #20]
   15200:	685b      	ldr	r3, [r3, #4]
   15202:	2b00      	cmp	r3, #0
   15204:	d03b      	beq.n	1527e <attsHandleValueIndNtf+0x166>
            {
              /* set data length and handle (ind and ntf have same header length) */
              pMsg->pPkt->len = ATT_VALUE_IND_LEN + valueLen;
   15206:	9b05      	ldr	r3, [sp, #20]
   15208:	685b      	ldr	r3, [r3, #4]
   1520a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1520e:	3203      	adds	r2, #3
   15210:	b292      	uxth	r2, r2
   15212:	801a      	strh	r2, [r3, #0]
              pMsg->pPkt->handle = handle;
   15214:	9b05      	ldr	r3, [sp, #20]
   15216:	685b      	ldr	r3, [r3, #4]
   15218:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1521c:	805a      	strh	r2, [r3, #2]

              /* build packet */
              p = (uint8_t *)pMsg->pPkt + L2C_PAYLOAD_START;
   1521e:	9b05      	ldr	r3, [sp, #20]
   15220:	685b      	ldr	r3, [r3, #4]
   15222:	3308      	adds	r3, #8
   15224:	9304      	str	r3, [sp, #16]
              UINT8_TO_BSTREAM(p, opcode);
   15226:	9b04      	ldr	r3, [sp, #16]
   15228:	1c5a      	adds	r2, r3, #1
   1522a:	9204      	str	r2, [sp, #16]
   1522c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   15230:	701a      	strb	r2, [r3, #0]
              UINT16_TO_BSTREAM(p, handle);
   15232:	9b04      	ldr	r3, [sp, #16]
   15234:	1c5a      	adds	r2, r3, #1
   15236:	9204      	str	r2, [sp, #16]
   15238:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1523c:	b2d2      	uxtb	r2, r2
   1523e:	701a      	strb	r2, [r3, #0]
   15240:	9b04      	ldr	r3, [sp, #16]
   15242:	1c5a      	adds	r2, r3, #1
   15244:	9204      	str	r2, [sp, #16]
   15246:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1524a:	0a12      	lsrs	r2, r2, #8
   1524c:	b292      	uxth	r2, r2
   1524e:	b2d2      	uxtb	r2, r2
   15250:	701a      	strb	r2, [r3, #0]

              if (!zeroCpy)
   15252:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15256:	2b00      	cmp	r3, #0
   15258:	d106      	bne.n	15268 <attsHandleValueIndNtf+0x150>
              {
                memcpy(p, pValue, valueLen);
   1525a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1525e:	461a      	mov	r2, r3
   15260:	9901      	ldr	r1, [sp, #4]
   15262:	9804      	ldr	r0, [sp, #16]
   15264:	f7f6 ff7c 	bl	c160 <memcpy>
              }

              /* send message */
              WsfMsgSend(attCb.handlerId, pMsg);
   15268:	4b18      	ldr	r3, [pc, #96]	; (152cc <attsHandleValueIndNtf+0x1b4>)
   1526a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   1526e:	9905      	ldr	r1, [sp, #20]
   15270:	4618      	mov	r0, r3
   15272:	f003 f922 	bl	184ba <WsfMsgSend>
              pktSent = TRUE;
   15276:	2301      	movs	r3, #1
   15278:	f88d 301c 	strb.w	r3, [sp, #28]
   1527c:	e014      	b.n	152a8 <attsHandleValueIndNtf+0x190>
            }
            else
            {
              /* free message buffer if packet buffer alloc failed */
              WsfMsgFree(pMsg);
   1527e:	9805      	ldr	r0, [sp, #20]
   15280:	f003 f90f 	bl	184a2 <WsfMsgFree>
   15284:	e010      	b.n	152a8 <attsHandleValueIndNtf+0x190>
        }
        /* packet length exceeds MTU size */
        else
        {
          /* call callback with failure status */
          attsExecCallback(connId, handle, ATT_ERR_MTU_EXCEEDED);
   15286:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1528a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1528e:	2277      	movs	r2, #119	; 0x77
   15290:	4618      	mov	r0, r3
   15292:	f7ff fdd9 	bl	14e48 <attsExecCallback>
   15296:	e007      	b.n	152a8 <attsHandleValueIndNtf+0x190>
    }
    else
    /* transaction's timed out */
    {
      /* call callback with failure status */
      attsExecCallback(connId, handle, ATT_ERR_TIMEOUT);
   15298:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1529c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   152a0:	2271      	movs	r2, #113	; 0x71
   152a2:	4618      	mov	r0, r3
   152a4:	f7ff fdd0 	bl	14e48 <attsExecCallback>
    }
  }

  /* if packet wasn't sent and it's a zero-copy packet */
  if (!pktSent && zeroCpy)
   152a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   152ac:	2b00      	cmp	r3, #0
   152ae:	d109      	bne.n	152c4 <attsHandleValueIndNtf+0x1ac>
   152b0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   152b4:	2b00      	cmp	r3, #0
   152b6:	d005      	beq.n	152c4 <attsHandleValueIndNtf+0x1ac>
  {
    /* free packet buffer provided */
    AttMsgFree(pValue, opcode);
   152b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   152bc:	4619      	mov	r1, r3
   152be:	9801      	ldr	r0, [sp, #4]
   152c0:	f002 fbe4 	bl	17a8c <AttMsgFree>
  }
}
   152c4:	bf00      	nop
   152c6:	b009      	add	sp, #36	; 0x24
   152c8:	f85d fb04 	ldr.w	pc, [sp], #4
   152cc:	10008c08 	.word	0x10008c08

000152d0 <attsProcValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcValueCnf(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   152d0:	b500      	push	{lr}
   152d2:	b087      	sub	sp, #28
   152d4:	9003      	str	r0, [sp, #12]
   152d6:	460b      	mov	r3, r1
   152d8:	9201      	str	r2, [sp, #4]
   152da:	f8ad 300a 	strh.w	r3, [sp, #10]
  attsIndCcb_t    *pIndCcb;

  /* get server indication CCB */
  if ((pIndCcb = attsIndCcbByConnId(pCcb->connId)) == NULL)
   152de:	9b03      	ldr	r3, [sp, #12]
   152e0:	7f1b      	ldrb	r3, [r3, #28]
   152e2:	4618      	mov	r0, r3
   152e4:	f7ff fd1e 	bl	14d24 <attsIndCcbByConnId>
   152e8:	9005      	str	r0, [sp, #20]
   152ea:	9b05      	ldr	r3, [sp, #20]
   152ec:	2b00      	cmp	r3, #0
   152ee:	d01c      	beq.n	1532a <attsProcValueCnf+0x5a>
  {
    return;
  }

  /* if an outstanding indication */
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   152f0:	9b05      	ldr	r3, [sp, #20]
   152f2:	8a9b      	ldrh	r3, [r3, #20]
   152f4:	2b00      	cmp	r3, #0
   152f6:	d019      	beq.n	1532c <attsProcValueCnf+0x5c>
  {
    /* clear outstanding indication */
    pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   152f8:	9b05      	ldr	r3, [sp, #20]
   152fa:	2200      	movs	r2, #0
   152fc:	829a      	strh	r2, [r3, #20]

    /* stop indication timer */
    WsfTimerStop(&pIndCcb->outIndTimer);
   152fe:	9b05      	ldr	r3, [sp, #20]
   15300:	4618      	mov	r0, r3
   15302:	f003 fc5d 	bl	18bc0 <WsfTimerStop>

    /* call callback if flow control permits */
    if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   15306:	9b03      	ldr	r3, [sp, #12]
   15308:	7f5b      	ldrb	r3, [r3, #29]
   1530a:	f003 0302 	and.w	r3, r3, #2
   1530e:	2b00      	cmp	r3, #0
   15310:	d10c      	bne.n	1532c <attsProcValueCnf+0x5c>
    {
      attsExecCallback(pCcb->connId, pIndCcb->pendIndHandle, ATT_SUCCESS);
   15312:	9b03      	ldr	r3, [sp, #12]
   15314:	7f18      	ldrb	r0, [r3, #28]
   15316:	9b05      	ldr	r3, [sp, #20]
   15318:	8adb      	ldrh	r3, [r3, #22]
   1531a:	2200      	movs	r2, #0
   1531c:	4619      	mov	r1, r3
   1531e:	f7ff fd93 	bl	14e48 <attsExecCallback>
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
   15322:	9b05      	ldr	r3, [sp, #20]
   15324:	2200      	movs	r2, #0
   15326:	82da      	strh	r2, [r3, #22]
   15328:	e000      	b.n	1532c <attsProcValueCnf+0x5c>
    return;
   1532a:	bf00      	nop
    }
  }
}
   1532c:	b007      	add	sp, #28
   1532e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00015334 <AttsIndInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsIndInit(void)
{
   15334:	b082      	sub	sp, #8
  uint8_t       i;
  attsIndCcb_t  *pCcb;

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   15336:	2300      	movs	r3, #0
   15338:	f88d 3007 	strb.w	r3, [sp, #7]
   1533c:	4b15      	ldr	r3, [pc, #84]	; (15394 <AttsIndInit+0x60>)
   1533e:	9300      	str	r3, [sp, #0]
   15340:	e01d      	b.n	1537e <AttsIndInit+0x4a>
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
   15342:	f89d 2007 	ldrb.w	r2, [sp, #7]
   15346:	4613      	mov	r3, r2
   15348:	00db      	lsls	r3, r3, #3
   1534a:	4413      	add	r3, r2
   1534c:	009b      	lsls	r3, r3, #2
   1534e:	4a12      	ldr	r2, [pc, #72]	; (15398 <AttsIndInit+0x64>)
   15350:	441a      	add	r2, r3
   15352:	9b00      	ldr	r3, [sp, #0]
   15354:	611a      	str	r2, [r3, #16]

    /* initialize timer */
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   15356:	4b10      	ldr	r3, [pc, #64]	; (15398 <AttsIndInit+0x64>)
   15358:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   1535c:	9b00      	ldr	r3, [sp, #0]
   1535e:	721a      	strb	r2, [r3, #8]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   15360:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15364:	b29b      	uxth	r3, r3
   15366:	3301      	adds	r3, #1
   15368:	b29a      	uxth	r2, r3
   1536a:	9b00      	ldr	r3, [sp, #0]
   1536c:	815a      	strh	r2, [r3, #10]
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   1536e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15372:	3301      	adds	r3, #1
   15374:	f88d 3007 	strb.w	r3, [sp, #7]
   15378:	9b00      	ldr	r3, [sp, #0]
   1537a:	331c      	adds	r3, #28
   1537c:	9300      	str	r3, [sp, #0]
   1537e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15382:	2b02      	cmp	r3, #2
   15384:	d9dd      	bls.n	15342 <AttsIndInit+0xe>
  }

  /* set up callback interface */
  attsCb.pInd = &attsIndFcnIf;
   15386:	4b05      	ldr	r3, [pc, #20]	; (1539c <AttsIndInit+0x68>)
   15388:	4a05      	ldr	r2, [pc, #20]	; (153a0 <AttsIndInit+0x6c>)
   1538a:	609a      	str	r2, [r3, #8]
}
   1538c:	bf00      	nop
   1538e:	b002      	add	sp, #8
   15390:	4770      	bx	lr
   15392:	bf00      	nop
   15394:	10008b9c 	.word	0x10008b9c
   15398:	10008c08 	.word	0x10008c08
   1539c:	10008bf0 	.word	0x10008bf0
   153a0:	00029950 	.word	0x00029950

000153a4 <AttsHandleValueInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsHandleValueInd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   153a4:	b500      	push	{lr}
   153a6:	b087      	sub	sp, #28
   153a8:	9303      	str	r3, [sp, #12]
   153aa:	4603      	mov	r3, r0
   153ac:	f88d 3017 	strb.w	r3, [sp, #23]
   153b0:	460b      	mov	r3, r1
   153b2:	f8ad 3014 	strh.w	r3, [sp, #20]
   153b6:	4613      	mov	r3, r2
   153b8:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsHandleValueIndNtf(connId, handle, valueLen, pValue, ATT_PDU_VALUE_IND, FALSE);
   153bc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   153c0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   153c4:	f89d 0017 	ldrb.w	r0, [sp, #23]
   153c8:	2300      	movs	r3, #0
   153ca:	9301      	str	r3, [sp, #4]
   153cc:	231d      	movs	r3, #29
   153ce:	9300      	str	r3, [sp, #0]
   153d0:	9b03      	ldr	r3, [sp, #12]
   153d2:	f7ff fea1 	bl	15118 <attsHandleValueIndNtf>
}
   153d6:	bf00      	nop
   153d8:	b007      	add	sp, #28
   153da:	f85d fb04 	ldr.w	pc, [sp], #4

000153de <AttsHandleValueNtf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsHandleValueNtf(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   153de:	b500      	push	{lr}
   153e0:	b087      	sub	sp, #28
   153e2:	9303      	str	r3, [sp, #12]
   153e4:	4603      	mov	r3, r0
   153e6:	f88d 3017 	strb.w	r3, [sp, #23]
   153ea:	460b      	mov	r3, r1
   153ec:	f8ad 3014 	strh.w	r3, [sp, #20]
   153f0:	4613      	mov	r3, r2
   153f2:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsHandleValueIndNtf(connId, handle, valueLen, pValue, ATT_PDU_VALUE_NTF, FALSE);
   153f6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   153fa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   153fe:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15402:	2300      	movs	r3, #0
   15404:	9301      	str	r3, [sp, #4]
   15406:	231b      	movs	r3, #27
   15408:	9300      	str	r3, [sp, #0]
   1540a:	9b03      	ldr	r3, [sp, #12]
   1540c:	f7ff fe84 	bl	15118 <attsHandleValueIndNtf>
}
   15410:	bf00      	nop
   15412:	b007      	add	sp, #28
   15414:	f85d fb04 	ldr.w	pc, [sp], #4

00015418 <attsDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   15418:	b500      	push	{lr}
   1541a:	b087      	sub	sp, #28
   1541c:	4603      	mov	r3, r0
   1541e:	9200      	str	r2, [sp, #0]
   15420:	f8ad 3006 	strh.w	r3, [sp, #6]
   15424:	460b      	mov	r3, r1
   15426:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsProcFcn_t procFcn;
  attCcb_t      *pCcb;
  uint16_t      attHandle;

  /* get connection cb for this handle */
  if ((pCcb = attCcbByHandle(handle)) == NULL)
   1542a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1542e:	4618      	mov	r0, r3
   15430:	f002 f9f4 	bl	1781c <attCcbByHandle>
   15434:	9004      	str	r0, [sp, #16]
   15436:	9b04      	ldr	r3, [sp, #16]
   15438:	2b00      	cmp	r3, #0
   1543a:	f000 8097 	beq.w	1556c <attsDataCback+0x154>
  {
    return;
  }

  /* parse opcode */
  opcode = *(pPacket + L2C_PAYLOAD_START);
   1543e:	9b00      	ldr	r3, [sp, #0]
   15440:	7a1b      	ldrb	r3, [r3, #8]
   15442:	f88d 300f 	strb.w	r3, [sp, #15]

  /* get method */
  if ((opcode <= ATT_PDU_WRITE_REQ) ||
   15446:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1544a:	2b12      	cmp	r3, #18
   1544c:	d907      	bls.n	1545e <attsDataCback+0x46>
   1544e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15452:	2b15      	cmp	r3, #21
   15454:	d909      	bls.n	1546a <attsDataCback+0x52>
      ((opcode >= ATT_PDU_PREP_WRITE_REQ) && (opcode <= ATT_PDU_VALUE_CNF)))
   15456:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1545a:	2b1e      	cmp	r3, #30
   1545c:	d805      	bhi.n	1546a <attsDataCback+0x52>
  {
    method = ATT_OPCODE_2_METHOD(opcode);
   1545e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15462:	105b      	asrs	r3, r3, #1
   15464:	f88d 3017 	strb.w	r3, [sp, #23]
   15468:	e012      	b.n	15490 <attsDataCback+0x78>
  }
  else if (opcode == ATT_PDU_WRITE_CMD)
   1546a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1546e:	2b52      	cmp	r3, #82	; 0x52
   15470:	d103      	bne.n	1547a <attsDataCback+0x62>
  {
    method = ATT_METHOD_WRITE_CMD;
   15472:	230a      	movs	r3, #10
   15474:	f88d 3017 	strb.w	r3, [sp, #23]
   15478:	e00a      	b.n	15490 <attsDataCback+0x78>
  }
  else if (opcode == ATT_PDU_SIGNED_WRITE_CMD)
   1547a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1547e:	2bd2      	cmp	r3, #210	; 0xd2
   15480:	d103      	bne.n	1548a <attsDataCback+0x72>
  {
    method = ATT_METHOD_SIGNED_WRITE_CMD;
   15482:	2310      	movs	r3, #16
   15484:	f88d 3017 	strb.w	r3, [sp, #23]
   15488:	e002      	b.n	15490 <attsDataCback+0x78>
  }
  else
  {
    method = ATT_METHOD_ERR;
   1548a:	2300      	movs	r3, #0
   1548c:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  /* ignore packet if write response is pending. */
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   15490:	9b04      	ldr	r3, [sp, #16]
   15492:	7f5b      	ldrb	r3, [r3, #29]
   15494:	f003 0308 	and.w	r3, r3, #8
   15498:	2b00      	cmp	r3, #0
   1549a:	d003      	beq.n	154a4 <attsDataCback+0x8c>
  {
    if (method != ATT_METHOD_VALUE_CNF)
   1549c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   154a0:	2b0f      	cmp	r3, #15
   154a2:	d165      	bne.n	15570 <attsDataCback+0x158>
      return;
    }
  }

  /* check client's status to see if server is allowed to process this PDU. */
  err = attsCsfActClientState(handle, opcode, pPacket);
   154a4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   154a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   154ac:	9a00      	ldr	r2, [sp, #0]
   154ae:	4618      	mov	r0, r3
   154b0:	f7ff fb2c 	bl	14b0c <attsCsfActClientState>
   154b4:	4603      	mov	r3, r0
   154b6:	f88d 3016 	strb.w	r3, [sp, #22]
  if (err)
   154ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
   154be:	2b00      	cmp	r3, #0
   154c0:	d00d      	beq.n	154de <attsDataCback+0xc6>
  {
    BYTES_TO_UINT16(attHandle, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   154c2:	9b00      	ldr	r3, [sp, #0]
   154c4:	3309      	adds	r3, #9
   154c6:	781b      	ldrb	r3, [r3, #0]
   154c8:	b29a      	uxth	r2, r3
   154ca:	9b00      	ldr	r3, [sp, #0]
   154cc:	330a      	adds	r3, #10
   154ce:	781b      	ldrb	r3, [r3, #0]
   154d0:	b29b      	uxth	r3, r3
   154d2:	021b      	lsls	r3, r3, #8
   154d4:	b29b      	uxth	r3, r3
   154d6:	4413      	add	r3, r2
   154d8:	f8ad 3014 	strh.w	r3, [sp, #20]
   154dc:	e002      	b.n	154e4 <attsDataCback+0xcc>
  }
  else
  {
    attHandle = ATT_HANDLE_NONE;
   154de:	2300      	movs	r3, #0
   154e0:	f8ad 3014 	strh.w	r3, [sp, #20]
    return;
  }
#endif

  /* if no error process request */
  if (!err)
   154e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   154e8:	2b00      	cmp	r3, #0
   154ea:	d122      	bne.n	15532 <attsDataCback+0x11a>
  {
    /* look up processing function */
    procFcn = attsProcFcnTbl[method];
   154ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
   154f0:	4a21      	ldr	r2, [pc, #132]	; (15578 <attsDataCback+0x160>)
   154f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154f6:	9302      	str	r3, [sp, #8]

    /* if method is supported */
    if (procFcn != NULL)
   154f8:	9b02      	ldr	r3, [sp, #8]
   154fa:	2b00      	cmp	r3, #0
   154fc:	d016      	beq.n	1552c <attsDataCback+0x114>
    {
      /* verify length */
      if (len >= attsMinPduLen[method])
   154fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15502:	4a1e      	ldr	r2, [pc, #120]	; (1557c <attsDataCback+0x164>)
   15504:	5cd3      	ldrb	r3, [r2, r3]
   15506:	b29b      	uxth	r3, r3
   15508:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1550c:	429a      	cmp	r2, r3
   1550e:	d309      	bcc.n	15524 <attsDataCback+0x10c>
      {
        /* execute processing function */
        (*procFcn)(pCcb, len, pPacket);
   15510:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   15514:	9b02      	ldr	r3, [sp, #8]
   15516:	9a00      	ldr	r2, [sp, #0]
   15518:	9804      	ldr	r0, [sp, #16]
   1551a:	4798      	blx	r3
        err = 0;
   1551c:	2300      	movs	r3, #0
   1551e:	f88d 3016 	strb.w	r3, [sp, #22]
   15522:	e006      	b.n	15532 <attsDataCback+0x11a>
      }
      else
      {
        /* invalid PDU length */
        err = ATT_ERR_INVALID_PDU;
   15524:	2304      	movs	r3, #4
   15526:	f88d 3016 	strb.w	r3, [sp, #22]
   1552a:	e002      	b.n	15532 <attsDataCback+0x11a>
      }
    }
    else
    {
      /* PDU not supported */
      err = ATT_ERR_NOT_SUP;
   1552c:	2306      	movs	r3, #6
   1552e:	f88d 3016 	strb.w	r3, [sp, #22]
    }
  }

  /* if there's an error and an error response can be sent for this opcode */
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   15532:	f89d 3016 	ldrb.w	r3, [sp, #22]
   15536:	2b00      	cmp	r3, #0
   15538:	d01b      	beq.n	15572 <attsDataCback+0x15a>
   1553a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1553e:	2b02      	cmp	r3, #2
   15540:	d017      	beq.n	15572 <attsDataCback+0x15a>
   15542:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15546:	2b1e      	cmp	r3, #30
   15548:	d013      	beq.n	15572 <attsDataCback+0x15a>
      ((opcode & ATT_PDU_MASK_COMMAND) == 0))
   1554a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   15552:	2b00      	cmp	r3, #0
   15554:	d10d      	bne.n	15572 <attsDataCback+0x15a>
  {
    attsErrRsp(handle, opcode, attHandle, err);
   15556:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1555a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1555e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   15562:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   15566:	f000 f86f 	bl	15648 <attsErrRsp>
   1556a:	e002      	b.n	15572 <attsDataCback+0x15a>
    return;
   1556c:	bf00      	nop
   1556e:	e000      	b.n	15572 <attsDataCback+0x15a>
      return;
   15570:	bf00      	nop
  }
}
   15572:	b007      	add	sp, #28
   15574:	f85d fb04 	ldr.w	pc, [sp], #4
   15578:	10002b38 	.word	0x10002b38
   1557c:	00029970 	.word	0x00029970

00015580 <attsConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   15580:	b500      	push	{lr}
   15582:	b083      	sub	sp, #12
   15584:	9001      	str	r0, [sp, #4]
   15586:	9100      	str	r1, [sp, #0]
  /* if connection closed */
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   15588:	9b00      	ldr	r3, [sp, #0]
   1558a:	789b      	ldrb	r3, [r3, #2]
   1558c:	2b28      	cmp	r3, #40	; 0x28
   1558e:	d111      	bne.n	155b4 <attsConnCback+0x34>
  {
    /* clear prepare write queue */
    attsClearPrepWrites(pCcb);
   15590:	9801      	ldr	r0, [sp, #4]
   15592:	f000 f8a0 	bl	156d6 <attsClearPrepWrites>

    /* stop service discovery idle timer, if running */
    if (DmConnCheckIdle(pCcb->connId) & DM_IDLE_ATTS_DISC)
   15596:	9b01      	ldr	r3, [sp, #4]
   15598:	7f1b      	ldrb	r3, [r3, #28]
   1559a:	4618      	mov	r0, r3
   1559c:	f7fc f9c6 	bl	1192c <DmConnCheckIdle>
   155a0:	4603      	mov	r3, r0
   155a2:	f003 0304 	and.w	r3, r3, #4
   155a6:	2b00      	cmp	r3, #0
   155a8:	d004      	beq.n	155b4 <attsConnCback+0x34>
    {
      WsfTimerStop(&pCcb->idleTimer);
   155aa:	9b01      	ldr	r3, [sp, #4]
   155ac:	3308      	adds	r3, #8
   155ae:	4618      	mov	r0, r3
   155b0:	f003 fb06 	bl	18bc0 <WsfTimerStop>
    }
  }

  /* pass event to indication interface */
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   155b4:	4b04      	ldr	r3, [pc, #16]	; (155c8 <attsConnCback+0x48>)
   155b6:	689b      	ldr	r3, [r3, #8]
   155b8:	68db      	ldr	r3, [r3, #12]
   155ba:	9900      	ldr	r1, [sp, #0]
   155bc:	9801      	ldr	r0, [sp, #4]
   155be:	4798      	blx	r3
}
   155c0:	bf00      	nop
   155c2:	b003      	add	sp, #12
   155c4:	f85d fb04 	ldr.w	pc, [sp], #4
   155c8:	10008bf0 	.word	0x10008bf0

000155cc <attsMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsMsgCback(wsfMsgHdr_t *pMsg)
{
   155cc:	b500      	push	{lr}
   155ce:	b083      	sub	sp, #12
   155d0:	9001      	str	r0, [sp, #4]
  /* handle service discovery idle timeout */
  if (pMsg->event == ATTS_MSG_IDLE_TIMEOUT)
   155d2:	9b01      	ldr	r3, [sp, #4]
   155d4:	789b      	ldrb	r3, [r3, #2]
   155d6:	2b20      	cmp	r3, #32
   155d8:	d108      	bne.n	155ec <attsMsgCback+0x20>
  {
    /* set channel as idle */
    DmConnSetIdle((dmConnId_t) pMsg->param, DM_IDLE_ATTS_DISC, DM_CONN_IDLE);
   155da:	9b01      	ldr	r3, [sp, #4]
   155dc:	881b      	ldrh	r3, [r3, #0]
   155de:	b2db      	uxtb	r3, r3
   155e0:	2200      	movs	r2, #0
   155e2:	2104      	movs	r1, #4
   155e4:	4618      	mov	r0, r3
   155e6:	f7fc f931 	bl	1184c <DmConnSetIdle>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
  {
    /* handle database hash update */
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
  }
}
   155ea:	e019      	b.n	15620 <attsMsgCback+0x54>
  else if (pMsg->event <= ATTS_MSG_IND_TIMEOUT)
   155ec:	9b01      	ldr	r3, [sp, #4]
   155ee:	789b      	ldrb	r3, [r3, #2]
   155f0:	2b22      	cmp	r3, #34	; 0x22
   155f2:	d805      	bhi.n	15600 <attsMsgCback+0x34>
    (*attsCb.pInd->msgCback)(pMsg);
   155f4:	4b0c      	ldr	r3, [pc, #48]	; (15628 <attsMsgCback+0x5c>)
   155f6:	689b      	ldr	r3, [r3, #8]
   155f8:	689b      	ldr	r3, [r3, #8]
   155fa:	9801      	ldr	r0, [sp, #4]
   155fc:	4798      	blx	r3
}
   155fe:	e00f      	b.n	15620 <attsMsgCback+0x54>
  else if (pMsg->event == ATTS_MSG_SIGN_CMAC_CMPL)
   15600:	9b01      	ldr	r3, [sp, #4]
   15602:	789b      	ldrb	r3, [r3, #2]
   15604:	2b23      	cmp	r3, #35	; 0x23
   15606:	d104      	bne.n	15612 <attsMsgCback+0x46>
    (*attsCb.signMsgCback)(pMsg);
   15608:	4b07      	ldr	r3, [pc, #28]	; (15628 <attsMsgCback+0x5c>)
   1560a:	68db      	ldr	r3, [r3, #12]
   1560c:	9801      	ldr	r0, [sp, #4]
   1560e:	4798      	blx	r3
}
   15610:	e006      	b.n	15620 <attsMsgCback+0x54>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
   15612:	9b01      	ldr	r3, [sp, #4]
   15614:	789b      	ldrb	r3, [r3, #2]
   15616:	2b24      	cmp	r3, #36	; 0x24
   15618:	d102      	bne.n	15620 <attsMsgCback+0x54>
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
   1561a:	9801      	ldr	r0, [sp, #4]
   1561c:	f000 f89c 	bl	15758 <attsProcessDatabaseHashUpdate>
}
   15620:	bf00      	nop
   15622:	b003      	add	sp, #12
   15624:	f85d fb04 	ldr.w	pc, [sp], #4
   15628:	10008bf0 	.word	0x10008bf0

0001562c <attsL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
   1562c:	b500      	push	{lr}
   1562e:	b083      	sub	sp, #12
   15630:	9001      	str	r0, [sp, #4]
  /* pass event to indication interface */
  (*attsCb.pInd->ctrlCback)(pMsg);
   15632:	4b04      	ldr	r3, [pc, #16]	; (15644 <attsL2cCtrlCback+0x18>)
   15634:	689b      	ldr	r3, [r3, #8]
   15636:	685b      	ldr	r3, [r3, #4]
   15638:	9801      	ldr	r0, [sp, #4]
   1563a:	4798      	blx	r3
}
   1563c:	bf00      	nop
   1563e:	b003      	add	sp, #12
   15640:	f85d fb04 	ldr.w	pc, [sp], #4
   15644:	10008bf0 	.word	0x10008bf0

00015648 <attsErrRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsErrRsp(uint16_t handle, uint8_t opcode, uint16_t attHandle, uint8_t reason)
{
   15648:	b510      	push	{r4, lr}
   1564a:	b084      	sub	sp, #16
   1564c:	4604      	mov	r4, r0
   1564e:	4608      	mov	r0, r1
   15650:	4611      	mov	r1, r2
   15652:	461a      	mov	r2, r3
   15654:	4623      	mov	r3, r4
   15656:	f8ad 3006 	strh.w	r3, [sp, #6]
   1565a:	4603      	mov	r3, r0
   1565c:	f88d 3005 	strb.w	r3, [sp, #5]
   15660:	460b      	mov	r3, r1
   15662:	f8ad 3002 	strh.w	r3, [sp, #2]
   15666:	4613      	mov	r3, r2
   15668:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  /* allocate buffer */
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   1566c:	200d      	movs	r0, #13
   1566e:	f002 f98d 	bl	1798c <attMsgAlloc>
   15672:	9003      	str	r0, [sp, #12]
   15674:	9b03      	ldr	r3, [sp, #12]
   15676:	2b00      	cmp	r3, #0
   15678:	d02a      	beq.n	156d0 <attsErrRsp+0x88>
  {
    p = pBuf + L2C_PAYLOAD_START;
   1567a:	9b03      	ldr	r3, [sp, #12]
   1567c:	3308      	adds	r3, #8
   1567e:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   15680:	9b02      	ldr	r3, [sp, #8]
   15682:	1c5a      	adds	r2, r3, #1
   15684:	9202      	str	r2, [sp, #8]
   15686:	2201      	movs	r2, #1
   15688:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, opcode);
   1568a:	9b02      	ldr	r3, [sp, #8]
   1568c:	1c5a      	adds	r2, r3, #1
   1568e:	9202      	str	r2, [sp, #8]
   15690:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15694:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, attHandle);
   15696:	9b02      	ldr	r3, [sp, #8]
   15698:	1c5a      	adds	r2, r3, #1
   1569a:	9202      	str	r2, [sp, #8]
   1569c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   156a0:	b2d2      	uxtb	r2, r2
   156a2:	701a      	strb	r2, [r3, #0]
   156a4:	9b02      	ldr	r3, [sp, #8]
   156a6:	1c5a      	adds	r2, r3, #1
   156a8:	9202      	str	r2, [sp, #8]
   156aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   156ae:	0a12      	lsrs	r2, r2, #8
   156b0:	b292      	uxth	r2, r2
   156b2:	b2d2      	uxtb	r2, r2
   156b4:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   156b6:	9b02      	ldr	r3, [sp, #8]
   156b8:	1c5a      	adds	r2, r3, #1
   156ba:	9202      	str	r2, [sp, #8]
   156bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
   156c0:	701a      	strb	r2, [r3, #0]

    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   156c2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   156c6:	9b03      	ldr	r3, [sp, #12]
   156c8:	2205      	movs	r2, #5
   156ca:	2004      	movs	r0, #4
   156cc:	f006 f8ca 	bl	1b864 <L2cDataReq>
  }
}
   156d0:	bf00      	nop
   156d2:	b004      	add	sp, #16
   156d4:	bd10      	pop	{r4, pc}

000156d6 <attsClearPrepWrites>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsClearPrepWrites(attCcb_t *pCcb)
{
   156d6:	b500      	push	{lr}
   156d8:	b085      	sub	sp, #20
   156da:	9001      	str	r0, [sp, #4]
  void *pBuf;

  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   156dc:	e002      	b.n	156e4 <attsClearPrepWrites+0xe>
  {
    WsfBufFree(pBuf);
   156de:	9803      	ldr	r0, [sp, #12]
   156e0:	f002 fe72 	bl	183c8 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   156e4:	9b01      	ldr	r3, [sp, #4]
   156e6:	4618      	mov	r0, r3
   156e8:	f003 f8f7 	bl	188da <WsfQueueDeq>
   156ec:	9003      	str	r0, [sp, #12]
   156ee:	9b03      	ldr	r3, [sp, #12]
   156f0:	2b00      	cmp	r3, #0
   156f2:	d1f4      	bne.n	156de <attsClearPrepWrites+0x8>
  }
}
   156f4:	bf00      	nop
   156f6:	b005      	add	sp, #20
   156f8:	f85d fb04 	ldr.w	pc, [sp], #4

000156fc <attsDiscBusy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsDiscBusy(attCcb_t *pCcb)
{
   156fc:	b500      	push	{lr}
   156fe:	b083      	sub	sp, #12
   15700:	9001      	str	r0, [sp, #4]
  if (pAttCfg->discIdleTimeout > 0)
   15702:	4b13      	ldr	r3, [pc, #76]	; (15750 <attsDiscBusy+0x54>)
   15704:	681b      	ldr	r3, [r3, #0]
   15706:	681b      	ldr	r3, [r3, #0]
   15708:	2b00      	cmp	r3, #0
   1570a:	d01d      	beq.n	15748 <attsDiscBusy+0x4c>
  {
    /* set channel as busy */
    DmConnSetIdle(pCcb->connId, DM_IDLE_ATTS_DISC, DM_CONN_BUSY);
   1570c:	9b01      	ldr	r3, [sp, #4]
   1570e:	7f1b      	ldrb	r3, [r3, #28]
   15710:	2201      	movs	r2, #1
   15712:	2104      	movs	r1, #4
   15714:	4618      	mov	r0, r3
   15716:	f7fc f899 	bl	1184c <DmConnSetIdle>

    /* start service discovery idle timer */
    pCcb->idleTimer.handlerId = attCb.handlerId;
   1571a:	4b0e      	ldr	r3, [pc, #56]	; (15754 <attsDiscBusy+0x58>)
   1571c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   15720:	9b01      	ldr	r3, [sp, #4]
   15722:	741a      	strb	r2, [r3, #16]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   15724:	9b01      	ldr	r3, [sp, #4]
   15726:	2220      	movs	r2, #32
   15728:	751a      	strb	r2, [r3, #20]
    pCcb->idleTimer.msg.param = pCcb->connId;
   1572a:	9b01      	ldr	r3, [sp, #4]
   1572c:	7f1b      	ldrb	r3, [r3, #28]
   1572e:	b29a      	uxth	r2, r3
   15730:	9b01      	ldr	r3, [sp, #4]
   15732:	825a      	strh	r2, [r3, #18]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   15734:	9b01      	ldr	r3, [sp, #4]
   15736:	f103 0208 	add.w	r2, r3, #8
   1573a:	4b05      	ldr	r3, [pc, #20]	; (15750 <attsDiscBusy+0x54>)
   1573c:	681b      	ldr	r3, [r3, #0]
   1573e:	681b      	ldr	r3, [r3, #0]
   15740:	4619      	mov	r1, r3
   15742:	4610      	mov	r0, r2
   15744:	f003 fa18 	bl	18b78 <WsfTimerStartSec>
  }
}
   15748:	bf00      	nop
   1574a:	b003      	add	sp, #12
   1574c:	f85d fb04 	ldr.w	pc, [sp], #4
   15750:	10002b90 	.word	0x10002b90
   15754:	10008c08 	.word	0x10008c08

00015758 <attsProcessDatabaseHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcessDatabaseHashUpdate(secCmacMsg_t *pMsg)
{
   15758:	b500      	push	{lr}
   1575a:	b08d      	sub	sp, #52	; 0x34
   1575c:	9003      	str	r0, [sp, #12]
  attsAttr_t *pAttr;
  attsGroup_t *pGroup;
  uint16_t dbhCharHandle;

  /* send to application */
  evt.hdr.event = ATTS_DB_HASH_CALC_CMPL_IND;
   1575e:	2311      	movs	r3, #17
   15760:	f88d 301e 	strb.w	r3, [sp, #30]
  evt.hdr.status = ATT_SUCCESS;
   15764:	2300      	movs	r3, #0
   15766:	f88d 301f 	strb.w	r3, [sp, #31]
  evt.hdr.param = DM_CONN_ID_NONE;
   1576a:	2300      	movs	r3, #0
   1576c:	f8ad 301c 	strh.w	r3, [sp, #28]

  evt.valueLen = ATT_DATABASE_HASH_LEN;
   15770:	2310      	movs	r3, #16
   15772:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  evt.handle = ATT_HANDLE_NONE;
   15776:	2300      	movs	r3, #0
   15778:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  evt.continuing = FALSE;
   1577c:	2300      	movs	r3, #0
   1577e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  evt.mtu = 0;
   15782:	2300      	movs	r3, #0
   15784:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a

  /* free plain text buffer */
  if (pMsg->pPlainText != NULL)
   15788:	9b03      	ldr	r3, [sp, #12]
   1578a:	689b      	ldr	r3, [r3, #8]
   1578c:	2b00      	cmp	r3, #0
   1578e:	d007      	beq.n	157a0 <attsProcessDatabaseHashUpdate+0x48>
  {
    WsfBufFree(pMsg->pPlainText);
   15790:	9b03      	ldr	r3, [sp, #12]
   15792:	689b      	ldr	r3, [r3, #8]
   15794:	4618      	mov	r0, r3
   15796:	f002 fe17 	bl	183c8 <WsfBufFree>
    pMsg->pPlainText = NULL;
   1579a:	9b03      	ldr	r3, [sp, #12]
   1579c:	2200      	movs	r2, #0
   1579e:	609a      	str	r2, [r3, #8]
  }

  /* copy in little endian */
  evt.pValue = pMsg->pCiphertext;
   157a0:	9b03      	ldr	r3, [sp, #12]
   157a2:	685b      	ldr	r3, [r3, #4]
   157a4:	9308      	str	r3, [sp, #32]

  /* find GATT database handle */
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   157a6:	ab05      	add	r3, sp, #20
   157a8:	9301      	str	r3, [sp, #4]
   157aa:	ab06      	add	r3, sp, #24
   157ac:	9300      	str	r3, [sp, #0]
   157ae:	4b10      	ldr	r3, [pc, #64]	; (157f0 <attsProcessDatabaseHashUpdate+0x98>)
   157b0:	2202      	movs	r2, #2
   157b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   157b6:	2001      	movs	r0, #1
   157b8:	f000 fcaa 	bl	16110 <attsFindUuidInRange>
   157bc:	4603      	mov	r3, r0
   157be:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
                                      (uint8_t *) attGattDbhChUuid, &pAttr, &pGroup);

  if (dbhCharHandle != ATT_HANDLE_NONE)
   157c2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   157c6:	2b00      	cmp	r3, #0
   157c8:	d006      	beq.n	157d8 <attsProcessDatabaseHashUpdate+0x80>
  {
    /* Set hash in service. */
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
   157ca:	9a08      	ldr	r2, [sp, #32]
   157cc:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   157d0:	2110      	movs	r1, #16
   157d2:	4618      	mov	r0, r3
   157d4:	f000 f8ea 	bl	159ac <AttsSetAttr>
  }

  /* set hash update complete */
  attsCsfSetHashUpdateStatus(FALSE);
   157d8:	2000      	movs	r0, #0
   157da:	f7ff f925 	bl	14a28 <attsCsfSetHashUpdateStatus>

  attCb.cback(&evt);
   157de:	4b05      	ldr	r3, [pc, #20]	; (157f4 <attsProcessDatabaseHashUpdate+0x9c>)
   157e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   157e2:	aa07      	add	r2, sp, #28
   157e4:	4610      	mov	r0, r2
   157e6:	4798      	blx	r3
}
   157e8:	bf00      	nop
   157ea:	b00d      	add	sp, #52	; 0x34
   157ec:	f85d fb04 	ldr.w	pc, [sp], #4
   157f0:	000299b4 	.word	0x000299b4
   157f4:	10008c08 	.word	0x10008c08

000157f8 <attsCheckPendDbHashReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCheckPendDbHashReadRsp(void)
{
   157f8:	b500      	push	{lr}
   157fa:	b087      	sub	sp, #28
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   157fc:	2300      	movs	r3, #0
   157fe:	f88d 3017 	strb.w	r3, [sp, #23]
   15802:	e080      	b.n	15906 <attsCheckPendDbHashReadRsp+0x10e>
  {
    attCcb_t *pCcb = &attCb.ccb[i];
   15804:	f89d 2017 	ldrb.w	r2, [sp, #23]
   15808:	4613      	mov	r3, r2
   1580a:	00db      	lsls	r3, r3, #3
   1580c:	4413      	add	r3, r2
   1580e:	009b      	lsls	r3, r3, #2
   15810:	4a41      	ldr	r2, [pc, #260]	; (15918 <attsCheckPendDbHashReadRsp+0x120>)
   15812:	4413      	add	r3, r2
   15814:	9304      	str	r3, [sp, #16]

    if (pCcb->pPendDbHashRsp)
   15816:	9b04      	ldr	r3, [sp, #16]
   15818:	6a1b      	ldr	r3, [r3, #32]
   1581a:	2b00      	cmp	r3, #0
   1581c:	d06e      	beq.n	158fc <attsCheckPendDbHashReadRsp+0x104>
    {
      uint8_t *pBuf;

      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1581e:	9b04      	ldr	r3, [sp, #16]
   15820:	8b5b      	ldrh	r3, [r3, #26]
   15822:	3308      	adds	r3, #8
   15824:	b29b      	uxth	r3, r3
   15826:	4618      	mov	r0, r3
   15828:	f002 f8b0 	bl	1798c <attMsgAlloc>
   1582c:	9003      	str	r0, [sp, #12]
   1582e:	9b03      	ldr	r3, [sp, #12]
   15830:	2b00      	cmp	r3, #0
   15832:	d051      	beq.n	158d8 <attsCheckPendDbHashReadRsp+0xe0>
      {
        uint8_t *p;
        attsAttr_t  *pAttr;
        attsGroup_t *pGroup;

        p = pBuf + L2C_PAYLOAD_START;
   15834:	9b03      	ldr	r3, [sp, #12]
   15836:	3308      	adds	r3, #8
   15838:	9302      	str	r3, [sp, #8]
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   1583a:	9b02      	ldr	r3, [sp, #8]
   1583c:	1c5a      	adds	r2, r3, #1
   1583e:	9202      	str	r2, [sp, #8]
   15840:	2209      	movs	r2, #9
   15842:	701a      	strb	r2, [r3, #0]

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   15844:	9b02      	ldr	r3, [sp, #8]
   15846:	1c5a      	adds	r2, r3, #1
   15848:	9202      	str	r2, [sp, #8]
   1584a:	2212      	movs	r2, #18
   1584c:	701a      	strb	r2, [r3, #0]

        /* copy result to response message */
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   1584e:	9b02      	ldr	r3, [sp, #8]
   15850:	1c5a      	adds	r2, r3, #1
   15852:	9202      	str	r2, [sp, #8]
   15854:	9a04      	ldr	r2, [sp, #16]
   15856:	6a12      	ldr	r2, [r2, #32]
   15858:	8852      	ldrh	r2, [r2, #2]
   1585a:	b2d2      	uxtb	r2, r2
   1585c:	701a      	strb	r2, [r3, #0]
   1585e:	9b02      	ldr	r3, [sp, #8]
   15860:	1c5a      	adds	r2, r3, #1
   15862:	9202      	str	r2, [sp, #8]
   15864:	9a04      	ldr	r2, [sp, #16]
   15866:	6a12      	ldr	r2, [r2, #32]
   15868:	8852      	ldrh	r2, [r2, #2]
   1586a:	0a12      	lsrs	r2, r2, #8
   1586c:	b292      	uxth	r2, r2
   1586e:	b2d2      	uxtb	r2, r2
   15870:	701a      	strb	r2, [r3, #0]

        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   15872:	9b04      	ldr	r3, [sp, #16]
   15874:	6a1b      	ldr	r3, [r3, #32]
   15876:	885b      	ldrh	r3, [r3, #2]
   15878:	466a      	mov	r2, sp
   1587a:	4611      	mov	r1, r2
   1587c:	4618      	mov	r0, r3
   1587e:	f000 f945 	bl	15b0c <attsFindByHandle>
   15882:	9001      	str	r0, [sp, #4]
   15884:	9b01      	ldr	r3, [sp, #4]
   15886:	2b00      	cmp	r3, #0
   15888:	d01b      	beq.n	158c2 <attsCheckPendDbHashReadRsp+0xca>
        {
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   1588a:	9b01      	ldr	r3, [sp, #4]
   1588c:	6859      	ldr	r1, [r3, #4]
   1588e:	9b01      	ldr	r3, [sp, #4]
   15890:	689b      	ldr	r3, [r3, #8]
   15892:	881b      	ldrh	r3, [r3, #0]
   15894:	461a      	mov	r2, r3
   15896:	9802      	ldr	r0, [sp, #8]
   15898:	f7f6 fc62 	bl	c160 <memcpy>
          p += *pAttr->pLen;
   1589c:	9b01      	ldr	r3, [sp, #4]
   1589e:	689b      	ldr	r3, [r3, #8]
   158a0:	881b      	ldrh	r3, [r3, #0]
   158a2:	461a      	mov	r2, r3
   158a4:	9b02      	ldr	r3, [sp, #8]
   158a6:	4413      	add	r3, r2
   158a8:	9302      	str	r3, [sp, #8]

          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   158aa:	9b04      	ldr	r3, [sp, #16]
   158ac:	8b19      	ldrh	r1, [r3, #24]
   158ae:	9b02      	ldr	r3, [sp, #8]
   158b0:	9a03      	ldr	r2, [sp, #12]
   158b2:	3208      	adds	r2, #8
   158b4:	1a9b      	subs	r3, r3, r2
   158b6:	b29a      	uxth	r2, r3
   158b8:	9b03      	ldr	r3, [sp, #12]
   158ba:	2004      	movs	r0, #4
   158bc:	f005 ffd2 	bl	1b864 <L2cDataReq>
   158c0:	e014      	b.n	158ec <attsCheckPendDbHashReadRsp+0xf4>
        }
        else
        {
          attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_NOT_FOUND);
   158c2:	9b04      	ldr	r3, [sp, #16]
   158c4:	7f1b      	ldrb	r3, [r3, #28]
   158c6:	b298      	uxth	r0, r3
   158c8:	9b04      	ldr	r3, [sp, #16]
   158ca:	6a1b      	ldr	r3, [r3, #32]
   158cc:	881a      	ldrh	r2, [r3, #0]
   158ce:	230a      	movs	r3, #10
   158d0:	2108      	movs	r1, #8
   158d2:	f7ff feb9 	bl	15648 <attsErrRsp>
   158d6:	e009      	b.n	158ec <attsCheckPendDbHashReadRsp+0xf4>
        }
      }
      else
      {
        attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_RESOURCES);
   158d8:	9b04      	ldr	r3, [sp, #16]
   158da:	7f1b      	ldrb	r3, [r3, #28]
   158dc:	b298      	uxth	r0, r3
   158de:	9b04      	ldr	r3, [sp, #16]
   158e0:	6a1b      	ldr	r3, [r3, #32]
   158e2:	881a      	ldrh	r2, [r3, #0]
   158e4:	2311      	movs	r3, #17
   158e6:	2108      	movs	r1, #8
   158e8:	f7ff feae 	bl	15648 <attsErrRsp>
      }

      /* Free pending state information. */
      WsfBufFree(pCcb->pPendDbHashRsp);
   158ec:	9b04      	ldr	r3, [sp, #16]
   158ee:	6a1b      	ldr	r3, [r3, #32]
   158f0:	4618      	mov	r0, r3
   158f2:	f002 fd69 	bl	183c8 <WsfBufFree>
      pCcb->pPendDbHashRsp = NULL;
   158f6:	9b04      	ldr	r3, [sp, #16]
   158f8:	2200      	movs	r2, #0
   158fa:	621a      	str	r2, [r3, #32]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   158fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15900:	3301      	adds	r3, #1
   15902:	f88d 3017 	strb.w	r3, [sp, #23]
   15906:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1590a:	2b02      	cmp	r3, #2
   1590c:	f67f af7a 	bls.w	15804 <attsCheckPendDbHashReadRsp+0xc>
    }
  }
}
   15910:	bf00      	nop
   15912:	b007      	add	sp, #28
   15914:	f85d fb04 	ldr.w	pc, [sp], #4
   15918:	10008c08 	.word	0x10008c08

0001591c <AttsInit>:
 */
/*************************************************************************************************/
void AttsInit(void)
{
  /* Initialize control block */
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   1591c:	4b08      	ldr	r3, [pc, #32]	; (15940 <AttsInit+0x24>)
   1591e:	2200      	movs	r2, #0
   15920:	601a      	str	r2, [r3, #0]
   15922:	4b07      	ldr	r3, [pc, #28]	; (15940 <AttsInit+0x24>)
   15924:	2200      	movs	r2, #0
   15926:	605a      	str	r2, [r3, #4]
  attsCb.pInd = &attFcnDefault;
   15928:	4b05      	ldr	r3, [pc, #20]	; (15940 <AttsInit+0x24>)
   1592a:	4a06      	ldr	r2, [pc, #24]	; (15944 <AttsInit+0x28>)
   1592c:	609a      	str	r2, [r3, #8]
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   1592e:	4b04      	ldr	r3, [pc, #16]	; (15940 <AttsInit+0x24>)
   15930:	4a05      	ldr	r2, [pc, #20]	; (15948 <AttsInit+0x2c>)
   15932:	60da      	str	r2, [r3, #12]

  /* set up callback interfaces */
  attCb.pServer = &attsFcnIf;
   15934:	4b05      	ldr	r3, [pc, #20]	; (1594c <AttsInit+0x30>)
   15936:	4a06      	ldr	r2, [pc, #24]	; (15950 <AttsInit+0x34>)
   15938:	671a      	str	r2, [r3, #112]	; 0x70
}
   1593a:	bf00      	nop
   1593c:	4770      	bx	lr
   1593e:	bf00      	nop
   15940:	10008bf0 	.word	0x10008bf0
   15944:	00029984 	.word	0x00029984
   15948:	000177f1 	.word	0x000177f1
   1594c:	10008c08 	.word	0x10008c08
   15950:	00029960 	.word	0x00029960

00015954 <AttsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsAddGroup(attsGroup_t *pGroup)
{
   15954:	b500      	push	{lr}
   15956:	b085      	sub	sp, #20
   15958:	9001      	str	r0, [sp, #4]
  attsGroup_t   *pElem;
  attsGroup_t   *pPrev = NULL;
   1595a:	2300      	movs	r3, #0
   1595c:	9302      	str	r3, [sp, #8]

  /* task schedule lock */
  WsfTaskLock();
   1595e:	f002 fe15 	bl	1858c <WsfTaskLock>

  pElem = (attsGroup_t *) attsCb.groupQueue.pHead;
   15962:	4b11      	ldr	r3, [pc, #68]	; (159a8 <AttsAddGroup+0x54>)
   15964:	681b      	ldr	r3, [r3, #0]
   15966:	9303      	str	r3, [sp, #12]

  /* iterate over queue sorted by increasing handle value */
  while (pElem != NULL)
   15968:	e00a      	b.n	15980 <AttsAddGroup+0x2c>
  {
    if (pGroup->startHandle < pElem->startHandle)
   1596a:	9b01      	ldr	r3, [sp, #4]
   1596c:	8a1a      	ldrh	r2, [r3, #16]
   1596e:	9b03      	ldr	r3, [sp, #12]
   15970:	8a1b      	ldrh	r3, [r3, #16]
   15972:	429a      	cmp	r2, r3
   15974:	d308      	bcc.n	15988 <AttsAddGroup+0x34>
    {
      break;
    }
    pPrev = pElem;
   15976:	9b03      	ldr	r3, [sp, #12]
   15978:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
   1597a:	9b03      	ldr	r3, [sp, #12]
   1597c:	681b      	ldr	r3, [r3, #0]
   1597e:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   15980:	9b03      	ldr	r3, [sp, #12]
   15982:	2b00      	cmp	r3, #0
   15984:	d1f1      	bne.n	1596a <AttsAddGroup+0x16>
   15986:	e000      	b.n	1598a <AttsAddGroup+0x36>
      break;
   15988:	bf00      	nop
  }

  /* insert new group */
  WsfQueueInsert(&attsCb.groupQueue, pGroup, pPrev);
   1598a:	9a02      	ldr	r2, [sp, #8]
   1598c:	9901      	ldr	r1, [sp, #4]
   1598e:	4806      	ldr	r0, [pc, #24]	; (159a8 <AttsAddGroup+0x54>)
   15990:	f002 ffda 	bl	18948 <WsfQueueInsert>

  /* set database hash update status to true until a new hash is generated */
  attsCsfSetHashUpdateStatus(TRUE);
   15994:	2001      	movs	r0, #1
   15996:	f7ff f847 	bl	14a28 <attsCsfSetHashUpdateStatus>

  /* task schedule unlock */
  WsfTaskUnlock();
   1599a:	f002 fdfc 	bl	18596 <WsfTaskUnlock>
}
   1599e:	bf00      	nop
   159a0:	b005      	add	sp, #20
   159a2:	f85d fb04 	ldr.w	pc, [sp], #4
   159a6:	bf00      	nop
   159a8:	10008bf0 	.word	0x10008bf0

000159ac <AttsSetAttr>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
uint8_t AttsSetAttr(uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   159ac:	b500      	push	{lr}
   159ae:	b087      	sub	sp, #28
   159b0:	4603      	mov	r3, r0
   159b2:	9200      	str	r2, [sp, #0]
   159b4:	f8ad 3006 	strh.w	r3, [sp, #6]
   159b8:	460b      	mov	r3, r1
   159ba:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;
   159be:	2300      	movs	r3, #0
   159c0:	f88d 3017 	strb.w	r3, [sp, #23]

  WsfTaskLock();
   159c4:	f002 fde2 	bl	1858c <WsfTaskLock>

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   159c8:	aa03      	add	r2, sp, #12
   159ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   159ce:	4611      	mov	r1, r2
   159d0:	4618      	mov	r0, r3
   159d2:	f000 f89b 	bl	15b0c <attsFindByHandle>
   159d6:	9004      	str	r0, [sp, #16]
   159d8:	9b04      	ldr	r3, [sp, #16]
   159da:	2b00      	cmp	r3, #0
   159dc:	d01d      	beq.n	15a1a <AttsSetAttr+0x6e>
  {
    /* verify write length */
    if (valueLen > pAttr->maxLen)
   159de:	9b04      	ldr	r3, [sp, #16]
   159e0:	899b      	ldrh	r3, [r3, #12]
   159e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   159e6:	429a      	cmp	r2, r3
   159e8:	d903      	bls.n	159f2 <AttsSetAttr+0x46>
    {
      err = ATT_ERR_LENGTH;
   159ea:	230d      	movs	r3, #13
   159ec:	f88d 3017 	strb.w	r3, [sp, #23]
   159f0:	e016      	b.n	15a20 <AttsSetAttr+0x74>
    }
    else
    {
      /* set attribute value */
      memcpy(pAttr->pValue, pValue, valueLen);
   159f2:	9b04      	ldr	r3, [sp, #16]
   159f4:	685b      	ldr	r3, [r3, #4]
   159f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   159fa:	9900      	ldr	r1, [sp, #0]
   159fc:	4618      	mov	r0, r3
   159fe:	f7f6 fbaf 	bl	c160 <memcpy>

      /* set the length if variable length attribute */
      if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   15a02:	9b04      	ldr	r3, [sp, #16]
   15a04:	7b9b      	ldrb	r3, [r3, #14]
   15a06:	f003 0308 	and.w	r3, r3, #8
   15a0a:	2b00      	cmp	r3, #0
   15a0c:	d008      	beq.n	15a20 <AttsSetAttr+0x74>
      {
        *(pAttr->pLen) = valueLen;
   15a0e:	9b04      	ldr	r3, [sp, #16]
   15a10:	689b      	ldr	r3, [r3, #8]
   15a12:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   15a16:	801a      	strh	r2, [r3, #0]
   15a18:	e002      	b.n	15a20 <AttsSetAttr+0x74>
    }
  }
  /* else attribute not found */
  else
  {
    err = ATT_ERR_NOT_FOUND;
   15a1a:	230a      	movs	r3, #10
   15a1c:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  WsfTaskUnlock();
   15a20:	f002 fdb9 	bl	18596 <WsfTaskUnlock>

  return err;
   15a24:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   15a28:	4618      	mov	r0, r3
   15a2a:	b007      	add	sp, #28
   15a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00015a30 <attsUuidCmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuidCmp(attsAttr_t *pAttr, uint8_t uuidLen, uint8_t *pUuid)
{
   15a30:	b500      	push	{lr}
   15a32:	b085      	sub	sp, #20
   15a34:	9003      	str	r0, [sp, #12]
   15a36:	460b      	mov	r3, r1
   15a38:	9201      	str	r2, [sp, #4]
   15a3a:	f88d 300b 	strb.w	r3, [sp, #11]
  /* if both uuids are the same length */
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   15a3e:	9b03      	ldr	r3, [sp, #12]
   15a40:	7b9b      	ldrb	r3, [r3, #14]
   15a42:	f003 0301 	and.w	r3, r3, #1
   15a46:	2b00      	cmp	r3, #0
   15a48:	d103      	bne.n	15a52 <attsUuidCmp+0x22>
   15a4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15a4e:	2b02      	cmp	r3, #2
   15a50:	d009      	beq.n	15a66 <attsUuidCmp+0x36>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   15a52:	9b03      	ldr	r3, [sp, #12]
   15a54:	7b9b      	ldrb	r3, [r3, #14]
   15a56:	f003 0301 	and.w	r3, r3, #1
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   15a5a:	2b00      	cmp	r3, #0
   15a5c:	d012      	beq.n	15a84 <attsUuidCmp+0x54>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   15a5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15a62:	2b10      	cmp	r3, #16
   15a64:	d10e      	bne.n	15a84 <attsUuidCmp+0x54>
  {
    /* simply compare the data */
    return (memcmp(pAttr->pUuid, pUuid, uuidLen) == 0);
   15a66:	9b03      	ldr	r3, [sp, #12]
   15a68:	681b      	ldr	r3, [r3, #0]
   15a6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   15a6e:	9901      	ldr	r1, [sp, #4]
   15a70:	4618      	mov	r0, r3
   15a72:	f7f6 fb45 	bl	c100 <memcmp>
   15a76:	4603      	mov	r3, r0
   15a78:	2b00      	cmp	r3, #0
   15a7a:	bf0c      	ite	eq
   15a7c:	2301      	moveq	r3, #1
   15a7e:	2300      	movne	r3, #0
   15a80:	b2db      	uxtb	r3, r3
   15a82:	e018      	b.n	15ab6 <attsUuidCmp+0x86>
  }
  /* else we need to convert one of the uuids */
  else if (((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_128_UUID_LEN))
   15a84:	9b03      	ldr	r3, [sp, #12]
   15a86:	7b9b      	ldrb	r3, [r3, #14]
   15a88:	f003 0301 	and.w	r3, r3, #1
   15a8c:	2b00      	cmp	r3, #0
   15a8e:	d10b      	bne.n	15aa8 <attsUuidCmp+0x78>
   15a90:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15a94:	2b10      	cmp	r3, #16
   15a96:	d107      	bne.n	15aa8 <attsUuidCmp+0x78>
  {
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
   15a98:	9b03      	ldr	r3, [sp, #12]
   15a9a:	681b      	ldr	r3, [r3, #0]
   15a9c:	9901      	ldr	r1, [sp, #4]
   15a9e:	4618      	mov	r0, r3
   15aa0:	f001 fef0 	bl	17884 <attUuidCmp16to128>
   15aa4:	4603      	mov	r3, r0
   15aa6:	e006      	b.n	15ab6 <attsUuidCmp+0x86>
  }
  else
  {
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   15aa8:	9b03      	ldr	r3, [sp, #12]
   15aaa:	681b      	ldr	r3, [r3, #0]
   15aac:	4619      	mov	r1, r3
   15aae:	9801      	ldr	r0, [sp, #4]
   15ab0:	f001 fee8 	bl	17884 <attUuidCmp16to128>
   15ab4:	4603      	mov	r3, r0
  }
}
   15ab6:	4618      	mov	r0, r3
   15ab8:	b005      	add	sp, #20
   15aba:	f85d fb04 	ldr.w	pc, [sp], #4

00015abe <attsUuid16Cmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuid16Cmp(uint8_t *pUuid16, uint8_t uuidLen, uint8_t *pUuid)
{
   15abe:	b500      	push	{lr}
   15ac0:	b085      	sub	sp, #20
   15ac2:	9003      	str	r0, [sp, #12]
   15ac4:	460b      	mov	r3, r1
   15ac6:	9201      	str	r2, [sp, #4]
   15ac8:	f88d 300b 	strb.w	r3, [sp, #11]
  if (uuidLen == ATT_16_UUID_LEN)
   15acc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15ad0:	2b02      	cmp	r3, #2
   15ad2:	d112      	bne.n	15afa <attsUuid16Cmp+0x3c>
  {
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   15ad4:	9b03      	ldr	r3, [sp, #12]
   15ad6:	781a      	ldrb	r2, [r3, #0]
   15ad8:	9b01      	ldr	r3, [sp, #4]
   15ada:	781b      	ldrb	r3, [r3, #0]
   15adc:	429a      	cmp	r2, r3
   15ade:	d109      	bne.n	15af4 <attsUuid16Cmp+0x36>
   15ae0:	9b03      	ldr	r3, [sp, #12]
   15ae2:	3301      	adds	r3, #1
   15ae4:	781a      	ldrb	r2, [r3, #0]
   15ae6:	9b01      	ldr	r3, [sp, #4]
   15ae8:	3301      	adds	r3, #1
   15aea:	781b      	ldrb	r3, [r3, #0]
   15aec:	429a      	cmp	r2, r3
   15aee:	d101      	bne.n	15af4 <attsUuid16Cmp+0x36>
   15af0:	2301      	movs	r3, #1
   15af2:	e000      	b.n	15af6 <attsUuid16Cmp+0x38>
   15af4:	2300      	movs	r3, #0
   15af6:	b2db      	uxtb	r3, r3
   15af8:	e004      	b.n	15b04 <attsUuid16Cmp+0x46>
  }
  else
  {
    return attUuidCmp16to128(pUuid16, pUuid);
   15afa:	9901      	ldr	r1, [sp, #4]
   15afc:	9803      	ldr	r0, [sp, #12]
   15afe:	f001 fec1 	bl	17884 <attUuidCmp16to128>
   15b02:	4603      	mov	r3, r0
  }
}
   15b04:	4618      	mov	r0, r3
   15b06:	b005      	add	sp, #20
   15b08:	f85d fb04 	ldr.w	pc, [sp], #4

00015b0c <attsFindByHandle>:
 *
 *  \return Pointer to attribute if found, othewise NULL.
 */
/*************************************************************************************************/
attsAttr_t *attsFindByHandle(uint16_t handle, attsGroup_t **pAttrGroup)
{
   15b0c:	b084      	sub	sp, #16
   15b0e:	4603      	mov	r3, r0
   15b10:	9100      	str	r1, [sp, #0]
   15b12:	f8ad 3006 	strh.w	r3, [sp, #6]
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   15b16:	4b13      	ldr	r3, [pc, #76]	; (15b64 <attsFindByHandle+0x58>)
   15b18:	681b      	ldr	r3, [r3, #0]
   15b1a:	9303      	str	r3, [sp, #12]
   15b1c:	e01b      	b.n	15b56 <attsFindByHandle+0x4a>
  {
    /*  if start handle within handle range of group */
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   15b1e:	9b03      	ldr	r3, [sp, #12]
   15b20:	8a1b      	ldrh	r3, [r3, #16]
   15b22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15b26:	429a      	cmp	r2, r3
   15b28:	d312      	bcc.n	15b50 <attsFindByHandle+0x44>
   15b2a:	9b03      	ldr	r3, [sp, #12]
   15b2c:	8a5b      	ldrh	r3, [r3, #18]
   15b2e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15b32:	429a      	cmp	r2, r3
   15b34:	d80c      	bhi.n	15b50 <attsFindByHandle+0x44>
    {
      /* index by handle into attribute array to return attribute */
      *pAttrGroup = pGroup;
   15b36:	9b00      	ldr	r3, [sp, #0]
   15b38:	9a03      	ldr	r2, [sp, #12]
   15b3a:	601a      	str	r2, [r3, #0]
      return &pGroup->pAttr[handle - pGroup->startHandle];
   15b3c:	9b03      	ldr	r3, [sp, #12]
   15b3e:	685a      	ldr	r2, [r3, #4]
   15b40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15b44:	9903      	ldr	r1, [sp, #12]
   15b46:	8a09      	ldrh	r1, [r1, #16]
   15b48:	1a5b      	subs	r3, r3, r1
   15b4a:	011b      	lsls	r3, r3, #4
   15b4c:	4413      	add	r3, r2
   15b4e:	e006      	b.n	15b5e <attsFindByHandle+0x52>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   15b50:	9b03      	ldr	r3, [sp, #12]
   15b52:	681b      	ldr	r3, [r3, #0]
   15b54:	9303      	str	r3, [sp, #12]
   15b56:	9b03      	ldr	r3, [sp, #12]
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d1e0      	bne.n	15b1e <attsFindByHandle+0x12>
    }
  }

  /* handle not found */
  return NULL;
   15b5c:	2300      	movs	r3, #0
}
   15b5e:	4618      	mov	r0, r3
   15b60:	b004      	add	sp, #16
   15b62:	4770      	bx	lr
   15b64:	10008bf0 	.word	0x10008bf0

00015b68 <attsFindInRange>:
 *
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindInRange(uint16_t startHandle, uint16_t endHandle, attsAttr_t **pAttr)
{
   15b68:	b084      	sub	sp, #16
   15b6a:	4603      	mov	r3, r0
   15b6c:	9200      	str	r2, [sp, #0]
   15b6e:	f8ad 3006 	strh.w	r3, [sp, #6]
   15b72:	460b      	mov	r3, r1
   15b74:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   15b78:	4b1b      	ldr	r3, [pc, #108]	; (15be8 <attsFindInRange+0x80>)
   15b7a:	681b      	ldr	r3, [r3, #0]
   15b7c:	9303      	str	r3, [sp, #12]
   15b7e:	e02c      	b.n	15bda <attsFindInRange+0x72>
  {
    /* if start handle is less than group start handle but handle range is within group */
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   15b80:	9b03      	ldr	r3, [sp, #12]
   15b82:	8a1b      	ldrh	r3, [r3, #16]
   15b84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15b88:	429a      	cmp	r2, r3
   15b8a:	d209      	bcs.n	15ba0 <attsFindInRange+0x38>
   15b8c:	9b03      	ldr	r3, [sp, #12]
   15b8e:	8a1b      	ldrh	r3, [r3, #16]
   15b90:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   15b94:	429a      	cmp	r2, r3
   15b96:	d303      	bcc.n	15ba0 <attsFindInRange+0x38>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   15b98:	9b03      	ldr	r3, [sp, #12]
   15b9a:	8a1b      	ldrh	r3, [r3, #16]
   15b9c:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    /*  if start handle within handle range of group */
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   15ba0:	9b03      	ldr	r3, [sp, #12]
   15ba2:	8a1b      	ldrh	r3, [r3, #16]
   15ba4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15ba8:	429a      	cmp	r2, r3
   15baa:	d313      	bcc.n	15bd4 <attsFindInRange+0x6c>
   15bac:	9b03      	ldr	r3, [sp, #12]
   15bae:	8a5b      	ldrh	r3, [r3, #18]
   15bb0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15bb4:	429a      	cmp	r2, r3
   15bb6:	d80d      	bhi.n	15bd4 <attsFindInRange+0x6c>
    {
      /* index by handle into attribute array to return attribute */
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   15bb8:	9b03      	ldr	r3, [sp, #12]
   15bba:	685a      	ldr	r2, [r3, #4]
   15bbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15bc0:	9903      	ldr	r1, [sp, #12]
   15bc2:	8a09      	ldrh	r1, [r1, #16]
   15bc4:	1a5b      	subs	r3, r3, r1
   15bc6:	011b      	lsls	r3, r3, #4
   15bc8:	441a      	add	r2, r3
   15bca:	9b00      	ldr	r3, [sp, #0]
   15bcc:	601a      	str	r2, [r3, #0]
      return startHandle;
   15bce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15bd2:	e006      	b.n	15be2 <attsFindInRange+0x7a>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   15bd4:	9b03      	ldr	r3, [sp, #12]
   15bd6:	681b      	ldr	r3, [r3, #0]
   15bd8:	9303      	str	r3, [sp, #12]
   15bda:	9b03      	ldr	r3, [sp, #12]
   15bdc:	2b00      	cmp	r3, #0
   15bde:	d1cf      	bne.n	15b80 <attsFindInRange+0x18>
    }
  }

  /* handle within range not found */
  return ATT_HANDLE_NONE;
   15be0:	2300      	movs	r3, #0
}
   15be2:	4618      	mov	r0, r3
   15be4:	b004      	add	sp, #16
   15be6:	4770      	bx	lr
   15be8:	10008bf0 	.word	0x10008bf0

00015bec <attsPermissions>:
 *
 *  \return ATT_SUCCESS if successful or error code on failure.
 */
/*************************************************************************************************/
uint8_t attsPermissions(dmConnId_t connId, uint8_t permit, uint16_t handle, uint8_t permissions)
{
   15bec:	b510      	push	{r4, lr}
   15bee:	b084      	sub	sp, #16
   15bf0:	4604      	mov	r4, r0
   15bf2:	4608      	mov	r0, r1
   15bf4:	4611      	mov	r1, r2
   15bf6:	461a      	mov	r2, r3
   15bf8:	4623      	mov	r3, r4
   15bfa:	f88d 3007 	strb.w	r3, [sp, #7]
   15bfe:	4603      	mov	r3, r0
   15c00:	f88d 3006 	strb.w	r3, [sp, #6]
   15c04:	460b      	mov	r3, r1
   15c06:	f8ad 3004 	strh.w	r3, [sp, #4]
   15c0a:	4613      	mov	r3, r2
   15c0c:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t secLevel;

  /* verify read or write permissions */
  if (!(permissions & permit))
   15c10:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15c14:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15c18:	4013      	ands	r3, r2
   15c1a:	b2db      	uxtb	r3, r3
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d107      	bne.n	15c30 <attsPermissions+0x44>
  {
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   15c20:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15c24:	2b01      	cmp	r3, #1
   15c26:	d101      	bne.n	15c2c <attsPermissions+0x40>
   15c28:	2302      	movs	r3, #2
   15c2a:	e04a      	b.n	15cc2 <attsPermissions+0xd6>
   15c2c:	2303      	movs	r3, #3
   15c2e:	e048      	b.n	15cc2 <attsPermissions+0xd6>
  }

  /* convert write permissions to read permissions for easier masking */
  if (permit == ATTS_PERMIT_WRITE)
   15c30:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15c34:	2b10      	cmp	r3, #16
   15c36:	d104      	bne.n	15c42 <attsPermissions+0x56>
  {
    permissions >>= 4;
   15c38:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15c3c:	091b      	lsrs	r3, r3, #4
   15c3e:	f88d 3003 	strb.w	r3, [sp, #3]
  }

  /* if no security requirements return quickly */
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   15c42:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15c46:	f003 030e 	and.w	r3, r3, #14
   15c4a:	2b00      	cmp	r3, #0
   15c4c:	d101      	bne.n	15c52 <attsPermissions+0x66>
  {
    return ATT_SUCCESS;
   15c4e:	2300      	movs	r3, #0
   15c50:	e037      	b.n	15cc2 <attsPermissions+0xd6>
  }

  /* get security level for this connection */
  secLevel = DmConnSecLevel(connId);
   15c52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c56:	4618      	mov	r0, r3
   15c58:	f7fb fde4 	bl	11824 <DmConnSecLevel>
   15c5c:	4603      	mov	r3, r0
   15c5e:	f88d 300f 	strb.w	r3, [sp, #15]

  /* check if encryption required */
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   15c62:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15c66:	f003 0308 	and.w	r3, r3, #8
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	d005      	beq.n	15c7a <attsPermissions+0x8e>
   15c6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15c72:	2b00      	cmp	r3, #0
   15c74:	d101      	bne.n	15c7a <attsPermissions+0x8e>
  {
    return ATT_ERR_AUTH;
   15c76:	2305      	movs	r3, #5
   15c78:	e023      	b.n	15cc2 <attsPermissions+0xd6>
  }

  /* check if encryption required with authenticated key */
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   15c7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15c7e:	f003 030a 	and.w	r3, r3, #10
   15c82:	2b0a      	cmp	r3, #10
   15c84:	d105      	bne.n	15c92 <attsPermissions+0xa6>
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   15c86:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15c8a:	2b01      	cmp	r3, #1
   15c8c:	d801      	bhi.n	15c92 <attsPermissions+0xa6>
  {
    return ATT_ERR_AUTH;
   15c8e:	2305      	movs	r3, #5
   15c90:	e017      	b.n	15cc2 <attsPermissions+0xd6>
  }

  /* authorization check */
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   15c92:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15c96:	f003 0304 	and.w	r3, r3, #4
   15c9a:	2b00      	cmp	r3, #0
   15c9c:	d010      	beq.n	15cc0 <attsPermissions+0xd4>
  {
    if (attsCb.authorCback == NULL)
   15c9e:	4b0a      	ldr	r3, [pc, #40]	; (15cc8 <attsPermissions+0xdc>)
   15ca0:	691b      	ldr	r3, [r3, #16]
   15ca2:	2b00      	cmp	r3, #0
   15ca4:	d101      	bne.n	15caa <attsPermissions+0xbe>
    {
      return ATT_ERR_AUTHOR;
   15ca6:	2308      	movs	r3, #8
   15ca8:	e00b      	b.n	15cc2 <attsPermissions+0xd6>
    }
    else
    {
      return (*attsCb.authorCback)(connId, permit, handle);
   15caa:	4b07      	ldr	r3, [pc, #28]	; (15cc8 <attsPermissions+0xdc>)
   15cac:	691b      	ldr	r3, [r3, #16]
   15cae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   15cb2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   15cb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15cba:	4798      	blx	r3
   15cbc:	4603      	mov	r3, r0
   15cbe:	e000      	b.n	15cc2 <attsPermissions+0xd6>
    }
  }
  else
  {
    return ATT_SUCCESS;
   15cc0:	2300      	movs	r3, #0
  }
}
   15cc2:	4618      	mov	r0, r3
   15cc4:	b004      	add	sp, #16
   15cc6:	bd10      	pop	{r4, pc}
   15cc8:	10008bf0 	.word	0x10008bf0

00015ccc <attsProcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcMtuReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   15ccc:	b510      	push	{r4, lr}
   15cce:	b088      	sub	sp, #32
   15cd0:	9003      	str	r0, [sp, #12]
   15cd2:	460b      	mov	r3, r1
   15cd4:	9201      	str	r2, [sp, #4]
   15cd6:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t   *p;
  uint16_t  mtu;
  uint16_t  localMtu;
  uint8_t   *pRsp;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   15cda:	9b01      	ldr	r3, [sp, #4]
   15cdc:	3309      	adds	r3, #9
   15cde:	9306      	str	r3, [sp, #24]

  /* parse mtu */
  BYTES_TO_UINT16(mtu, p);
   15ce0:	9b06      	ldr	r3, [sp, #24]
   15ce2:	781b      	ldrb	r3, [r3, #0]
   15ce4:	b29a      	uxth	r2, r3
   15ce6:	9b06      	ldr	r3, [sp, #24]
   15ce8:	3301      	adds	r3, #1
   15cea:	781b      	ldrb	r3, [r3, #0]
   15cec:	b29b      	uxth	r3, r3
   15cee:	021b      	lsls	r3, r3, #8
   15cf0:	b29b      	uxth	r3, r3
   15cf2:	4413      	add	r3, r2
   15cf4:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* verify */
  if (mtu < ATT_DEFAULT_MTU)
   15cf8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15cfc:	2b16      	cmp	r3, #22
   15cfe:	d802      	bhi.n	15d06 <attsProcMtuReq+0x3a>
  {
    mtu = ATT_DEFAULT_MTU;
   15d00:	2317      	movs	r3, #23
   15d02:	f8ad 301e 	strh.w	r3, [sp, #30]
  }

  /* get desired MTU */
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   15d06:	4b23      	ldr	r3, [pc, #140]	; (15d94 <attsProcMtuReq+0xc8>)
   15d08:	681b      	ldr	r3, [r3, #0]
   15d0a:	889b      	ldrh	r3, [r3, #4]
   15d0c:	461c      	mov	r4, r3
   15d0e:	f008 fbf3 	bl	1e4f8 <HciGetMaxRxAclLen>
   15d12:	4603      	mov	r3, r0
   15d14:	3b04      	subs	r3, #4
   15d16:	429c      	cmp	r4, r3
   15d18:	da03      	bge.n	15d22 <attsProcMtuReq+0x56>
   15d1a:	4b1e      	ldr	r3, [pc, #120]	; (15d94 <attsProcMtuReq+0xc8>)
   15d1c:	681b      	ldr	r3, [r3, #0]
   15d1e:	889b      	ldrh	r3, [r3, #4]
   15d20:	e004      	b.n	15d2c <attsProcMtuReq+0x60>
   15d22:	f008 fbe9 	bl	1e4f8 <HciGetMaxRxAclLen>
   15d26:	4603      	mov	r3, r0
   15d28:	3b04      	subs	r3, #4
   15d2a:	b29b      	uxth	r3, r3
   15d2c:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* send response */
  if ((pRsp = attMsgAlloc(L2C_PAYLOAD_START + ATT_MTU_RSP_LEN)) != NULL)
   15d30:	200b      	movs	r0, #11
   15d32:	f001 fe2b 	bl	1798c <attMsgAlloc>
   15d36:	9004      	str	r0, [sp, #16]
   15d38:	9b04      	ldr	r3, [sp, #16]
   15d3a:	2b00      	cmp	r3, #0
   15d3c:	d01e      	beq.n	15d7c <attsProcMtuReq+0xb0>
  {
    p = pRsp + L2C_PAYLOAD_START;
   15d3e:	9b04      	ldr	r3, [sp, #16]
   15d40:	3308      	adds	r3, #8
   15d42:	9306      	str	r3, [sp, #24]
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
   15d44:	9b06      	ldr	r3, [sp, #24]
   15d46:	1c5a      	adds	r2, r3, #1
   15d48:	9206      	str	r2, [sp, #24]
   15d4a:	2203      	movs	r2, #3
   15d4c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, localMtu);
   15d4e:	9b06      	ldr	r3, [sp, #24]
   15d50:	1c5a      	adds	r2, r3, #1
   15d52:	9206      	str	r2, [sp, #24]
   15d54:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   15d58:	b2d2      	uxtb	r2, r2
   15d5a:	701a      	strb	r2, [r3, #0]
   15d5c:	9b06      	ldr	r3, [sp, #24]
   15d5e:	1c5a      	adds	r2, r3, #1
   15d60:	9206      	str	r2, [sp, #24]
   15d62:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   15d66:	0a12      	lsrs	r2, r2, #8
   15d68:	b292      	uxth	r2, r2
   15d6a:	b2d2      	uxtb	r2, r2
   15d6c:	701a      	strb	r2, [r3, #0]

    L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_MTU_RSP_LEN, pRsp);
   15d6e:	9b03      	ldr	r3, [sp, #12]
   15d70:	8b19      	ldrh	r1, [r3, #24]
   15d72:	9b04      	ldr	r3, [sp, #16]
   15d74:	2203      	movs	r2, #3
   15d76:	2004      	movs	r0, #4
   15d78:	f005 fd74 	bl	1b864 <L2cDataReq>
  }

  /* set mtu for the connection */
  attSetMtu(pCcb, mtu, localMtu);
   15d7c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   15d80:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15d84:	4619      	mov	r1, r3
   15d86:	9803      	ldr	r0, [sp, #12]
   15d88:	f001 fd9a 	bl	178c0 <attSetMtu>
}
   15d8c:	bf00      	nop
   15d8e:	b008      	add	sp, #32
   15d90:	bd10      	pop	{r4, pc}
   15d92:	bf00      	nop
   15d94:	10002b90 	.word	0x10002b90

00015d98 <attsProcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindInfoReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   15d98:	b500      	push	{lr}
   15d9a:	b08b      	sub	sp, #44	; 0x2c
   15d9c:	9003      	str	r0, [sp, #12]
   15d9e:	460b      	mov	r3, r1
   15da0:	9201      	str	r2, [sp, #4]
   15da2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     err = ATT_SUCCESS;
   15da6:	2300      	movs	r3, #0
   15da8:	f88d 301d 	strb.w	r3, [sp, #29]

  /* parse handles */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   15dac:	9b01      	ldr	r3, [sp, #4]
   15dae:	3309      	adds	r3, #9
   15db0:	9301      	str	r3, [sp, #4]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   15db2:	9b01      	ldr	r3, [sp, #4]
   15db4:	781b      	ldrb	r3, [r3, #0]
   15db6:	b29a      	uxth	r2, r3
   15db8:	9b01      	ldr	r3, [sp, #4]
   15dba:	3301      	adds	r3, #1
   15dbc:	781b      	ldrb	r3, [r3, #0]
   15dbe:	b29b      	uxth	r3, r3
   15dc0:	021b      	lsls	r3, r3, #8
   15dc2:	b29b      	uxth	r3, r3
   15dc4:	4413      	add	r3, r2
   15dc6:	f8ad 301a 	strh.w	r3, [sp, #26]
   15dca:	9b01      	ldr	r3, [sp, #4]
   15dcc:	3302      	adds	r3, #2
   15dce:	9301      	str	r3, [sp, #4]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   15dd0:	9b01      	ldr	r3, [sp, #4]
   15dd2:	781b      	ldrb	r3, [r3, #0]
   15dd4:	b29a      	uxth	r2, r3
   15dd6:	9b01      	ldr	r3, [sp, #4]
   15dd8:	3301      	adds	r3, #1
   15dda:	781b      	ldrb	r3, [r3, #0]
   15ddc:	b29b      	uxth	r3, r3
   15dde:	021b      	lsls	r3, r3, #8
   15de0:	b29b      	uxth	r3, r3
   15de2:	4413      	add	r3, r2
   15de4:	f8ad 3018 	strh.w	r3, [sp, #24]
   15de8:	9b01      	ldr	r3, [sp, #4]
   15dea:	3302      	adds	r3, #2
   15dec:	9301      	str	r3, [sp, #4]

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   15dee:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   15df2:	2b00      	cmp	r3, #0
   15df4:	d005      	beq.n	15e02 <attsProcFindInfoReq+0x6a>
   15df6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   15dfa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   15dfe:	429a      	cmp	r2, r3
   15e00:	d902      	bls.n	15e08 <attsProcFindInfoReq+0x70>
  {
    err = ATT_ERR_HANDLE;
   15e02:	2301      	movs	r3, #1
   15e04:	f88d 301d 	strb.w	r3, [sp, #29]
  }

  if (!err)
   15e08:	f89d 301d 	ldrb.w	r3, [sp, #29]
   15e0c:	2b00      	cmp	r3, #0
   15e0e:	f040 80ad 	bne.w	15f6c <attsProcFindInfoReq+0x1d4>
  {
    /* allocate max size buffer for response */
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   15e12:	9b03      	ldr	r3, [sp, #12]
   15e14:	8b5b      	ldrh	r3, [r3, #26]
   15e16:	3308      	adds	r3, #8
   15e18:	b29b      	uxth	r3, r3
   15e1a:	4618      	mov	r0, r3
   15e1c:	f001 fdb6 	bl	1798c <attMsgAlloc>
   15e20:	9009      	str	r0, [sp, #36]	; 0x24
   15e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e24:	2b00      	cmp	r3, #0
   15e26:	f000 809e 	beq.w	15f66 <attsProcFindInfoReq+0x1ce>
    {
      p = pBuf + L2C_PAYLOAD_START;
   15e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e2c:	3308      	adds	r3, #8
   15e2e:	9308      	str	r3, [sp, #32]
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_RSP);
   15e30:	9b08      	ldr	r3, [sp, #32]
   15e32:	1c5a      	adds	r2, r3, #1
   15e34:	9208      	str	r2, [sp, #32]
   15e36:	2205      	movs	r2, #5
   15e38:	701a      	strb	r2, [r3, #0]

      /* set result format */
      UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_16_UUID);
   15e3a:	9b08      	ldr	r3, [sp, #32]
   15e3c:	1c5a      	adds	r2, r3, #1
   15e3e:	9208      	str	r2, [sp, #32]
   15e40:	2201      	movs	r2, #1
   15e42:	701a      	strb	r2, [r3, #0]

      /* find attributes within handle range */
      handle = startHandle;
   15e44:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   15e48:	f8ad 301e 	strh.w	r3, [sp, #30]
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   15e4c:	e067      	b.n	15f1e <attsProcFindInfoReq+0x186>
      {
        /* copy handle and UUID into response buffer */

        /* if 128 bit UUID */
        if (pAttr->settings & ATTS_SET_UUID_128)
   15e4e:	9b05      	ldr	r3, [sp, #20]
   15e50:	7b9b      	ldrb	r3, [r3, #14]
   15e52:	f003 0301 	and.w	r3, r3, #1
   15e56:	2b00      	cmp	r3, #0
   15e58:	d028      	beq.n	15eac <attsProcFindInfoReq+0x114>
        {
          /* if this is the first result */
          if (p == (pBuf + L2C_PAYLOAD_START + 2))
   15e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e5c:	f103 020a 	add.w	r2, r3, #10
   15e60:	9b08      	ldr	r3, [sp, #32]
   15e62:	429a      	cmp	r2, r3
   15e64:	d16b      	bne.n	15f3e <attsProcFindInfoReq+0x1a6>
          {
            p--;
   15e66:	9b08      	ldr	r3, [sp, #32]
   15e68:	3b01      	subs	r3, #1
   15e6a:	9308      	str	r3, [sp, #32]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   15e6c:	9b08      	ldr	r3, [sp, #32]
   15e6e:	1c5a      	adds	r2, r3, #1
   15e70:	9208      	str	r2, [sp, #32]
   15e72:	2202      	movs	r2, #2
   15e74:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(p, handle);
   15e76:	9b08      	ldr	r3, [sp, #32]
   15e78:	1c5a      	adds	r2, r3, #1
   15e7a:	9208      	str	r2, [sp, #32]
   15e7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   15e80:	b2d2      	uxtb	r2, r2
   15e82:	701a      	strb	r2, [r3, #0]
   15e84:	9b08      	ldr	r3, [sp, #32]
   15e86:	1c5a      	adds	r2, r3, #1
   15e88:	9208      	str	r2, [sp, #32]
   15e8a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   15e8e:	0a12      	lsrs	r2, r2, #8
   15e90:	b292      	uxth	r2, r2
   15e92:	b2d2      	uxtb	r2, r2
   15e94:	701a      	strb	r2, [r3, #0]
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   15e96:	9b05      	ldr	r3, [sp, #20]
   15e98:	681b      	ldr	r3, [r3, #0]
   15e9a:	2210      	movs	r2, #16
   15e9c:	4619      	mov	r1, r3
   15e9e:	9808      	ldr	r0, [sp, #32]
   15ea0:	f7f6 f95e 	bl	c160 <memcpy>
            p += ATT_128_UUID_LEN;
   15ea4:	9b08      	ldr	r3, [sp, #32]
   15ea6:	3310      	adds	r3, #16
   15ea8:	9308      	str	r3, [sp, #32]
          }
          break;
   15eaa:	e048      	b.n	15f3e <attsProcFindInfoReq+0x1a6>
        }
        /* else 16 bit UUID */
        else
        {
          /* check if result fits */
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   15eac:	9b08      	ldr	r3, [sp, #32]
   15eae:	1d1a      	adds	r2, r3, #4
              (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   15eb0:	9b03      	ldr	r3, [sp, #12]
   15eb2:	8b5b      	ldrh	r3, [r3, #26]
   15eb4:	3308      	adds	r3, #8
   15eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
   15eb8:	440b      	add	r3, r1
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   15eba:	429a      	cmp	r2, r3
   15ebc:	d841      	bhi.n	15f42 <attsProcFindInfoReq+0x1aa>
          {
            /* copy result */
            UINT16_TO_BSTREAM(p, handle);
   15ebe:	9b08      	ldr	r3, [sp, #32]
   15ec0:	1c5a      	adds	r2, r3, #1
   15ec2:	9208      	str	r2, [sp, #32]
   15ec4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   15ec8:	b2d2      	uxtb	r2, r2
   15eca:	701a      	strb	r2, [r3, #0]
   15ecc:	9b08      	ldr	r3, [sp, #32]
   15ece:	1c5a      	adds	r2, r3, #1
   15ed0:	9208      	str	r2, [sp, #32]
   15ed2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   15ed6:	0a12      	lsrs	r2, r2, #8
   15ed8:	b292      	uxth	r2, r2
   15eda:	b2d2      	uxtb	r2, r2
   15edc:	701a      	strb	r2, [r3, #0]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[0]);
   15ede:	9b08      	ldr	r3, [sp, #32]
   15ee0:	1c5a      	adds	r2, r3, #1
   15ee2:	9208      	str	r2, [sp, #32]
   15ee4:	9a05      	ldr	r2, [sp, #20]
   15ee6:	6812      	ldr	r2, [r2, #0]
   15ee8:	7812      	ldrb	r2, [r2, #0]
   15eea:	701a      	strb	r2, [r3, #0]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   15eec:	9b08      	ldr	r3, [sp, #32]
   15eee:	1c5a      	adds	r2, r3, #1
   15ef0:	9208      	str	r2, [sp, #32]
   15ef2:	9a05      	ldr	r2, [sp, #20]
   15ef4:	6812      	ldr	r2, [r2, #0]
   15ef6:	3201      	adds	r2, #1
   15ef8:	7812      	ldrb	r2, [r2, #0]
   15efa:	701a      	strb	r2, [r3, #0]
            break;
          }
        }

        /* special case of handle at max range */
        if (handle == ATT_HANDLE_MAX)
   15efc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15f04:	4293      	cmp	r3, r2
   15f06:	d01e      	beq.n	15f46 <attsProcFindInfoReq+0x1ae>
        {
          break;
        }

        /* try next handle */
        if (++handle > endHandle)
   15f08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15f0c:	3301      	adds	r3, #1
   15f0e:	f8ad 301e 	strh.w	r3, [sp, #30]
   15f12:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   15f16:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   15f1a:	429a      	cmp	r2, r3
   15f1c:	d815      	bhi.n	15f4a <attsProcFindInfoReq+0x1b2>
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   15f1e:	aa05      	add	r2, sp, #20
   15f20:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   15f24:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15f28:	4618      	mov	r0, r3
   15f2a:	f7ff fe1d 	bl	15b68 <attsFindInRange>
   15f2e:	4603      	mov	r3, r0
   15f30:	f8ad 301e 	strh.w	r3, [sp, #30]
   15f34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15f38:	2b00      	cmp	r3, #0
   15f3a:	d188      	bne.n	15e4e <attsProcFindInfoReq+0xb6>
   15f3c:	e006      	b.n	15f4c <attsProcFindInfoReq+0x1b4>
          break;
   15f3e:	bf00      	nop
   15f40:	e004      	b.n	15f4c <attsProcFindInfoReq+0x1b4>
            break;
   15f42:	bf00      	nop
   15f44:	e002      	b.n	15f4c <attsProcFindInfoReq+0x1b4>
          break;
   15f46:	bf00      	nop
   15f48:	e000      	b.n	15f4c <attsProcFindInfoReq+0x1b4>
        {
          break;
   15f4a:	bf00      	nop
        }
      }

      /* if no results found set error, free buffer */
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   15f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15f4e:	f103 020a 	add.w	r2, r3, #10
   15f52:	9b08      	ldr	r3, [sp, #32]
   15f54:	429a      	cmp	r2, r3
   15f56:	d109      	bne.n	15f6c <attsProcFindInfoReq+0x1d4>
      {
        WsfMsgFree(pBuf);
   15f58:	9809      	ldr	r0, [sp, #36]	; 0x24
   15f5a:	f002 faa2 	bl	184a2 <WsfMsgFree>
        err = ATT_ERR_NOT_FOUND;
   15f5e:	230a      	movs	r3, #10
   15f60:	f88d 301d 	strb.w	r3, [sp, #29]
   15f64:	e002      	b.n	15f6c <attsProcFindInfoReq+0x1d4>
      }
    }
    else
    {
      /* buffer allocation failed */
      err = ATT_ERR_RESOURCES;
   15f66:	2311      	movs	r3, #17
   15f68:	f88d 301d 	strb.w	r3, [sp, #29]
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   15f6c:	9803      	ldr	r0, [sp, #12]
   15f6e:	f7ff fbc5 	bl	156fc <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   15f72:	f89d 301d 	ldrb.w	r3, [sp, #29]
   15f76:	2b00      	cmp	r3, #0
   15f78:	d10b      	bne.n	15f92 <attsProcFindInfoReq+0x1fa>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   15f7a:	9b03      	ldr	r3, [sp, #12]
   15f7c:	8b19      	ldrh	r1, [r3, #24]
   15f7e:	9b08      	ldr	r3, [sp, #32]
   15f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15f82:	3208      	adds	r2, #8
   15f84:	1a9b      	subs	r3, r3, r2
   15f86:	b29a      	uxth	r2, r3
   15f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15f8a:	2004      	movs	r0, #4
   15f8c:	f005 fc6a 	bl	1b864 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
  }
}
   15f90:	e008      	b.n	15fa4 <attsProcFindInfoReq+0x20c>
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   15f92:	9b03      	ldr	r3, [sp, #12]
   15f94:	8b18      	ldrh	r0, [r3, #24]
   15f96:	f89d 301d 	ldrb.w	r3, [sp, #29]
   15f9a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   15f9e:	2104      	movs	r1, #4
   15fa0:	f7ff fb52 	bl	15648 <attsErrRsp>
}
   15fa4:	bf00      	nop
   15fa6:	b00b      	add	sp, #44	; 0x2c
   15fa8:	f85d fb04 	ldr.w	pc, [sp], #4

00015fac <attsProcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   15fac:	b510      	push	{r4, lr}
   15fae:	b08c      	sub	sp, #48	; 0x30
   15fb0:	9005      	str	r0, [sp, #20]
   15fb2:	460b      	mov	r3, r1
   15fb4:	9203      	str	r2, [sp, #12]
   15fb6:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle;
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   15fba:	2300      	movs	r3, #0
   15fbc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

  /* parse handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   15fc0:	9b03      	ldr	r3, [sp, #12]
   15fc2:	3309      	adds	r3, #9
   15fc4:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   15fc6:	9b03      	ldr	r3, [sp, #12]
   15fc8:	781b      	ldrb	r3, [r3, #0]
   15fca:	b29a      	uxth	r2, r3
   15fcc:	9b03      	ldr	r3, [sp, #12]
   15fce:	3301      	adds	r3, #1
   15fd0:	781b      	ldrb	r3, [r3, #0]
   15fd2:	b29b      	uxth	r3, r3
   15fd4:	021b      	lsls	r3, r3, #8
   15fd6:	b29b      	uxth	r3, r3
   15fd8:	4413      	add	r3, r2
   15fda:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   15fde:	9b03      	ldr	r3, [sp, #12]
   15fe0:	3302      	adds	r3, #2
   15fe2:	9303      	str	r3, [sp, #12]

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   15fe4:	aa06      	add	r2, sp, #24
   15fe6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   15fea:	4611      	mov	r1, r2
   15fec:	4618      	mov	r0, r3
   15fee:	f7ff fd8d 	bl	15b0c <attsFindByHandle>
   15ff2:	900a      	str	r0, [sp, #40]	; 0x28
   15ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15ff6:	2b00      	cmp	r3, #0
   15ff8:	d074      	beq.n	160e4 <attsProcReadReq+0x138>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   15ffa:	9b05      	ldr	r3, [sp, #20]
   15ffc:	7f18      	ldrb	r0, [r3, #28]
   15ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16000:	7bdb      	ldrb	r3, [r3, #15]
   16002:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16006:	2101      	movs	r1, #1
   16008:	f7ff fdf0 	bl	15bec <attsPermissions>
   1600c:	4603      	mov	r3, r0
   1600e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   16012:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   16016:	2b00      	cmp	r3, #0
   16018:	d167      	bne.n	160ea <attsProcReadReq+0x13e>
                               handle, pAttr->permissions)) == ATT_SUCCESS)
    {
      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1601a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1601c:	7b9b      	ldrb	r3, [r3, #14]
   1601e:	f003 0304 	and.w	r3, r3, #4
   16022:	2b00      	cmp	r3, #0
   16024:	d012      	beq.n	1604c <attsProcReadReq+0xa0>
          (pGroup->readCback != NULL))
   16026:	9b06      	ldr	r3, [sp, #24]
   16028:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1602a:	2b00      	cmp	r3, #0
   1602c:	d00e      	beq.n	1604c <attsProcReadReq+0xa0>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_REQ, 0, pAttr);
   1602e:	9b06      	ldr	r3, [sp, #24]
   16030:	689c      	ldr	r4, [r3, #8]
   16032:	9b05      	ldr	r3, [sp, #20]
   16034:	7f18      	ldrb	r0, [r3, #28]
   16036:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1603a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1603c:	9300      	str	r3, [sp, #0]
   1603e:	2300      	movs	r3, #0
   16040:	220a      	movs	r2, #10
   16042:	47a0      	blx	r4
   16044:	4603      	mov	r3, r0
   16046:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1604a:	e016      	b.n	1607a <attsProcReadReq+0xce>
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1604c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1604e:	7b9b      	ldrb	r3, [r3, #14]
   16050:	f003 0320 	and.w	r3, r3, #32
   16054:	2b00      	cmp	r3, #0
   16056:	d010      	beq.n	1607a <attsProcReadReq+0xce>
   16058:	4b2c      	ldr	r3, [pc, #176]	; (1610c <attsProcReadReq+0x160>)
   1605a:	695b      	ldr	r3, [r3, #20]
   1605c:	2b00      	cmp	r3, #0
   1605e:	d00c      	beq.n	1607a <attsProcReadReq+0xce>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   16060:	4b2a      	ldr	r3, [pc, #168]	; (1610c <attsProcReadReq+0x160>)
   16062:	695c      	ldr	r4, [r3, #20]
   16064:	9b05      	ldr	r3, [sp, #20]
   16066:	7f18      	ldrb	r0, [r3, #28]
   16068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1606a:	685b      	ldr	r3, [r3, #4]
   1606c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16070:	2105      	movs	r1, #5
   16072:	47a0      	blx	r4
   16074:	4603      	mov	r3, r0
   16076:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      }

      if (err == ATT_SUCCESS)
   1607a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1607e:	2b00      	cmp	r3, #0
   16080:	d133      	bne.n	160ea <attsProcReadReq+0x13e>
      {
        /* determine length of data to read */
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
                   *pAttr->pLen : (pCcb->mtu - ATT_READ_RSP_LEN);
   16082:	9b05      	ldr	r3, [sp, #20]
   16084:	8b5b      	ldrh	r3, [r3, #26]
   16086:	3b01      	subs	r3, #1
   16088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1608a:	6892      	ldr	r2, [r2, #8]
   1608c:	8812      	ldrh	r2, [r2, #0]
   1608e:	4293      	cmp	r3, r2
   16090:	bfa8      	it	ge
   16092:	4613      	movge	r3, r2
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   16094:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

        /* Allocate response buffer */
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_RSP_LEN + readLen)) != NULL)
   16098:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1609c:	3309      	adds	r3, #9
   1609e:	b29b      	uxth	r3, r3
   160a0:	4618      	mov	r0, r3
   160a2:	f001 fc73 	bl	1798c <attMsgAlloc>
   160a6:	9008      	str	r0, [sp, #32]
   160a8:	9b08      	ldr	r3, [sp, #32]
   160aa:	2b00      	cmp	r3, #0
   160ac:	d01d      	beq.n	160ea <attsProcReadReq+0x13e>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   160ae:	9b08      	ldr	r3, [sp, #32]
   160b0:	3308      	adds	r3, #8
   160b2:	9307      	str	r3, [sp, #28]
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_RSP);
   160b4:	9b07      	ldr	r3, [sp, #28]
   160b6:	1c5a      	adds	r2, r3, #1
   160b8:	9207      	str	r2, [sp, #28]
   160ba:	220b      	movs	r2, #11
   160bc:	701a      	strb	r2, [r3, #0]
          memcpy(p, pAttr->pValue, readLen);
   160be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160c0:	685b      	ldr	r3, [r3, #4]
   160c2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   160c6:	4619      	mov	r1, r3
   160c8:	9807      	ldr	r0, [sp, #28]
   160ca:	f7f6 f849 	bl	c160 <memcpy>

          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   160ce:	9b05      	ldr	r3, [sp, #20]
   160d0:	8b19      	ldrh	r1, [r3, #24]
   160d2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   160d6:	3301      	adds	r3, #1
   160d8:	b29a      	uxth	r2, r3
   160da:	9b08      	ldr	r3, [sp, #32]
   160dc:	2004      	movs	r0, #4
   160de:	f005 fbc1 	bl	1b864 <L2cDataReq>
   160e2:	e002      	b.n	160ea <attsProcReadReq+0x13e>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   160e4:	2301      	movs	r3, #1
   160e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  }

  if (err)
   160ea:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   160ee:	2b00      	cmp	r3, #0
   160f0:	d008      	beq.n	16104 <attsProcReadReq+0x158>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   160f2:	9b05      	ldr	r3, [sp, #20]
   160f4:	8b18      	ldrh	r0, [r3, #24]
   160f6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   160fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   160fe:	210a      	movs	r1, #10
   16100:	f7ff faa2 	bl	15648 <attsErrRsp>
  }
}
   16104:	bf00      	nop
   16106:	b00c      	add	sp, #48	; 0x30
   16108:	bd10      	pop	{r4, pc}
   1610a:	bf00      	nop
   1610c:	10008bf0 	.word	0x10008bf0

00016110 <attsFindUuidInRange>:
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindUuidInRange(uint16_t startHandle, uint16_t endHandle, uint8_t uuidLen,
                             uint8_t *pUuid, attsAttr_t **pAttr, attsGroup_t **pAttrGroup)
{
   16110:	b500      	push	{lr}
   16112:	b087      	sub	sp, #28
   16114:	9301      	str	r3, [sp, #4]
   16116:	4603      	mov	r3, r0
   16118:	f8ad 300e 	strh.w	r3, [sp, #14]
   1611c:	460b      	mov	r3, r1
   1611e:	f8ad 300c 	strh.w	r3, [sp, #12]
   16122:	4613      	mov	r3, r2
   16124:	f88d 300b 	strb.w	r3, [sp, #11]
  attsGroup_t *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16128:	4b33      	ldr	r3, [pc, #204]	; (161f8 <attsFindUuidInRange+0xe8>)
   1612a:	681b      	ldr	r3, [r3, #0]
   1612c:	9305      	str	r3, [sp, #20]
   1612e:	e05a      	b.n	161e6 <attsFindUuidInRange+0xd6>
  {
    /* if start handle is less than group start handle but handle range is within group */
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   16130:	9b05      	ldr	r3, [sp, #20]
   16132:	8a1b      	ldrh	r3, [r3, #16]
   16134:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16138:	429a      	cmp	r2, r3
   1613a:	d209      	bcs.n	16150 <attsFindUuidInRange+0x40>
   1613c:	9b05      	ldr	r3, [sp, #20]
   1613e:	8a1b      	ldrh	r3, [r3, #16]
   16140:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   16144:	429a      	cmp	r2, r3
   16146:	d303      	bcc.n	16150 <attsFindUuidInRange+0x40>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   16148:	9b05      	ldr	r3, [sp, #20]
   1614a:	8a1b      	ldrh	r3, [r3, #16]
   1614c:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    /*  if start handle within handle range of group */
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16150:	9b05      	ldr	r3, [sp, #20]
   16152:	8a1b      	ldrh	r3, [r3, #16]
   16154:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16158:	429a      	cmp	r2, r3
   1615a:	d341      	bcc.n	161e0 <attsFindUuidInRange+0xd0>
   1615c:	9b05      	ldr	r3, [sp, #20]
   1615e:	8a5b      	ldrh	r3, [r3, #18]
   16160:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16164:	429a      	cmp	r2, r3
   16166:	d83b      	bhi.n	161e0 <attsFindUuidInRange+0xd0>
    {
      /* compare uuid with each attribute in group */
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16168:	9b05      	ldr	r3, [sp, #20]
   1616a:	685a      	ldr	r2, [r3, #4]
   1616c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16170:	9905      	ldr	r1, [sp, #20]
   16172:	8a09      	ldrh	r1, [r1, #16]
   16174:	1a5b      	subs	r3, r3, r1
   16176:	011b      	lsls	r3, r3, #4
   16178:	441a      	add	r2, r3
   1617a:	9b08      	ldr	r3, [sp, #32]
   1617c:	601a      	str	r2, [r3, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   1617e:	e021      	b.n	161c4 <attsFindUuidInRange+0xb4>
      {
        /* compare uuid in attribute */
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   16180:	9b08      	ldr	r3, [sp, #32]
   16182:	681b      	ldr	r3, [r3, #0]
   16184:	f89d 100b 	ldrb.w	r1, [sp, #11]
   16188:	9a01      	ldr	r2, [sp, #4]
   1618a:	4618      	mov	r0, r3
   1618c:	f7ff fc50 	bl	15a30 <attsUuidCmp>
   16190:	4603      	mov	r3, r0
   16192:	2b00      	cmp	r3, #0
   16194:	d005      	beq.n	161a2 <attsFindUuidInRange+0x92>
        {
          *pAttrGroup = pGroup;
   16196:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16198:	9a05      	ldr	r2, [sp, #20]
   1619a:	601a      	str	r2, [r3, #0]
          return startHandle;
   1619c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   161a0:	e025      	b.n	161ee <attsFindUuidInRange+0xde>
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   161a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   161a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   161aa:	4293      	cmp	r3, r2
   161ac:	d017      	beq.n	161de <attsFindUuidInRange+0xce>
        {
          break;
        }

        startHandle++;
   161ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   161b2:	3301      	adds	r3, #1
   161b4:	f8ad 300e 	strh.w	r3, [sp, #14]
        (*pAttr)++;
   161b8:	9b08      	ldr	r3, [sp, #32]
   161ba:	681b      	ldr	r3, [r3, #0]
   161bc:	f103 0210 	add.w	r2, r3, #16
   161c0:	9b08      	ldr	r3, [sp, #32]
   161c2:	601a      	str	r2, [r3, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   161c4:	9b05      	ldr	r3, [sp, #20]
   161c6:	8a5b      	ldrh	r3, [r3, #18]
   161c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   161cc:	429a      	cmp	r2, r3
   161ce:	d807      	bhi.n	161e0 <attsFindUuidInRange+0xd0>
   161d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   161d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   161d8:	429a      	cmp	r2, r3
   161da:	d9d1      	bls.n	16180 <attsFindUuidInRange+0x70>
   161dc:	e000      	b.n	161e0 <attsFindUuidInRange+0xd0>
          break;
   161de:	bf00      	nop
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   161e0:	9b05      	ldr	r3, [sp, #20]
   161e2:	681b      	ldr	r3, [r3, #0]
   161e4:	9305      	str	r3, [sp, #20]
   161e6:	9b05      	ldr	r3, [sp, #20]
   161e8:	2b00      	cmp	r3, #0
   161ea:	d1a1      	bne.n	16130 <attsFindUuidInRange+0x20>
      }
    }
  }

  /* no match found */
  return ATT_HANDLE_NONE;
   161ec:	2300      	movs	r3, #0
}
   161ee:	4618      	mov	r0, r3
   161f0:	b007      	add	sp, #28
   161f2:	f85d fb04 	ldr.w	pc, [sp], #4
   161f6:	bf00      	nop
   161f8:	10008bf0 	.word	0x10008bf0

000161fc <attsFindServiceGroupEnd>:
 *
 *  \return Service group end handle.
 */
/*************************************************************************************************/
uint16_t attsFindServiceGroupEnd(uint16_t startHandle)
{
   161fc:	b500      	push	{lr}
   161fe:	b087      	sub	sp, #28
   16200:	4603      	mov	r3, r0
   16202:	f8ad 3006 	strh.w	r3, [sp, #6]
  attsGroup_t   *pGroup;
  attsAttr_t    *pAttr;
  uint16_t      prevHandle;
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   16206:	2300      	movs	r3, #0
   16208:	f88d 300c 	strb.w	r3, [sp, #12]
   1620c:	2328      	movs	r3, #40	; 0x28
   1620e:	f88d 300d 	strb.w	r3, [sp, #13]
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   16212:	4b38      	ldr	r3, [pc, #224]	; (162f4 <attsFindServiceGroupEnd+0xf8>)
   16214:	881b      	ldrh	r3, [r3, #0]
   16216:	f8ad 3008 	strh.w	r3, [sp, #8]

  /* special case for max handle */
  if (startHandle == ATT_HANDLE_MAX)
   1621a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1621e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16222:	4293      	cmp	r3, r2
   16224:	d102      	bne.n	1622c <attsFindServiceGroupEnd+0x30>
  {
    return ATT_HANDLE_MAX;
   16226:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1622a:	e05f      	b.n	162ec <attsFindServiceGroupEnd+0xf0>
  }

  prevHandle = startHandle;
   1622c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16230:	f8ad 300e 	strh.w	r3, [sp, #14]
  startHandle++;
   16234:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16238:	3301      	adds	r3, #1
   1623a:	f8ad 3006 	strh.w	r3, [sp, #6]

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1623e:	4b2e      	ldr	r3, [pc, #184]	; (162f8 <attsFindServiceGroupEnd+0xfc>)
   16240:	681b      	ldr	r3, [r3, #0]
   16242:	9305      	str	r3, [sp, #20]
   16244:	e04d      	b.n	162e2 <attsFindServiceGroupEnd+0xe6>
  {
    /* if start handle is less than group start handle */
    if (startHandle < pGroup->startHandle)
   16246:	9b05      	ldr	r3, [sp, #20]
   16248:	8a1b      	ldrh	r3, [r3, #16]
   1624a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1624e:	429a      	cmp	r2, r3
   16250:	d203      	bcs.n	1625a <attsFindServiceGroupEnd+0x5e>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   16252:	9b05      	ldr	r3, [sp, #20]
   16254:	8a1b      	ldrh	r3, [r3, #16]
   16256:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    /*  if start handle within handle range of group */
    if (startHandle <= pGroup->endHandle)
   1625a:	9b05      	ldr	r3, [sp, #20]
   1625c:	8a5b      	ldrh	r3, [r3, #18]
   1625e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16262:	429a      	cmp	r2, r3
   16264:	d83a      	bhi.n	162dc <attsFindServiceGroupEnd+0xe0>
    {
      /* compare uuid with each attribute in group */
      pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16266:	9b05      	ldr	r3, [sp, #20]
   16268:	685a      	ldr	r2, [r3, #4]
   1626a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1626e:	9905      	ldr	r1, [sp, #20]
   16270:	8a09      	ldrh	r1, [r1, #16]
   16272:	1a5b      	subs	r3, r3, r1
   16274:	011b      	lsls	r3, r3, #4
   16276:	4413      	add	r3, r2
   16278:	9304      	str	r3, [sp, #16]
      while (startHandle <= pGroup->endHandle)
   1627a:	e029      	b.n	162d0 <attsFindServiceGroupEnd+0xd4>
      {
        /* compare uuid in attribute to service uuids */
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   1627c:	ab03      	add	r3, sp, #12
   1627e:	461a      	mov	r2, r3
   16280:	2102      	movs	r1, #2
   16282:	9804      	ldr	r0, [sp, #16]
   16284:	f7ff fbd4 	bl	15a30 <attsUuidCmp>
   16288:	4603      	mov	r3, r0
   1628a:	2b00      	cmp	r3, #0
   1628c:	d108      	bne.n	162a0 <attsFindServiceGroupEnd+0xa4>
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   1628e:	ab02      	add	r3, sp, #8
   16290:	461a      	mov	r2, r3
   16292:	2102      	movs	r1, #2
   16294:	9804      	ldr	r0, [sp, #16]
   16296:	f7ff fbcb 	bl	15a30 <attsUuidCmp>
   1629a:	4603      	mov	r3, r0
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   1629c:	2b00      	cmp	r3, #0
   1629e:	d002      	beq.n	162a6 <attsFindServiceGroupEnd+0xaa>
        {
          /* found next service; return handle of previous attribute */
          return prevHandle;
   162a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   162a4:	e022      	b.n	162ec <attsFindServiceGroupEnd+0xf0>
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   162a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   162aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   162ae:	4293      	cmp	r3, r2
   162b0:	d102      	bne.n	162b8 <attsFindServiceGroupEnd+0xbc>
        {
          return ATT_HANDLE_MAX;
   162b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   162b6:	e019      	b.n	162ec <attsFindServiceGroupEnd+0xf0>
        }

        prevHandle = startHandle;
   162b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   162bc:	f8ad 300e 	strh.w	r3, [sp, #14]
        startHandle++;
   162c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   162c4:	3301      	adds	r3, #1
   162c6:	f8ad 3006 	strh.w	r3, [sp, #6]
        pAttr++;
   162ca:	9b04      	ldr	r3, [sp, #16]
   162cc:	3310      	adds	r3, #16
   162ce:	9304      	str	r3, [sp, #16]
      while (startHandle <= pGroup->endHandle)
   162d0:	9b05      	ldr	r3, [sp, #20]
   162d2:	8a5b      	ldrh	r3, [r3, #18]
   162d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   162d8:	429a      	cmp	r2, r3
   162da:	d9cf      	bls.n	1627c <attsFindServiceGroupEnd+0x80>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   162dc:	9b05      	ldr	r3, [sp, #20]
   162de:	681b      	ldr	r3, [r3, #0]
   162e0:	9305      	str	r3, [sp, #20]
   162e2:	9b05      	ldr	r3, [sp, #20]
   162e4:	2b00      	cmp	r3, #0
   162e6:	d1ae      	bne.n	16246 <attsFindServiceGroupEnd+0x4a>
      }
    }
  }

  /* next service not found; return 0xFFFF as the last handle in the database */
  return ATT_HANDLE_MAX;
   162e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   162ec:	4618      	mov	r0, r3
   162ee:	b007      	add	sp, #28
   162f0:	f85d fb04 	ldr.w	pc, [sp], #4
   162f4:	00028954 	.word	0x00028954
   162f8:	10008bf0 	.word	0x10008bf0

000162fc <attsProcReadBlobReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadBlobReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   162fc:	b510      	push	{r4, lr}
   162fe:	b08e      	sub	sp, #56	; 0x38
   16300:	9005      	str	r0, [sp, #20]
   16302:	460b      	mov	r3, r1
   16304:	9203      	str	r2, [sp, #12]
   16306:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle;
  uint16_t    offset;
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   1630a:	2300      	movs	r3, #0
   1630c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

  /* parse handle and offset */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   16310:	9b03      	ldr	r3, [sp, #12]
   16312:	3309      	adds	r3, #9
   16314:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   16316:	9b03      	ldr	r3, [sp, #12]
   16318:	781b      	ldrb	r3, [r3, #0]
   1631a:	b29a      	uxth	r2, r3
   1631c:	9b03      	ldr	r3, [sp, #12]
   1631e:	3301      	adds	r3, #1
   16320:	781b      	ldrb	r3, [r3, #0]
   16322:	b29b      	uxth	r3, r3
   16324:	021b      	lsls	r3, r3, #8
   16326:	b29b      	uxth	r3, r3
   16328:	4413      	add	r3, r2
   1632a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   1632e:	9b03      	ldr	r3, [sp, #12]
   16330:	3302      	adds	r3, #2
   16332:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(offset, pPacket);
   16334:	9b03      	ldr	r3, [sp, #12]
   16336:	781b      	ldrb	r3, [r3, #0]
   16338:	b29a      	uxth	r2, r3
   1633a:	9b03      	ldr	r3, [sp, #12]
   1633c:	3301      	adds	r3, #1
   1633e:	781b      	ldrb	r3, [r3, #0]
   16340:	b29b      	uxth	r3, r3
   16342:	021b      	lsls	r3, r3, #8
   16344:	b29b      	uxth	r3, r3
   16346:	4413      	add	r3, r2
   16348:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
   1634c:	9b03      	ldr	r3, [sp, #12]
   1634e:	3302      	adds	r3, #2
   16350:	9303      	str	r3, [sp, #12]

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   16352:	aa07      	add	r2, sp, #28
   16354:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   16358:	4611      	mov	r1, r2
   1635a:	4618      	mov	r0, r3
   1635c:	f7ff fbd6 	bl	15b0c <attsFindByHandle>
   16360:	900b      	str	r0, [sp, #44]	; 0x2c
   16362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16364:	2b00      	cmp	r3, #0
   16366:	f000 8089 	beq.w	1647c <attsProcReadBlobReq+0x180>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1636a:	9b05      	ldr	r3, [sp, #20]
   1636c:	7f18      	ldrb	r0, [r3, #28]
   1636e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16370:	7bdb      	ldrb	r3, [r3, #15]
   16372:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   16376:	2101      	movs	r1, #1
   16378:	f7ff fc38 	bl	15bec <attsPermissions>
   1637c:	4603      	mov	r3, r0
   1637e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   16382:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16386:	2b00      	cmp	r3, #0
   16388:	d17b      	bne.n	16482 <attsProcReadBlobReq+0x186>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
    {
      /* err has been set; fail */
    }
    /* verify offset */
    else if (offset > *pAttr->pLen)
   1638a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1638c:	689b      	ldr	r3, [r3, #8]
   1638e:	881b      	ldrh	r3, [r3, #0]
   16390:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   16394:	429a      	cmp	r2, r3
   16396:	d903      	bls.n	163a0 <attsProcReadBlobReq+0xa4>
    {
      err = ATT_ERR_OFFSET;
   16398:	2307      	movs	r3, #7
   1639a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1639e:	e070      	b.n	16482 <attsProcReadBlobReq+0x186>
    }
    else
    {
      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   163a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   163a2:	7b9b      	ldrb	r3, [r3, #14]
   163a4:	f003 0304 	and.w	r3, r3, #4
   163a8:	2b00      	cmp	r3, #0
   163aa:	d014      	beq.n	163d6 <attsProcReadBlobReq+0xda>
          (pGroup->readCback != NULL))
   163ac:	9b07      	ldr	r3, [sp, #28]
   163ae:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   163b0:	2b00      	cmp	r3, #0
   163b2:	d010      	beq.n	163d6 <attsProcReadBlobReq+0xda>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_BLOB_REQ, offset, pAttr);
   163b4:	9b07      	ldr	r3, [sp, #28]
   163b6:	689c      	ldr	r4, [r3, #8]
   163b8:	9b05      	ldr	r3, [sp, #20]
   163ba:	7f18      	ldrb	r0, [r3, #28]
   163bc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   163c0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   163c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   163c6:	9300      	str	r3, [sp, #0]
   163c8:	4613      	mov	r3, r2
   163ca:	220c      	movs	r2, #12
   163cc:	47a0      	blx	r4
   163ce:	4603      	mov	r3, r0
   163d0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   163d4:	e016      	b.n	16404 <attsProcReadBlobReq+0x108>
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   163d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   163d8:	7b9b      	ldrb	r3, [r3, #14]
   163da:	f003 0320 	and.w	r3, r3, #32
   163de:	2b00      	cmp	r3, #0
   163e0:	d010      	beq.n	16404 <attsProcReadBlobReq+0x108>
   163e2:	4b30      	ldr	r3, [pc, #192]	; (164a4 <attsProcReadBlobReq+0x1a8>)
   163e4:	695b      	ldr	r3, [r3, #20]
   163e6:	2b00      	cmp	r3, #0
   163e8:	d00c      	beq.n	16404 <attsProcReadBlobReq+0x108>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   163ea:	4b2e      	ldr	r3, [pc, #184]	; (164a4 <attsProcReadBlobReq+0x1a8>)
   163ec:	695c      	ldr	r4, [r3, #20]
   163ee:	9b05      	ldr	r3, [sp, #20]
   163f0:	7f18      	ldrb	r0, [r3, #28]
   163f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   163f4:	685b      	ldr	r3, [r3, #4]
   163f6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   163fa:	2105      	movs	r1, #5
   163fc:	47a0      	blx	r4
   163fe:	4603      	mov	r3, r0
   16400:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      }

      if (err == ATT_SUCCESS)
   16404:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16408:	2b00      	cmp	r3, #0
   1640a:	d13a      	bne.n	16482 <attsProcReadBlobReq+0x186>
      {
        /* determine length of data to read */
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
                   (*pAttr->pLen - offset) : (pCcb->mtu - ATT_READ_BLOB_RSP_LEN);
   1640c:	9b05      	ldr	r3, [sp, #20]
   1640e:	8b5b      	ldrh	r3, [r3, #26]
   16410:	1e5a      	subs	r2, r3, #1
   16412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16414:	689b      	ldr	r3, [r3, #8]
   16416:	881b      	ldrh	r3, [r3, #0]
   16418:	4619      	mov	r1, r3
   1641a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1641e:	1acb      	subs	r3, r1, r3
   16420:	4293      	cmp	r3, r2
   16422:	bfa8      	it	ge
   16424:	4613      	movge	r3, r2
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   16426:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a

        /* Allocate response buffer */
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_BLOB_RSP_LEN + readLen)) != NULL)
   1642a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1642e:	3309      	adds	r3, #9
   16430:	b29b      	uxth	r3, r3
   16432:	4618      	mov	r0, r3
   16434:	f001 faaa 	bl	1798c <attMsgAlloc>
   16438:	9009      	str	r0, [sp, #36]	; 0x24
   1643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1643c:	2b00      	cmp	r3, #0
   1643e:	d020      	beq.n	16482 <attsProcReadBlobReq+0x186>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   16440:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16442:	3308      	adds	r3, #8
   16444:	9308      	str	r3, [sp, #32]
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_BLOB_RSP);
   16446:	9b08      	ldr	r3, [sp, #32]
   16448:	1c5a      	adds	r2, r3, #1
   1644a:	9208      	str	r2, [sp, #32]
   1644c:	220d      	movs	r2, #13
   1644e:	701a      	strb	r2, [r3, #0]
          memcpy(p, (pAttr->pValue + offset), readLen);
   16450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16452:	685a      	ldr	r2, [r3, #4]
   16454:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   16458:	4413      	add	r3, r2
   1645a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   1645e:	4619      	mov	r1, r3
   16460:	9808      	ldr	r0, [sp, #32]
   16462:	f7f5 fe7d 	bl	c160 <memcpy>

          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_BLOB_RSP_LEN + readLen), pBuf);
   16466:	9b05      	ldr	r3, [sp, #20]
   16468:	8b19      	ldrh	r1, [r3, #24]
   1646a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1646e:	3301      	adds	r3, #1
   16470:	b29a      	uxth	r2, r3
   16472:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16474:	2004      	movs	r0, #4
   16476:	f005 f9f5 	bl	1b864 <L2cDataReq>
   1647a:	e002      	b.n	16482 <attsProcReadBlobReq+0x186>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   1647c:	2301      	movs	r3, #1
   1647e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  }

  if (err)
   16482:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16486:	2b00      	cmp	r3, #0
   16488:	d008      	beq.n	1649c <attsProcReadBlobReq+0x1a0>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_BLOB_REQ, handle, err);
   1648a:	9b05      	ldr	r3, [sp, #20]
   1648c:	8b18      	ldrh	r0, [r3, #24]
   1648e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16492:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   16496:	210c      	movs	r1, #12
   16498:	f7ff f8d6 	bl	15648 <attsErrRsp>
  }
}
   1649c:	bf00      	nop
   1649e:	b00e      	add	sp, #56	; 0x38
   164a0:	bd10      	pop	{r4, pc}
   164a2:	bf00      	nop
   164a4:	10008bf0 	.word	0x10008bf0

000164a8 <attsProcFindTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   164a8:	b500      	push	{lr}
   164aa:	b08f      	sub	sp, #60	; 0x3c
   164ac:	9005      	str	r0, [sp, #20]
   164ae:	460b      	mov	r3, r1
   164b0:	9203      	str	r2, [sp, #12]
   164b2:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsGroup_t *pGroup;
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint16_t    nextHandle;
  uint8_t     err = ATT_SUCCESS;
   164b6:	2300      	movs	r3, #0
   164b8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

  /* parse handles and uuid; pPacket then points to the value in the request */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   164bc:	9b03      	ldr	r3, [sp, #12]
   164be:	3309      	adds	r3, #9
   164c0:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   164c2:	9b03      	ldr	r3, [sp, #12]
   164c4:	781b      	ldrb	r3, [r3, #0]
   164c6:	b29a      	uxth	r2, r3
   164c8:	9b03      	ldr	r3, [sp, #12]
   164ca:	3301      	adds	r3, #1
   164cc:	781b      	ldrb	r3, [r3, #0]
   164ce:	b29b      	uxth	r3, r3
   164d0:	021b      	lsls	r3, r3, #8
   164d2:	b29b      	uxth	r3, r3
   164d4:	4413      	add	r3, r2
   164d6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   164da:	9b03      	ldr	r3, [sp, #12]
   164dc:	3302      	adds	r3, #2
   164de:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   164e0:	9b03      	ldr	r3, [sp, #12]
   164e2:	781b      	ldrb	r3, [r3, #0]
   164e4:	b29a      	uxth	r2, r3
   164e6:	9b03      	ldr	r3, [sp, #12]
   164e8:	3301      	adds	r3, #1
   164ea:	781b      	ldrb	r3, [r3, #0]
   164ec:	b29b      	uxth	r3, r3
   164ee:	021b      	lsls	r3, r3, #8
   164f0:	b29b      	uxth	r3, r3
   164f2:	4413      	add	r3, r2
   164f4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   164f8:	9b03      	ldr	r3, [sp, #12]
   164fa:	3302      	adds	r3, #2
   164fc:	9303      	str	r3, [sp, #12]
  pUuid = pPacket;
   164fe:	9b03      	ldr	r3, [sp, #12]
   16500:	9308      	str	r3, [sp, #32]
  pPacket += ATT_16_UUID_LEN;
   16502:	9b03      	ldr	r3, [sp, #12]
   16504:	3302      	adds	r3, #2
   16506:	9303      	str	r3, [sp, #12]

  /* set len to the value length */
  len -= ATT_FIND_TYPE_REQ_LEN;
   16508:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1650c:	3b07      	subs	r3, #7
   1650e:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   16512:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16516:	2b00      	cmp	r3, #0
   16518:	d005      	beq.n	16526 <attsProcFindTypeReq+0x7e>
   1651a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1651e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   16522:	429a      	cmp	r2, r3
   16524:	d902      	bls.n	1652c <attsProcFindTypeReq+0x84>
  {
    err = ATT_ERR_HANDLE;
   16526:	2301      	movs	r3, #1
   16528:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  }

  if (!err)
   1652c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   16530:	2b00      	cmp	r3, #0
   16532:	f040 80b0 	bne.w	16696 <attsProcFindTypeReq+0x1ee>
  {
    /* allocate max size buffer for response */
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   16536:	9b05      	ldr	r3, [sp, #20]
   16538:	8b5b      	ldrh	r3, [r3, #26]
   1653a:	3308      	adds	r3, #8
   1653c:	b29b      	uxth	r3, r3
   1653e:	4618      	mov	r0, r3
   16540:	f001 fa24 	bl	1798c <attMsgAlloc>
   16544:	900d      	str	r0, [sp, #52]	; 0x34
   16546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16548:	2b00      	cmp	r3, #0
   1654a:	f000 80a1 	beq.w	16690 <attsProcFindTypeReq+0x1e8>
    {
      p = pBuf + L2C_PAYLOAD_START;
   1654e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16550:	3308      	adds	r3, #8
   16552:	930c      	str	r3, [sp, #48]	; 0x30
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   16554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16556:	1c5a      	adds	r2, r3, #1
   16558:	920c      	str	r2, [sp, #48]	; 0x30
   1655a:	2207      	movs	r2, #7
   1655c:	701a      	strb	r2, [r3, #0]

      /* find attributes with matching uuid within handle range */
      handle = startHandle;
   1655e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16562:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   16566:	e070      	b.n	1664a <attsProcFindTypeReq+0x1a2>
                                           pUuid, &pAttr, &pGroup)) != ATT_HANDLE_NONE)
      {
        /* if value and length matches */
        if ((pAttr->permissions & ATTS_PERMIT_READ) &&
   16568:	9b07      	ldr	r3, [sp, #28]
   1656a:	7bdb      	ldrb	r3, [r3, #15]
   1656c:	f003 0301 	and.w	r3, r3, #1
   16570:	2b00      	cmp	r3, #0
   16572:	d055      	beq.n	16620 <attsProcFindTypeReq+0x178>
   16574:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   16578:	2b00      	cmp	r3, #0
   1657a:	d011      	beq.n	165a0 <attsProcFindTypeReq+0xf8>
            ((len == 0) ||
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   1657c:	9b07      	ldr	r3, [sp, #28]
   1657e:	689b      	ldr	r3, [r3, #8]
   16580:	881b      	ldrh	r3, [r3, #0]
            ((len == 0) ||
   16582:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   16586:	429a      	cmp	r2, r3
   16588:	d14a      	bne.n	16620 <attsProcFindTypeReq+0x178>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   1658a:	9b07      	ldr	r3, [sp, #28]
   1658c:	685b      	ldr	r3, [r3, #4]
   1658e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   16592:	4619      	mov	r1, r3
   16594:	9803      	ldr	r0, [sp, #12]
   16596:	f7f5 fdb3 	bl	c100 <memcmp>
   1659a:	4603      	mov	r3, r0
   1659c:	2b00      	cmp	r3, #0
   1659e:	d13f      	bne.n	16620 <attsProcFindTypeReq+0x178>
        {
          /* if uuid in request is for primary service */
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   165a0:	9b08      	ldr	r3, [sp, #32]
   165a2:	781b      	ldrb	r3, [r3, #0]
   165a4:	2b00      	cmp	r3, #0
   165a6:	d10d      	bne.n	165c4 <attsProcFindTypeReq+0x11c>
              pUuid[1] == UINT16_TO_BYTE1(ATT_UUID_PRIMARY_SERVICE))
   165a8:	9b08      	ldr	r3, [sp, #32]
   165aa:	3301      	adds	r3, #1
   165ac:	781b      	ldrb	r3, [r3, #0]
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   165ae:	2b28      	cmp	r3, #40	; 0x28
   165b0:	d108      	bne.n	165c4 <attsProcFindTypeReq+0x11c>
          {
            /* next handle is service group end handle */
            nextHandle = attsFindServiceGroupEnd(handle);
   165b2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   165b6:	4618      	mov	r0, r3
   165b8:	f7ff fe20 	bl	161fc <attsFindServiceGroupEnd>
   165bc:	4603      	mov	r3, r0
   165be:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   165c2:	e003      	b.n	165cc <attsProcFindTypeReq+0x124>
          }
          else
          {
            /* for any other uuid next handle is same as found handle */
            nextHandle = handle;
   165c4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   165c8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
          }

          /* copy result into response buffer; first check if it fits */
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   165cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   165ce:	1d1a      	adds	r2, r3, #4
   165d0:	9b05      	ldr	r3, [sp, #20]
   165d2:	8b5b      	ldrh	r3, [r3, #26]
   165d4:	3308      	adds	r3, #8
   165d6:	990d      	ldr	r1, [sp, #52]	; 0x34
   165d8:	440b      	add	r3, r1
   165da:	429a      	cmp	r2, r3
   165dc:	d84a      	bhi.n	16674 <attsProcFindTypeReq+0x1cc>
          {
            UINT16_TO_BSTREAM(p, handle);
   165de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   165e0:	1c5a      	adds	r2, r3, #1
   165e2:	920c      	str	r2, [sp, #48]	; 0x30
   165e4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   165e8:	b2d2      	uxtb	r2, r2
   165ea:	701a      	strb	r2, [r3, #0]
   165ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   165ee:	1c5a      	adds	r2, r3, #1
   165f0:	920c      	str	r2, [sp, #48]	; 0x30
   165f2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   165f6:	0a12      	lsrs	r2, r2, #8
   165f8:	b292      	uxth	r2, r2
   165fa:	b2d2      	uxtb	r2, r2
   165fc:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(p, nextHandle);
   165fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16600:	1c5a      	adds	r2, r3, #1
   16602:	920c      	str	r2, [sp, #48]	; 0x30
   16604:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16608:	b2d2      	uxtb	r2, r2
   1660a:	701a      	strb	r2, [r3, #0]
   1660c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1660e:	1c5a      	adds	r2, r3, #1
   16610:	920c      	str	r2, [sp, #48]	; 0x30
   16612:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16616:	0a12      	lsrs	r2, r2, #8
   16618:	b292      	uxth	r2, r2
   1661a:	b2d2      	uxtb	r2, r2
   1661c:	701a      	strb	r2, [r3, #0]
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1661e:	e003      	b.n	16628 <attsProcFindTypeReq+0x180>
          }
        }
        /* value doesn't match; still need to set next handle */
        else
        {
          nextHandle = handle;
   16620:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   16624:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        }

        /* check if handle has reached end */
        if ((nextHandle >= endHandle) || (nextHandle == ATT_HANDLE_MAX))
   16628:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1662c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   16630:	429a      	cmp	r2, r3
   16632:	d220      	bcs.n	16676 <attsProcFindTypeReq+0x1ce>
   16634:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16638:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1663c:	4293      	cmp	r3, r2
   1663e:	d01a      	beq.n	16676 <attsProcFindTypeReq+0x1ce>
        {
          break;
        }

        /* try next handle */
        handle = nextHandle + 1;
   16640:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16644:	3301      	adds	r3, #1
   16646:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   1664a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   1664e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   16652:	ab06      	add	r3, sp, #24
   16654:	9301      	str	r3, [sp, #4]
   16656:	ab07      	add	r3, sp, #28
   16658:	9300      	str	r3, [sp, #0]
   1665a:	9b08      	ldr	r3, [sp, #32]
   1665c:	2202      	movs	r2, #2
   1665e:	f7ff fd57 	bl	16110 <attsFindUuidInRange>
   16662:	4603      	mov	r3, r0
   16664:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   16668:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1666c:	2b00      	cmp	r3, #0
   1666e:	f47f af7b 	bne.w	16568 <attsProcFindTypeReq+0xc0>
   16672:	e000      	b.n	16676 <attsProcFindTypeReq+0x1ce>
            break;
   16674:	bf00      	nop
      }

      /* if no results found set error, free buffer */
      if (p == (pBuf + L2C_PAYLOAD_START + 1))
   16676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16678:	f103 0209 	add.w	r2, r3, #9
   1667c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1667e:	429a      	cmp	r2, r3
   16680:	d109      	bne.n	16696 <attsProcFindTypeReq+0x1ee>
      {
        WsfMsgFree(pBuf);
   16682:	980d      	ldr	r0, [sp, #52]	; 0x34
   16684:	f001 ff0d 	bl	184a2 <WsfMsgFree>
        err = ATT_ERR_NOT_FOUND;
   16688:	230a      	movs	r3, #10
   1668a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   1668e:	e002      	b.n	16696 <attsProcFindTypeReq+0x1ee>
      }
    }
    else
    {
      /* buffer allocation failed */
      err = ATT_ERR_RESOURCES;
   16690:	2311      	movs	r3, #17
   16692:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   16696:	9805      	ldr	r0, [sp, #20]
   16698:	f7ff f830 	bl	156fc <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   1669c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   166a0:	2b00      	cmp	r3, #0
   166a2:	d10b      	bne.n	166bc <attsProcFindTypeReq+0x214>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   166a4:	9b05      	ldr	r3, [sp, #20]
   166a6:	8b19      	ldrh	r1, [r3, #24]
   166a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   166aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   166ac:	3208      	adds	r2, #8
   166ae:	1a9b      	subs	r3, r3, r2
   166b0:	b29a      	uxth	r2, r3
   166b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   166b4:	2004      	movs	r0, #4
   166b6:	f005 f8d5 	bl	1b864 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
  }
}
   166ba:	e008      	b.n	166ce <attsProcFindTypeReq+0x226>
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   166bc:	9b05      	ldr	r3, [sp, #20]
   166be:	8b18      	ldrh	r0, [r3, #24]
   166c0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   166c4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   166c8:	2106      	movs	r1, #6
   166ca:	f7fe ffbd 	bl	15648 <attsErrRsp>
}
   166ce:	bf00      	nop
   166d0:	b00f      	add	sp, #60	; 0x3c
   166d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000166d8 <attsProcReadTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   166d8:	b510      	push	{r4, lr}
   166da:	b08e      	sub	sp, #56	; 0x38
   166dc:	9005      	str	r0, [sp, #20]
   166de:	460b      	mov	r3, r1
   166e0:	9203      	str	r2, [sp, #12]
   166e2:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     cbackErr = ATT_SUCCESS;
   166e6:	2300      	movs	r3, #0
   166e8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  uint8_t     err = ATT_SUCCESS;
   166ec:	2300      	movs	r3, #0
   166ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   166f2:	9b03      	ldr	r3, [sp, #12]
   166f4:	3309      	adds	r3, #9
   166f6:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   166f8:	9b03      	ldr	r3, [sp, #12]
   166fa:	781b      	ldrb	r3, [r3, #0]
   166fc:	b29a      	uxth	r2, r3
   166fe:	9b03      	ldr	r3, [sp, #12]
   16700:	3301      	adds	r3, #1
   16702:	781b      	ldrb	r3, [r3, #0]
   16704:	b29b      	uxth	r3, r3
   16706:	021b      	lsls	r3, r3, #8
   16708:	b29b      	uxth	r3, r3
   1670a:	4413      	add	r3, r2
   1670c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   16710:	9b03      	ldr	r3, [sp, #12]
   16712:	3302      	adds	r3, #2
   16714:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   16716:	9b03      	ldr	r3, [sp, #12]
   16718:	781b      	ldrb	r3, [r3, #0]
   1671a:	b29a      	uxth	r2, r3
   1671c:	9b03      	ldr	r3, [sp, #12]
   1671e:	3301      	adds	r3, #1
   16720:	781b      	ldrb	r3, [r3, #0]
   16722:	b29b      	uxth	r3, r3
   16724:	021b      	lsls	r3, r3, #8
   16726:	b29b      	uxth	r3, r3
   16728:	4413      	add	r3, r2
   1672a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   1672e:	9b03      	ldr	r3, [sp, #12]
   16730:	3302      	adds	r3, #2
   16732:	9303      	str	r3, [sp, #12]

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   16734:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   16738:	b2db      	uxtb	r3, r3
   1673a:	3b05      	subs	r3, #5
   1673c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   16740:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16744:	2b02      	cmp	r3, #2
   16746:	d007      	beq.n	16758 <attsProcReadTypeReq+0x80>
   16748:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1674c:	2b10      	cmp	r3, #16
   1674e:	d003      	beq.n	16758 <attsProcReadTypeReq+0x80>
  {
    err = ATT_ERR_INVALID_PDU;
   16750:	2304      	movs	r3, #4
   16752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   16756:	e00c      	b.n	16772 <attsProcReadTypeReq+0x9a>
  }
  /* verify handles */
  else if ((startHandle == 0) || (startHandle > endHandle))
   16758:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1675c:	2b00      	cmp	r3, #0
   1675e:	d005      	beq.n	1676c <attsProcReadTypeReq+0x94>
   16760:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   16764:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16768:	429a      	cmp	r2, r3
   1676a:	d902      	bls.n	16772 <attsProcReadTypeReq+0x9a>
  {
    err = ATT_ERR_HANDLE;
   1676c:	2301      	movs	r3, #1
   1676e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  }

  if (!err)
   16772:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   16776:	2b00      	cmp	r3, #0
   16778:	f040 8177 	bne.w	16a6a <attsProcReadTypeReq+0x392>
  {
    /* find first attribute with matching uuid within handle range */
    handle = attsFindUuidInRange(startHandle, endHandle, uuidLen, pPacket, &pAttr, &pGroup);
   1677c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   16780:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   16784:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   16788:	ab07      	add	r3, sp, #28
   1678a:	9301      	str	r3, [sp, #4]
   1678c:	ab08      	add	r3, sp, #32
   1678e:	9300      	str	r3, [sp, #0]
   16790:	9b03      	ldr	r3, [sp, #12]
   16792:	f7ff fcbd 	bl	16110 <attsFindUuidInRange>
   16796:	4603      	mov	r3, r0
   16798:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    startHandle = handle;
   1679c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   167a0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

    if (handle == ATT_HANDLE_NONE)
   167a4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   167a8:	2b00      	cmp	r3, #0
   167aa:	d103      	bne.n	167b4 <attsProcReadTypeReq+0xdc>
    {
      err = ATT_ERR_NOT_FOUND;
   167ac:	230a      	movs	r3, #10
   167ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   167b2:	e03f      	b.n	16834 <attsProcReadTypeReq+0x15c>
    }
    /* check permissions */
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   167b4:	9b05      	ldr	r3, [sp, #20]
   167b6:	7f18      	ldrb	r0, [r3, #28]
                                    handle, pAttr->permissions)) != ATT_SUCCESS)
   167b8:	9b08      	ldr	r3, [sp, #32]
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   167ba:	7bdb      	ldrb	r3, [r3, #15]
   167bc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   167c0:	2101      	movs	r1, #1
   167c2:	f7ff fa13 	bl	15bec <attsPermissions>
   167c6:	4603      	mov	r3, r0
   167c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   167cc:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   167d0:	2b00      	cmp	r3, #0
   167d2:	d12f      	bne.n	16834 <attsProcReadTypeReq+0x15c>
    {
      /* err is set above */
    }
    /* check if read callback should be called */
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   167d4:	9b08      	ldr	r3, [sp, #32]
   167d6:	7b9b      	ldrb	r3, [r3, #14]
   167d8:	f003 0304 	and.w	r3, r3, #4
   167dc:	2b00      	cmp	r3, #0
   167de:	d012      	beq.n	16806 <attsProcReadTypeReq+0x12e>
             (pGroup->readCback != NULL))
   167e0:	9b07      	ldr	r3, [sp, #28]
   167e2:	689b      	ldr	r3, [r3, #8]
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   167e4:	2b00      	cmp	r3, #0
   167e6:	d00e      	beq.n	16806 <attsProcReadTypeReq+0x12e>
    {
      err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   167e8:	9b07      	ldr	r3, [sp, #28]
   167ea:	689c      	ldr	r4, [r3, #8]
   167ec:	9b05      	ldr	r3, [sp, #20]
   167ee:	7f18      	ldrb	r0, [r3, #28]
   167f0:	9b08      	ldr	r3, [sp, #32]
   167f2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   167f6:	9300      	str	r3, [sp, #0]
   167f8:	2300      	movs	r3, #0
   167fa:	2208      	movs	r2, #8
   167fc:	47a0      	blx	r4
   167fe:	4603      	mov	r3, r0
   16800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   16804:	e016      	b.n	16834 <attsProcReadTypeReq+0x15c>
    }
    /* else check if CCC */
    else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   16806:	9b08      	ldr	r3, [sp, #32]
   16808:	7b9b      	ldrb	r3, [r3, #14]
   1680a:	f003 0320 	and.w	r3, r3, #32
   1680e:	2b00      	cmp	r3, #0
   16810:	d010      	beq.n	16834 <attsProcReadTypeReq+0x15c>
   16812:	4ba3      	ldr	r3, [pc, #652]	; (16aa0 <attsProcReadTypeReq+0x3c8>)
   16814:	695b      	ldr	r3, [r3, #20]
   16816:	2b00      	cmp	r3, #0
   16818:	d00c      	beq.n	16834 <attsProcReadTypeReq+0x15c>
    {
      err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1681a:	4ba1      	ldr	r3, [pc, #644]	; (16aa0 <attsProcReadTypeReq+0x3c8>)
   1681c:	695c      	ldr	r4, [r3, #20]
   1681e:	9b05      	ldr	r3, [sp, #20]
   16820:	7f18      	ldrb	r0, [r3, #28]
   16822:	9b08      	ldr	r3, [sp, #32]
   16824:	685b      	ldr	r3, [r3, #4]
   16826:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1682a:	2105      	movs	r1, #5
   1682c:	47a0      	blx	r4
   1682e:	4603      	mov	r3, r0
   16830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    }

    if (err == ATT_SUCCESS)
   16834:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   16838:	2b00      	cmp	r3, #0
   1683a:	f040 8116 	bne.w	16a6a <attsProcReadTypeReq+0x392>
    {
      /* Check if UUID is the Database Hash Characteristic Value and the value is being
       * re-calculated
       */
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   1683e:	2202      	movs	r2, #2
   16840:	4998      	ldr	r1, [pc, #608]	; (16aa4 <attsProcReadTypeReq+0x3cc>)
   16842:	9803      	ldr	r0, [sp, #12]
   16844:	f7f5 fc5c 	bl	c100 <memcmp>
   16848:	4603      	mov	r3, r0
   1684a:	2b00      	cmp	r3, #0
   1684c:	d122      	bne.n	16894 <attsProcReadTypeReq+0x1bc>
   1684e:	f7fe f92f 	bl	14ab0 <attsCsfGetHashUpdateStatus>
   16852:	4603      	mov	r3, r0
   16854:	2b00      	cmp	r3, #0
   16856:	d01d      	beq.n	16894 <attsProcReadTypeReq+0x1bc>
      {
        /* Store info and return */
        pCcb->pPendDbHashRsp = WsfBufAlloc(sizeof(attPendDbHashRsp_t));
   16858:	2004      	movs	r0, #4
   1685a:	f001 fd6f 	bl	1833c <WsfBufAlloc>
   1685e:	4602      	mov	r2, r0
   16860:	9b05      	ldr	r3, [sp, #20]
   16862:	621a      	str	r2, [r3, #32]
        if (pCcb->pPendDbHashRsp)
   16864:	9b05      	ldr	r3, [sp, #20]
   16866:	6a1b      	ldr	r3, [r3, #32]
   16868:	2b00      	cmp	r3, #0
   1686a:	d00a      	beq.n	16882 <attsProcReadTypeReq+0x1aa>
        {
          pCcb->pPendDbHashRsp->startHandle = startHandle;
   1686c:	9b05      	ldr	r3, [sp, #20]
   1686e:	6a1b      	ldr	r3, [r3, #32]
   16870:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   16874:	801a      	strh	r2, [r3, #0]
          pCcb->pPendDbHashRsp->handle = handle;
   16876:	9b05      	ldr	r3, [sp, #20]
   16878:	6a1b      	ldr	r3, [r3, #32]
   1687a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1687e:	805a      	strh	r2, [r3, #2]
        else
        {
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
        }

        return;
   16880:	e10c      	b.n	16a9c <attsProcReadTypeReq+0x3c4>
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
   16882:	9b05      	ldr	r3, [sp, #20]
   16884:	8b18      	ldrh	r0, [r3, #24]
   16886:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1688a:	2311      	movs	r3, #17
   1688c:	2108      	movs	r1, #8
   1688e:	f7fe fedb 	bl	15648 <attsErrRsp>
   16892:	e103      	b.n	16a9c <attsProcReadTypeReq+0x3c4>
      }

      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   16894:	9b05      	ldr	r3, [sp, #20]
   16896:	8b5b      	ldrh	r3, [r3, #26]
   16898:	3308      	adds	r3, #8
   1689a:	b29b      	uxth	r3, r3
   1689c:	4618      	mov	r0, r3
   1689e:	f001 f875 	bl	1798c <attMsgAlloc>
   168a2:	900d      	str	r0, [sp, #52]	; 0x34
   168a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168a6:	2b00      	cmp	r3, #0
   168a8:	f000 80d6 	beq.w	16a58 <attsProcReadTypeReq+0x380>
      {
        p = pBuf + L2C_PAYLOAD_START;
   168ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168ae:	3308      	adds	r3, #8
   168b0:	930c      	str	r3, [sp, #48]	; 0x30
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   168b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   168b4:	1c5a      	adds	r2, r3, #1
   168b6:	920c      	str	r2, [sp, #48]	; 0x30
   168b8:	2209      	movs	r2, #9
   168ba:	701a      	strb	r2, [r3, #0]

        /* get length of this first attribute */
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t));
   168bc:	9b05      	ldr	r3, [sp, #20]
   168be:	8b5b      	ldrh	r3, [r3, #26]
   168c0:	3b04      	subs	r3, #4
   168c2:	9a08      	ldr	r2, [sp, #32]
   168c4:	6892      	ldr	r2, [r2, #8]
   168c6:	8812      	ldrh	r2, [r2, #0]
   168c8:	4293      	cmp	r3, r2
   168ca:	bf28      	it	cs
   168cc:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   168ce:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   168d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   168d4:	1c5a      	adds	r2, r3, #1
   168d6:	920c      	str	r2, [sp, #48]	; 0x30
   168d8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   168dc:	3202      	adds	r2, #2
   168de:	b2d2      	uxtb	r2, r2
   168e0:	701a      	strb	r2, [r3, #0]

        /* copy result to response message */
        UINT16_TO_BSTREAM(p, handle);
   168e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   168e4:	1c5a      	adds	r2, r3, #1
   168e6:	920c      	str	r2, [sp, #48]	; 0x30
   168e8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   168ec:	b2d2      	uxtb	r2, r2
   168ee:	701a      	strb	r2, [r3, #0]
   168f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   168f2:	1c5a      	adds	r2, r3, #1
   168f4:	920c      	str	r2, [sp, #48]	; 0x30
   168f6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   168fa:	0a12      	lsrs	r2, r2, #8
   168fc:	b292      	uxth	r2, r2
   168fe:	b2d2      	uxtb	r2, r2
   16900:	701a      	strb	r2, [r3, #0]
        memcpy(p, pAttr->pValue, attLen);
   16902:	9b08      	ldr	r3, [sp, #32]
   16904:	685b      	ldr	r3, [r3, #4]
   16906:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1690a:	4619      	mov	r1, r3
   1690c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1690e:	f7f5 fc27 	bl	c160 <memcpy>
        p += attLen;
   16912:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16918:	4413      	add	r3, r2
   1691a:	930c      	str	r3, [sp, #48]	; 0x30

        /* look for additional attributes */
        handle++;
   1691c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16920:	3301      	adds	r3, #1
   16922:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   16926:	e081      	b.n	16a2c <attsProcReadTypeReq+0x354>
                                             pPacket, &pAttr, &pGroup)) != ATT_HANDLE_NONE)
        {
          /* call read callback if desired */
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16928:	9b08      	ldr	r3, [sp, #32]
   1692a:	7b9b      	ldrb	r3, [r3, #14]
   1692c:	f003 0304 	and.w	r3, r3, #4
   16930:	2b00      	cmp	r3, #0
   16932:	d012      	beq.n	1695a <attsProcReadTypeReq+0x282>
              (pGroup->readCback != NULL))
   16934:	9b07      	ldr	r3, [sp, #28]
   16936:	689b      	ldr	r3, [r3, #8]
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16938:	2b00      	cmp	r3, #0
   1693a:	d00e      	beq.n	1695a <attsProcReadTypeReq+0x282>
          {
            cbackErr = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   1693c:	9b07      	ldr	r3, [sp, #28]
   1693e:	689c      	ldr	r4, [r3, #8]
   16940:	9b05      	ldr	r3, [sp, #20]
   16942:	7f18      	ldrb	r0, [r3, #28]
   16944:	9b08      	ldr	r3, [sp, #32]
   16946:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1694a:	9300      	str	r3, [sp, #0]
   1694c:	2300      	movs	r3, #0
   1694e:	2208      	movs	r2, #8
   16950:	47a0      	blx	r4
   16952:	4603      	mov	r3, r0
   16954:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   16958:	e016      	b.n	16988 <attsProcReadTypeReq+0x2b0>
          }
          /* else check if CCC */
          else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1695a:	9b08      	ldr	r3, [sp, #32]
   1695c:	7b9b      	ldrb	r3, [r3, #14]
   1695e:	f003 0320 	and.w	r3, r3, #32
   16962:	2b00      	cmp	r3, #0
   16964:	d010      	beq.n	16988 <attsProcReadTypeReq+0x2b0>
   16966:	4b4e      	ldr	r3, [pc, #312]	; (16aa0 <attsProcReadTypeReq+0x3c8>)
   16968:	695b      	ldr	r3, [r3, #20]
   1696a:	2b00      	cmp	r3, #0
   1696c:	d00c      	beq.n	16988 <attsProcReadTypeReq+0x2b0>
          {
            cbackErr = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1696e:	4b4c      	ldr	r3, [pc, #304]	; (16aa0 <attsProcReadTypeReq+0x3c8>)
   16970:	695c      	ldr	r4, [r3, #20]
   16972:	9b05      	ldr	r3, [sp, #20]
   16974:	7f18      	ldrb	r0, [r3, #28]
   16976:	9b08      	ldr	r3, [sp, #32]
   16978:	685b      	ldr	r3, [r3, #4]
   1697a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1697e:	2105      	movs	r1, #5
   16980:	47a0      	blx	r4
   16982:	4603      	mov	r3, r0
   16984:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

          /* verify no error from read callback
           * verify length is same as first found attribute
           * verify attribute permissions
           */
          if ((cbackErr == ATT_SUCCESS) &&
   16988:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1698c:	2b00      	cmp	r3, #0
   1698e:	d16c      	bne.n	16a6a <attsProcReadTypeReq+0x392>
              (*pAttr->pLen == attLen) &&
   16990:	9b08      	ldr	r3, [sp, #32]
   16992:	689b      	ldr	r3, [r3, #8]
   16994:	881a      	ldrh	r2, [r3, #0]
   16996:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1699a:	b29b      	uxth	r3, r3
          if ((cbackErr == ATT_SUCCESS) &&
   1699c:	429a      	cmp	r2, r3
   1699e:	d164      	bne.n	16a6a <attsProcReadTypeReq+0x392>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   169a0:	9b05      	ldr	r3, [sp, #20]
   169a2:	7f18      	ldrb	r0, [r3, #28]
                               handle, pAttr->permissions) == ATT_SUCCESS))
   169a4:	9b08      	ldr	r3, [sp, #32]
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   169a6:	7bdb      	ldrb	r3, [r3, #15]
   169a8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   169ac:	2101      	movs	r1, #1
   169ae:	f7ff f91d 	bl	15bec <attsPermissions>
   169b2:	4603      	mov	r3, r0
              (*pAttr->pLen == attLen) &&
   169b4:	2b00      	cmp	r3, #0
   169b6:	d158      	bne.n	16a6a <attsProcReadTypeReq+0x392>
          {
            /* copy result into response buffer; first check if it fits */
            if ((p + attLen + sizeof(uint16_t)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   169b8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   169bc:	3302      	adds	r3, #2
   169be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   169c0:	441a      	add	r2, r3
   169c2:	9b05      	ldr	r3, [sp, #20]
   169c4:	8b5b      	ldrh	r3, [r3, #26]
   169c6:	3308      	adds	r3, #8
   169c8:	990d      	ldr	r1, [sp, #52]	; 0x34
   169ca:	440b      	add	r3, r1
   169cc:	429a      	cmp	r2, r3
   169ce:	d847      	bhi.n	16a60 <attsProcReadTypeReq+0x388>
            {
              UINT16_TO_BSTREAM(p, handle);
   169d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   169d2:	1c5a      	adds	r2, r3, #1
   169d4:	920c      	str	r2, [sp, #48]	; 0x30
   169d6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   169da:	b2d2      	uxtb	r2, r2
   169dc:	701a      	strb	r2, [r3, #0]
   169de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   169e0:	1c5a      	adds	r2, r3, #1
   169e2:	920c      	str	r2, [sp, #48]	; 0x30
   169e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   169e8:	0a12      	lsrs	r2, r2, #8
   169ea:	b292      	uxth	r2, r2
   169ec:	b2d2      	uxtb	r2, r2
   169ee:	701a      	strb	r2, [r3, #0]
              memcpy(p, pAttr->pValue, attLen);
   169f0:	9b08      	ldr	r3, [sp, #32]
   169f2:	685b      	ldr	r3, [r3, #4]
   169f4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   169f8:	4619      	mov	r1, r3
   169fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   169fc:	f7f5 fbb0 	bl	c160 <memcpy>
              p += attLen;
   16a00:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16a06:	4413      	add	r3, r2
   16a08:	930c      	str	r3, [sp, #48]	; 0x30
            /* problem with read callback, length, or permissions; send what we've got so far */
            break;
          }

          /* special case of handle at max range */
          if (handle == ATT_HANDLE_MAX)
   16a0a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16a12:	4293      	cmp	r3, r2
   16a14:	d026      	beq.n	16a64 <attsProcReadTypeReq+0x38c>
          {
            break;
          }

          /* try next handle */
          if (++handle > endHandle)
   16a16:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16a1a:	3301      	adds	r3, #1
   16a1c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   16a20:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16a24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16a28:	429a      	cmp	r2, r3
   16a2a:	d81d      	bhi.n	16a68 <attsProcReadTypeReq+0x390>
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   16a2c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   16a30:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   16a34:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   16a38:	ab07      	add	r3, sp, #28
   16a3a:	9301      	str	r3, [sp, #4]
   16a3c:	ab08      	add	r3, sp, #32
   16a3e:	9300      	str	r3, [sp, #0]
   16a40:	9b03      	ldr	r3, [sp, #12]
   16a42:	f7ff fb65 	bl	16110 <attsFindUuidInRange>
   16a46:	4603      	mov	r3, r0
   16a48:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   16a4c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16a50:	2b00      	cmp	r3, #0
   16a52:	f47f af69 	bne.w	16928 <attsProcReadTypeReq+0x250>
   16a56:	e008      	b.n	16a6a <attsProcReadTypeReq+0x392>
        }
      }
      else
      {
        /* buffer allocation failed */
        err = ATT_ERR_RESOURCES;
   16a58:	2311      	movs	r3, #17
   16a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   16a5e:	e004      	b.n	16a6a <attsProcReadTypeReq+0x392>
              break;
   16a60:	bf00      	nop
   16a62:	e002      	b.n	16a6a <attsProcReadTypeReq+0x392>
            break;
   16a64:	bf00      	nop
   16a66:	e000      	b.n	16a6a <attsProcReadTypeReq+0x392>
            break;
   16a68:	bf00      	nop
      }
    }
  }

  /* if no error send response, else send error */
  if (!err)
   16a6a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   16a6e:	2b00      	cmp	r3, #0
   16a70:	d10b      	bne.n	16a8a <attsProcReadTypeReq+0x3b2>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   16a72:	9b05      	ldr	r3, [sp, #20]
   16a74:	8b19      	ldrh	r1, [r3, #24]
   16a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16a7a:	3208      	adds	r2, #8
   16a7c:	1a9b      	subs	r3, r3, r2
   16a7e:	b29a      	uxth	r2, r3
   16a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16a82:	2004      	movs	r0, #4
   16a84:	f004 feee 	bl	1b864 <L2cDataReq>
   16a88:	e008      	b.n	16a9c <attsProcReadTypeReq+0x3c4>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   16a8a:	9b05      	ldr	r3, [sp, #20]
   16a8c:	8b18      	ldrh	r0, [r3, #24]
   16a8e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   16a92:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   16a96:	2108      	movs	r1, #8
   16a98:	f7fe fdd6 	bl	15648 <attsErrRsp>
  }
}
   16a9c:	b00e      	add	sp, #56	; 0x38
   16a9e:	bd10      	pop	{r4, pc}
   16aa0:	10008bf0 	.word	0x10008bf0
   16aa4:	000299b4 	.word	0x000299b4

00016aa8 <attsProcReadMultReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadMultReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   16aa8:	b510      	push	{r4, lr}
   16aaa:	b08e      	sub	sp, #56	; 0x38
   16aac:	9005      	str	r0, [sp, #20]
   16aae:	460b      	mov	r3, r1
   16ab0:	9203      	str	r2, [sp, #12]
   16ab2:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *pBuf;
  uint8_t     *p;
  uint8_t     *pEnd;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle = ATT_HANDLE_NONE;
   16ab6:	2300      	movs	r3, #0
   16ab8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   16abc:	2300      	movs	r3, #0
   16abe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31

  /* points to end of payload */
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   16ac2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   16ac6:	3308      	adds	r3, #8
   16ac8:	9a03      	ldr	r2, [sp, #12]
   16aca:	4413      	add	r3, r2
   16acc:	930b      	str	r3, [sp, #44]	; 0x2c

  /* points to first handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   16ace:	9b03      	ldr	r3, [sp, #12]
   16ad0:	3309      	adds	r3, #9
   16ad2:	9303      	str	r3, [sp, #12]

  /* allocate max size buffer for response */
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   16ad4:	9b05      	ldr	r3, [sp, #20]
   16ad6:	8b5b      	ldrh	r3, [r3, #26]
   16ad8:	3308      	adds	r3, #8
   16ada:	b29b      	uxth	r3, r3
   16adc:	4618      	mov	r0, r3
   16ade:	f000 ff55 	bl	1798c <attMsgAlloc>
   16ae2:	900a      	str	r0, [sp, #40]	; 0x28
   16ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16ae6:	2b00      	cmp	r3, #0
   16ae8:	f000 809e 	beq.w	16c28 <attsProcReadMultReq+0x180>
  {
    p = pBuf + L2C_PAYLOAD_START;
   16aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16aee:	3308      	adds	r3, #8
   16af0:	930d      	str	r3, [sp, #52]	; 0x34
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   16af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16af4:	1c5a      	adds	r2, r3, #1
   16af6:	920d      	str	r2, [sp, #52]	; 0x34
   16af8:	220f      	movs	r2, #15
   16afa:	701a      	strb	r2, [r3, #0]

    /* while there are handles remaining and there is space in response buffer */
    while (pPacket < pEnd)
   16afc:	e08e      	b.n	16c1c <attsProcReadMultReq+0x174>
    {
      /* parse handle */
      BSTREAM_TO_UINT16(handle, pPacket);
   16afe:	9b03      	ldr	r3, [sp, #12]
   16b00:	781b      	ldrb	r3, [r3, #0]
   16b02:	b29a      	uxth	r2, r3
   16b04:	9b03      	ldr	r3, [sp, #12]
   16b06:	3301      	adds	r3, #1
   16b08:	781b      	ldrb	r3, [r3, #0]
   16b0a:	b29b      	uxth	r3, r3
   16b0c:	021b      	lsls	r3, r3, #8
   16b0e:	b29b      	uxth	r3, r3
   16b10:	4413      	add	r3, r2
   16b12:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
   16b16:	9b03      	ldr	r3, [sp, #12]
   16b18:	3302      	adds	r3, #2
   16b1a:	9303      	str	r3, [sp, #12]

      /* find attribute */
      if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   16b1c:	aa07      	add	r2, sp, #28
   16b1e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   16b22:	4611      	mov	r1, r2
   16b24:	4618      	mov	r0, r3
   16b26:	f7fe fff1 	bl	15b0c <attsFindByHandle>
   16b2a:	9009      	str	r0, [sp, #36]	; 0x24
   16b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b2e:	2b00      	cmp	r3, #0
   16b30:	d103      	bne.n	16b3a <attsProcReadMultReq+0x92>
      {
        err = ATT_ERR_HANDLE;
   16b32:	2301      	movs	r3, #1
   16b34:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        break;
   16b38:	e07d      	b.n	16c36 <attsProcReadMultReq+0x18e>
      }

      /* verify permissions */
      if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   16b3a:	9b05      	ldr	r3, [sp, #20]
   16b3c:	7f18      	ldrb	r0, [r3, #28]
   16b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b40:	7bdb      	ldrb	r3, [r3, #15]
   16b42:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   16b46:	2101      	movs	r1, #1
   16b48:	f7ff f850 	bl	15bec <attsPermissions>
   16b4c:	4603      	mov	r3, r0
   16b4e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   16b52:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16b56:	2b00      	cmp	r3, #0
   16b58:	d16a      	bne.n	16c30 <attsProcReadMultReq+0x188>
      {
        break;
      }

      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b5c:	7b9b      	ldrb	r3, [r3, #14]
   16b5e:	f003 0304 	and.w	r3, r3, #4
   16b62:	2b00      	cmp	r3, #0
   16b64:	d016      	beq.n	16b94 <attsProcReadMultReq+0xec>
          (pGroup->readCback != NULL))
   16b66:	9b07      	ldr	r3, [sp, #28]
   16b68:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16b6a:	2b00      	cmp	r3, #0
   16b6c:	d012      	beq.n	16b94 <attsProcReadMultReq+0xec>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_MULT_REQ, 0, pAttr);
   16b6e:	9b07      	ldr	r3, [sp, #28]
   16b70:	689c      	ldr	r4, [r3, #8]
   16b72:	9b05      	ldr	r3, [sp, #20]
   16b74:	7f18      	ldrb	r0, [r3, #28]
   16b76:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
   16b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b7c:	9300      	str	r3, [sp, #0]
   16b7e:	2300      	movs	r3, #0
   16b80:	220e      	movs	r2, #14
   16b82:	47a0      	blx	r4
   16b84:	4603      	mov	r3, r0
   16b86:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        if (err != ATT_SUCCESS)
   16b8a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16b8e:	2b00      	cmp	r3, #0
   16b90:	d01b      	beq.n	16bca <attsProcReadMultReq+0x122>
        {
          break;
   16b92:	e050      	b.n	16c36 <attsProcReadMultReq+0x18e>
        }
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   16b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b96:	7b9b      	ldrb	r3, [r3, #14]
   16b98:	f003 0320 	and.w	r3, r3, #32
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	d014      	beq.n	16bca <attsProcReadMultReq+0x122>
   16ba0:	4b36      	ldr	r3, [pc, #216]	; (16c7c <attsProcReadMultReq+0x1d4>)
   16ba2:	695b      	ldr	r3, [r3, #20]
   16ba4:	2b00      	cmp	r3, #0
   16ba6:	d010      	beq.n	16bca <attsProcReadMultReq+0x122>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   16ba8:	4b34      	ldr	r3, [pc, #208]	; (16c7c <attsProcReadMultReq+0x1d4>)
   16baa:	695c      	ldr	r4, [r3, #20]
   16bac:	9b05      	ldr	r3, [sp, #20]
   16bae:	7f18      	ldrb	r0, [r3, #28]
   16bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16bb2:	685b      	ldr	r3, [r3, #4]
   16bb4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   16bb8:	2105      	movs	r1, #5
   16bba:	47a0      	blx	r4
   16bbc:	4603      	mov	r3, r0
   16bbe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        if (err != ATT_SUCCESS)
   16bc2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	d134      	bne.n	16c34 <attsProcReadMultReq+0x18c>
        {
          break;
        }
      }

      if (p < (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   16bca:	9b05      	ldr	r3, [sp, #20]
   16bcc:	8b5b      	ldrh	r3, [r3, #26]
   16bce:	3308      	adds	r3, #8
   16bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16bd2:	441a      	add	r2, r3
   16bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16bd6:	429a      	cmp	r2, r3
   16bd8:	d920      	bls.n	16c1c <attsProcReadMultReq+0x174>
      {
        /* calculate remaining space in response buffer */
        readLen = (pBuf + pCcb->mtu + L2C_PAYLOAD_START) - p;
   16bda:	9b05      	ldr	r3, [sp, #20]
   16bdc:	8b5b      	ldrh	r3, [r3, #26]
   16bde:	3308      	adds	r3, #8
   16be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16be2:	4413      	add	r3, r2
   16be4:	461a      	mov	r2, r3
   16be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16be8:	1ad3      	subs	r3, r2, r3
   16bea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

        /* actual length is minimum of remaining space and attribute length */
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   16bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16bf0:	689b      	ldr	r3, [r3, #8]
   16bf2:	881a      	ldrh	r2, [r3, #0]
   16bf4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   16bf8:	4293      	cmp	r3, r2
   16bfa:	bf28      	it	cs
   16bfc:	4613      	movcs	r3, r2
   16bfe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

        /* copy attribute to response buffer */
        memcpy(p, pAttr->pValue, readLen);
   16c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16c04:	685b      	ldr	r3, [r3, #4]
   16c06:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   16c0a:	4619      	mov	r1, r3
   16c0c:	980d      	ldr	r0, [sp, #52]	; 0x34
   16c0e:	f7f5 faa7 	bl	c160 <memcpy>
        p += readLen;
   16c12:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   16c16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16c18:	4413      	add	r3, r2
   16c1a:	930d      	str	r3, [sp, #52]	; 0x34
    while (pPacket < pEnd)
   16c1c:	9a03      	ldr	r2, [sp, #12]
   16c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16c20:	429a      	cmp	r2, r3
   16c22:	f4ff af6c 	bcc.w	16afe <attsProcReadMultReq+0x56>
   16c26:	e006      	b.n	16c36 <attsProcReadMultReq+0x18e>
    }
  }
  else
  {
    /* buffer allocation failed */
    err = ATT_ERR_RESOURCES;
   16c28:	2311      	movs	r3, #17
   16c2a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   16c2e:	e002      	b.n	16c36 <attsProcReadMultReq+0x18e>
        break;
   16c30:	bf00      	nop
   16c32:	e000      	b.n	16c36 <attsProcReadMultReq+0x18e>
          break;
   16c34:	bf00      	nop
  }

  /* if no error send response, else send error */
  if (!err)
   16c36:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16c3a:	2b00      	cmp	r3, #0
   16c3c:	d10b      	bne.n	16c56 <attsProcReadMultReq+0x1ae>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   16c3e:	9b05      	ldr	r3, [sp, #20]
   16c40:	8b19      	ldrh	r1, [r3, #24]
   16c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16c46:	3208      	adds	r2, #8
   16c48:	1a9b      	subs	r3, r3, r2
   16c4a:	b29a      	uxth	r2, r3
   16c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16c4e:	2004      	movs	r0, #4
   16c50:	f004 fe08 	bl	1b864 <L2cDataReq>
      WsfMsgFree(pBuf);
    }

    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
  }
}
   16c54:	e00e      	b.n	16c74 <attsProcReadMultReq+0x1cc>
    if (pBuf != NULL)
   16c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16c58:	2b00      	cmp	r3, #0
   16c5a:	d002      	beq.n	16c62 <attsProcReadMultReq+0x1ba>
      WsfMsgFree(pBuf);
   16c5c:	980a      	ldr	r0, [sp, #40]	; 0x28
   16c5e:	f001 fc20 	bl	184a2 <WsfMsgFree>
    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
   16c62:	9b05      	ldr	r3, [sp, #20]
   16c64:	8b18      	ldrh	r0, [r3, #24]
   16c66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16c6a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   16c6e:	210e      	movs	r1, #14
   16c70:	f7fe fcea 	bl	15648 <attsErrRsp>
}
   16c74:	bf00      	nop
   16c76:	b00e      	add	sp, #56	; 0x38
   16c78:	bd10      	pop	{r4, pc}
   16c7a:	bf00      	nop
   16c7c:	10008bf0 	.word	0x10008bf0

00016c80 <attsProcReadGroupTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadGroupTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   16c80:	b500      	push	{lr}
   16c82:	b08f      	sub	sp, #60	; 0x3c
   16c84:	9005      	str	r0, [sp, #20]
   16c86:	460b      	mov	r3, r1
   16c88:	9203      	str	r2, [sp, #12]
   16c8a:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *pBuf = NULL;
   16c8e:	2300      	movs	r3, #0
   16c90:	930d      	str	r3, [sp, #52]	; 0x34
  uint8_t     *p = NULL;
   16c92:	2300      	movs	r3, #0
   16c94:	930c      	str	r3, [sp, #48]	; 0x30
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     err = ATT_SUCCESS;
   16c96:	2300      	movs	r3, #0
   16c98:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   16c9c:	2300      	movs	r3, #0
   16c9e:	f88d 3018 	strb.w	r3, [sp, #24]
   16ca2:	2328      	movs	r3, #40	; 0x28
   16ca4:	f88d 3019 	strb.w	r3, [sp, #25]

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   16ca8:	9b03      	ldr	r3, [sp, #12]
   16caa:	3309      	adds	r3, #9
   16cac:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   16cae:	9b03      	ldr	r3, [sp, #12]
   16cb0:	781b      	ldrb	r3, [r3, #0]
   16cb2:	b29a      	uxth	r2, r3
   16cb4:	9b03      	ldr	r3, [sp, #12]
   16cb6:	3301      	adds	r3, #1
   16cb8:	781b      	ldrb	r3, [r3, #0]
   16cba:	b29b      	uxth	r3, r3
   16cbc:	021b      	lsls	r3, r3, #8
   16cbe:	b29b      	uxth	r3, r3
   16cc0:	4413      	add	r3, r2
   16cc2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   16cc6:	9b03      	ldr	r3, [sp, #12]
   16cc8:	3302      	adds	r3, #2
   16cca:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   16ccc:	9b03      	ldr	r3, [sp, #12]
   16cce:	781b      	ldrb	r3, [r3, #0]
   16cd0:	b29a      	uxth	r2, r3
   16cd2:	9b03      	ldr	r3, [sp, #12]
   16cd4:	3301      	adds	r3, #1
   16cd6:	781b      	ldrb	r3, [r3, #0]
   16cd8:	b29b      	uxth	r3, r3
   16cda:	021b      	lsls	r3, r3, #8
   16cdc:	b29b      	uxth	r3, r3
   16cde:	4413      	add	r3, r2
   16ce0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   16ce4:	9b03      	ldr	r3, [sp, #12]
   16ce6:	3302      	adds	r3, #2
   16ce8:	9303      	str	r3, [sp, #12]

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   16cea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   16cee:	b2db      	uxtb	r3, r3
   16cf0:	3b05      	subs	r3, #5
   16cf2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   16cf6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16cfa:	2b02      	cmp	r3, #2
   16cfc:	d007      	beq.n	16d0e <attsProcReadGroupTypeReq+0x8e>
   16cfe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16d02:	2b10      	cmp	r3, #16
   16d04:	d003      	beq.n	16d0e <attsProcReadGroupTypeReq+0x8e>
  {
    err = ATT_ERR_INVALID_PDU;
   16d06:	2304      	movs	r3, #4
   16d08:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   16d0c:	e01a      	b.n	16d44 <attsProcReadGroupTypeReq+0xc4>
  }
  /* verify handles */
  else if ((startHandle == 0) || (startHandle > endHandle))
   16d0e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   16d12:	2b00      	cmp	r3, #0
   16d14:	d005      	beq.n	16d22 <attsProcReadGroupTypeReq+0xa2>
   16d16:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   16d1a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16d1e:	429a      	cmp	r2, r3
   16d20:	d903      	bls.n	16d2a <attsProcReadGroupTypeReq+0xaa>
  {
    err = ATT_ERR_HANDLE;
   16d22:	2301      	movs	r3, #1
   16d24:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   16d28:	e00c      	b.n	16d44 <attsProcReadGroupTypeReq+0xc4>
  }
  /* verify uuid is primary service group */
  else if (!attsUuid16Cmp(primSvcUuid, uuidLen, pPacket))
   16d2a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   16d2e:	ab06      	add	r3, sp, #24
   16d30:	9a03      	ldr	r2, [sp, #12]
   16d32:	4618      	mov	r0, r3
   16d34:	f7fe fec3 	bl	15abe <attsUuid16Cmp>
   16d38:	4603      	mov	r3, r0
   16d3a:	2b00      	cmp	r3, #0
   16d3c:	d102      	bne.n	16d44 <attsProcReadGroupTypeReq+0xc4>
  {
    err = ATT_ERR_GROUP_TYPE;
   16d3e:	2310      	movs	r3, #16
   16d40:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  }

  if (!err)
   16d44:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   16d48:	2b00      	cmp	r3, #0
   16d4a:	f040 810f 	bne.w	16f6c <attsProcReadGroupTypeReq+0x2ec>
  {
    /* find first attribute with matching uuid within handle range */
    handle = attsFindUuidInRange(startHandle, endHandle, uuidLen, pPacket, &pAttr, &pGroup);
   16d4e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   16d52:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   16d56:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   16d5a:	ab07      	add	r3, sp, #28
   16d5c:	9301      	str	r3, [sp, #4]
   16d5e:	ab08      	add	r3, sp, #32
   16d60:	9300      	str	r3, [sp, #0]
   16d62:	9b03      	ldr	r3, [sp, #12]
   16d64:	f7ff f9d4 	bl	16110 <attsFindUuidInRange>
   16d68:	4603      	mov	r3, r0
   16d6a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

    if (handle == ATT_HANDLE_NONE)
   16d6e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16d72:	2b00      	cmp	r3, #0
   16d74:	d103      	bne.n	16d7e <attsProcReadGroupTypeReq+0xfe>
    {
      err = ATT_ERR_NOT_FOUND;
   16d76:	230a      	movs	r3, #10
   16d78:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   16d7c:	e0f6      	b.n	16f6c <attsProcReadGroupTypeReq+0x2ec>
    }
    /* check permissions */
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   16d7e:	9b05      	ldr	r3, [sp, #20]
   16d80:	7f18      	ldrb	r0, [r3, #28]
                                    handle, pAttr->permissions)) != ATT_SUCCESS)
   16d82:	9b08      	ldr	r3, [sp, #32]
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   16d84:	7bdb      	ldrb	r3, [r3, #15]
   16d86:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16d8a:	2101      	movs	r1, #1
   16d8c:	f7fe ff2e 	bl	15bec <attsPermissions>
   16d90:	4603      	mov	r3, r0
   16d92:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   16d96:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   16d9a:	2b00      	cmp	r3, #0
   16d9c:	d004      	beq.n	16da8 <attsProcReadGroupTypeReq+0x128>
    {
      startHandle = handle;     /* this handle is returned in error response */
   16d9e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16da2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   16da6:	e0e1      	b.n	16f6c <attsProcReadGroupTypeReq+0x2ec>
    }
    else
    {
      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   16da8:	9b05      	ldr	r3, [sp, #20]
   16daa:	8b5b      	ldrh	r3, [r3, #26]
   16dac:	3308      	adds	r3, #8
   16dae:	b29b      	uxth	r3, r3
   16db0:	4618      	mov	r0, r3
   16db2:	f000 fdeb 	bl	1798c <attMsgAlloc>
   16db6:	900d      	str	r0, [sp, #52]	; 0x34
   16db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16dba:	2b00      	cmp	r3, #0
   16dbc:	f000 80cb 	beq.w	16f56 <attsProcReadGroupTypeReq+0x2d6>
      {
        p = pBuf + L2C_PAYLOAD_START;
   16dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16dc2:	3308      	adds	r3, #8
   16dc4:	930c      	str	r3, [sp, #48]	; 0x30
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_GROUP_TYPE_RSP);
   16dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16dc8:	1c5a      	adds	r2, r3, #1
   16dca:	920c      	str	r2, [sp, #48]	; 0x30
   16dcc:	2211      	movs	r2, #17
   16dce:	701a      	strb	r2, [r3, #0]

        /* get length of this first attribute */
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)));
   16dd0:	9b05      	ldr	r3, [sp, #20]
   16dd2:	8b5b      	ldrh	r3, [r3, #26]
   16dd4:	3b06      	subs	r3, #6
   16dd6:	9a08      	ldr	r2, [sp, #32]
   16dd8:	6892      	ldr	r2, [r2, #8]
   16dda:	8812      	ldrh	r2, [r2, #0]
   16ddc:	4293      	cmp	r3, r2
   16dde:	bf28      	it	cs
   16de0:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   16de2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   16de6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16de8:	1c5a      	adds	r2, r3, #1
   16dea:	920c      	str	r2, [sp, #48]	; 0x30
   16dec:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   16df0:	3204      	adds	r2, #4
   16df2:	b2d2      	uxtb	r2, r2
   16df4:	701a      	strb	r2, [r3, #0]

        /* copy handle to response message */
        UINT16_TO_BSTREAM(p, handle);
   16df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16df8:	1c5a      	adds	r2, r3, #1
   16dfa:	920c      	str	r2, [sp, #48]	; 0x30
   16dfc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16e00:	b2d2      	uxtb	r2, r2
   16e02:	701a      	strb	r2, [r3, #0]
   16e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16e06:	1c5a      	adds	r2, r3, #1
   16e08:	920c      	str	r2, [sp, #48]	; 0x30
   16e0a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16e0e:	0a12      	lsrs	r2, r2, #8
   16e10:	b292      	uxth	r2, r2
   16e12:	b2d2      	uxtb	r2, r2
   16e14:	701a      	strb	r2, [r3, #0]

        /* get end group handle and copy it to response message */
        handle = attsFindServiceGroupEnd(handle);
   16e16:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16e1a:	4618      	mov	r0, r3
   16e1c:	f7ff f9ee 	bl	161fc <attsFindServiceGroupEnd>
   16e20:	4603      	mov	r3, r0
   16e22:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        UINT16_TO_BSTREAM(p, handle);
   16e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16e28:	1c5a      	adds	r2, r3, #1
   16e2a:	920c      	str	r2, [sp, #48]	; 0x30
   16e2c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16e30:	b2d2      	uxtb	r2, r2
   16e32:	701a      	strb	r2, [r3, #0]
   16e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16e36:	1c5a      	adds	r2, r3, #1
   16e38:	920c      	str	r2, [sp, #48]	; 0x30
   16e3a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16e3e:	0a12      	lsrs	r2, r2, #8
   16e40:	b292      	uxth	r2, r2
   16e42:	b2d2      	uxtb	r2, r2
   16e44:	701a      	strb	r2, [r3, #0]

        /* copy the attribute value to response message */
        memcpy(p, pAttr->pValue, attLen);
   16e46:	9b08      	ldr	r3, [sp, #32]
   16e48:	685b      	ldr	r3, [r3, #4]
   16e4a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   16e4e:	4619      	mov	r1, r3
   16e50:	980c      	ldr	r0, [sp, #48]	; 0x30
   16e52:	f7f5 f985 	bl	c160 <memcpy>
        p += attLen;
   16e56:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16e5c:	4413      	add	r3, r2
   16e5e:	930c      	str	r3, [sp, #48]	; 0x30

        /* look for additional attributes */
        while (TRUE)
        {
          /* special case of handle at max range */
          if (handle == ATT_HANDLE_MAX)
   16e60:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16e68:	4293      	cmp	r3, r2
   16e6a:	d078      	beq.n	16f5e <attsProcReadGroupTypeReq+0x2de>
          {
            break;
          }

          /* increment to next handle */
          if (++handle > endHandle)
   16e6c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16e70:	3301      	adds	r3, #1
   16e72:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   16e76:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16e7a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16e7e:	429a      	cmp	r2, r3
   16e80:	d86f      	bhi.n	16f62 <attsProcReadGroupTypeReq+0x2e2>
          {
            break;
          }

          /* find next matching handle */
          if ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   16e82:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   16e86:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   16e8a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   16e8e:	ab07      	add	r3, sp, #28
   16e90:	9301      	str	r3, [sp, #4]
   16e92:	ab08      	add	r3, sp, #32
   16e94:	9300      	str	r3, [sp, #0]
   16e96:	9b03      	ldr	r3, [sp, #12]
   16e98:	f7ff f93a 	bl	16110 <attsFindUuidInRange>
   16e9c:	4603      	mov	r3, r0
   16e9e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   16ea2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16ea6:	2b00      	cmp	r3, #0
   16ea8:	d05d      	beq.n	16f66 <attsProcReadGroupTypeReq+0x2e6>
          }

          /* verify length is same as first found attribute
           * verify attribute permissions
           */
          if ((*pAttr->pLen == attLen) &&
   16eaa:	9b08      	ldr	r3, [sp, #32]
   16eac:	689b      	ldr	r3, [r3, #8]
   16eae:	881a      	ldrh	r2, [r3, #0]
   16eb0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16eb4:	b29b      	uxth	r3, r3
   16eb6:	429a      	cmp	r2, r3
   16eb8:	d158      	bne.n	16f6c <attsProcReadGroupTypeReq+0x2ec>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   16eba:	9b05      	ldr	r3, [sp, #20]
   16ebc:	7f18      	ldrb	r0, [r3, #28]
                               handle, pAttr->permissions) == ATT_SUCCESS))
   16ebe:	9b08      	ldr	r3, [sp, #32]
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   16ec0:	7bdb      	ldrb	r3, [r3, #15]
   16ec2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16ec6:	2101      	movs	r1, #1
   16ec8:	f7fe fe90 	bl	15bec <attsPermissions>
   16ecc:	4603      	mov	r3, r0
          if ((*pAttr->pLen == attLen) &&
   16ece:	2b00      	cmp	r3, #0
   16ed0:	d14c      	bne.n	16f6c <attsProcReadGroupTypeReq+0x2ec>
          {
            /* copy result into response buffer; first check if it fits */
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   16ed2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16ed6:	3304      	adds	r3, #4
   16ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16eda:	441a      	add	r2, r3
                (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   16edc:	9b05      	ldr	r3, [sp, #20]
   16ede:	8b5b      	ldrh	r3, [r3, #26]
   16ee0:	3308      	adds	r3, #8
   16ee2:	990d      	ldr	r1, [sp, #52]	; 0x34
   16ee4:	440b      	add	r3, r1
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   16ee6:	429a      	cmp	r2, r3
   16ee8:	d83f      	bhi.n	16f6a <attsProcReadGroupTypeReq+0x2ea>
            {
              UINT16_TO_BSTREAM(p, handle);
   16eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16eec:	1c5a      	adds	r2, r3, #1
   16eee:	920c      	str	r2, [sp, #48]	; 0x30
   16ef0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16ef4:	b2d2      	uxtb	r2, r2
   16ef6:	701a      	strb	r2, [r3, #0]
   16ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16efa:	1c5a      	adds	r2, r3, #1
   16efc:	920c      	str	r2, [sp, #48]	; 0x30
   16efe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16f02:	0a12      	lsrs	r2, r2, #8
   16f04:	b292      	uxth	r2, r2
   16f06:	b2d2      	uxtb	r2, r2
   16f08:	701a      	strb	r2, [r3, #0]
              handle = attsFindServiceGroupEnd(handle);
   16f0a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16f0e:	4618      	mov	r0, r3
   16f10:	f7ff f974 	bl	161fc <attsFindServiceGroupEnd>
   16f14:	4603      	mov	r3, r0
   16f16:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
              UINT16_TO_BSTREAM(p, handle);
   16f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16f1c:	1c5a      	adds	r2, r3, #1
   16f1e:	920c      	str	r2, [sp, #48]	; 0x30
   16f20:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16f24:	b2d2      	uxtb	r2, r2
   16f26:	701a      	strb	r2, [r3, #0]
   16f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16f2a:	1c5a      	adds	r2, r3, #1
   16f2c:	920c      	str	r2, [sp, #48]	; 0x30
   16f2e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   16f32:	0a12      	lsrs	r2, r2, #8
   16f34:	b292      	uxth	r2, r2
   16f36:	b2d2      	uxtb	r2, r2
   16f38:	701a      	strb	r2, [r3, #0]
              memcpy(p, pAttr->pValue, attLen);
   16f3a:	9b08      	ldr	r3, [sp, #32]
   16f3c:	685b      	ldr	r3, [r3, #4]
   16f3e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   16f42:	4619      	mov	r1, r3
   16f44:	980c      	ldr	r0, [sp, #48]	; 0x30
   16f46:	f7f5 f90b 	bl	c160 <memcpy>
              p += attLen;
   16f4a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16f4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16f50:	4413      	add	r3, r2
   16f52:	930c      	str	r3, [sp, #48]	; 0x30
          if (handle == ATT_HANDLE_MAX)
   16f54:	e784      	b.n	16e60 <attsProcReadGroupTypeReq+0x1e0>
        }
      }
      else
      {
        /* buffer allocation failed */
        err = ATT_ERR_RESOURCES;
   16f56:	2311      	movs	r3, #17
   16f58:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   16f5c:	e006      	b.n	16f6c <attsProcReadGroupTypeReq+0x2ec>
            break;
   16f5e:	bf00      	nop
   16f60:	e004      	b.n	16f6c <attsProcReadGroupTypeReq+0x2ec>
            break;
   16f62:	bf00      	nop
   16f64:	e002      	b.n	16f6c <attsProcReadGroupTypeReq+0x2ec>
            break;
   16f66:	bf00      	nop
   16f68:	e000      	b.n	16f6c <attsProcReadGroupTypeReq+0x2ec>
              break;
   16f6a:	bf00      	nop
      }
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   16f6c:	9805      	ldr	r0, [sp, #20]
   16f6e:	f7fe fbc5 	bl	156fc <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   16f72:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   16f76:	2b00      	cmp	r3, #0
   16f78:	d10b      	bne.n	16f92 <attsProcReadGroupTypeReq+0x312>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   16f7a:	9b05      	ldr	r3, [sp, #20]
   16f7c:	8b19      	ldrh	r1, [r3, #24]
   16f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16f82:	3208      	adds	r2, #8
   16f84:	1a9b      	subs	r3, r3, r2
   16f86:	b29a      	uxth	r2, r3
   16f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16f8a:	2004      	movs	r0, #4
   16f8c:	f004 fc6a 	bl	1b864 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
  }
}
   16f90:	e008      	b.n	16fa4 <attsProcReadGroupTypeReq+0x324>
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
   16f92:	9b05      	ldr	r3, [sp, #20]
   16f94:	8b18      	ldrh	r0, [r3, #24]
   16f96:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   16f9a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   16f9e:	2110      	movs	r1, #16
   16fa0:	f7fe fb52 	bl	15648 <attsErrRsp>
}
   16fa4:	bf00      	nop
   16fa6:	b00f      	add	sp, #60	; 0x3c
   16fa8:	f85d fb04 	ldr.w	pc, [sp], #4

00016fac <attsSignCcbByConnId>:
 *
 *  \return Pointer to control block.
 */
/*************************************************************************************************/
static attsSignCcb_t *attsSignCcbByConnId(dmConnId_t connId)
{
   16fac:	b082      	sub	sp, #8
   16fae:	4603      	mov	r3, r0
   16fb0:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attsSignCb.ccb[connId - 1];
   16fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16fb8:	3b01      	subs	r3, #1
   16fba:	011b      	lsls	r3, r3, #4
   16fbc:	4a02      	ldr	r2, [pc, #8]	; (16fc8 <attsSignCcbByConnId+0x1c>)
   16fbe:	4413      	add	r3, r2
}
   16fc0:	4618      	mov	r0, r3
   16fc2:	b002      	add	sp, #8
   16fc4:	4770      	bx	lr
   16fc6:	bf00      	nop
   16fc8:	10003688 	.word	0x10003688

00016fcc <AttsSetCsrk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetCsrk(dmConnId_t connId, uint8_t *pCsrk, bool_t authenticated)
{
   16fcc:	b500      	push	{lr}
   16fce:	b083      	sub	sp, #12
   16fd0:	4603      	mov	r3, r0
   16fd2:	9100      	str	r1, [sp, #0]
   16fd4:	f88d 3007 	strb.w	r3, [sp, #7]
   16fd8:	4613      	mov	r3, r2
   16fda:	f88d 3006 	strb.w	r3, [sp, #6]
  attsSignCcbByConnId(connId)->pCsrk = pCsrk;
   16fde:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16fe2:	4618      	mov	r0, r3
   16fe4:	f7ff ffe2 	bl	16fac <attsSignCcbByConnId>
   16fe8:	4602      	mov	r2, r0
   16fea:	9b00      	ldr	r3, [sp, #0]
   16fec:	6053      	str	r3, [r2, #4]
  attsSignCcbByConnId(connId)->authenticated = authenticated;
   16fee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16ff2:	4618      	mov	r0, r3
   16ff4:	f7ff ffda 	bl	16fac <attsSignCcbByConnId>
   16ff8:	4602      	mov	r2, r0
   16ffa:	f89d 3006 	ldrb.w	r3, [sp, #6]
   16ffe:	7313      	strb	r3, [r2, #12]
}
   17000:	bf00      	nop
   17002:	b003      	add	sp, #12
   17004:	f85d fb04 	ldr.w	pc, [sp], #4

00017008 <AttsSetSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetSignCounter(dmConnId_t connId, uint32_t signCounter)
{
   17008:	b500      	push	{lr}
   1700a:	b083      	sub	sp, #12
   1700c:	4603      	mov	r3, r0
   1700e:	9100      	str	r1, [sp, #0]
   17010:	f88d 3007 	strb.w	r3, [sp, #7]
  attsSignCcbByConnId(connId)->signCounter = signCounter;
   17014:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17018:	4618      	mov	r0, r3
   1701a:	f7ff ffc7 	bl	16fac <attsSignCcbByConnId>
   1701e:	4602      	mov	r2, r0
   17020:	9b00      	ldr	r3, [sp, #0]
   17022:	6013      	str	r3, [r2, #0]
}
   17024:	bf00      	nop
   17026:	b003      	add	sp, #12
   17028:	f85d fb04 	ldr.w	pc, [sp], #4

0001702c <AttsGetSignCounter>:
 *
 *  \return Sign counter.
 */
/*************************************************************************************************/
uint32_t AttsGetSignCounter(dmConnId_t connId)
{
   1702c:	b500      	push	{lr}
   1702e:	b083      	sub	sp, #12
   17030:	4603      	mov	r3, r0
   17032:	f88d 3007 	strb.w	r3, [sp, #7]
  return attsSignCcbByConnId(connId)->signCounter;
   17036:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1703a:	4618      	mov	r0, r3
   1703c:	f7ff ffb6 	bl	16fac <attsSignCcbByConnId>
   17040:	4603      	mov	r3, r0
   17042:	681b      	ldr	r3, [r3, #0]
}
   17044:	4618      	mov	r0, r3
   17046:	b003      	add	sp, #12
   17048:	f85d fb04 	ldr.w	pc, [sp], #4

0001704c <attsExecPrepWrite>:
 *
 *  \return ATT_SUCCESS or failure status.
 */
/*************************************************************************************************/
static uint8_t attsExecPrepWrite(attCcb_t *pCcb, attsPrepWrite_t *pPrep)
{
   1704c:	b530      	push	{r4, r5, lr}
   1704e:	b08b      	sub	sp, #44	; 0x2c
   17050:	9005      	str	r0, [sp, #20]
   17052:	9104      	str	r1, [sp, #16]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;
   17054:	2300      	movs	r3, #0
   17056:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

  p = pPrep->packet;
   1705a:	9b04      	ldr	r3, [sp, #16]
   1705c:	330a      	adds	r3, #10
   1705e:	9308      	str	r3, [sp, #32]

  /* find attribute */
  if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) == NULL)
   17060:	9b04      	ldr	r3, [sp, #16]
   17062:	88db      	ldrh	r3, [r3, #6]
   17064:	aa06      	add	r2, sp, #24
   17066:	4611      	mov	r1, r2
   17068:	4618      	mov	r0, r3
   1706a:	f7fe fd4f 	bl	15b0c <attsFindByHandle>
   1706e:	9007      	str	r0, [sp, #28]
   17070:	9b07      	ldr	r3, [sp, #28]
   17072:	2b00      	cmp	r3, #0
   17074:	d103      	bne.n	1707e <attsExecPrepWrite+0x32>
  {
    /* handle not found; only possible unless handle was removed */
    err = ATT_ERR_UNLIKELY;
   17076:	230e      	movs	r3, #14
   17078:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1707c:	e05a      	b.n	17134 <attsExecPrepWrite+0xe8>
  }
  /* verify write permissions (in theory could have changed) */
  else if (!(pAttr->permissions & ATTS_PERMIT_WRITE))
   1707e:	9b07      	ldr	r3, [sp, #28]
   17080:	7bdb      	ldrb	r3, [r3, #15]
   17082:	f003 0310 	and.w	r3, r3, #16
   17086:	2b00      	cmp	r3, #0
   17088:	d103      	bne.n	17092 <attsExecPrepWrite+0x46>
  {
    err = ATT_ERR_WRITE;
   1708a:	2303      	movs	r3, #3
   1708c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   17090:	e050      	b.n	17134 <attsExecPrepWrite+0xe8>
  }
  /* if write callback is desired */
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   17092:	9b07      	ldr	r3, [sp, #28]
   17094:	7b9b      	ldrb	r3, [r3, #14]
   17096:	f003 0302 	and.w	r3, r3, #2
   1709a:	2b00      	cmp	r3, #0
   1709c:	d019      	beq.n	170d2 <attsExecPrepWrite+0x86>
           (pGroup->writeCback != NULL))
   1709e:	9b06      	ldr	r3, [sp, #24]
   170a0:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   170a2:	2b00      	cmp	r3, #0
   170a4:	d015      	beq.n	170d2 <attsExecPrepWrite+0x86>
  {

    /* write callback performs the write */
    err = (*pGroup->writeCback)(pCcb->connId, pPrep->handle, ATT_PDU_EXEC_WRITE_REQ,
   170a6:	9b06      	ldr	r3, [sp, #24]
   170a8:	68dc      	ldr	r4, [r3, #12]
   170aa:	9b05      	ldr	r3, [sp, #20]
   170ac:	7f18      	ldrb	r0, [r3, #28]
   170ae:	9b04      	ldr	r3, [sp, #16]
   170b0:	88d9      	ldrh	r1, [r3, #6]
   170b2:	9b04      	ldr	r3, [sp, #16]
   170b4:	891d      	ldrh	r5, [r3, #8]
   170b6:	9b04      	ldr	r3, [sp, #16]
   170b8:	889b      	ldrh	r3, [r3, #4]
   170ba:	9a07      	ldr	r2, [sp, #28]
   170bc:	9202      	str	r2, [sp, #8]
   170be:	9a08      	ldr	r2, [sp, #32]
   170c0:	9201      	str	r2, [sp, #4]
   170c2:	9300      	str	r3, [sp, #0]
   170c4:	462b      	mov	r3, r5
   170c6:	2218      	movs	r2, #24
   170c8:	47a0      	blx	r4
   170ca:	4603      	mov	r3, r0
   170cc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   170d0:	e030      	b.n	17134 <attsExecPrepWrite+0xe8>
                                pPrep->offset, pPrep->writeLen, p, pAttr);
  }
  /* else check if CCC */
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   170d2:	9b07      	ldr	r3, [sp, #28]
   170d4:	7b9b      	ldrb	r3, [r3, #14]
   170d6:	f003 0320 	and.w	r3, r3, #32
   170da:	2b00      	cmp	r3, #0
   170dc:	d010      	beq.n	17100 <attsExecPrepWrite+0xb4>
   170de:	4b18      	ldr	r3, [pc, #96]	; (17140 <attsExecPrepWrite+0xf4>)
   170e0:	695b      	ldr	r3, [r3, #20]
   170e2:	2b00      	cmp	r3, #0
   170e4:	d00c      	beq.n	17100 <attsExecPrepWrite+0xb4>
  {
    err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, pPrep->handle, p);
   170e6:	4b16      	ldr	r3, [pc, #88]	; (17140 <attsExecPrepWrite+0xf4>)
   170e8:	695c      	ldr	r4, [r3, #20]
   170ea:	9b05      	ldr	r3, [sp, #20]
   170ec:	7f18      	ldrb	r0, [r3, #28]
   170ee:	9b04      	ldr	r3, [sp, #16]
   170f0:	88da      	ldrh	r2, [r3, #6]
   170f2:	9b08      	ldr	r3, [sp, #32]
   170f4:	2109      	movs	r1, #9
   170f6:	47a0      	blx	r4
   170f8:	4603      	mov	r3, r0
   170fa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   170fe:	e019      	b.n	17134 <attsExecPrepWrite+0xe8>
  else
  {
    /* perform write; parameters have already been vetted by previous procedures */

    /* write attribute value */
    memcpy((pAttr->pValue + pPrep->offset), p, pPrep->writeLen);
   17100:	9b07      	ldr	r3, [sp, #28]
   17102:	685b      	ldr	r3, [r3, #4]
   17104:	9a04      	ldr	r2, [sp, #16]
   17106:	8912      	ldrh	r2, [r2, #8]
   17108:	1898      	adds	r0, r3, r2
   1710a:	9b04      	ldr	r3, [sp, #16]
   1710c:	889b      	ldrh	r3, [r3, #4]
   1710e:	461a      	mov	r2, r3
   17110:	9908      	ldr	r1, [sp, #32]
   17112:	f7f5 f825 	bl	c160 <memcpy>

    /* write the length if variable length attribute */
    if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   17116:	9b07      	ldr	r3, [sp, #28]
   17118:	7b9b      	ldrb	r3, [r3, #14]
   1711a:	f003 0308 	and.w	r3, r3, #8
   1711e:	2b00      	cmp	r3, #0
   17120:	d008      	beq.n	17134 <attsExecPrepWrite+0xe8>
    {
      *(pAttr->pLen) = pPrep->writeLen + pPrep->offset;
   17122:	9b07      	ldr	r3, [sp, #28]
   17124:	689b      	ldr	r3, [r3, #8]
   17126:	9a04      	ldr	r2, [sp, #16]
   17128:	8891      	ldrh	r1, [r2, #4]
   1712a:	9a04      	ldr	r2, [sp, #16]
   1712c:	8912      	ldrh	r2, [r2, #8]
   1712e:	440a      	add	r2, r1
   17130:	b292      	uxth	r2, r2
   17132:	801a      	strh	r2, [r3, #0]
    }
  }

  return err;
   17134:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   17138:	4618      	mov	r0, r3
   1713a:	b00b      	add	sp, #44	; 0x2c
   1713c:	bd30      	pop	{r4, r5, pc}
   1713e:	bf00      	nop
   17140:	10008bf0 	.word	0x10008bf0

00017144 <attsProcWrite>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcWrite(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17144:	b510      	push	{r4, lr}
   17146:	b08e      	sub	sp, #56	; 0x38
   17148:	9007      	str	r0, [sp, #28]
   1714a:	460b      	mov	r3, r1
   1714c:	9205      	str	r2, [sp, #20]
   1714e:	f8ad 301a 	strh.w	r3, [sp, #26]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     opcode;
  uint16_t    handle;
  uint16_t    writeLen;
  uint8_t     err = ATT_SUCCESS;
   17152:	2300      	movs	r3, #0
   17154:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

  /* parse opcode handle, calculate write length */
  pPacket += L2C_PAYLOAD_START;
   17158:	9b05      	ldr	r3, [sp, #20]
   1715a:	3308      	adds	r3, #8
   1715c:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(opcode, pPacket);
   1715e:	9b05      	ldr	r3, [sp, #20]
   17160:	1c5a      	adds	r2, r3, #1
   17162:	9205      	str	r2, [sp, #20]
   17164:	781b      	ldrb	r3, [r3, #0]
   17166:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  BSTREAM_TO_UINT16(handle, pPacket);
   1716a:	9b05      	ldr	r3, [sp, #20]
   1716c:	781b      	ldrb	r3, [r3, #0]
   1716e:	b29a      	uxth	r2, r3
   17170:	9b05      	ldr	r3, [sp, #20]
   17172:	3301      	adds	r3, #1
   17174:	781b      	ldrb	r3, [r3, #0]
   17176:	b29b      	uxth	r3, r3
   17178:	021b      	lsls	r3, r3, #8
   1717a:	b29b      	uxth	r3, r3
   1717c:	4413      	add	r3, r2
   1717e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   17182:	9b05      	ldr	r3, [sp, #20]
   17184:	3302      	adds	r3, #2
   17186:	9305      	str	r3, [sp, #20]
  writeLen = len - ATT_WRITE_REQ_LEN;
   17188:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1718c:	3b03      	subs	r3, #3
   1718e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   17192:	aa08      	add	r2, sp, #32
   17194:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   17198:	4611      	mov	r1, r2
   1719a:	4618      	mov	r0, r3
   1719c:	f7fe fcb6 	bl	15b0c <attsFindByHandle>
   171a0:	900b      	str	r0, [sp, #44]	; 0x2c
   171a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   171a4:	2b00      	cmp	r3, #0
   171a6:	f000 8099 	beq.w	172dc <attsProcWrite+0x198>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   171aa:	9b07      	ldr	r3, [sp, #28]
   171ac:	7f18      	ldrb	r0, [r3, #28]
   171ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   171b0:	7bdb      	ldrb	r3, [r3, #15]
   171b2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   171b6:	2110      	movs	r1, #16
   171b8:	f7fe fd18 	bl	15bec <attsPermissions>
   171bc:	4603      	mov	r3, r0
   171be:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   171c2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   171c6:	2b00      	cmp	r3, #0
   171c8:	f040 808b 	bne.w	172e2 <attsProcWrite+0x19e>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
    {
      /* err has been set; fail */
    }
    /* verify write length, fixed length */
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   171cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   171ce:	7b9b      	ldrb	r3, [r3, #14]
   171d0:	f003 0308 	and.w	r3, r3, #8
   171d4:	2b00      	cmp	r3, #0
   171d6:	d109      	bne.n	171ec <attsProcWrite+0xa8>
             (writeLen != pAttr->maxLen))
   171d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   171da:	899b      	ldrh	r3, [r3, #12]
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   171dc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   171e0:	429a      	cmp	r2, r3
   171e2:	d003      	beq.n	171ec <attsProcWrite+0xa8>
    {
      err = ATT_ERR_LENGTH;
   171e4:	230d      	movs	r3, #13
   171e6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   171ea:	e07a      	b.n	172e2 <attsProcWrite+0x19e>
    }
    /* verify write length, variable length */
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   171ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   171ee:	7b9b      	ldrb	r3, [r3, #14]
   171f0:	f003 0308 	and.w	r3, r3, #8
   171f4:	2b00      	cmp	r3, #0
   171f6:	d009      	beq.n	1720c <attsProcWrite+0xc8>
             (writeLen > pAttr->maxLen))
   171f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   171fa:	899b      	ldrh	r3, [r3, #12]
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   171fc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   17200:	429a      	cmp	r2, r3
   17202:	d903      	bls.n	1720c <attsProcWrite+0xc8>
    {
      err = ATT_ERR_LENGTH;
   17204:	230d      	movs	r3, #13
   17206:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1720a:	e06a      	b.n	172e2 <attsProcWrite+0x19e>
    }
    else
    {
      /* if write callback is desired */
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1720c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1720e:	7b9b      	ldrb	r3, [r3, #14]
   17210:	f003 0302 	and.w	r3, r3, #2
   17214:	2b00      	cmp	r3, #0
   17216:	d018      	beq.n	1724a <attsProcWrite+0x106>
          (pGroup->writeCback != NULL))
   17218:	9b08      	ldr	r3, [sp, #32]
   1721a:	68db      	ldr	r3, [r3, #12]
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1721c:	2b00      	cmp	r3, #0
   1721e:	d014      	beq.n	1724a <attsProcWrite+0x106>
      {
        err = (*pGroup->writeCback)(pCcb->connId, handle, opcode, 0, writeLen,
   17220:	9b08      	ldr	r3, [sp, #32]
   17222:	68dc      	ldr	r4, [r3, #12]
   17224:	9b07      	ldr	r3, [sp, #28]
   17226:	7f18      	ldrb	r0, [r3, #28]
   17228:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
   1722c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   17230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17232:	9302      	str	r3, [sp, #8]
   17234:	9b05      	ldr	r3, [sp, #20]
   17236:	9301      	str	r3, [sp, #4]
   17238:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1723c:	9300      	str	r3, [sp, #0]
   1723e:	2300      	movs	r3, #0
   17240:	47a0      	blx	r4
   17242:	4603      	mov	r3, r0
   17244:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   17248:	e029      	b.n	1729e <attsProcWrite+0x15a>
                                    pPacket, pAttr);
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1724a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1724c:	7b9b      	ldrb	r3, [r3, #14]
   1724e:	f003 0320 	and.w	r3, r3, #32
   17252:	2b00      	cmp	r3, #0
   17254:	d010      	beq.n	17278 <attsProcWrite+0x134>
   17256:	4b33      	ldr	r3, [pc, #204]	; (17324 <attsProcWrite+0x1e0>)
   17258:	695b      	ldr	r3, [r3, #20]
   1725a:	2b00      	cmp	r3, #0
   1725c:	d00c      	beq.n	17278 <attsProcWrite+0x134>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, handle, pPacket);
   1725e:	4b31      	ldr	r3, [pc, #196]	; (17324 <attsProcWrite+0x1e0>)
   17260:	695c      	ldr	r4, [r3, #20]
   17262:	9b07      	ldr	r3, [sp, #28]
   17264:	7f18      	ldrb	r0, [r3, #28]
   17266:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1726a:	9b05      	ldr	r3, [sp, #20]
   1726c:	2109      	movs	r1, #9
   1726e:	47a0      	blx	r4
   17270:	4603      	mov	r3, r0
   17272:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   17276:	e012      	b.n	1729e <attsProcWrite+0x15a>
      }
      else
      {
        /* write attribute value */
        memcpy(pAttr->pValue, pPacket, writeLen);
   17278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1727a:	685b      	ldr	r3, [r3, #4]
   1727c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   17280:	9905      	ldr	r1, [sp, #20]
   17282:	4618      	mov	r0, r3
   17284:	f7f4 ff6c 	bl	c160 <memcpy>

        /* write the length if variable length attribute */
        if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   17288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1728a:	7b9b      	ldrb	r3, [r3, #14]
   1728c:	f003 0308 	and.w	r3, r3, #8
   17290:	2b00      	cmp	r3, #0
   17292:	d004      	beq.n	1729e <attsProcWrite+0x15a>
        {
          *(pAttr->pLen) = writeLen;
   17294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17296:	689b      	ldr	r3, [r3, #8]
   17298:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1729c:	801a      	strh	r2, [r3, #0]
        }
      }

      /* if success and write req allocate response buffer */
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   1729e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   172a2:	2b00      	cmp	r3, #0
   172a4:	d11d      	bne.n	172e2 <attsProcWrite+0x19e>
   172a6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   172aa:	2b12      	cmp	r3, #18
   172ac:	d119      	bne.n	172e2 <attsProcWrite+0x19e>
      {
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_WRITE_RSP_LEN)) != NULL)
   172ae:	2009      	movs	r0, #9
   172b0:	f000 fb6c 	bl	1798c <attMsgAlloc>
   172b4:	900a      	str	r0, [sp, #40]	; 0x28
   172b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172b8:	2b00      	cmp	r3, #0
   172ba:	d012      	beq.n	172e2 <attsProcWrite+0x19e>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   172bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172be:	3308      	adds	r3, #8
   172c0:	9309      	str	r3, [sp, #36]	; 0x24
          UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_RSP);
   172c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   172c4:	1c5a      	adds	r2, r3, #1
   172c6:	9209      	str	r2, [sp, #36]	; 0x24
   172c8:	2213      	movs	r2, #19
   172ca:	701a      	strb	r2, [r3, #0]

          L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_WRITE_RSP_LEN, pBuf);
   172cc:	9b07      	ldr	r3, [sp, #28]
   172ce:	8b19      	ldrh	r1, [r3, #24]
   172d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172d2:	2201      	movs	r2, #1
   172d4:	2004      	movs	r0, #4
   172d6:	f004 fac5 	bl	1b864 <L2cDataReq>
   172da:	e002      	b.n	172e2 <attsProcWrite+0x19e>
    }
  }
  /* else attribute not found */
  else
  {
    err = ATT_ERR_HANDLE;
   172dc:	2301      	movs	r3, #1
   172de:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  }

  /* send error response for write req only */
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   172e2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   172e6:	2b00      	cmp	r3, #0
   172e8:	d018      	beq.n	1731c <attsProcWrite+0x1d8>
   172ea:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   172ee:	2b12      	cmp	r3, #18
   172f0:	d114      	bne.n	1731c <attsProcWrite+0x1d8>
  {
    if (err == ATT_RSP_PENDING)
   172f2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   172f6:	2b79      	cmp	r3, #121	; 0x79
   172f8:	d107      	bne.n	1730a <attsProcWrite+0x1c6>
    {
      /* set response pending */
      pCcb->control |= ATT_CCB_STATUS_RSP_PENDING;
   172fa:	9b07      	ldr	r3, [sp, #28]
   172fc:	7f5b      	ldrb	r3, [r3, #29]
   172fe:	f043 0308 	orr.w	r3, r3, #8
   17302:	b2da      	uxtb	r2, r3
   17304:	9b07      	ldr	r3, [sp, #28]
   17306:	775a      	strb	r2, [r3, #29]
    else
    {
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    }
  }
}
   17308:	e008      	b.n	1731c <attsProcWrite+0x1d8>
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   1730a:	9b07      	ldr	r3, [sp, #28]
   1730c:	8b18      	ldrh	r0, [r3, #24]
   1730e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   17312:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   17316:	2112      	movs	r1, #18
   17318:	f7fe f996 	bl	15648 <attsErrRsp>
}
   1731c:	bf00      	nop
   1731e:	b00e      	add	sp, #56	; 0x38
   17320:	bd10      	pop	{r4, pc}
   17322:	bf00      	nop
   17324:	10008bf0 	.word	0x10008bf0

00017328 <attsProcPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcPrepWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17328:	b510      	push	{r4, lr}
   1732a:	b090      	sub	sp, #64	; 0x40
   1732c:	9007      	str	r0, [sp, #28]
   1732e:	460b      	mov	r3, r1
   17330:	9205      	str	r2, [sp, #20]
   17332:	f8ad 301a 	strh.w	r3, [sp, #26]
  attsGroup_t     *pGroup;
  attsPrepWrite_t *pPrep;
  uint16_t        handle;
  uint16_t        offset;
  uint16_t        writeLen;
  uint8_t         err = ATT_SUCCESS;
   17336:	2300      	movs	r3, #0
   17338:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b

  /* parse handle and offset, calculate write length */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1733c:	9b05      	ldr	r3, [sp, #20]
   1733e:	3309      	adds	r3, #9
   17340:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT16(handle, pPacket);
   17342:	9b05      	ldr	r3, [sp, #20]
   17344:	781b      	ldrb	r3, [r3, #0]
   17346:	b29a      	uxth	r2, r3
   17348:	9b05      	ldr	r3, [sp, #20]
   1734a:	3301      	adds	r3, #1
   1734c:	781b      	ldrb	r3, [r3, #0]
   1734e:	b29b      	uxth	r3, r3
   17350:	021b      	lsls	r3, r3, #8
   17352:	b29b      	uxth	r3, r3
   17354:	4413      	add	r3, r2
   17356:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   1735a:	9b05      	ldr	r3, [sp, #20]
   1735c:	3302      	adds	r3, #2
   1735e:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT16(offset, pPacket);
   17360:	9b05      	ldr	r3, [sp, #20]
   17362:	781b      	ldrb	r3, [r3, #0]
   17364:	b29a      	uxth	r2, r3
   17366:	9b05      	ldr	r3, [sp, #20]
   17368:	3301      	adds	r3, #1
   1736a:	781b      	ldrb	r3, [r3, #0]
   1736c:	b29b      	uxth	r3, r3
   1736e:	021b      	lsls	r3, r3, #8
   17370:	b29b      	uxth	r3, r3
   17372:	4413      	add	r3, r2
   17374:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   17378:	9b05      	ldr	r3, [sp, #20]
   1737a:	3302      	adds	r3, #2
   1737c:	9305      	str	r3, [sp, #20]
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   1737e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   17382:	3b05      	subs	r3, #5
   17384:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   17388:	aa09      	add	r2, sp, #36	; 0x24
   1738a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1738e:	4611      	mov	r1, r2
   17390:	4618      	mov	r0, r3
   17392:	f7fe fbbb 	bl	15b0c <attsFindByHandle>
   17396:	900c      	str	r0, [sp, #48]	; 0x30
   17398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1739a:	2b00      	cmp	r3, #0
   1739c:	d103      	bne.n	173a6 <attsProcPrepWriteReq+0x7e>
  {
    /* attribute not found */
    err = ATT_ERR_HANDLE;
   1739e:	2301      	movs	r3, #1
   173a0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   173a4:	e069      	b.n	1747a <attsProcPrepWriteReq+0x152>
  }
  /* verify permissions */
  else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   173a6:	9b07      	ldr	r3, [sp, #28]
   173a8:	7f18      	ldrb	r0, [r3, #28]
   173aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   173ac:	7bdb      	ldrb	r3, [r3, #15]
   173ae:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   173b2:	2110      	movs	r1, #16
   173b4:	f7fe fc1a 	bl	15bec <attsPermissions>
   173b8:	4603      	mov	r3, r0
   173ba:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   173be:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   173c2:	2b00      	cmp	r3, #0
   173c4:	d159      	bne.n	1747a <attsProcPrepWriteReq+0x152>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
  {
    /* err has been set; fail */
  }
  /* verify offset is allowed */
  else if ((offset != 0) && ((pAttr->settings & ATTS_SET_ALLOW_OFFSET) == 0))
   173c6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   173ca:	2b00      	cmp	r3, #0
   173cc:	d009      	beq.n	173e2 <attsProcPrepWriteReq+0xba>
   173ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   173d0:	7b9b      	ldrb	r3, [r3, #14]
   173d2:	f003 0310 	and.w	r3, r3, #16
   173d6:	2b00      	cmp	r3, #0
   173d8:	d103      	bne.n	173e2 <attsProcPrepWriteReq+0xba>
  {
    err = ATT_ERR_NOT_LONG;
   173da:	230b      	movs	r3, #11
   173dc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   173e0:	e04b      	b.n	1747a <attsProcPrepWriteReq+0x152>
  }
  /* verify write length, fixed length */
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   173e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   173e4:	7b9b      	ldrb	r3, [r3, #14]
   173e6:	f003 0308 	and.w	r3, r3, #8
   173ea:	2b00      	cmp	r3, #0
   173ec:	d109      	bne.n	17402 <attsProcPrepWriteReq+0xda>
           (writeLen != pAttr->maxLen))
   173ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   173f0:	899b      	ldrh	r3, [r3, #12]
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   173f2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   173f6:	429a      	cmp	r2, r3
   173f8:	d003      	beq.n	17402 <attsProcPrepWriteReq+0xda>
  {
    err = ATT_ERR_LENGTH;
   173fa:	230d      	movs	r3, #13
   173fc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   17400:	e03b      	b.n	1747a <attsProcPrepWriteReq+0x152>
  }
  /* verify prepare write queue limit not reached */
  else if (WsfQueueCount(&pCcb->prepWriteQueue) >= pAttCfg->numPrepWrites)
   17402:	9b07      	ldr	r3, [sp, #28]
   17404:	4618      	mov	r0, r3
   17406:	f001 faef 	bl	189e8 <WsfQueueCount>
   1740a:	4603      	mov	r3, r0
   1740c:	461a      	mov	r2, r3
   1740e:	4b53      	ldr	r3, [pc, #332]	; (1755c <attsProcPrepWriteReq+0x234>)
   17410:	681b      	ldr	r3, [r3, #0]
   17412:	79db      	ldrb	r3, [r3, #7]
   17414:	b29b      	uxth	r3, r3
   17416:	429a      	cmp	r2, r3
   17418:	d303      	bcc.n	17422 <attsProcPrepWriteReq+0xfa>
  {
    err = ATT_ERR_QUEUE_FULL;
   1741a:	2309      	movs	r3, #9
   1741c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   17420:	e02b      	b.n	1747a <attsProcPrepWriteReq+0x152>
  }
  /* allocate new buffer to hold prepared write */
  else if ((pPrep = WsfBufAlloc(sizeof(attsPrepWrite_t) - 1 + writeLen)) == NULL)
   17422:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   17426:	330b      	adds	r3, #11
   17428:	b29b      	uxth	r3, r3
   1742a:	4618      	mov	r0, r3
   1742c:	f000 ff86 	bl	1833c <WsfBufAlloc>
   17430:	900f      	str	r0, [sp, #60]	; 0x3c
   17432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17434:	2b00      	cmp	r3, #0
   17436:	d103      	bne.n	17440 <attsProcPrepWriteReq+0x118>
  {
    err = ATT_ERR_RESOURCES;
   17438:	2311      	movs	r3, #17
   1743a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1743e:	e01c      	b.n	1747a <attsProcPrepWriteReq+0x152>
  }
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   17440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17442:	7b9b      	ldrb	r3, [r3, #14]
   17444:	f003 0302 	and.w	r3, r3, #2
   17448:	2b00      	cmp	r3, #0
   1744a:	d016      	beq.n	1747a <attsProcPrepWriteReq+0x152>
          (pGroup->writeCback != NULL))
   1744c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1744e:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   17450:	2b00      	cmp	r3, #0
   17452:	d012      	beq.n	1747a <attsProcPrepWriteReq+0x152>
  {
    err = (*pGroup->writeCback)(pCcb->connId, handle, ATT_PDU_PREP_WRITE_REQ, 0, writeLen,
   17454:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17456:	68dc      	ldr	r4, [r3, #12]
   17458:	9b07      	ldr	r3, [sp, #28]
   1745a:	7f18      	ldrb	r0, [r3, #28]
   1745c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   17460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17462:	9302      	str	r3, [sp, #8]
   17464:	9b05      	ldr	r3, [sp, #20]
   17466:	9301      	str	r3, [sp, #4]
   17468:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1746c:	9300      	str	r3, [sp, #0]
   1746e:	2300      	movs	r3, #0
   17470:	2216      	movs	r2, #22
   17472:	47a0      	blx	r4
   17474:	4603      	mov	r3, r0
   17476:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
                                pPacket, pAttr);
  }

  if (err == ATT_SUCCESS)
   1747a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1747e:	2b00      	cmp	r3, #0
   17480:	d15c      	bne.n	1753c <attsProcPrepWriteReq+0x214>
  {
    /* copy data to new buffer and queue it */
    pPrep->writeLen = writeLen;
   17482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17484:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   17488:	809a      	strh	r2, [r3, #4]
    pPrep->handle = handle;
   1748a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1748c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   17490:	80da      	strh	r2, [r3, #6]
    pPrep->offset = offset;
   17492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17494:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   17498:	811a      	strh	r2, [r3, #8]
    memcpy(pPrep->packet, pPacket, writeLen);
   1749a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1749c:	330a      	adds	r3, #10
   1749e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   174a2:	9905      	ldr	r1, [sp, #20]
   174a4:	4618      	mov	r0, r3
   174a6:	f7f4 fe5b 	bl	c160 <memcpy>
    WsfQueueEnq(&pCcb->prepWriteQueue, pPrep);
   174aa:	9b07      	ldr	r3, [sp, #28]
   174ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
   174ae:	4618      	mov	r0, r3
   174b0:	f001 f9f2 	bl	18898 <WsfQueueEnq>

    /* allocate response buffer */
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_PREP_WRITE_RSP_LEN + writeLen)) != NULL)
   174b4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   174b8:	330d      	adds	r3, #13
   174ba:	b29b      	uxth	r3, r3
   174bc:	4618      	mov	r0, r3
   174be:	f000 fa65 	bl	1798c <attMsgAlloc>
   174c2:	900b      	str	r0, [sp, #44]	; 0x2c
   174c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   174c6:	2b00      	cmp	r3, #0
   174c8:	d038      	beq.n	1753c <attsProcPrepWriteReq+0x214>
    {
      /* build and send PDU */
      p = pBuf + L2C_PAYLOAD_START;
   174ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   174cc:	3308      	adds	r3, #8
   174ce:	930a      	str	r3, [sp, #40]	; 0x28
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   174d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174d2:	1c5a      	adds	r2, r3, #1
   174d4:	920a      	str	r2, [sp, #40]	; 0x28
   174d6:	2217      	movs	r2, #23
   174d8:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, handle);
   174da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174dc:	1c5a      	adds	r2, r3, #1
   174de:	920a      	str	r2, [sp, #40]	; 0x28
   174e0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   174e4:	b2d2      	uxtb	r2, r2
   174e6:	701a      	strb	r2, [r3, #0]
   174e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174ea:	1c5a      	adds	r2, r3, #1
   174ec:	920a      	str	r2, [sp, #40]	; 0x28
   174ee:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   174f2:	0a12      	lsrs	r2, r2, #8
   174f4:	b292      	uxth	r2, r2
   174f6:	b2d2      	uxtb	r2, r2
   174f8:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, offset);
   174fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174fc:	1c5a      	adds	r2, r3, #1
   174fe:	920a      	str	r2, [sp, #40]	; 0x28
   17500:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   17504:	b2d2      	uxtb	r2, r2
   17506:	701a      	strb	r2, [r3, #0]
   17508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1750a:	1c5a      	adds	r2, r3, #1
   1750c:	920a      	str	r2, [sp, #40]	; 0x28
   1750e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   17512:	0a12      	lsrs	r2, r2, #8
   17514:	b292      	uxth	r2, r2
   17516:	b2d2      	uxtb	r2, r2
   17518:	701a      	strb	r2, [r3, #0]
      memcpy(p, pPacket, writeLen);
   1751a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1751e:	461a      	mov	r2, r3
   17520:	9905      	ldr	r1, [sp, #20]
   17522:	980a      	ldr	r0, [sp, #40]	; 0x28
   17524:	f7f4 fe1c 	bl	c160 <memcpy>

      L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_PREP_WRITE_RSP_LEN + writeLen), pBuf);
   17528:	9b07      	ldr	r3, [sp, #28]
   1752a:	8b19      	ldrh	r1, [r3, #24]
   1752c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   17530:	3305      	adds	r3, #5
   17532:	b29a      	uxth	r2, r3
   17534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17536:	2004      	movs	r0, #4
   17538:	f004 f994 	bl	1b864 <L2cDataReq>
    }
  }

  if (err)
   1753c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   17540:	2b00      	cmp	r3, #0
   17542:	d008      	beq.n	17556 <attsProcPrepWriteReq+0x22e>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_PREP_WRITE_REQ, handle, err);
   17544:	9b07      	ldr	r3, [sp, #28]
   17546:	8b18      	ldrh	r0, [r3, #24]
   17548:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1754c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   17550:	2116      	movs	r1, #22
   17552:	f7fe f879 	bl	15648 <attsErrRsp>
  }
}
   17556:	bf00      	nop
   17558:	b010      	add	sp, #64	; 0x40
   1755a:	bd10      	pop	{r4, pc}
   1755c:	10002b90 	.word	0x10002b90

00017560 <attsProcExecWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcExecWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17560:	b500      	push	{lr}
   17562:	b08b      	sub	sp, #44	; 0x2c
   17564:	9003      	str	r0, [sp, #12]
   17566:	460b      	mov	r3, r1
   17568:	9201      	str	r2, [sp, #4]
   1756a:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t         *pBuf;
  uint8_t         *p;
  attsPrepWrite_t *pPrep;
  attsAttr_t      *pAttr;
  attsGroup_t     *pGroup;
  uint8_t         err = ATT_SUCCESS;
   1756e:	2300      	movs	r3, #0
   17570:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   17574:	9b01      	ldr	r3, [sp, #4]
   17576:	3309      	adds	r3, #9
   17578:	9301      	str	r3, [sp, #4]

  /* if cancelling all prepared writes */
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   1757a:	9b01      	ldr	r3, [sp, #4]
   1757c:	781b      	ldrb	r3, [r3, #0]
   1757e:	2b00      	cmp	r3, #0
   17580:	d103      	bne.n	1758a <attsProcExecWriteReq+0x2a>
  {
    /* free all queued buffers */
    attsClearPrepWrites(pCcb);
   17582:	9803      	ldr	r0, [sp, #12]
   17584:	f7fe f8a7 	bl	156d6 <attsClearPrepWrites>
   17588:	e059      	b.n	1763e <attsProcExecWriteReq+0xde>
  }
  /* else writing all prepared writes */
  else if (*pPacket == ATT_EXEC_WRITE_ALL)
   1758a:	9b01      	ldr	r3, [sp, #4]
   1758c:	781b      	ldrb	r3, [r3, #0]
   1758e:	2b01      	cmp	r3, #1
   17590:	d152      	bne.n	17638 <attsProcExecWriteReq+0xd8>
  {
    /* iterate over prepare write queue and verify offset and length */
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   17592:	9b03      	ldr	r3, [sp, #12]
   17594:	681b      	ldr	r3, [r3, #0]
   17596:	9309      	str	r3, [sp, #36]	; 0x24
   17598:	e02c      	b.n	175f4 <attsProcExecWriteReq+0x94>
    {
      /* find attribute */
      if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) != NULL)
   1759a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1759c:	88db      	ldrh	r3, [r3, #6]
   1759e:	aa04      	add	r2, sp, #16
   175a0:	4611      	mov	r1, r2
   175a2:	4618      	mov	r0, r3
   175a4:	f7fe fab2 	bl	15b0c <attsFindByHandle>
   175a8:	9007      	str	r0, [sp, #28]
   175aa:	9b07      	ldr	r3, [sp, #28]
   175ac:	2b00      	cmp	r3, #0
   175ae:	d01e      	beq.n	175ee <attsProcExecWriteReq+0x8e>
      {
        /* verify offset */
        if (pPrep->offset > pAttr->maxLen)
   175b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   175b2:	891a      	ldrh	r2, [r3, #8]
   175b4:	9b07      	ldr	r3, [sp, #28]
   175b6:	899b      	ldrh	r3, [r3, #12]
   175b8:	429a      	cmp	r2, r3
   175ba:	d903      	bls.n	175c4 <attsProcExecWriteReq+0x64>
        {
          err = ATT_ERR_OFFSET;
   175bc:	2307      	movs	r3, #7
   175be:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   175c2:	e00c      	b.n	175de <attsProcExecWriteReq+0x7e>
        }
        /* verify write length with offset */
        else if ((pPrep->writeLen + pPrep->offset) > pAttr->maxLen)
   175c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   175c6:	889b      	ldrh	r3, [r3, #4]
   175c8:	461a      	mov	r2, r3
   175ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   175cc:	891b      	ldrh	r3, [r3, #8]
   175ce:	4413      	add	r3, r2
   175d0:	9a07      	ldr	r2, [sp, #28]
   175d2:	8992      	ldrh	r2, [r2, #12]
   175d4:	4293      	cmp	r3, r2
   175d6:	dd02      	ble.n	175de <attsProcExecWriteReq+0x7e>
        {
          err = ATT_ERR_LENGTH;
   175d8:	230d      	movs	r3, #13
   175da:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        }

        if (err)
   175de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   175e2:	2b00      	cmp	r3, #0
   175e4:	d003      	beq.n	175ee <attsProcExecWriteReq+0x8e>
        {
          /* verification failed; discard all prepared writes */
          attsClearPrepWrites(pCcb);
   175e6:	9803      	ldr	r0, [sp, #12]
   175e8:	f7fe f875 	bl	156d6 <attsClearPrepWrites>
          break;
   175ec:	e005      	b.n	175fa <attsProcExecWriteReq+0x9a>
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   175ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   175f0:	681b      	ldr	r3, [r3, #0]
   175f2:	9309      	str	r3, [sp, #36]	; 0x24
   175f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   175f6:	2b00      	cmp	r3, #0
   175f8:	d1cf      	bne.n	1759a <attsProcExecWriteReq+0x3a>
        }
      }
    }

    /* if length and offset checks ok then write all buffers in queue */
    if (err == ATT_SUCCESS)
   175fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   175fe:	2b00      	cmp	r3, #0
   17600:	d11d      	bne.n	1763e <attsProcExecWriteReq+0xde>
    {
      /* for each buffer */
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   17602:	e010      	b.n	17626 <attsProcExecWriteReq+0xc6>
      {
        /* write buffer */
        if ((err = attsExecPrepWrite(pCcb, pPrep)) != ATT_SUCCESS)
   17604:	9909      	ldr	r1, [sp, #36]	; 0x24
   17606:	9803      	ldr	r0, [sp, #12]
   17608:	f7ff fd20 	bl	1704c <attsExecPrepWrite>
   1760c:	4603      	mov	r3, r0
   1760e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   17612:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   17616:	2b00      	cmp	r3, #0
   17618:	d002      	beq.n	17620 <attsProcExecWriteReq+0xc0>
        {
          /* write failed; discard remaining prepared writes */
          attsClearPrepWrites(pCcb);
   1761a:	9803      	ldr	r0, [sp, #12]
   1761c:	f7fe f85b 	bl	156d6 <attsClearPrepWrites>
        }

        /* free buffer */
        WsfBufFree(pPrep);
   17620:	9809      	ldr	r0, [sp, #36]	; 0x24
   17622:	f000 fed1 	bl	183c8 <WsfBufFree>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   17626:	9b03      	ldr	r3, [sp, #12]
   17628:	4618      	mov	r0, r3
   1762a:	f001 f956 	bl	188da <WsfQueueDeq>
   1762e:	9009      	str	r0, [sp, #36]	; 0x24
   17630:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17632:	2b00      	cmp	r3, #0
   17634:	d1e6      	bne.n	17604 <attsProcExecWriteReq+0xa4>
   17636:	e002      	b.n	1763e <attsProcExecWriteReq+0xde>
    }
  }
  /* else unknown operation */
  else
  {
    err = ATT_ERR_INVALID_PDU;
   17638:	2304      	movs	r3, #4
   1763a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  }

  /* send response or error response */
  if (err)
   1763e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   17642:	2b00      	cmp	r3, #0
   17644:	d008      	beq.n	17658 <attsProcExecWriteReq+0xf8>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_EXEC_WRITE_REQ, 0, err);
   17646:	9b03      	ldr	r3, [sp, #12]
   17648:	8b18      	ldrh	r0, [r3, #24]
   1764a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1764e:	2200      	movs	r2, #0
   17650:	2118      	movs	r1, #24
   17652:	f7fd fff9 	bl	15648 <attsErrRsp>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);

      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
    }
  }
}
   17656:	e015      	b.n	17684 <attsProcExecWriteReq+0x124>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_EXEC_WRITE_RSP_LEN)) != NULL)
   17658:	2009      	movs	r0, #9
   1765a:	f000 f997 	bl	1798c <attMsgAlloc>
   1765e:	9006      	str	r0, [sp, #24]
   17660:	9b06      	ldr	r3, [sp, #24]
   17662:	2b00      	cmp	r3, #0
   17664:	d00e      	beq.n	17684 <attsProcExecWriteReq+0x124>
      p = pBuf + L2C_PAYLOAD_START;
   17666:	9b06      	ldr	r3, [sp, #24]
   17668:	3308      	adds	r3, #8
   1766a:	9305      	str	r3, [sp, #20]
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);
   1766c:	9b05      	ldr	r3, [sp, #20]
   1766e:	1c5a      	adds	r2, r3, #1
   17670:	9205      	str	r2, [sp, #20]
   17672:	2219      	movs	r2, #25
   17674:	701a      	strb	r2, [r3, #0]
      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
   17676:	9b03      	ldr	r3, [sp, #12]
   17678:	8b19      	ldrh	r1, [r3, #24]
   1767a:	9b06      	ldr	r3, [sp, #24]
   1767c:	2201      	movs	r2, #1
   1767e:	2004      	movs	r0, #4
   17680:	f004 f8f0 	bl	1b864 <L2cDataReq>
}
   17684:	bf00      	nop
   17686:	b00b      	add	sp, #44	; 0x2c
   17688:	f85d fb04 	ldr.w	pc, [sp], #4

0001768c <attL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1768c:	b500      	push	{lr}
   1768e:	b085      	sub	sp, #20
   17690:	4603      	mov	r3, r0
   17692:	9200      	str	r2, [sp, #0]
   17694:	f8ad 3006 	strh.w	r3, [sp, #6]
   17698:	460b      	mov	r3, r1
   1769a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t pduType;

  /* parse PDU type */
  pduType = *(pPacket + L2C_PAYLOAD_START);
   1769e:	9b00      	ldr	r3, [sp, #0]
   176a0:	7a1b      	ldrb	r3, [r3, #8]
   176a2:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if from server */
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   176a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   176aa:	f003 0301 	and.w	r3, r3, #1
   176ae:	2b00      	cmp	r3, #0
   176b0:	d009      	beq.n	176c6 <attL2cDataCback+0x3a>
  {
    /* call client data callback */
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   176b2:	4b0b      	ldr	r3, [pc, #44]	; (176e0 <attL2cDataCback+0x54>)
   176b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   176b6:	681b      	ldr	r3, [r3, #0]
   176b8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   176bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   176c0:	9a00      	ldr	r2, [sp, #0]
   176c2:	4798      	blx	r3
  else
  {
    /* call server data callback */
    (*attCb.pServer->dataCback)(handle, len, pPacket);
  }
}
   176c4:	e008      	b.n	176d8 <attL2cDataCback+0x4c>
    (*attCb.pServer->dataCback)(handle, len, pPacket);
   176c6:	4b06      	ldr	r3, [pc, #24]	; (176e0 <attL2cDataCback+0x54>)
   176c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   176ca:	681b      	ldr	r3, [r3, #0]
   176cc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   176d0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   176d4:	9a00      	ldr	r2, [sp, #0]
   176d6:	4798      	blx	r3
}
   176d8:	bf00      	nop
   176da:	b005      	add	sp, #20
   176dc:	f85d fb04 	ldr.w	pc, [sp], #4
   176e0:	10008c08 	.word	0x10008c08

000176e4 <attL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
   176e4:	b500      	push	{lr}
   176e6:	b085      	sub	sp, #20
   176e8:	9001      	str	r0, [sp, #4]
  attCcb_t      *pCcb;

  /* get connection control block */
  pCcb = attCcbByConnId((dmConnId_t) pMsg->param);
   176ea:	9b01      	ldr	r3, [sp, #4]
   176ec:	881b      	ldrh	r3, [r3, #0]
   176ee:	b2db      	uxtb	r3, r3
   176f0:	4618      	mov	r0, r3
   176f2:	f000 f8b5 	bl	17860 <attCcbByConnId>
   176f6:	9003      	str	r0, [sp, #12]

  /* verify connection is open */
  if (pCcb->connId != DM_CONN_ID_NONE)
   176f8:	9b03      	ldr	r3, [sp, #12]
   176fa:	7f1b      	ldrb	r3, [r3, #28]
   176fc:	2b00      	cmp	r3, #0
   176fe:	d022      	beq.n	17746 <attL2cCtrlCback+0x62>
  {
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   17700:	9b01      	ldr	r3, [sp, #4]
   17702:	789b      	ldrb	r3, [r3, #2]
   17704:	2b01      	cmp	r3, #1
   17706:	d107      	bne.n	17718 <attL2cCtrlCback+0x34>
    {
      /* flow disabled */
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   17708:	9b03      	ldr	r3, [sp, #12]
   1770a:	7f5b      	ldrb	r3, [r3, #29]
   1770c:	f043 0302 	orr.w	r3, r3, #2
   17710:	b2da      	uxtb	r2, r3
   17712:	9b03      	ldr	r3, [sp, #12]
   17714:	775a      	strb	r2, [r3, #29]
        /* call client control callback */
        (*attCb.pClient->ctrlCback)(pMsg);
      }
    }
  }
}
   17716:	e016      	b.n	17746 <attL2cCtrlCback+0x62>
      pCcb->control &= ~ATT_CCB_STATUS_FLOW_DISABLED;
   17718:	9b03      	ldr	r3, [sp, #12]
   1771a:	7f5b      	ldrb	r3, [r3, #29]
   1771c:	f023 0302 	bic.w	r3, r3, #2
   17720:	b2da      	uxtb	r2, r3
   17722:	9b03      	ldr	r3, [sp, #12]
   17724:	775a      	strb	r2, [r3, #29]
      (*attCb.pServer->ctrlCback)(pMsg);
   17726:	4b0a      	ldr	r3, [pc, #40]	; (17750 <attL2cCtrlCback+0x6c>)
   17728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1772a:	685b      	ldr	r3, [r3, #4]
   1772c:	9801      	ldr	r0, [sp, #4]
   1772e:	4798      	blx	r3
      if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   17730:	9b03      	ldr	r3, [sp, #12]
   17732:	7f5b      	ldrb	r3, [r3, #29]
   17734:	f003 0302 	and.w	r3, r3, #2
   17738:	2b00      	cmp	r3, #0
   1773a:	d104      	bne.n	17746 <attL2cCtrlCback+0x62>
        (*attCb.pClient->ctrlCback)(pMsg);
   1773c:	4b04      	ldr	r3, [pc, #16]	; (17750 <attL2cCtrlCback+0x6c>)
   1773e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   17740:	685b      	ldr	r3, [r3, #4]
   17742:	9801      	ldr	r0, [sp, #4]
   17744:	4798      	blx	r3
}
   17746:	bf00      	nop
   17748:	b005      	add	sp, #20
   1774a:	f85d fb04 	ldr.w	pc, [sp], #4
   1774e:	bf00      	nop
   17750:	10008c08 	.word	0x10008c08

00017754 <attDmConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attDmConnCback(dmEvt_t *pDmEvt)
{
   17754:	b500      	push	{lr}
   17756:	b085      	sub	sp, #20
   17758:	9001      	str	r0, [sp, #4]
  attCcb_t  *pCcb;

  pCcb = attCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   1775a:	9b01      	ldr	r3, [sp, #4]
   1775c:	881b      	ldrh	r3, [r3, #0]
   1775e:	b2db      	uxtb	r3, r3
   17760:	4618      	mov	r0, r3
   17762:	f000 f87d 	bl	17860 <attCcbByConnId>
   17766:	9003      	str	r0, [sp, #12]

  /* if new connection created */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   17768:	9b01      	ldr	r3, [sp, #4]
   1776a:	789b      	ldrb	r3, [r3, #2]
   1776c:	2b27      	cmp	r3, #39	; 0x27
   1776e:	d111      	bne.n	17794 <attDmConnCback+0x40>
  {
    /* initialize control block before handling event */
    pCcb->handle = pDmEvt->connOpen.handle;
   17770:	9b01      	ldr	r3, [sp, #4]
   17772:	88da      	ldrh	r2, [r3, #6]
   17774:	9b03      	ldr	r3, [sp, #12]
   17776:	831a      	strh	r2, [r3, #24]
    pCcb->mtu = ATT_DEFAULT_MTU;
   17778:	9b03      	ldr	r3, [sp, #12]
   1777a:	2217      	movs	r2, #23
   1777c:	835a      	strh	r2, [r3, #26]
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   1777e:	9b01      	ldr	r3, [sp, #4]
   17780:	881b      	ldrh	r3, [r3, #0]
   17782:	b2da      	uxtb	r2, r3
   17784:	9b03      	ldr	r3, [sp, #12]
   17786:	771a      	strb	r2, [r3, #28]
    pCcb->control = 0;
   17788:	9b03      	ldr	r3, [sp, #12]
   1778a:	2200      	movs	r2, #0
   1778c:	775a      	strb	r2, [r3, #29]
    pCcb->pPendDbHashRsp = NULL;
   1778e:	9b03      	ldr	r3, [sp, #12]
   17790:	2200      	movs	r2, #0
   17792:	621a      	str	r2, [r3, #32]
  }

  /* if connection has been opened */
  if (pCcb->connId != DM_CONN_ID_NONE)
   17794:	9b03      	ldr	r3, [sp, #12]
   17796:	7f1b      	ldrb	r3, [r3, #28]
   17798:	2b00      	cmp	r3, #0
   1779a:	d01b      	beq.n	177d4 <attDmConnCback+0x80>
  {
    /* pass event to server */
    (*attCb.pServer->connCback)(pCcb, pDmEvt);
   1779c:	4b13      	ldr	r3, [pc, #76]	; (177ec <attDmConnCback+0x98>)
   1779e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   177a0:	68db      	ldr	r3, [r3, #12]
   177a2:	9901      	ldr	r1, [sp, #4]
   177a4:	9803      	ldr	r0, [sp, #12]
   177a6:	4798      	blx	r3

    /* pass event to client */
    (*attCb.pClient->connCback)(pCcb, pDmEvt);
   177a8:	4b10      	ldr	r3, [pc, #64]	; (177ec <attDmConnCback+0x98>)
   177aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   177ac:	68db      	ldr	r3, [r3, #12]
   177ae:	9901      	ldr	r1, [sp, #4]
   177b0:	9803      	ldr	r0, [sp, #12]
   177b2:	4798      	blx	r3

    /* if connection closed */
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   177b4:	9b01      	ldr	r3, [sp, #4]
   177b6:	789b      	ldrb	r3, [r3, #2]
   177b8:	2b28      	cmp	r3, #40	; 0x28
   177ba:	d10b      	bne.n	177d4 <attDmConnCback+0x80>
    {
      /* clear control block after handling event */
      pCcb->connId = DM_CONN_ID_NONE;
   177bc:	9b03      	ldr	r3, [sp, #12]
   177be:	2200      	movs	r2, #0
   177c0:	771a      	strb	r2, [r3, #28]

      if (pCcb->pPendDbHashRsp)
   177c2:	9b03      	ldr	r3, [sp, #12]
   177c4:	6a1b      	ldr	r3, [r3, #32]
   177c6:	2b00      	cmp	r3, #0
   177c8:	d004      	beq.n	177d4 <attDmConnCback+0x80>
      {
        WsfBufFree(pCcb->pPendDbHashRsp);
   177ca:	9b03      	ldr	r3, [sp, #12]
   177cc:	6a1b      	ldr	r3, [r3, #32]
   177ce:	4618      	mov	r0, r3
   177d0:	f000 fdfa 	bl	183c8 <WsfBufFree>
      }
    }
  }

  /* execute ATT connection callback */
  if (attCb.connCback != NULL)
   177d4:	4b05      	ldr	r3, [pc, #20]	; (177ec <attDmConnCback+0x98>)
   177d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   177d8:	2b00      	cmp	r3, #0
   177da:	d003      	beq.n	177e4 <attDmConnCback+0x90>
  {
    (*attCb.connCback)(pDmEvt);
   177dc:	4b03      	ldr	r3, [pc, #12]	; (177ec <attDmConnCback+0x98>)
   177de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   177e0:	9801      	ldr	r0, [sp, #4]
   177e2:	4798      	blx	r3
  }
}
   177e4:	bf00      	nop
   177e6:	b005      	add	sp, #20
   177e8:	f85d fb04 	ldr.w	pc, [sp], #4
   177ec:	10008c08 	.word	0x10008c08

000177f0 <attEmptyHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyHandler(wsfMsgHdr_t *pMsg)
{
   177f0:	b082      	sub	sp, #8
   177f2:	9001      	str	r0, [sp, #4]
  return;
   177f4:	bf00      	nop
}
   177f6:	b002      	add	sp, #8
   177f8:	4770      	bx	lr

000177fa <attEmptyConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   177fa:	b082      	sub	sp, #8
   177fc:	9001      	str	r0, [sp, #4]
   177fe:	9100      	str	r1, [sp, #0]
  return;
   17800:	bf00      	nop
}
   17802:	b002      	add	sp, #8
   17804:	4770      	bx	lr

00017806 <attEmptyDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   17806:	b082      	sub	sp, #8
   17808:	4603      	mov	r3, r0
   1780a:	9200      	str	r2, [sp, #0]
   1780c:	f8ad 3006 	strh.w	r3, [sp, #6]
   17810:	460b      	mov	r3, r1
   17812:	f8ad 3004 	strh.w	r3, [sp, #4]
  return;
   17816:	bf00      	nop
}
   17818:	b002      	add	sp, #8
   1781a:	4770      	bx	lr

0001781c <attCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
attCcb_t *attCcbByHandle(uint16_t handle)
{
   1781c:	b500      	push	{lr}
   1781e:	b085      	sub	sp, #20
   17820:	4603      	mov	r3, r0
   17822:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   17826:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1782a:	4618      	mov	r0, r3
   1782c:	f7f9 ff3c 	bl	116a8 <DmConnIdByHandle>
   17830:	4603      	mov	r3, r0
   17832:	f88d 300f 	strb.w	r3, [sp, #15]
   17836:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1783a:	2b00      	cmp	r3, #0
   1783c:	d009      	beq.n	17852 <attCcbByHandle+0x36>
  {
    return &attCb.ccb[connId - 1];
   1783e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17842:	1e5a      	subs	r2, r3, #1
   17844:	4613      	mov	r3, r2
   17846:	00db      	lsls	r3, r3, #3
   17848:	4413      	add	r3, r2
   1784a:	009b      	lsls	r3, r3, #2
   1784c:	4a03      	ldr	r2, [pc, #12]	; (1785c <attCcbByHandle+0x40>)
   1784e:	4413      	add	r3, r2
   17850:	e000      	b.n	17854 <attCcbByHandle+0x38>
  }

  return NULL;
   17852:	2300      	movs	r3, #0
}
   17854:	4618      	mov	r0, r3
   17856:	b005      	add	sp, #20
   17858:	f85d fb04 	ldr.w	pc, [sp], #4
   1785c:	10008c08 	.word	0x10008c08

00017860 <attCcbByConnId>:
 *
 *  \return Pointer to connection control block.
 */
/*************************************************************************************************/
attCcb_t *attCcbByConnId(dmConnId_t connId)
{
   17860:	b082      	sub	sp, #8
   17862:	4603      	mov	r3, r0
   17864:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attCb.ccb[connId - 1];
   17868:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1786c:	1e5a      	subs	r2, r3, #1
   1786e:	4613      	mov	r3, r2
   17870:	00db      	lsls	r3, r3, #3
   17872:	4413      	add	r3, r2
   17874:	009b      	lsls	r3, r3, #2
   17876:	4a02      	ldr	r2, [pc, #8]	; (17880 <attCcbByConnId+0x20>)
   17878:	4413      	add	r3, r2
}
   1787a:	4618      	mov	r0, r3
   1787c:	b002      	add	sp, #8
   1787e:	4770      	bx	lr
   17880:	10008c08 	.word	0x10008c08

00017884 <attUuidCmp16to128>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attUuidCmp16to128(const uint8_t *pUuid16, const uint8_t *pUuid128)
{
   17884:	b500      	push	{lr}
   17886:	b083      	sub	sp, #12
   17888:	9001      	str	r0, [sp, #4]
   1788a:	9100      	str	r1, [sp, #0]
  attBaseUuid[ATT_BASE_UUID_POS_0] = pUuid16[0];
   1788c:	9b01      	ldr	r3, [sp, #4]
   1788e:	781a      	ldrb	r2, [r3, #0]
   17890:	4b0a      	ldr	r3, [pc, #40]	; (178bc <attUuidCmp16to128+0x38>)
   17892:	731a      	strb	r2, [r3, #12]
  attBaseUuid[ATT_BASE_UUID_POS_1] = pUuid16[1];
   17894:	9b01      	ldr	r3, [sp, #4]
   17896:	785a      	ldrb	r2, [r3, #1]
   17898:	4b08      	ldr	r3, [pc, #32]	; (178bc <attUuidCmp16to128+0x38>)
   1789a:	735a      	strb	r2, [r3, #13]

  return (memcmp(attBaseUuid, pUuid128, ATT_128_UUID_LEN) == 0);
   1789c:	2210      	movs	r2, #16
   1789e:	9900      	ldr	r1, [sp, #0]
   178a0:	4806      	ldr	r0, [pc, #24]	; (178bc <attUuidCmp16to128+0x38>)
   178a2:	f7f4 fc2d 	bl	c100 <memcmp>
   178a6:	4603      	mov	r3, r0
   178a8:	2b00      	cmp	r3, #0
   178aa:	bf0c      	ite	eq
   178ac:	2301      	moveq	r3, #1
   178ae:	2300      	movne	r3, #0
   178b0:	b2db      	uxtb	r3, r3
}
   178b2:	4618      	mov	r0, r3
   178b4:	b003      	add	sp, #12
   178b6:	f85d fb04 	ldr.w	pc, [sp], #4
   178ba:	bf00      	nop
   178bc:	10002b7c 	.word	0x10002b7c

000178c0 <attSetMtu>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attSetMtu(attCcb_t *pCcb, uint16_t peerMtu, uint16_t localMtu)
{
   178c0:	b500      	push	{lr}
   178c2:	b087      	sub	sp, #28
   178c4:	9003      	str	r0, [sp, #12]
   178c6:	460b      	mov	r3, r1
   178c8:	f8ad 300a 	strh.w	r3, [sp, #10]
   178cc:	4613      	mov	r3, r2
   178ce:	f8ad 3008 	strh.w	r3, [sp, #8]
  uint16_t  mtu;

  /* set negotiated mtu for the connection to the lesser of ours and theirs */
  mtu = WSF_MIN(peerMtu, localMtu);
   178d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   178d6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   178da:	4293      	cmp	r3, r2
   178dc:	bf28      	it	cs
   178de:	4613      	movcs	r3, r2
   178e0:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* if current mtu is not the same as the negotiated value */
  if (pCcb->mtu != mtu)
   178e4:	9b03      	ldr	r3, [sp, #12]
   178e6:	8b5b      	ldrh	r3, [r3, #26]
   178e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   178ec:	429a      	cmp	r2, r3
   178ee:	d00d      	beq.n	1790c <attSetMtu+0x4c>
  {
    /* set mtu to the new value */
    pCcb->mtu = mtu;
   178f0:	9b03      	ldr	r3, [sp, #12]
   178f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   178f6:	835a      	strh	r2, [r3, #26]

    /* notify app about the new value */
    attExecCallback(pCcb->connId, ATT_MTU_UPDATE_IND, 0, ATT_SUCCESS, mtu);
   178f8:	9b03      	ldr	r3, [sp, #12]
   178fa:	7f18      	ldrb	r0, [r3, #28]
   178fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   17900:	9300      	str	r3, [sp, #0]
   17902:	2300      	movs	r3, #0
   17904:	2200      	movs	r2, #0
   17906:	2112      	movs	r1, #18
   17908:	f000 f804 	bl	17914 <attExecCallback>
  }
}
   1790c:	bf00      	nop
   1790e:	b007      	add	sp, #28
   17910:	f85d fb04 	ldr.w	pc, [sp], #4

00017914 <attExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status, uint16_t mtu)
{
   17914:	b510      	push	{r4, lr}
   17916:	b086      	sub	sp, #24
   17918:	4604      	mov	r4, r0
   1791a:	4608      	mov	r0, r1
   1791c:	4611      	mov	r1, r2
   1791e:	461a      	mov	r2, r3
   17920:	4623      	mov	r3, r4
   17922:	f88d 3007 	strb.w	r3, [sp, #7]
   17926:	4603      	mov	r3, r0
   17928:	f88d 3006 	strb.w	r3, [sp, #6]
   1792c:	460b      	mov	r3, r1
   1792e:	f8ad 3004 	strh.w	r3, [sp, #4]
   17932:	4613      	mov	r3, r2
   17934:	f88d 3003 	strb.w	r3, [sp, #3]
  if (attCb.cback)
   17938:	4b13      	ldr	r3, [pc, #76]	; (17988 <attExecCallback+0x74>)
   1793a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1793c:	2b00      	cmp	r3, #0
   1793e:	d01f      	beq.n	17980 <attExecCallback+0x6c>
  {
    attEvt_t evt;

    evt.hdr.param = connId;
   17940:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17944:	b29b      	uxth	r3, r3
   17946:	f8ad 3008 	strh.w	r3, [sp, #8]
    evt.hdr.event = event;
   1794a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1794e:	f88d 300a 	strb.w	r3, [sp, #10]
    evt.hdr.status = status;
   17952:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17956:	f88d 300b 	strb.w	r3, [sp, #11]
    evt.valueLen = 0;
   1795a:	2300      	movs	r3, #0
   1795c:	f8ad 3010 	strh.w	r3, [sp, #16]
    evt.handle = handle;
   17960:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17964:	f8ad 3012 	strh.w	r3, [sp, #18]
    evt.continuing = 0;
   17968:	2300      	movs	r3, #0
   1796a:	f88d 3014 	strb.w	r3, [sp, #20]
    evt.mtu = mtu;
   1796e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17972:	f8ad 3016 	strh.w	r3, [sp, #22]

    (*attCb.cback)(&evt);
   17976:	4b04      	ldr	r3, [pc, #16]	; (17988 <attExecCallback+0x74>)
   17978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1797a:	aa02      	add	r2, sp, #8
   1797c:	4610      	mov	r0, r2
   1797e:	4798      	blx	r3
  }
}
   17980:	bf00      	nop
   17982:	b006      	add	sp, #24
   17984:	bd10      	pop	{r4, pc}
   17986:	bf00      	nop
   17988:	10008c08 	.word	0x10008c08

0001798c <attMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *attMsgAlloc(uint16_t len)
{
   1798c:	b500      	push	{lr}
   1798e:	b083      	sub	sp, #12
   17990:	4603      	mov	r3, r0
   17992:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   17996:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1799a:	2100      	movs	r1, #0
   1799c:	4618      	mov	r0, r3
   1799e:	f000 fd50 	bl	18442 <WsfMsgDataAlloc>
   179a2:	4603      	mov	r3, r0
}
   179a4:	4618      	mov	r0, r3
   179a6:	b003      	add	sp, #12
   179a8:	f85d fb04 	ldr.w	pc, [sp], #4

000179ac <AttHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandlerInit(wsfHandlerId_t handlerId)
{
   179ac:	b500      	push	{lr}
   179ae:	b083      	sub	sp, #12
   179b0:	4603      	mov	r3, r0
   179b2:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  attCb.handlerId = handlerId;
   179b6:	4a0c      	ldr	r2, [pc, #48]	; (179e8 <AttHandlerInit+0x3c>)
   179b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   179bc:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c

  /* initialize control block */
  attCb.pClient = &attFcnDefault;
   179c0:	4b09      	ldr	r3, [pc, #36]	; (179e8 <AttHandlerInit+0x3c>)
   179c2:	4a0a      	ldr	r2, [pc, #40]	; (179ec <AttHandlerInit+0x40>)
   179c4:	66da      	str	r2, [r3, #108]	; 0x6c
  attCb.pServer = &attFcnDefault;
   179c6:	4b08      	ldr	r3, [pc, #32]	; (179e8 <AttHandlerInit+0x3c>)
   179c8:	4a08      	ldr	r2, [pc, #32]	; (179ec <AttHandlerInit+0x40>)
   179ca:	671a      	str	r2, [r3, #112]	; 0x70

  /* Register with L2C */
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   179cc:	4a08      	ldr	r2, [pc, #32]	; (179f0 <AttHandlerInit+0x44>)
   179ce:	4909      	ldr	r1, [pc, #36]	; (179f4 <AttHandlerInit+0x48>)
   179d0:	2004      	movs	r0, #4
   179d2:	f003 ff2b 	bl	1b82c <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);
   179d6:	4908      	ldr	r1, [pc, #32]	; (179f8 <AttHandlerInit+0x4c>)
   179d8:	2000      	movs	r0, #0
   179da:	f7f9 fd71 	bl	114c0 <DmConnRegister>

}
   179de:	bf00      	nop
   179e0:	b003      	add	sp, #12
   179e2:	f85d fb04 	ldr.w	pc, [sp], #4
   179e6:	bf00      	nop
   179e8:	10008c08 	.word	0x10008c08
   179ec:	00029984 	.word	0x00029984
   179f0:	000176e5 	.word	0x000176e5
   179f4:	0001768d 	.word	0x0001768d
   179f8:	00017755 	.word	0x00017755

000179fc <AttHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   179fc:	b500      	push	{lr}
   179fe:	b083      	sub	sp, #12
   17a00:	4603      	mov	r3, r0
   17a02:	9100      	str	r1, [sp, #0]
   17a04:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
   17a08:	9b00      	ldr	r3, [sp, #0]
   17a0a:	2b00      	cmp	r3, #0
   17a0c:	d00e      	beq.n	17a2c <AttHandler+0x30>
  {
    if (pMsg->event >= ATTS_MSG_START)
   17a0e:	9b00      	ldr	r3, [sp, #0]
   17a10:	789b      	ldrb	r3, [r3, #2]
   17a12:	2b1f      	cmp	r3, #31
   17a14:	d905      	bls.n	17a22 <AttHandler+0x26>
    {
      /* pass event to server */
      (*attCb.pServer->msgCback)(pMsg);
   17a16:	4b07      	ldr	r3, [pc, #28]	; (17a34 <AttHandler+0x38>)
   17a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   17a1a:	689b      	ldr	r3, [r3, #8]
   17a1c:	9800      	ldr	r0, [sp, #0]
   17a1e:	4798      	blx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   17a20:	e004      	b.n	17a2c <AttHandler+0x30>
      (*attCb.pClient->msgCback)(pMsg);
   17a22:	4b04      	ldr	r3, [pc, #16]	; (17a34 <AttHandler+0x38>)
   17a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   17a26:	689b      	ldr	r3, [r3, #8]
   17a28:	9800      	ldr	r0, [sp, #0]
   17a2a:	4798      	blx	r3
}
   17a2c:	bf00      	nop
   17a2e:	b003      	add	sp, #12
   17a30:	f85d fb04 	ldr.w	pc, [sp], #4
   17a34:	10008c08 	.word	0x10008c08

00017a38 <AttRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttRegister(attCback_t cback)
{
   17a38:	b510      	push	{r4, lr}
   17a3a:	b084      	sub	sp, #16
   17a3c:	9003      	str	r0, [sp, #12]
  attCb.cback = cback;
   17a3e:	4a0c      	ldr	r2, [pc, #48]	; (17a70 <AttRegister+0x38>)
   17a40:	9b03      	ldr	r3, [sp, #12]
   17a42:	6753      	str	r3, [r2, #116]	; 0x74

  /* if configured MTU size is larger than maximum RX PDU length */
  if (pAttCfg->mtu > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   17a44:	4b0b      	ldr	r3, [pc, #44]	; (17a74 <AttRegister+0x3c>)
   17a46:	681b      	ldr	r3, [r3, #0]
   17a48:	889b      	ldrh	r3, [r3, #4]
   17a4a:	461c      	mov	r4, r3
   17a4c:	f006 fd54 	bl	1e4f8 <HciGetMaxRxAclLen>
   17a50:	4603      	mov	r3, r0
   17a52:	3b04      	subs	r3, #4
   17a54:	429c      	cmp	r4, r3
   17a56:	dd07      	ble.n	17a68 <AttRegister+0x30>
  {
    /* notify app about MTU misconfiguration */
    attExecCallback(0, DM_ERROR_IND, 0, DM_ERR_ATT_RX_PDU_LEN_EXCEEDED, 0);
   17a58:	2300      	movs	r3, #0
   17a5a:	9300      	str	r3, [sp, #0]
   17a5c:	2302      	movs	r3, #2
   17a5e:	2200      	movs	r2, #0
   17a60:	2164      	movs	r1, #100	; 0x64
   17a62:	2000      	movs	r0, #0
   17a64:	f7ff ff56 	bl	17914 <attExecCallback>
  }
}
   17a68:	bf00      	nop
   17a6a:	b004      	add	sp, #16
   17a6c:	bd10      	pop	{r4, pc}
   17a6e:	bf00      	nop
   17a70:	10008c08 	.word	0x10008c08
   17a74:	10002b90 	.word	0x10002b90

00017a78 <AttConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttConnRegister(dmCback_t cback)
{
   17a78:	b082      	sub	sp, #8
   17a7a:	9001      	str	r0, [sp, #4]
  attCb.connCback = cback;
   17a7c:	4a02      	ldr	r2, [pc, #8]	; (17a88 <AttConnRegister+0x10>)
   17a7e:	9b01      	ldr	r3, [sp, #4]
   17a80:	6793      	str	r3, [r2, #120]	; 0x78
}
   17a82:	bf00      	nop
   17a84:	b002      	add	sp, #8
   17a86:	4770      	bx	lr
   17a88:	10008c08 	.word	0x10008c08

00017a8c <AttMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttMsgFree(void *pMsg, uint8_t opcode)
{
   17a8c:	b500      	push	{lr}
   17a8e:	b085      	sub	sp, #20
   17a90:	9001      	str	r0, [sp, #4]
   17a92:	460b      	mov	r3, r1
   17a94:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t  hdrLen;

  WSF_ASSERT((opcode == ATT_PDU_VALUE_IND) || (opcode == ATT_PDU_VALUE_NTF));

  switch (opcode)
   17a98:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17a9c:	2b1b      	cmp	r3, #27
   17a9e:	d001      	beq.n	17aa4 <AttMsgFree+0x18>
   17aa0:	2b1d      	cmp	r3, #29
   17aa2:	d103      	bne.n	17aac <AttMsgFree+0x20>
  {
    case ATT_PDU_VALUE_IND:
    case ATT_PDU_VALUE_NTF:
      hdrLen = ATT_VALUE_IND_NTF_BUF_LEN;
   17aa4:	230b      	movs	r3, #11
   17aa6:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   17aaa:	e003      	b.n	17ab4 <AttMsgFree+0x28>

    default:
      hdrLen = 0;
   17aac:	2300      	movs	r3, #0
   17aae:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   17ab2:	bf00      	nop
  }

  WsfMsgFree(((uint8_t *)pMsg) - hdrLen);
   17ab4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17ab8:	425b      	negs	r3, r3
   17aba:	9a01      	ldr	r2, [sp, #4]
   17abc:	4413      	add	r3, r2
   17abe:	4618      	mov	r0, r3
   17ac0:	f000 fcef 	bl	184a2 <WsfMsgFree>
}
   17ac4:	bf00      	nop
   17ac6:	b005      	add	sp, #20
   17ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00017acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
   17acc:	b082      	sub	sp, #8
   17ace:	4603      	mov	r3, r0
   17ad0:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   17ad4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   17ad8:	2b00      	cmp	r3, #0
   17ada:	db0c      	blt.n	17af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17adc:	4907      	ldr	r1, [pc, #28]	; (17afc <__NVIC_EnableIRQ+0x30>)
   17ade:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   17ae2:	095b      	lsrs	r3, r3, #5
   17ae4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17ae8:	f002 021f 	and.w	r2, r2, #31
   17aec:	2001      	movs	r0, #1
   17aee:	fa00 f202 	lsl.w	r2, r0, r2
   17af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
   17af6:	bf00      	nop
   17af8:	b002      	add	sp, #8
   17afa:	4770      	bx	lr
   17afc:	e000e100 	.word	0xe000e100

00017b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   17b00:	b082      	sub	sp, #8
   17b02:	4603      	mov	r3, r0
   17b04:	9100      	str	r1, [sp, #0]
   17b06:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   17b0a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   17b0e:	2b00      	cmp	r3, #0
   17b10:	db0a      	blt.n	17b28 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17b12:	490d      	ldr	r1, [pc, #52]	; (17b48 <__NVIC_SetPriority+0x48>)
   17b14:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   17b18:	9a00      	ldr	r2, [sp, #0]
   17b1a:	b2d2      	uxtb	r2, r2
   17b1c:	0152      	lsls	r2, r2, #5
   17b1e:	b2d2      	uxtb	r2, r2
   17b20:	440b      	add	r3, r1
   17b22:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   17b26:	e00b      	b.n	17b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17b28:	4908      	ldr	r1, [pc, #32]	; (17b4c <__NVIC_SetPriority+0x4c>)
   17b2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17b2e:	f003 030f 	and.w	r3, r3, #15
   17b32:	3b04      	subs	r3, #4
   17b34:	9a00      	ldr	r2, [sp, #0]
   17b36:	b2d2      	uxtb	r2, r2
   17b38:	0152      	lsls	r2, r2, #5
   17b3a:	b2d2      	uxtb	r2, r2
   17b3c:	440b      	add	r3, r1
   17b3e:	761a      	strb	r2, [r3, #24]
}
   17b40:	bf00      	nop
   17b42:	b002      	add	sp, #8
   17b44:	4770      	bx	lr
   17b46:	bf00      	nop
   17b48:	e000e100 	.word	0xe000e100
   17b4c:	e000ed00 	.word	0xe000ed00

00017b50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   17b50:	b084      	sub	sp, #16
   17b52:	9003      	str	r0, [sp, #12]
   17b54:	9102      	str	r1, [sp, #8]
   17b56:	9201      	str	r2, [sp, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   17b58:	9b03      	ldr	r3, [sp, #12]
   17b5a:	3b04      	subs	r3, #4
   17b5c:	9303      	str	r3, [sp, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   17b5e:	9b03      	ldr	r3, [sp, #12]
   17b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   17b66:	9b03      	ldr	r3, [sp, #12]
   17b68:	3b04      	subs	r3, #4
   17b6a:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   17b6c:	9b02      	ldr	r3, [sp, #8]
   17b6e:	f023 0201 	bic.w	r2, r3, #1
   17b72:	9b03      	ldr	r3, [sp, #12]
   17b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   17b76:	9b03      	ldr	r3, [sp, #12]
   17b78:	3b04      	subs	r3, #4
   17b7a:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   17b7c:	4a0b      	ldr	r2, [pc, #44]	; (17bac <pxPortInitialiseStack+0x5c>)
   17b7e:	9b03      	ldr	r3, [sp, #12]
   17b80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   17b82:	9b03      	ldr	r3, [sp, #12]
   17b84:	3b14      	subs	r3, #20
   17b86:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   17b88:	9a01      	ldr	r2, [sp, #4]
   17b8a:	9b03      	ldr	r3, [sp, #12]
   17b8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   17b8e:	9b03      	ldr	r3, [sp, #12]
   17b90:	3b04      	subs	r3, #4
   17b92:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   17b94:	9b03      	ldr	r3, [sp, #12]
   17b96:	f06f 0202 	mvn.w	r2, #2
   17b9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   17b9c:	9b03      	ldr	r3, [sp, #12]
   17b9e:	3b20      	subs	r3, #32
   17ba0:	9303      	str	r3, [sp, #12]

	return pxTopOfStack;
   17ba2:	9b03      	ldr	r3, [sp, #12]
}
   17ba4:	4618      	mov	r0, r3
   17ba6:	b004      	add	sp, #16
   17ba8:	4770      	bx	lr
   17baa:	bf00      	nop
   17bac:	00017bb1 	.word	0x00017bb1

00017bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   17bb0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
   17bb2:	2300      	movs	r3, #0
   17bb4:	9300      	str	r3, [sp, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   17bb6:	4b0b      	ldr	r3, [pc, #44]	; (17be4 <prvTaskExitError+0x34>)
   17bb8:	681b      	ldr	r3, [r3, #0]
   17bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17bbe:	d000      	beq.n	17bc2 <prvTaskExitError+0x12>
   17bc0:	e7fe      	b.n	17bc0 <prvTaskExitError+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   17bc2:	f04f 0380 	mov.w	r3, #128	; 0x80
   17bc6:	f383 8811 	msr	BASEPRI, r3
   17bca:	f3bf 8f6f 	isb	sy
   17bce:	f3bf 8f4f 	dsb	sy
   17bd2:	9301      	str	r3, [sp, #4]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   17bd4:	bf00      	nop
   17bd6:	9b00      	ldr	r3, [sp, #0]
   17bd8:	2b00      	cmp	r3, #0
   17bda:	d0fc      	beq.n	17bd6 <prvTaskExitError+0x26>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   17bdc:	bf00      	nop
   17bde:	b002      	add	sp, #8
   17be0:	4770      	bx	lr
   17be2:	bf00      	nop
   17be4:	10002b8c 	.word	0x10002b8c
	...

00017bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   17bf0:	4b07      	ldr	r3, [pc, #28]	; (17c10 <pxCurrentTCBConst2>)
   17bf2:	6819      	ldr	r1, [r3, #0]
   17bf4:	6808      	ldr	r0, [r1, #0]
   17bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bfa:	f380 8809 	msr	PSP, r0
   17bfe:	f3bf 8f6f 	isb	sy
   17c02:	f04f 0000 	mov.w	r0, #0
   17c06:	f380 8811 	msr	BASEPRI, r0
   17c0a:	4770      	bx	lr
   17c0c:	f3af 8000 	nop.w

00017c10 <pxCurrentTCBConst2>:
   17c10:	1000865c 	.word	0x1000865c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   17c14:	bf00      	nop
   17c16:	bf00      	nop

00017c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   17c18:	4808      	ldr	r0, [pc, #32]	; (17c3c <prvPortStartFirstTask+0x24>)
   17c1a:	6800      	ldr	r0, [r0, #0]
   17c1c:	6800      	ldr	r0, [r0, #0]
   17c1e:	f380 8808 	msr	MSP, r0
   17c22:	f04f 0000 	mov.w	r0, #0
   17c26:	f380 8814 	msr	CONTROL, r0
   17c2a:	b662      	cpsie	i
   17c2c:	b661      	cpsie	f
   17c2e:	f3bf 8f4f 	dsb	sy
   17c32:	f3bf 8f6f 	isb	sy
   17c36:	df00      	svc	0
   17c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   17c3a:	bf00      	nop
   17c3c:	e000ed08 	.word	0xe000ed08

00017c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   17c40:	b500      	push	{lr}
   17c42:	b085      	sub	sp, #20
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   17c44:	4b39      	ldr	r3, [pc, #228]	; (17d2c <xPortStartScheduler+0xec>)
   17c46:	681b      	ldr	r3, [r3, #0]
   17c48:	4a39      	ldr	r2, [pc, #228]	; (17d30 <xPortStartScheduler+0xf0>)
   17c4a:	4293      	cmp	r3, r2
   17c4c:	d100      	bne.n	17c50 <xPortStartScheduler+0x10>
   17c4e:	e7fe      	b.n	17c4e <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   17c50:	4b36      	ldr	r3, [pc, #216]	; (17d2c <xPortStartScheduler+0xec>)
   17c52:	681b      	ldr	r3, [r3, #0]
   17c54:	4a37      	ldr	r2, [pc, #220]	; (17d34 <xPortStartScheduler+0xf4>)
   17c56:	4293      	cmp	r3, r2
   17c58:	d100      	bne.n	17c5c <xPortStartScheduler+0x1c>
   17c5a:	e7fe      	b.n	17c5a <xPortStartScheduler+0x1a>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   17c5c:	4b36      	ldr	r3, [pc, #216]	; (17d38 <xPortStartScheduler+0xf8>)
   17c5e:	9303      	str	r3, [sp, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   17c60:	9b03      	ldr	r3, [sp, #12]
   17c62:	781b      	ldrb	r3, [r3, #0]
   17c64:	b2db      	uxtb	r3, r3
   17c66:	9302      	str	r3, [sp, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   17c68:	9b03      	ldr	r3, [sp, #12]
   17c6a:	22ff      	movs	r2, #255	; 0xff
   17c6c:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   17c6e:	9b03      	ldr	r3, [sp, #12]
   17c70:	781b      	ldrb	r3, [r3, #0]
   17c72:	b2db      	uxtb	r3, r3
   17c74:	f88d 3007 	strb.w	r3, [sp, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   17c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17c7c:	b2db      	uxtb	r3, r3
   17c7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   17c82:	b2da      	uxtb	r2, r3
   17c84:	4b2d      	ldr	r3, [pc, #180]	; (17d3c <xPortStartScheduler+0xfc>)
   17c86:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   17c88:	4b2d      	ldr	r3, [pc, #180]	; (17d40 <xPortStartScheduler+0x100>)
   17c8a:	2207      	movs	r2, #7
   17c8c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   17c8e:	e00b      	b.n	17ca8 <xPortStartScheduler+0x68>
		{
			ulMaxPRIGROUPValue--;
   17c90:	4b2b      	ldr	r3, [pc, #172]	; (17d40 <xPortStartScheduler+0x100>)
   17c92:	681b      	ldr	r3, [r3, #0]
   17c94:	3b01      	subs	r3, #1
   17c96:	4a2a      	ldr	r2, [pc, #168]	; (17d40 <xPortStartScheduler+0x100>)
   17c98:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   17c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17c9e:	b2db      	uxtb	r3, r3
   17ca0:	005b      	lsls	r3, r3, #1
   17ca2:	b2db      	uxtb	r3, r3
   17ca4:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   17ca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17cac:	b2db      	uxtb	r3, r3
   17cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
   17cb2:	2b80      	cmp	r3, #128	; 0x80
   17cb4:	d0ec      	beq.n	17c90 <xPortStartScheduler+0x50>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   17cb6:	4b22      	ldr	r3, [pc, #136]	; (17d40 <xPortStartScheduler+0x100>)
   17cb8:	681b      	ldr	r3, [r3, #0]
   17cba:	f1c3 0307 	rsb	r3, r3, #7
   17cbe:	2b03      	cmp	r3, #3
   17cc0:	d000      	beq.n	17cc4 <xPortStartScheduler+0x84>
   17cc2:	e7fe      	b.n	17cc2 <xPortStartScheduler+0x82>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   17cc4:	4b1e      	ldr	r3, [pc, #120]	; (17d40 <xPortStartScheduler+0x100>)
   17cc6:	681b      	ldr	r3, [r3, #0]
   17cc8:	021b      	lsls	r3, r3, #8
   17cca:	4a1d      	ldr	r2, [pc, #116]	; (17d40 <xPortStartScheduler+0x100>)
   17ccc:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   17cce:	4b1c      	ldr	r3, [pc, #112]	; (17d40 <xPortStartScheduler+0x100>)
   17cd0:	681b      	ldr	r3, [r3, #0]
   17cd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   17cd6:	4a1a      	ldr	r2, [pc, #104]	; (17d40 <xPortStartScheduler+0x100>)
   17cd8:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   17cda:	9b02      	ldr	r3, [sp, #8]
   17cdc:	b2da      	uxtb	r2, r3
   17cde:	9b03      	ldr	r3, [sp, #12]
   17ce0:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   17ce2:	4a18      	ldr	r2, [pc, #96]	; (17d44 <xPortStartScheduler+0x104>)
   17ce4:	4b17      	ldr	r3, [pc, #92]	; (17d44 <xPortStartScheduler+0x104>)
   17ce6:	681b      	ldr	r3, [r3, #0]
   17ce8:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   17cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   17cee:	4a15      	ldr	r2, [pc, #84]	; (17d44 <xPortStartScheduler+0x104>)
   17cf0:	4b14      	ldr	r3, [pc, #80]	; (17d44 <xPortStartScheduler+0x104>)
   17cf2:	681b      	ldr	r3, [r3, #0]
   17cf4:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   17cf8:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   17cfa:	f000 fa0b 	bl	18114 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   17cfe:	4b12      	ldr	r3, [pc, #72]	; (17d48 <xPortStartScheduler+0x108>)
   17d00:	2200      	movs	r2, #0
   17d02:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   17d04:	f000 f8b8 	bl	17e78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   17d08:	4a10      	ldr	r2, [pc, #64]	; (17d4c <xPortStartScheduler+0x10c>)
   17d0a:	4b10      	ldr	r3, [pc, #64]	; (17d4c <xPortStartScheduler+0x10c>)
   17d0c:	681b      	ldr	r3, [r3, #0]
   17d0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   17d12:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   17d14:	f7ff ff80 	bl	17c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   17d18:	f00a feb6 	bl	22a88 <vTaskSwitchContext>
	prvTaskExitError();
   17d1c:	f7ff ff48 	bl	17bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
   17d20:	2300      	movs	r3, #0
}
   17d22:	4618      	mov	r0, r3
   17d24:	b005      	add	sp, #20
   17d26:	f85d fb04 	ldr.w	pc, [sp], #4
   17d2a:	bf00      	nop
   17d2c:	e000ed00 	.word	0xe000ed00
   17d30:	410fc271 	.word	0x410fc271
   17d34:	410fc270 	.word	0x410fc270
   17d38:	e000e400 	.word	0xe000e400
   17d3c:	100036c4 	.word	0x100036c4
   17d40:	100036c8 	.word	0x100036c8
   17d44:	e000ed20 	.word	0xe000ed20
   17d48:	10002b8c 	.word	0x10002b8c
   17d4c:	e000ef34 	.word	0xe000ef34

00017d50 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   17d50:	b082      	sub	sp, #8
   17d52:	f04f 0380 	mov.w	r3, #128	; 0x80
   17d56:	f383 8811 	msr	BASEPRI, r3
   17d5a:	f3bf 8f6f 	isb	sy
   17d5e:	f3bf 8f4f 	dsb	sy
   17d62:	9301      	str	r3, [sp, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   17d64:	4b08      	ldr	r3, [pc, #32]	; (17d88 <vPortEnterCritical+0x38>)
   17d66:	681b      	ldr	r3, [r3, #0]
   17d68:	3301      	adds	r3, #1
   17d6a:	4a07      	ldr	r2, [pc, #28]	; (17d88 <vPortEnterCritical+0x38>)
   17d6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   17d6e:	4b06      	ldr	r3, [pc, #24]	; (17d88 <vPortEnterCritical+0x38>)
   17d70:	681b      	ldr	r3, [r3, #0]
   17d72:	2b01      	cmp	r3, #1
   17d74:	d105      	bne.n	17d82 <vPortEnterCritical+0x32>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   17d76:	4b05      	ldr	r3, [pc, #20]	; (17d8c <vPortEnterCritical+0x3c>)
   17d78:	681b      	ldr	r3, [r3, #0]
   17d7a:	b2db      	uxtb	r3, r3
   17d7c:	2b00      	cmp	r3, #0
   17d7e:	d000      	beq.n	17d82 <vPortEnterCritical+0x32>
   17d80:	e7fe      	b.n	17d80 <vPortEnterCritical+0x30>
	}
}
   17d82:	bf00      	nop
   17d84:	b002      	add	sp, #8
   17d86:	4770      	bx	lr
   17d88:	10002b8c 	.word	0x10002b8c
   17d8c:	e000ed04 	.word	0xe000ed04

00017d90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   17d90:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting );
   17d92:	4b0b      	ldr	r3, [pc, #44]	; (17dc0 <vPortExitCritical+0x30>)
   17d94:	681b      	ldr	r3, [r3, #0]
   17d96:	2b00      	cmp	r3, #0
   17d98:	d100      	bne.n	17d9c <vPortExitCritical+0xc>
   17d9a:	e7fe      	b.n	17d9a <vPortExitCritical+0xa>
	uxCriticalNesting--;
   17d9c:	4b08      	ldr	r3, [pc, #32]	; (17dc0 <vPortExitCritical+0x30>)
   17d9e:	681b      	ldr	r3, [r3, #0]
   17da0:	3b01      	subs	r3, #1
   17da2:	4a07      	ldr	r2, [pc, #28]	; (17dc0 <vPortExitCritical+0x30>)
   17da4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   17da6:	4b06      	ldr	r3, [pc, #24]	; (17dc0 <vPortExitCritical+0x30>)
   17da8:	681b      	ldr	r3, [r3, #0]
   17daa:	2b00      	cmp	r3, #0
   17dac:	d104      	bne.n	17db8 <vPortExitCritical+0x28>
   17dae:	2300      	movs	r3, #0
   17db0:	9301      	str	r3, [sp, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   17db2:	9b01      	ldr	r3, [sp, #4]
   17db4:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   17db8:	bf00      	nop
   17dba:	b002      	add	sp, #8
   17dbc:	4770      	bx	lr
   17dbe:	bf00      	nop
   17dc0:	10002b8c 	.word	0x10002b8c
	...

00017dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   17dd0:	f3ef 8009 	mrs	r0, PSP
   17dd4:	f3bf 8f6f 	isb	sy
   17dd8:	4b15      	ldr	r3, [pc, #84]	; (17e30 <pxCurrentTCBConst>)
   17dda:	681a      	ldr	r2, [r3, #0]
   17ddc:	f01e 0f10 	tst.w	lr, #16
   17de0:	bf08      	it	eq
   17de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   17de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dea:	6010      	str	r0, [r2, #0]
   17dec:	e92d 0009 	stmdb	sp!, {r0, r3}
   17df0:	f04f 0080 	mov.w	r0, #128	; 0x80
   17df4:	f380 8811 	msr	BASEPRI, r0
   17df8:	f3bf 8f4f 	dsb	sy
   17dfc:	f3bf 8f6f 	isb	sy
   17e00:	f00a fe42 	bl	22a88 <vTaskSwitchContext>
   17e04:	f04f 0000 	mov.w	r0, #0
   17e08:	f380 8811 	msr	BASEPRI, r0
   17e0c:	bc09      	pop	{r0, r3}
   17e0e:	6819      	ldr	r1, [r3, #0]
   17e10:	6808      	ldr	r0, [r1, #0]
   17e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e16:	f01e 0f10 	tst.w	lr, #16
   17e1a:	bf08      	it	eq
   17e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   17e20:	f380 8809 	msr	PSP, r0
   17e24:	f3bf 8f6f 	isb	sy
   17e28:	4770      	bx	lr
   17e2a:	bf00      	nop
   17e2c:	f3af 8000 	nop.w

00017e30 <pxCurrentTCBConst>:
   17e30:	1000865c 	.word	0x1000865c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   17e34:	bf00      	nop
   17e36:	bf00      	nop

00017e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   17e38:	b500      	push	{lr}
   17e3a:	b083      	sub	sp, #12
	__asm volatile
   17e3c:	f04f 0380 	mov.w	r3, #128	; 0x80
   17e40:	f383 8811 	msr	BASEPRI, r3
   17e44:	f3bf 8f6f 	isb	sy
   17e48:	f3bf 8f4f 	dsb	sy
   17e4c:	9301      	str	r3, [sp, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   17e4e:	f00a fd7d 	bl	2294c <xTaskIncrementTick>
   17e52:	4603      	mov	r3, r0
   17e54:	2b00      	cmp	r3, #0
   17e56:	d003      	beq.n	17e60 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   17e58:	4b06      	ldr	r3, [pc, #24]	; (17e74 <SysTick_Handler+0x3c>)
   17e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17e5e:	601a      	str	r2, [r3, #0]
   17e60:	2300      	movs	r3, #0
   17e62:	9300      	str	r3, [sp, #0]
	__asm volatile
   17e64:	9b00      	ldr	r3, [sp, #0]
   17e66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   17e6a:	bf00      	nop
   17e6c:	b003      	add	sp, #12
   17e6e:	f85d fb04 	ldr.w	pc, [sp], #4
   17e72:	bf00      	nop
   17e74:	e000ed04 	.word	0xe000ed04

00017e78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   17e78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 17e88 <vPortEnableVFP+0x10>
   17e7c:	6801      	ldr	r1, [r0, #0]
   17e7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17e82:	6001      	str	r1, [r0, #0]
   17e84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   17e86:	bf00      	nop
   17e88:	e000ed88 	.word	0xe000ed88

00017e8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   17e8c:	b082      	sub	sp, #8
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   17e8e:	f3ef 8305 	mrs	r3, IPSR
   17e92:	9301      	str	r3, [sp, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   17e94:	9b01      	ldr	r3, [sp, #4]
   17e96:	2b0f      	cmp	r3, #15
   17e98:	d90c      	bls.n	17eb4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   17e9a:	4a0c      	ldr	r2, [pc, #48]	; (17ecc <vPortValidateInterruptPriority+0x40>)
   17e9c:	9b01      	ldr	r3, [sp, #4]
   17e9e:	4413      	add	r3, r2
   17ea0:	781b      	ldrb	r3, [r3, #0]
   17ea2:	f88d 3003 	strb.w	r3, [sp, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   17ea6:	4b0a      	ldr	r3, [pc, #40]	; (17ed0 <vPortValidateInterruptPriority+0x44>)
   17ea8:	781b      	ldrb	r3, [r3, #0]
   17eaa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   17eae:	429a      	cmp	r2, r3
   17eb0:	d200      	bcs.n	17eb4 <vPortValidateInterruptPriority+0x28>
   17eb2:	e7fe      	b.n	17eb2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   17eb4:	4b07      	ldr	r3, [pc, #28]	; (17ed4 <vPortValidateInterruptPriority+0x48>)
   17eb6:	681b      	ldr	r3, [r3, #0]
   17eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   17ebc:	4b06      	ldr	r3, [pc, #24]	; (17ed8 <vPortValidateInterruptPriority+0x4c>)
   17ebe:	681b      	ldr	r3, [r3, #0]
   17ec0:	429a      	cmp	r2, r3
   17ec2:	d900      	bls.n	17ec6 <vPortValidateInterruptPriority+0x3a>
   17ec4:	e7fe      	b.n	17ec4 <vPortValidateInterruptPriority+0x38>
	}
   17ec6:	bf00      	nop
   17ec8:	b002      	add	sp, #8
   17eca:	4770      	bx	lr
   17ecc:	e000e3f0 	.word	0xe000e3f0
   17ed0:	100036c4 	.word	0x100036c4
   17ed4:	e000ed0c 	.word	0xe000ed0c
   17ed8:	100036c8 	.word	0x100036c8

00017edc <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   17edc:	b500      	push	{lr}
   17ede:	b089      	sub	sp, #36	; 0x24
   17ee0:	9001      	str	r0, [sp, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   17ee2:	4b3d      	ldr	r3, [pc, #244]	; (17fd8 <vPortSuppressTicksAndSleep+0xfc>)
   17ee4:	681b      	ldr	r3, [r3, #0]
   17ee6:	9a01      	ldr	r2, [sp, #4]
   17ee8:	429a      	cmp	r2, r3
   17eea:	d902      	bls.n	17ef2 <vPortSuppressTicksAndSleep+0x16>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   17eec:	4b3a      	ldr	r3, [pc, #232]	; (17fd8 <vPortSuppressTicksAndSleep+0xfc>)
   17eee:	681b      	ldr	r3, [r3, #0]
   17ef0:	9301      	str	r3, [sp, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   17ef2:	9b01      	ldr	r3, [sp, #4]
   17ef4:	3b01      	subs	r3, #1
   17ef6:	4a39      	ldr	r2, [pc, #228]	; (17fdc <vPortSuppressTicksAndSleep+0x100>)
   17ef8:	6812      	ldr	r2, [r2, #0]
   17efa:	fb02 f303 	mul.w	r3, r2, r3
   17efe:	9307      	str	r3, [sp, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   17f00:	b672      	cpsid	i
	__asm volatile( "dsb" );
   17f02:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   17f06:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    uint32_t curTime = am_hal_stimer_counter_get();
   17f0a:	f00f fad3 	bl	274b4 <am_hal_stimer_counter_get>
   17f0e:	9006      	str	r0, [sp, #24]
    gF_stimerGetHistory[gF_stimerGetHistoryCount][1] = curTime;
    gF_stimerGetHistory[gF_stimerGetHistoryCount][2] = AM_REGVAL(AM_REG_STIMER_COMPARE(0, 0));
    gF_stimerGetHistory[gF_stimerGetHistoryCount][3] = gF_stimerHistoryCount;
    gF_stimerGetHistoryCount++;
#endif
    elapsed_time = curTime - g_lastSTimerVal;
   17f10:	4b33      	ldr	r3, [pc, #204]	; (17fe0 <vPortSuppressTicksAndSleep+0x104>)
   17f12:	681b      	ldr	r3, [r3, #0]
   17f14:	9a06      	ldr	r2, [sp, #24]
   17f16:	1ad3      	subs	r3, r2, r3
   17f18:	9305      	str	r3, [sp, #20]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   17f1a:	f00a ffd3 	bl	22ec4 <eTaskConfirmSleepModeStatus>
   17f1e:	4603      	mov	r3, r0
   17f20:	2b00      	cmp	r3, #0
   17f22:	d006      	beq.n	17f32 <vPortSuppressTicksAndSleep+0x56>
   17f24:	4b2d      	ldr	r3, [pc, #180]	; (17fdc <vPortSuppressTicksAndSleep+0x100>)
   17f26:	681a      	ldr	r2, [r3, #0]
   17f28:	9b05      	ldr	r3, [sp, #20]
   17f2a:	441a      	add	r2, r3
   17f2c:	9b07      	ldr	r3, [sp, #28]
   17f2e:	429a      	cmp	r2, r3
   17f30:	d901      	bls.n	17f36 <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   17f32:	b662      	cpsie	i
   17f34:	e04c      	b.n	17fd0 <vPortSuppressTicksAndSleep+0xf4>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   17f36:	9a07      	ldr	r2, [sp, #28]
   17f38:	9b05      	ldr	r3, [sp, #20]
   17f3a:	1ad3      	subs	r3, r2, r3
   17f3c:	9307      	str	r3, [sp, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   17f3e:	9907      	ldr	r1, [sp, #28]
   17f40:	2000      	movs	r0, #0
   17f42:	f00f fabd 	bl	274c0 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_compare_delta_set(1, ulReloadValue+1);
   17f46:	9b07      	ldr	r3, [sp, #28]
   17f48:	3301      	adds	r3, #1
   17f4a:	4619      	mov	r1, r3
   17f4c:	2001      	movs	r0, #1
   17f4e:	f00f fab7 	bl	274c0 <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   17f52:	9b01      	ldr	r3, [sp, #4]
   17f54:	9304      	str	r3, [sp, #16]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   17f56:	9804      	ldr	r0, [sp, #16]
   17f58:	f003 f966 	bl	1b228 <am_freertos_sleep>
   17f5c:	9004      	str	r0, [sp, #16]

		if( xModifiableIdleTime > 0 )
   17f5e:	9b04      	ldr	r3, [sp, #16]
   17f60:	2b00      	cmp	r3, #0
   17f62:	d004      	beq.n	17f6e <vPortSuppressTicksAndSleep+0x92>
		{
			__asm volatile( "dsb" );
   17f64:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   17f68:	bf30      	wfi
			__asm volatile( "isb" );
   17f6a:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   17f6e:	9801      	ldr	r0, [sp, #4]
   17f70:	f003 f965 	bl	1b23e <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   17f74:	f00f fa9e 	bl	274b4 <am_hal_stimer_counter_get>
   17f78:	9003      	str	r0, [sp, #12]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   17f7a:	9b03      	ldr	r3, [sp, #12]
   17f7c:	4a18      	ldr	r2, [pc, #96]	; (17fe0 <vPortSuppressTicksAndSleep+0x104>)
   17f7e:	6812      	ldr	r2, [r2, #0]
   17f80:	1a9b      	subs	r3, r3, r2
   17f82:	9302      	str	r3, [sp, #8]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   17f84:	4b15      	ldr	r3, [pc, #84]	; (17fdc <vPortSuppressTicksAndSleep+0x100>)
   17f86:	681a      	ldr	r2, [r3, #0]
   17f88:	9b02      	ldr	r3, [sp, #8]
   17f8a:	fbb3 f1f2 	udiv	r1, r3, r2
   17f8e:	fb02 f201 	mul.w	r2, r2, r1
   17f92:	1a9b      	subs	r3, r3, r2
   17f94:	9a03      	ldr	r2, [sp, #12]
   17f96:	1ad3      	subs	r3, r2, r3
   17f98:	4a11      	ldr	r2, [pc, #68]	; (17fe0 <vPortSuppressTicksAndSleep+0x104>)
   17f9a:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   17f9c:	4b0f      	ldr	r3, [pc, #60]	; (17fdc <vPortSuppressTicksAndSleep+0x100>)
   17f9e:	681b      	ldr	r3, [r3, #0]
   17fa0:	9a02      	ldr	r2, [sp, #8]
   17fa2:	fbb2 f3f3 	udiv	r3, r2, r3
   17fa6:	9302      	str	r3, [sp, #8]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   17fa8:	9802      	ldr	r0, [sp, #8]
   17faa:	f00a fcb7 	bl	2291c <vTaskStepTick>
		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   17fae:	2003      	movs	r0, #3
   17fb0:	f00f fae6 	bl	27580 <am_hal_stimer_int_clear>
#else
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
#endif
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   17fb4:	4b09      	ldr	r3, [pc, #36]	; (17fdc <vPortSuppressTicksAndSleep+0x100>)
   17fb6:	681b      	ldr	r3, [r3, #0]
   17fb8:	4619      	mov	r1, r3
   17fba:	2000      	movs	r0, #0
   17fbc:	f00f fa80 	bl	274c0 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   17fc0:	4b06      	ldr	r3, [pc, #24]	; (17fdc <vPortSuppressTicksAndSleep+0x100>)
   17fc2:	681b      	ldr	r3, [r3, #0]
   17fc4:	3301      	adds	r3, #1
   17fc6:	4619      	mov	r1, r3
   17fc8:	2001      	movs	r0, #1
   17fca:	f00f fa79 	bl	274c0 <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   17fce:	b662      	cpsie	i

	}
}
   17fd0:	bf00      	nop
   17fd2:	b009      	add	sp, #36	; 0x24
   17fd4:	f85d fb04 	ldr.w	pc, [sp], #4
   17fd8:	100036d0 	.word	0x100036d0
   17fdc:	100036cc 	.word	0x100036cc
   17fe0:	100036c0 	.word	0x100036c0

00017fe4 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   17fe4:	b500      	push	{lr}
   17fe6:	b08b      	sub	sp, #44	; 0x2c
   17fe8:	9001      	str	r0, [sp, #4]
    uint32_t remainder = 0;
   17fea:	2300      	movs	r3, #0
   17fec:	9307      	str	r3, [sp, #28]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   17fee:	2300      	movs	r3, #0
   17ff0:	9308      	str	r3, [sp, #32]

    curSTimer = am_hal_stimer_counter_get();
   17ff2:	f00f fa5f 	bl	274b4 <am_hal_stimer_counter_get>
   17ff6:	9006      	str	r0, [sp, #24]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   17ff8:	4b2a      	ldr	r3, [pc, #168]	; (180a4 <xPortStimerTickHandler+0xc0>)
   17ffa:	681a      	ldr	r2, [r3, #0]
   17ffc:	9b01      	ldr	r3, [sp, #4]
   17ffe:	1ad3      	subs	r3, r2, r3
   18000:	4619      	mov	r1, r3
   18002:	2000      	movs	r0, #0
   18004:	f00f fa5c 	bl	274c0 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   18008:	4b26      	ldr	r3, [pc, #152]	; (180a4 <xPortStimerTickHandler+0xc0>)
   1800a:	681a      	ldr	r2, [r3, #0]
   1800c:	9b01      	ldr	r3, [sp, #4]
   1800e:	1ad3      	subs	r3, r2, r3
   18010:	3301      	adds	r3, #1
   18012:	4619      	mov	r1, r3
   18014:	2001      	movs	r0, #1
   18016:	f00f fa53 	bl	274c0 <am_hal_stimer_compare_delta_set>
#endif
    
    timerCounts = curSTimer - g_lastSTimerVal;
   1801a:	4b23      	ldr	r3, [pc, #140]	; (180a8 <xPortStimerTickHandler+0xc4>)
   1801c:	681b      	ldr	r3, [r3, #0]
   1801e:	9a06      	ldr	r2, [sp, #24]
   18020:	1ad3      	subs	r3, r2, r3
   18022:	9305      	str	r3, [sp, #20]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   18024:	4b1f      	ldr	r3, [pc, #124]	; (180a4 <xPortStimerTickHandler+0xc0>)
   18026:	681b      	ldr	r3, [r3, #0]
   18028:	9a05      	ldr	r2, [sp, #20]
   1802a:	fbb2 f3f3 	udiv	r3, r2, r3
   1802e:	9309      	str	r3, [sp, #36]	; 0x24
    remainder = timerCounts % ulTimerCountsForOneTick;
   18030:	4b1c      	ldr	r3, [pc, #112]	; (180a4 <xPortStimerTickHandler+0xc0>)
   18032:	681a      	ldr	r2, [r3, #0]
   18034:	9b05      	ldr	r3, [sp, #20]
   18036:	fbb3 f1f2 	udiv	r1, r3, r2
   1803a:	fb02 f201 	mul.w	r2, r2, r1
   1803e:	1a9b      	subs	r3, r3, r2
   18040:	9307      	str	r3, [sp, #28]
    g_lastSTimerVal = curSTimer - remainder;
   18042:	9a06      	ldr	r2, [sp, #24]
   18044:	9b07      	ldr	r3, [sp, #28]
   18046:	1ad3      	subs	r3, r2, r3
   18048:	4a17      	ldr	r2, [pc, #92]	; (180a8 <xPortStimerTickHandler+0xc4>)
   1804a:	6013      	str	r3, [r2, #0]
	__asm volatile
   1804c:	f3ef 8211 	mrs	r2, BASEPRI
   18050:	f04f 0380 	mov.w	r3, #128	; 0x80
   18054:	f383 8811 	msr	BASEPRI, r3
   18058:	f3bf 8f6f 	isb	sy
   1805c:	f3bf 8f4f 	dsb	sy
   18060:	9204      	str	r2, [sp, #16]
   18062:	9303      	str	r3, [sp, #12]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   18064:	e008      	b.n	18078 <xPortStimerTickHandler+0x94>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   18066:	f00a fc71 	bl	2294c <xTaskIncrementTick>
   1806a:	4603      	mov	r3, r0
   1806c:	2b00      	cmp	r3, #0
   1806e:	d101      	bne.n	18074 <xPortStimerTickHandler+0x90>
   18070:	9b08      	ldr	r3, [sp, #32]
   18072:	e000      	b.n	18076 <xPortStimerTickHandler+0x92>
   18074:	2301      	movs	r3, #1
   18076:	9308      	str	r3, [sp, #32]
        while (numTicksElapsed--)
   18078:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1807a:	1e5a      	subs	r2, r3, #1
   1807c:	9209      	str	r2, [sp, #36]	; 0x24
   1807e:	2b00      	cmp	r3, #0
   18080:	d1f1      	bne.n	18066 <xPortStimerTickHandler+0x82>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   18082:	9b08      	ldr	r3, [sp, #32]
   18084:	2b00      	cmp	r3, #0
   18086:	d003      	beq.n	18090 <xPortStimerTickHandler+0xac>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   18088:	4b08      	ldr	r3, [pc, #32]	; (180ac <xPortStimerTickHandler+0xc8>)
   1808a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1808e:	601a      	str	r2, [r3, #0]
   18090:	2300      	movs	r3, #0
   18092:	9302      	str	r3, [sp, #8]
	__asm volatile
   18094:	9b02      	ldr	r3, [sp, #8]
   18096:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   1809a:	bf00      	nop
   1809c:	b00b      	add	sp, #44	; 0x2c
   1809e:	f85d fb04 	ldr.w	pc, [sp], #4
   180a2:	bf00      	nop
   180a4:	100036cc 	.word	0x100036cc
   180a8:	100036c0 	.word	0x100036c0
   180ac:	e000ed04 	.word	0xe000ed04

000180b0 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   180b0:	b500      	push	{lr}
   180b2:	b083      	sub	sp, #12

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   180b4:	2000      	movs	r0, #0
   180b6:	f00f fa69 	bl	2758c <am_hal_stimer_int_status_get>
   180ba:	9001      	str	r0, [sp, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   180bc:	9b01      	ldr	r3, [sp, #4]
   180be:	f003 0301 	and.w	r3, r3, #1
   180c2:	2b00      	cmp	r3, #0
   180c4:	d005      	beq.n	180d2 <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   180c6:	2001      	movs	r0, #1
   180c8:	f00f fa5a 	bl	27580 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
   180cc:	2000      	movs	r0, #0
   180ce:	f7ff ff89 	bl	17fe4 <xPortStimerTickHandler>
    }
}
   180d2:	bf00      	nop
   180d4:	b003      	add	sp, #12
   180d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000180dc <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   180dc:	b500      	push	{lr}
   180de:	b083      	sub	sp, #12

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   180e0:	2000      	movs	r0, #0
   180e2:	f00f fa53 	bl	2758c <am_hal_stimer_int_status_get>
   180e6:	9001      	str	r0, [sp, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   180e8:	9b01      	ldr	r3, [sp, #4]
   180ea:	f003 0302 	and.w	r3, r3, #2
   180ee:	2b00      	cmp	r3, #0
   180f0:	d00a      	beq.n	18108 <am_stimer_cmpr1_isr+0x2c>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   180f2:	2002      	movs	r0, #2
   180f4:	f00f fa44 	bl	27580 <am_hal_stimer_int_clear>
        gNumCmpB++;
   180f8:	4b05      	ldr	r3, [pc, #20]	; (18110 <am_stimer_cmpr1_isr+0x34>)
   180fa:	681b      	ldr	r3, [r3, #0]
   180fc:	3301      	adds	r3, #1
   180fe:	4a04      	ldr	r2, [pc, #16]	; (18110 <am_stimer_cmpr1_isr+0x34>)
   18100:	6013      	str	r3, [r2, #0]
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
   18102:	2001      	movs	r0, #1
   18104:	f7ff ff6e 	bl	17fe4 <xPortStimerTickHandler>
    }
}
   18108:	bf00      	nop
   1810a:	b003      	add	sp, #12
   1810c:	f85d fb04 	ldr.w	pc, [sp], #4
   18110:	100036d4 	.word	0x100036d4

00018114 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   18114:	b500      	push	{lr}
   18116:	b083      	sub	sp, #12
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   18118:	4b20      	ldr	r3, [pc, #128]	; (1819c <vPortSetupTimerInterrupt+0x88>)
   1811a:	2220      	movs	r2, #32
   1811c:	601a      	str	r2, [r3, #0]
#ifdef AM_FREERTOS_STIMER_BACKUP
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   1811e:	4b1f      	ldr	r3, [pc, #124]	; (1819c <vPortSetupTimerInterrupt+0x88>)
   18120:	681b      	ldr	r3, [r3, #0]
   18122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18126:	fbb2 f3f3 	udiv	r3, r2, r3
   1812a:	3b01      	subs	r3, #1
   1812c:	4a1c      	ldr	r2, [pc, #112]	; (181a0 <vPortSetupTimerInterrupt+0x8c>)
   1812e:	6013      	str	r3, [r2, #0]
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   18130:	2003      	movs	r0, #3
   18132:	f00f fa1b 	bl	2756c <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   18136:	2107      	movs	r1, #7
   18138:	2017      	movs	r0, #23
   1813a:	f7ff fce1 	bl	17b00 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   1813e:	2017      	movs	r0, #23
   18140:	f7ff fcc4 	bl	17acc <__NVIC_EnableIRQ>
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_STIMER_CMPR0, configKERNEL_INTERRUPT_PRIORITY);
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_STIMER_CMPR0);
#endif // AM_CMSIS_REGS
#ifdef AM_FREERTOS_STIMER_BACKUP
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR1_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   18144:	2107      	movs	r1, #7
   18146:	2018      	movs	r0, #24
   18148:	f7ff fcda 	bl	17b00 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR1_IRQn);
   1814c:	2018      	movs	r0, #24
   1814e:	f7ff fcbd 	bl	17acc <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS
#endif
    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   18152:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   18156:	f00f f9a3 	bl	274a0 <am_hal_stimer_config>
   1815a:	9001      	str	r0, [sp, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   1815c:	f00f f9aa 	bl	274b4 <am_hal_stimer_counter_get>
   18160:	4602      	mov	r2, r0
   18162:	4b10      	ldr	r3, [pc, #64]	; (181a4 <vPortSetupTimerInterrupt+0x90>)
   18164:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   18166:	4b0d      	ldr	r3, [pc, #52]	; (1819c <vPortSetupTimerInterrupt+0x88>)
   18168:	681b      	ldr	r3, [r3, #0]
   1816a:	4619      	mov	r1, r3
   1816c:	2000      	movs	r0, #0
   1816e:	f00f f9a7 	bl	274c0 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   18172:	4b0a      	ldr	r3, [pc, #40]	; (1819c <vPortSetupTimerInterrupt+0x88>)
   18174:	681b      	ldr	r3, [r3, #0]
   18176:	3301      	adds	r3, #1
   18178:	4619      	mov	r1, r3
   1817a:	2001      	movs	r0, #1
   1817c:	f00f f9a0 	bl	274c0 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   18180:	9a01      	ldr	r2, [sp, #4]
   18182:	4b09      	ldr	r3, [pc, #36]	; (181a8 <vPortSetupTimerInterrupt+0x94>)
   18184:	4013      	ands	r3, r2
   18186:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1818a:	f043 0303 	orr.w	r3, r3, #3
   1818e:	4618      	mov	r0, r3
   18190:	f00f f986 	bl	274a0 <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   18194:	bf00      	nop
   18196:	b003      	add	sp, #12
   18198:	f85d fb04 	ldr.w	pc, [sp], #4
   1819c:	100036cc 	.word	0x100036cc
   181a0:	100036d0 	.word	0x100036d0
   181a4:	100036c0 	.word	0x100036c0
   181a8:	7ffffcf0 	.word	0x7ffffcf0

000181ac <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   181ac:	b084      	sub	sp, #16
   181ae:	9001      	str	r0, [sp, #4]
   181b0:	460b      	mov	r3, r1
   181b2:	f8ad 3002 	strh.w	r3, [sp, #2]
  volatile uint8_t escape=0;
   181b6:	2300      	movs	r3, #0
   181b8:	f88d 300f 	strb.w	r3, [sp, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   181bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   181c0:	b2db      	uxtb	r3, r3
   181c2:	2b00      	cmp	r3, #0
   181c4:	d100      	bne.n	181c8 <WsfAssert+0x1c>
   181c6:	e7f9      	b.n	181bc <WsfAssert+0x10>
    {
      break;
   181c8:	bf00      	nop
    }
  }
}
   181ca:	bf00      	nop
   181cc:	b004      	add	sp, #16
   181ce:	4770      	bx	lr

000181d0 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   181d0:	b088      	sub	sp, #32
   181d2:	9102      	str	r1, [sp, #8]
   181d4:	9301      	str	r3, [sp, #4]
   181d6:	4603      	mov	r3, r0
   181d8:	f8ad 300e 	strh.w	r3, [sp, #14]
   181dc:	4613      	mov	r3, r2
   181de:	f88d 300d 	strb.w	r3, [sp, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   181e2:	4a53      	ldr	r2, [pc, #332]	; (18330 <WsfBufInit+0x160>)
   181e4:	9b02      	ldr	r3, [sp, #8]
   181e6:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   181e8:	4b51      	ldr	r3, [pc, #324]	; (18330 <WsfBufInit+0x160>)
   181ea:	681b      	ldr	r3, [r3, #0]
   181ec:	9307      	str	r3, [sp, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   181ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
   181f2:	4613      	mov	r3, r2
   181f4:	005b      	lsls	r3, r3, #1
   181f6:	4413      	add	r3, r2
   181f8:	009b      	lsls	r3, r3, #2
   181fa:	461a      	mov	r2, r3
   181fc:	9b07      	ldr	r3, [sp, #28]
   181fe:	4413      	add	r3, r2
   18200:	9306      	str	r3, [sp, #24]

  wsfBufNumPools = numPools;
   18202:	4a4c      	ldr	r2, [pc, #304]	; (18334 <WsfBufInit+0x164>)
   18204:	f89d 300d 	ldrb.w	r3, [sp, #13]
   18208:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1820a:	4b49      	ldr	r3, [pc, #292]	; (18330 <WsfBufInit+0x160>)
   1820c:	681a      	ldr	r2, [r3, #0]
   1820e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18212:	08db      	lsrs	r3, r3, #3
   18214:	b29b      	uxth	r3, r3
   18216:	00db      	lsls	r3, r3, #3
   18218:	441a      	add	r2, r3
   1821a:	9b06      	ldr	r3, [sp, #24]
   1821c:	429a      	cmp	r2, r3
   1821e:	d201      	bcs.n	18224 <WsfBufInit+0x54>
    {
      WSF_ASSERT(FALSE);
      return 0;
   18220:	2300      	movs	r3, #0
   18222:	e081      	b.n	18328 <WsfBufInit+0x158>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   18224:	f89d 300d 	ldrb.w	r3, [sp, #13]
   18228:	1e5a      	subs	r2, r3, #1
   1822a:	f88d 200d 	strb.w	r2, [sp, #13]
   1822e:	2b00      	cmp	r3, #0
   18230:	d070      	beq.n	18314 <WsfBufInit+0x144>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   18232:	9b01      	ldr	r3, [sp, #4]
   18234:	881b      	ldrh	r3, [r3, #0]
   18236:	2b07      	cmp	r3, #7
   18238:	d803      	bhi.n	18242 <WsfBufInit+0x72>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   1823a:	9b07      	ldr	r3, [sp, #28]
   1823c:	2208      	movs	r2, #8
   1823e:	801a      	strh	r2, [r3, #0]
   18240:	e014      	b.n	1826c <WsfBufInit+0x9c>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   18242:	9b01      	ldr	r3, [sp, #4]
   18244:	881b      	ldrh	r3, [r3, #0]
   18246:	f003 0307 	and.w	r3, r3, #7
   1824a:	b29b      	uxth	r3, r3
   1824c:	2b00      	cmp	r3, #0
   1824e:	d009      	beq.n	18264 <WsfBufInit+0x94>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   18250:	9b01      	ldr	r3, [sp, #4]
   18252:	881b      	ldrh	r3, [r3, #0]
   18254:	f023 0307 	bic.w	r3, r3, #7
   18258:	b29b      	uxth	r3, r3
   1825a:	3308      	adds	r3, #8
   1825c:	b29a      	uxth	r2, r3
   1825e:	9b07      	ldr	r3, [sp, #28]
   18260:	801a      	strh	r2, [r3, #0]
   18262:	e003      	b.n	1826c <WsfBufInit+0x9c>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   18264:	9b01      	ldr	r3, [sp, #4]
   18266:	881a      	ldrh	r2, [r3, #0]
   18268:	9b07      	ldr	r3, [sp, #28]
   1826a:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   1826c:	9b01      	ldr	r3, [sp, #4]
   1826e:	789a      	ldrb	r2, [r3, #2]
   18270:	9b07      	ldr	r3, [sp, #28]
   18272:	709a      	strb	r2, [r3, #2]
    pDesc++;
   18274:	9b01      	ldr	r3, [sp, #4]
   18276:	3304      	adds	r3, #4
   18278:	9301      	str	r3, [sp, #4]

    pPool->pStart = pStart;
   1827a:	9b07      	ldr	r3, [sp, #28]
   1827c:	9a06      	ldr	r2, [sp, #24]
   1827e:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   18280:	9b07      	ldr	r3, [sp, #28]
   18282:	9a06      	ldr	r2, [sp, #24]
   18284:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   18286:	9b07      	ldr	r3, [sp, #28]
   18288:	881b      	ldrh	r3, [r3, #0]
   1828a:	08db      	lsrs	r3, r3, #3
   1828c:	f8ad 3014 	strh.w	r3, [sp, #20]
    for (i = pPool->desc.num; i > 1; i--)
   18290:	9b07      	ldr	r3, [sp, #28]
   18292:	789b      	ldrb	r3, [r3, #2]
   18294:	f88d 3017 	strb.w	r3, [sp, #23]
   18298:	e01e      	b.n	182d8 <WsfBufInit+0x108>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1829a:	4b25      	ldr	r3, [pc, #148]	; (18330 <WsfBufInit+0x160>)
   1829c:	681a      	ldr	r2, [r3, #0]
   1829e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   182a2:	08db      	lsrs	r3, r3, #3
   182a4:	b29b      	uxth	r3, r3
   182a6:	00db      	lsls	r3, r3, #3
   182a8:	441a      	add	r2, r3
   182aa:	9b06      	ldr	r3, [sp, #24]
   182ac:	429a      	cmp	r2, r3
   182ae:	d201      	bcs.n	182b4 <WsfBufInit+0xe4>
      {
        WSF_ASSERT(FALSE);
        return 0;
   182b0:	2300      	movs	r3, #0
   182b2:	e039      	b.n	18328 <WsfBufInit+0x158>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   182b4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   182b8:	00db      	lsls	r3, r3, #3
   182ba:	9a06      	ldr	r2, [sp, #24]
   182bc:	441a      	add	r2, r3
   182be:	9b06      	ldr	r3, [sp, #24]
   182c0:	601a      	str	r2, [r3, #0]
      pStart += len;
   182c2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   182c6:	00db      	lsls	r3, r3, #3
   182c8:	9a06      	ldr	r2, [sp, #24]
   182ca:	4413      	add	r3, r2
   182cc:	9306      	str	r3, [sp, #24]
    for (i = pPool->desc.num; i > 1; i--)
   182ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
   182d2:	3b01      	subs	r3, #1
   182d4:	f88d 3017 	strb.w	r3, [sp, #23]
   182d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   182dc:	2b01      	cmp	r3, #1
   182de:	d8dc      	bhi.n	1829a <WsfBufInit+0xca>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   182e0:	4b13      	ldr	r3, [pc, #76]	; (18330 <WsfBufInit+0x160>)
   182e2:	681a      	ldr	r2, [r3, #0]
   182e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   182e8:	08db      	lsrs	r3, r3, #3
   182ea:	b29b      	uxth	r3, r3
   182ec:	00db      	lsls	r3, r3, #3
   182ee:	441a      	add	r2, r3
   182f0:	9b06      	ldr	r3, [sp, #24]
   182f2:	429a      	cmp	r2, r3
   182f4:	d201      	bcs.n	182fa <WsfBufInit+0x12a>
    {
      WSF_ASSERT(FALSE);
      return 0;
   182f6:	2300      	movs	r3, #0
   182f8:	e016      	b.n	18328 <WsfBufInit+0x158>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   182fa:	9b06      	ldr	r3, [sp, #24]
   182fc:	2200      	movs	r2, #0
   182fe:	601a      	str	r2, [r3, #0]
    pStart += len;
   18300:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   18304:	00db      	lsls	r3, r3, #3
   18306:	9a06      	ldr	r2, [sp, #24]
   18308:	4413      	add	r3, r2
   1830a:	9306      	str	r3, [sp, #24]

    /* next pool */
    pPool++;
   1830c:	9b07      	ldr	r3, [sp, #28]
   1830e:	330c      	adds	r3, #12
   18310:	9307      	str	r3, [sp, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   18312:	e77a      	b.n	1820a <WsfBufInit+0x3a>
      break;
   18314:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   18316:	9b06      	ldr	r3, [sp, #24]
   18318:	4a05      	ldr	r2, [pc, #20]	; (18330 <WsfBufInit+0x160>)
   1831a:	6812      	ldr	r2, [r2, #0]
   1831c:	1a9b      	subs	r3, r3, r2
   1831e:	b29a      	uxth	r2, r3
   18320:	4b05      	ldr	r3, [pc, #20]	; (18338 <WsfBufInit+0x168>)
   18322:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   18324:	4b04      	ldr	r3, [pc, #16]	; (18338 <WsfBufInit+0x168>)
   18326:	881b      	ldrh	r3, [r3, #0]
}
   18328:	4618      	mov	r0, r3
   1832a:	b008      	add	sp, #32
   1832c:	4770      	bx	lr
   1832e:	bf00      	nop
   18330:	100036d8 	.word	0x100036d8
   18334:	10008c8a 	.word	0x10008c8a
   18338:	10008c88 	.word	0x10008c88

0001833c <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   1833c:	b500      	push	{lr}
   1833e:	b087      	sub	sp, #28
   18340:	4603      	mov	r3, r0
   18342:	f8ad 3006 	strh.w	r3, [sp, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   18346:	4b1d      	ldr	r3, [pc, #116]	; (183bc <WsfBufAlloc+0x80>)
   18348:	681b      	ldr	r3, [r3, #0]
   1834a:	9305      	str	r3, [sp, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1834c:	4b1c      	ldr	r3, [pc, #112]	; (183c0 <WsfBufAlloc+0x84>)
   1834e:	781b      	ldrb	r3, [r3, #0]
   18350:	f88d 3013 	strb.w	r3, [sp, #19]
   18354:	e023      	b.n	1839e <WsfBufAlloc+0x62>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   18356:	9b05      	ldr	r3, [sp, #20]
   18358:	881b      	ldrh	r3, [r3, #0]
   1835a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1835e:	429a      	cmp	r2, r3
   18360:	d815      	bhi.n	1838e <WsfBufAlloc+0x52>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   18362:	f000 f8f3 	bl	1854c <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   18366:	9b05      	ldr	r3, [sp, #20]
   18368:	689b      	ldr	r3, [r3, #8]
   1836a:	2b00      	cmp	r3, #0
   1836c:	d00d      	beq.n	1838a <WsfBufAlloc+0x4e>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   1836e:	9b05      	ldr	r3, [sp, #20]
   18370:	689b      	ldr	r3, [r3, #8]
   18372:	9303      	str	r3, [sp, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   18374:	9b03      	ldr	r3, [sp, #12]
   18376:	681a      	ldr	r2, [r3, #0]
   18378:	9b05      	ldr	r3, [sp, #20]
   1837a:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   1837c:	9b03      	ldr	r3, [sp, #12]
   1837e:	2200      	movs	r2, #0
   18380:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   18382:	f000 f8f3 	bl	1856c <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   18386:	9b03      	ldr	r3, [sp, #12]
   18388:	e014      	b.n	183b4 <WsfBufAlloc+0x78>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1838a:	f000 f8ef 	bl	1856c <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1838e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18392:	3b01      	subs	r3, #1
   18394:	f88d 3013 	strb.w	r3, [sp, #19]
   18398:	9b05      	ldr	r3, [sp, #20]
   1839a:	330c      	adds	r3, #12
   1839c:	9305      	str	r3, [sp, #20]
   1839e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   183a2:	2b00      	cmp	r3, #0
   183a4:	d1d7      	bne.n	18356 <WsfBufAlloc+0x1a>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   183a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   183aa:	4619      	mov	r1, r3
   183ac:	4805      	ldr	r0, [pc, #20]	; (183c4 <WsfBufAlloc+0x88>)
   183ae:	f000 fccb 	bl	18d48 <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   183b2:	2300      	movs	r3, #0
}
   183b4:	4618      	mov	r0, r3
   183b6:	b007      	add	sp, #28
   183b8:	f85d fb04 	ldr.w	pc, [sp], #4
   183bc:	100036d8 	.word	0x100036d8
   183c0:	10008c8a 	.word	0x10008c8a
   183c4:	00028958 	.word	0x00028958

000183c8 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   183c8:	b500      	push	{lr}
   183ca:	b085      	sub	sp, #20
   183cc:	9001      	str	r0, [sp, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   183ce:	9b01      	ldr	r3, [sp, #4]
   183d0:	9302      	str	r3, [sp, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   183d2:	4b16      	ldr	r3, [pc, #88]	; (1842c <WsfBufFree+0x64>)
   183d4:	681a      	ldr	r2, [r3, #0]
   183d6:	4b16      	ldr	r3, [pc, #88]	; (18430 <WsfBufFree+0x68>)
   183d8:	781b      	ldrb	r3, [r3, #0]
   183da:	4619      	mov	r1, r3
   183dc:	460b      	mov	r3, r1
   183de:	005b      	lsls	r3, r3, #1
   183e0:	440b      	add	r3, r1
   183e2:	009b      	lsls	r3, r3, #2
   183e4:	3b0c      	subs	r3, #12
   183e6:	4413      	add	r3, r2
   183e8:	9303      	str	r3, [sp, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   183ea:	e016      	b.n	1841a <WsfBufFree+0x52>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   183ec:	9b03      	ldr	r3, [sp, #12]
   183ee:	685a      	ldr	r2, [r3, #4]
   183f0:	9b02      	ldr	r3, [sp, #8]
   183f2:	429a      	cmp	r2, r3
   183f4:	d80e      	bhi.n	18414 <WsfBufFree+0x4c>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   183f6:	f000 f8a9 	bl	1854c <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   183fa:	9b02      	ldr	r3, [sp, #8]
   183fc:	4a0d      	ldr	r2, [pc, #52]	; (18434 <WsfBufFree+0x6c>)
   183fe:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   18400:	9b03      	ldr	r3, [sp, #12]
   18402:	689a      	ldr	r2, [r3, #8]
   18404:	9b02      	ldr	r3, [sp, #8]
   18406:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   18408:	9b03      	ldr	r3, [sp, #12]
   1840a:	9a02      	ldr	r2, [sp, #8]
   1840c:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1840e:	f000 f8ad 	bl	1856c <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   18412:	e008      	b.n	18426 <WsfBufFree+0x5e>
    }

    /* next pool */
    pPool--;
   18414:	9b03      	ldr	r3, [sp, #12]
   18416:	3b0c      	subs	r3, #12
   18418:	9303      	str	r3, [sp, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1841a:	4b04      	ldr	r3, [pc, #16]	; (1842c <WsfBufFree+0x64>)
   1841c:	681b      	ldr	r3, [r3, #0]
   1841e:	9a03      	ldr	r2, [sp, #12]
   18420:	429a      	cmp	r2, r3
   18422:	d2e3      	bcs.n	183ec <WsfBufFree+0x24>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   18424:	bf00      	nop
}
   18426:	b005      	add	sp, #20
   18428:	f85d fb04 	ldr.w	pc, [sp], #4
   1842c:	100036d8 	.word	0x100036d8
   18430:	10008c8a 	.word	0x10008c8a
   18434:	faabd00d 	.word	0xfaabd00d

00018438 <WsfBufDiagRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufDiagRegister(wsfBufDiagCback_t callback)
{
   18438:	b082      	sub	sp, #8
   1843a:	9001      	str	r0, [sp, #4]
#if WSF_OS_DIAG == TRUE
  wsfBufDiagCback = callback;
#endif
}
   1843c:	bf00      	nop
   1843e:	b002      	add	sp, #8
   18440:	4770      	bx	lr

00018442 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   18442:	b500      	push	{lr}
   18444:	b083      	sub	sp, #12
   18446:	4603      	mov	r3, r0
   18448:	460a      	mov	r2, r1
   1844a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1844e:	4613      	mov	r3, r2
   18450:	f88d 3005 	strb.w	r3, [sp, #5]
  return WsfMsgAlloc(len + tailroom);
   18454:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18458:	b29a      	uxth	r2, r3
   1845a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1845e:	4413      	add	r3, r2
   18460:	b29b      	uxth	r3, r3
   18462:	4618      	mov	r0, r3
   18464:	f000 f805 	bl	18472 <WsfMsgAlloc>
   18468:	4603      	mov	r3, r0
}
   1846a:	4618      	mov	r0, r3
   1846c:	b003      	add	sp, #12
   1846e:	f85d fb04 	ldr.w	pc, [sp], #4

00018472 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   18472:	b500      	push	{lr}
   18474:	b085      	sub	sp, #20
   18476:	4603      	mov	r3, r0
   18478:	f8ad 3006 	strh.w	r3, [sp, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1847c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18480:	3308      	adds	r3, #8
   18482:	b29b      	uxth	r3, r3
   18484:	4618      	mov	r0, r3
   18486:	f7ff ff59 	bl	1833c <WsfBufAlloc>
   1848a:	9003      	str	r0, [sp, #12]

  /* hide header */
  if (pMsg != NULL)
   1848c:	9b03      	ldr	r3, [sp, #12]
   1848e:	2b00      	cmp	r3, #0
   18490:	d002      	beq.n	18498 <WsfMsgAlloc+0x26>
  {
    pMsg++;
   18492:	9b03      	ldr	r3, [sp, #12]
   18494:	3308      	adds	r3, #8
   18496:	9303      	str	r3, [sp, #12]
  }

  return pMsg;
   18498:	9b03      	ldr	r3, [sp, #12]
}
   1849a:	4618      	mov	r0, r3
   1849c:	b005      	add	sp, #20
   1849e:	f85d fb04 	ldr.w	pc, [sp], #4

000184a2 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   184a2:	b500      	push	{lr}
   184a4:	b083      	sub	sp, #12
   184a6:	9001      	str	r0, [sp, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   184a8:	9b01      	ldr	r3, [sp, #4]
   184aa:	3b08      	subs	r3, #8
   184ac:	4618      	mov	r0, r3
   184ae:	f7ff ff8b 	bl	183c8 <WsfBufFree>
}
   184b2:	bf00      	nop
   184b4:	b003      	add	sp, #12
   184b6:	f85d fb04 	ldr.w	pc, [sp], #4

000184ba <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   184ba:	b500      	push	{lr}
   184bc:	b083      	sub	sp, #12
   184be:	4603      	mov	r3, r0
   184c0:	9100      	str	r1, [sp, #0]
   184c2:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   184c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   184ca:	4618      	mov	r0, r3
   184cc:	f000 f906 	bl	186dc <WsfTaskMsgQueue>
   184d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   184d4:	9a00      	ldr	r2, [sp, #0]
   184d6:	4619      	mov	r1, r3
   184d8:	f000 f80a 	bl	184f0 <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   184dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   184e0:	2101      	movs	r1, #1
   184e2:	4618      	mov	r0, r3
   184e4:	f000 f8da 	bl	1869c <WsfTaskSetReady>
}
   184e8:	bf00      	nop
   184ea:	b003      	add	sp, #12
   184ec:	f85d fb04 	ldr.w	pc, [sp], #4

000184f0 <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   184f0:	b500      	push	{lr}
   184f2:	b087      	sub	sp, #28
   184f4:	9003      	str	r0, [sp, #12]
   184f6:	460b      	mov	r3, r1
   184f8:	9201      	str	r2, [sp, #4]
   184fa:	f88d 300b 	strb.w	r3, [sp, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   184fe:	9b01      	ldr	r3, [sp, #4]
   18500:	3b08      	subs	r3, #8
   18502:	9305      	str	r3, [sp, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   18504:	9b05      	ldr	r3, [sp, #20]
   18506:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1850a:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   1850c:	9905      	ldr	r1, [sp, #20]
   1850e:	9803      	ldr	r0, [sp, #12]
   18510:	f000 f9c2 	bl	18898 <WsfQueueEnq>
}
   18514:	bf00      	nop
   18516:	b007      	add	sp, #28
   18518:	f85d fb04 	ldr.w	pc, [sp], #4

0001851c <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   1851c:	b500      	push	{lr}
   1851e:	b085      	sub	sp, #20
   18520:	9001      	str	r0, [sp, #4]
   18522:	9100      	str	r1, [sp, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   18524:	9801      	ldr	r0, [sp, #4]
   18526:	f000 f9d8 	bl	188da <WsfQueueDeq>
   1852a:	9003      	str	r0, [sp, #12]
   1852c:	9b03      	ldr	r3, [sp, #12]
   1852e:	2b00      	cmp	r3, #0
   18530:	d006      	beq.n	18540 <WsfMsgDeq+0x24>
  {
    *pHandlerId = pMsg->handlerId;
   18532:	9b03      	ldr	r3, [sp, #12]
   18534:	791a      	ldrb	r2, [r3, #4]
   18536:	9b00      	ldr	r3, [sp, #0]
   18538:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   1853a:	9b03      	ldr	r3, [sp, #12]
   1853c:	3308      	adds	r3, #8
   1853e:	9303      	str	r3, [sp, #12]
  }

  return pMsg;
   18540:	9b03      	ldr	r3, [sp, #12]
}
   18542:	4618      	mov	r0, r3
   18544:	b005      	add	sp, #20
   18546:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001854c <WsfCsEnter>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
  if (csNesting == 0)
   1854c:	4b06      	ldr	r3, [pc, #24]	; (18568 <WsfCsEnter+0x1c>)
   1854e:	781b      	ldrb	r3, [r3, #0]
   18550:	2b00      	cmp	r3, #0
   18552:	d100      	bne.n	18556 <WsfCsEnter+0xa>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   18554:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   18556:	4b04      	ldr	r3, [pc, #16]	; (18568 <WsfCsEnter+0x1c>)
   18558:	781b      	ldrb	r3, [r3, #0]
   1855a:	3301      	adds	r3, #1
   1855c:	b2da      	uxtb	r2, r3
   1855e:	4b02      	ldr	r3, [pc, #8]	; (18568 <WsfCsEnter+0x1c>)
   18560:	701a      	strb	r2, [r3, #0]
}
   18562:	bf00      	nop
   18564:	4770      	bx	lr
   18566:	bf00      	nop
   18568:	100036dc 	.word	0x100036dc

0001856c <WsfCsExit>:
/*************************************************************************************************/
void WsfCsExit(void)
{
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   1856c:	4b06      	ldr	r3, [pc, #24]	; (18588 <WsfCsExit+0x1c>)
   1856e:	781b      	ldrb	r3, [r3, #0]
   18570:	3b01      	subs	r3, #1
   18572:	b2da      	uxtb	r2, r3
   18574:	4b04      	ldr	r3, [pc, #16]	; (18588 <WsfCsExit+0x1c>)
   18576:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   18578:	4b03      	ldr	r3, [pc, #12]	; (18588 <WsfCsExit+0x1c>)
   1857a:	781b      	ldrb	r3, [r3, #0]
   1857c:	2b00      	cmp	r3, #0
   1857e:	d100      	bne.n	18582 <WsfCsExit+0x16>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   18580:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   18582:	bf00      	nop
   18584:	4770      	bx	lr
   18586:	bf00      	nop
   18588:	100036dc 	.word	0x100036dc

0001858c <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   1858c:	b508      	push	{r3, lr}
  WsfCsEnter();
   1858e:	f7ff ffdd 	bl	1854c <WsfCsEnter>
}
   18592:	bf00      	nop
   18594:	bd08      	pop	{r3, pc}

00018596 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   18596:	b508      	push	{r3, lr}
  WsfCsExit();
   18598:	f7ff ffe8 	bl	1856c <WsfCsExit>
}
   1859c:	bf00      	nop
   1859e:	bd08      	pop	{r3, pc}

000185a0 <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   185a0:	b500      	push	{lr}
   185a2:	b085      	sub	sp, #20
  if(xRadioTaskEventObject != NULL) 
   185a4:	4b20      	ldr	r3, [pc, #128]	; (18628 <WsfSetOsSpecificEvent+0x88>)
   185a6:	681b      	ldr	r3, [r3, #0]
   185a8:	2b00      	cmp	r3, #0
   185aa:	d039      	beq.n	18620 <WsfSetOsSpecificEvent+0x80>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   185ac:	f3ef 8305 	mrs	r3, IPSR
   185b0:	9302      	str	r3, [sp, #8]
	if( ulCurrentInterrupt == 0 )
   185b2:	9b02      	ldr	r3, [sp, #8]
   185b4:	2b00      	cmp	r3, #0
   185b6:	d102      	bne.n	185be <WsfSetOsSpecificEvent+0x1e>
		xReturn = pdFALSE;
   185b8:	2300      	movs	r3, #0
   185ba:	9301      	str	r3, [sp, #4]
   185bc:	e001      	b.n	185c2 <WsfSetOsSpecificEvent+0x22>
		xReturn = pdTRUE;
   185be:	2301      	movs	r3, #1
   185c0:	9301      	str	r3, [sp, #4]
	return xReturn;
   185c2:	9b01      	ldr	r3, [sp, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
   185c4:	2b01      	cmp	r3, #1
   185c6:	d118      	bne.n	185fa <WsfSetOsSpecificEvent+0x5a>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
   185c8:	2300      	movs	r3, #0
   185ca:	9300      	str	r3, [sp, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   185cc:	4b16      	ldr	r3, [pc, #88]	; (18628 <WsfSetOsSpecificEvent+0x88>)
   185ce:	6819      	ldr	r1, [r3, #0]
   185d0:	466b      	mov	r3, sp
   185d2:	2201      	movs	r2, #1
   185d4:	4815      	ldr	r0, [pc, #84]	; (1862c <WsfSetOsSpecificEvent+0x8c>)
   185d6:	f00b f847 	bl	23668 <xTimerPendFunctionCallFromISR>
   185da:	9003      	str	r0, [sp, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   185dc:	9b03      	ldr	r3, [sp, #12]
   185de:	2b00      	cmp	r3, #0
   185e0:	d01e      	beq.n	18620 <WsfSetOsSpecificEvent+0x80>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   185e2:	9b00      	ldr	r3, [sp, #0]
   185e4:	2b00      	cmp	r3, #0
   185e6:	d01b      	beq.n	18620 <WsfSetOsSpecificEvent+0x80>
   185e8:	4b11      	ldr	r3, [pc, #68]	; (18630 <WsfSetOsSpecificEvent+0x90>)
   185ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   185ee:	601a      	str	r2, [r3, #0]
   185f0:	f3bf 8f4f 	dsb	sy
   185f4:	f3bf 8f6f 	isb	sy
              portYIELD();
          }
      }

  }    
}
   185f8:	e012      	b.n	18620 <WsfSetOsSpecificEvent+0x80>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   185fa:	4b0b      	ldr	r3, [pc, #44]	; (18628 <WsfSetOsSpecificEvent+0x88>)
   185fc:	681b      	ldr	r3, [r3, #0]
   185fe:	2101      	movs	r1, #1
   18600:	4618      	mov	r0, r3
   18602:	f009 f9b5 	bl	21970 <xEventGroupSetBits>
   18606:	4603      	mov	r3, r0
   18608:	9303      	str	r3, [sp, #12]
          if ( xResult != pdFAIL )
   1860a:	9b03      	ldr	r3, [sp, #12]
   1860c:	2b00      	cmp	r3, #0
   1860e:	d007      	beq.n	18620 <WsfSetOsSpecificEvent+0x80>
              portYIELD();
   18610:	4b07      	ldr	r3, [pc, #28]	; (18630 <WsfSetOsSpecificEvent+0x90>)
   18612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18616:	601a      	str	r2, [r3, #0]
   18618:	f3bf 8f4f 	dsb	sy
   1861c:	f3bf 8f6f 	isb	sy
}
   18620:	bf00      	nop
   18622:	b005      	add	sp, #20
   18624:	f85d fb04 	ldr.w	pc, [sp], #4
   18628:	100036e0 	.word	0x100036e0
   1862c:	00021a5d 	.word	0x00021a5d
   18630:	e000ed04 	.word	0xe000ed04

00018634 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   18634:	b500      	push	{lr}
   18636:	b083      	sub	sp, #12
   18638:	4603      	mov	r3, r0
   1863a:	460a      	mov	r2, r1
   1863c:	f88d 3007 	strb.w	r3, [sp, #7]
   18640:	4613      	mov	r3, r2
   18642:	f88d 3006 	strb.w	r3, [sp, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   18646:	f7ff ff81 	bl	1854c <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1864a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1864e:	f003 030f 	and.w	r3, r3, #15
   18652:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18656:	f002 020f 	and.w	r2, r2, #15
   1865a:	490f      	ldr	r1, [pc, #60]	; (18698 <WsfSetEvent+0x64>)
   1865c:	440a      	add	r2, r1
   1865e:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   18662:	f89d 2006 	ldrb.w	r2, [sp, #6]
   18666:	430a      	orrs	r2, r1
   18668:	b2d1      	uxtb	r1, r2
   1866a:	4a0b      	ldr	r2, [pc, #44]	; (18698 <WsfSetEvent+0x64>)
   1866c:	4413      	add	r3, r2
   1866e:	460a      	mov	r2, r1
   18670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   18674:	4b08      	ldr	r3, [pc, #32]	; (18698 <WsfSetEvent+0x64>)
   18676:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1867a:	f043 0304 	orr.w	r3, r3, #4
   1867e:	b2da      	uxtb	r2, r3
   18680:	4b05      	ldr	r3, [pc, #20]	; (18698 <WsfSetEvent+0x64>)
   18682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   18686:	f7ff ff71 	bl	1856c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1868a:	f7ff ff89 	bl	185a0 <WsfSetOsSpecificEvent>
}
   1868e:	bf00      	nop
   18690:	b003      	add	sp, #12
   18692:	f85d fb04 	ldr.w	pc, [sp], #4
   18696:	bf00      	nop
   18698:	10008c8c 	.word	0x10008c8c

0001869c <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   1869c:	b500      	push	{lr}
   1869e:	b083      	sub	sp, #12
   186a0:	4603      	mov	r3, r0
   186a2:	460a      	mov	r2, r1
   186a4:	f88d 3007 	strb.w	r3, [sp, #7]
   186a8:	4613      	mov	r3, r2
   186aa:	f88d 3006 	strb.w	r3, [sp, #6]
  /* Unused parameter */
  (void)handlerId;

  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   186ae:	f7ff ff4d 	bl	1854c <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   186b2:	4b09      	ldr	r3, [pc, #36]	; (186d8 <WsfTaskSetReady+0x3c>)
   186b4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   186b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   186bc:	4313      	orrs	r3, r2
   186be:	b2da      	uxtb	r2, r3
   186c0:	4b05      	ldr	r3, [pc, #20]	; (186d8 <WsfTaskSetReady+0x3c>)
   186c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   186c6:	f7ff ff51 	bl	1856c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   186ca:	f7ff ff69 	bl	185a0 <WsfSetOsSpecificEvent>
}
   186ce:	bf00      	nop
   186d0:	b003      	add	sp, #12
   186d2:	f85d fb04 	ldr.w	pc, [sp], #4
   186d6:	bf00      	nop
   186d8:	10008c8c 	.word	0x10008c8c

000186dc <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   186dc:	b082      	sub	sp, #8
   186de:	4603      	mov	r3, r0
   186e0:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Unused parameter */
  (void)handlerId;

  return &(wsfOs.task.msgQueue);
   186e4:	4b01      	ldr	r3, [pc, #4]	; (186ec <WsfTaskMsgQueue+0x10>)
}
   186e6:	4618      	mov	r0, r3
   186e8:	b002      	add	sp, #8
   186ea:	4770      	bx	lr
   186ec:	10008cbc 	.word	0x10008cbc

000186f0 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   186f0:	b084      	sub	sp, #16
   186f2:	9001      	str	r0, [sp, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   186f4:	4b0a      	ldr	r3, [pc, #40]	; (18720 <WsfOsSetNextHandler+0x30>)
   186f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   186fa:	1c5a      	adds	r2, r3, #1
   186fc:	b2d1      	uxtb	r1, r2
   186fe:	4a08      	ldr	r2, [pc, #32]	; (18720 <WsfOsSetNextHandler+0x30>)
   18700:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   18704:	f88d 300f 	strb.w	r3, [sp, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   18708:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1870c:	4904      	ldr	r1, [pc, #16]	; (18720 <WsfOsSetNextHandler+0x30>)
   1870e:	9a01      	ldr	r2, [sp, #4]
   18710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   18714:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   18718:	4618      	mov	r0, r3
   1871a:	b004      	add	sp, #16
   1871c:	4770      	bx	lr
   1871e:	bf00      	nop
   18720:	10008c8c 	.word	0x10008c8c

00018724 <WsfOsInit>:
*
*  \return None.
*/
/*************************************************************************************************/
void WsfOsInit(void)
{
   18724:	b508      	push	{r3, lr}
  memset(&wsfOs, 0, sizeof(wsfOs));
   18726:	223c      	movs	r2, #60	; 0x3c
   18728:	2100      	movs	r1, #0
   1872a:	4807      	ldr	r0, [pc, #28]	; (18748 <WsfOsInit+0x24>)
   1872c:	f7f3 fdb2 	bl	c294 <memset>

  if( xRadioTaskEventObject == NULL)
   18730:	4b06      	ldr	r3, [pc, #24]	; (1874c <WsfOsInit+0x28>)
   18732:	681b      	ldr	r3, [r3, #0]
   18734:	2b00      	cmp	r3, #0
   18736:	d104      	bne.n	18742 <WsfOsInit+0x1e>
  {
    xRadioTaskEventObject = xEventGroupCreate();
   18738:	f009 f85e 	bl	217f8 <xEventGroupCreate>
   1873c:	4602      	mov	r2, r0
   1873e:	4b03      	ldr	r3, [pc, #12]	; (1874c <WsfOsInit+0x28>)
   18740:	601a      	str	r2, [r3, #0]

    WSF_ASSERT(xRadioTaskEventObject != NULL);
  }
}
   18742:	bf00      	nop
   18744:	bd08      	pop	{r3, pc}
   18746:	bf00      	nop
   18748:	10008c8c 	.word	0x10008c8c
   1874c:	100036e0 	.word	0x100036e0

00018750 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   18750:	b500      	push	{lr}
   18752:	b089      	sub	sp, #36	; 0x24
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   18754:	4b4e      	ldr	r3, [pc, #312]	; (18890 <wsfOsDispatcher+0x140>)
   18756:	9306      	str	r3, [sp, #24]

  WsfTimerUpdateTicks();
   18758:	f000 fab4 	bl	18cc4 <WsfTimerUpdateTicks>

  while (pTask->taskEventMask)
   1875c:	e083      	b.n	18866 <wsfOsDispatcher+0x116>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   1875e:	f7ff fef5 	bl	1854c <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   18762:	9b06      	ldr	r3, [sp, #24]
   18764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   18768:	f88d 3017 	strb.w	r3, [sp, #23]
    pTask->taskEventMask = 0;
   1876c:	9b06      	ldr	r3, [sp, #24]
   1876e:	2200      	movs	r2, #0
   18770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   18774:	f7ff fefa 	bl	1856c <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   18778:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1877c:	f003 0301 	and.w	r3, r3, #1
   18780:	2b00      	cmp	r3, #0
   18782:	d018      	beq.n	187b6 <wsfOsDispatcher+0x66>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   18784:	e00b      	b.n	1879e <wsfOsDispatcher+0x4e>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   18786:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1878a:	461a      	mov	r2, r3
   1878c:	9b06      	ldr	r3, [sp, #24]
   1878e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18792:	9904      	ldr	r1, [sp, #16]
   18794:	2000      	movs	r0, #0
   18796:	4798      	blx	r3
        WsfMsgFree(pMsg);
   18798:	9804      	ldr	r0, [sp, #16]
   1879a:	f7ff fe82 	bl	184a2 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1879e:	9b06      	ldr	r3, [sp, #24]
   187a0:	3330      	adds	r3, #48	; 0x30
   187a2:	f10d 020a 	add.w	r2, sp, #10
   187a6:	4611      	mov	r1, r2
   187a8:	4618      	mov	r0, r3
   187aa:	f7ff feb7 	bl	1851c <WsfMsgDeq>
   187ae:	9004      	str	r0, [sp, #16]
   187b0:	9b04      	ldr	r3, [sp, #16]
   187b2:	2b00      	cmp	r3, #0
   187b4:	d1e7      	bne.n	18786 <wsfOsDispatcher+0x36>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   187b6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   187ba:	f003 0302 	and.w	r3, r3, #2
   187be:	2b00      	cmp	r3, #0
   187c0:	d012      	beq.n	187e8 <wsfOsDispatcher+0x98>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   187c2:	e00a      	b.n	187da <wsfOsDispatcher+0x8a>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   187c4:	9b03      	ldr	r3, [sp, #12]
   187c6:	7a1b      	ldrb	r3, [r3, #8]
   187c8:	461a      	mov	r2, r3
   187ca:	9b06      	ldr	r3, [sp, #24]
   187cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   187d0:	9a03      	ldr	r2, [sp, #12]
   187d2:	320a      	adds	r2, #10
   187d4:	4611      	mov	r1, r2
   187d6:	2000      	movs	r0, #0
   187d8:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   187da:	2000      	movs	r0, #0
   187dc:	f000 fa4a 	bl	18c74 <WsfTimerServiceExpired>
   187e0:	9003      	str	r0, [sp, #12]
   187e2:	9b03      	ldr	r3, [sp, #12]
   187e4:	2b00      	cmp	r3, #0
   187e6:	d1ed      	bne.n	187c4 <wsfOsDispatcher+0x74>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   187e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   187ec:	f003 0304 	and.w	r3, r3, #4
   187f0:	2b00      	cmp	r3, #0
   187f2:	d038      	beq.n	18866 <wsfOsDispatcher+0x116>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   187f4:	2300      	movs	r3, #0
   187f6:	f88d 301f 	strb.w	r3, [sp, #31]
   187fa:	e030      	b.n	1885e <wsfOsDispatcher+0x10e>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   187fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18800:	9a06      	ldr	r2, [sp, #24]
   18802:	4413      	add	r3, r2
   18804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18808:	2b00      	cmp	r3, #0
   1880a:	d023      	beq.n	18854 <wsfOsDispatcher+0x104>
   1880c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   18810:	9b06      	ldr	r3, [sp, #24]
   18812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18816:	2b00      	cmp	r3, #0
   18818:	d01c      	beq.n	18854 <wsfOsDispatcher+0x104>
        {
          WSF_CS_ENTER(cs);
   1881a:	f7ff fe97 	bl	1854c <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   1881e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18822:	9a06      	ldr	r2, [sp, #24]
   18824:	4413      	add	r3, r2
   18826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1882a:	f88d 300b 	strb.w	r3, [sp, #11]
          pTask->handlerEventMask[i] = 0;
   1882e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18832:	9a06      	ldr	r2, [sp, #24]
   18834:	4413      	add	r3, r2
   18836:	2200      	movs	r2, #0
   18838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   1883c:	f7ff fe96 	bl	1856c <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   18840:	f89d 201f 	ldrb.w	r2, [sp, #31]
   18844:	9b06      	ldr	r3, [sp, #24]
   18846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1884a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1884e:	2100      	movs	r1, #0
   18850:	4610      	mov	r0, r2
   18852:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   18854:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18858:	3301      	adds	r3, #1
   1885a:	f88d 301f 	strb.w	r3, [sp, #31]
   1885e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18862:	2b08      	cmp	r3, #8
   18864:	d9ca      	bls.n	187fc <wsfOsDispatcher+0xac>
  while (pTask->taskEventMask)
   18866:	9b06      	ldr	r3, [sp, #24]
   18868:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1886c:	2b00      	cmp	r3, #0
   1886e:	f47f af76 	bne.w	1875e <wsfOsDispatcher+0xe>
        }
      }
    }
  }
  xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
   18872:	4b08      	ldr	r3, [pc, #32]	; (18894 <wsfOsDispatcher+0x144>)
   18874:	6818      	ldr	r0, [r3, #0]
   18876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1887a:	9300      	str	r3, [sp, #0]
   1887c:	2300      	movs	r3, #0
   1887e:	2201      	movs	r2, #1
   18880:	2101      	movs	r1, #1
   18882:	f008 ffcf 	bl	21824 <xEventGroupWaitBits>
                      pdFALSE, portMAX_DELAY);
}
   18886:	bf00      	nop
   18888:	b009      	add	sp, #36	; 0x24
   1888a:	f85d fb04 	ldr.w	pc, [sp], #4
   1888e:	bf00      	nop
   18890:	10008c8c 	.word	0x10008c8c
   18894:	100036e0 	.word	0x100036e0

00018898 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   18898:	b500      	push	{lr}
   1889a:	b083      	sub	sp, #12
   1889c:	9001      	str	r0, [sp, #4]
   1889e:	9100      	str	r1, [sp, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   188a0:	9b00      	ldr	r3, [sp, #0]
   188a2:	2200      	movs	r2, #0
   188a4:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   188a6:	f7ff fe51 	bl	1854c <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   188aa:	9b01      	ldr	r3, [sp, #4]
   188ac:	681b      	ldr	r3, [r3, #0]
   188ae:	2b00      	cmp	r3, #0
   188b0:	d106      	bne.n	188c0 <WsfQueueEnq+0x28>
  {
    pQueue->pHead = pElem;
   188b2:	9b01      	ldr	r3, [sp, #4]
   188b4:	9a00      	ldr	r2, [sp, #0]
   188b6:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   188b8:	9b01      	ldr	r3, [sp, #4]
   188ba:	9a00      	ldr	r2, [sp, #0]
   188bc:	605a      	str	r2, [r3, #4]
   188be:	e006      	b.n	188ce <WsfQueueEnq+0x36>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   188c0:	9b01      	ldr	r3, [sp, #4]
   188c2:	685b      	ldr	r3, [r3, #4]
   188c4:	9a00      	ldr	r2, [sp, #0]
   188c6:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   188c8:	9b01      	ldr	r3, [sp, #4]
   188ca:	9a00      	ldr	r2, [sp, #0]
   188cc:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   188ce:	f7ff fe4d 	bl	1856c <WsfCsExit>
}
   188d2:	bf00      	nop
   188d4:	b003      	add	sp, #12
   188d6:	f85d fb04 	ldr.w	pc, [sp], #4

000188da <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   188da:	b500      	push	{lr}
   188dc:	b085      	sub	sp, #20
   188de:	9001      	str	r0, [sp, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   188e0:	f7ff fe34 	bl	1854c <WsfCsEnter>

  pElem = pQueue->pHead;
   188e4:	9b01      	ldr	r3, [sp, #4]
   188e6:	681b      	ldr	r3, [r3, #0]
   188e8:	9303      	str	r3, [sp, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   188ea:	9b03      	ldr	r3, [sp, #12]
   188ec:	2b00      	cmp	r3, #0
   188ee:	d00a      	beq.n	18906 <WsfQueueDeq+0x2c>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   188f0:	9b03      	ldr	r3, [sp, #12]
   188f2:	681a      	ldr	r2, [r3, #0]
   188f4:	9b01      	ldr	r3, [sp, #4]
   188f6:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   188f8:	9b01      	ldr	r3, [sp, #4]
   188fa:	681b      	ldr	r3, [r3, #0]
   188fc:	2b00      	cmp	r3, #0
   188fe:	d102      	bne.n	18906 <WsfQueueDeq+0x2c>
    {
      pQueue->pTail = NULL;
   18900:	9b01      	ldr	r3, [sp, #4]
   18902:	2200      	movs	r2, #0
   18904:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   18906:	f7ff fe31 	bl	1856c <WsfCsExit>

  return pElem;
   1890a:	9b03      	ldr	r3, [sp, #12]
}
   1890c:	4618      	mov	r0, r3
   1890e:	b005      	add	sp, #20
   18910:	f85d fb04 	ldr.w	pc, [sp], #4

00018914 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   18914:	b500      	push	{lr}
   18916:	b083      	sub	sp, #12
   18918:	9001      	str	r0, [sp, #4]
   1891a:	9100      	str	r1, [sp, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1891c:	f7ff fe16 	bl	1854c <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   18920:	9b01      	ldr	r3, [sp, #4]
   18922:	681a      	ldr	r2, [r3, #0]
   18924:	9b00      	ldr	r3, [sp, #0]
   18926:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   18928:	9b01      	ldr	r3, [sp, #4]
   1892a:	681b      	ldr	r3, [r3, #0]
   1892c:	2b00      	cmp	r3, #0
   1892e:	d102      	bne.n	18936 <WsfQueuePush+0x22>
  {
    pQueue->pTail = pElem;
   18930:	9b01      	ldr	r3, [sp, #4]
   18932:	9a00      	ldr	r2, [sp, #0]
   18934:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   18936:	9b01      	ldr	r3, [sp, #4]
   18938:	9a00      	ldr	r2, [sp, #0]
   1893a:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1893c:	f7ff fe16 	bl	1856c <WsfCsExit>
}
   18940:	bf00      	nop
   18942:	b003      	add	sp, #12
   18944:	f85d fb04 	ldr.w	pc, [sp], #4

00018948 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   18948:	b500      	push	{lr}
   1894a:	b085      	sub	sp, #20
   1894c:	9003      	str	r0, [sp, #12]
   1894e:	9102      	str	r1, [sp, #8]
   18950:	9201      	str	r2, [sp, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   18952:	f7ff fdfb 	bl	1854c <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   18956:	9b03      	ldr	r3, [sp, #12]
   18958:	681b      	ldr	r3, [r3, #0]
   1895a:	2b00      	cmp	r3, #0
   1895c:	d004      	beq.n	18968 <WsfQueueInsert+0x20>
   1895e:	9b03      	ldr	r3, [sp, #12]
   18960:	685a      	ldr	r2, [r3, #4]
   18962:	9b01      	ldr	r3, [sp, #4]
   18964:	429a      	cmp	r2, r3
   18966:	d104      	bne.n	18972 <WsfQueueInsert+0x2a>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   18968:	9902      	ldr	r1, [sp, #8]
   1896a:	9803      	ldr	r0, [sp, #12]
   1896c:	f7ff ff94 	bl	18898 <WsfQueueEnq>
   18970:	e00e      	b.n	18990 <WsfQueueInsert+0x48>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   18972:	9b01      	ldr	r3, [sp, #4]
   18974:	2b00      	cmp	r3, #0
   18976:	d104      	bne.n	18982 <WsfQueueInsert+0x3a>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   18978:	9902      	ldr	r1, [sp, #8]
   1897a:	9803      	ldr	r0, [sp, #12]
   1897c:	f7ff ffca 	bl	18914 <WsfQueuePush>
   18980:	e006      	b.n	18990 <WsfQueueInsert+0x48>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   18982:	9b01      	ldr	r3, [sp, #4]
   18984:	681a      	ldr	r2, [r3, #0]
   18986:	9b02      	ldr	r3, [sp, #8]
   18988:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   1898a:	9b01      	ldr	r3, [sp, #4]
   1898c:	9a02      	ldr	r2, [sp, #8]
   1898e:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   18990:	f7ff fdec 	bl	1856c <WsfCsExit>
}
   18994:	bf00      	nop
   18996:	b005      	add	sp, #20
   18998:	f85d fb04 	ldr.w	pc, [sp], #4

0001899c <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1899c:	b500      	push	{lr}
   1899e:	b085      	sub	sp, #20
   189a0:	9003      	str	r0, [sp, #12]
   189a2:	9102      	str	r1, [sp, #8]
   189a4:	9201      	str	r2, [sp, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   189a6:	f7ff fdd1 	bl	1854c <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   189aa:	9b03      	ldr	r3, [sp, #12]
   189ac:	681a      	ldr	r2, [r3, #0]
   189ae:	9b02      	ldr	r3, [sp, #8]
   189b0:	429a      	cmp	r2, r3
   189b2:	d104      	bne.n	189be <WsfQueueRemove+0x22>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   189b4:	9b02      	ldr	r3, [sp, #8]
   189b6:	681a      	ldr	r2, [r3, #0]
   189b8:	9b03      	ldr	r3, [sp, #12]
   189ba:	601a      	str	r2, [r3, #0]
   189bc:	e006      	b.n	189cc <WsfQueueRemove+0x30>
  }
  else if (pPrev)
   189be:	9b01      	ldr	r3, [sp, #4]
   189c0:	2b00      	cmp	r3, #0
   189c2:	d003      	beq.n	189cc <WsfQueueRemove+0x30>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   189c4:	9b02      	ldr	r3, [sp, #8]
   189c6:	681a      	ldr	r2, [r3, #0]
   189c8:	9b01      	ldr	r3, [sp, #4]
   189ca:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   189cc:	9b03      	ldr	r3, [sp, #12]
   189ce:	685a      	ldr	r2, [r3, #4]
   189d0:	9b02      	ldr	r3, [sp, #8]
   189d2:	429a      	cmp	r2, r3
   189d4:	d102      	bne.n	189dc <WsfQueueRemove+0x40>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   189d6:	9b03      	ldr	r3, [sp, #12]
   189d8:	9a01      	ldr	r2, [sp, #4]
   189da:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   189dc:	f7ff fdc6 	bl	1856c <WsfCsExit>
}
   189e0:	bf00      	nop
   189e2:	b005      	add	sp, #20
   189e4:	f85d fb04 	ldr.w	pc, [sp], #4

000189e8 <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   189e8:	b500      	push	{lr}
   189ea:	b085      	sub	sp, #20
   189ec:	9001      	str	r0, [sp, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   189ee:	2300      	movs	r3, #0
   189f0:	f8ad 300a 	strh.w	r3, [sp, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   189f4:	f7ff fdaa 	bl	1854c <WsfCsEnter>

  pElem = pQueue->pHead;
   189f8:	9b01      	ldr	r3, [sp, #4]
   189fa:	681b      	ldr	r3, [r3, #0]
   189fc:	9303      	str	r3, [sp, #12]

  /* iterate over queue */
  while (pElem != NULL)
   189fe:	e007      	b.n	18a10 <WsfQueueCount+0x28>
  {
    count++;
   18a00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   18a04:	3301      	adds	r3, #1
   18a06:	f8ad 300a 	strh.w	r3, [sp, #10]
    pElem = pElem->pNext;
   18a0a:	9b03      	ldr	r3, [sp, #12]
   18a0c:	681b      	ldr	r3, [r3, #0]
   18a0e:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   18a10:	9b03      	ldr	r3, [sp, #12]
   18a12:	2b00      	cmp	r3, #0
   18a14:	d1f4      	bne.n	18a00 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   18a16:	f7ff fda9 	bl	1856c <WsfCsExit>

  return count;
   18a1a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
}
   18a1e:	4618      	mov	r0, r3
   18a20:	b005      	add	sp, #20
   18a22:	f85d fb04 	ldr.w	pc, [sp], #4

00018a26 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   18a26:	b500      	push	{lr}
   18a28:	b085      	sub	sp, #20
   18a2a:	9001      	str	r0, [sp, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   18a2c:	f7ff fd8e 	bl	1854c <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   18a30:	9b01      	ldr	r3, [sp, #4]
   18a32:	681b      	ldr	r3, [r3, #0]
   18a34:	2b00      	cmp	r3, #0
   18a36:	bf0c      	ite	eq
   18a38:	2301      	moveq	r3, #1
   18a3a:	2300      	movne	r3, #0
   18a3c:	b2db      	uxtb	r3, r3
   18a3e:	f88d 300f 	strb.w	r3, [sp, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   18a42:	f7ff fd93 	bl	1856c <WsfCsExit>

  return empty;
   18a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   18a4a:	4618      	mov	r0, r3
   18a4c:	b005      	add	sp, #20
   18a4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00018a54 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   18a54:	b500      	push	{lr}
   18a56:	b085      	sub	sp, #20
   18a58:	9001      	str	r0, [sp, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   18a5a:	2300      	movs	r3, #0
   18a5c:	9302      	str	r3, [sp, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   18a5e:	4b10      	ldr	r3, [pc, #64]	; (18aa0 <wsfTimerRemove+0x4c>)
   18a60:	681b      	ldr	r3, [r3, #0]
   18a62:	9303      	str	r3, [sp, #12]

  /* find timer in queue */
  while (pElem != NULL)
   18a64:	e008      	b.n	18a78 <wsfTimerRemove+0x24>
  {
    if (pElem == pTimer)
   18a66:	9a03      	ldr	r2, [sp, #12]
   18a68:	9b01      	ldr	r3, [sp, #4]
   18a6a:	429a      	cmp	r2, r3
   18a6c:	d008      	beq.n	18a80 <wsfTimerRemove+0x2c>
    {
      break;
    }
    pPrev = pElem;
   18a6e:	9b03      	ldr	r3, [sp, #12]
   18a70:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
   18a72:	9b03      	ldr	r3, [sp, #12]
   18a74:	681b      	ldr	r3, [r3, #0]
   18a76:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   18a78:	9b03      	ldr	r3, [sp, #12]
   18a7a:	2b00      	cmp	r3, #0
   18a7c:	d1f3      	bne.n	18a66 <wsfTimerRemove+0x12>
   18a7e:	e000      	b.n	18a82 <wsfTimerRemove+0x2e>
      break;
   18a80:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   18a82:	9b03      	ldr	r3, [sp, #12]
   18a84:	2b00      	cmp	r3, #0
   18a86:	d007      	beq.n	18a98 <wsfTimerRemove+0x44>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   18a88:	9a02      	ldr	r2, [sp, #8]
   18a8a:	9901      	ldr	r1, [sp, #4]
   18a8c:	4804      	ldr	r0, [pc, #16]	; (18aa0 <wsfTimerRemove+0x4c>)
   18a8e:	f7ff ff85 	bl	1899c <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   18a92:	9b01      	ldr	r3, [sp, #4]
   18a94:	2200      	movs	r2, #0
   18a96:	725a      	strb	r2, [r3, #9]
  }
}
   18a98:	bf00      	nop
   18a9a:	b005      	add	sp, #20
   18a9c:	f85d fb04 	ldr.w	pc, [sp], #4
   18aa0:	10008cc8 	.word	0x10008cc8

00018aa4 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   18aa4:	b500      	push	{lr}
   18aa6:	b085      	sub	sp, #20
   18aa8:	9001      	str	r0, [sp, #4]
   18aaa:	9100      	str	r1, [sp, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   18aac:	2300      	movs	r3, #0
   18aae:	9302      	str	r3, [sp, #8]

  /* task schedule lock */
  WsfTaskLock();
   18ab0:	f7ff fd6c 	bl	1858c <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   18ab4:	9b01      	ldr	r3, [sp, #4]
   18ab6:	7a5b      	ldrb	r3, [r3, #9]
   18ab8:	2b00      	cmp	r3, #0
   18aba:	d002      	beq.n	18ac2 <wsfTimerInsert+0x1e>
  {
    wsfTimerRemove(pTimer);
   18abc:	9801      	ldr	r0, [sp, #4]
   18abe:	f7ff ffc9 	bl	18a54 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   18ac2:	9b01      	ldr	r3, [sp, #4]
   18ac4:	2201      	movs	r2, #1
   18ac6:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
   18ac8:	9b01      	ldr	r3, [sp, #4]
   18aca:	9a00      	ldr	r2, [sp, #0]
   18acc:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   18ace:	4b0f      	ldr	r3, [pc, #60]	; (18b0c <wsfTimerInsert+0x68>)
   18ad0:	681b      	ldr	r3, [r3, #0]
   18ad2:	9303      	str	r3, [sp, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   18ad4:	e00a      	b.n	18aec <wsfTimerInsert+0x48>
  {
    if (pTimer->ticks < pElem->ticks)
   18ad6:	9b01      	ldr	r3, [sp, #4]
   18ad8:	685a      	ldr	r2, [r3, #4]
   18ada:	9b03      	ldr	r3, [sp, #12]
   18adc:	685b      	ldr	r3, [r3, #4]
   18ade:	429a      	cmp	r2, r3
   18ae0:	d308      	bcc.n	18af4 <wsfTimerInsert+0x50>
    {
      break;
    }
    pPrev = pElem;
   18ae2:	9b03      	ldr	r3, [sp, #12]
   18ae4:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
   18ae6:	9b03      	ldr	r3, [sp, #12]
   18ae8:	681b      	ldr	r3, [r3, #0]
   18aea:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   18aec:	9b03      	ldr	r3, [sp, #12]
   18aee:	2b00      	cmp	r3, #0
   18af0:	d1f1      	bne.n	18ad6 <wsfTimerInsert+0x32>
   18af2:	e000      	b.n	18af6 <wsfTimerInsert+0x52>
      break;
   18af4:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   18af6:	9a02      	ldr	r2, [sp, #8]
   18af8:	9901      	ldr	r1, [sp, #4]
   18afa:	4804      	ldr	r0, [pc, #16]	; (18b0c <wsfTimerInsert+0x68>)
   18afc:	f7ff ff24 	bl	18948 <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   18b00:	f7ff fd49 	bl	18596 <WsfTaskUnlock>
}
   18b04:	bf00      	nop
   18b06:	b005      	add	sp, #20
   18b08:	f85d fb04 	ldr.w	pc, [sp], #4
   18b0c:	10008cc8 	.word	0x10008cc8

00018b10 <WsfTimer_handler>:

static void WsfTimer_handler(TimerHandle_t xTimer)
{
   18b10:	b500      	push	{lr}
   18b12:	b083      	sub	sp, #12
   18b14:	9001      	str	r0, [sp, #4]
  WsfTaskSetReady(0, WSF_TIMER_EVENT);
   18b16:	2102      	movs	r1, #2
   18b18:	2000      	movs	r0, #0
   18b1a:	f7ff fdbf 	bl	1869c <WsfTaskSetReady>
}
   18b1e:	bf00      	nop
   18b20:	b003      	add	sp, #12
   18b22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00018b28 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   18b28:	b500      	push	{lr}
   18b2a:	b083      	sub	sp, #12
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   18b2c:	4b0e      	ldr	r3, [pc, #56]	; (18b68 <WsfTimerInit+0x40>)
   18b2e:	2200      	movs	r2, #0
   18b30:	601a      	str	r2, [r3, #0]
   18b32:	4b0d      	ldr	r3, [pc, #52]	; (18b68 <WsfTimerInit+0x40>)
   18b34:	2200      	movs	r2, #0
   18b36:	605a      	str	r2, [r3, #4]

  if(xWsfTimer == NULL)
   18b38:	4b0c      	ldr	r3, [pc, #48]	; (18b6c <WsfTimerInit+0x44>)
   18b3a:	681b      	ldr	r3, [r3, #0]
   18b3c:	2b00      	cmp	r3, #0
   18b3e:	d10f      	bne.n	18b60 <WsfTimerInit+0x38>
  {
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   18b40:	4b0b      	ldr	r3, [pc, #44]	; (18b70 <WsfTimerInit+0x48>)
   18b42:	9300      	str	r3, [sp, #0]
   18b44:	2300      	movs	r3, #0
   18b46:	2200      	movs	r2, #0
   18b48:	210a      	movs	r1, #10
   18b4a:	480a      	ldr	r0, [pc, #40]	; (18b74 <WsfTimerInit+0x4c>)
   18b4c:	f00a faea 	bl	23124 <xTimerCreate>
   18b50:	4602      	mov	r2, r0
   18b52:	4b06      	ldr	r3, [pc, #24]	; (18b6c <WsfTimerInit+0x44>)
   18b54:	601a      	str	r2, [r3, #0]
          pdFALSE, NULL, WsfTimer_handler);
    configASSERT(xWsfTimer);
   18b56:	4b05      	ldr	r3, [pc, #20]	; (18b6c <WsfTimerInit+0x44>)
   18b58:	681b      	ldr	r3, [r3, #0]
   18b5a:	2b00      	cmp	r3, #0
   18b5c:	d100      	bne.n	18b60 <WsfTimerInit+0x38>
   18b5e:	e7fe      	b.n	18b5e <WsfTimerInit+0x36>
  }
}
   18b60:	bf00      	nop
   18b62:	b003      	add	sp, #12
   18b64:	f85d fb04 	ldr.w	pc, [sp], #4
   18b68:	10008cc8 	.word	0x10008cc8
   18b6c:	10008cd0 	.word	0x10008cd0
   18b70:	00018b11 	.word	0x00018b11
   18b74:	00028974 	.word	0x00028974

00018b78 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   18b78:	b500      	push	{lr}
   18b7a:	b083      	sub	sp, #12
   18b7c:	9001      	str	r0, [sp, #4]
   18b7e:	9100      	str	r1, [sp, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   18b80:	9b00      	ldr	r3, [sp, #0]
   18b82:	2264      	movs	r2, #100	; 0x64
   18b84:	fb02 f303 	mul.w	r3, r2, r3
   18b88:	4619      	mov	r1, r3
   18b8a:	9801      	ldr	r0, [sp, #4]
   18b8c:	f7ff ff8a 	bl	18aa4 <wsfTimerInsert>
}
   18b90:	bf00      	nop
   18b92:	b003      	add	sp, #12
   18b94:	f85d fb04 	ldr.w	pc, [sp], #4

00018b98 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   18b98:	b500      	push	{lr}
   18b9a:	b083      	sub	sp, #12
   18b9c:	9001      	str	r0, [sp, #4]
   18b9e:	9100      	str	r1, [sp, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   18ba0:	9b00      	ldr	r3, [sp, #0]
   18ba2:	4a06      	ldr	r2, [pc, #24]	; (18bbc <WsfTimerStartMs+0x24>)
   18ba4:	fba2 2303 	umull	r2, r3, r2, r3
   18ba8:	08db      	lsrs	r3, r3, #3
   18baa:	4619      	mov	r1, r3
   18bac:	9801      	ldr	r0, [sp, #4]
   18bae:	f7ff ff79 	bl	18aa4 <wsfTimerInsert>
}
   18bb2:	bf00      	nop
   18bb4:	b003      	add	sp, #12
   18bb6:	f85d fb04 	ldr.w	pc, [sp], #4
   18bba:	bf00      	nop
   18bbc:	cccccccd 	.word	0xcccccccd

00018bc0 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   18bc0:	b500      	push	{lr}
   18bc2:	b083      	sub	sp, #12
   18bc4:	9001      	str	r0, [sp, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   18bc6:	f7ff fce1 	bl	1858c <WsfTaskLock>

  wsfTimerRemove(pTimer);
   18bca:	9801      	ldr	r0, [sp, #4]
   18bcc:	f7ff ff42 	bl	18a54 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   18bd0:	f7ff fce1 	bl	18596 <WsfTaskUnlock>
}
   18bd4:	bf00      	nop
   18bd6:	b003      	add	sp, #12
   18bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00018bdc <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   18bdc:	b500      	push	{lr}
   18bde:	b085      	sub	sp, #20
   18be0:	9001      	str	r0, [sp, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   18be2:	f7ff fcd3 	bl	1858c <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   18be6:	4b12      	ldr	r3, [pc, #72]	; (18c30 <WsfTimerUpdate+0x54>)
   18be8:	681b      	ldr	r3, [r3, #0]
   18bea:	9303      	str	r3, [sp, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   18bec:	e017      	b.n	18c1e <WsfTimerUpdate+0x42>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   18bee:	9b03      	ldr	r3, [sp, #12]
   18bf0:	685a      	ldr	r2, [r3, #4]
   18bf2:	9b01      	ldr	r3, [sp, #4]
   18bf4:	429a      	cmp	r2, r3
   18bf6:	d906      	bls.n	18c06 <WsfTimerUpdate+0x2a>
    {
      pElem->ticks -= ticks;
   18bf8:	9b03      	ldr	r3, [sp, #12]
   18bfa:	685a      	ldr	r2, [r3, #4]
   18bfc:	9b01      	ldr	r3, [sp, #4]
   18bfe:	1ad2      	subs	r2, r2, r3
   18c00:	9b03      	ldr	r3, [sp, #12]
   18c02:	605a      	str	r2, [r3, #4]
   18c04:	e008      	b.n	18c18 <WsfTimerUpdate+0x3c>
    }
    else
    {
      pElem->ticks = 0;
   18c06:	9b03      	ldr	r3, [sp, #12]
   18c08:	2200      	movs	r2, #0
   18c0a:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   18c0c:	9b03      	ldr	r3, [sp, #12]
   18c0e:	7a1b      	ldrb	r3, [r3, #8]
   18c10:	2102      	movs	r1, #2
   18c12:	4618      	mov	r0, r3
   18c14:	f7ff fd42 	bl	1869c <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   18c18:	9b03      	ldr	r3, [sp, #12]
   18c1a:	681b      	ldr	r3, [r3, #0]
   18c1c:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   18c1e:	9b03      	ldr	r3, [sp, #12]
   18c20:	2b00      	cmp	r3, #0
   18c22:	d1e4      	bne.n	18bee <WsfTimerUpdate+0x12>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   18c24:	f7ff fcb7 	bl	18596 <WsfTaskUnlock>
}
   18c28:	bf00      	nop
   18c2a:	b005      	add	sp, #20
   18c2c:	f85d fb04 	ldr.w	pc, [sp], #4
   18c30:	10008cc8 	.word	0x10008cc8

00018c34 <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   18c34:	b500      	push	{lr}
   18c36:	b085      	sub	sp, #20
   18c38:	9001      	str	r0, [sp, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   18c3a:	f7ff fca7 	bl	1858c <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   18c3e:	4b0c      	ldr	r3, [pc, #48]	; (18c70 <WsfTimerNextExpiration+0x3c>)
   18c40:	681b      	ldr	r3, [r3, #0]
   18c42:	2b00      	cmp	r3, #0
   18c44:	d105      	bne.n	18c52 <WsfTimerNextExpiration+0x1e>
  {
    *pTimerRunning = FALSE;
   18c46:	9b01      	ldr	r3, [sp, #4]
   18c48:	2200      	movs	r2, #0
   18c4a:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   18c4c:	2300      	movs	r3, #0
   18c4e:	9303      	str	r3, [sp, #12]
   18c50:	e006      	b.n	18c60 <WsfTimerNextExpiration+0x2c>
  }
  else
  {
    *pTimerRunning = TRUE;
   18c52:	9b01      	ldr	r3, [sp, #4]
   18c54:	2201      	movs	r2, #1
   18c56:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   18c58:	4b05      	ldr	r3, [pc, #20]	; (18c70 <WsfTimerNextExpiration+0x3c>)
   18c5a:	681b      	ldr	r3, [r3, #0]
   18c5c:	685b      	ldr	r3, [r3, #4]
   18c5e:	9303      	str	r3, [sp, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   18c60:	f7ff fc99 	bl	18596 <WsfTaskUnlock>

  return ticks;
   18c64:	9b03      	ldr	r3, [sp, #12]
}
   18c66:	4618      	mov	r0, r3
   18c68:	b005      	add	sp, #20
   18c6a:	f85d fb04 	ldr.w	pc, [sp], #4
   18c6e:	bf00      	nop
   18c70:	10008cc8 	.word	0x10008cc8

00018c74 <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   18c74:	b500      	push	{lr}
   18c76:	b085      	sub	sp, #20
   18c78:	4603      	mov	r3, r0
   18c7a:	f88d 3007 	strb.w	r3, [sp, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   18c7e:	2300      	movs	r3, #0
   18c80:	9303      	str	r3, [sp, #12]

  /* Unused parameters */
  (void)taskId;

  /* task schedule lock */
  WsfTaskLock();
   18c82:	f7ff fc83 	bl	1858c <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   18c86:	4b0e      	ldr	r3, [pc, #56]	; (18cc0 <WsfTimerServiceExpired+0x4c>)
   18c88:	681b      	ldr	r3, [r3, #0]
   18c8a:	9302      	str	r3, [sp, #8]
   18c8c:	9b02      	ldr	r3, [sp, #8]
   18c8e:	2b00      	cmp	r3, #0
   18c90:	d00f      	beq.n	18cb2 <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   18c92:	9b02      	ldr	r3, [sp, #8]
   18c94:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   18c96:	2b00      	cmp	r3, #0
   18c98:	d10b      	bne.n	18cb2 <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   18c9a:	9a03      	ldr	r2, [sp, #12]
   18c9c:	9902      	ldr	r1, [sp, #8]
   18c9e:	4808      	ldr	r0, [pc, #32]	; (18cc0 <WsfTimerServiceExpired+0x4c>)
   18ca0:	f7ff fe7c 	bl	1899c <WsfQueueRemove>

    pElem->isStarted = FALSE;
   18ca4:	9b02      	ldr	r3, [sp, #8]
   18ca6:	2200      	movs	r2, #0
   18ca8:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
   18caa:	f7ff fc74 	bl	18596 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   18cae:	9b02      	ldr	r3, [sp, #8]
   18cb0:	e002      	b.n	18cb8 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   18cb2:	f7ff fc70 	bl	18596 <WsfTaskUnlock>

  return NULL;
   18cb6:	2300      	movs	r3, #0
}
   18cb8:	4618      	mov	r0, r3
   18cba:	b005      	add	sp, #20
   18cbc:	f85d fb04 	ldr.w	pc, [sp], #4
   18cc0:	10008cc8 	.word	0x10008cc8

00018cc4 <WsfTimerUpdateTicks>:
//
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void WsfTimerUpdateTicks(void)
{
   18cc4:	b500      	push	{lr}
   18cc6:	b087      	sub	sp, #28
    wsfTimerTicks_t xNextExpiration;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
   18cc8:	f009 fe1e 	bl	22908 <xTaskGetTickCount>
   18ccc:	9005      	str	r0, [sp, #20]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   18cce:	4b1a      	ldr	r3, [pc, #104]	; (18d38 <WsfTimerUpdateTicks+0x74>)
   18cd0:	681b      	ldr	r3, [r3, #0]
   18cd2:	9a05      	ldr	r2, [sp, #20]
   18cd4:	1ad3      	subs	r3, r2, r3
   18cd6:	9304      	str	r3, [sp, #16]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   18cd8:	9b04      	ldr	r3, [sp, #16]
   18cda:	2b09      	cmp	r3, #9
   18cdc:	d90a      	bls.n	18cf4 <WsfTimerUpdateTicks+0x30>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   18cde:	9b04      	ldr	r3, [sp, #16]
   18ce0:	4a16      	ldr	r2, [pc, #88]	; (18d3c <WsfTimerUpdateTicks+0x78>)
   18ce2:	fba2 2303 	umull	r2, r3, r2, r3
   18ce6:	08db      	lsrs	r3, r3, #3
   18ce8:	4618      	mov	r0, r3
   18cea:	f7ff ff77 	bl	18bdc <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   18cee:	4a12      	ldr	r2, [pc, #72]	; (18d38 <WsfTimerUpdateTicks+0x74>)
   18cf0:	9b05      	ldr	r3, [sp, #20]
   18cf2:	6013      	str	r3, [r2, #0]
    }

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   18cf4:	f10d 030b 	add.w	r3, sp, #11
   18cf8:	4618      	mov	r0, r3
   18cfa:	f7ff ff9b 	bl	18c34 <WsfTimerNextExpiration>
   18cfe:	9003      	str	r0, [sp, #12]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   18d00:	9b03      	ldr	r3, [sp, #12]
   18d02:	2b00      	cmp	r3, #0
   18d04:	d014      	beq.n	18d30 <WsfTimerUpdateTicks+0x6c>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   18d06:	4b0e      	ldr	r3, [pc, #56]	; (18d40 <WsfTimerUpdateTicks+0x7c>)
   18d08:	6818      	ldr	r0, [r3, #0]
   18d0a:	9b03      	ldr	r3, [sp, #12]
   18d0c:	f242 7210 	movw	r2, #10000	; 0x2710
   18d10:	fb02 f303 	mul.w	r3, r2, r3
   18d14:	4a0b      	ldr	r2, [pc, #44]	; (18d44 <WsfTimerUpdateTicks+0x80>)
   18d16:	fba2 2303 	umull	r2, r3, r2, r3
   18d1a:	099a      	lsrs	r2, r3, #6
   18d1c:	2364      	movs	r3, #100	; 0x64
   18d1e:	9300      	str	r3, [sp, #0]
   18d20:	2300      	movs	r3, #0
   18d22:	2104      	movs	r1, #4
   18d24:	f00a fa42 	bl	231ac <xTimerGenericCommand>
   18d28:	4603      	mov	r3, r0
   18d2a:	2b01      	cmp	r3, #1
   18d2c:	d000      	beq.n	18d30 <WsfTimerUpdateTicks+0x6c>
   18d2e:	e7fe      	b.n	18d2e <WsfTimerUpdateTicks+0x6a>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   18d30:	bf00      	nop
   18d32:	b007      	add	sp, #28
   18d34:	f85d fb04 	ldr.w	pc, [sp], #4
   18d38:	100036e4 	.word	0x100036e4
   18d3c:	cccccccd 	.word	0xcccccccd
   18d40:	10008cd0 	.word	0x10008cd0
   18d44:	10624dd3 	.word	0x10624dd3

00018d48 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   18d48:	b40f      	push	{r0, r1, r2, r3}
   18d4a:	b500      	push	{lr}
   18d4c:	b0c3      	sub	sp, #268	; 0x10c
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
   18d4e:	aa45      	add	r2, sp, #276	; 0x114
   18d50:	466b      	mov	r3, sp
   18d52:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   18d54:	466b      	mov	r3, sp
   18d56:	a801      	add	r0, sp, #4
   18d58:	681a      	ldr	r2, [r3, #0]
   18d5a:	9944      	ldr	r1, [sp, #272]	; 0x110
   18d5c:	f008 f930 	bl	20fc0 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   18d60:	ab01      	add	r3, sp, #4
   18d62:	4618      	mov	r0, r3
   18d64:	f008 fc32 	bl	215cc <am_util_stdio_printf>
   18d68:	9041      	str	r0, [sp, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   18d6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   18d6c:	2bff      	cmp	r3, #255	; 0xff
   18d6e:	d903      	bls.n	18d78 <WsfTrace+0x30>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   18d70:	2183      	movs	r1, #131	; 0x83
   18d72:	4806      	ldr	r0, [pc, #24]	; (18d8c <WsfTrace+0x44>)
   18d74:	f7ff fa1a 	bl	181ac <WsfAssert>
  am_util_debug_printf("\n");
   18d78:	4805      	ldr	r0, [pc, #20]	; (18d90 <WsfTrace+0x48>)
   18d7a:	f008 fc27 	bl	215cc <am_util_stdio_printf>
}
   18d7e:	bf00      	nop
   18d80:	b043      	add	sp, #268	; 0x10c
   18d82:	f85d eb04 	ldr.w	lr, [sp], #4
   18d86:	b004      	add	sp, #16
   18d88:	4770      	bx	lr
   18d8a:	bf00      	nop
   18d8c:	00028990 	.word	0x00028990
   18d90:	00028988 	.word	0x00028988

00018d94 <GattSendServiceChangedInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattSendServiceChangedInd(dmConnId_t connId, uint16_t start, uint16_t end)
{
   18d94:	b500      	push	{lr}
   18d96:	b085      	sub	sp, #20
   18d98:	4603      	mov	r3, r0
   18d9a:	f88d 3007 	strb.w	r3, [sp, #7]
   18d9e:	460b      	mov	r3, r1
   18da0:	f8ad 3004 	strh.w	r3, [sp, #4]
   18da4:	4613      	mov	r3, r2
   18da6:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t svcChangedValues[4];
  uint8_t *p;

  if (!gattServCb.svcChangedCccdIdxSet)
   18daa:	4b30      	ldr	r3, [pc, #192]	; (18e6c <GattSendServiceChangedInd+0xd8>)
   18dac:	781b      	ldrb	r3, [r3, #0]
   18dae:	2b00      	cmp	r3, #0
   18db0:	d058      	beq.n	18e64 <GattSendServiceChangedInd+0xd0>
  {
    return;
  }

  p = svcChangedValues;
   18db2:	ab02      	add	r3, sp, #8
   18db4:	9303      	str	r3, [sp, #12]
  UINT16_TO_BSTREAM(p, start);
   18db6:	9b03      	ldr	r3, [sp, #12]
   18db8:	1c5a      	adds	r2, r3, #1
   18dba:	9203      	str	r2, [sp, #12]
   18dbc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   18dc0:	b2d2      	uxtb	r2, r2
   18dc2:	701a      	strb	r2, [r3, #0]
   18dc4:	9b03      	ldr	r3, [sp, #12]
   18dc6:	1c5a      	adds	r2, r3, #1
   18dc8:	9203      	str	r2, [sp, #12]
   18dca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   18dce:	0a12      	lsrs	r2, r2, #8
   18dd0:	b292      	uxth	r2, r2
   18dd2:	b2d2      	uxtb	r2, r2
   18dd4:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, end);
   18dd6:	9b03      	ldr	r3, [sp, #12]
   18dd8:	1c5a      	adds	r2, r3, #1
   18dda:	9203      	str	r2, [sp, #12]
   18ddc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18de0:	b2d2      	uxtb	r2, r2
   18de2:	701a      	strb	r2, [r3, #0]
   18de4:	9b03      	ldr	r3, [sp, #12]
   18de6:	1c5a      	adds	r2, r3, #1
   18de8:	9203      	str	r2, [sp, #12]
   18dea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18dee:	0a12      	lsrs	r2, r2, #8
   18df0:	b292      	uxth	r2, r2
   18df2:	b2d2      	uxtb	r2, r2
   18df4:	701a      	strb	r2, [r3, #0]

  /* If connection is not specified */
  if (connId == DM_CONN_ID_NONE)
   18df6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18dfa:	2b00      	cmp	r3, #0
   18dfc:	d11f      	bne.n	18e3e <GattSendServiceChangedInd+0xaa>
  {
    /* Send to all. */
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   18dfe:	2301      	movs	r3, #1
   18e00:	f88d 3007 	strb.w	r3, [sp, #7]
   18e04:	e016      	b.n	18e34 <GattSendServiceChangedInd+0xa0>
    {
      if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   18e06:	4b19      	ldr	r3, [pc, #100]	; (18e6c <GattSendServiceChangedInd+0xd8>)
   18e08:	785a      	ldrb	r2, [r3, #1]
   18e0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18e0e:	4611      	mov	r1, r2
   18e10:	4618      	mov	r0, r3
   18e12:	f7fb fdd5 	bl	149c0 <AttsCccEnabled>
   18e16:	4603      	mov	r3, r0
   18e18:	2b00      	cmp	r3, #0
   18e1a:	d006      	beq.n	18e2a <GattSendServiceChangedInd+0x96>
      {
        AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   18e1c:	ab02      	add	r3, sp, #8
   18e1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18e22:	2204      	movs	r2, #4
   18e24:	2112      	movs	r1, #18
   18e26:	f7fc fabd 	bl	153a4 <AttsHandleValueInd>
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   18e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18e2e:	3301      	adds	r3, #1
   18e30:	f88d 3007 	strb.w	r3, [sp, #7]
   18e34:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18e38:	2b03      	cmp	r3, #3
   18e3a:	d9e4      	bls.n	18e06 <GattSendServiceChangedInd+0x72>
   18e3c:	e013      	b.n	18e66 <GattSendServiceChangedInd+0xd2>
    }
  }
  else
  {
    /* Send to only this one. */
    if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   18e3e:	4b0b      	ldr	r3, [pc, #44]	; (18e6c <GattSendServiceChangedInd+0xd8>)
   18e40:	785a      	ldrb	r2, [r3, #1]
   18e42:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18e46:	4611      	mov	r1, r2
   18e48:	4618      	mov	r0, r3
   18e4a:	f7fb fdb9 	bl	149c0 <AttsCccEnabled>
   18e4e:	4603      	mov	r3, r0
   18e50:	2b00      	cmp	r3, #0
   18e52:	d008      	beq.n	18e66 <GattSendServiceChangedInd+0xd2>
    {
      AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   18e54:	ab02      	add	r3, sp, #8
   18e56:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18e5a:	2204      	movs	r2, #4
   18e5c:	2112      	movs	r1, #18
   18e5e:	f7fc faa1 	bl	153a4 <AttsHandleValueInd>
   18e62:	e000      	b.n	18e66 <GattSendServiceChangedInd+0xd2>
    return;
   18e64:	bf00      	nop
    }
  }
}
   18e66:	b005      	add	sp, #20
   18e68:	f85d fb04 	ldr.w	pc, [sp], #4
   18e6c:	10008cd4 	.word	0x10008cd4

00018e70 <__NVIC_EnableIRQ>:
{
   18e70:	b082      	sub	sp, #8
   18e72:	4603      	mov	r3, r0
   18e74:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   18e78:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   18e7c:	2b00      	cmp	r3, #0
   18e7e:	db0c      	blt.n	18e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18e80:	4907      	ldr	r1, [pc, #28]	; (18ea0 <__NVIC_EnableIRQ+0x30>)
   18e82:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   18e86:	095b      	lsrs	r3, r3, #5
   18e88:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18e8c:	f002 021f 	and.w	r2, r2, #31
   18e90:	2001      	movs	r0, #1
   18e92:	fa00 f202 	lsl.w	r2, r0, r2
   18e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   18e9a:	bf00      	nop
   18e9c:	b002      	add	sp, #8
   18e9e:	4770      	bx	lr
   18ea0:	e000e100 	.word	0xe000e100

00018ea4 <__NVIC_DisableIRQ>:
{
   18ea4:	b082      	sub	sp, #8
   18ea6:	4603      	mov	r3, r0
   18ea8:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   18eac:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   18eb0:	2b00      	cmp	r3, #0
   18eb2:	db11      	blt.n	18ed8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18eb4:	490a      	ldr	r1, [pc, #40]	; (18ee0 <__NVIC_DisableIRQ+0x3c>)
   18eb6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   18eba:	095b      	lsrs	r3, r3, #5
   18ebc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18ec0:	f002 021f 	and.w	r2, r2, #31
   18ec4:	2001      	movs	r0, #1
   18ec6:	fa00 f202 	lsl.w	r2, r0, r2
   18eca:	3320      	adds	r3, #32
   18ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   18ed0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18ed4:	f3bf 8f6f 	isb	sy
}
   18ed8:	bf00      	nop
   18eda:	b002      	add	sp, #8
   18edc:	4770      	bx	lr
   18ede:	bf00      	nop
   18ee0:	e000e100 	.word	0xe000e100

00018ee4 <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   18ee4:	b500      	push	{lr}
   18ee6:	b083      	sub	sp, #12
   18ee8:	9001      	str	r0, [sp, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   18eea:	9b01      	ldr	r3, [sp, #4]
   18eec:	2b00      	cmp	r3, #0
   18eee:	d00c      	beq.n	18f0a <error_check+0x26>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   18ef0:	4a08      	ldr	r2, [pc, #32]	; (18f14 <error_check+0x30>)
   18ef2:	9b01      	ldr	r3, [sp, #4]
   18ef4:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   18ef6:	4b08      	ldr	r3, [pc, #32]	; (18f18 <error_check+0x34>)
   18ef8:	681b      	ldr	r3, [r3, #0]
   18efa:	2b00      	cmp	r3, #0
   18efc:	d005      	beq.n	18f0a <error_check+0x26>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   18efe:	4b06      	ldr	r3, [pc, #24]	; (18f18 <error_check+0x34>)
   18f00:	681b      	ldr	r3, [r3, #0]
   18f02:	4a04      	ldr	r2, [pc, #16]	; (18f14 <error_check+0x30>)
   18f04:	6812      	ldr	r2, [r2, #0]
   18f06:	4610      	mov	r0, r2
   18f08:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   18f0a:	bf00      	nop
   18f0c:	b003      	add	sp, #12
   18f0e:	f85d fb04 	ldr.w	pc, [sp], #4
   18f12:	bf00      	nop
   18f14:	100036fc 	.word	0x100036fc
   18f18:	100036f8 	.word	0x100036f8

00018f1c <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   18f1c:	b530      	push	{r4, r5, lr}
   18f1e:	b093      	sub	sp, #76	; 0x4c
   18f20:	4603      	mov	r3, r0
   18f22:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32_t ui32NumXtalRetries = 0;
   18f26:	2300      	movs	r3, #0
   18f28:	9311      	str	r3, [sp, #68]	; 0x44


    g_ui32NumBytes     = 0;
   18f2a:	4b6b      	ldr	r3, [pc, #428]	; (190d8 <HciDrvRadioBoot+0x1bc>)
   18f2c:	2200      	movs	r2, #0
   18f2e:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   18f30:	4b6a      	ldr	r3, [pc, #424]	; (190dc <HciDrvRadioBoot+0x1c0>)
   18f32:	2200      	movs	r2, #0
   18f34:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   18f36:	2301      	movs	r3, #1
   18f38:	9310      	str	r3, [sp, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   18f3a:	e0a0      	b.n	1907e <HciDrvRadioBoot+0x162>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   18f3c:	4968      	ldr	r1, [pc, #416]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   18f3e:	2000      	movs	r0, #0
   18f40:	f00c fbba 	bl	256b8 <am_hal_ble_initialize>
   18f44:	900f      	str	r0, [sp, #60]	; 0x3c
   18f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18f48:	2b00      	cmp	r3, #0
   18f4a:	d006      	beq.n	18f5a <HciDrvRadioBoot+0x3e>
   18f4c:	4865      	ldr	r0, [pc, #404]	; (190e4 <HciDrvRadioBoot+0x1c8>)
   18f4e:	f008 fb3d 	bl	215cc <am_util_stdio_printf>
   18f52:	980f      	ldr	r0, [sp, #60]	; 0x3c
   18f54:	f7ff ffc6 	bl	18ee4 <error_check>
   18f58:	e0bc      	b.n	190d4 <HciDrvRadioBoot+0x1b8>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   18f5a:	4b61      	ldr	r3, [pc, #388]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   18f5c:	681b      	ldr	r3, [r3, #0]
   18f5e:	2100      	movs	r1, #0
   18f60:	4618      	mov	r0, r3
   18f62:	f00c fc89 	bl	25878 <am_hal_ble_power_control>
   18f66:	900e      	str	r0, [sp, #56]	; 0x38
   18f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18f6a:	2b00      	cmp	r3, #0
   18f6c:	d006      	beq.n	18f7c <HciDrvRadioBoot+0x60>
   18f6e:	485e      	ldr	r0, [pc, #376]	; (190e8 <HciDrvRadioBoot+0x1cc>)
   18f70:	f008 fb2c 	bl	215cc <am_util_stdio_printf>
   18f74:	980e      	ldr	r0, [sp, #56]	; 0x38
   18f76:	f7ff ffb5 	bl	18ee4 <error_check>
   18f7a:	e0ab      	b.n	190d4 <HciDrvRadioBoot+0x1b8>

        am_hal_ble_config_t sBleConfig =
   18f7c:	4b5b      	ldr	r3, [pc, #364]	; (190ec <HciDrvRadioBoot+0x1d0>)
   18f7e:	ac02      	add	r4, sp, #8
   18f80:	461d      	mov	r5, r3
   18f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   18f86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   18f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#endif
            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   18f8e:	4b54      	ldr	r3, [pc, #336]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   18f90:	681b      	ldr	r3, [r3, #0]
   18f92:	aa02      	add	r2, sp, #8
   18f94:	4611      	mov	r1, r2
   18f96:	4618      	mov	r0, r3
   18f98:	f00c fbe2 	bl	25760 <am_hal_ble_config>
   18f9c:	900d      	str	r0, [sp, #52]	; 0x34
   18f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18fa0:	2b00      	cmp	r3, #0
   18fa2:	d006      	beq.n	18fb2 <HciDrvRadioBoot+0x96>
   18fa4:	4852      	ldr	r0, [pc, #328]	; (190f0 <HciDrvRadioBoot+0x1d4>)
   18fa6:	f008 fb11 	bl	215cc <am_util_stdio_printf>
   18faa:	980d      	ldr	r0, [sp, #52]	; 0x34
   18fac:	f7ff ff9a 	bl	18ee4 <error_check>
   18fb0:	e090      	b.n	190d4 <HciDrvRadioBoot+0x1b8>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   18fb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18fb6:	2b00      	cmp	r3, #0
   18fb8:	d003      	beq.n	18fc2 <HciDrvRadioBoot+0xa6>
        {
            am_util_delay_ms(1000);
   18fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18fbe:	f007 fbe9 	bl	20794 <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   18fc2:	4b47      	ldr	r3, [pc, #284]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   18fc4:	681b      	ldr	r3, [r3, #0]
   18fc6:	4618      	mov	r0, r3
   18fc8:	f00d fac8 	bl	2655c <am_hal_ble_boot>
   18fcc:	9010      	str	r0, [sp, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   18fce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18fd0:	2b00      	cmp	r3, #0
   18fd2:	d059      	beq.n	19088 <HciDrvRadioBoot+0x16c>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   18fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18fd6:	4a47      	ldr	r2, [pc, #284]	; (190f4 <HciDrvRadioBoot+0x1d8>)
   18fd8:	4293      	cmp	r3, r2
   18fda:	d12a      	bne.n	19032 <HciDrvRadioBoot+0x116>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   18fdc:	4b40      	ldr	r3, [pc, #256]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	2101      	movs	r1, #1
   18fe2:	4618      	mov	r0, r3
   18fe4:	f00c fc48 	bl	25878 <am_hal_ble_power_control>
   18fe8:	900c      	str	r0, [sp, #48]	; 0x30
   18fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18fec:	2b00      	cmp	r3, #0
   18fee:	d006      	beq.n	18ffe <HciDrvRadioBoot+0xe2>
   18ff0:	4841      	ldr	r0, [pc, #260]	; (190f8 <HciDrvRadioBoot+0x1dc>)
   18ff2:	f008 faeb 	bl	215cc <am_util_stdio_printf>
   18ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
   18ff8:	f7ff ff74 	bl	18ee4 <error_check>
   18ffc:	e06a      	b.n	190d4 <HciDrvRadioBoot+0x1b8>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   18ffe:	4b38      	ldr	r3, [pc, #224]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   19000:	681b      	ldr	r3, [r3, #0]
   19002:	4618      	mov	r0, r3
   19004:	f00c fb8c 	bl	25720 <am_hal_ble_deinitialize>
   19008:	900b      	str	r0, [sp, #44]	; 0x2c
   1900a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1900c:	2b00      	cmp	r3, #0
   1900e:	d006      	beq.n	1901e <HciDrvRadioBoot+0x102>
   19010:	483a      	ldr	r0, [pc, #232]	; (190fc <HciDrvRadioBoot+0x1e0>)
   19012:	f008 fadb 	bl	215cc <am_util_stdio_printf>
   19016:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19018:	f7ff ff64 	bl	18ee4 <error_check>
   1901c:	e05a      	b.n	190d4 <HciDrvRadioBoot+0x1b8>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   1901e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19020:	1c5a      	adds	r2, r3, #1
   19022:	9211      	str	r2, [sp, #68]	; 0x44
   19024:	2b09      	cmp	r3, #9
   19026:	d854      	bhi.n	190d2 <HciDrvRadioBoot+0x1b6>
            {
                am_util_delay_ms(1000);
   19028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1902c:	f007 fbb2 	bl	20794 <am_util_delay_ms>
   19030:	e025      	b.n	1907e <HciDrvRadioBoot+0x162>
                return;
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   19032:	4b2b      	ldr	r3, [pc, #172]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   19034:	681b      	ldr	r3, [r3, #0]
   19036:	2101      	movs	r1, #1
   19038:	4618      	mov	r0, r3
   1903a:	f00c fc1d 	bl	25878 <am_hal_ble_power_control>
   1903e:	900a      	str	r0, [sp, #40]	; 0x28
   19040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19042:	2b00      	cmp	r3, #0
   19044:	d006      	beq.n	19054 <HciDrvRadioBoot+0x138>
   19046:	482c      	ldr	r0, [pc, #176]	; (190f8 <HciDrvRadioBoot+0x1dc>)
   19048:	f008 fac0 	bl	215cc <am_util_stdio_printf>
   1904c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1904e:	f7ff ff49 	bl	18ee4 <error_check>
   19052:	e03f      	b.n	190d4 <HciDrvRadioBoot+0x1b8>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   19054:	4b22      	ldr	r3, [pc, #136]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   19056:	681b      	ldr	r3, [r3, #0]
   19058:	4618      	mov	r0, r3
   1905a:	f00c fb61 	bl	25720 <am_hal_ble_deinitialize>
   1905e:	9009      	str	r0, [sp, #36]	; 0x24
   19060:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19062:	2b00      	cmp	r3, #0
   19064:	d006      	beq.n	19074 <HciDrvRadioBoot+0x158>
   19066:	4825      	ldr	r0, [pc, #148]	; (190fc <HciDrvRadioBoot+0x1e0>)
   19068:	f008 fab0 	bl	215cc <am_util_stdio_printf>
   1906c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1906e:	f7ff ff39 	bl	18ee4 <error_check>
   19072:	e02f      	b.n	190d4 <HciDrvRadioBoot+0x1b8>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   19074:	9810      	ldr	r0, [sp, #64]	; 0x40
   19076:	f7ff ff35 	bl	18ee4 <error_check>
            return;
   1907a:	bf00      	nop
   1907c:	e02a      	b.n	190d4 <HciDrvRadioBoot+0x1b8>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   1907e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19080:	2b00      	cmp	r3, #0
   19082:	f47f af5b 	bne.w	18f3c <HciDrvRadioBoot+0x20>
   19086:	e000      	b.n	1908a <HciDrvRadioBoot+0x16e>
            break;
   19088:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   1908a:	4b15      	ldr	r3, [pc, #84]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   1908c:	681b      	ldr	r3, [r3, #0]
   1908e:	2108      	movs	r1, #8
   19090:	4618      	mov	r0, r3
   19092:	f00d fae1 	bl	26658 <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   19096:	4b12      	ldr	r3, [pc, #72]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   19098:	681b      	ldr	r3, [r3, #0]
   1909a:	f240 2181 	movw	r1, #641	; 0x281
   1909e:	4618      	mov	r0, r3
   190a0:	f00d f80e 	bl	260c0 <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   190a4:	4b0e      	ldr	r3, [pc, #56]	; (190e0 <HciDrvRadioBoot+0x1c4>)
   190a6:	681b      	ldr	r3, [r3, #0]
   190a8:	f240 2181 	movw	r1, #641	; 0x281
   190ac:	4618      	mov	r0, r3
   190ae:	f00c ffd9 	bl	26064 <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   190b2:	200c      	movs	r0, #12
   190b4:	f7ff fedc 	bl	18e70 <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   190b8:	f44f 6302 	mov.w	r3, #2080	; 0x820
   190bc:	f44f 7282 	mov.w	r2, #260	; 0x104
   190c0:	490f      	ldr	r1, [pc, #60]	; (19100 <HciDrvRadioBoot+0x1e4>)
   190c2:	4810      	ldr	r0, [pc, #64]	; (19104 <HciDrvRadioBoot+0x1e8>)
   190c4:	f00e f964 	bl	27390 <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   190c8:	4b0f      	ldr	r3, [pc, #60]	; (19108 <HciDrvRadioBoot+0x1ec>)
   190ca:	2200      	movs	r2, #0
   190cc:	601a      	str	r2, [r3, #0]

    return;
   190ce:	bf00      	nop
   190d0:	e000      	b.n	190d4 <HciDrvRadioBoot+0x1b8>
                return;
   190d2:	bf00      	nop
}
   190d4:	b013      	add	sp, #76	; 0x4c
   190d6:	bd30      	pop	{r4, r5, pc}
   190d8:	100036ec 	.word	0x100036ec
   190dc:	100036f0 	.word	0x100036f0
   190e0:	10009620 	.word	0x10009620
   190e4:	000289dc 	.word	0x000289dc
   190e8:	00028a10 	.word	0x00028a10
   190ec:	00028b0c 	.word	0x00028b0c
   190f0:	00028a5c 	.word	0x00028a5c
   190f4:	0800000b 	.word	0x0800000b
   190f8:	00028a94 	.word	0x00028a94
   190fc:	00028adc 	.word	0x00028adc
   19100:	10008e00 	.word	0x10008e00
   19104:	10008cd8 	.word	0x10008cd8
   19108:	100036f4 	.word	0x100036f4

0001910c <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   1910c:	b500      	push	{lr}
   1910e:	b083      	sub	sp, #12
    BLE_HEARTBEAT_STOP();
   19110:	481b      	ldr	r0, [pc, #108]	; (19180 <HciDrvRadioShutdown+0x74>)
   19112:	f7ff fd55 	bl	18bc0 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   19116:	200c      	movs	r0, #12
   19118:	f7ff fec4 	bl	18ea4 <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   1911c:	4b19      	ldr	r3, [pc, #100]	; (19184 <HciDrvRadioShutdown+0x78>)
   1911e:	681b      	ldr	r3, [r3, #0]
   19120:	2101      	movs	r1, #1
   19122:	4618      	mov	r0, r3
   19124:	f00c fba8 	bl	25878 <am_hal_ble_power_control>
   19128:	9001      	str	r0, [sp, #4]
   1912a:	9b01      	ldr	r3, [sp, #4]
   1912c:	2b00      	cmp	r3, #0
   1912e:	d006      	beq.n	1913e <HciDrvRadioShutdown+0x32>
   19130:	4815      	ldr	r0, [pc, #84]	; (19188 <HciDrvRadioShutdown+0x7c>)
   19132:	f008 fa4b 	bl	215cc <am_util_stdio_printf>
   19136:	9801      	ldr	r0, [sp, #4]
   19138:	f7ff fed4 	bl	18ee4 <error_check>
   1913c:	e01d      	b.n	1917a <HciDrvRadioShutdown+0x6e>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   1913e:	bf00      	nop
   19140:	4b12      	ldr	r3, [pc, #72]	; (1918c <HciDrvRadioShutdown+0x80>)
   19142:	689b      	ldr	r3, [r3, #8]
   19144:	f3c3 3340 	ubfx	r3, r3, #13, #1
   19148:	b2db      	uxtb	r3, r3
   1914a:	2b00      	cmp	r3, #0
   1914c:	d1f8      	bne.n	19140 <HciDrvRadioShutdown+0x34>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   1914e:	4b0d      	ldr	r3, [pc, #52]	; (19184 <HciDrvRadioShutdown+0x78>)
   19150:	681b      	ldr	r3, [r3, #0]
   19152:	4618      	mov	r0, r3
   19154:	f00c fae4 	bl	25720 <am_hal_ble_deinitialize>
   19158:	9000      	str	r0, [sp, #0]
   1915a:	9b00      	ldr	r3, [sp, #0]
   1915c:	2b00      	cmp	r3, #0
   1915e:	d006      	beq.n	1916e <HciDrvRadioShutdown+0x62>
   19160:	480b      	ldr	r0, [pc, #44]	; (19190 <HciDrvRadioShutdown+0x84>)
   19162:	f008 fa33 	bl	215cc <am_util_stdio_printf>
   19166:	9800      	ldr	r0, [sp, #0]
   19168:	f7ff febc 	bl	18ee4 <error_check>
   1916c:	e005      	b.n	1917a <HciDrvRadioShutdown+0x6e>

    g_ui32NumBytes   = 0;
   1916e:	4b09      	ldr	r3, [pc, #36]	; (19194 <HciDrvRadioShutdown+0x88>)
   19170:	2200      	movs	r2, #0
   19172:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   19174:	4b08      	ldr	r3, [pc, #32]	; (19198 <HciDrvRadioShutdown+0x8c>)
   19176:	2200      	movs	r2, #0
   19178:	601a      	str	r2, [r3, #0]
}
   1917a:	b003      	add	sp, #12
   1917c:	f85d fb04 	ldr.w	pc, [sp], #4
   19180:	10008cf0 	.word	0x10008cf0
   19184:	10009620 	.word	0x10009620
   19188:	00028a94 	.word	0x00028a94
   1918c:	40021000 	.word	0x40021000
   19190:	00028adc 	.word	0x00028adc
   19194:	100036ec 	.word	0x100036ec
   19198:	100036f0 	.word	0x100036f0

0001919c <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   1919c:	b500      	push	{lr}
   1919e:	b087      	sub	sp, #28
   191a0:	4603      	mov	r3, r0
   191a2:	9200      	str	r2, [sp, #0]
   191a4:	f88d 3007 	strb.w	r3, [sp, #7]
   191a8:	460b      	mov	r3, r1
   191aa:	f8ad 3004 	strh.w	r3, [sp, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   191ae:	4b28      	ldr	r3, [pc, #160]	; (19250 <hciDrvWrite+0xb4>)
   191b0:	689a      	ldr	r2, [r3, #8]
   191b2:	4b27      	ldr	r3, [pc, #156]	; (19250 <hciDrvWrite+0xb4>)
   191b4:	68db      	ldr	r3, [r3, #12]
   191b6:	429a      	cmp	r2, r3
   191b8:	d106      	bne.n	191c8 <hciDrvWrite+0x2c>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   191ba:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   191be:	f7ff fe91 	bl	18ee4 <error_check>
   191c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   191c6:	e03e      	b.n	19246 <hciDrvWrite+0xaa>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   191c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   191cc:	2bff      	cmp	r3, #255	; 0xff
   191ce:	d905      	bls.n	191dc <hciDrvWrite+0x40>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   191d0:	4820      	ldr	r0, [pc, #128]	; (19254 <hciDrvWrite+0xb8>)
   191d2:	f7ff fe87 	bl	18ee4 <error_check>
   191d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   191da:	e034      	b.n	19246 <hciDrvWrite+0xaa>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   191dc:	4b1c      	ldr	r3, [pc, #112]	; (19250 <hciDrvWrite+0xb4>)
   191de:	695a      	ldr	r2, [r3, #20]
   191e0:	4b1b      	ldr	r3, [pc, #108]	; (19250 <hciDrvWrite+0xb4>)
   191e2:	681b      	ldr	r3, [r3, #0]
   191e4:	4413      	add	r3, r2
   191e6:	9304      	str	r3, [sp, #16]

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   191e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   191ec:	3301      	adds	r3, #1
   191ee:	461a      	mov	r2, r3
   191f0:	9b04      	ldr	r3, [sp, #16]
   191f2:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   191f4:	9b04      	ldr	r3, [sp, #16]
   191f6:	3304      	adds	r3, #4
   191f8:	9303      	str	r3, [sp, #12]

    *pui8Wptr++ = type;
   191fa:	9b03      	ldr	r3, [sp, #12]
   191fc:	1c5a      	adds	r2, r3, #1
   191fe:	9203      	str	r2, [sp, #12]
   19200:	f89d 2007 	ldrb.w	r2, [sp, #7]
   19204:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   19206:	2300      	movs	r3, #0
   19208:	9305      	str	r3, [sp, #20]
   1920a:	e00a      	b.n	19222 <hciDrvWrite+0x86>
    {
        pui8Wptr[i] = pData[i];
   1920c:	9a03      	ldr	r2, [sp, #12]
   1920e:	9b05      	ldr	r3, [sp, #20]
   19210:	4413      	add	r3, r2
   19212:	9900      	ldr	r1, [sp, #0]
   19214:	9a05      	ldr	r2, [sp, #20]
   19216:	440a      	add	r2, r1
   19218:	7812      	ldrb	r2, [r2, #0]
   1921a:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   1921c:	9b05      	ldr	r3, [sp, #20]
   1921e:	3301      	adds	r3, #1
   19220:	9305      	str	r3, [sp, #20]
   19222:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   19226:	9b05      	ldr	r3, [sp, #20]
   19228:	429a      	cmp	r2, r3
   1922a:	d8ef      	bhi.n	1920c <hciDrvWrite+0x70>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   1922c:	2201      	movs	r2, #1
   1922e:	2100      	movs	r1, #0
   19230:	4807      	ldr	r0, [pc, #28]	; (19250 <hciDrvWrite+0xb4>)
   19232:	f00e f8b9 	bl	273a8 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19236:	4b08      	ldr	r3, [pc, #32]	; (19258 <hciDrvWrite+0xbc>)
   19238:	781b      	ldrb	r3, [r3, #0]
   1923a:	2101      	movs	r1, #1
   1923c:	4618      	mov	r0, r3
   1923e:	f7ff f9f9 	bl	18634 <WsfSetEvent>
            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
        }
    }
#endif

    return len;
   19242:	f8bd 3004 	ldrh.w	r3, [sp, #4]
}
   19246:	4618      	mov	r0, r3
   19248:	b007      	add	sp, #28
   1924a:	f85d fb04 	ldr.w	pc, [sp], #4
   1924e:	bf00      	nop
   19250:	10008cd8 	.word	0x10008cd8
   19254:	09000001 	.word	0x09000001
   19258:	100036e8 	.word	0x100036e8

0001925c <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   1925c:	b082      	sub	sp, #8
   1925e:	4603      	mov	r3, r0
   19260:	f88d 3007 	strb.w	r3, [sp, #7]
    g_HciDrvHandleID = handlerId;
   19264:	4a0a      	ldr	r2, [pc, #40]	; (19290 <HciDrvHandlerInit+0x34>)
   19266:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1926a:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   1926c:	4a09      	ldr	r2, [pc, #36]	; (19294 <HciDrvHandlerInit+0x38>)
   1926e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19272:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   19274:	4b07      	ldr	r3, [pc, #28]	; (19294 <HciDrvHandlerInit+0x38>)
   19276:	2202      	movs	r2, #2
   19278:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   1927a:	4a07      	ldr	r2, [pc, #28]	; (19298 <HciDrvHandlerInit+0x3c>)
   1927c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19280:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   19282:	4b05      	ldr	r3, [pc, #20]	; (19298 <HciDrvHandlerInit+0x3c>)
   19284:	2203      	movs	r2, #3
   19286:	731a      	strb	r2, [r3, #12]
}
   19288:	bf00      	nop
   1928a:	b002      	add	sp, #8
   1928c:	4770      	bx	lr
   1928e:	bf00      	nop
   19290:	100036e8 	.word	0x100036e8
   19294:	10008cf0 	.word	0x10008cf0
   19298:	10009624 	.word	0x10009624

0001929c <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   1929c:	b500      	push	{lr}
   1929e:	b083      	sub	sp, #12
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   192a0:	4b0d      	ldr	r3, [pc, #52]	; (192d8 <HciDrvIntService+0x3c>)
   192a2:	681b      	ldr	r3, [r3, #0]
   192a4:	2101      	movs	r1, #1
   192a6:	4618      	mov	r0, r3
   192a8:	f00c fefc 	bl	260a4 <am_hal_ble_int_status>
   192ac:	9001      	str	r0, [sp, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   192ae:	4b0a      	ldr	r3, [pc, #40]	; (192d8 <HciDrvIntService+0x3c>)
   192b0:	681b      	ldr	r3, [r3, #0]
   192b2:	9901      	ldr	r1, [sp, #4]
   192b4:	4618      	mov	r0, r3
   192b6:	f00c ff03 	bl	260c0 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   192ba:	4b08      	ldr	r3, [pc, #32]	; (192dc <HciDrvIntService+0x40>)
   192bc:	681b      	ldr	r3, [r3, #0]
   192be:	3301      	adds	r3, #1
   192c0:	4a06      	ldr	r2, [pc, #24]	; (192dc <HciDrvIntService+0x40>)
   192c2:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   192c4:	4b06      	ldr	r3, [pc, #24]	; (192e0 <HciDrvIntService+0x44>)
   192c6:	781b      	ldrb	r3, [r3, #0]
   192c8:	2101      	movs	r1, #1
   192ca:	4618      	mov	r0, r3
   192cc:	f7ff f9b2 	bl	18634 <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   192d0:	bf00      	nop
   192d2:	b003      	add	sp, #12
   192d4:	f85d fb04 	ldr.w	pc, [sp], #4
   192d8:	10009620 	.word	0x10009620
   192dc:	100036f4 	.word	0x100036f4
   192e0:	100036e8 	.word	0x100036e8

000192e4 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   192e4:	b500      	push	{lr}
   192e6:	b08b      	sub	sp, #44	; 0x2c
   192e8:	4603      	mov	r3, r0
   192ea:	9100      	str	r1, [sp, #0]
   192ec:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   192f0:	2300      	movs	r3, #0
   192f2:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   192f4:	2300      	movs	r3, #0
   192f6:	9308      	str	r3, [sp, #32]
    uint32_t read_hci_packet_count = 0;
   192f8:	2300      	movs	r3, #0
   192fa:	9307      	str	r3, [sp, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   192fc:	9b00      	ldr	r3, [sp, #0]
   192fe:	789b      	ldrb	r3, [r3, #2]
   19300:	2b02      	cmp	r3, #2
   19302:	d107      	bne.n	19314 <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   19304:	f004 f9f1 	bl	1d6ea <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   19308:	f242 7110 	movw	r1, #10000	; 0x2710
   1930c:	4889      	ldr	r0, [pc, #548]	; (19534 <HciDrvHandler+0x250>)
   1930e:	f7ff fc43 	bl	18b98 <WsfTimerStartMs>
        return;
   19312:	e10c      	b.n	1952e <HciDrvHandler+0x24a>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   19314:	4b88      	ldr	r3, [pc, #544]	; (19538 <HciDrvHandler+0x254>)
   19316:	681a      	ldr	r2, [r3, #0]
   19318:	4b88      	ldr	r3, [pc, #544]	; (1953c <HciDrvHandler+0x258>)
   1931a:	681b      	ldr	r3, [r3, #0]
   1931c:	429a      	cmp	r2, r3
   1931e:	f240 80ea 	bls.w	194f6 <HciDrvHandler+0x212>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   19322:	4b87      	ldr	r3, [pc, #540]	; (19540 <HciDrvHandler+0x25c>)
   19324:	681a      	ldr	r2, [r3, #0]
   19326:	4b85      	ldr	r3, [pc, #532]	; (1953c <HciDrvHandler+0x258>)
   19328:	681b      	ldr	r3, [r3, #0]
   1932a:	18d0      	adds	r0, r2, r3
   1932c:	4b82      	ldr	r3, [pc, #520]	; (19538 <HciDrvHandler+0x254>)
   1932e:	681b      	ldr	r3, [r3, #0]
   19330:	b29a      	uxth	r2, r3
   19332:	4b82      	ldr	r3, [pc, #520]	; (1953c <HciDrvHandler+0x258>)
   19334:	681b      	ldr	r3, [r3, #0]
   19336:	b29b      	uxth	r3, r3
   19338:	1ad3      	subs	r3, r2, r3
   1933a:	b29b      	uxth	r3, r3
   1933c:	4619      	mov	r1, r3
   1933e:	f006 ff33 	bl	201a8 <hciTrSerialRxIncoming>
   19342:	4603      	mov	r3, r0
   19344:	461a      	mov	r2, r3
   19346:	4b7d      	ldr	r3, [pc, #500]	; (1953c <HciDrvHandler+0x258>)
   19348:	681b      	ldr	r3, [r3, #0]
   1934a:	4413      	add	r3, r2
   1934c:	4a7b      	ldr	r2, [pc, #492]	; (1953c <HciDrvHandler+0x258>)
   1934e:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   19350:	4b7a      	ldr	r3, [pc, #488]	; (1953c <HciDrvHandler+0x258>)
   19352:	681a      	ldr	r2, [r3, #0]
   19354:	4b78      	ldr	r3, [pc, #480]	; (19538 <HciDrvHandler+0x254>)
   19356:	681b      	ldr	r3, [r3, #0]
   19358:	429a      	cmp	r2, r3
   1935a:	d006      	beq.n	1936a <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1935c:	4b79      	ldr	r3, [pc, #484]	; (19544 <HciDrvHandler+0x260>)
   1935e:	781b      	ldrb	r3, [r3, #0]
   19360:	2101      	movs	r1, #1
   19362:	4618      	mov	r0, r3
   19364:	f7ff f966 	bl	18634 <WsfSetEvent>
            return;
   19368:	e0e1      	b.n	1952e <HciDrvHandler+0x24a>
        }
        else
        {
            g_ui32NumBytes   = 0;
   1936a:	4b73      	ldr	r3, [pc, #460]	; (19538 <HciDrvHandler+0x254>)
   1936c:	2200      	movs	r2, #0
   1936e:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   19370:	4b72      	ldr	r3, [pc, #456]	; (1953c <HciDrvHandler+0x258>)
   19372:	2200      	movs	r2, #0
   19374:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   19376:	e0be      	b.n	194f6 <HciDrvHandler+0x212>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   19378:	4b73      	ldr	r3, [pc, #460]	; (19548 <HciDrvHandler+0x264>)
   1937a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1937e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   19382:	b2db      	uxtb	r3, r3
   19384:	2b00      	cmp	r3, #0
   19386:	d07e      	beq.n	19486 <HciDrvHandler+0x1a2>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   19388:	4b70      	ldr	r3, [pc, #448]	; (1954c <HciDrvHandler+0x268>)
   1938a:	681b      	ldr	r3, [r3, #0]
   1938c:	9303      	str	r3, [sp, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   1938e:	4869      	ldr	r0, [pc, #420]	; (19534 <HciDrvHandler+0x250>)
   19390:	f7ff fc16 	bl	18bc0 <WsfTimerStop>
   19394:	f242 7110 	movw	r1, #10000	; 0x2710
   19398:	4866      	ldr	r0, [pc, #408]	; (19534 <HciDrvHandler+0x250>)
   1939a:	f7ff fbfd 	bl	18b98 <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   1939e:	4b66      	ldr	r3, [pc, #408]	; (19538 <HciDrvHandler+0x254>)
   193a0:	2200      	movs	r2, #0
   193a2:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   193a4:	4b6a      	ldr	r3, [pc, #424]	; (19550 <HciDrvHandler+0x26c>)
   193a6:	681b      	ldr	r3, [r3, #0]
   193a8:	4a63      	ldr	r2, [pc, #396]	; (19538 <HciDrvHandler+0x254>)
   193aa:	496a      	ldr	r1, [pc, #424]	; (19554 <HciDrvHandler+0x270>)
   193ac:	4618      	mov	r0, r3
   193ae:	f00c fdff 	bl	25fb0 <am_hal_ble_blocking_hci_read>
   193b2:	9004      	str	r0, [sp, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   193b4:	4b60      	ldr	r3, [pc, #384]	; (19538 <HciDrvHandler+0x254>)
   193b6:	681b      	ldr	r3, [r3, #0]
   193b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   193bc:	d908      	bls.n	193d0 <HciDrvHandler+0xec>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   193be:	4b66      	ldr	r3, [pc, #408]	; (19558 <HciDrvHandler+0x274>)
   193c0:	9302      	str	r3, [sp, #8]
   193c2:	4866      	ldr	r0, [pc, #408]	; (1955c <HciDrvHandler+0x278>)
   193c4:	f008 f902 	bl	215cc <am_util_stdio_printf>
   193c8:	9802      	ldr	r0, [sp, #8]
   193ca:	f7ff fd8b 	bl	18ee4 <error_check>
   193ce:	e0ae      	b.n	1952e <HciDrvHandler+0x24a>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   193d0:	9b04      	ldr	r3, [sp, #16]
   193d2:	2b00      	cmp	r3, #0
   193d4:	d13d      	bne.n	19452 <HciDrvHandler+0x16e>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   193d6:	2300      	movs	r3, #0
   193d8:	9306      	str	r3, [sp, #24]
   193da:	e012      	b.n	19402 <HciDrvHandler+0x11e>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   193dc:	4b5a      	ldr	r3, [pc, #360]	; (19548 <HciDrvHandler+0x264>)
   193de:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   193e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   193e6:	b2db      	uxtb	r3, r3
   193e8:	2b00      	cmp	r3, #0
   193ea:	d00e      	beq.n	1940a <HciDrvHandler+0x126>
   193ec:	4b57      	ldr	r3, [pc, #348]	; (1954c <HciDrvHandler+0x268>)
   193ee:	681a      	ldr	r2, [r3, #0]
   193f0:	9b03      	ldr	r3, [sp, #12]
   193f2:	429a      	cmp	r2, r3
   193f4:	d109      	bne.n	1940a <HciDrvHandler+0x126>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   193f6:	2001      	movs	r0, #1
   193f8:	f007 f9e8 	bl	207cc <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   193fc:	9b06      	ldr	r3, [sp, #24]
   193fe:	3301      	adds	r3, #1
   19400:	9306      	str	r3, [sp, #24]
   19402:	9b06      	ldr	r3, [sp, #24]
   19404:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   19408:	d3e8      	bcc.n	193dc <HciDrvHandler+0xf8>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   1940a:	4b4d      	ldr	r3, [pc, #308]	; (19540 <HciDrvHandler+0x25c>)
   1940c:	681a      	ldr	r2, [r3, #0]
   1940e:	4b4a      	ldr	r3, [pc, #296]	; (19538 <HciDrvHandler+0x254>)
   19410:	681b      	ldr	r3, [r3, #0]
   19412:	b29b      	uxth	r3, r3
   19414:	4619      	mov	r1, r3
   19416:	4610      	mov	r0, r2
   19418:	f006 fec6 	bl	201a8 <hciTrSerialRxIncoming>
   1941c:	4603      	mov	r3, r0
   1941e:	461a      	mov	r2, r3
   19420:	4b46      	ldr	r3, [pc, #280]	; (1953c <HciDrvHandler+0x258>)
   19422:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   19424:	4b45      	ldr	r3, [pc, #276]	; (1953c <HciDrvHandler+0x258>)
   19426:	681a      	ldr	r2, [r3, #0]
   19428:	4b43      	ldr	r3, [pc, #268]	; (19538 <HciDrvHandler+0x254>)
   1942a:	681b      	ldr	r3, [r3, #0]
   1942c:	429a      	cmp	r2, r3
   1942e:	d006      	beq.n	1943e <HciDrvHandler+0x15a>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19430:	4b44      	ldr	r3, [pc, #272]	; (19544 <HciDrvHandler+0x260>)
   19432:	781b      	ldrb	r3, [r3, #0]
   19434:	2101      	movs	r1, #1
   19436:	4618      	mov	r0, r3
   19438:	f7ff f8fc 	bl	18634 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   1943c:	e065      	b.n	1950a <HciDrvHandler+0x226>
                }

                g_ui32NumBytes   = 0;
   1943e:	4b3e      	ldr	r3, [pc, #248]	; (19538 <HciDrvHandler+0x254>)
   19440:	2200      	movs	r2, #0
   19442:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   19444:	4b3d      	ldr	r3, [pc, #244]	; (1953c <HciDrvHandler+0x258>)
   19446:	2200      	movs	r2, #0
   19448:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   1944a:	9b07      	ldr	r3, [sp, #28]
   1944c:	3301      	adds	r3, #1
   1944e:	9307      	str	r3, [sp, #28]
   19450:	e00f      	b.n	19472 <HciDrvHandler+0x18e>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   19452:	9b04      	ldr	r3, [sp, #16]
   19454:	2b00      	cmp	r3, #0
   19456:	d00c      	beq.n	19472 <HciDrvHandler+0x18e>
   19458:	9804      	ldr	r0, [sp, #16]
   1945a:	f7ff fd43 	bl	18ee4 <error_check>
   1945e:	f7ff fe55 	bl	1910c <HciDrvRadioShutdown>
   19462:	2000      	movs	r0, #0
   19464:	f7ff fd5a 	bl	18f1c <HciDrvRadioBoot>
   19468:	f000 f87e 	bl	19568 <HciDrvEmptyWriteQueue>
   1946c:	f7f8 fcc8 	bl	11e00 <DmDevReset>
   19470:	e05d      	b.n	1952e <HciDrvHandler+0x24a>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   19472:	9b07      	ldr	r3, [sp, #28]
   19474:	2b03      	cmp	r3, #3
   19476:	d93e      	bls.n	194f6 <HciDrvHandler+0x212>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19478:	4b32      	ldr	r3, [pc, #200]	; (19544 <HciDrvHandler+0x260>)
   1947a:	781b      	ldrb	r3, [r3, #0]
   1947c:	2101      	movs	r1, #1
   1947e:	4618      	mov	r0, r3
   19480:	f7ff f8d8 	bl	18634 <WsfSetEvent>

                break;
   19484:	e041      	b.n	1950a <HciDrvHandler+0x226>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   19486:	4b36      	ldr	r3, [pc, #216]	; (19560 <HciDrvHandler+0x27c>)
   19488:	689b      	ldr	r3, [r3, #8]
   1948a:	2b00      	cmp	r3, #0
   1948c:	d03c      	beq.n	19508 <HciDrvHandler+0x224>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   1948e:	4b34      	ldr	r3, [pc, #208]	; (19560 <HciDrvHandler+0x27c>)
   19490:	695a      	ldr	r2, [r3, #20]
   19492:	4b33      	ldr	r3, [pc, #204]	; (19560 <HciDrvHandler+0x27c>)
   19494:	685b      	ldr	r3, [r3, #4]
   19496:	4413      	add	r3, r2
   19498:	9305      	str	r3, [sp, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   1949a:	4b2d      	ldr	r3, [pc, #180]	; (19550 <HciDrvHandler+0x26c>)
   1949c:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   1949e:	9b05      	ldr	r3, [sp, #20]
   194a0:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   194a2:	9b05      	ldr	r3, [sp, #20]
   194a4:	681b      	ldr	r3, [r3, #0]
   194a6:	2100      	movs	r1, #0
   194a8:	f00c fd58 	bl	25f5c <am_hal_ble_blocking_hci_write>
   194ac:	9004      	str	r0, [sp, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   194ae:	9b04      	ldr	r3, [sp, #16]
   194b0:	2b00      	cmp	r3, #0
   194b2:	d111      	bne.n	194d8 <HciDrvHandler+0x1f4>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   194b4:	481f      	ldr	r0, [pc, #124]	; (19534 <HciDrvHandler+0x250>)
   194b6:	f7ff fb83 	bl	18bc0 <WsfTimerStop>
   194ba:	f242 7110 	movw	r1, #10000	; 0x2710
   194be:	481d      	ldr	r0, [pc, #116]	; (19534 <HciDrvHandler+0x250>)
   194c0:	f7ff fb6a 	bl	18b98 <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   194c4:	2201      	movs	r2, #1
   194c6:	2100      	movs	r1, #0
   194c8:	4825      	ldr	r0, [pc, #148]	; (19560 <HciDrvHandler+0x27c>)
   194ca:	f00d ffab 	bl	27424 <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   194ce:	2300      	movs	r3, #0
   194d0:	9309      	str	r3, [sp, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   194d2:	2300      	movs	r3, #0
   194d4:	9308      	str	r3, [sp, #32]
   194d6:	e00e      	b.n	194f6 <HciDrvHandler+0x212>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   194d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   194da:	3301      	adds	r3, #1
   194dc:	9309      	str	r3, [sp, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   194de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   194e0:	f242 7210 	movw	r2, #10000	; 0x2710
   194e4:	4293      	cmp	r3, r2
   194e6:	d906      	bls.n	194f6 <HciDrvHandler+0x212>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   194e8:	4b16      	ldr	r3, [pc, #88]	; (19544 <HciDrvHandler+0x260>)
   194ea:	781b      	ldrb	r3, [r3, #0]
   194ec:	2101      	movs	r1, #1
   194ee:	4618      	mov	r0, r3
   194f0:	f7ff f8a0 	bl	18634 <WsfSetEvent>
                        break;
   194f4:	e009      	b.n	1950a <HciDrvHandler+0x226>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   194f6:	9b08      	ldr	r3, [sp, #32]
   194f8:	1c5a      	adds	r2, r3, #1
   194fa:	9208      	str	r2, [sp, #32]
   194fc:	f242 720f 	movw	r2, #9999	; 0x270f
   19500:	4293      	cmp	r3, r2
   19502:	f67f af39 	bls.w	19378 <HciDrvHandler+0x94>
   19506:	e000      	b.n	1950a <HciDrvHandler+0x226>
                break;
   19508:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   1950a:	9b08      	ldr	r3, [sp, #32]
   1950c:	f242 7210 	movw	r2, #10000	; 0x2710
   19510:	4293      	cmp	r3, r2
   19512:	d10c      	bne.n	1952e <HciDrvHandler+0x24a>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   19514:	4813      	ldr	r0, [pc, #76]	; (19564 <HciDrvHandler+0x280>)
   19516:	f7ff fce5 	bl	18ee4 <error_check>
   1951a:	f7ff fdf7 	bl	1910c <HciDrvRadioShutdown>
   1951e:	2000      	movs	r0, #0
   19520:	f7ff fcfc 	bl	18f1c <HciDrvRadioBoot>
   19524:	f000 f820 	bl	19568 <HciDrvEmptyWriteQueue>
   19528:	f7f8 fc6a 	bl	11e00 <DmDevReset>
   1952c:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   1952e:	b00b      	add	sp, #44	; 0x2c
   19530:	f85d fb04 	ldr.w	pc, [sp], #4
   19534:	10008cf0 	.word	0x10008cf0
   19538:	100036ec 	.word	0x100036ec
   1953c:	100036f0 	.word	0x100036f0
   19540:	10002b98 	.word	0x10002b98
   19544:	100036e8 	.word	0x100036e8
   19548:	5000c000 	.word	0x5000c000
   1954c:	100036f4 	.word	0x100036f4
   19550:	10009620 	.word	0x10009620
   19554:	10008d00 	.word	0x10008d00
   19558:	09000002 	.word	0x09000002
   1955c:	00028b28 	.word	0x00028b28
   19560:	10008cd8 	.word	0x10008cd8
   19564:	09000006 	.word	0x09000006

00019568 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   19568:	b508      	push	{r3, lr}
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   1956a:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1956e:	f44f 7282 	mov.w	r2, #260	; 0x104
   19572:	4903      	ldr	r1, [pc, #12]	; (19580 <HciDrvEmptyWriteQueue+0x18>)
   19574:	4803      	ldr	r0, [pc, #12]	; (19584 <HciDrvEmptyWriteQueue+0x1c>)
   19576:	f00d ff0b 	bl	27390 <am_hal_queue_init>
}
   1957a:	bf00      	nop
   1957c:	bd08      	pop	{r3, pc}
   1957e:	bf00      	nop
   19580:	10008e00 	.word	0x10008e00
   19584:	10008cd8 	.word	0x10008cd8

00019588 <default_RNG>:
    return 1;
}

#else /* Some other platform */

static int default_RNG(uint8_t *dest, unsigned size) {
   19588:	b082      	sub	sp, #8
   1958a:	9001      	str	r0, [sp, #4]
   1958c:	9100      	str	r1, [sp, #0]
    return 0;
   1958e:	2300      	movs	r3, #0
}
   19590:	4618      	mov	r0, r3
   19592:	b002      	add	sp, #8
   19594:	4770      	bx	lr
	...

00019598 <uECC_set_rng>:

#endif

static uECC_RNG_Function g_rng_function = &default_RNG;

void uECC_set_rng(uECC_RNG_Function rng_function) {
   19598:	b082      	sub	sp, #8
   1959a:	9001      	str	r0, [sp, #4]
    g_rng_function = rng_function;
   1959c:	4a02      	ldr	r2, [pc, #8]	; (195a8 <uECC_set_rng+0x10>)
   1959e:	9b01      	ldr	r3, [sp, #4]
   195a0:	6013      	str	r3, [r2, #0]
}
   195a2:	bf00      	nop
   195a4:	b002      	add	sp, #8
   195a6:	4770      	bx	lr
   195a8:	10002b9c 	.word	0x10002b9c

000195ac <vli_add>:
#define STR2(thing) #thing
#define STR(thing) STR2(thing)

#if (uECC_ASM == uECC_asm_fast)

static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   195ac:	b430      	push	{r4, r5}
   195ae:	b088      	sub	sp, #32
   195b0:	9003      	str	r0, [sp, #12]
   195b2:	9102      	str	r1, [sp, #8]
   195b4:	9201      	str	r2, [sp, #4]
    uint32_t carry = 0;
   195b6:	2300      	movs	r3, #0
   195b8:	9307      	str	r3, [sp, #28]
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   195ba:	9803      	ldr	r0, [sp, #12]
   195bc:	9902      	ldr	r1, [sp, #8]
   195be:	9a01      	ldr	r2, [sp, #4]
   195c0:	9b07      	ldr	r3, [sp, #28]
   195c2:	c920      	ldmia	r1!, {r5}
   195c4:	ca10      	ldmia	r2!, {r4}
   195c6:	192d      	adds	r5, r5, r4
   195c8:	c020      	stmia	r0!, {r5}
   195ca:	c920      	ldmia	r1!, {r5}
   195cc:	ca10      	ldmia	r2!, {r4}
   195ce:	4165      	adcs	r5, r4
   195d0:	c020      	stmia	r0!, {r5}
   195d2:	c920      	ldmia	r1!, {r5}
   195d4:	ca10      	ldmia	r2!, {r4}
   195d6:	4165      	adcs	r5, r4
   195d8:	c020      	stmia	r0!, {r5}
   195da:	c920      	ldmia	r1!, {r5}
   195dc:	ca10      	ldmia	r2!, {r4}
   195de:	4165      	adcs	r5, r4
   195e0:	c020      	stmia	r0!, {r5}
   195e2:	c920      	ldmia	r1!, {r5}
   195e4:	ca10      	ldmia	r2!, {r4}
   195e6:	4165      	adcs	r5, r4
   195e8:	c020      	stmia	r0!, {r5}
   195ea:	c920      	ldmia	r1!, {r5}
   195ec:	ca10      	ldmia	r2!, {r4}
   195ee:	4165      	adcs	r5, r4
   195f0:	c020      	stmia	r0!, {r5}
   195f2:	c920      	ldmia	r1!, {r5}
   195f4:	ca10      	ldmia	r2!, {r4}
   195f6:	4165      	adcs	r5, r4
   195f8:	c020      	stmia	r0!, {r5}
   195fa:	c920      	ldmia	r1!, {r5}
   195fc:	ca10      	ldmia	r2!, {r4}
   195fe:	4165      	adcs	r5, r4
   19600:	c020      	stmia	r0!, {r5}
   19602:	415b      	adcs	r3, r3
   19604:	9003      	str	r0, [sp, #12]
   19606:	9102      	str	r1, [sp, #8]
   19608:	9201      	str	r2, [sp, #4]
   1960a:	9307      	str	r3, [sp, #28]
   1960c:	9506      	str	r5, [sp, #24]
   1960e:	9405      	str	r4, [sp, #20]
          [carry] "+r" (carry), [left] "=r" (left_word), [right] "=r" (right_word)
    #endif
        :
        : "cc", "memory"
    );
    return carry;
   19610:	9b07      	ldr	r3, [sp, #28]
}
   19612:	4618      	mov	r0, r3
   19614:	b008      	add	sp, #32
   19616:	bc30      	pop	{r4, r5}
   19618:	4770      	bx	lr

0001961a <vli_sub>:
#define asm_add 1

static uint32_t vli_sub(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   1961a:	b430      	push	{r4, r5}
   1961c:	b088      	sub	sp, #32
   1961e:	9003      	str	r0, [sp, #12]
   19620:	9102      	str	r1, [sp, #8]
   19622:	9201      	str	r2, [sp, #4]
    uint32_t carry = 0;
   19624:	2300      	movs	r3, #0
   19626:	9307      	str	r3, [sp, #28]
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   19628:	9803      	ldr	r0, [sp, #12]
   1962a:	9902      	ldr	r1, [sp, #8]
   1962c:	9a01      	ldr	r2, [sp, #4]
   1962e:	9b07      	ldr	r3, [sp, #28]
   19630:	c920      	ldmia	r1!, {r5}
   19632:	ca10      	ldmia	r2!, {r4}
   19634:	1b2d      	subs	r5, r5, r4
   19636:	c020      	stmia	r0!, {r5}
   19638:	c920      	ldmia	r1!, {r5}
   1963a:	ca10      	ldmia	r2!, {r4}
   1963c:	41a5      	sbcs	r5, r4
   1963e:	c020      	stmia	r0!, {r5}
   19640:	c920      	ldmia	r1!, {r5}
   19642:	ca10      	ldmia	r2!, {r4}
   19644:	41a5      	sbcs	r5, r4
   19646:	c020      	stmia	r0!, {r5}
   19648:	c920      	ldmia	r1!, {r5}
   1964a:	ca10      	ldmia	r2!, {r4}
   1964c:	41a5      	sbcs	r5, r4
   1964e:	c020      	stmia	r0!, {r5}
   19650:	c920      	ldmia	r1!, {r5}
   19652:	ca10      	ldmia	r2!, {r4}
   19654:	41a5      	sbcs	r5, r4
   19656:	c020      	stmia	r0!, {r5}
   19658:	c920      	ldmia	r1!, {r5}
   1965a:	ca10      	ldmia	r2!, {r4}
   1965c:	41a5      	sbcs	r5, r4
   1965e:	c020      	stmia	r0!, {r5}
   19660:	c920      	ldmia	r1!, {r5}
   19662:	ca10      	ldmia	r2!, {r4}
   19664:	41a5      	sbcs	r5, r4
   19666:	c020      	stmia	r0!, {r5}
   19668:	c920      	ldmia	r1!, {r5}
   1966a:	ca10      	ldmia	r2!, {r4}
   1966c:	41a5      	sbcs	r5, r4
   1966e:	c020      	stmia	r0!, {r5}
   19670:	415b      	adcs	r3, r3
   19672:	9003      	str	r0, [sp, #12]
   19674:	9102      	str	r1, [sp, #8]
   19676:	9201      	str	r2, [sp, #4]
   19678:	9307      	str	r3, [sp, #28]
   1967a:	9506      	str	r5, [sp, #24]
   1967c:	9405      	str	r4, [sp, #20]
          [carry] "+r" (carry), [left] "=r" (left_word), [right] "=r" (right_word)
    #endif
        :
        : "cc", "memory"
    );
    return !carry; // note that on ARM, carry flag set means "no borrow" when subtracting
   1967e:	9b07      	ldr	r3, [sp, #28]
   19680:	2b00      	cmp	r3, #0
   19682:	bf0c      	ite	eq
   19684:	2301      	moveq	r3, #1
   19686:	2300      	movne	r3, #0
   19688:	b2db      	uxtb	r3, r3
                   // (for some reason...)
}
   1968a:	4618      	mov	r0, r3
   1968c:	b008      	add	sp, #32
   1968e:	bc30      	pop	{r4, r5}
   19690:	4770      	bx	lr

00019692 <vli_mult>:
}
#define asm_mult 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_mult(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   19692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19696:	b085      	sub	sp, #20
   19698:	9003      	str	r0, [sp, #12]
   1969a:	9102      	str	r1, [sp, #8]
   1969c:	9201      	str	r2, [sp, #4]
    register uint32_t *r0 __asm__("r0") = result;
   1969e:	9803      	ldr	r0, [sp, #12]
    register const uint32_t *r1 __asm__("r1") = left;
   196a0:	9902      	ldr	r1, [sp, #8]
    register const uint32_t *r2 __asm__("r2") = right;
   196a2:	9a01      	ldr	r2, [sp, #4]

    __asm__ volatile (
   196a4:	f100 0018 	add.w	r0, r0, #24
   196a8:	f102 0218 	add.w	r2, r2, #24
   196ac:	c918      	ldmia	r1!, {r3, r4}
   196ae:	cac0      	ldmia	r2!, {r6, r7}
   196b0:	fba3 bc06 	umull	fp, ip, r3, r6
   196b4:	f840 bb04 	str.w	fp, [r0], #4
   196b8:	f04f 0a00 	mov.w	sl, #0
   196bc:	fba3 b907 	umull	fp, r9, r3, r7
   196c0:	eb1c 0c0b 	adds.w	ip, ip, fp
   196c4:	f149 0900 	adc.w	r9, r9, #0
   196c8:	fba4 be06 	umull	fp, lr, r4, r6
   196cc:	eb1c 0c0b 	adds.w	ip, ip, fp
   196d0:	eb59 090e 	adcs.w	r9, r9, lr
   196d4:	f14a 0a00 	adc.w	sl, sl, #0
   196d8:	f840 cb04 	str.w	ip, [r0], #4
   196dc:	fba4 ce07 	umull	ip, lr, r4, r7
   196e0:	eb19 090c 	adds.w	r9, r9, ip
   196e4:	eb4a 0a0e 	adc.w	sl, sl, lr
   196e8:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   196ec:	f1a0 001c 	sub.w	r0, r0, #28
   196f0:	f1a2 0214 	sub.w	r2, r2, #20
   196f4:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   196f8:	c920      	ldmia	r1!, {r5}
   196fa:	fba3 bc06 	umull	fp, ip, r3, r6
   196fe:	f840 bb04 	str.w	fp, [r0], #4
   19702:	f04f 0a00 	mov.w	sl, #0
   19706:	fba3 b907 	umull	fp, r9, r3, r7
   1970a:	eb1c 0c0b 	adds.w	ip, ip, fp
   1970e:	f149 0900 	adc.w	r9, r9, #0
   19712:	fba4 be06 	umull	fp, lr, r4, r6
   19716:	eb1c 0c0b 	adds.w	ip, ip, fp
   1971a:	eb59 090e 	adcs.w	r9, r9, lr
   1971e:	f14a 0a00 	adc.w	sl, sl, #0
   19722:	f840 cb04 	str.w	ip, [r0], #4
   19726:	f04f 0b00 	mov.w	fp, #0
   1972a:	fba3 ce08 	umull	ip, lr, r3, r8
   1972e:	eb19 090c 	adds.w	r9, r9, ip
   19732:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19736:	f14b 0b00 	adc.w	fp, fp, #0
   1973a:	fba4 ce07 	umull	ip, lr, r4, r7
   1973e:	eb19 090c 	adds.w	r9, r9, ip
   19742:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19746:	f14b 0b00 	adc.w	fp, fp, #0
   1974a:	fba5 ce06 	umull	ip, lr, r5, r6
   1974e:	eb19 090c 	adds.w	r9, r9, ip
   19752:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19756:	f14b 0b00 	adc.w	fp, fp, #0
   1975a:	f840 9b04 	str.w	r9, [r0], #4
   1975e:	c908      	ldmia	r1!, {r3}
   19760:	f04f 0c00 	mov.w	ip, #0
   19764:	fba4 e908 	umull	lr, r9, r4, r8
   19768:	eb1a 0a0e 	adds.w	sl, sl, lr
   1976c:	eb5b 0b09 	adcs.w	fp, fp, r9
   19770:	f14c 0c00 	adc.w	ip, ip, #0
   19774:	fba5 e907 	umull	lr, r9, r5, r7
   19778:	eb1a 0a0e 	adds.w	sl, sl, lr
   1977c:	eb5b 0b09 	adcs.w	fp, fp, r9
   19780:	f14c 0c00 	adc.w	ip, ip, #0
   19784:	fba3 e906 	umull	lr, r9, r3, r6
   19788:	eb1a 0a0e 	adds.w	sl, sl, lr
   1978c:	eb5b 0b09 	adcs.w	fp, fp, r9
   19790:	f14c 0c00 	adc.w	ip, ip, #0
   19794:	f8d0 e000 	ldr.w	lr, [r0]
   19798:	eb1a 0a0e 	adds.w	sl, sl, lr
   1979c:	f15b 0b00 	adcs.w	fp, fp, #0
   197a0:	f14c 0c00 	adc.w	ip, ip, #0
   197a4:	f840 ab04 	str.w	sl, [r0], #4
   197a8:	c910      	ldmia	r1!, {r4}
   197aa:	f04f 0e00 	mov.w	lr, #0
   197ae:	fba5 9a08 	umull	r9, sl, r5, r8
   197b2:	eb1b 0b09 	adds.w	fp, fp, r9
   197b6:	eb5c 0c0a 	adcs.w	ip, ip, sl
   197ba:	f14e 0e00 	adc.w	lr, lr, #0
   197be:	fba3 9a07 	umull	r9, sl, r3, r7
   197c2:	eb1b 0b09 	adds.w	fp, fp, r9
   197c6:	eb5c 0c0a 	adcs.w	ip, ip, sl
   197ca:	f14e 0e00 	adc.w	lr, lr, #0
   197ce:	fba4 9a06 	umull	r9, sl, r4, r6
   197d2:	eb1b 0b09 	adds.w	fp, fp, r9
   197d6:	eb5c 0c0a 	adcs.w	ip, ip, sl
   197da:	f14e 0e00 	adc.w	lr, lr, #0
   197de:	f8d0 9000 	ldr.w	r9, [r0]
   197e2:	eb1b 0b09 	adds.w	fp, fp, r9
   197e6:	f15c 0c00 	adcs.w	ip, ip, #0
   197ea:	f14e 0e00 	adc.w	lr, lr, #0
   197ee:	f840 bb04 	str.w	fp, [r0], #4
   197f2:	ca40      	ldmia	r2!, {r6}
   197f4:	f04f 0900 	mov.w	r9, #0
   197f8:	fba5 ab06 	umull	sl, fp, r5, r6
   197fc:	eb1c 0c0a 	adds.w	ip, ip, sl
   19800:	eb5e 0e0b 	adcs.w	lr, lr, fp
   19804:	f149 0900 	adc.w	r9, r9, #0
   19808:	fba3 ab08 	umull	sl, fp, r3, r8
   1980c:	eb1c 0c0a 	adds.w	ip, ip, sl
   19810:	eb5e 0e0b 	adcs.w	lr, lr, fp
   19814:	f149 0900 	adc.w	r9, r9, #0
   19818:	fba4 ab07 	umull	sl, fp, r4, r7
   1981c:	eb1c 0c0a 	adds.w	ip, ip, sl
   19820:	eb5e 0e0b 	adcs.w	lr, lr, fp
   19824:	f149 0900 	adc.w	r9, r9, #0
   19828:	f8d0 a000 	ldr.w	sl, [r0]
   1982c:	eb1c 0c0a 	adds.w	ip, ip, sl
   19830:	f15e 0e00 	adcs.w	lr, lr, #0
   19834:	f149 0900 	adc.w	r9, r9, #0
   19838:	f840 cb04 	str.w	ip, [r0], #4
   1983c:	ca80      	ldmia	r2!, {r7}
   1983e:	f04f 0a00 	mov.w	sl, #0
   19842:	fba5 bc07 	umull	fp, ip, r5, r7
   19846:	eb1e 0e0b 	adds.w	lr, lr, fp
   1984a:	eb59 090c 	adcs.w	r9, r9, ip
   1984e:	f14a 0a00 	adc.w	sl, sl, #0
   19852:	fba3 bc06 	umull	fp, ip, r3, r6
   19856:	eb1e 0e0b 	adds.w	lr, lr, fp
   1985a:	eb59 090c 	adcs.w	r9, r9, ip
   1985e:	f14a 0a00 	adc.w	sl, sl, #0
   19862:	fba4 bc08 	umull	fp, ip, r4, r8
   19866:	eb1e 0e0b 	adds.w	lr, lr, fp
   1986a:	eb59 090c 	adcs.w	r9, r9, ip
   1986e:	f14a 0a00 	adc.w	sl, sl, #0
   19872:	f8d0 b000 	ldr.w	fp, [r0]
   19876:	eb1e 0e0b 	adds.w	lr, lr, fp
   1987a:	f159 0900 	adcs.w	r9, r9, #0
   1987e:	f14a 0a00 	adc.w	sl, sl, #0
   19882:	f840 eb04 	str.w	lr, [r0], #4
   19886:	f04f 0b00 	mov.w	fp, #0
   1988a:	fba3 ce07 	umull	ip, lr, r3, r7
   1988e:	eb19 090c 	adds.w	r9, r9, ip
   19892:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19896:	f14b 0b00 	adc.w	fp, fp, #0
   1989a:	fba4 ce06 	umull	ip, lr, r4, r6
   1989e:	eb19 090c 	adds.w	r9, r9, ip
   198a2:	eb5a 0a0e 	adcs.w	sl, sl, lr
   198a6:	f14b 0b00 	adc.w	fp, fp, #0
   198aa:	f840 9b04 	str.w	r9, [r0], #4
   198ae:	fba4 e907 	umull	lr, r9, r4, r7
   198b2:	eb1a 0a0e 	adds.w	sl, sl, lr
   198b6:	eb4b 0b09 	adc.w	fp, fp, r9
   198ba:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   198be:	f1a0 0034 	sub.w	r0, r0, #52	; 0x34
   198c2:	f1a1 0114 	sub.w	r1, r1, #20
   198c6:	f1a2 0220 	sub.w	r2, r2, #32
   198ca:	c938      	ldmia	r1!, {r3, r4, r5}
   198cc:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   198d0:	fba3 bc06 	umull	fp, ip, r3, r6
   198d4:	f840 bb04 	str.w	fp, [r0], #4
   198d8:	f04f 0a00 	mov.w	sl, #0
   198dc:	fba3 b907 	umull	fp, r9, r3, r7
   198e0:	eb1c 0c0b 	adds.w	ip, ip, fp
   198e4:	f149 0900 	adc.w	r9, r9, #0
   198e8:	fba4 be06 	umull	fp, lr, r4, r6
   198ec:	eb1c 0c0b 	adds.w	ip, ip, fp
   198f0:	eb59 090e 	adcs.w	r9, r9, lr
   198f4:	f14a 0a00 	adc.w	sl, sl, #0
   198f8:	f840 cb04 	str.w	ip, [r0], #4
   198fc:	f04f 0b00 	mov.w	fp, #0
   19900:	fba3 ce08 	umull	ip, lr, r3, r8
   19904:	eb19 090c 	adds.w	r9, r9, ip
   19908:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1990c:	f14b 0b00 	adc.w	fp, fp, #0
   19910:	fba4 ce07 	umull	ip, lr, r4, r7
   19914:	eb19 090c 	adds.w	r9, r9, ip
   19918:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1991c:	f14b 0b00 	adc.w	fp, fp, #0
   19920:	fba5 ce06 	umull	ip, lr, r5, r6
   19924:	eb19 090c 	adds.w	r9, r9, ip
   19928:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1992c:	f14b 0b00 	adc.w	fp, fp, #0
   19930:	f840 9b04 	str.w	r9, [r0], #4
   19934:	c908      	ldmia	r1!, {r3}
   19936:	f04f 0c00 	mov.w	ip, #0
   1993a:	fba4 e908 	umull	lr, r9, r4, r8
   1993e:	eb1a 0a0e 	adds.w	sl, sl, lr
   19942:	eb5b 0b09 	adcs.w	fp, fp, r9
   19946:	f14c 0c00 	adc.w	ip, ip, #0
   1994a:	fba5 e907 	umull	lr, r9, r5, r7
   1994e:	eb1a 0a0e 	adds.w	sl, sl, lr
   19952:	eb5b 0b09 	adcs.w	fp, fp, r9
   19956:	f14c 0c00 	adc.w	ip, ip, #0
   1995a:	fba3 e906 	umull	lr, r9, r3, r6
   1995e:	eb1a 0a0e 	adds.w	sl, sl, lr
   19962:	eb5b 0b09 	adcs.w	fp, fp, r9
   19966:	f14c 0c00 	adc.w	ip, ip, #0
   1996a:	f8d0 e000 	ldr.w	lr, [r0]
   1996e:	eb1a 0a0e 	adds.w	sl, sl, lr
   19972:	f15b 0b00 	adcs.w	fp, fp, #0
   19976:	f14c 0c00 	adc.w	ip, ip, #0
   1997a:	f840 ab04 	str.w	sl, [r0], #4
   1997e:	c910      	ldmia	r1!, {r4}
   19980:	f04f 0e00 	mov.w	lr, #0
   19984:	fba5 9a08 	umull	r9, sl, r5, r8
   19988:	eb1b 0b09 	adds.w	fp, fp, r9
   1998c:	eb5c 0c0a 	adcs.w	ip, ip, sl
   19990:	f14e 0e00 	adc.w	lr, lr, #0
   19994:	fba3 9a07 	umull	r9, sl, r3, r7
   19998:	eb1b 0b09 	adds.w	fp, fp, r9
   1999c:	eb5c 0c0a 	adcs.w	ip, ip, sl
   199a0:	f14e 0e00 	adc.w	lr, lr, #0
   199a4:	fba4 9a06 	umull	r9, sl, r4, r6
   199a8:	eb1b 0b09 	adds.w	fp, fp, r9
   199ac:	eb5c 0c0a 	adcs.w	ip, ip, sl
   199b0:	f14e 0e00 	adc.w	lr, lr, #0
   199b4:	f8d0 9000 	ldr.w	r9, [r0]
   199b8:	eb1b 0b09 	adds.w	fp, fp, r9
   199bc:	f15c 0c00 	adcs.w	ip, ip, #0
   199c0:	f14e 0e00 	adc.w	lr, lr, #0
   199c4:	f840 bb04 	str.w	fp, [r0], #4
   199c8:	c920      	ldmia	r1!, {r5}
   199ca:	f04f 0900 	mov.w	r9, #0
   199ce:	fba3 ab08 	umull	sl, fp, r3, r8
   199d2:	eb1c 0c0a 	adds.w	ip, ip, sl
   199d6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   199da:	f149 0900 	adc.w	r9, r9, #0
   199de:	fba4 ab07 	umull	sl, fp, r4, r7
   199e2:	eb1c 0c0a 	adds.w	ip, ip, sl
   199e6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   199ea:	f149 0900 	adc.w	r9, r9, #0
   199ee:	fba5 ab06 	umull	sl, fp, r5, r6
   199f2:	eb1c 0c0a 	adds.w	ip, ip, sl
   199f6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   199fa:	f149 0900 	adc.w	r9, r9, #0
   199fe:	f8d0 a000 	ldr.w	sl, [r0]
   19a02:	eb1c 0c0a 	adds.w	ip, ip, sl
   19a06:	f15e 0e00 	adcs.w	lr, lr, #0
   19a0a:	f149 0900 	adc.w	r9, r9, #0
   19a0e:	f840 cb04 	str.w	ip, [r0], #4
   19a12:	c908      	ldmia	r1!, {r3}
   19a14:	f04f 0a00 	mov.w	sl, #0
   19a18:	fba4 bc08 	umull	fp, ip, r4, r8
   19a1c:	eb1e 0e0b 	adds.w	lr, lr, fp
   19a20:	eb59 090c 	adcs.w	r9, r9, ip
   19a24:	f14a 0a00 	adc.w	sl, sl, #0
   19a28:	fba5 bc07 	umull	fp, ip, r5, r7
   19a2c:	eb1e 0e0b 	adds.w	lr, lr, fp
   19a30:	eb59 090c 	adcs.w	r9, r9, ip
   19a34:	f14a 0a00 	adc.w	sl, sl, #0
   19a38:	fba3 bc06 	umull	fp, ip, r3, r6
   19a3c:	eb1e 0e0b 	adds.w	lr, lr, fp
   19a40:	eb59 090c 	adcs.w	r9, r9, ip
   19a44:	f14a 0a00 	adc.w	sl, sl, #0
   19a48:	f8d0 b000 	ldr.w	fp, [r0]
   19a4c:	eb1e 0e0b 	adds.w	lr, lr, fp
   19a50:	f159 0900 	adcs.w	r9, r9, #0
   19a54:	f14a 0a00 	adc.w	sl, sl, #0
   19a58:	f840 eb04 	str.w	lr, [r0], #4
   19a5c:	c910      	ldmia	r1!, {r4}
   19a5e:	f04f 0b00 	mov.w	fp, #0
   19a62:	fba5 ce08 	umull	ip, lr, r5, r8
   19a66:	eb19 090c 	adds.w	r9, r9, ip
   19a6a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19a6e:	f14b 0b00 	adc.w	fp, fp, #0
   19a72:	fba3 ce07 	umull	ip, lr, r3, r7
   19a76:	eb19 090c 	adds.w	r9, r9, ip
   19a7a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19a7e:	f14b 0b00 	adc.w	fp, fp, #0
   19a82:	fba4 ce06 	umull	ip, lr, r4, r6
   19a86:	eb19 090c 	adds.w	r9, r9, ip
   19a8a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19a8e:	f14b 0b00 	adc.w	fp, fp, #0
   19a92:	f8d0 c000 	ldr.w	ip, [r0]
   19a96:	eb19 090c 	adds.w	r9, r9, ip
   19a9a:	f15a 0a00 	adcs.w	sl, sl, #0
   19a9e:	f14b 0b00 	adc.w	fp, fp, #0
   19aa2:	f840 9b04 	str.w	r9, [r0], #4
   19aa6:	ca40      	ldmia	r2!, {r6}
   19aa8:	f04f 0c00 	mov.w	ip, #0
   19aac:	fba5 e906 	umull	lr, r9, r5, r6
   19ab0:	eb1a 0a0e 	adds.w	sl, sl, lr
   19ab4:	eb5b 0b09 	adcs.w	fp, fp, r9
   19ab8:	f14c 0c00 	adc.w	ip, ip, #0
   19abc:	fba3 e908 	umull	lr, r9, r3, r8
   19ac0:	eb1a 0a0e 	adds.w	sl, sl, lr
   19ac4:	eb5b 0b09 	adcs.w	fp, fp, r9
   19ac8:	f14c 0c00 	adc.w	ip, ip, #0
   19acc:	fba4 e907 	umull	lr, r9, r4, r7
   19ad0:	eb1a 0a0e 	adds.w	sl, sl, lr
   19ad4:	eb5b 0b09 	adcs.w	fp, fp, r9
   19ad8:	f14c 0c00 	adc.w	ip, ip, #0
   19adc:	f8d0 e000 	ldr.w	lr, [r0]
   19ae0:	eb1a 0a0e 	adds.w	sl, sl, lr
   19ae4:	f15b 0b00 	adcs.w	fp, fp, #0
   19ae8:	f14c 0c00 	adc.w	ip, ip, #0
   19aec:	f840 ab04 	str.w	sl, [r0], #4
   19af0:	ca80      	ldmia	r2!, {r7}
   19af2:	f04f 0e00 	mov.w	lr, #0
   19af6:	fba5 9a07 	umull	r9, sl, r5, r7
   19afa:	eb1b 0b09 	adds.w	fp, fp, r9
   19afe:	eb5c 0c0a 	adcs.w	ip, ip, sl
   19b02:	f14e 0e00 	adc.w	lr, lr, #0
   19b06:	fba3 9a06 	umull	r9, sl, r3, r6
   19b0a:	eb1b 0b09 	adds.w	fp, fp, r9
   19b0e:	eb5c 0c0a 	adcs.w	ip, ip, sl
   19b12:	f14e 0e00 	adc.w	lr, lr, #0
   19b16:	fba4 9a08 	umull	r9, sl, r4, r8
   19b1a:	eb1b 0b09 	adds.w	fp, fp, r9
   19b1e:	eb5c 0c0a 	adcs.w	ip, ip, sl
   19b22:	f14e 0e00 	adc.w	lr, lr, #0
   19b26:	f8d0 9000 	ldr.w	r9, [r0]
   19b2a:	eb1b 0b09 	adds.w	fp, fp, r9
   19b2e:	f15c 0c00 	adcs.w	ip, ip, #0
   19b32:	f14e 0e00 	adc.w	lr, lr, #0
   19b36:	f840 bb04 	str.w	fp, [r0], #4
   19b3a:	f852 8b04 	ldr.w	r8, [r2], #4
   19b3e:	f04f 0900 	mov.w	r9, #0
   19b42:	fba5 ab08 	umull	sl, fp, r5, r8
   19b46:	eb1c 0c0a 	adds.w	ip, ip, sl
   19b4a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   19b4e:	f149 0900 	adc.w	r9, r9, #0
   19b52:	fba3 ab07 	umull	sl, fp, r3, r7
   19b56:	eb1c 0c0a 	adds.w	ip, ip, sl
   19b5a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   19b5e:	f149 0900 	adc.w	r9, r9, #0
   19b62:	fba4 ab06 	umull	sl, fp, r4, r6
   19b66:	eb1c 0c0a 	adds.w	ip, ip, sl
   19b6a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   19b6e:	f149 0900 	adc.w	r9, r9, #0
   19b72:	f8d0 a000 	ldr.w	sl, [r0]
   19b76:	eb1c 0c0a 	adds.w	ip, ip, sl
   19b7a:	f15e 0e00 	adcs.w	lr, lr, #0
   19b7e:	f149 0900 	adc.w	r9, r9, #0
   19b82:	f840 cb04 	str.w	ip, [r0], #4
   19b86:	ca40      	ldmia	r2!, {r6}
   19b88:	f04f 0a00 	mov.w	sl, #0
   19b8c:	fba5 bc06 	umull	fp, ip, r5, r6
   19b90:	eb1e 0e0b 	adds.w	lr, lr, fp
   19b94:	eb59 090c 	adcs.w	r9, r9, ip
   19b98:	f14a 0a00 	adc.w	sl, sl, #0
   19b9c:	fba3 bc08 	umull	fp, ip, r3, r8
   19ba0:	eb1e 0e0b 	adds.w	lr, lr, fp
   19ba4:	eb59 090c 	adcs.w	r9, r9, ip
   19ba8:	f14a 0a00 	adc.w	sl, sl, #0
   19bac:	fba4 bc07 	umull	fp, ip, r4, r7
   19bb0:	eb1e 0e0b 	adds.w	lr, lr, fp
   19bb4:	eb59 090c 	adcs.w	r9, r9, ip
   19bb8:	f14a 0a00 	adc.w	sl, sl, #0
   19bbc:	f8d0 b000 	ldr.w	fp, [r0]
   19bc0:	eb1e 0e0b 	adds.w	lr, lr, fp
   19bc4:	f159 0900 	adcs.w	r9, r9, #0
   19bc8:	f14a 0a00 	adc.w	sl, sl, #0
   19bcc:	f840 eb04 	str.w	lr, [r0], #4
   19bd0:	ca80      	ldmia	r2!, {r7}
   19bd2:	f04f 0b00 	mov.w	fp, #0
   19bd6:	fba5 ce07 	umull	ip, lr, r5, r7
   19bda:	eb19 090c 	adds.w	r9, r9, ip
   19bde:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19be2:	f14b 0b00 	adc.w	fp, fp, #0
   19be6:	fba3 ce06 	umull	ip, lr, r3, r6
   19bea:	eb19 090c 	adds.w	r9, r9, ip
   19bee:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19bf2:	f14b 0b00 	adc.w	fp, fp, #0
   19bf6:	fba4 ce08 	umull	ip, lr, r4, r8
   19bfa:	eb19 090c 	adds.w	r9, r9, ip
   19bfe:	eb5a 0a0e 	adcs.w	sl, sl, lr
   19c02:	f14b 0b00 	adc.w	fp, fp, #0
   19c06:	f8d0 c000 	ldr.w	ip, [r0]
   19c0a:	eb19 090c 	adds.w	r9, r9, ip
   19c0e:	f15a 0a00 	adcs.w	sl, sl, #0
   19c12:	f14b 0b00 	adc.w	fp, fp, #0
   19c16:	f840 9b04 	str.w	r9, [r0], #4
   19c1a:	f04f 0c00 	mov.w	ip, #0
   19c1e:	fba3 e907 	umull	lr, r9, r3, r7
   19c22:	eb1a 0a0e 	adds.w	sl, sl, lr
   19c26:	eb5b 0b09 	adcs.w	fp, fp, r9
   19c2a:	f14c 0c00 	adc.w	ip, ip, #0
   19c2e:	fba4 e906 	umull	lr, r9, r4, r6
   19c32:	eb1a 0a0e 	adds.w	sl, sl, lr
   19c36:	eb5b 0b09 	adcs.w	fp, fp, r9
   19c3a:	f14c 0c00 	adc.w	ip, ip, #0
   19c3e:	f840 ab04 	str.w	sl, [r0], #4
   19c42:	fba4 9a07 	umull	r9, sl, r4, r7
   19c46:	eb1b 0b09 	adds.w	fp, fp, r9
   19c4a:	eb4c 0c0a 	adc.w	ip, ip, sl
   19c4e:	e8a0 1800 	stmia.w	r0!, {fp, ip}
    #endif
        : "+r" (r0), "+r" (r1), "+r" (r2)
        :
        : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   19c52:	bf00      	nop
   19c54:	b005      	add	sp, #20
   19c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019c5a <vli_square>:
}
#define asm_square 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_square(uint32_t *result, const uint32_t *left) {
   19c5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c5e:	b083      	sub	sp, #12
   19c60:	9001      	str	r0, [sp, #4]
   19c62:	9100      	str	r1, [sp, #0]
    register uint32_t *r0 __asm__("r0") = result;
   19c64:	9801      	ldr	r0, [sp, #4]
    register const uint32_t *r1 __asm__("r1") = left;
   19c66:	9900      	ldr	r1, [sp, #0]

    __asm__ volatile (
   19c68:	c90c      	ldmia	r1!, {r2, r3}
   19c6a:	f101 0110 	add.w	r1, r1, #16
   19c6e:	c960      	ldmia	r1!, {r5, r6}
   19c70:	f100 0018 	add.w	r0, r0, #24
   19c74:	fba2 8905 	umull	r8, r9, r2, r5
   19c78:	f840 8b04 	str.w	r8, [r0], #4
   19c7c:	fba2 ca06 	umull	ip, sl, r2, r6
   19c80:	eb19 090c 	adds.w	r9, r9, ip
   19c84:	f14a 0a00 	adc.w	sl, sl, #0
   19c88:	f840 9b04 	str.w	r9, [r0], #4
   19c8c:	fba3 8906 	umull	r8, r9, r3, r6
   19c90:	eb1a 0a08 	adds.w	sl, sl, r8
   19c94:	f149 0b00 	adc.w	fp, r9, #0
   19c98:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   19c9c:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
   19ca0:	f1a1 0120 	sub.w	r1, r1, #32
   19ca4:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
   19ca6:	fba2 bc02 	umull	fp, ip, r2, r2
   19caa:	f840 bb04 	str.w	fp, [r0], #4
   19cae:	f04f 0900 	mov.w	r9, #0
   19cb2:	fba2 ab03 	umull	sl, fp, r2, r3
   19cb6:	eb1c 0c0a 	adds.w	ip, ip, sl
   19cba:	f15b 0800 	adcs.w	r8, fp, #0
   19cbe:	f149 0900 	adc.w	r9, r9, #0
   19cc2:	eb1c 0c0a 	adds.w	ip, ip, sl
   19cc6:	eb58 080b 	adcs.w	r8, r8, fp
   19cca:	f149 0900 	adc.w	r9, r9, #0
   19cce:	f840 cb04 	str.w	ip, [r0], #4
   19cd2:	f04f 0a00 	mov.w	sl, #0
   19cd6:	fba2 bc04 	umull	fp, ip, r2, r4
   19cda:	eb1b 0b0b 	adds.w	fp, fp, fp
   19cde:	eb5c 0c0c 	adcs.w	ip, ip, ip
   19ce2:	f14a 0a00 	adc.w	sl, sl, #0
   19ce6:	eb18 080b 	adds.w	r8, r8, fp
   19cea:	eb59 090c 	adcs.w	r9, r9, ip
   19cee:	f14a 0a00 	adc.w	sl, sl, #0
   19cf2:	fba3 bc03 	umull	fp, ip, r3, r3
   19cf6:	eb18 080b 	adds.w	r8, r8, fp
   19cfa:	eb59 090c 	adcs.w	r9, r9, ip
   19cfe:	f14a 0a00 	adc.w	sl, sl, #0
   19d02:	f840 8b04 	str.w	r8, [r0], #4
   19d06:	f04f 0c00 	mov.w	ip, #0
   19d0a:	fba2 8b05 	umull	r8, fp, r2, r5
   19d0e:	46de      	mov	lr, fp
   19d10:	fbe3 8b04 	umlal	r8, fp, r3, r4
   19d14:	45de      	cmp	lr, fp
   19d16:	bf88      	it	hi
   19d18:	f14c 0c00 	adchi.w	ip, ip, #0
   19d1c:	eb18 0808 	adds.w	r8, r8, r8
   19d20:	eb5b 0b0b 	adcs.w	fp, fp, fp
   19d24:	eb4c 0c0c 	adc.w	ip, ip, ip
   19d28:	eb18 0809 	adds.w	r8, r8, r9
   19d2c:	eb5b 0b0a 	adcs.w	fp, fp, sl
   19d30:	f14c 0c00 	adc.w	ip, ip, #0
   19d34:	f840 8b04 	str.w	r8, [r0], #4
   19d38:	f04f 0a00 	mov.w	sl, #0
   19d3c:	fba2 8906 	umull	r8, r9, r2, r6
   19d40:	46ce      	mov	lr, r9
   19d42:	fbe3 8905 	umlal	r8, r9, r3, r5
   19d46:	45ce      	cmp	lr, r9
   19d48:	bf88      	it	hi
   19d4a:	f14a 0a00 	adchi.w	sl, sl, #0
   19d4e:	eb18 0808 	adds.w	r8, r8, r8
   19d52:	eb59 0909 	adcs.w	r9, r9, r9
   19d56:	eb4a 0a0a 	adc.w	sl, sl, sl
   19d5a:	46ce      	mov	lr, r9
   19d5c:	fbe4 8904 	umlal	r8, r9, r4, r4
   19d60:	45ce      	cmp	lr, r9
   19d62:	bf88      	it	hi
   19d64:	f14a 0a00 	adchi.w	sl, sl, #0
   19d68:	eb18 080b 	adds.w	r8, r8, fp
   19d6c:	eb59 090c 	adcs.w	r9, r9, ip
   19d70:	f14a 0a00 	adc.w	sl, sl, #0
   19d74:	f840 8b04 	str.w	r8, [r0], #4
   19d78:	f04f 0c00 	mov.w	ip, #0
   19d7c:	fba2 8b07 	umull	r8, fp, r2, r7
   19d80:	46de      	mov	lr, fp
   19d82:	fbe3 8b06 	umlal	r8, fp, r3, r6
   19d86:	45de      	cmp	lr, fp
   19d88:	bf88      	it	hi
   19d8a:	f14c 0c00 	adchi.w	ip, ip, #0
   19d8e:	46de      	mov	lr, fp
   19d90:	fbe4 8b05 	umlal	r8, fp, r4, r5
   19d94:	45de      	cmp	lr, fp
   19d96:	bf88      	it	hi
   19d98:	f14c 0c00 	adchi.w	ip, ip, #0
   19d9c:	eb18 0808 	adds.w	r8, r8, r8
   19da0:	eb5b 0b0b 	adcs.w	fp, fp, fp
   19da4:	eb4c 0c0c 	adc.w	ip, ip, ip
   19da8:	eb18 0809 	adds.w	r8, r8, r9
   19dac:	eb5b 0b0a 	adcs.w	fp, fp, sl
   19db0:	f14c 0c00 	adc.w	ip, ip, #0
   19db4:	f840 8b04 	str.w	r8, [r0], #4
   19db8:	c904      	ldmia	r1!, {r2}
   19dba:	f04f 0a00 	mov.w	sl, #0
   19dbe:	fba3 8907 	umull	r8, r9, r3, r7
   19dc2:	46ce      	mov	lr, r9
   19dc4:	fbe4 8906 	umlal	r8, r9, r4, r6
   19dc8:	45ce      	cmp	lr, r9
   19dca:	bf88      	it	hi
   19dcc:	f14a 0a00 	adchi.w	sl, sl, #0
   19dd0:	f8d0 e000 	ldr.w	lr, [r0]
   19dd4:	eb18 080e 	adds.w	r8, r8, lr
   19dd8:	f159 0900 	adcs.w	r9, r9, #0
   19ddc:	f14a 0a00 	adc.w	sl, sl, #0
   19de0:	eb18 0808 	adds.w	r8, r8, r8
   19de4:	eb59 0909 	adcs.w	r9, r9, r9
   19de8:	eb4a 0a0a 	adc.w	sl, sl, sl
   19dec:	46ce      	mov	lr, r9
   19dee:	fbe5 8905 	umlal	r8, r9, r5, r5
   19df2:	45ce      	cmp	lr, r9
   19df4:	bf88      	it	hi
   19df6:	f14a 0a00 	adchi.w	sl, sl, #0
   19dfa:	eb18 080b 	adds.w	r8, r8, fp
   19dfe:	eb59 090c 	adcs.w	r9, r9, ip
   19e02:	f14a 0a00 	adc.w	sl, sl, #0
   19e06:	f840 8b04 	str.w	r8, [r0], #4
   19e0a:	f04f 0c00 	mov.w	ip, #0
   19e0e:	fba3 8b02 	umull	r8, fp, r3, r2
   19e12:	46de      	mov	lr, fp
   19e14:	fbe4 8b07 	umlal	r8, fp, r4, r7
   19e18:	45de      	cmp	lr, fp
   19e1a:	bf88      	it	hi
   19e1c:	f14c 0c00 	adchi.w	ip, ip, #0
   19e20:	46de      	mov	lr, fp
   19e22:	fbe5 8b06 	umlal	r8, fp, r5, r6
   19e26:	45de      	cmp	lr, fp
   19e28:	bf88      	it	hi
   19e2a:	f14c 0c00 	adchi.w	ip, ip, #0
   19e2e:	f8d0 e000 	ldr.w	lr, [r0]
   19e32:	eb18 080e 	adds.w	r8, r8, lr
   19e36:	f15b 0b00 	adcs.w	fp, fp, #0
   19e3a:	f14c 0c00 	adc.w	ip, ip, #0
   19e3e:	eb18 0808 	adds.w	r8, r8, r8
   19e42:	eb5b 0b0b 	adcs.w	fp, fp, fp
   19e46:	eb4c 0c0c 	adc.w	ip, ip, ip
   19e4a:	eb18 0809 	adds.w	r8, r8, r9
   19e4e:	eb5b 0b0a 	adcs.w	fp, fp, sl
   19e52:	f14c 0c00 	adc.w	ip, ip, #0
   19e56:	f840 8b04 	str.w	r8, [r0], #4
   19e5a:	c908      	ldmia	r1!, {r3}
   19e5c:	f04f 0a00 	mov.w	sl, #0
   19e60:	fba4 8902 	umull	r8, r9, r4, r2
   19e64:	46ce      	mov	lr, r9
   19e66:	fbe5 8907 	umlal	r8, r9, r5, r7
   19e6a:	45ce      	cmp	lr, r9
   19e6c:	bf88      	it	hi
   19e6e:	f14a 0a00 	adchi.w	sl, sl, #0
   19e72:	f8d0 e000 	ldr.w	lr, [r0]
   19e76:	eb18 080e 	adds.w	r8, r8, lr
   19e7a:	f159 0900 	adcs.w	r9, r9, #0
   19e7e:	f14a 0a00 	adc.w	sl, sl, #0
   19e82:	eb18 0808 	adds.w	r8, r8, r8
   19e86:	eb59 0909 	adcs.w	r9, r9, r9
   19e8a:	eb4a 0a0a 	adc.w	sl, sl, sl
   19e8e:	46ce      	mov	lr, r9
   19e90:	fbe6 8906 	umlal	r8, r9, r6, r6
   19e94:	45ce      	cmp	lr, r9
   19e96:	bf88      	it	hi
   19e98:	f14a 0a00 	adchi.w	sl, sl, #0
   19e9c:	eb18 080b 	adds.w	r8, r8, fp
   19ea0:	eb59 090c 	adcs.w	r9, r9, ip
   19ea4:	f14a 0a00 	adc.w	sl, sl, #0
   19ea8:	f840 8b04 	str.w	r8, [r0], #4
   19eac:	f04f 0c00 	mov.w	ip, #0
   19eb0:	fba4 8b03 	umull	r8, fp, r4, r3
   19eb4:	46de      	mov	lr, fp
   19eb6:	fbe5 8b02 	umlal	r8, fp, r5, r2
   19eba:	45de      	cmp	lr, fp
   19ebc:	bf88      	it	hi
   19ebe:	f14c 0c00 	adchi.w	ip, ip, #0
   19ec2:	46de      	mov	lr, fp
   19ec4:	fbe6 8b07 	umlal	r8, fp, r6, r7
   19ec8:	45de      	cmp	lr, fp
   19eca:	bf88      	it	hi
   19ecc:	f14c 0c00 	adchi.w	ip, ip, #0
   19ed0:	f8d0 e000 	ldr.w	lr, [r0]
   19ed4:	eb18 080e 	adds.w	r8, r8, lr
   19ed8:	f15b 0b00 	adcs.w	fp, fp, #0
   19edc:	f14c 0c00 	adc.w	ip, ip, #0
   19ee0:	eb18 0808 	adds.w	r8, r8, r8
   19ee4:	eb5b 0b0b 	adcs.w	fp, fp, fp
   19ee8:	eb4c 0c0c 	adc.w	ip, ip, ip
   19eec:	eb18 0809 	adds.w	r8, r8, r9
   19ef0:	eb5b 0b0a 	adcs.w	fp, fp, sl
   19ef4:	f14c 0c00 	adc.w	ip, ip, #0
   19ef8:	f840 8b04 	str.w	r8, [r0], #4
   19efc:	f04f 0a00 	mov.w	sl, #0
   19f00:	fba5 8903 	umull	r8, r9, r5, r3
   19f04:	46ce      	mov	lr, r9
   19f06:	fbe6 8902 	umlal	r8, r9, r6, r2
   19f0a:	45ce      	cmp	lr, r9
   19f0c:	bf88      	it	hi
   19f0e:	f14a 0a00 	adchi.w	sl, sl, #0
   19f12:	eb18 0808 	adds.w	r8, r8, r8
   19f16:	eb59 0909 	adcs.w	r9, r9, r9
   19f1a:	eb4a 0a0a 	adc.w	sl, sl, sl
   19f1e:	46ce      	mov	lr, r9
   19f20:	fbe7 8907 	umlal	r8, r9, r7, r7
   19f24:	45ce      	cmp	lr, r9
   19f26:	bf88      	it	hi
   19f28:	f14a 0a00 	adchi.w	sl, sl, #0
   19f2c:	eb18 080b 	adds.w	r8, r8, fp
   19f30:	eb59 090c 	adcs.w	r9, r9, ip
   19f34:	f14a 0a00 	adc.w	sl, sl, #0
   19f38:	f840 8b04 	str.w	r8, [r0], #4
   19f3c:	f04f 0c00 	mov.w	ip, #0
   19f40:	fba6 8b03 	umull	r8, fp, r6, r3
   19f44:	46de      	mov	lr, fp
   19f46:	fbe7 8b02 	umlal	r8, fp, r7, r2
   19f4a:	45de      	cmp	lr, fp
   19f4c:	bf88      	it	hi
   19f4e:	f14c 0c00 	adchi.w	ip, ip, #0
   19f52:	eb18 0808 	adds.w	r8, r8, r8
   19f56:	eb5b 0b0b 	adcs.w	fp, fp, fp
   19f5a:	eb4c 0c0c 	adc.w	ip, ip, ip
   19f5e:	eb18 0809 	adds.w	r8, r8, r9
   19f62:	eb5b 0b0a 	adcs.w	fp, fp, sl
   19f66:	f14c 0c00 	adc.w	ip, ip, #0
   19f6a:	f840 8b04 	str.w	r8, [r0], #4
   19f6e:	f04f 0800 	mov.w	r8, #0
   19f72:	fba7 1a03 	umull	r1, sl, r7, r3
   19f76:	1849      	adds	r1, r1, r1
   19f78:	eb5a 0a0a 	adcs.w	sl, sl, sl
   19f7c:	f148 0800 	adc.w	r8, r8, #0
   19f80:	eb1b 0b01 	adds.w	fp, fp, r1
   19f84:	eb5c 0c0a 	adcs.w	ip, ip, sl
   19f88:	f148 0800 	adc.w	r8, r8, #0
   19f8c:	fba2 1a02 	umull	r1, sl, r2, r2
   19f90:	eb1b 0b01 	adds.w	fp, fp, r1
   19f94:	eb5c 0c0a 	adcs.w	ip, ip, sl
   19f98:	f148 0800 	adc.w	r8, r8, #0
   19f9c:	f840 bb04 	str.w	fp, [r0], #4
   19fa0:	f04f 0b00 	mov.w	fp, #0
   19fa4:	fba2 1a03 	umull	r1, sl, r2, r3
   19fa8:	1849      	adds	r1, r1, r1
   19faa:	eb5a 0a0a 	adcs.w	sl, sl, sl
   19fae:	f14b 0b00 	adc.w	fp, fp, #0
   19fb2:	eb1c 0c01 	adds.w	ip, ip, r1
   19fb6:	eb58 080a 	adcs.w	r8, r8, sl
   19fba:	f14b 0b00 	adc.w	fp, fp, #0
   19fbe:	f840 cb04 	str.w	ip, [r0], #4
   19fc2:	fba3 1a03 	umull	r1, sl, r3, r3
   19fc6:	eb18 0801 	adds.w	r8, r8, r1
   19fca:	eb5b 0b0a 	adcs.w	fp, fp, sl
   19fce:	e8a0 0900 	stmia.w	r0!, {r8, fp}
    #endif
        : "+r" (r0), "+r" (r1)
        :
        : "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   19fd2:	bf00      	nop
   19fd4:	b003      	add	sp, #12
   19fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019fda <vli_clear>:
        #include "asm_arm.inc"
    #endif
#endif

#if !defined(asm_clear) || !asm_clear
static void vli_clear(uECC_word_t *vli) {
   19fda:	b084      	sub	sp, #16
   19fdc:	9001      	str	r0, [sp, #4]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   19fde:	2300      	movs	r3, #0
   19fe0:	9303      	str	r3, [sp, #12]
   19fe2:	e008      	b.n	19ff6 <vli_clear+0x1c>
        vli[i] = 0;
   19fe4:	9b03      	ldr	r3, [sp, #12]
   19fe6:	009b      	lsls	r3, r3, #2
   19fe8:	9a01      	ldr	r2, [sp, #4]
   19fea:	4413      	add	r3, r2
   19fec:	2200      	movs	r2, #0
   19fee:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   19ff0:	9b03      	ldr	r3, [sp, #12]
   19ff2:	3301      	adds	r3, #1
   19ff4:	9303      	str	r3, [sp, #12]
   19ff6:	9b03      	ldr	r3, [sp, #12]
   19ff8:	2b07      	cmp	r3, #7
   19ffa:	d9f3      	bls.n	19fe4 <vli_clear+0xa>
    }
}
   19ffc:	bf00      	nop
   19ffe:	b004      	add	sp, #16
   1a000:	4770      	bx	lr

0001a002 <vli_isZero>:
#endif

/* Returns 1 if vli == 0, 0 otherwise. */
#if !defined(asm_isZero) || !asm_isZero
static uECC_word_t vli_isZero(const uECC_word_t *vli) {
   1a002:	b084      	sub	sp, #16
   1a004:	9001      	str	r0, [sp, #4]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1a006:	2300      	movs	r3, #0
   1a008:	9303      	str	r3, [sp, #12]
   1a00a:	e00b      	b.n	1a024 <vli_isZero+0x22>
        if (vli[i]) {
   1a00c:	9b03      	ldr	r3, [sp, #12]
   1a00e:	009b      	lsls	r3, r3, #2
   1a010:	9a01      	ldr	r2, [sp, #4]
   1a012:	4413      	add	r3, r2
   1a014:	681b      	ldr	r3, [r3, #0]
   1a016:	2b00      	cmp	r3, #0
   1a018:	d001      	beq.n	1a01e <vli_isZero+0x1c>
            return 0;
   1a01a:	2300      	movs	r3, #0
   1a01c:	e006      	b.n	1a02c <vli_isZero+0x2a>
    for (i = 0; i < uECC_WORDS; ++i) {
   1a01e:	9b03      	ldr	r3, [sp, #12]
   1a020:	3301      	adds	r3, #1
   1a022:	9303      	str	r3, [sp, #12]
   1a024:	9b03      	ldr	r3, [sp, #12]
   1a026:	2b07      	cmp	r3, #7
   1a028:	d9f0      	bls.n	1a00c <vli_isZero+0xa>
        }
    }
    return 1;
   1a02a:	2301      	movs	r3, #1
}
   1a02c:	4618      	mov	r0, r3
   1a02e:	b004      	add	sp, #16
   1a030:	4770      	bx	lr

0001a032 <vli_testBit>:
#endif

/* Returns nonzero if bit 'bit' of vli is set. */
#if !defined(asm_testBit) || !asm_testBit
static uECC_word_t vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
   1a032:	b082      	sub	sp, #8
   1a034:	9001      	str	r0, [sp, #4]
   1a036:	9100      	str	r1, [sp, #0]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1a038:	9b00      	ldr	r3, [sp, #0]
   1a03a:	115b      	asrs	r3, r3, #5
   1a03c:	009b      	lsls	r3, r3, #2
   1a03e:	9a01      	ldr	r2, [sp, #4]
   1a040:	4413      	add	r3, r2
   1a042:	681a      	ldr	r2, [r3, #0]
   1a044:	9b00      	ldr	r3, [sp, #0]
   1a046:	f003 031f 	and.w	r3, r3, #31
   1a04a:	2101      	movs	r1, #1
   1a04c:	fa01 f303 	lsl.w	r3, r1, r3
   1a050:	4013      	ands	r3, r2
}
   1a052:	4618      	mov	r0, r3
   1a054:	b002      	add	sp, #8
   1a056:	4770      	bx	lr

0001a058 <vli_set>:
}
#endif /* !asm_numBits */

/* Sets dest = src. */
#if !defined(asm_set) || !asm_set
static void vli_set(uECC_word_t *dest, const uECC_word_t *src) {
   1a058:	b084      	sub	sp, #16
   1a05a:	9001      	str	r0, [sp, #4]
   1a05c:	9100      	str	r1, [sp, #0]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1a05e:	2300      	movs	r3, #0
   1a060:	9303      	str	r3, [sp, #12]
   1a062:	e00c      	b.n	1a07e <vli_set+0x26>
        dest[i] = src[i];
   1a064:	9b03      	ldr	r3, [sp, #12]
   1a066:	009b      	lsls	r3, r3, #2
   1a068:	9a01      	ldr	r2, [sp, #4]
   1a06a:	4413      	add	r3, r2
   1a06c:	9a03      	ldr	r2, [sp, #12]
   1a06e:	0092      	lsls	r2, r2, #2
   1a070:	9900      	ldr	r1, [sp, #0]
   1a072:	440a      	add	r2, r1
   1a074:	6812      	ldr	r2, [r2, #0]
   1a076:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   1a078:	9b03      	ldr	r3, [sp, #12]
   1a07a:	3301      	adds	r3, #1
   1a07c:	9303      	str	r3, [sp, #12]
   1a07e:	9b03      	ldr	r3, [sp, #12]
   1a080:	2b07      	cmp	r3, #7
   1a082:	d9ef      	bls.n	1a064 <vli_set+0xc>
    }
}
   1a084:	bf00      	nop
   1a086:	b004      	add	sp, #16
   1a088:	4770      	bx	lr

0001a08a <vli_cmp>:
#endif

/* Returns sign of left - right. */
#if !defined(asm_cmp) || !asm_cmp
static cmpresult_t vli_cmp(const uECC_word_t *left, const uECC_word_t *right) {
   1a08a:	b084      	sub	sp, #16
   1a08c:	9001      	str	r0, [sp, #4]
   1a08e:	9100      	str	r1, [sp, #0]
    swordcount_t i;
    for (i = uECC_WORDS - 1; i >= 0; --i) {
   1a090:	2307      	movs	r3, #7
   1a092:	9303      	str	r3, [sp, #12]
   1a094:	e01f      	b.n	1a0d6 <vli_cmp+0x4c>
        if (left[i] > right[i]) {
   1a096:	9b03      	ldr	r3, [sp, #12]
   1a098:	009b      	lsls	r3, r3, #2
   1a09a:	9a01      	ldr	r2, [sp, #4]
   1a09c:	4413      	add	r3, r2
   1a09e:	681a      	ldr	r2, [r3, #0]
   1a0a0:	9b03      	ldr	r3, [sp, #12]
   1a0a2:	009b      	lsls	r3, r3, #2
   1a0a4:	9900      	ldr	r1, [sp, #0]
   1a0a6:	440b      	add	r3, r1
   1a0a8:	681b      	ldr	r3, [r3, #0]
   1a0aa:	429a      	cmp	r2, r3
   1a0ac:	d901      	bls.n	1a0b2 <vli_cmp+0x28>
            return 1;
   1a0ae:	2301      	movs	r3, #1
   1a0b0:	e015      	b.n	1a0de <vli_cmp+0x54>
        } else if (left[i] < right[i]) {
   1a0b2:	9b03      	ldr	r3, [sp, #12]
   1a0b4:	009b      	lsls	r3, r3, #2
   1a0b6:	9a01      	ldr	r2, [sp, #4]
   1a0b8:	4413      	add	r3, r2
   1a0ba:	681a      	ldr	r2, [r3, #0]
   1a0bc:	9b03      	ldr	r3, [sp, #12]
   1a0be:	009b      	lsls	r3, r3, #2
   1a0c0:	9900      	ldr	r1, [sp, #0]
   1a0c2:	440b      	add	r3, r1
   1a0c4:	681b      	ldr	r3, [r3, #0]
   1a0c6:	429a      	cmp	r2, r3
   1a0c8:	d202      	bcs.n	1a0d0 <vli_cmp+0x46>
            return -1;
   1a0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a0ce:	e006      	b.n	1a0de <vli_cmp+0x54>
    for (i = uECC_WORDS - 1; i >= 0; --i) {
   1a0d0:	9b03      	ldr	r3, [sp, #12]
   1a0d2:	3b01      	subs	r3, #1
   1a0d4:	9303      	str	r3, [sp, #12]
   1a0d6:	9b03      	ldr	r3, [sp, #12]
   1a0d8:	2b00      	cmp	r3, #0
   1a0da:	dadc      	bge.n	1a096 <vli_cmp+0xc>
        }
    }
    return 0;
   1a0dc:	2300      	movs	r3, #0
}
   1a0de:	4618      	mov	r0, r3
   1a0e0:	b004      	add	sp, #16
   1a0e2:	4770      	bx	lr

0001a0e4 <vli_rshift1>:
    return (result == 0);
}

/* Computes vli = vli >> 1. */
#if !defined(asm_rshift1) || !asm_rshift1
static void vli_rshift1(uECC_word_t *vli) {
   1a0e4:	b086      	sub	sp, #24
   1a0e6:	9001      	str	r0, [sp, #4]
    uECC_word_t *end = vli;
   1a0e8:	9b01      	ldr	r3, [sp, #4]
   1a0ea:	9304      	str	r3, [sp, #16]
    uECC_word_t carry = 0;
   1a0ec:	2300      	movs	r3, #0
   1a0ee:	9305      	str	r3, [sp, #20]

    vli += uECC_WORDS;
   1a0f0:	9b01      	ldr	r3, [sp, #4]
   1a0f2:	3320      	adds	r3, #32
   1a0f4:	9301      	str	r3, [sp, #4]
    while (vli-- > end) {
   1a0f6:	e00b      	b.n	1a110 <vli_rshift1+0x2c>
        uECC_word_t temp = *vli;
   1a0f8:	9b01      	ldr	r3, [sp, #4]
   1a0fa:	681b      	ldr	r3, [r3, #0]
   1a0fc:	9303      	str	r3, [sp, #12]
        *vli = (temp >> 1) | carry;
   1a0fe:	9b03      	ldr	r3, [sp, #12]
   1a100:	085a      	lsrs	r2, r3, #1
   1a102:	9b05      	ldr	r3, [sp, #20]
   1a104:	431a      	orrs	r2, r3
   1a106:	9b01      	ldr	r3, [sp, #4]
   1a108:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - 1);
   1a10a:	9b03      	ldr	r3, [sp, #12]
   1a10c:	07db      	lsls	r3, r3, #31
   1a10e:	9305      	str	r3, [sp, #20]
    while (vli-- > end) {
   1a110:	9b01      	ldr	r3, [sp, #4]
   1a112:	1f1a      	subs	r2, r3, #4
   1a114:	9201      	str	r2, [sp, #4]
   1a116:	9a04      	ldr	r2, [sp, #16]
   1a118:	4293      	cmp	r3, r2
   1a11a:	d8ed      	bhi.n	1a0f8 <vli_rshift1+0x14>
    }
}
   1a11c:	bf00      	nop
   1a11e:	b006      	add	sp, #24
   1a120:	4770      	bx	lr

0001a122 <vli_modAdd>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
#if !defined(asm_modAdd) || !asm_modAdd
static void vli_modAdd(uECC_word_t *result,
                       const uECC_word_t *left,
                       const uECC_word_t *right,
                       const uECC_word_t *mod) {
   1a122:	b500      	push	{lr}
   1a124:	b087      	sub	sp, #28
   1a126:	9003      	str	r0, [sp, #12]
   1a128:	9102      	str	r1, [sp, #8]
   1a12a:	9201      	str	r2, [sp, #4]
   1a12c:	9300      	str	r3, [sp, #0]
    uECC_word_t carry = vli_add(result, left, right);
   1a12e:	9a01      	ldr	r2, [sp, #4]
   1a130:	9902      	ldr	r1, [sp, #8]
   1a132:	9803      	ldr	r0, [sp, #12]
   1a134:	f7ff fa3a 	bl	195ac <vli_add>
   1a138:	9005      	str	r0, [sp, #20]
    if (carry || vli_cmp(result, mod) >= 0) {
   1a13a:	9b05      	ldr	r3, [sp, #20]
   1a13c:	2b00      	cmp	r3, #0
   1a13e:	d106      	bne.n	1a14e <vli_modAdd+0x2c>
   1a140:	9900      	ldr	r1, [sp, #0]
   1a142:	9803      	ldr	r0, [sp, #12]
   1a144:	f7ff ffa1 	bl	1a08a <vli_cmp>
   1a148:	4603      	mov	r3, r0
   1a14a:	2b00      	cmp	r3, #0
   1a14c:	db04      	blt.n	1a158 <vli_modAdd+0x36>
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        vli_sub(result, result, mod);
   1a14e:	9a00      	ldr	r2, [sp, #0]
   1a150:	9903      	ldr	r1, [sp, #12]
   1a152:	9803      	ldr	r0, [sp, #12]
   1a154:	f7ff fa61 	bl	1961a <vli_sub>
    }
}
   1a158:	bf00      	nop
   1a15a:	b007      	add	sp, #28
   1a15c:	f85d fb04 	ldr.w	pc, [sp], #4

0001a160 <vli_modSub>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
#if !defined(asm_modSub) || !asm_modSub
static void vli_modSub(uECC_word_t *result,
                       const uECC_word_t *left,
                       const uECC_word_t *right,
                       const uECC_word_t *mod) {
   1a160:	b500      	push	{lr}
   1a162:	b087      	sub	sp, #28
   1a164:	9003      	str	r0, [sp, #12]
   1a166:	9102      	str	r1, [sp, #8]
   1a168:	9201      	str	r2, [sp, #4]
   1a16a:	9300      	str	r3, [sp, #0]
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1a16c:	9a01      	ldr	r2, [sp, #4]
   1a16e:	9902      	ldr	r1, [sp, #8]
   1a170:	9803      	ldr	r0, [sp, #12]
   1a172:	f7ff fa52 	bl	1961a <vli_sub>
   1a176:	9005      	str	r0, [sp, #20]
    if (l_borrow) {
   1a178:	9b05      	ldr	r3, [sp, #20]
   1a17a:	2b00      	cmp	r3, #0
   1a17c:	d004      	beq.n	1a188 <vli_modSub+0x28>
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        vli_add(result, result, mod);
   1a17e:	9a00      	ldr	r2, [sp, #0]
   1a180:	9903      	ldr	r1, [sp, #12]
   1a182:	9803      	ldr	r0, [sp, #12]
   1a184:	f7ff fa12 	bl	195ac <vli_add>
    }
}
   1a188:	bf00      	nop
   1a18a:	b007      	add	sp, #28
   1a18c:	f85d fb04 	ldr.w	pc, [sp], #4

0001a190 <vli_mmod_fast>:
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   1a190:	b500      	push	{lr}
   1a192:	b08d      	sub	sp, #52	; 0x34
   1a194:	9001      	str	r0, [sp, #4]
   1a196:	9100      	str	r1, [sp, #0]
    uint32_t tmp[uECC_WORDS];
    int carry;

    /* t */
    vli_set(result, product);
   1a198:	9900      	ldr	r1, [sp, #0]
   1a19a:	9801      	ldr	r0, [sp, #4]
   1a19c:	f7ff ff5c 	bl	1a058 <vli_set>

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
   1a1a0:	2300      	movs	r3, #0
   1a1a2:	9305      	str	r3, [sp, #20]
   1a1a4:	9b05      	ldr	r3, [sp, #20]
   1a1a6:	9304      	str	r3, [sp, #16]
   1a1a8:	9b04      	ldr	r3, [sp, #16]
   1a1aa:	9303      	str	r3, [sp, #12]
    tmp[3] = product[11];
   1a1ac:	9b00      	ldr	r3, [sp, #0]
   1a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a1b0:	9306      	str	r3, [sp, #24]
    tmp[4] = product[12];
   1a1b2:	9b00      	ldr	r3, [sp, #0]
   1a1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a1b6:	9307      	str	r3, [sp, #28]
    tmp[5] = product[13];
   1a1b8:	9b00      	ldr	r3, [sp, #0]
   1a1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a1bc:	9308      	str	r3, [sp, #32]
    tmp[6] = product[14];
   1a1be:	9b00      	ldr	r3, [sp, #0]
   1a1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a1c2:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[15];
   1a1c4:	9b00      	ldr	r3, [sp, #0]
   1a1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a1c8:	930a      	str	r3, [sp, #40]	; 0x28
    carry = vli_add(tmp, tmp, tmp);
   1a1ca:	aa03      	add	r2, sp, #12
   1a1cc:	a903      	add	r1, sp, #12
   1a1ce:	ab03      	add	r3, sp, #12
   1a1d0:	4618      	mov	r0, r3
   1a1d2:	f7ff f9eb 	bl	195ac <vli_add>
   1a1d6:	4603      	mov	r3, r0
   1a1d8:	930b      	str	r3, [sp, #44]	; 0x2c
    carry += vli_add(result, result, tmp);
   1a1da:	ab03      	add	r3, sp, #12
   1a1dc:	461a      	mov	r2, r3
   1a1de:	9901      	ldr	r1, [sp, #4]
   1a1e0:	9801      	ldr	r0, [sp, #4]
   1a1e2:	f7ff f9e3 	bl	195ac <vli_add>
   1a1e6:	4602      	mov	r2, r0
   1a1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a1ea:	4413      	add	r3, r2
   1a1ec:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s2 */
    tmp[3] = product[12];
   1a1ee:	9b00      	ldr	r3, [sp, #0]
   1a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a1f2:	9306      	str	r3, [sp, #24]
    tmp[4] = product[13];
   1a1f4:	9b00      	ldr	r3, [sp, #0]
   1a1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a1f8:	9307      	str	r3, [sp, #28]
    tmp[5] = product[14];
   1a1fa:	9b00      	ldr	r3, [sp, #0]
   1a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a1fe:	9308      	str	r3, [sp, #32]
    tmp[6] = product[15];
   1a200:	9b00      	ldr	r3, [sp, #0]
   1a202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a204:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = 0;
   1a206:	2300      	movs	r3, #0
   1a208:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(tmp, tmp, tmp);
   1a20a:	aa03      	add	r2, sp, #12
   1a20c:	a903      	add	r1, sp, #12
   1a20e:	ab03      	add	r3, sp, #12
   1a210:	4618      	mov	r0, r3
   1a212:	f7ff f9cb 	bl	195ac <vli_add>
   1a216:	4602      	mov	r2, r0
   1a218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a21a:	4413      	add	r3, r2
   1a21c:	930b      	str	r3, [sp, #44]	; 0x2c
    carry += vli_add(result, result, tmp);
   1a21e:	ab03      	add	r3, sp, #12
   1a220:	461a      	mov	r2, r3
   1a222:	9901      	ldr	r1, [sp, #4]
   1a224:	9801      	ldr	r0, [sp, #4]
   1a226:	f7ff f9c1 	bl	195ac <vli_add>
   1a22a:	4602      	mov	r2, r0
   1a22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a22e:	4413      	add	r3, r2
   1a230:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s3 */
    tmp[0] = product[8];
   1a232:	9b00      	ldr	r3, [sp, #0]
   1a234:	6a1b      	ldr	r3, [r3, #32]
   1a236:	9303      	str	r3, [sp, #12]
    tmp[1] = product[9];
   1a238:	9b00      	ldr	r3, [sp, #0]
   1a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a23c:	9304      	str	r3, [sp, #16]
    tmp[2] = product[10];
   1a23e:	9b00      	ldr	r3, [sp, #0]
   1a240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a242:	9305      	str	r3, [sp, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
   1a244:	2300      	movs	r3, #0
   1a246:	9308      	str	r3, [sp, #32]
   1a248:	9b08      	ldr	r3, [sp, #32]
   1a24a:	9307      	str	r3, [sp, #28]
   1a24c:	9b07      	ldr	r3, [sp, #28]
   1a24e:	9306      	str	r3, [sp, #24]
    tmp[6] = product[14];
   1a250:	9b00      	ldr	r3, [sp, #0]
   1a252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a254:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[15];
   1a256:	9b00      	ldr	r3, [sp, #0]
   1a258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a25a:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(result, result, tmp);
   1a25c:	ab03      	add	r3, sp, #12
   1a25e:	461a      	mov	r2, r3
   1a260:	9901      	ldr	r1, [sp, #4]
   1a262:	9801      	ldr	r0, [sp, #4]
   1a264:	f7ff f9a2 	bl	195ac <vli_add>
   1a268:	4602      	mov	r2, r0
   1a26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a26c:	4413      	add	r3, r2
   1a26e:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s4 */
    tmp[0] = product[9];
   1a270:	9b00      	ldr	r3, [sp, #0]
   1a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a274:	9303      	str	r3, [sp, #12]
    tmp[1] = product[10];
   1a276:	9b00      	ldr	r3, [sp, #0]
   1a278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a27a:	9304      	str	r3, [sp, #16]
    tmp[2] = product[11];
   1a27c:	9b00      	ldr	r3, [sp, #0]
   1a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a280:	9305      	str	r3, [sp, #20]
    tmp[3] = product[13];
   1a282:	9b00      	ldr	r3, [sp, #0]
   1a284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a286:	9306      	str	r3, [sp, #24]
    tmp[4] = product[14];
   1a288:	9b00      	ldr	r3, [sp, #0]
   1a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a28c:	9307      	str	r3, [sp, #28]
    tmp[5] = product[15];
   1a28e:	9b00      	ldr	r3, [sp, #0]
   1a290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a292:	9308      	str	r3, [sp, #32]
    tmp[6] = product[13];
   1a294:	9b00      	ldr	r3, [sp, #0]
   1a296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a298:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[8];
   1a29a:	9b00      	ldr	r3, [sp, #0]
   1a29c:	6a1b      	ldr	r3, [r3, #32]
   1a29e:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(result, result, tmp);
   1a2a0:	ab03      	add	r3, sp, #12
   1a2a2:	461a      	mov	r2, r3
   1a2a4:	9901      	ldr	r1, [sp, #4]
   1a2a6:	9801      	ldr	r0, [sp, #4]
   1a2a8:	f7ff f980 	bl	195ac <vli_add>
   1a2ac:	4602      	mov	r2, r0
   1a2ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a2b0:	4413      	add	r3, r2
   1a2b2:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d1 */
    tmp[0] = product[11];
   1a2b4:	9b00      	ldr	r3, [sp, #0]
   1a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a2b8:	9303      	str	r3, [sp, #12]
    tmp[1] = product[12];
   1a2ba:	9b00      	ldr	r3, [sp, #0]
   1a2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a2be:	9304      	str	r3, [sp, #16]
    tmp[2] = product[13];
   1a2c0:	9b00      	ldr	r3, [sp, #0]
   1a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a2c4:	9305      	str	r3, [sp, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
   1a2c6:	2300      	movs	r3, #0
   1a2c8:	9308      	str	r3, [sp, #32]
   1a2ca:	9b08      	ldr	r3, [sp, #32]
   1a2cc:	9307      	str	r3, [sp, #28]
   1a2ce:	9b07      	ldr	r3, [sp, #28]
   1a2d0:	9306      	str	r3, [sp, #24]
    tmp[6] = product[8];
   1a2d2:	9b00      	ldr	r3, [sp, #0]
   1a2d4:	6a1b      	ldr	r3, [r3, #32]
   1a2d6:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[10];
   1a2d8:	9b00      	ldr	r3, [sp, #0]
   1a2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a2dc:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   1a2de:	ab03      	add	r3, sp, #12
   1a2e0:	461a      	mov	r2, r3
   1a2e2:	9901      	ldr	r1, [sp, #4]
   1a2e4:	9801      	ldr	r0, [sp, #4]
   1a2e6:	f7ff f998 	bl	1961a <vli_sub>
   1a2ea:	4602      	mov	r2, r0
   1a2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a2ee:	1a9b      	subs	r3, r3, r2
   1a2f0:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d2 */
    tmp[0] = product[12];
   1a2f2:	9b00      	ldr	r3, [sp, #0]
   1a2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a2f6:	9303      	str	r3, [sp, #12]
    tmp[1] = product[13];
   1a2f8:	9b00      	ldr	r3, [sp, #0]
   1a2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a2fc:	9304      	str	r3, [sp, #16]
    tmp[2] = product[14];
   1a2fe:	9b00      	ldr	r3, [sp, #0]
   1a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a302:	9305      	str	r3, [sp, #20]
    tmp[3] = product[15];
   1a304:	9b00      	ldr	r3, [sp, #0]
   1a306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a308:	9306      	str	r3, [sp, #24]
    tmp[4] = tmp[5] = 0;
   1a30a:	2300      	movs	r3, #0
   1a30c:	9308      	str	r3, [sp, #32]
   1a30e:	9b08      	ldr	r3, [sp, #32]
   1a310:	9307      	str	r3, [sp, #28]
    tmp[6] = product[9];
   1a312:	9b00      	ldr	r3, [sp, #0]
   1a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a316:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[11];
   1a318:	9b00      	ldr	r3, [sp, #0]
   1a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a31c:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   1a31e:	ab03      	add	r3, sp, #12
   1a320:	461a      	mov	r2, r3
   1a322:	9901      	ldr	r1, [sp, #4]
   1a324:	9801      	ldr	r0, [sp, #4]
   1a326:	f7ff f978 	bl	1961a <vli_sub>
   1a32a:	4602      	mov	r2, r0
   1a32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a32e:	1a9b      	subs	r3, r3, r2
   1a330:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d3 */
    tmp[0] = product[13];
   1a332:	9b00      	ldr	r3, [sp, #0]
   1a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a336:	9303      	str	r3, [sp, #12]
    tmp[1] = product[14];
   1a338:	9b00      	ldr	r3, [sp, #0]
   1a33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a33c:	9304      	str	r3, [sp, #16]
    tmp[2] = product[15];
   1a33e:	9b00      	ldr	r3, [sp, #0]
   1a340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a342:	9305      	str	r3, [sp, #20]
    tmp[3] = product[8];
   1a344:	9b00      	ldr	r3, [sp, #0]
   1a346:	6a1b      	ldr	r3, [r3, #32]
   1a348:	9306      	str	r3, [sp, #24]
    tmp[4] = product[9];
   1a34a:	9b00      	ldr	r3, [sp, #0]
   1a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a34e:	9307      	str	r3, [sp, #28]
    tmp[5] = product[10];
   1a350:	9b00      	ldr	r3, [sp, #0]
   1a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a354:	9308      	str	r3, [sp, #32]
    tmp[6] = 0;
   1a356:	2300      	movs	r3, #0
   1a358:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[12];
   1a35a:	9b00      	ldr	r3, [sp, #0]
   1a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a35e:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   1a360:	ab03      	add	r3, sp, #12
   1a362:	461a      	mov	r2, r3
   1a364:	9901      	ldr	r1, [sp, #4]
   1a366:	9801      	ldr	r0, [sp, #4]
   1a368:	f7ff f957 	bl	1961a <vli_sub>
   1a36c:	4602      	mov	r2, r0
   1a36e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a370:	1a9b      	subs	r3, r3, r2
   1a372:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d4 */
    tmp[0] = product[14];
   1a374:	9b00      	ldr	r3, [sp, #0]
   1a376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a378:	9303      	str	r3, [sp, #12]
    tmp[1] = product[15];
   1a37a:	9b00      	ldr	r3, [sp, #0]
   1a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a37e:	9304      	str	r3, [sp, #16]
    tmp[2] = 0;
   1a380:	2300      	movs	r3, #0
   1a382:	9305      	str	r3, [sp, #20]
    tmp[3] = product[9];
   1a384:	9b00      	ldr	r3, [sp, #0]
   1a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a388:	9306      	str	r3, [sp, #24]
    tmp[4] = product[10];
   1a38a:	9b00      	ldr	r3, [sp, #0]
   1a38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a38e:	9307      	str	r3, [sp, #28]
    tmp[5] = product[11];
   1a390:	9b00      	ldr	r3, [sp, #0]
   1a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a394:	9308      	str	r3, [sp, #32]
    tmp[6] = 0;
   1a396:	2300      	movs	r3, #0
   1a398:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[13];
   1a39a:	9b00      	ldr	r3, [sp, #0]
   1a39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a39e:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   1a3a0:	ab03      	add	r3, sp, #12
   1a3a2:	461a      	mov	r2, r3
   1a3a4:	9901      	ldr	r1, [sp, #4]
   1a3a6:	9801      	ldr	r0, [sp, #4]
   1a3a8:	f7ff f937 	bl	1961a <vli_sub>
   1a3ac:	4602      	mov	r2, r0
   1a3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a3b0:	1a9b      	subs	r3, r3, r2
   1a3b2:	930b      	str	r3, [sp, #44]	; 0x2c

    if (carry < 0) {
   1a3b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a3b6:	2b00      	cmp	r3, #0
   1a3b8:	da15      	bge.n	1a3e6 <vli_mmod_fast+0x256>
        do {
            carry += vli_add(result, result, curve_p);
   1a3ba:	4a12      	ldr	r2, [pc, #72]	; (1a404 <vli_mmod_fast+0x274>)
   1a3bc:	9901      	ldr	r1, [sp, #4]
   1a3be:	9801      	ldr	r0, [sp, #4]
   1a3c0:	f7ff f8f4 	bl	195ac <vli_add>
   1a3c4:	4602      	mov	r2, r0
   1a3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a3c8:	4413      	add	r3, r2
   1a3ca:	930b      	str	r3, [sp, #44]	; 0x2c
        } while (carry < 0);
   1a3cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a3ce:	2b00      	cmp	r3, #0
   1a3d0:	dbf3      	blt.n	1a3ba <vli_mmod_fast+0x22a>
    } else {
        while (carry || vli_cmp(curve_p, result) != 1) {
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
   1a3d2:	e012      	b.n	1a3fa <vli_mmod_fast+0x26a>
            carry -= vli_sub(result, result, curve_p);
   1a3d4:	4a0b      	ldr	r2, [pc, #44]	; (1a404 <vli_mmod_fast+0x274>)
   1a3d6:	9901      	ldr	r1, [sp, #4]
   1a3d8:	9801      	ldr	r0, [sp, #4]
   1a3da:	f7ff f91e 	bl	1961a <vli_sub>
   1a3de:	4602      	mov	r2, r0
   1a3e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a3e2:	1a9b      	subs	r3, r3, r2
   1a3e4:	930b      	str	r3, [sp, #44]	; 0x2c
        while (carry || vli_cmp(curve_p, result) != 1) {
   1a3e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a3e8:	2b00      	cmp	r3, #0
   1a3ea:	d1f3      	bne.n	1a3d4 <vli_mmod_fast+0x244>
   1a3ec:	9901      	ldr	r1, [sp, #4]
   1a3ee:	4805      	ldr	r0, [pc, #20]	; (1a404 <vli_mmod_fast+0x274>)
   1a3f0:	f7ff fe4b 	bl	1a08a <vli_cmp>
   1a3f4:	4603      	mov	r3, r0
   1a3f6:	2b01      	cmp	r3, #1
   1a3f8:	d1ec      	bne.n	1a3d4 <vli_mmod_fast+0x244>
}
   1a3fa:	bf00      	nop
   1a3fc:	b00d      	add	sp, #52	; 0x34
   1a3fe:	f85d fb04 	ldr.w	pc, [sp], #4
   1a402:	bf00      	nop
   1a404:	000299d8 	.word	0x000299d8

0001a408 <vli_modMult_fast>:
#endif /* !asm_mmod_fast */

/* Computes result = (left * right) % curve_p. */
static void vli_modMult_fast(uECC_word_t *result,
                             const uECC_word_t *left,
                             const uECC_word_t *right) {
   1a408:	b500      	push	{lr}
   1a40a:	b095      	sub	sp, #84	; 0x54
   1a40c:	9003      	str	r0, [sp, #12]
   1a40e:	9102      	str	r1, [sp, #8]
   1a410:	9201      	str	r2, [sp, #4]
    uECC_word_t product[2 * uECC_WORDS];
    vli_mult(product, left, right);
   1a412:	ab04      	add	r3, sp, #16
   1a414:	9a01      	ldr	r2, [sp, #4]
   1a416:	9902      	ldr	r1, [sp, #8]
   1a418:	4618      	mov	r0, r3
   1a41a:	f7ff f93a 	bl	19692 <vli_mult>
    vli_mmod_fast(result, product);
   1a41e:	ab04      	add	r3, sp, #16
   1a420:	4619      	mov	r1, r3
   1a422:	9803      	ldr	r0, [sp, #12]
   1a424:	f7ff feb4 	bl	1a190 <vli_mmod_fast>
}
   1a428:	bf00      	nop
   1a42a:	b015      	add	sp, #84	; 0x54
   1a42c:	f85d fb04 	ldr.w	pc, [sp], #4

0001a430 <vli_modSquare_fast>:

#if uECC_SQUARE_FUNC

/* Computes result = left^2 % curve_p. */
static void vli_modSquare_fast(uECC_word_t *result, const uECC_word_t *left) {
   1a430:	b500      	push	{lr}
   1a432:	b093      	sub	sp, #76	; 0x4c
   1a434:	9001      	str	r0, [sp, #4]
   1a436:	9100      	str	r1, [sp, #0]
    uECC_word_t product[2 * uECC_WORDS];
    vli_square(product, left);
   1a438:	ab02      	add	r3, sp, #8
   1a43a:	9900      	ldr	r1, [sp, #0]
   1a43c:	4618      	mov	r0, r3
   1a43e:	f7ff fc0c 	bl	19c5a <vli_square>
    vli_mmod_fast(result, product);
   1a442:	ab02      	add	r3, sp, #8
   1a444:	4619      	mov	r1, r3
   1a446:	9801      	ldr	r0, [sp, #4]
   1a448:	f7ff fea2 	bl	1a190 <vli_mmod_fast>
}
   1a44c:	bf00      	nop
   1a44e:	b013      	add	sp, #76	; 0x4c
   1a450:	f85d fb04 	ldr.w	pc, [sp], #4

0001a454 <vli_modInv>:
#define EVEN(vli) (!(vli[0] & 1))
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide"
   https://labs.oracle.com/techrep/2001/smli_tr-2001-95.pdf */
#if !defined(asm_modInv) || !asm_modInv
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   1a454:	b500      	push	{lr}
   1a456:	b0a7      	sub	sp, #156	; 0x9c
   1a458:	9003      	str	r0, [sp, #12]
   1a45a:	9102      	str	r1, [sp, #8]
   1a45c:	9201      	str	r2, [sp, #4]
    uECC_word_t a[uECC_WORDS], b[uECC_WORDS], u[uECC_WORDS], v[uECC_WORDS];
    uECC_word_t carry;
    cmpresult_t cmpResult;

    if (vli_isZero(input)) {
   1a45e:	9802      	ldr	r0, [sp, #8]
   1a460:	f7ff fdcf 	bl	1a002 <vli_isZero>
   1a464:	4603      	mov	r3, r0
   1a466:	2b00      	cmp	r3, #0
   1a468:	d003      	beq.n	1a472 <vli_modInv+0x1e>
        vli_clear(result);
   1a46a:	9803      	ldr	r0, [sp, #12]
   1a46c:	f7ff fdb5 	bl	19fda <vli_clear>
   1a470:	e0d9      	b.n	1a626 <vli_modInv+0x1d2>
        return;
    }

    vli_set(a, input);
   1a472:	ab1c      	add	r3, sp, #112	; 0x70
   1a474:	9902      	ldr	r1, [sp, #8]
   1a476:	4618      	mov	r0, r3
   1a478:	f7ff fdee 	bl	1a058 <vli_set>
    vli_set(b, mod);
   1a47c:	ab14      	add	r3, sp, #80	; 0x50
   1a47e:	9901      	ldr	r1, [sp, #4]
   1a480:	4618      	mov	r0, r3
   1a482:	f7ff fde9 	bl	1a058 <vli_set>
    vli_clear(u);
   1a486:	ab0c      	add	r3, sp, #48	; 0x30
   1a488:	4618      	mov	r0, r3
   1a48a:	f7ff fda6 	bl	19fda <vli_clear>
    u[0] = 1;
   1a48e:	2301      	movs	r3, #1
   1a490:	930c      	str	r3, [sp, #48]	; 0x30
    vli_clear(v);
   1a492:	ab04      	add	r3, sp, #16
   1a494:	4618      	mov	r0, r3
   1a496:	f7ff fda0 	bl	19fda <vli_clear>
    while ((cmpResult = vli_cmp(a, b)) != 0) {
   1a49a:	e0b4      	b.n	1a606 <vli_modInv+0x1b2>
        carry = 0;
   1a49c:	2300      	movs	r3, #0
   1a49e:	9325      	str	r3, [sp, #148]	; 0x94
        if (EVEN(a)) {
   1a4a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1a4a2:	f003 0301 	and.w	r3, r3, #1
   1a4a6:	2b00      	cmp	r3, #0
   1a4a8:	d11c      	bne.n	1a4e4 <vli_modInv+0x90>
            vli_rshift1(a);
   1a4aa:	ab1c      	add	r3, sp, #112	; 0x70
   1a4ac:	4618      	mov	r0, r3
   1a4ae:	f7ff fe19 	bl	1a0e4 <vli_rshift1>
            if (!EVEN(u)) {
   1a4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a4b4:	f003 0301 	and.w	r3, r3, #1
   1a4b8:	2b00      	cmp	r3, #0
   1a4ba:	d006      	beq.n	1a4ca <vli_modInv+0x76>
                carry = vli_add(u, u, mod);
   1a4bc:	a90c      	add	r1, sp, #48	; 0x30
   1a4be:	ab0c      	add	r3, sp, #48	; 0x30
   1a4c0:	9a01      	ldr	r2, [sp, #4]
   1a4c2:	4618      	mov	r0, r3
   1a4c4:	f7ff f872 	bl	195ac <vli_add>
   1a4c8:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(u);
   1a4ca:	ab0c      	add	r3, sp, #48	; 0x30
   1a4cc:	4618      	mov	r0, r3
   1a4ce:	f7ff fe09 	bl	1a0e4 <vli_rshift1>
            if (carry) {
   1a4d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a4d4:	2b00      	cmp	r3, #0
   1a4d6:	f000 8096 	beq.w	1a606 <vli_modInv+0x1b2>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1a4da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a4dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a4e0:	9313      	str	r3, [sp, #76]	; 0x4c
   1a4e2:	e090      	b.n	1a606 <vli_modInv+0x1b2>
            }
        } else if (EVEN(b)) {
   1a4e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a4e6:	f003 0301 	and.w	r3, r3, #1
   1a4ea:	2b00      	cmp	r3, #0
   1a4ec:	d11b      	bne.n	1a526 <vli_modInv+0xd2>
            vli_rshift1(b);
   1a4ee:	ab14      	add	r3, sp, #80	; 0x50
   1a4f0:	4618      	mov	r0, r3
   1a4f2:	f7ff fdf7 	bl	1a0e4 <vli_rshift1>
            if (!EVEN(v)) {
   1a4f6:	9b04      	ldr	r3, [sp, #16]
   1a4f8:	f003 0301 	and.w	r3, r3, #1
   1a4fc:	2b00      	cmp	r3, #0
   1a4fe:	d006      	beq.n	1a50e <vli_modInv+0xba>
                carry = vli_add(v, v, mod);
   1a500:	a904      	add	r1, sp, #16
   1a502:	ab04      	add	r3, sp, #16
   1a504:	9a01      	ldr	r2, [sp, #4]
   1a506:	4618      	mov	r0, r3
   1a508:	f7ff f850 	bl	195ac <vli_add>
   1a50c:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(v);
   1a50e:	ab04      	add	r3, sp, #16
   1a510:	4618      	mov	r0, r3
   1a512:	f7ff fde7 	bl	1a0e4 <vli_rshift1>
            if (carry) {
   1a516:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a518:	2b00      	cmp	r3, #0
   1a51a:	d074      	beq.n	1a606 <vli_modInv+0x1b2>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1a51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a51e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a522:	930b      	str	r3, [sp, #44]	; 0x2c
   1a524:	e06f      	b.n	1a606 <vli_modInv+0x1b2>
            }
        } else if (cmpResult > 0) {
   1a526:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a528:	2b00      	cmp	r3, #0
   1a52a:	dd36      	ble.n	1a59a <vli_modInv+0x146>
            vli_sub(a, a, b);
   1a52c:	aa14      	add	r2, sp, #80	; 0x50
   1a52e:	a91c      	add	r1, sp, #112	; 0x70
   1a530:	ab1c      	add	r3, sp, #112	; 0x70
   1a532:	4618      	mov	r0, r3
   1a534:	f7ff f871 	bl	1961a <vli_sub>
            vli_rshift1(a);
   1a538:	ab1c      	add	r3, sp, #112	; 0x70
   1a53a:	4618      	mov	r0, r3
   1a53c:	f7ff fdd2 	bl	1a0e4 <vli_rshift1>
            if (vli_cmp(u, v) < 0) {
   1a540:	aa04      	add	r2, sp, #16
   1a542:	ab0c      	add	r3, sp, #48	; 0x30
   1a544:	4611      	mov	r1, r2
   1a546:	4618      	mov	r0, r3
   1a548:	f7ff fd9f 	bl	1a08a <vli_cmp>
   1a54c:	4603      	mov	r3, r0
   1a54e:	2b00      	cmp	r3, #0
   1a550:	da05      	bge.n	1a55e <vli_modInv+0x10a>
                vli_add(u, u, mod);
   1a552:	a90c      	add	r1, sp, #48	; 0x30
   1a554:	ab0c      	add	r3, sp, #48	; 0x30
   1a556:	9a01      	ldr	r2, [sp, #4]
   1a558:	4618      	mov	r0, r3
   1a55a:	f7ff f827 	bl	195ac <vli_add>
            }
            vli_sub(u, u, v);
   1a55e:	aa04      	add	r2, sp, #16
   1a560:	a90c      	add	r1, sp, #48	; 0x30
   1a562:	ab0c      	add	r3, sp, #48	; 0x30
   1a564:	4618      	mov	r0, r3
   1a566:	f7ff f858 	bl	1961a <vli_sub>
            if (!EVEN(u)) {
   1a56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a56c:	f003 0301 	and.w	r3, r3, #1
   1a570:	2b00      	cmp	r3, #0
   1a572:	d006      	beq.n	1a582 <vli_modInv+0x12e>
                carry = vli_add(u, u, mod);
   1a574:	a90c      	add	r1, sp, #48	; 0x30
   1a576:	ab0c      	add	r3, sp, #48	; 0x30
   1a578:	9a01      	ldr	r2, [sp, #4]
   1a57a:	4618      	mov	r0, r3
   1a57c:	f7ff f816 	bl	195ac <vli_add>
   1a580:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(u);
   1a582:	ab0c      	add	r3, sp, #48	; 0x30
   1a584:	4618      	mov	r0, r3
   1a586:	f7ff fdad 	bl	1a0e4 <vli_rshift1>
            if (carry) {
   1a58a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a58c:	2b00      	cmp	r3, #0
   1a58e:	d03a      	beq.n	1a606 <vli_modInv+0x1b2>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1a590:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a596:	9313      	str	r3, [sp, #76]	; 0x4c
   1a598:	e035      	b.n	1a606 <vli_modInv+0x1b2>
            }
        } else {
            vli_sub(b, b, a);
   1a59a:	aa1c      	add	r2, sp, #112	; 0x70
   1a59c:	a914      	add	r1, sp, #80	; 0x50
   1a59e:	ab14      	add	r3, sp, #80	; 0x50
   1a5a0:	4618      	mov	r0, r3
   1a5a2:	f7ff f83a 	bl	1961a <vli_sub>
            vli_rshift1(b);
   1a5a6:	ab14      	add	r3, sp, #80	; 0x50
   1a5a8:	4618      	mov	r0, r3
   1a5aa:	f7ff fd9b 	bl	1a0e4 <vli_rshift1>
            if (vli_cmp(v, u) < 0) {
   1a5ae:	aa0c      	add	r2, sp, #48	; 0x30
   1a5b0:	ab04      	add	r3, sp, #16
   1a5b2:	4611      	mov	r1, r2
   1a5b4:	4618      	mov	r0, r3
   1a5b6:	f7ff fd68 	bl	1a08a <vli_cmp>
   1a5ba:	4603      	mov	r3, r0
   1a5bc:	2b00      	cmp	r3, #0
   1a5be:	da05      	bge.n	1a5cc <vli_modInv+0x178>
                vli_add(v, v, mod);
   1a5c0:	a904      	add	r1, sp, #16
   1a5c2:	ab04      	add	r3, sp, #16
   1a5c4:	9a01      	ldr	r2, [sp, #4]
   1a5c6:	4618      	mov	r0, r3
   1a5c8:	f7fe fff0 	bl	195ac <vli_add>
            }
            vli_sub(v, v, u);
   1a5cc:	aa0c      	add	r2, sp, #48	; 0x30
   1a5ce:	a904      	add	r1, sp, #16
   1a5d0:	ab04      	add	r3, sp, #16
   1a5d2:	4618      	mov	r0, r3
   1a5d4:	f7ff f821 	bl	1961a <vli_sub>
            if (!EVEN(v)) {
   1a5d8:	9b04      	ldr	r3, [sp, #16]
   1a5da:	f003 0301 	and.w	r3, r3, #1
   1a5de:	2b00      	cmp	r3, #0
   1a5e0:	d006      	beq.n	1a5f0 <vli_modInv+0x19c>
                carry = vli_add(v, v, mod);
   1a5e2:	a904      	add	r1, sp, #16
   1a5e4:	ab04      	add	r3, sp, #16
   1a5e6:	9a01      	ldr	r2, [sp, #4]
   1a5e8:	4618      	mov	r0, r3
   1a5ea:	f7fe ffdf 	bl	195ac <vli_add>
   1a5ee:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(v);
   1a5f0:	ab04      	add	r3, sp, #16
   1a5f2:	4618      	mov	r0, r3
   1a5f4:	f7ff fd76 	bl	1a0e4 <vli_rshift1>
            if (carry) {
   1a5f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a5fa:	2b00      	cmp	r3, #0
   1a5fc:	d003      	beq.n	1a606 <vli_modInv+0x1b2>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1a5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a604:	930b      	str	r3, [sp, #44]	; 0x2c
    while ((cmpResult = vli_cmp(a, b)) != 0) {
   1a606:	aa14      	add	r2, sp, #80	; 0x50
   1a608:	ab1c      	add	r3, sp, #112	; 0x70
   1a60a:	4611      	mov	r1, r2
   1a60c:	4618      	mov	r0, r3
   1a60e:	f7ff fd3c 	bl	1a08a <vli_cmp>
   1a612:	9024      	str	r0, [sp, #144]	; 0x90
   1a614:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a616:	2b00      	cmp	r3, #0
   1a618:	f47f af40 	bne.w	1a49c <vli_modInv+0x48>
            }
        }
    }
    vli_set(result, u);
   1a61c:	ab0c      	add	r3, sp, #48	; 0x30
   1a61e:	4619      	mov	r1, r3
   1a620:	9803      	ldr	r0, [sp, #12]
   1a622:	f7ff fd19 	bl	1a058 <vli_set>
}
   1a626:	b027      	add	sp, #156	; 0x9c
   1a628:	f85d fb04 	ldr.w	pc, [sp], #4

0001a62c <EccPoint_isZero>:
#endif /* !asm_modInv */

/* ------ Point operations ------ */

/* Returns 1 if 'point' is the point at infinity, 0 otherwise. */
static cmpresult_t EccPoint_isZero(const EccPoint *point) {
   1a62c:	b500      	push	{lr}
   1a62e:	b083      	sub	sp, #12
   1a630:	9001      	str	r0, [sp, #4]
    return (vli_isZero(point->x) && vli_isZero(point->y));
   1a632:	9b01      	ldr	r3, [sp, #4]
   1a634:	4618      	mov	r0, r3
   1a636:	f7ff fce4 	bl	1a002 <vli_isZero>
   1a63a:	4603      	mov	r3, r0
   1a63c:	2b00      	cmp	r3, #0
   1a63e:	d009      	beq.n	1a654 <EccPoint_isZero+0x28>
   1a640:	9b01      	ldr	r3, [sp, #4]
   1a642:	3320      	adds	r3, #32
   1a644:	4618      	mov	r0, r3
   1a646:	f7ff fcdc 	bl	1a002 <vli_isZero>
   1a64a:	4603      	mov	r3, r0
   1a64c:	2b00      	cmp	r3, #0
   1a64e:	d001      	beq.n	1a654 <EccPoint_isZero+0x28>
   1a650:	2301      	movs	r3, #1
   1a652:	e000      	b.n	1a656 <EccPoint_isZero+0x2a>
   1a654:	2300      	movs	r3, #0
}
   1a656:	4618      	mov	r0, r3
   1a658:	b003      	add	sp, #12
   1a65a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001a660 <EccPoint_double_jacobian>:
    vli_modSub(Y1, Y1, t5, curve_p); /* t2 = B * (A - x3) - y1^4 = y3 */
}
#else
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
                                     uECC_word_t * RESTRICT Y1,
                                     uECC_word_t * RESTRICT Z1) {
   1a660:	b500      	push	{lr}
   1a662:	b097      	sub	sp, #92	; 0x5c
   1a664:	9003      	str	r0, [sp, #12]
   1a666:	9102      	str	r1, [sp, #8]
   1a668:	9201      	str	r2, [sp, #4]
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[uECC_WORDS];
    uECC_word_t t5[uECC_WORDS];

    if (vli_isZero(Z1)) {
   1a66a:	9801      	ldr	r0, [sp, #4]
   1a66c:	f7ff fcc9 	bl	1a002 <vli_isZero>
   1a670:	4603      	mov	r3, r0
   1a672:	2b00      	cmp	r3, #0
   1a674:	f040 808a 	bne.w	1a78c <EccPoint_double_jacobian+0x12c>
        return;
    }

    vli_modSquare_fast(t4, Y1);   /* t4 = y1^2 */
   1a678:	ab0d      	add	r3, sp, #52	; 0x34
   1a67a:	9902      	ldr	r1, [sp, #8]
   1a67c:	4618      	mov	r0, r3
   1a67e:	f7ff fed7 	bl	1a430 <vli_modSquare_fast>
    vli_modMult_fast(t5, X1, t4); /* t5 = x1*y1^2 = A */
   1a682:	aa0d      	add	r2, sp, #52	; 0x34
   1a684:	ab05      	add	r3, sp, #20
   1a686:	9903      	ldr	r1, [sp, #12]
   1a688:	4618      	mov	r0, r3
   1a68a:	f7ff febd 	bl	1a408 <vli_modMult_fast>
    vli_modSquare_fast(t4, t4);   /* t4 = y1^4 */
   1a68e:	aa0d      	add	r2, sp, #52	; 0x34
   1a690:	ab0d      	add	r3, sp, #52	; 0x34
   1a692:	4611      	mov	r1, r2
   1a694:	4618      	mov	r0, r3
   1a696:	f7ff fecb 	bl	1a430 <vli_modSquare_fast>
    vli_modMult_fast(Y1, Y1, Z1); /* t2 = y1*z1 = z3 */
   1a69a:	9a01      	ldr	r2, [sp, #4]
   1a69c:	9902      	ldr	r1, [sp, #8]
   1a69e:	9802      	ldr	r0, [sp, #8]
   1a6a0:	f7ff feb2 	bl	1a408 <vli_modMult_fast>
    vli_modSquare_fast(Z1, Z1);   /* t3 = z1^2 */
   1a6a4:	9901      	ldr	r1, [sp, #4]
   1a6a6:	9801      	ldr	r0, [sp, #4]
   1a6a8:	f7ff fec2 	bl	1a430 <vli_modSquare_fast>

    vli_modAdd(X1, X1, Z1, curve_p); /* t1 = x1 + z1^2 */
   1a6ac:	4b39      	ldr	r3, [pc, #228]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a6ae:	9a01      	ldr	r2, [sp, #4]
   1a6b0:	9903      	ldr	r1, [sp, #12]
   1a6b2:	9803      	ldr	r0, [sp, #12]
   1a6b4:	f7ff fd35 	bl	1a122 <vli_modAdd>
    vli_modAdd(Z1, Z1, Z1, curve_p); /* t3 = 2*z1^2 */
   1a6b8:	4b36      	ldr	r3, [pc, #216]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a6ba:	9a01      	ldr	r2, [sp, #4]
   1a6bc:	9901      	ldr	r1, [sp, #4]
   1a6be:	9801      	ldr	r0, [sp, #4]
   1a6c0:	f7ff fd2f 	bl	1a122 <vli_modAdd>
    vli_modSub_fast(Z1, X1, Z1);     /* t3 = x1 - z1^2 */
   1a6c4:	4b33      	ldr	r3, [pc, #204]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a6c6:	9a01      	ldr	r2, [sp, #4]
   1a6c8:	9903      	ldr	r1, [sp, #12]
   1a6ca:	9801      	ldr	r0, [sp, #4]
   1a6cc:	f7ff fd48 	bl	1a160 <vli_modSub>
    vli_modMult_fast(X1, X1, Z1);    /* t1 = x1^2 - z1^4 */
   1a6d0:	9a01      	ldr	r2, [sp, #4]
   1a6d2:	9903      	ldr	r1, [sp, #12]
   1a6d4:	9803      	ldr	r0, [sp, #12]
   1a6d6:	f7ff fe97 	bl	1a408 <vli_modMult_fast>

    vli_modAdd(Z1, X1, X1, curve_p); /* t3 = 2*(x1^2 - z1^4) */
   1a6da:	4b2e      	ldr	r3, [pc, #184]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a6dc:	9a03      	ldr	r2, [sp, #12]
   1a6de:	9903      	ldr	r1, [sp, #12]
   1a6e0:	9801      	ldr	r0, [sp, #4]
   1a6e2:	f7ff fd1e 	bl	1a122 <vli_modAdd>
    vli_modAdd(X1, X1, Z1, curve_p); /* t1 = 3*(x1^2 - z1^4) */
   1a6e6:	4b2b      	ldr	r3, [pc, #172]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a6e8:	9a01      	ldr	r2, [sp, #4]
   1a6ea:	9903      	ldr	r1, [sp, #12]
   1a6ec:	9803      	ldr	r0, [sp, #12]
   1a6ee:	f7ff fd18 	bl	1a122 <vli_modAdd>
    if (vli_testBit(X1, 0)) {
   1a6f2:	2100      	movs	r1, #0
   1a6f4:	9803      	ldr	r0, [sp, #12]
   1a6f6:	f7ff fc9c 	bl	1a032 <vli_testBit>
   1a6fa:	4603      	mov	r3, r0
   1a6fc:	2b00      	cmp	r3, #0
   1a6fe:	d012      	beq.n	1a726 <EccPoint_double_jacobian+0xc6>
        uECC_word_t l_carry = vli_add(X1, X1, curve_p);
   1a700:	4a24      	ldr	r2, [pc, #144]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a702:	9903      	ldr	r1, [sp, #12]
   1a704:	9803      	ldr	r0, [sp, #12]
   1a706:	f7fe ff51 	bl	195ac <vli_add>
   1a70a:	9015      	str	r0, [sp, #84]	; 0x54
        vli_rshift1(X1);
   1a70c:	9803      	ldr	r0, [sp, #12]
   1a70e:	f7ff fce9 	bl	1a0e4 <vli_rshift1>
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1a712:	9b03      	ldr	r3, [sp, #12]
   1a714:	331c      	adds	r3, #28
   1a716:	9a03      	ldr	r2, [sp, #12]
   1a718:	321c      	adds	r2, #28
   1a71a:	6811      	ldr	r1, [r2, #0]
   1a71c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a71e:	07d2      	lsls	r2, r2, #31
   1a720:	430a      	orrs	r2, r1
   1a722:	601a      	str	r2, [r3, #0]
   1a724:	e002      	b.n	1a72c <EccPoint_double_jacobian+0xcc>
    } else {
        vli_rshift1(X1);
   1a726:	9803      	ldr	r0, [sp, #12]
   1a728:	f7ff fcdc 	bl	1a0e4 <vli_rshift1>
    }
    /* t1 = 3/2*(x1^2 - z1^4) = B */

    vli_modSquare_fast(Z1, X1);   /* t3 = B^2 */
   1a72c:	9903      	ldr	r1, [sp, #12]
   1a72e:	9801      	ldr	r0, [sp, #4]
   1a730:	f7ff fe7e 	bl	1a430 <vli_modSquare_fast>
    vli_modSub_fast(Z1, Z1, t5);  /* t3 = B^2 - A */
   1a734:	aa05      	add	r2, sp, #20
   1a736:	4b17      	ldr	r3, [pc, #92]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a738:	9901      	ldr	r1, [sp, #4]
   1a73a:	9801      	ldr	r0, [sp, #4]
   1a73c:	f7ff fd10 	bl	1a160 <vli_modSub>
    vli_modSub_fast(Z1, Z1, t5);  /* t3 = B^2 - 2A = x3 */
   1a740:	aa05      	add	r2, sp, #20
   1a742:	4b14      	ldr	r3, [pc, #80]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a744:	9901      	ldr	r1, [sp, #4]
   1a746:	9801      	ldr	r0, [sp, #4]
   1a748:	f7ff fd0a 	bl	1a160 <vli_modSub>
    vli_modSub_fast(t5, t5, Z1);  /* t5 = A - x3 */
   1a74c:	a905      	add	r1, sp, #20
   1a74e:	a805      	add	r0, sp, #20
   1a750:	4b10      	ldr	r3, [pc, #64]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a752:	9a01      	ldr	r2, [sp, #4]
   1a754:	f7ff fd04 	bl	1a160 <vli_modSub>
    vli_modMult_fast(X1, X1, t5); /* t1 = B * (A - x3) */
   1a758:	ab05      	add	r3, sp, #20
   1a75a:	461a      	mov	r2, r3
   1a75c:	9903      	ldr	r1, [sp, #12]
   1a75e:	9803      	ldr	r0, [sp, #12]
   1a760:	f7ff fe52 	bl	1a408 <vli_modMult_fast>
    vli_modSub_fast(t4, X1, t4);  /* t4 = B * (A - x3) - y1^4 = y3 */
   1a764:	aa0d      	add	r2, sp, #52	; 0x34
   1a766:	a80d      	add	r0, sp, #52	; 0x34
   1a768:	4b0a      	ldr	r3, [pc, #40]	; (1a794 <EccPoint_double_jacobian+0x134>)
   1a76a:	9903      	ldr	r1, [sp, #12]
   1a76c:	f7ff fcf8 	bl	1a160 <vli_modSub>

    vli_set(X1, Z1);
   1a770:	9901      	ldr	r1, [sp, #4]
   1a772:	9803      	ldr	r0, [sp, #12]
   1a774:	f7ff fc70 	bl	1a058 <vli_set>
    vli_set(Z1, Y1);
   1a778:	9902      	ldr	r1, [sp, #8]
   1a77a:	9801      	ldr	r0, [sp, #4]
   1a77c:	f7ff fc6c 	bl	1a058 <vli_set>
    vli_set(Y1, t4);
   1a780:	ab0d      	add	r3, sp, #52	; 0x34
   1a782:	4619      	mov	r1, r3
   1a784:	9802      	ldr	r0, [sp, #8]
   1a786:	f7ff fc67 	bl	1a058 <vli_set>
   1a78a:	e000      	b.n	1a78e <EccPoint_double_jacobian+0x12e>
        return;
   1a78c:	bf00      	nop
}
   1a78e:	b017      	add	sp, #92	; 0x5c
   1a790:	f85d fb04 	ldr.w	pc, [sp], #4
   1a794:	000299d8 	.word	0x000299d8

0001a798 <apply_z>:
#endif

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * RESTRICT X1,
                    uECC_word_t * RESTRICT Y1,
                    const uECC_word_t * RESTRICT Z) {
   1a798:	b500      	push	{lr}
   1a79a:	b08d      	sub	sp, #52	; 0x34
   1a79c:	9003      	str	r0, [sp, #12]
   1a79e:	9102      	str	r1, [sp, #8]
   1a7a0:	9201      	str	r2, [sp, #4]
    uECC_word_t t1[uECC_WORDS];

    vli_modSquare_fast(t1, Z);    /* z^2 */
   1a7a2:	ab04      	add	r3, sp, #16
   1a7a4:	9901      	ldr	r1, [sp, #4]
   1a7a6:	4618      	mov	r0, r3
   1a7a8:	f7ff fe42 	bl	1a430 <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t1); /* x1 * z^2 */
   1a7ac:	ab04      	add	r3, sp, #16
   1a7ae:	461a      	mov	r2, r3
   1a7b0:	9903      	ldr	r1, [sp, #12]
   1a7b2:	9803      	ldr	r0, [sp, #12]
   1a7b4:	f7ff fe28 	bl	1a408 <vli_modMult_fast>
    vli_modMult_fast(t1, t1, Z);  /* z^3 */
   1a7b8:	a904      	add	r1, sp, #16
   1a7ba:	ab04      	add	r3, sp, #16
   1a7bc:	9a01      	ldr	r2, [sp, #4]
   1a7be:	4618      	mov	r0, r3
   1a7c0:	f7ff fe22 	bl	1a408 <vli_modMult_fast>
    vli_modMult_fast(Y1, Y1, t1); /* y1 * z^3 */
   1a7c4:	ab04      	add	r3, sp, #16
   1a7c6:	461a      	mov	r2, r3
   1a7c8:	9902      	ldr	r1, [sp, #8]
   1a7ca:	9802      	ldr	r0, [sp, #8]
   1a7cc:	f7ff fe1c 	bl	1a408 <vli_modMult_fast>
}
   1a7d0:	bf00      	nop
   1a7d2:	b00d      	add	sp, #52	; 0x34
   1a7d4:	f85d fb04 	ldr.w	pc, [sp], #4

0001a7d8 <XYcZ_initial_double>:
/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(uECC_word_t * RESTRICT X1,
                                uECC_word_t * RESTRICT Y1,
                                uECC_word_t * RESTRICT X2,
                                uECC_word_t * RESTRICT Y2,
                                const uECC_word_t * RESTRICT initial_Z) {
   1a7d8:	b500      	push	{lr}
   1a7da:	b08d      	sub	sp, #52	; 0x34
   1a7dc:	9003      	str	r0, [sp, #12]
   1a7de:	9102      	str	r1, [sp, #8]
   1a7e0:	9201      	str	r2, [sp, #4]
   1a7e2:	9300      	str	r3, [sp, #0]
    uECC_word_t z[uECC_WORDS];
    if (initial_Z) {
   1a7e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a7e6:	2b00      	cmp	r3, #0
   1a7e8:	d005      	beq.n	1a7f6 <XYcZ_initial_double+0x1e>
        vli_set(z, initial_Z);
   1a7ea:	ab04      	add	r3, sp, #16
   1a7ec:	990e      	ldr	r1, [sp, #56]	; 0x38
   1a7ee:	4618      	mov	r0, r3
   1a7f0:	f7ff fc32 	bl	1a058 <vli_set>
   1a7f4:	e005      	b.n	1a802 <XYcZ_initial_double+0x2a>
    } else {
        vli_clear(z);
   1a7f6:	ab04      	add	r3, sp, #16
   1a7f8:	4618      	mov	r0, r3
   1a7fa:	f7ff fbee 	bl	19fda <vli_clear>
        z[0] = 1;
   1a7fe:	2301      	movs	r3, #1
   1a800:	9304      	str	r3, [sp, #16]
    }

    vli_set(X2, X1);
   1a802:	9903      	ldr	r1, [sp, #12]
   1a804:	9801      	ldr	r0, [sp, #4]
   1a806:	f7ff fc27 	bl	1a058 <vli_set>
    vli_set(Y2, Y1);
   1a80a:	9902      	ldr	r1, [sp, #8]
   1a80c:	9800      	ldr	r0, [sp, #0]
   1a80e:	f7ff fc23 	bl	1a058 <vli_set>

    apply_z(X1, Y1, z);
   1a812:	ab04      	add	r3, sp, #16
   1a814:	461a      	mov	r2, r3
   1a816:	9902      	ldr	r1, [sp, #8]
   1a818:	9803      	ldr	r0, [sp, #12]
   1a81a:	f7ff ffbd 	bl	1a798 <apply_z>
    EccPoint_double_jacobian(X1, Y1, z);
   1a81e:	ab04      	add	r3, sp, #16
   1a820:	461a      	mov	r2, r3
   1a822:	9902      	ldr	r1, [sp, #8]
   1a824:	9803      	ldr	r0, [sp, #12]
   1a826:	f7ff ff1b 	bl	1a660 <EccPoint_double_jacobian>
    apply_z(X2, Y2, z);
   1a82a:	ab04      	add	r3, sp, #16
   1a82c:	461a      	mov	r2, r3
   1a82e:	9900      	ldr	r1, [sp, #0]
   1a830:	9801      	ldr	r0, [sp, #4]
   1a832:	f7ff ffb1 	bl	1a798 <apply_z>
}
   1a836:	bf00      	nop
   1a838:	b00d      	add	sp, #52	; 0x34
   1a83a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001a840 <XYcZ_add>:
   or P => P', Q => P + Q
*/
static void XYcZ_add(uECC_word_t * RESTRICT X1,
                     uECC_word_t * RESTRICT Y1,
                     uECC_word_t * RESTRICT X2,
                     uECC_word_t * RESTRICT Y2) {
   1a840:	b500      	push	{lr}
   1a842:	b08d      	sub	sp, #52	; 0x34
   1a844:	9003      	str	r0, [sp, #12]
   1a846:	9102      	str	r1, [sp, #8]
   1a848:	9201      	str	r2, [sp, #4]
   1a84a:	9300      	str	r3, [sp, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_WORDS];

    vli_modSub_fast(t5, X2, X1);  /* t5 = x2 - x1 */
   1a84c:	a804      	add	r0, sp, #16
   1a84e:	4b29      	ldr	r3, [pc, #164]	; (1a8f4 <XYcZ_add+0xb4>)
   1a850:	9a03      	ldr	r2, [sp, #12]
   1a852:	9901      	ldr	r1, [sp, #4]
   1a854:	f7ff fc84 	bl	1a160 <vli_modSub>
    vli_modSquare_fast(t5, t5);   /* t5 = (x2 - x1)^2 = A */
   1a858:	aa04      	add	r2, sp, #16
   1a85a:	ab04      	add	r3, sp, #16
   1a85c:	4611      	mov	r1, r2
   1a85e:	4618      	mov	r0, r3
   1a860:	f7ff fde6 	bl	1a430 <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t5); /* t1 = x1*A = B */
   1a864:	ab04      	add	r3, sp, #16
   1a866:	461a      	mov	r2, r3
   1a868:	9903      	ldr	r1, [sp, #12]
   1a86a:	9803      	ldr	r0, [sp, #12]
   1a86c:	f7ff fdcc 	bl	1a408 <vli_modMult_fast>
    vli_modMult_fast(X2, X2, t5); /* t3 = x2*A = C */
   1a870:	ab04      	add	r3, sp, #16
   1a872:	461a      	mov	r2, r3
   1a874:	9901      	ldr	r1, [sp, #4]
   1a876:	9801      	ldr	r0, [sp, #4]
   1a878:	f7ff fdc6 	bl	1a408 <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y2 - y1 */
   1a87c:	4b1d      	ldr	r3, [pc, #116]	; (1a8f4 <XYcZ_add+0xb4>)
   1a87e:	9a02      	ldr	r2, [sp, #8]
   1a880:	9900      	ldr	r1, [sp, #0]
   1a882:	9800      	ldr	r0, [sp, #0]
   1a884:	f7ff fc6c 	bl	1a160 <vli_modSub>
    vli_modSquare_fast(t5, Y2);   /* t5 = (y2 - y1)^2 = D */
   1a888:	ab04      	add	r3, sp, #16
   1a88a:	9900      	ldr	r1, [sp, #0]
   1a88c:	4618      	mov	r0, r3
   1a88e:	f7ff fdcf 	bl	1a430 <vli_modSquare_fast>

    vli_modSub_fast(t5, t5, X1);  /* t5 = D - B */
   1a892:	a904      	add	r1, sp, #16
   1a894:	a804      	add	r0, sp, #16
   1a896:	4b17      	ldr	r3, [pc, #92]	; (1a8f4 <XYcZ_add+0xb4>)
   1a898:	9a03      	ldr	r2, [sp, #12]
   1a89a:	f7ff fc61 	bl	1a160 <vli_modSub>
    vli_modSub_fast(t5, t5, X2);  /* t5 = D - B - C = x3 */
   1a89e:	a904      	add	r1, sp, #16
   1a8a0:	a804      	add	r0, sp, #16
   1a8a2:	4b14      	ldr	r3, [pc, #80]	; (1a8f4 <XYcZ_add+0xb4>)
   1a8a4:	9a01      	ldr	r2, [sp, #4]
   1a8a6:	f7ff fc5b 	bl	1a160 <vli_modSub>
    vli_modSub_fast(X2, X2, X1);  /* t3 = C - B */
   1a8aa:	4b12      	ldr	r3, [pc, #72]	; (1a8f4 <XYcZ_add+0xb4>)
   1a8ac:	9a03      	ldr	r2, [sp, #12]
   1a8ae:	9901      	ldr	r1, [sp, #4]
   1a8b0:	9801      	ldr	r0, [sp, #4]
   1a8b2:	f7ff fc55 	bl	1a160 <vli_modSub>
    vli_modMult_fast(Y1, Y1, X2); /* t2 = y1*(C - B) */
   1a8b6:	9a01      	ldr	r2, [sp, #4]
   1a8b8:	9902      	ldr	r1, [sp, #8]
   1a8ba:	9802      	ldr	r0, [sp, #8]
   1a8bc:	f7ff fda4 	bl	1a408 <vli_modMult_fast>
    vli_modSub_fast(X2, X1, t5);  /* t3 = B - x3 */
   1a8c0:	aa04      	add	r2, sp, #16
   1a8c2:	4b0c      	ldr	r3, [pc, #48]	; (1a8f4 <XYcZ_add+0xb4>)
   1a8c4:	9903      	ldr	r1, [sp, #12]
   1a8c6:	9801      	ldr	r0, [sp, #4]
   1a8c8:	f7ff fc4a 	bl	1a160 <vli_modSub>
    vli_modMult_fast(Y2, Y2, X2); /* t4 = (y2 - y1)*(B - x3) */
   1a8cc:	9a01      	ldr	r2, [sp, #4]
   1a8ce:	9900      	ldr	r1, [sp, #0]
   1a8d0:	9800      	ldr	r0, [sp, #0]
   1a8d2:	f7ff fd99 	bl	1a408 <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y3 */
   1a8d6:	4b07      	ldr	r3, [pc, #28]	; (1a8f4 <XYcZ_add+0xb4>)
   1a8d8:	9a02      	ldr	r2, [sp, #8]
   1a8da:	9900      	ldr	r1, [sp, #0]
   1a8dc:	9800      	ldr	r0, [sp, #0]
   1a8de:	f7ff fc3f 	bl	1a160 <vli_modSub>

    vli_set(X2, t5);
   1a8e2:	ab04      	add	r3, sp, #16
   1a8e4:	4619      	mov	r1, r3
   1a8e6:	9801      	ldr	r0, [sp, #4]
   1a8e8:	f7ff fbb6 	bl	1a058 <vli_set>
}
   1a8ec:	bf00      	nop
   1a8ee:	b00d      	add	sp, #52	; 0x34
   1a8f0:	f85d fb04 	ldr.w	pc, [sp], #4
   1a8f4:	000299d8 	.word	0x000299d8

0001a8f8 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(uECC_word_t * RESTRICT X1,
                      uECC_word_t * RESTRICT Y1,
                      uECC_word_t * RESTRICT X2,
                      uECC_word_t * RESTRICT Y2) {
   1a8f8:	b500      	push	{lr}
   1a8fa:	b09d      	sub	sp, #116	; 0x74
   1a8fc:	9003      	str	r0, [sp, #12]
   1a8fe:	9102      	str	r1, [sp, #8]
   1a900:	9201      	str	r2, [sp, #4]
   1a902:	9300      	str	r3, [sp, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_WORDS];
    uECC_word_t t6[uECC_WORDS];
    uECC_word_t t7[uECC_WORDS];

    vli_modSub_fast(t5, X2, X1);     /* t5 = x2 - x1 */
   1a904:	a814      	add	r0, sp, #80	; 0x50
   1a906:	4b3c      	ldr	r3, [pc, #240]	; (1a9f8 <XYcZ_addC+0x100>)
   1a908:	9a03      	ldr	r2, [sp, #12]
   1a90a:	9901      	ldr	r1, [sp, #4]
   1a90c:	f7ff fc28 	bl	1a160 <vli_modSub>
    vli_modSquare_fast(t5, t5);      /* t5 = (x2 - x1)^2 = A */
   1a910:	aa14      	add	r2, sp, #80	; 0x50
   1a912:	ab14      	add	r3, sp, #80	; 0x50
   1a914:	4611      	mov	r1, r2
   1a916:	4618      	mov	r0, r3
   1a918:	f7ff fd8a 	bl	1a430 <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t5);    /* t1 = x1*A = B */
   1a91c:	ab14      	add	r3, sp, #80	; 0x50
   1a91e:	461a      	mov	r2, r3
   1a920:	9903      	ldr	r1, [sp, #12]
   1a922:	9803      	ldr	r0, [sp, #12]
   1a924:	f7ff fd70 	bl	1a408 <vli_modMult_fast>
    vli_modMult_fast(X2, X2, t5);    /* t3 = x2*A = C */
   1a928:	ab14      	add	r3, sp, #80	; 0x50
   1a92a:	461a      	mov	r2, r3
   1a92c:	9901      	ldr	r1, [sp, #4]
   1a92e:	9801      	ldr	r0, [sp, #4]
   1a930:	f7ff fd6a 	bl	1a408 <vli_modMult_fast>
    vli_modAdd(t5, Y2, Y1, curve_p); /* t5 = y2 + y1 */
   1a934:	a814      	add	r0, sp, #80	; 0x50
   1a936:	4b30      	ldr	r3, [pc, #192]	; (1a9f8 <XYcZ_addC+0x100>)
   1a938:	9a02      	ldr	r2, [sp, #8]
   1a93a:	9900      	ldr	r1, [sp, #0]
   1a93c:	f7ff fbf1 	bl	1a122 <vli_modAdd>
    vli_modSub_fast(Y2, Y2, Y1);     /* t4 = y2 - y1 */
   1a940:	4b2d      	ldr	r3, [pc, #180]	; (1a9f8 <XYcZ_addC+0x100>)
   1a942:	9a02      	ldr	r2, [sp, #8]
   1a944:	9900      	ldr	r1, [sp, #0]
   1a946:	9800      	ldr	r0, [sp, #0]
   1a948:	f7ff fc0a 	bl	1a160 <vli_modSub>

    vli_modSub_fast(t6, X2, X1);     /* t6 = C - B */
   1a94c:	a80c      	add	r0, sp, #48	; 0x30
   1a94e:	4b2a      	ldr	r3, [pc, #168]	; (1a9f8 <XYcZ_addC+0x100>)
   1a950:	9a03      	ldr	r2, [sp, #12]
   1a952:	9901      	ldr	r1, [sp, #4]
   1a954:	f7ff fc04 	bl	1a160 <vli_modSub>
    vli_modMult_fast(Y1, Y1, t6);    /* t2 = y1 * (C - B) = E */
   1a958:	ab0c      	add	r3, sp, #48	; 0x30
   1a95a:	461a      	mov	r2, r3
   1a95c:	9902      	ldr	r1, [sp, #8]
   1a95e:	9802      	ldr	r0, [sp, #8]
   1a960:	f7ff fd52 	bl	1a408 <vli_modMult_fast>
    vli_modAdd(t6, X1, X2, curve_p); /* t6 = B + C */
   1a964:	a80c      	add	r0, sp, #48	; 0x30
   1a966:	4b24      	ldr	r3, [pc, #144]	; (1a9f8 <XYcZ_addC+0x100>)
   1a968:	9a01      	ldr	r2, [sp, #4]
   1a96a:	9903      	ldr	r1, [sp, #12]
   1a96c:	f7ff fbd9 	bl	1a122 <vli_modAdd>
    vli_modSquare_fast(X2, Y2);      /* t3 = (y2 - y1)^2 = D */
   1a970:	9900      	ldr	r1, [sp, #0]
   1a972:	9801      	ldr	r0, [sp, #4]
   1a974:	f7ff fd5c 	bl	1a430 <vli_modSquare_fast>
    vli_modSub_fast(X2, X2, t6);     /* t3 = D - (B + C) = x3 */
   1a978:	aa0c      	add	r2, sp, #48	; 0x30
   1a97a:	4b1f      	ldr	r3, [pc, #124]	; (1a9f8 <XYcZ_addC+0x100>)
   1a97c:	9901      	ldr	r1, [sp, #4]
   1a97e:	9801      	ldr	r0, [sp, #4]
   1a980:	f7ff fbee 	bl	1a160 <vli_modSub>

    vli_modSub_fast(t7, X1, X2);  /* t7 = B - x3 */
   1a984:	a804      	add	r0, sp, #16
   1a986:	4b1c      	ldr	r3, [pc, #112]	; (1a9f8 <XYcZ_addC+0x100>)
   1a988:	9a01      	ldr	r2, [sp, #4]
   1a98a:	9903      	ldr	r1, [sp, #12]
   1a98c:	f7ff fbe8 	bl	1a160 <vli_modSub>
    vli_modMult_fast(Y2, Y2, t7); /* t4 = (y2 - y1)*(B - x3) */
   1a990:	ab04      	add	r3, sp, #16
   1a992:	461a      	mov	r2, r3
   1a994:	9900      	ldr	r1, [sp, #0]
   1a996:	9800      	ldr	r0, [sp, #0]
   1a998:	f7ff fd36 	bl	1a408 <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = (y2 - y1)*(B - x3) - E = y3 */
   1a99c:	4b16      	ldr	r3, [pc, #88]	; (1a9f8 <XYcZ_addC+0x100>)
   1a99e:	9a02      	ldr	r2, [sp, #8]
   1a9a0:	9900      	ldr	r1, [sp, #0]
   1a9a2:	9800      	ldr	r0, [sp, #0]
   1a9a4:	f7ff fbdc 	bl	1a160 <vli_modSub>

    vli_modSquare_fast(t7, t5);   /* t7 = (y2 + y1)^2 = F */
   1a9a8:	aa14      	add	r2, sp, #80	; 0x50
   1a9aa:	ab04      	add	r3, sp, #16
   1a9ac:	4611      	mov	r1, r2
   1a9ae:	4618      	mov	r0, r3
   1a9b0:	f7ff fd3e 	bl	1a430 <vli_modSquare_fast>
    vli_modSub_fast(t7, t7, t6);  /* t7 = F - (B + C) = x3' */
   1a9b4:	aa0c      	add	r2, sp, #48	; 0x30
   1a9b6:	a904      	add	r1, sp, #16
   1a9b8:	a804      	add	r0, sp, #16
   1a9ba:	4b0f      	ldr	r3, [pc, #60]	; (1a9f8 <XYcZ_addC+0x100>)
   1a9bc:	f7ff fbd0 	bl	1a160 <vli_modSub>
    vli_modSub_fast(t6, t7, X1);  /* t6 = x3' - B */
   1a9c0:	a904      	add	r1, sp, #16
   1a9c2:	a80c      	add	r0, sp, #48	; 0x30
   1a9c4:	4b0c      	ldr	r3, [pc, #48]	; (1a9f8 <XYcZ_addC+0x100>)
   1a9c6:	9a03      	ldr	r2, [sp, #12]
   1a9c8:	f7ff fbca 	bl	1a160 <vli_modSub>
    vli_modMult_fast(t6, t6, t5); /* t6 = (y2 + y1)*(x3' - B) */
   1a9cc:	aa14      	add	r2, sp, #80	; 0x50
   1a9ce:	a90c      	add	r1, sp, #48	; 0x30
   1a9d0:	ab0c      	add	r3, sp, #48	; 0x30
   1a9d2:	4618      	mov	r0, r3
   1a9d4:	f7ff fd18 	bl	1a408 <vli_modMult_fast>
    vli_modSub_fast(Y1, t6, Y1);  /* t2 = (y2 + y1)*(x3' - B) - E = y3' */
   1a9d8:	a90c      	add	r1, sp, #48	; 0x30
   1a9da:	4b07      	ldr	r3, [pc, #28]	; (1a9f8 <XYcZ_addC+0x100>)
   1a9dc:	9a02      	ldr	r2, [sp, #8]
   1a9de:	9802      	ldr	r0, [sp, #8]
   1a9e0:	f7ff fbbe 	bl	1a160 <vli_modSub>

    vli_set(X1, t7);
   1a9e4:	ab04      	add	r3, sp, #16
   1a9e6:	4619      	mov	r1, r3
   1a9e8:	9803      	ldr	r0, [sp, #12]
   1a9ea:	f7ff fb35 	bl	1a058 <vli_set>
}
   1a9ee:	bf00      	nop
   1a9f0:	b01d      	add	sp, #116	; 0x74
   1a9f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1a9f6:	bf00      	nop
   1a9f8:	000299d8 	.word	0x000299d8

0001a9fc <EccPoint_mult>:

static void EccPoint_mult(EccPoint * RESTRICT result,
                          const EccPoint * RESTRICT point,
                          const uECC_word_t * RESTRICT scalar,
                          const uECC_word_t * RESTRICT initialZ,
                          bitcount_t numBits) {
   1a9fc:	b510      	push	{r4, lr}
   1a9fe:	b0b0      	sub	sp, #192	; 0xc0
   1aa00:	9005      	str	r0, [sp, #20]
   1aa02:	9104      	str	r1, [sp, #16]
   1aa04:	9203      	str	r2, [sp, #12]
   1aa06:	9302      	str	r3, [sp, #8]
    uECC_word_t Ry[2][uECC_WORDS];
    uECC_word_t z[uECC_WORDS];
    bitcount_t i;
    uECC_word_t nb;

    vli_set(Rx[1], point->x);
   1aa08:	9a04      	ldr	r2, [sp, #16]
   1aa0a:	ab1e      	add	r3, sp, #120	; 0x78
   1aa0c:	3320      	adds	r3, #32
   1aa0e:	4611      	mov	r1, r2
   1aa10:	4618      	mov	r0, r3
   1aa12:	f7ff fb21 	bl	1a058 <vli_set>
    vli_set(Ry[1], point->y);
   1aa16:	9b04      	ldr	r3, [sp, #16]
   1aa18:	f103 0220 	add.w	r2, r3, #32
   1aa1c:	ab0e      	add	r3, sp, #56	; 0x38
   1aa1e:	3320      	adds	r3, #32
   1aa20:	4611      	mov	r1, r2
   1aa22:	4618      	mov	r0, r3
   1aa24:	f7ff fb18 	bl	1a058 <vli_set>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initialZ);
   1aa28:	ac0e      	add	r4, sp, #56	; 0x38
   1aa2a:	aa1e      	add	r2, sp, #120	; 0x78
   1aa2c:	ab0e      	add	r3, sp, #56	; 0x38
   1aa2e:	f103 0120 	add.w	r1, r3, #32
   1aa32:	ab1e      	add	r3, sp, #120	; 0x78
   1aa34:	f103 0020 	add.w	r0, r3, #32
   1aa38:	9b02      	ldr	r3, [sp, #8]
   1aa3a:	9300      	str	r3, [sp, #0]
   1aa3c:	4623      	mov	r3, r4
   1aa3e:	f7ff fecb 	bl	1a7d8 <XYcZ_initial_double>

    for (i = numBits - 2; i > 0; --i) {
   1aa42:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   1aa44:	3b02      	subs	r3, #2
   1aa46:	932f      	str	r3, [sp, #188]	; 0xbc
   1aa48:	e03b      	b.n	1aac2 <EccPoint_mult+0xc6>
        nb = !vli_testBit(scalar, i);
   1aa4a:	992f      	ldr	r1, [sp, #188]	; 0xbc
   1aa4c:	9803      	ldr	r0, [sp, #12]
   1aa4e:	f7ff faf0 	bl	1a032 <vli_testBit>
   1aa52:	4603      	mov	r3, r0
   1aa54:	2b00      	cmp	r3, #0
   1aa56:	bf0c      	ite	eq
   1aa58:	2301      	moveq	r3, #1
   1aa5a:	2300      	movne	r3, #0
   1aa5c:	b2db      	uxtb	r3, r3
   1aa5e:	932e      	str	r3, [sp, #184]	; 0xb8
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   1aa60:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aa62:	f1c3 0301 	rsb	r3, r3, #1
   1aa66:	aa1e      	add	r2, sp, #120	; 0x78
   1aa68:	015b      	lsls	r3, r3, #5
   1aa6a:	18d0      	adds	r0, r2, r3
   1aa6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aa6e:	f1c3 0301 	rsb	r3, r3, #1
   1aa72:	aa0e      	add	r2, sp, #56	; 0x38
   1aa74:	015b      	lsls	r3, r3, #5
   1aa76:	18d1      	adds	r1, r2, r3
   1aa78:	aa1e      	add	r2, sp, #120	; 0x78
   1aa7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aa7c:	015b      	lsls	r3, r3, #5
   1aa7e:	18d4      	adds	r4, r2, r3
   1aa80:	aa0e      	add	r2, sp, #56	; 0x38
   1aa82:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aa84:	015b      	lsls	r3, r3, #5
   1aa86:	4413      	add	r3, r2
   1aa88:	4622      	mov	r2, r4
   1aa8a:	f7ff ff35 	bl	1a8f8 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   1aa8e:	aa1e      	add	r2, sp, #120	; 0x78
   1aa90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aa92:	015b      	lsls	r3, r3, #5
   1aa94:	18d0      	adds	r0, r2, r3
   1aa96:	aa0e      	add	r2, sp, #56	; 0x38
   1aa98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aa9a:	015b      	lsls	r3, r3, #5
   1aa9c:	18d1      	adds	r1, r2, r3
   1aa9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aaa0:	f1c3 0301 	rsb	r3, r3, #1
   1aaa4:	aa1e      	add	r2, sp, #120	; 0x78
   1aaa6:	015b      	lsls	r3, r3, #5
   1aaa8:	18d4      	adds	r4, r2, r3
   1aaaa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aaac:	f1c3 0301 	rsb	r3, r3, #1
   1aab0:	aa0e      	add	r2, sp, #56	; 0x38
   1aab2:	015b      	lsls	r3, r3, #5
   1aab4:	4413      	add	r3, r2
   1aab6:	4622      	mov	r2, r4
   1aab8:	f7ff fec2 	bl	1a840 <XYcZ_add>
    for (i = numBits - 2; i > 0; --i) {
   1aabc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1aabe:	3b01      	subs	r3, #1
   1aac0:	932f      	str	r3, [sp, #188]	; 0xbc
   1aac2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1aac4:	2b00      	cmp	r3, #0
   1aac6:	dcc0      	bgt.n	1aa4a <EccPoint_mult+0x4e>
    }

    nb = !vli_testBit(scalar, 0);
   1aac8:	2100      	movs	r1, #0
   1aaca:	9803      	ldr	r0, [sp, #12]
   1aacc:	f7ff fab1 	bl	1a032 <vli_testBit>
   1aad0:	4603      	mov	r3, r0
   1aad2:	2b00      	cmp	r3, #0
   1aad4:	bf0c      	ite	eq
   1aad6:	2301      	moveq	r3, #1
   1aad8:	2300      	movne	r3, #0
   1aada:	b2db      	uxtb	r3, r3
   1aadc:	932e      	str	r3, [sp, #184]	; 0xb8
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   1aade:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aae0:	f1c3 0301 	rsb	r3, r3, #1
   1aae4:	aa1e      	add	r2, sp, #120	; 0x78
   1aae6:	015b      	lsls	r3, r3, #5
   1aae8:	18d0      	adds	r0, r2, r3
   1aaea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aaec:	f1c3 0301 	rsb	r3, r3, #1
   1aaf0:	aa0e      	add	r2, sp, #56	; 0x38
   1aaf2:	015b      	lsls	r3, r3, #5
   1aaf4:	18d1      	adds	r1, r2, r3
   1aaf6:	aa1e      	add	r2, sp, #120	; 0x78
   1aaf8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1aafa:	015b      	lsls	r3, r3, #5
   1aafc:	18d4      	adds	r4, r2, r3
   1aafe:	aa0e      	add	r2, sp, #56	; 0x38
   1ab00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ab02:	015b      	lsls	r3, r3, #5
   1ab04:	4413      	add	r3, r2
   1ab06:	4622      	mov	r2, r4
   1ab08:	f7ff fef6 	bl	1a8f8 <XYcZ_addC>

    /* Find final 1/Z value. */
    vli_modSub_fast(z, Rx[1], Rx[0]);   /* X1 - X0 */
   1ab0c:	aa1e      	add	r2, sp, #120	; 0x78
   1ab0e:	ab1e      	add	r3, sp, #120	; 0x78
   1ab10:	f103 0120 	add.w	r1, r3, #32
   1ab14:	a806      	add	r0, sp, #24
   1ab16:	4b2d      	ldr	r3, [pc, #180]	; (1abcc <EccPoint_mult+0x1d0>)
   1ab18:	f7ff fb22 	bl	1a160 <vli_modSub>
    vli_modMult_fast(z, z, Ry[1 - nb]); /* Yb * (X1 - X0) */
   1ab1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ab1e:	f1c3 0301 	rsb	r3, r3, #1
   1ab22:	aa0e      	add	r2, sp, #56	; 0x38
   1ab24:	015b      	lsls	r3, r3, #5
   1ab26:	441a      	add	r2, r3
   1ab28:	a906      	add	r1, sp, #24
   1ab2a:	ab06      	add	r3, sp, #24
   1ab2c:	4618      	mov	r0, r3
   1ab2e:	f7ff fc6b 	bl	1a408 <vli_modMult_fast>
    vli_modMult_fast(z, z, point->x); /* xP * Yb * (X1 - X0) */
   1ab32:	9a04      	ldr	r2, [sp, #16]
   1ab34:	a906      	add	r1, sp, #24
   1ab36:	ab06      	add	r3, sp, #24
   1ab38:	4618      	mov	r0, r3
   1ab3a:	f7ff fc65 	bl	1a408 <vli_modMult_fast>
    vli_modInv(z, z, curve_p);          /* 1 / (xP * Yb * (X1 - X0)) */
   1ab3e:	a906      	add	r1, sp, #24
   1ab40:	ab06      	add	r3, sp, #24
   1ab42:	4a22      	ldr	r2, [pc, #136]	; (1abcc <EccPoint_mult+0x1d0>)
   1ab44:	4618      	mov	r0, r3
   1ab46:	f7ff fc85 	bl	1a454 <vli_modInv>
    vli_modMult_fast(z, z, point->y); /* yP / (xP * Yb * (X1 - X0)) */
   1ab4a:	9b04      	ldr	r3, [sp, #16]
   1ab4c:	f103 0220 	add.w	r2, r3, #32
   1ab50:	a906      	add	r1, sp, #24
   1ab52:	ab06      	add	r3, sp, #24
   1ab54:	4618      	mov	r0, r3
   1ab56:	f7ff fc57 	bl	1a408 <vli_modMult_fast>
    vli_modMult_fast(z, z, Rx[1 - nb]); /* Xb * yP / (xP * Yb * (X1 - X0)) */
   1ab5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ab5c:	f1c3 0301 	rsb	r3, r3, #1
   1ab60:	aa1e      	add	r2, sp, #120	; 0x78
   1ab62:	015b      	lsls	r3, r3, #5
   1ab64:	441a      	add	r2, r3
   1ab66:	a906      	add	r1, sp, #24
   1ab68:	ab06      	add	r3, sp, #24
   1ab6a:	4618      	mov	r0, r3
   1ab6c:	f7ff fc4c 	bl	1a408 <vli_modMult_fast>
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   1ab70:	aa1e      	add	r2, sp, #120	; 0x78
   1ab72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ab74:	015b      	lsls	r3, r3, #5
   1ab76:	18d0      	adds	r0, r2, r3
   1ab78:	aa0e      	add	r2, sp, #56	; 0x38
   1ab7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ab7c:	015b      	lsls	r3, r3, #5
   1ab7e:	18d1      	adds	r1, r2, r3
   1ab80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ab82:	f1c3 0301 	rsb	r3, r3, #1
   1ab86:	aa1e      	add	r2, sp, #120	; 0x78
   1ab88:	015b      	lsls	r3, r3, #5
   1ab8a:	18d4      	adds	r4, r2, r3
   1ab8c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ab8e:	f1c3 0301 	rsb	r3, r3, #1
   1ab92:	aa0e      	add	r2, sp, #56	; 0x38
   1ab94:	015b      	lsls	r3, r3, #5
   1ab96:	4413      	add	r3, r2
   1ab98:	4622      	mov	r2, r4
   1ab9a:	f7ff fe51 	bl	1a840 <XYcZ_add>
    apply_z(Rx[0], Ry[0], z);
   1ab9e:	aa06      	add	r2, sp, #24
   1aba0:	a90e      	add	r1, sp, #56	; 0x38
   1aba2:	ab1e      	add	r3, sp, #120	; 0x78
   1aba4:	4618      	mov	r0, r3
   1aba6:	f7ff fdf7 	bl	1a798 <apply_z>

    vli_set(result->x, Rx[0]);
   1abaa:	9b05      	ldr	r3, [sp, #20]
   1abac:	aa1e      	add	r2, sp, #120	; 0x78
   1abae:	4611      	mov	r1, r2
   1abb0:	4618      	mov	r0, r3
   1abb2:	f7ff fa51 	bl	1a058 <vli_set>
    vli_set(result->y, Ry[0]);
   1abb6:	9b05      	ldr	r3, [sp, #20]
   1abb8:	3320      	adds	r3, #32
   1abba:	aa0e      	add	r2, sp, #56	; 0x38
   1abbc:	4611      	mov	r1, r2
   1abbe:	4618      	mov	r0, r3
   1abc0:	f7ff fa4a 	bl	1a058 <vli_set>
}
   1abc4:	bf00      	nop
   1abc6:	b030      	add	sp, #192	; 0xc0
   1abc8:	bd10      	pop	{r4, pc}
   1abca:	bf00      	nop
   1abcc:	000299d8 	.word	0x000299d8

0001abd0 <EccPoint_compute_public_key>:

static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   1abd0:	b500      	push	{lr}
   1abd2:	b099      	sub	sp, #100	; 0x64
   1abd4:	9003      	str	r0, [sp, #12]
   1abd6:	9102      	str	r1, [sp, #8]
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
   1abd8:	ab0f      	add	r3, sp, #60	; 0x3c
   1abda:	9305      	str	r3, [sp, #20]
   1abdc:	ab07      	add	r3, sp, #28
   1abde:	9306      	str	r3, [sp, #24]
    uECC_word_t carry;
#endif

    /* Make sure the private key is in the range [1, n-1]. */
    if (vli_isZero(private)) {
   1abe0:	9802      	ldr	r0, [sp, #8]
   1abe2:	f7ff fa0e 	bl	1a002 <vli_isZero>
   1abe6:	4603      	mov	r3, r0
   1abe8:	2b00      	cmp	r3, #0
   1abea:	d001      	beq.n	1abf0 <EccPoint_compute_public_key+0x20>
        return 0;
   1abec:	2300      	movs	r3, #0
   1abee:	e031      	b.n	1ac54 <EccPoint_compute_public_key+0x84>
    // impact (about 2% slower on average) and requires the vli_xxx_n functions, leading to
    // a significant increase in code size.

    EccPoint_mult(result, &curve_G, private, 0, vli_numBits(private, uECC_WORDS));
#else
    if (vli_cmp(curve_n, private) != 1) {
   1abf0:	9902      	ldr	r1, [sp, #8]
   1abf2:	481a      	ldr	r0, [pc, #104]	; (1ac5c <EccPoint_compute_public_key+0x8c>)
   1abf4:	f7ff fa49 	bl	1a08a <vli_cmp>
   1abf8:	4603      	mov	r3, r0
   1abfa:	2b01      	cmp	r3, #1
   1abfc:	d001      	beq.n	1ac02 <EccPoint_compute_public_key+0x32>
        return 0;
   1abfe:	2300      	movs	r3, #0
   1ac00:	e028      	b.n	1ac54 <EccPoint_compute_public_key+0x84>
    }

    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(tmp1, private, curve_n);
   1ac02:	ab0f      	add	r3, sp, #60	; 0x3c
   1ac04:	4a15      	ldr	r2, [pc, #84]	; (1ac5c <EccPoint_compute_public_key+0x8c>)
   1ac06:	9902      	ldr	r1, [sp, #8]
   1ac08:	4618      	mov	r0, r3
   1ac0a:	f7fe fccf 	bl	195ac <vli_add>
   1ac0e:	9017      	str	r0, [sp, #92]	; 0x5c
    vli_add(tmp2, tmp1, curve_n);
   1ac10:	a90f      	add	r1, sp, #60	; 0x3c
   1ac12:	ab07      	add	r3, sp, #28
   1ac14:	4a11      	ldr	r2, [pc, #68]	; (1ac5c <EccPoint_compute_public_key+0x8c>)
   1ac16:	4618      	mov	r0, r3
   1ac18:	f7fe fcc8 	bl	195ac <vli_add>
    EccPoint_mult(result, &curve_G, p2[!carry], 0, (uECC_BYTES * 8) + 1);
   1ac1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ac1e:	2b00      	cmp	r3, #0
   1ac20:	bf0c      	ite	eq
   1ac22:	2301      	moveq	r3, #1
   1ac24:	2300      	movne	r3, #0
   1ac26:	b2db      	uxtb	r3, r3
   1ac28:	009b      	lsls	r3, r3, #2
   1ac2a:	aa18      	add	r2, sp, #96	; 0x60
   1ac2c:	4413      	add	r3, r2
   1ac2e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
   1ac32:	f240 1301 	movw	r3, #257	; 0x101
   1ac36:	9300      	str	r3, [sp, #0]
   1ac38:	2300      	movs	r3, #0
   1ac3a:	4909      	ldr	r1, [pc, #36]	; (1ac60 <EccPoint_compute_public_key+0x90>)
   1ac3c:	9803      	ldr	r0, [sp, #12]
   1ac3e:	f7ff fedd 	bl	1a9fc <EccPoint_mult>
#endif

    if (EccPoint_isZero(result)) {
   1ac42:	9803      	ldr	r0, [sp, #12]
   1ac44:	f7ff fcf2 	bl	1a62c <EccPoint_isZero>
   1ac48:	4603      	mov	r3, r0
   1ac4a:	2b00      	cmp	r3, #0
   1ac4c:	d001      	beq.n	1ac52 <EccPoint_compute_public_key+0x82>
        return 0;
   1ac4e:	2300      	movs	r3, #0
   1ac50:	e000      	b.n	1ac54 <EccPoint_compute_public_key+0x84>
    }
    return 1;
   1ac52:	2301      	movs	r3, #1
}
   1ac54:	4618      	mov	r0, r3
   1ac56:	b019      	add	sp, #100	; 0x64
   1ac58:	f85d fb04 	ldr.w	pc, [sp], #4
   1ac5c:	00029a58 	.word	0x00029a58
   1ac60:	00029a18 	.word	0x00029a18

0001ac64 <vli_nativeToBytes>:

#define vli_bytesToNative(dest, src) vli_nativeToBytes((dest), (src))

#elif uECC_WORD_SIZE == 4

static void vli_nativeToBytes(uint8_t *bytes, const uint32_t *native) {
   1ac64:	b084      	sub	sp, #16
   1ac66:	9001      	str	r0, [sp, #4]
   1ac68:	9100      	str	r1, [sp, #0]
    unsigned i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1ac6a:	2300      	movs	r3, #0
   1ac6c:	9303      	str	r3, [sp, #12]
   1ac6e:	e031      	b.n	1acd4 <vli_nativeToBytes+0x70>
        uint8_t *digit = bytes + 4 * (uECC_WORDS - 1 - i);
   1ac70:	9a03      	ldr	r2, [sp, #12]
   1ac72:	4613      	mov	r3, r2
   1ac74:	079b      	lsls	r3, r3, #30
   1ac76:	1a9b      	subs	r3, r3, r2
   1ac78:	009b      	lsls	r3, r3, #2
   1ac7a:	331c      	adds	r3, #28
   1ac7c:	9a01      	ldr	r2, [sp, #4]
   1ac7e:	4413      	add	r3, r2
   1ac80:	9302      	str	r3, [sp, #8]
        digit[0] = (uint8_t)(native[i] >> 24);
   1ac82:	9b03      	ldr	r3, [sp, #12]
   1ac84:	009b      	lsls	r3, r3, #2
   1ac86:	9a00      	ldr	r2, [sp, #0]
   1ac88:	4413      	add	r3, r2
   1ac8a:	681b      	ldr	r3, [r3, #0]
   1ac8c:	0e1b      	lsrs	r3, r3, #24
   1ac8e:	b2da      	uxtb	r2, r3
   1ac90:	9b02      	ldr	r3, [sp, #8]
   1ac92:	701a      	strb	r2, [r3, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   1ac94:	9b02      	ldr	r3, [sp, #8]
   1ac96:	3301      	adds	r3, #1
   1ac98:	9a03      	ldr	r2, [sp, #12]
   1ac9a:	0092      	lsls	r2, r2, #2
   1ac9c:	9900      	ldr	r1, [sp, #0]
   1ac9e:	440a      	add	r2, r1
   1aca0:	6812      	ldr	r2, [r2, #0]
   1aca2:	0c12      	lsrs	r2, r2, #16
   1aca4:	b2d2      	uxtb	r2, r2
   1aca6:	701a      	strb	r2, [r3, #0]
        digit[2] = (uint8_t)(native[i] >> 8);
   1aca8:	9b02      	ldr	r3, [sp, #8]
   1acaa:	3302      	adds	r3, #2
   1acac:	9a03      	ldr	r2, [sp, #12]
   1acae:	0092      	lsls	r2, r2, #2
   1acb0:	9900      	ldr	r1, [sp, #0]
   1acb2:	440a      	add	r2, r1
   1acb4:	6812      	ldr	r2, [r2, #0]
   1acb6:	0a12      	lsrs	r2, r2, #8
   1acb8:	b2d2      	uxtb	r2, r2
   1acba:	701a      	strb	r2, [r3, #0]
        digit[3] = (uint8_t)(native[i]);
   1acbc:	9b02      	ldr	r3, [sp, #8]
   1acbe:	3303      	adds	r3, #3
   1acc0:	9a03      	ldr	r2, [sp, #12]
   1acc2:	0092      	lsls	r2, r2, #2
   1acc4:	9900      	ldr	r1, [sp, #0]
   1acc6:	440a      	add	r2, r1
   1acc8:	6812      	ldr	r2, [r2, #0]
   1acca:	b2d2      	uxtb	r2, r2
   1accc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   1acce:	9b03      	ldr	r3, [sp, #12]
   1acd0:	3301      	adds	r3, #1
   1acd2:	9303      	str	r3, [sp, #12]
   1acd4:	9b03      	ldr	r3, [sp, #12]
   1acd6:	2b07      	cmp	r3, #7
   1acd8:	d9ca      	bls.n	1ac70 <vli_nativeToBytes+0xc>
    }
}
   1acda:	bf00      	nop
   1acdc:	b004      	add	sp, #16
   1acde:	4770      	bx	lr

0001ace0 <vli_bytesToNative>:

static void vli_bytesToNative(uint32_t *native, const uint8_t *bytes) {
   1ace0:	b084      	sub	sp, #16
   1ace2:	9001      	str	r0, [sp, #4]
   1ace4:	9100      	str	r1, [sp, #0]
    unsigned i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1ace6:	2300      	movs	r3, #0
   1ace8:	9303      	str	r3, [sp, #12]
   1acea:	e021      	b.n	1ad30 <vli_bytesToNative+0x50>
        const uint8_t *digit = bytes + 4 * (uECC_WORDS - 1 - i);
   1acec:	9a03      	ldr	r2, [sp, #12]
   1acee:	4613      	mov	r3, r2
   1acf0:	079b      	lsls	r3, r3, #30
   1acf2:	1a9b      	subs	r3, r3, r2
   1acf4:	009b      	lsls	r3, r3, #2
   1acf6:	331c      	adds	r3, #28
   1acf8:	9a00      	ldr	r2, [sp, #0]
   1acfa:	4413      	add	r3, r2
   1acfc:	9302      	str	r3, [sp, #8]
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1acfe:	9b03      	ldr	r3, [sp, #12]
   1ad00:	009b      	lsls	r3, r3, #2
   1ad02:	9a01      	ldr	r2, [sp, #4]
   1ad04:	4413      	add	r3, r2
   1ad06:	9a02      	ldr	r2, [sp, #8]
   1ad08:	7812      	ldrb	r2, [r2, #0]
   1ad0a:	0611      	lsls	r1, r2, #24
   1ad0c:	9a02      	ldr	r2, [sp, #8]
   1ad0e:	3201      	adds	r2, #1
   1ad10:	7812      	ldrb	r2, [r2, #0]
   1ad12:	0412      	lsls	r2, r2, #16
   1ad14:	4311      	orrs	r1, r2
                    ((uint32_t)digit[2] << 8) | (uint32_t)digit[3];
   1ad16:	9a02      	ldr	r2, [sp, #8]
   1ad18:	3202      	adds	r2, #2
   1ad1a:	7812      	ldrb	r2, [r2, #0]
   1ad1c:	0212      	lsls	r2, r2, #8
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1ad1e:	430a      	orrs	r2, r1
                    ((uint32_t)digit[2] << 8) | (uint32_t)digit[3];
   1ad20:	9902      	ldr	r1, [sp, #8]
   1ad22:	3103      	adds	r1, #3
   1ad24:	7809      	ldrb	r1, [r1, #0]
   1ad26:	430a      	orrs	r2, r1
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1ad28:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   1ad2a:	9b03      	ldr	r3, [sp, #12]
   1ad2c:	3301      	adds	r3, #1
   1ad2e:	9303      	str	r3, [sp, #12]
   1ad30:	9b03      	ldr	r3, [sp, #12]
   1ad32:	2b07      	cmp	r3, #7
   1ad34:	d9da      	bls.n	1acec <vli_bytesToNative+0xc>
    }
}
   1ad36:	bf00      	nop
   1ad38:	b004      	add	sp, #16
   1ad3a:	4770      	bx	lr

0001ad3c <uECC_make_key>:
    }
}

#endif /* uECC_WORD_SIZE */

int uECC_make_key(uint8_t public_key[uECC_BYTES*2], uint8_t private_key[uECC_BYTES]) {
   1ad3c:	b500      	push	{lr}
   1ad3e:	b09d      	sub	sp, #116	; 0x74
   1ad40:	9001      	str	r0, [sp, #4]
   1ad42:	9100      	str	r1, [sp, #0]
    uECC_word_t private[uECC_WORDS];
    EccPoint public;
    uECC_word_t tries;
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1ad44:	2300      	movs	r3, #0
   1ad46:	931b      	str	r3, [sp, #108]	; 0x6c
   1ad48:	e029      	b.n	1ad9e <uECC_make_key+0x62>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   1ad4a:	4b19      	ldr	r3, [pc, #100]	; (1adb0 <uECC_make_key+0x74>)
   1ad4c:	681b      	ldr	r3, [r3, #0]
   1ad4e:	aa13      	add	r2, sp, #76	; 0x4c
   1ad50:	2120      	movs	r1, #32
   1ad52:	4610      	mov	r0, r2
   1ad54:	4798      	blx	r3
   1ad56:	4603      	mov	r3, r0
   1ad58:	2b00      	cmp	r3, #0
   1ad5a:	d01d      	beq.n	1ad98 <uECC_make_key+0x5c>
                EccPoint_compute_public_key(&public, private)) {
   1ad5c:	aa13      	add	r2, sp, #76	; 0x4c
   1ad5e:	ab03      	add	r3, sp, #12
   1ad60:	4611      	mov	r1, r2
   1ad62:	4618      	mov	r0, r3
   1ad64:	f7ff ff34 	bl	1abd0 <EccPoint_compute_public_key>
   1ad68:	4603      	mov	r3, r0
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   1ad6a:	2b00      	cmp	r3, #0
   1ad6c:	d014      	beq.n	1ad98 <uECC_make_key+0x5c>
            vli_nativeToBytes(private_key, private);
   1ad6e:	ab13      	add	r3, sp, #76	; 0x4c
   1ad70:	4619      	mov	r1, r3
   1ad72:	9800      	ldr	r0, [sp, #0]
   1ad74:	f7ff ff76 	bl	1ac64 <vli_nativeToBytes>
            vli_nativeToBytes(public_key, public.x);
   1ad78:	ab03      	add	r3, sp, #12
   1ad7a:	4619      	mov	r1, r3
   1ad7c:	9801      	ldr	r0, [sp, #4]
   1ad7e:	f7ff ff71 	bl	1ac64 <vli_nativeToBytes>
            vli_nativeToBytes(public_key + uECC_BYTES, public.y);
   1ad82:	9b01      	ldr	r3, [sp, #4]
   1ad84:	f103 0220 	add.w	r2, r3, #32
   1ad88:	ab03      	add	r3, sp, #12
   1ad8a:	3320      	adds	r3, #32
   1ad8c:	4619      	mov	r1, r3
   1ad8e:	4610      	mov	r0, r2
   1ad90:	f7ff ff68 	bl	1ac64 <vli_nativeToBytes>
            return 1;
   1ad94:	2301      	movs	r3, #1
   1ad96:	e006      	b.n	1ada6 <uECC_make_key+0x6a>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1ad98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ad9a:	3301      	adds	r3, #1
   1ad9c:	931b      	str	r3, [sp, #108]	; 0x6c
   1ad9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ada0:	2b3f      	cmp	r3, #63	; 0x3f
   1ada2:	d9d2      	bls.n	1ad4a <uECC_make_key+0xe>
        }
    }
    return 0;
   1ada4:	2300      	movs	r3, #0
}
   1ada6:	4618      	mov	r0, r3
   1ada8:	b01d      	add	sp, #116	; 0x74
   1adaa:	f85d fb04 	ldr.w	pc, [sp], #4
   1adae:	bf00      	nop
   1adb0:	10002b9c 	.word	0x10002b9c

0001adb4 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t public_key[uECC_BYTES*2],
                       const uint8_t private_key[uECC_BYTES],
                       uint8_t secret[uECC_BYTES]) {
   1adb4:	b500      	push	{lr}
   1adb6:	b0c5      	sub	sp, #276	; 0x114
   1adb8:	9005      	str	r0, [sp, #20]
   1adba:	ab04      	add	r3, sp, #16
   1adbc:	6019      	str	r1, [r3, #0]
   1adbe:	ab03      	add	r3, sp, #12
   1adc0:	601a      	str	r2, [r3, #0]
    EccPoint public;
    EccPoint product;
    uECC_word_t private[uECC_WORDS];
    uECC_word_t random[uECC_WORDS];
    uECC_word_t *initial_Z = 0;
   1adc2:	2300      	movs	r3, #0
   1adc4:	9343      	str	r3, [sp, #268]	; 0x10c
    uECC_word_t tries;
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp[uECC_WORDS];
    uECC_word_t *p2[2] = {private, tmp};
   1adc6:	ab19      	add	r3, sp, #100	; 0x64
   1adc8:	9307      	str	r3, [sp, #28]
   1adca:	ab09      	add	r3, sp, #36	; 0x24
   1adcc:	9308      	str	r3, [sp, #32]
#endif

    // Try to get a random initial Z value to improve protection against side-channel
    // attacks. If the RNG fails every time (eg it was not defined), we continue so that
    // uECC_shared_secret() can still work without an RNG defined.
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1adce:	2300      	movs	r3, #0
   1add0:	9342      	str	r3, [sp, #264]	; 0x108
   1add2:	e015      	b.n	1ae00 <uECC_shared_secret+0x4c>
        if (g_rng_function((uint8_t *)random, sizeof(random)) && !vli_isZero(random)) {
   1add4:	4b30      	ldr	r3, [pc, #192]	; (1ae98 <uECC_shared_secret+0xe4>)
   1add6:	681b      	ldr	r3, [r3, #0]
   1add8:	aa11      	add	r2, sp, #68	; 0x44
   1adda:	2120      	movs	r1, #32
   1addc:	4610      	mov	r0, r2
   1adde:	4798      	blx	r3
   1ade0:	4603      	mov	r3, r0
   1ade2:	2b00      	cmp	r3, #0
   1ade4:	d009      	beq.n	1adfa <uECC_shared_secret+0x46>
   1ade6:	ab11      	add	r3, sp, #68	; 0x44
   1ade8:	4618      	mov	r0, r3
   1adea:	f7ff f90a 	bl	1a002 <vli_isZero>
   1adee:	4603      	mov	r3, r0
   1adf0:	2b00      	cmp	r3, #0
   1adf2:	d102      	bne.n	1adfa <uECC_shared_secret+0x46>
            initial_Z = random;
   1adf4:	ab11      	add	r3, sp, #68	; 0x44
   1adf6:	9343      	str	r3, [sp, #268]	; 0x10c
            break;
   1adf8:	e005      	b.n	1ae06 <uECC_shared_secret+0x52>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1adfa:	9b42      	ldr	r3, [sp, #264]	; 0x108
   1adfc:	3301      	adds	r3, #1
   1adfe:	9342      	str	r3, [sp, #264]	; 0x108
   1ae00:	9b42      	ldr	r3, [sp, #264]	; 0x108
   1ae02:	2b3f      	cmp	r3, #63	; 0x3f
   1ae04:	d9e6      	bls.n	1add4 <uECC_shared_secret+0x20>
        }
    }

    vli_bytesToNative(private, private_key);
   1ae06:	ab04      	add	r3, sp, #16
   1ae08:	aa19      	add	r2, sp, #100	; 0x64
   1ae0a:	6819      	ldr	r1, [r3, #0]
   1ae0c:	4610      	mov	r0, r2
   1ae0e:	f7ff ff67 	bl	1ace0 <vli_bytesToNative>
    vli_bytesToNative(public.x, public_key);
   1ae12:	ab31      	add	r3, sp, #196	; 0xc4
   1ae14:	9905      	ldr	r1, [sp, #20]
   1ae16:	4618      	mov	r0, r3
   1ae18:	f7ff ff62 	bl	1ace0 <vli_bytesToNative>
    vli_bytesToNative(public.y, public_key + uECC_BYTES);
   1ae1c:	9b05      	ldr	r3, [sp, #20]
   1ae1e:	f103 0220 	add.w	r2, r3, #32
   1ae22:	ab31      	add	r3, sp, #196	; 0xc4
   1ae24:	3320      	adds	r3, #32
   1ae26:	4611      	mov	r1, r2
   1ae28:	4618      	mov	r0, r3
   1ae2a:	f7ff ff59 	bl	1ace0 <vli_bytesToNative>
    // Don't regularize the bitcount for secp160r1.
    EccPoint_mult(&product, &public, private, initial_Z, vli_numBits(private, uECC_WORDS));
#else
    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(private, private, curve_n);
   1ae2e:	a919      	add	r1, sp, #100	; 0x64
   1ae30:	ab19      	add	r3, sp, #100	; 0x64
   1ae32:	4a1a      	ldr	r2, [pc, #104]	; (1ae9c <uECC_shared_secret+0xe8>)
   1ae34:	4618      	mov	r0, r3
   1ae36:	f7fe fbb9 	bl	195ac <vli_add>
   1ae3a:	9041      	str	r0, [sp, #260]	; 0x104
    vli_add(tmp, private, curve_n);
   1ae3c:	a919      	add	r1, sp, #100	; 0x64
   1ae3e:	ab09      	add	r3, sp, #36	; 0x24
   1ae40:	4a16      	ldr	r2, [pc, #88]	; (1ae9c <uECC_shared_secret+0xe8>)
   1ae42:	4618      	mov	r0, r3
   1ae44:	f7fe fbb2 	bl	195ac <vli_add>
    EccPoint_mult(&product, &public, p2[!carry], initial_Z, (uECC_BYTES * 8) + 1);
   1ae48:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1ae4a:	2b00      	cmp	r3, #0
   1ae4c:	bf0c      	ite	eq
   1ae4e:	2301      	moveq	r3, #1
   1ae50:	2300      	movne	r3, #0
   1ae52:	b2db      	uxtb	r3, r3
   1ae54:	009b      	lsls	r3, r3, #2
   1ae56:	aa44      	add	r2, sp, #272	; 0x110
   1ae58:	4413      	add	r3, r2
   1ae5a:	f853 2cf4 	ldr.w	r2, [r3, #-244]
   1ae5e:	a931      	add	r1, sp, #196	; 0xc4
   1ae60:	a821      	add	r0, sp, #132	; 0x84
   1ae62:	f240 1301 	movw	r3, #257	; 0x101
   1ae66:	9300      	str	r3, [sp, #0]
   1ae68:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   1ae6a:	f7ff fdc7 	bl	1a9fc <EccPoint_mult>
#endif

    vli_nativeToBytes(secret, product.x);
   1ae6e:	aa21      	add	r2, sp, #132	; 0x84
   1ae70:	ab03      	add	r3, sp, #12
   1ae72:	4611      	mov	r1, r2
   1ae74:	6818      	ldr	r0, [r3, #0]
   1ae76:	f7ff fef5 	bl	1ac64 <vli_nativeToBytes>
    return !EccPoint_isZero(&product);
   1ae7a:	ab21      	add	r3, sp, #132	; 0x84
   1ae7c:	4618      	mov	r0, r3
   1ae7e:	f7ff fbd5 	bl	1a62c <EccPoint_isZero>
   1ae82:	4603      	mov	r3, r0
   1ae84:	2b00      	cmp	r3, #0
   1ae86:	bf0c      	ite	eq
   1ae88:	2301      	moveq	r3, #1
   1ae8a:	2300      	movne	r3, #0
   1ae8c:	b2db      	uxtb	r3, r3
}
   1ae8e:	4618      	mov	r0, r3
   1ae90:	b045      	add	sp, #276	; 0x114
   1ae92:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae96:	bf00      	nop
   1ae98:	10002b9c 	.word	0x10002b9c
   1ae9c:	00029a58 	.word	0x00029a58

0001aea0 <curve_x_side>:
    }
    compressed[0] = 2 + (public_key[uECC_BYTES * 2 - 1] & 0x01);
}

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void curve_x_side(uECC_word_t * RESTRICT result, const uECC_word_t * RESTRICT x) {
   1aea0:	b500      	push	{lr}
   1aea2:	b08b      	sub	sp, #44	; 0x2c
   1aea4:	9001      	str	r0, [sp, #4]
   1aea6:	9100      	str	r1, [sp, #0]
#if (uECC_CURVE == uECC_secp256k1)
    vli_modSquare_fast(result, x); /* r = x^2 */
    vli_modMult_fast(result, result, x); /* r = x^3 */
    vli_modAdd(result, result, curve_b, curve_p); /* r = x^3 + b */
#else
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   1aea8:	ab02      	add	r3, sp, #8
   1aeaa:	2220      	movs	r2, #32
   1aeac:	2100      	movs	r1, #0
   1aeae:	4618      	mov	r0, r3
   1aeb0:	f7f1 f9f0 	bl	c294 <memset>
   1aeb4:	2303      	movs	r3, #3
   1aeb6:	9302      	str	r3, [sp, #8]

    vli_modSquare_fast(result, x); /* r = x^2 */
   1aeb8:	9900      	ldr	r1, [sp, #0]
   1aeba:	9801      	ldr	r0, [sp, #4]
   1aebc:	f7ff fab8 	bl	1a430 <vli_modSquare_fast>
    vli_modSub_fast(result, result, _3); /* r = x^2 - 3 */
   1aec0:	aa02      	add	r2, sp, #8
   1aec2:	4b0a      	ldr	r3, [pc, #40]	; (1aeec <curve_x_side+0x4c>)
   1aec4:	9901      	ldr	r1, [sp, #4]
   1aec6:	9801      	ldr	r0, [sp, #4]
   1aec8:	f7ff f94a 	bl	1a160 <vli_modSub>
    vli_modMult_fast(result, result, x); /* r = x^3 - 3x */
   1aecc:	9a00      	ldr	r2, [sp, #0]
   1aece:	9901      	ldr	r1, [sp, #4]
   1aed0:	9801      	ldr	r0, [sp, #4]
   1aed2:	f7ff fa99 	bl	1a408 <vli_modMult_fast>
    vli_modAdd(result, result, curve_b, curve_p); /* r = x^3 - 3x + b */
   1aed6:	4b05      	ldr	r3, [pc, #20]	; (1aeec <curve_x_side+0x4c>)
   1aed8:	4a05      	ldr	r2, [pc, #20]	; (1aef0 <curve_x_side+0x50>)
   1aeda:	9901      	ldr	r1, [sp, #4]
   1aedc:	9801      	ldr	r0, [sp, #4]
   1aede:	f7ff f920 	bl	1a122 <vli_modAdd>
#endif
}
   1aee2:	bf00      	nop
   1aee4:	b00b      	add	sp, #44	; 0x2c
   1aee6:	f85d fb04 	ldr.w	pc, [sp], #4
   1aeea:	bf00      	nop
   1aeec:	000299d8 	.word	0x000299d8
   1aef0:	000299f8 	.word	0x000299f8

0001aef4 <uECC_valid_public_key>:

    vli_nativeToBytes(public_key, point.x);
    vli_nativeToBytes(public_key + uECC_BYTES, point.y);
}

int uECC_valid_public_key(const uint8_t public_key[uECC_BYTES*2]) {
   1aef4:	b500      	push	{lr}
   1aef6:	b0a3      	sub	sp, #140	; 0x8c
   1aef8:	9001      	str	r0, [sp, #4]
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    EccPoint public;

    vli_bytesToNative(public.x, public_key);
   1aefa:	ab02      	add	r3, sp, #8
   1aefc:	9901      	ldr	r1, [sp, #4]
   1aefe:	4618      	mov	r0, r3
   1af00:	f7ff feee 	bl	1ace0 <vli_bytesToNative>
    vli_bytesToNative(public.y, public_key + uECC_BYTES);
   1af04:	9b01      	ldr	r3, [sp, #4]
   1af06:	f103 0220 	add.w	r2, r3, #32
   1af0a:	ab02      	add	r3, sp, #8
   1af0c:	3320      	adds	r3, #32
   1af0e:	4611      	mov	r1, r2
   1af10:	4618      	mov	r0, r3
   1af12:	f7ff fee5 	bl	1ace0 <vli_bytesToNative>

    // The point at infinity is invalid.
    if (EccPoint_isZero(&public)) {
   1af16:	ab02      	add	r3, sp, #8
   1af18:	4618      	mov	r0, r3
   1af1a:	f7ff fb87 	bl	1a62c <EccPoint_isZero>
   1af1e:	4603      	mov	r3, r0
   1af20:	2b00      	cmp	r3, #0
   1af22:	d001      	beq.n	1af28 <uECC_valid_public_key+0x34>
        return 0;
   1af24:	2300      	movs	r3, #0
   1af26:	e02c      	b.n	1af82 <uECC_valid_public_key+0x8e>
    }

    // x and y must be smaller than p.
    if (vli_cmp(curve_p, public.x) != 1 || vli_cmp(curve_p, public.y) != 1) {
   1af28:	ab02      	add	r3, sp, #8
   1af2a:	4619      	mov	r1, r3
   1af2c:	4817      	ldr	r0, [pc, #92]	; (1af8c <uECC_valid_public_key+0x98>)
   1af2e:	f7ff f8ac 	bl	1a08a <vli_cmp>
   1af32:	4603      	mov	r3, r0
   1af34:	2b01      	cmp	r3, #1
   1af36:	d108      	bne.n	1af4a <uECC_valid_public_key+0x56>
   1af38:	ab02      	add	r3, sp, #8
   1af3a:	3320      	adds	r3, #32
   1af3c:	4619      	mov	r1, r3
   1af3e:	4813      	ldr	r0, [pc, #76]	; (1af8c <uECC_valid_public_key+0x98>)
   1af40:	f7ff f8a3 	bl	1a08a <vli_cmp>
   1af44:	4603      	mov	r3, r0
   1af46:	2b01      	cmp	r3, #1
   1af48:	d001      	beq.n	1af4e <uECC_valid_public_key+0x5a>
        return 0;
   1af4a:	2300      	movs	r3, #0
   1af4c:	e019      	b.n	1af82 <uECC_valid_public_key+0x8e>
    }

    vli_modSquare_fast(tmp1, public.y); /* tmp1 = y^2 */
   1af4e:	ab02      	add	r3, sp, #8
   1af50:	f103 0220 	add.w	r2, r3, #32
   1af54:	ab1a      	add	r3, sp, #104	; 0x68
   1af56:	4611      	mov	r1, r2
   1af58:	4618      	mov	r0, r3
   1af5a:	f7ff fa69 	bl	1a430 <vli_modSquare_fast>
    curve_x_side(tmp2, public.x); /* tmp2 = x^3 + ax + b */
   1af5e:	aa02      	add	r2, sp, #8
   1af60:	ab12      	add	r3, sp, #72	; 0x48
   1af62:	4611      	mov	r1, r2
   1af64:	4618      	mov	r0, r3
   1af66:	f7ff ff9b 	bl	1aea0 <curve_x_side>

    /* Make sure that y^2 == x^3 + ax + b */
    return (vli_cmp(tmp1, tmp2) == 0);
   1af6a:	aa12      	add	r2, sp, #72	; 0x48
   1af6c:	ab1a      	add	r3, sp, #104	; 0x68
   1af6e:	4611      	mov	r1, r2
   1af70:	4618      	mov	r0, r3
   1af72:	f7ff f88a 	bl	1a08a <vli_cmp>
   1af76:	4603      	mov	r3, r0
   1af78:	2b00      	cmp	r3, #0
   1af7a:	bf0c      	ite	eq
   1af7c:	2301      	moveq	r3, #1
   1af7e:	2300      	movne	r3, #0
   1af80:	b2db      	uxtb	r3, r3
}
   1af82:	4618      	mov	r0, r3
   1af84:	b023      	add	sp, #140	; 0x8c
   1af86:	f85d fb04 	ldr.w	pc, [sp], #4
   1af8a:	bf00      	nop
   1af8c:	000299d8 	.word	0x000299d8

0001af90 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
   1af90:	b508      	push	{r3, lr}
    //
    // Configure the system clock to run at 24 MHz
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   1af92:	2100      	movs	r1, #0
   1af94:	2000      	movs	r0, #0
   1af96:	f00b fd4b 	bl	26a30 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   1af9a:	480b      	ldr	r0, [pc, #44]	; (1afc8 <main+0x38>)
   1af9c:	f00b fba0 	bl	266e0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   1afa0:	f00b fbc2 	bl	26728 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
   1afa4:	f00c fb7c 	bl	276a0 <am_bsp_low_power_init>

    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   1afa8:	f00c fb34 	bl	27614 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   1afac:	2001      	movs	r0, #1
   1afae:	f00c fb39 	bl	27624 <am_hal_sysctrl_fpu_stacking_enable>

#ifdef AM_DEBUG_PRINTF
    //
    // Initialize the printf interface for UART output.
    //
    am_bsp_uart_printf_enable();
   1afb2:	f00c fb9d 	bl	276f0 <am_bsp_uart_printf_enable>

    //
    // clear.
    //
    am_util_stdio_terminal_clear();
   1afb6:	f006 fb29 	bl	2160c <am_util_stdio_terminal_clear>
#endif

    //
    // Print the banner.
    //
    am_util_stdio_printf("Hello World, DATS here!\n\n");
   1afba:	4804      	ldr	r0, [pc, #16]	; (1afcc <main+0x3c>)
   1afbc:	f006 fb06 	bl	215cc <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
   1afc0:	f000 f968 	bl	1b294 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   1afc4:	e7fe      	b.n	1afc4 <main+0x34>
   1afc6:	bf00      	nop
   1afc8:	0002b870 	.word	0x0002b870
   1afcc:	00028b58 	.word	0x00028b58

0001afd0 <__NVIC_SetPriority>:
{
   1afd0:	b082      	sub	sp, #8
   1afd2:	4603      	mov	r3, r0
   1afd4:	9100      	str	r1, [sp, #0]
   1afd6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   1afda:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1afde:	2b00      	cmp	r3, #0
   1afe0:	db0a      	blt.n	1aff8 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1afe2:	490d      	ldr	r1, [pc, #52]	; (1b018 <__NVIC_SetPriority+0x48>)
   1afe4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1afe8:	9a00      	ldr	r2, [sp, #0]
   1afea:	b2d2      	uxtb	r2, r2
   1afec:	0152      	lsls	r2, r2, #5
   1afee:	b2d2      	uxtb	r2, r2
   1aff0:	440b      	add	r3, r1
   1aff2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   1aff6:	e00b      	b.n	1b010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aff8:	4908      	ldr	r1, [pc, #32]	; (1b01c <__NVIC_SetPriority+0x4c>)
   1affa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1affe:	f003 030f 	and.w	r3, r3, #15
   1b002:	3b04      	subs	r3, #4
   1b004:	9a00      	ldr	r2, [sp, #0]
   1b006:	b2d2      	uxtb	r2, r2
   1b008:	0152      	lsls	r2, r2, #5
   1b00a:	b2d2      	uxtb	r2, r2
   1b00c:	440b      	add	r3, r1
   1b00e:	761a      	strb	r2, [r3, #24]
}
   1b010:	bf00      	nop
   1b012:	b002      	add	sp, #8
   1b014:	4770      	bx	lr
   1b016:	bf00      	nop
   1b018:	e000e100 	.word	0xe000e100
   1b01c:	e000ed00 	.word	0xe000ed00

0001b020 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   1b020:	b500      	push	{lr}
   1b022:	b083      	sub	sp, #12
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    WsfOsInit();
   1b024:	f7fd fb7e 	bl	18724 <WsfOsInit>
    WsfTimerInit();
   1b028:	f7fd fd7e 	bl	18b28 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   1b02c:	4b4d      	ldr	r3, [pc, #308]	; (1b164 <exactle_stack_init+0x144>)
   1b02e:	2204      	movs	r2, #4
   1b030:	494d      	ldr	r1, [pc, #308]	; (1b168 <exactle_stack_init+0x148>)
   1b032:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   1b036:	f7fd f8cb 	bl	181d0 <WsfBufInit>
   1b03a:	4603      	mov	r3, r0
   1b03c:	f8ad 3006 	strh.w	r3, [sp, #6]
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   1b040:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b044:	f5b3 6f38 	cmp.w	r3, #2944	; 0xb80
   1b048:	d907      	bls.n	1b05a <exactle_stack_init+0x3a>
    {
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   1b04a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b04e:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
   1b052:	4619      	mov	r1, r3
   1b054:	4845      	ldr	r0, [pc, #276]	; (1b16c <exactle_stack_init+0x14c>)
   1b056:	f006 fab9 	bl	215cc <am_util_stdio_printf>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   1b05a:	f7f8 f8e3 	bl	13224 <SecInit>
    SecAesInit();
   1b05e:	f7f7 fe79 	bl	12d54 <SecAesInit>
    SecCmacInit();
   1b062:	f7f8 f845 	bl	130f0 <SecCmacInit>
    SecEccInit();
   1b066:	f001 fe09 	bl	1cc7c <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   1b06a:	4841      	ldr	r0, [pc, #260]	; (1b170 <exactle_stack_init+0x150>)
   1b06c:	f7fd fb40 	bl	186f0 <WsfOsSetNextHandler>
   1b070:	4603      	mov	r3, r0
   1b072:	f88d 3005 	strb.w	r3, [sp, #5]
    HciHandlerInit(handlerId);
   1b076:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b07a:	4618      	mov	r0, r3
   1b07c:	f001 fd44 	bl	1cb08 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   1b080:	483c      	ldr	r0, [pc, #240]	; (1b174 <exactle_stack_init+0x154>)
   1b082:	f7fd fb35 	bl	186f0 <WsfOsSetNextHandler>
   1b086:	4603      	mov	r3, r0
   1b088:	f88d 3005 	strb.w	r3, [sp, #5]
    DmDevVsInit(0);
   1b08c:	2000      	movs	r0, #0
   1b08e:	f7f6 fecf 	bl	11e30 <DmDevVsInit>
    DmAdvInit();
   1b092:	f7f5 fc97 	bl	109c4 <DmAdvInit>
    DmConnInit();
   1b096:	f7f6 f9fd 	bl	11494 <DmConnInit>
    DmConnSlaveInit();
   1b09a:	f7f6 fd6d 	bl	11b78 <DmConnSlaveInit>
    DmSecInit();
   1b09e:	f7f7 fbd1 	bl	12844 <DmSecInit>
    DmSecLescInit();
   1b0a2:	f7f7 fd39 	bl	12b18 <DmSecLescInit>
    DmPrivInit();
   1b0a6:	f7f7 f9d3 	bl	12450 <DmPrivInit>
    DmHandlerInit(handlerId);
   1b0aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b0ae:	4618      	mov	r0, r3
   1b0b0:	f7f6 ff2e 	bl	11f10 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   1b0b4:	4830      	ldr	r0, [pc, #192]	; (1b178 <exactle_stack_init+0x158>)
   1b0b6:	f7fd fb1b 	bl	186f0 <WsfOsSetNextHandler>
   1b0ba:	4603      	mov	r3, r0
   1b0bc:	f88d 3005 	strb.w	r3, [sp, #5]
    L2cSlaveHandlerInit(handlerId);
   1b0c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b0c4:	4618      	mov	r0, r3
   1b0c6:	f000 fd97 	bl	1bbf8 <L2cSlaveHandlerInit>
    L2cInit();
   1b0ca:	f000 fb81 	bl	1b7d0 <L2cInit>
    L2cSlaveInit();
   1b0ce:	f000 fcd7 	bl	1ba80 <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   1b0d2:	482a      	ldr	r0, [pc, #168]	; (1b17c <exactle_stack_init+0x15c>)
   1b0d4:	f7fd fb0c 	bl	186f0 <WsfOsSetNextHandler>
   1b0d8:	4603      	mov	r3, r0
   1b0da:	f88d 3005 	strb.w	r3, [sp, #5]
    AttHandlerInit(handlerId);
   1b0de:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b0e2:	4618      	mov	r0, r3
   1b0e4:	f7fc fc62 	bl	179ac <AttHandlerInit>
    AttsInit();
   1b0e8:	f7fa fc18 	bl	1591c <AttsInit>
    AttsIndInit();
   1b0ec:	f7fa f922 	bl	15334 <AttsIndInit>
    AttcInit();
   1b0f0:	f7f8 fdb4 	bl	13c5c <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   1b0f4:	4822      	ldr	r0, [pc, #136]	; (1b180 <exactle_stack_init+0x160>)
   1b0f6:	f7fd fafb 	bl	186f0 <WsfOsSetNextHandler>
   1b0fa:	4603      	mov	r3, r0
   1b0fc:	f88d 3005 	strb.w	r3, [sp, #5]
    SmpHandlerInit(handlerId);
   1b100:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b104:	4618      	mov	r0, r3
   1b106:	f7f3 fc1d 	bl	e944 <SmpHandlerInit>
    SmprInit();
   1b10a:	f7f1 ff53 	bl	cfb4 <SmprInit>
    SmprScInit();
   1b10e:	f7f1 ff43 	bl	cf98 <SmprScInit>
    HciSetMaxRxAclLen(251);
   1b112:	20fb      	movs	r0, #251	; 0xfb
   1b114:	f003 f87e 	bl	1e214 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   1b118:	481a      	ldr	r0, [pc, #104]	; (1b184 <exactle_stack_init+0x164>)
   1b11a:	f7fd fae9 	bl	186f0 <WsfOsSetNextHandler>
   1b11e:	4603      	mov	r3, r0
   1b120:	f88d 3005 	strb.w	r3, [sp, #5]
    AppHandlerInit(handlerId);
   1b124:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b128:	4618      	mov	r0, r3
   1b12a:	f008 fb19 	bl	23760 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(DatsHandler);   // service init
   1b12e:	4816      	ldr	r0, [pc, #88]	; (1b188 <exactle_stack_init+0x168>)
   1b130:	f7fd fade 	bl	186f0 <WsfOsSetNextHandler>
   1b134:	4603      	mov	r3, r0
   1b136:	f88d 3005 	strb.w	r3, [sp, #5]
    DatsHandlerInit(handlerId);
   1b13a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b13e:	4618      	mov	r0, r3
   1b140:	f001 f816 	bl	1c170 <DatsHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   1b144:	4811      	ldr	r0, [pc, #68]	; (1b18c <exactle_stack_init+0x16c>)
   1b146:	f7fd fad3 	bl	186f0 <WsfOsSetNextHandler>
   1b14a:	4603      	mov	r3, r0
   1b14c:	f88d 3005 	strb.w	r3, [sp, #5]
    HciDrvHandlerInit(handlerId);
   1b150:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b154:	4618      	mov	r0, r3
   1b156:	f7fe f881 	bl	1925c <HciDrvHandlerInit>
}
   1b15a:	bf00      	nop
   1b15c:	b003      	add	sp, #12
   1b15e:	f85d fb04 	ldr.w	pc, [sp], #4
   1b162:	bf00      	nop
   1b164:	10002ba0 	.word	0x10002ba0
   1b168:	10003700 	.word	0x10003700
   1b16c:	00028b74 	.word	0x00028b74
   1b170:	0001cb39 	.word	0x0001cb39
   1b174:	00011f45 	.word	0x00011f45
   1b178:	0001bc21 	.word	0x0001bc21
   1b17c:	000179fd 	.word	0x000179fd
   1b180:	0000e9d9 	.word	0x0000e9d9
   1b184:	00023785 	.word	0x00023785
   1b188:	0001c241 	.word	0x0001c241
   1b18c:	000192e5 	.word	0x000192e5

0001b190 <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
   1b190:	b500      	push	{lr}
   1b192:	b083      	sub	sp, #12
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   1b194:	4b06      	ldr	r3, [pc, #24]	; (1b1b0 <am_uart_isr+0x20>)
   1b196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b198:	9301      	str	r3, [sp, #4]
    UARTn(0)->IEC = ui32Status;
   1b19a:	4a05      	ldr	r2, [pc, #20]	; (1b1b0 <am_uart_isr+0x20>)
   1b19c:	9b01      	ldr	r3, [sp, #4]
   1b19e:	6453      	str	r3, [r2, #68]	; 0x44
    //
    //HciDrvUartISR(ui32Status);

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1b1a0:	2100      	movs	r1, #0
   1b1a2:	2000      	movs	r0, #0
   1b1a4:	f7fd fa7a 	bl	1869c <WsfTaskSetReady>
}
   1b1a8:	bf00      	nop
   1b1aa:	b003      	add	sp, #12
   1b1ac:	f85d fb04 	ldr.w	pc, [sp], #4
   1b1b0:	4001c000 	.word	0x4001c000

0001b1b4 <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   1b1b4:	b508      	push	{r3, lr}

    HciDrvIntService();
   1b1b6:	f7fe f871 	bl	1929c <HciDrvIntService>

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1b1ba:	2100      	movs	r1, #0
   1b1bc:	2000      	movs	r0, #0
   1b1be:	f7fd fa6d 	bl	1869c <WsfTaskSetReady>
}
   1b1c2:	bf00      	nop
   1b1c4:	bd08      	pop	{r3, pc}
	...

0001b1c8 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   1b1c8:	b508      	push	{r3, lr}
    am_util_debug_printf("RadioTask: setup\r\n");
   1b1ca:	4806      	ldr	r0, [pc, #24]	; (1b1e4 <RadioTaskSetup+0x1c>)
   1b1cc:	f006 f9fe 	bl	215cc <am_util_stdio_printf>

    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   1b1d0:	2104      	movs	r1, #4
   1b1d2:	200c      	movs	r0, #12
   1b1d4:	f7ff fefc 	bl	1afd0 <__NVIC_SetPriority>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   1b1d8:	2001      	movs	r0, #1
   1b1da:	f7fd fe9f 	bl	18f1c <HciDrvRadioBoot>
}
   1b1de:	bf00      	nop
   1b1e0:	bd08      	pop	{r3, pc}
   1b1e2:	bf00      	nop
   1b1e4:	00028b98 	.word	0x00028b98

0001b1e8 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   1b1e8:	b500      	push	{lr}
   1b1ea:	b083      	sub	sp, #12
   1b1ec:	9001      	str	r0, [sp, #4]
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   1b1ee:	4805      	ldr	r0, [pc, #20]	; (1b204 <RadioTask+0x1c>)
   1b1f0:	f006 f9ec 	bl	215cc <am_util_stdio_printf>
#endif

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   1b1f4:	f7ff ff14 	bl	1b020 <exactle_stack_init>

    //
    // Start the "Amdtp" profile.
    //
    DatsStart();
   1b1f8:	f001 f848 	bl	1c28c <DatsStart>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        wsfOsDispatcher();
   1b1fc:	f7fd faa8 	bl	18750 <wsfOsDispatcher>
   1b200:	e7fc      	b.n	1b1fc <RadioTask+0x14>
   1b202:	bf00      	nop
   1b204:	00028bac 	.word	0x00028bac

0001b208 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   1b208:	b500      	push	{lr}
   1b20a:	b083      	sub	sp, #12
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
   1b20c:	2000      	movs	r0, #0
   1b20e:	f00b fcf3 	bl	26bf8 <am_hal_ctimer_int_status_get>
   1b212:	9001      	str	r0, [sp, #4]
    am_hal_ctimer_int_clear(ui32Status);
   1b214:	9801      	ldr	r0, [sp, #4]
   1b216:	f00b fcdd 	bl	26bd4 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   1b21a:	9801      	ldr	r0, [sp, #4]
   1b21c:	f00b fcc2 	bl	26ba4 <am_hal_ctimer_int_service>
}
   1b220:	bf00      	nop
   1b222:	b003      	add	sp, #12
   1b224:	f85d fb04 	ldr.w	pc, [sp], #4

0001b228 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
   1b228:	b500      	push	{lr}
   1b22a:	b083      	sub	sp, #12
   1b22c:	9001      	str	r0, [sp, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   1b22e:	2001      	movs	r0, #1
   1b230:	f00c f9b8 	bl	275a4 <am_hal_sysctrl_sleep>
    return 0;
   1b234:	2300      	movs	r3, #0
}
   1b236:	4618      	mov	r0, r3
   1b238:	b003      	add	sp, #12
   1b23a:	f85d fb04 	ldr.w	pc, [sp], #4

0001b23e <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
   1b23e:	b082      	sub	sp, #8
   1b240:	9001      	str	r0, [sp, #4]
    return;
   1b242:	bf00      	nop
}
   1b244:	b002      	add	sp, #8
   1b246:	4770      	bx	lr

0001b248 <vApplicationMallocFailedHook>:
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
   1b248:	e7fe      	b.n	1b248 <vApplicationMallocFailedHook>

0001b24a <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   1b24a:	b082      	sub	sp, #8
   1b24c:	9001      	str	r0, [sp, #4]
   1b24e:	9100      	str	r1, [sp, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   1b250:	be00      	bkpt	0x0000
   1b252:	e7fd      	b.n	1b250 <vApplicationStackOverflowHook+0x6>

0001b254 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   1b254:	b500      	push	{lr}
   1b256:	b085      	sub	sp, #20
   1b258:	9003      	str	r0, [sp, #12]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   1b25a:	480a      	ldr	r0, [pc, #40]	; (1b284 <setup_task+0x30>)
   1b25c:	f006 f9b6 	bl	215cc <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   1b260:	f7ff ffb2 	bl	1b1c8 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   1b264:	4b08      	ldr	r3, [pc, #32]	; (1b288 <setup_task+0x34>)
   1b266:	9301      	str	r3, [sp, #4]
   1b268:	2303      	movs	r3, #3
   1b26a:	9300      	str	r3, [sp, #0]
   1b26c:	2300      	movs	r3, #0
   1b26e:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b272:	4906      	ldr	r1, [pc, #24]	; (1b28c <setup_task+0x38>)
   1b274:	4806      	ldr	r0, [pc, #24]	; (1b290 <setup_task+0x3c>)
   1b276:	f007 f8a5 	bl	223c4 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   1b27a:	2000      	movs	r0, #0
   1b27c:	f007 f9ca 	bl	22614 <vTaskSuspend>

    while (1);
   1b280:	e7fe      	b.n	1b280 <setup_task+0x2c>
   1b282:	bf00      	nop
   1b284:	00028bc8 	.word	0x00028bc8
   1b288:	10009634 	.word	0x10009634
   1b28c:	00028be4 	.word	0x00028be4
   1b290:	0001b1e9 	.word	0x0001b1e9

0001b294 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   1b294:	b500      	push	{lr}
   1b296:	b083      	sub	sp, #12
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   1b298:	4b08      	ldr	r3, [pc, #32]	; (1b2bc <run_tasks+0x28>)
   1b29a:	9301      	str	r3, [sp, #4]
   1b29c:	2303      	movs	r3, #3
   1b29e:	9300      	str	r3, [sp, #0]
   1b2a0:	2300      	movs	r3, #0
   1b2a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b2a6:	4906      	ldr	r1, [pc, #24]	; (1b2c0 <run_tasks+0x2c>)
   1b2a8:	4806      	ldr	r0, [pc, #24]	; (1b2c4 <run_tasks+0x30>)
   1b2aa:	f007 f88b 	bl	223c4 <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
   1b2ae:	f007 fa1b 	bl	226e8 <vTaskStartScheduler>
}
   1b2b2:	bf00      	nop
   1b2b4:	b003      	add	sp, #12
   1b2b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1b2ba:	bf00      	nop
   1b2bc:	10009638 	.word	0x10009638
   1b2c0:	00028bf0 	.word	0x00028bf0
   1b2c4:	0001b255 	.word	0x0001b255

0001b2c8 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   1b2c8:	b500      	push	{lr}
   1b2ca:	b083      	sub	sp, #12
   1b2cc:	9001      	str	r0, [sp, #4]
   1b2ce:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   1b2d0:	2206      	movs	r2, #6
   1b2d2:	9900      	ldr	r1, [sp, #0]
   1b2d4:	9801      	ldr	r0, [sp, #4]
   1b2d6:	f7f0 ff43 	bl	c160 <memcpy>
}
   1b2da:	bf00      	nop
   1b2dc:	b003      	add	sp, #12
   1b2de:	f85d fb04 	ldr.w	pc, [sp], #4

0001b2e2 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   1b2e2:	b500      	push	{lr}
   1b2e4:	b083      	sub	sp, #12
   1b2e6:	9001      	str	r0, [sp, #4]
   1b2e8:	9100      	str	r1, [sp, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   1b2ea:	2206      	movs	r2, #6
   1b2ec:	9900      	ldr	r1, [sp, #0]
   1b2ee:	9801      	ldr	r0, [sp, #4]
   1b2f0:	f7f0 ff06 	bl	c100 <memcmp>
   1b2f4:	4603      	mov	r3, r0
   1b2f6:	2b00      	cmp	r3, #0
   1b2f8:	bf0c      	ite	eq
   1b2fa:	2301      	moveq	r3, #1
   1b2fc:	2300      	movne	r3, #0
   1b2fe:	b2db      	uxtb	r3, r3
}
   1b300:	4618      	mov	r0, r3
   1b302:	b003      	add	sp, #12
   1b304:	f85d fb04 	ldr.w	pc, [sp], #4

0001b308 <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   1b308:	b500      	push	{lr}
   1b30a:	b083      	sub	sp, #12
   1b30c:	9001      	str	r0, [sp, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   1b30e:	2206      	movs	r2, #6
   1b310:	2100      	movs	r1, #0
   1b312:	9801      	ldr	r0, [sp, #4]
   1b314:	f7f0 ffbe 	bl	c294 <memset>

  return (pDst + BDA_ADDR_LEN);
   1b318:	9b01      	ldr	r3, [sp, #4]
   1b31a:	3306      	adds	r3, #6
}
   1b31c:	4618      	mov	r0, r3
   1b31e:	b003      	add	sp, #12
   1b320:	f85d fb04 	ldr.w	pc, [sp], #4

0001b324 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   1b324:	b500      	push	{lr}
   1b326:	b085      	sub	sp, #20
   1b328:	9001      	str	r0, [sp, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   1b32a:	ab02      	add	r3, sp, #8
   1b32c:	2200      	movs	r2, #0
   1b32e:	601a      	str	r2, [r3, #0]
   1b330:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   1b332:	ab02      	add	r3, sp, #8
   1b334:	2206      	movs	r2, #6
   1b336:	4619      	mov	r1, r3
   1b338:	9801      	ldr	r0, [sp, #4]
   1b33a:	f7f0 fee1 	bl	c100 <memcmp>
   1b33e:	4603      	mov	r3, r0
   1b340:	2b00      	cmp	r3, #0
   1b342:	bf0c      	ite	eq
   1b344:	2301      	moveq	r3, #1
   1b346:	2300      	movne	r3, #0
   1b348:	b2db      	uxtb	r3, r3
}
   1b34a:	4618      	mov	r0, r3
   1b34c:	b005      	add	sp, #20
   1b34e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b352 <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   1b352:	b500      	push	{lr}
   1b354:	b083      	sub	sp, #12
   1b356:	9001      	str	r0, [sp, #4]
   1b358:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   1b35a:	2210      	movs	r2, #16
   1b35c:	9900      	ldr	r1, [sp, #0]
   1b35e:	9801      	ldr	r0, [sp, #4]
   1b360:	f7f0 fefe 	bl	c160 <memcpy>
}
   1b364:	bf00      	nop
   1b366:	b003      	add	sp, #12
   1b368:	f85d fb04 	ldr.w	pc, [sp], #4

0001b36c <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   1b36c:	b500      	push	{lr}
   1b36e:	b083      	sub	sp, #12
   1b370:	9001      	str	r0, [sp, #4]
   1b372:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   1b374:	2208      	movs	r2, #8
   1b376:	9900      	ldr	r1, [sp, #0]
   1b378:	9801      	ldr	r0, [sp, #4]
   1b37a:	f7f0 fef1 	bl	c160 <memcpy>
}
   1b37e:	bf00      	nop
   1b380:	b003      	add	sp, #12
   1b382:	f85d fb04 	ldr.w	pc, [sp], #4

0001b386 <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   1b386:	b084      	sub	sp, #16
   1b388:	9001      	str	r0, [sp, #4]
   1b38a:	9100      	str	r1, [sp, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   1b38c:	2310      	movs	r3, #16
   1b38e:	f88d 300f 	strb.w	r3, [sp, #15]
   1b392:	e00f      	b.n	1b3b4 <Calc128Xor+0x2e>
  {
    *pDst++ ^= *pSrc++;
   1b394:	9b00      	ldr	r3, [sp, #0]
   1b396:	1c5a      	adds	r2, r3, #1
   1b398:	9200      	str	r2, [sp, #0]
   1b39a:	781a      	ldrb	r2, [r3, #0]
   1b39c:	9b01      	ldr	r3, [sp, #4]
   1b39e:	1c59      	adds	r1, r3, #1
   1b3a0:	9101      	str	r1, [sp, #4]
   1b3a2:	7819      	ldrb	r1, [r3, #0]
   1b3a4:	404a      	eors	r2, r1
   1b3a6:	b2d2      	uxtb	r2, r2
   1b3a8:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
   1b3aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b3ae:	3b01      	subs	r3, #1
   1b3b0:	f88d 300f 	strb.w	r3, [sp, #15]
   1b3b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b3b8:	2b00      	cmp	r3, #0
   1b3ba:	d1eb      	bne.n	1b394 <Calc128Xor+0xe>
  }
}
   1b3bc:	bf00      	nop
   1b3be:	b004      	add	sp, #16
   1b3c0:	4770      	bx	lr

0001b3c2 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   1b3c2:	b086      	sub	sp, #24
   1b3c4:	9003      	str	r0, [sp, #12]
   1b3c6:	9102      	str	r1, [sp, #8]
   1b3c8:	4613      	mov	r3, r2
   1b3ca:	f8ad 3006 	strh.w	r3, [sp, #6]
  int16_t i;

  for (i=0; i<len; i++)
   1b3ce:	2300      	movs	r3, #0
   1b3d0:	f8ad 3016 	strh.w	r3, [sp, #22]
   1b3d4:	e015      	b.n	1b402 <WStrReverseCpy+0x40>
  {
    pBuf1[len-1-i] = pBuf2[i];
   1b3d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b3da:	1e5a      	subs	r2, r3, #1
   1b3dc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   1b3e0:	1ad3      	subs	r3, r2, r3
   1b3e2:	461a      	mov	r2, r3
   1b3e4:	9b03      	ldr	r3, [sp, #12]
   1b3e6:	4413      	add	r3, r2
   1b3e8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   1b3ec:	9902      	ldr	r1, [sp, #8]
   1b3ee:	440a      	add	r2, r1
   1b3f0:	7812      	ldrb	r2, [r2, #0]
   1b3f2:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
   1b3f4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   1b3f8:	b29b      	uxth	r3, r3
   1b3fa:	3301      	adds	r3, #1
   1b3fc:	b29b      	uxth	r3, r3
   1b3fe:	f8ad 3016 	strh.w	r3, [sp, #22]
   1b402:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   1b406:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b40a:	429a      	cmp	r2, r3
   1b40c:	dbe3      	blt.n	1b3d6 <WStrReverseCpy+0x14>
  }
}
   1b40e:	bf00      	nop
   1b410:	b006      	add	sp, #24
   1b412:	4770      	bx	lr

0001b414 <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   1b414:	b084      	sub	sp, #16
   1b416:	9001      	str	r0, [sp, #4]
   1b418:	460b      	mov	r3, r1
   1b41a:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   1b41e:	2300      	movs	r3, #0
   1b420:	f88d 300f 	strb.w	r3, [sp, #15]
   1b424:	e024      	b.n	1b470 <WStrReverse+0x5c>
  {
    temp = pBuf[len-i-1];
   1b426:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1b42a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b42e:	1ad3      	subs	r3, r2, r3
   1b430:	3b01      	subs	r3, #1
   1b432:	9a01      	ldr	r2, [sp, #4]
   1b434:	4413      	add	r3, r2
   1b436:	781b      	ldrb	r3, [r3, #0]
   1b438:	f88d 300e 	strb.w	r3, [sp, #14]
    pBuf[len-i-1] = pBuf[i];
   1b43c:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1b440:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b444:	1ad3      	subs	r3, r2, r3
   1b446:	3b01      	subs	r3, #1
   1b448:	9a01      	ldr	r2, [sp, #4]
   1b44a:	4413      	add	r3, r2
   1b44c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1b450:	9901      	ldr	r1, [sp, #4]
   1b452:	440a      	add	r2, r1
   1b454:	7812      	ldrb	r2, [r2, #0]
   1b456:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   1b458:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b45c:	9a01      	ldr	r2, [sp, #4]
   1b45e:	4413      	add	r3, r2
   1b460:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1b464:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   1b466:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b46a:	3301      	adds	r3, #1
   1b46c:	f88d 300f 	strb.w	r3, [sp, #15]
   1b470:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b474:	085b      	lsrs	r3, r3, #1
   1b476:	b2db      	uxtb	r3, r3
   1b478:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1b47c:	429a      	cmp	r2, r3
   1b47e:	d3d2      	bcc.n	1b426 <WStrReverse+0x12>
  }
}
   1b480:	bf00      	nop
   1b482:	b004      	add	sp, #16
   1b484:	4770      	bx	lr
	...

0001b488 <l2cDefaultDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1b488:	b500      	push	{lr}
   1b48a:	b083      	sub	sp, #12
   1b48c:	4603      	mov	r3, r0
   1b48e:	9200      	str	r2, [sp, #0]
   1b490:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b494:	460b      	mov	r3, r1
   1b496:	f8ad 3004 	strh.w	r3, [sp, #4]
  L2C_TRACE_WARN0("rcvd data on uregistered cid");
   1b49a:	4803      	ldr	r0, [pc, #12]	; (1b4a8 <l2cDefaultDataCback+0x20>)
   1b49c:	f7fd fc54 	bl	18d48 <WsfTrace>
}
   1b4a0:	bf00      	nop
   1b4a2:	b003      	add	sp, #12
   1b4a4:	f85d fb04 	ldr.w	pc, [sp], #4
   1b4a8:	00028bf8 	.word	0x00028bf8

0001b4ac <l2cDefaultDataCidCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultDataCidCback(uint16_t handle, uint16_t cid, uint16_t len, uint8_t *pPacket)
{
   1b4ac:	b500      	push	{lr}
   1b4ae:	b085      	sub	sp, #20
   1b4b0:	9301      	str	r3, [sp, #4]
   1b4b2:	4603      	mov	r3, r0
   1b4b4:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b4b8:	460b      	mov	r3, r1
   1b4ba:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b4be:	4613      	mov	r3, r2
   1b4c0:	f8ad 300a 	strh.w	r3, [sp, #10]
  L2C_TRACE_WARN1("unknown cid=0x%04x", cid);
   1b4c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1b4c8:	4619      	mov	r1, r3
   1b4ca:	4803      	ldr	r0, [pc, #12]	; (1b4d8 <l2cDefaultDataCidCback+0x2c>)
   1b4cc:	f7fd fc3c 	bl	18d48 <WsfTrace>
}
   1b4d0:	bf00      	nop
   1b4d2:	b005      	add	sp, #20
   1b4d4:	f85d fb04 	ldr.w	pc, [sp], #4
   1b4d8:	00028c18 	.word	0x00028c18

0001b4dc <l2cDefaultCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultCtrlCback(wsfMsgHdr_t *pMsg)
{
   1b4dc:	b082      	sub	sp, #8
   1b4de:	9001      	str	r0, [sp, #4]
  return;
   1b4e0:	bf00      	nop
}
   1b4e2:	b002      	add	sp, #8
   1b4e4:	4770      	bx	lr
	...

0001b4e8 <l2cRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cRxSignalingPkt(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1b4e8:	b500      	push	{lr}
   1b4ea:	b085      	sub	sp, #20
   1b4ec:	4603      	mov	r3, r0
   1b4ee:	9200      	str	r2, [sp, #0]
   1b4f0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b4f4:	460b      	mov	r3, r1
   1b4f6:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t role;
  dmConnId_t connId;

  if ((connId = DmConnIdByHandle(handle)) == DM_CONN_ID_NONE)
   1b4fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b4fe:	4618      	mov	r0, r3
   1b500:	f7f6 f8d2 	bl	116a8 <DmConnIdByHandle>
   1b504:	4603      	mov	r3, r0
   1b506:	f88d 300f 	strb.w	r3, [sp, #15]
   1b50a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b50e:	2b00      	cmp	r3, #0
   1b510:	d030      	beq.n	1b574 <l2cRxSignalingPkt+0x8c>
  {
    return;
  }

  role = DmConnRole(connId);
   1b512:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b516:	4618      	mov	r0, r3
   1b518:	f7f6 fa26 	bl	11968 <DmConnRole>
   1b51c:	4603      	mov	r3, r0
   1b51e:	f88d 300e 	strb.w	r3, [sp, #14]

  if ((role == DM_ROLE_MASTER) && (l2cCb.masterRxSignalingPkt != NULL))
   1b522:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1b526:	2b00      	cmp	r3, #0
   1b528:	d10c      	bne.n	1b544 <l2cRxSignalingPkt+0x5c>
   1b52a:	4b14      	ldr	r3, [pc, #80]	; (1b57c <l2cRxSignalingPkt+0x94>)
   1b52c:	699b      	ldr	r3, [r3, #24]
   1b52e:	2b00      	cmp	r3, #0
   1b530:	d008      	beq.n	1b544 <l2cRxSignalingPkt+0x5c>
  {
    (*l2cCb.masterRxSignalingPkt)(handle, len, pPacket);
   1b532:	4b12      	ldr	r3, [pc, #72]	; (1b57c <l2cRxSignalingPkt+0x94>)
   1b534:	699b      	ldr	r3, [r3, #24]
   1b536:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1b53a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1b53e:	9a00      	ldr	r2, [sp, #0]
   1b540:	4798      	blx	r3
   1b542:	e018      	b.n	1b576 <l2cRxSignalingPkt+0x8e>
  }
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   1b544:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1b548:	2b01      	cmp	r3, #1
   1b54a:	d10c      	bne.n	1b566 <l2cRxSignalingPkt+0x7e>
   1b54c:	4b0b      	ldr	r3, [pc, #44]	; (1b57c <l2cRxSignalingPkt+0x94>)
   1b54e:	69db      	ldr	r3, [r3, #28]
   1b550:	2b00      	cmp	r3, #0
   1b552:	d008      	beq.n	1b566 <l2cRxSignalingPkt+0x7e>
  {
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1b554:	4b09      	ldr	r3, [pc, #36]	; (1b57c <l2cRxSignalingPkt+0x94>)
   1b556:	69db      	ldr	r3, [r3, #28]
   1b558:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1b55c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1b560:	9a00      	ldr	r2, [sp, #0]
   1b562:	4798      	blx	r3
   1b564:	e007      	b.n	1b576 <l2cRxSignalingPkt+0x8e>
  }
  else
  {
    L2C_TRACE_ERR1("Invalid role configuration: role=%d", role);
   1b566:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1b56a:	4619      	mov	r1, r3
   1b56c:	4804      	ldr	r0, [pc, #16]	; (1b580 <l2cRxSignalingPkt+0x98>)
   1b56e:	f7fd fbeb 	bl	18d48 <WsfTrace>
   1b572:	e000      	b.n	1b576 <l2cRxSignalingPkt+0x8e>
    return;
   1b574:	bf00      	nop
  }
}
   1b576:	b005      	add	sp, #20
   1b578:	f85d fb04 	ldr.w	pc, [sp], #4
   1b57c:	1000963c 	.word	0x1000963c
   1b580:	00028c2c 	.word	0x00028c2c

0001b584 <l2cHciAclCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciAclCback(uint8_t *pPacket)
{
   1b584:	b510      	push	{r4, lr}
   1b586:	b086      	sub	sp, #24
   1b588:	9001      	str	r0, [sp, #4]
  uint16_t  handle;
  uint16_t  hciLen;
  uint16_t  cid;
  uint16_t  l2cLen;
  uint8_t   *p = pPacket;
   1b58a:	9b01      	ldr	r3, [sp, #4]
   1b58c:	9304      	str	r3, [sp, #16]

  /* parse HCI handle and length */
  BSTREAM_TO_UINT16(handle, p);
   1b58e:	9b04      	ldr	r3, [sp, #16]
   1b590:	781b      	ldrb	r3, [r3, #0]
   1b592:	b29a      	uxth	r2, r3
   1b594:	9b04      	ldr	r3, [sp, #16]
   1b596:	3301      	adds	r3, #1
   1b598:	781b      	ldrb	r3, [r3, #0]
   1b59a:	b29b      	uxth	r3, r3
   1b59c:	021b      	lsls	r3, r3, #8
   1b59e:	b29b      	uxth	r3, r3
   1b5a0:	4413      	add	r3, r2
   1b5a2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b5a6:	9b04      	ldr	r3, [sp, #16]
   1b5a8:	3302      	adds	r3, #2
   1b5aa:	9304      	str	r3, [sp, #16]
  handle &= HCI_HANDLE_MASK;
   1b5ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1b5b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1b5b4:	f8ad 300e 	strh.w	r3, [sp, #14]
  BSTREAM_TO_UINT16(hciLen, p);
   1b5b8:	9b04      	ldr	r3, [sp, #16]
   1b5ba:	781b      	ldrb	r3, [r3, #0]
   1b5bc:	b29a      	uxth	r2, r3
   1b5be:	9b04      	ldr	r3, [sp, #16]
   1b5c0:	3301      	adds	r3, #1
   1b5c2:	781b      	ldrb	r3, [r3, #0]
   1b5c4:	b29b      	uxth	r3, r3
   1b5c6:	021b      	lsls	r3, r3, #8
   1b5c8:	b29b      	uxth	r3, r3
   1b5ca:	4413      	add	r3, r2
   1b5cc:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b5d0:	9b04      	ldr	r3, [sp, #16]
   1b5d2:	3302      	adds	r3, #2
   1b5d4:	9304      	str	r3, [sp, #16]

  /* parse L2CAP length */
  if (hciLen >= L2C_HDR_LEN)
   1b5d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1b5da:	2b03      	cmp	r3, #3
   1b5dc:	d90f      	bls.n	1b5fe <l2cHciAclCback+0x7a>
  {
    BSTREAM_TO_UINT16(l2cLen, p);
   1b5de:	9b04      	ldr	r3, [sp, #16]
   1b5e0:	781b      	ldrb	r3, [r3, #0]
   1b5e2:	b29a      	uxth	r2, r3
   1b5e4:	9b04      	ldr	r3, [sp, #16]
   1b5e6:	3301      	adds	r3, #1
   1b5e8:	781b      	ldrb	r3, [r3, #0]
   1b5ea:	b29b      	uxth	r3, r3
   1b5ec:	021b      	lsls	r3, r3, #8
   1b5ee:	b29b      	uxth	r3, r3
   1b5f0:	4413      	add	r3, r2
   1b5f2:	f8ad 3016 	strh.w	r3, [sp, #22]
   1b5f6:	9b04      	ldr	r3, [sp, #16]
   1b5f8:	3302      	adds	r3, #2
   1b5fa:	9304      	str	r3, [sp, #16]
   1b5fc:	e002      	b.n	1b604 <l2cHciAclCback+0x80>
  }
  else
  {
    l2cLen = 0;
   1b5fe:	2300      	movs	r3, #0
   1b600:	f8ad 3016 	strh.w	r3, [sp, #22]
  }

  /* verify L2CAP length vs HCI length */
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   1b604:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1b608:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b60c:	3304      	adds	r3, #4
   1b60e:	429a      	cmp	r2, r3
   1b610:	d13e      	bne.n	1b690 <l2cHciAclCback+0x10c>
  {
    /* parse CID */
    BSTREAM_TO_UINT16(cid, p);
   1b612:	9b04      	ldr	r3, [sp, #16]
   1b614:	781b      	ldrb	r3, [r3, #0]
   1b616:	b29a      	uxth	r2, r3
   1b618:	9b04      	ldr	r3, [sp, #16]
   1b61a:	3301      	adds	r3, #1
   1b61c:	781b      	ldrb	r3, [r3, #0]
   1b61e:	b29b      	uxth	r3, r3
   1b620:	021b      	lsls	r3, r3, #8
   1b622:	b29b      	uxth	r3, r3
   1b624:	4413      	add	r3, r2
   1b626:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b62a:	9b04      	ldr	r3, [sp, #16]
   1b62c:	3302      	adds	r3, #2
   1b62e:	9304      	str	r3, [sp, #16]

    switch (cid)
   1b630:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1b634:	2b05      	cmp	r3, #5
   1b636:	d004      	beq.n	1b642 <l2cHciAclCback+0xbe>
   1b638:	2b06      	cmp	r3, #6
   1b63a:	d014      	beq.n	1b666 <l2cHciAclCback+0xe2>
   1b63c:	2b04      	cmp	r3, #4
   1b63e:	d009      	beq.n	1b654 <l2cHciAclCback+0xd0>
   1b640:	e01a      	b.n	1b678 <l2cHciAclCback+0xf4>
    {
      case L2C_CID_LE_SIGNALING:
        (*l2cCb.l2cSignalingCback)(handle, l2cLen, pPacket);
   1b642:	4b1a      	ldr	r3, [pc, #104]	; (1b6ac <l2cHciAclCback+0x128>)
   1b644:	689b      	ldr	r3, [r3, #8]
   1b646:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1b64a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1b64e:	9a01      	ldr	r2, [sp, #4]
   1b650:	4798      	blx	r3
        break;
   1b652:	e025      	b.n	1b6a0 <l2cHciAclCback+0x11c>

      case L2C_CID_ATT:
        (*l2cCb.attDataCback)(handle, l2cLen, pPacket);
   1b654:	4b15      	ldr	r3, [pc, #84]	; (1b6ac <l2cHciAclCback+0x128>)
   1b656:	681b      	ldr	r3, [r3, #0]
   1b658:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1b65c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1b660:	9a01      	ldr	r2, [sp, #4]
   1b662:	4798      	blx	r3
        break;
   1b664:	e01c      	b.n	1b6a0 <l2cHciAclCback+0x11c>

      case L2C_CID_SMP:
        (*l2cCb.smpDataCback)(handle, l2cLen, pPacket);
   1b666:	4b11      	ldr	r3, [pc, #68]	; (1b6ac <l2cHciAclCback+0x128>)
   1b668:	685b      	ldr	r3, [r3, #4]
   1b66a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1b66e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1b672:	9a01      	ldr	r2, [sp, #4]
   1b674:	4798      	blx	r3
        break;
   1b676:	e013      	b.n	1b6a0 <l2cHciAclCback+0x11c>

      default:
        (*l2cCb.l2cDataCidCback)(handle, cid, l2cLen, pPacket);
   1b678:	4b0c      	ldr	r3, [pc, #48]	; (1b6ac <l2cHciAclCback+0x128>)
   1b67a:	6a1c      	ldr	r4, [r3, #32]
   1b67c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1b680:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1b684:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1b688:	9b01      	ldr	r3, [sp, #4]
   1b68a:	47a0      	blx	r4
        break;
   1b68c:	bf00      	nop
   1b68e:	e007      	b.n	1b6a0 <l2cHciAclCback+0x11c>
    }
  }
  /* else length mismatch */
  else
  {
    L2C_TRACE_WARN2("length mismatch: l2c=%u hci=%u", l2cLen, hciLen);
   1b690:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b694:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1b698:	4619      	mov	r1, r3
   1b69a:	4805      	ldr	r0, [pc, #20]	; (1b6b0 <l2cHciAclCback+0x12c>)
   1b69c:	f7fd fb54 	bl	18d48 <WsfTrace>
  }

  /* deallocate buffer */
  WsfMsgFree(pPacket);
   1b6a0:	9801      	ldr	r0, [sp, #4]
   1b6a2:	f7fc fefe 	bl	184a2 <WsfMsgFree>
}
   1b6a6:	bf00      	nop
   1b6a8:	b006      	add	sp, #24
   1b6aa:	bd10      	pop	{r4, pc}
   1b6ac:	1000963c 	.word	0x1000963c
   1b6b0:	00028c50 	.word	0x00028c50

0001b6b4 <l2cHciFlowCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciFlowCback(uint16_t handle, bool_t flowDisabled)
{
   1b6b4:	b500      	push	{lr}
   1b6b6:	b085      	sub	sp, #20
   1b6b8:	4603      	mov	r3, r0
   1b6ba:	460a      	mov	r2, r1
   1b6bc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b6c0:	4613      	mov	r3, r2
   1b6c2:	f88d 3005 	strb.w	r3, [sp, #5]
  wsfMsgHdr_t hdr;

  /* get conn ID for handle */
  if ((hdr.param = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   1b6c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b6ca:	4618      	mov	r0, r3
   1b6cc:	f7f5 ffec 	bl	116a8 <DmConnIdByHandle>
   1b6d0:	4603      	mov	r3, r0
   1b6d2:	b29b      	uxth	r3, r3
   1b6d4:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b6d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1b6dc:	2b00      	cmp	r3, #0
   1b6de:	d01a      	beq.n	1b716 <l2cHciFlowCback+0x62>
  {
    /* execute higher layer flow control callbacks */
    hdr.event = flowDisabled;
   1b6e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b6e4:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.attCtrlCback)(&hdr);
   1b6e8:	4b0d      	ldr	r3, [pc, #52]	; (1b720 <l2cHciFlowCback+0x6c>)
   1b6ea:	68db      	ldr	r3, [r3, #12]
   1b6ec:	aa03      	add	r2, sp, #12
   1b6ee:	4610      	mov	r0, r2
   1b6f0:	4798      	blx	r3
    hdr.event = flowDisabled;
   1b6f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b6f6:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.smpCtrlCback)(&hdr);
   1b6fa:	4b09      	ldr	r3, [pc, #36]	; (1b720 <l2cHciFlowCback+0x6c>)
   1b6fc:	691b      	ldr	r3, [r3, #16]
   1b6fe:	aa03      	add	r2, sp, #12
   1b700:	4610      	mov	r0, r2
   1b702:	4798      	blx	r3

    /* execute connection oriented channel flow control callback */
    hdr.event = flowDisabled;
   1b704:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b708:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   1b70c:	4b04      	ldr	r3, [pc, #16]	; (1b720 <l2cHciFlowCback+0x6c>)
   1b70e:	695b      	ldr	r3, [r3, #20]
   1b710:	aa03      	add	r2, sp, #12
   1b712:	4610      	mov	r0, r2
   1b714:	4798      	blx	r3
  }
}
   1b716:	bf00      	nop
   1b718:	b005      	add	sp, #20
   1b71a:	f85d fb04 	ldr.w	pc, [sp], #4
   1b71e:	bf00      	nop
   1b720:	1000963c 	.word	0x1000963c

0001b724 <l2cSendCmdReject>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cSendCmdReject(uint16_t handle, uint8_t identifier, uint16_t reason)
{
   1b724:	b500      	push	{lr}
   1b726:	b085      	sub	sp, #20
   1b728:	4603      	mov	r3, r0
   1b72a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b72e:	460b      	mov	r3, r1
   1b730:	f88d 3005 	strb.w	r3, [sp, #5]
   1b734:	4613      	mov	r3, r2
   1b736:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t *pPacket;
  uint8_t *p;

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CMD_REJ_LEN)) != NULL)
   1b73a:	200e      	movs	r0, #14
   1b73c:	f000 f837 	bl	1b7ae <l2cMsgAlloc>
   1b740:	9003      	str	r0, [sp, #12]
   1b742:	9b03      	ldr	r3, [sp, #12]
   1b744:	2b00      	cmp	r3, #0
   1b746:	d02e      	beq.n	1b7a6 <l2cSendCmdReject+0x82>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
   1b748:	9b03      	ldr	r3, [sp, #12]
   1b74a:	3308      	adds	r3, #8
   1b74c:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   1b74e:	9b02      	ldr	r3, [sp, #8]
   1b750:	1c5a      	adds	r2, r3, #1
   1b752:	9202      	str	r2, [sp, #8]
   1b754:	2201      	movs	r2, #1
   1b756:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, identifier);              /* identifier */
   1b758:	9b02      	ldr	r3, [sp, #8]
   1b75a:	1c5a      	adds	r2, r3, #1
   1b75c:	9202      	str	r2, [sp, #8]
   1b75e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1b762:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   1b764:	9b02      	ldr	r3, [sp, #8]
   1b766:	1c5a      	adds	r2, r3, #1
   1b768:	9202      	str	r2, [sp, #8]
   1b76a:	2202      	movs	r2, #2
   1b76c:	701a      	strb	r2, [r3, #0]
   1b76e:	9b02      	ldr	r3, [sp, #8]
   1b770:	1c5a      	adds	r2, r3, #1
   1b772:	9202      	str	r2, [sp, #8]
   1b774:	2200      	movs	r2, #0
   1b776:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   1b778:	9b02      	ldr	r3, [sp, #8]
   1b77a:	1c5a      	adds	r2, r3, #1
   1b77c:	9202      	str	r2, [sp, #8]
   1b77e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1b782:	b2d2      	uxtb	r2, r2
   1b784:	701a      	strb	r2, [r3, #0]
   1b786:	9b02      	ldr	r3, [sp, #8]
   1b788:	1c5a      	adds	r2, r3, #1
   1b78a:	9202      	str	r2, [sp, #8]
   1b78c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1b790:	0a12      	lsrs	r2, r2, #8
   1b792:	b292      	uxth	r2, r2
   1b794:	b2d2      	uxtb	r2, r2
   1b796:	701a      	strb	r2, [r3, #0]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CMD_REJ_LEN), pPacket);
   1b798:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1b79c:	9b03      	ldr	r3, [sp, #12]
   1b79e:	2206      	movs	r2, #6
   1b7a0:	2005      	movs	r0, #5
   1b7a2:	f000 f85f 	bl	1b864 <L2cDataReq>
  }
}
   1b7a6:	bf00      	nop
   1b7a8:	b005      	add	sp, #20
   1b7aa:	f85d fb04 	ldr.w	pc, [sp], #4

0001b7ae <l2cMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *l2cMsgAlloc(uint16_t len)
{
   1b7ae:	b500      	push	{lr}
   1b7b0:	b083      	sub	sp, #12
   1b7b2:	4603      	mov	r3, r0
   1b7b4:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1b7b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b7bc:	2100      	movs	r1, #0
   1b7be:	4618      	mov	r0, r3
   1b7c0:	f7fc fe3f 	bl	18442 <WsfMsgDataAlloc>
   1b7c4:	4603      	mov	r3, r0
}
   1b7c6:	4618      	mov	r0, r3
   1b7c8:	b003      	add	sp, #12
   1b7ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001b7d0 <L2cInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cInit(void)
{
   1b7d0:	b508      	push	{r3, lr}
  /* Initialize control block */
  l2cCb.attDataCback = l2cDefaultDataCback;
   1b7d2:	4b0f      	ldr	r3, [pc, #60]	; (1b810 <L2cInit+0x40>)
   1b7d4:	4a0f      	ldr	r2, [pc, #60]	; (1b814 <L2cInit+0x44>)
   1b7d6:	601a      	str	r2, [r3, #0]
  l2cCb.smpDataCback = l2cDefaultDataCback;
   1b7d8:	4b0d      	ldr	r3, [pc, #52]	; (1b810 <L2cInit+0x40>)
   1b7da:	4a0e      	ldr	r2, [pc, #56]	; (1b814 <L2cInit+0x44>)
   1b7dc:	605a      	str	r2, [r3, #4]
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   1b7de:	4b0c      	ldr	r3, [pc, #48]	; (1b810 <L2cInit+0x40>)
   1b7e0:	4a0d      	ldr	r2, [pc, #52]	; (1b818 <L2cInit+0x48>)
   1b7e2:	609a      	str	r2, [r3, #8]
  l2cCb.attCtrlCback = l2cDefaultCtrlCback;
   1b7e4:	4b0a      	ldr	r3, [pc, #40]	; (1b810 <L2cInit+0x40>)
   1b7e6:	4a0d      	ldr	r2, [pc, #52]	; (1b81c <L2cInit+0x4c>)
   1b7e8:	60da      	str	r2, [r3, #12]
  l2cCb.smpCtrlCback = l2cDefaultCtrlCback;
   1b7ea:	4b09      	ldr	r3, [pc, #36]	; (1b810 <L2cInit+0x40>)
   1b7ec:	4a0b      	ldr	r2, [pc, #44]	; (1b81c <L2cInit+0x4c>)
   1b7ee:	611a      	str	r2, [r3, #16]
  l2cCb.l2cCocCtrlCback = l2cDefaultCtrlCback;
   1b7f0:	4b07      	ldr	r3, [pc, #28]	; (1b810 <L2cInit+0x40>)
   1b7f2:	4a0a      	ldr	r2, [pc, #40]	; (1b81c <L2cInit+0x4c>)
   1b7f4:	615a      	str	r2, [r3, #20]
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   1b7f6:	4b06      	ldr	r3, [pc, #24]	; (1b810 <L2cInit+0x40>)
   1b7f8:	4a09      	ldr	r2, [pc, #36]	; (1b820 <L2cInit+0x50>)
   1b7fa:	621a      	str	r2, [r3, #32]
  l2cCb.identifier = 1;
   1b7fc:	4b04      	ldr	r3, [pc, #16]	; (1b810 <L2cInit+0x40>)
   1b7fe:	2201      	movs	r2, #1
   1b800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Register with HCI */
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   1b804:	4907      	ldr	r1, [pc, #28]	; (1b824 <L2cInit+0x54>)
   1b806:	4808      	ldr	r0, [pc, #32]	; (1b828 <L2cInit+0x58>)
   1b808:	f001 f970 	bl	1caec <HciAclRegister>
}
   1b80c:	bf00      	nop
   1b80e:	bd08      	pop	{r3, pc}
   1b810:	1000963c 	.word	0x1000963c
   1b814:	0001b489 	.word	0x0001b489
   1b818:	0001b4e9 	.word	0x0001b4e9
   1b81c:	0001b4dd 	.word	0x0001b4dd
   1b820:	0001b4ad 	.word	0x0001b4ad
   1b824:	0001b6b5 	.word	0x0001b6b5
   1b828:	0001b585 	.word	0x0001b585

0001b82c <L2cRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cRegister(uint16_t cid, l2cDataCback_t dataCback, l2cCtrlCback_t ctrlCback)
{
   1b82c:	b084      	sub	sp, #16
   1b82e:	4603      	mov	r3, r0
   1b830:	9102      	str	r1, [sp, #8]
   1b832:	9201      	str	r2, [sp, #4]
   1b834:	f8ad 300e 	strh.w	r3, [sp, #14]
  WSF_ASSERT((cid == L2C_CID_ATT) || (cid == L2C_CID_SMP));

  /* store the callbacks */
  if (cid == L2C_CID_ATT)
   1b838:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1b83c:	2b04      	cmp	r3, #4
   1b83e:	d106      	bne.n	1b84e <L2cRegister+0x22>
  {
    /* registering for attribute protocol */
    l2cCb.attDataCback = dataCback;
   1b840:	4a07      	ldr	r2, [pc, #28]	; (1b860 <L2cRegister+0x34>)
   1b842:	9b02      	ldr	r3, [sp, #8]
   1b844:	6013      	str	r3, [r2, #0]
    l2cCb.attCtrlCback = ctrlCback;
   1b846:	4a06      	ldr	r2, [pc, #24]	; (1b860 <L2cRegister+0x34>)
   1b848:	9b01      	ldr	r3, [sp, #4]
   1b84a:	60d3      	str	r3, [r2, #12]
  {
    /* registering for security manager protocol */
    l2cCb.smpDataCback = dataCback;
    l2cCb.smpCtrlCback = ctrlCback;
  }
}
   1b84c:	e005      	b.n	1b85a <L2cRegister+0x2e>
    l2cCb.smpDataCback = dataCback;
   1b84e:	4a04      	ldr	r2, [pc, #16]	; (1b860 <L2cRegister+0x34>)
   1b850:	9b02      	ldr	r3, [sp, #8]
   1b852:	6053      	str	r3, [r2, #4]
    l2cCb.smpCtrlCback = ctrlCback;
   1b854:	4a02      	ldr	r2, [pc, #8]	; (1b860 <L2cRegister+0x34>)
   1b856:	9b01      	ldr	r3, [sp, #4]
   1b858:	6113      	str	r3, [r2, #16]
}
   1b85a:	bf00      	nop
   1b85c:	b004      	add	sp, #16
   1b85e:	4770      	bx	lr
   1b860:	1000963c 	.word	0x1000963c

0001b864 <L2cDataReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDataReq(uint16_t cid, uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1b864:	b500      	push	{lr}
   1b866:	b087      	sub	sp, #28
   1b868:	9301      	str	r3, [sp, #4]
   1b86a:	4603      	mov	r3, r0
   1b86c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b870:	460b      	mov	r3, r1
   1b872:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b876:	4613      	mov	r3, r2
   1b878:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t *p = pPacket;
   1b87c:	9b01      	ldr	r3, [sp, #4]
   1b87e:	9305      	str	r3, [sp, #20]

  /* Set HCI header */
  UINT16_TO_BSTREAM(p, handle);
   1b880:	9b05      	ldr	r3, [sp, #20]
   1b882:	1c5a      	adds	r2, r3, #1
   1b884:	9205      	str	r2, [sp, #20]
   1b886:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1b88a:	b2d2      	uxtb	r2, r2
   1b88c:	701a      	strb	r2, [r3, #0]
   1b88e:	9b05      	ldr	r3, [sp, #20]
   1b890:	1c5a      	adds	r2, r3, #1
   1b892:	9205      	str	r2, [sp, #20]
   1b894:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1b898:	0a12      	lsrs	r2, r2, #8
   1b89a:	b292      	uxth	r2, r2
   1b89c:	b2d2      	uxtb	r2, r2
   1b89e:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   1b8a0:	9b05      	ldr	r3, [sp, #20]
   1b8a2:	1c5a      	adds	r2, r3, #1
   1b8a4:	9205      	str	r2, [sp, #20]
   1b8a6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1b8aa:	b2d2      	uxtb	r2, r2
   1b8ac:	3204      	adds	r2, #4
   1b8ae:	b2d2      	uxtb	r2, r2
   1b8b0:	701a      	strb	r2, [r3, #0]
   1b8b2:	9b05      	ldr	r3, [sp, #20]
   1b8b4:	1c5a      	adds	r2, r3, #1
   1b8b6:	9205      	str	r2, [sp, #20]
   1b8b8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1b8bc:	3204      	adds	r2, #4
   1b8be:	1212      	asrs	r2, r2, #8
   1b8c0:	b2d2      	uxtb	r2, r2
   1b8c2:	701a      	strb	r2, [r3, #0]

  /* Set L2CAP header */
  UINT16_TO_BSTREAM(p, len);
   1b8c4:	9b05      	ldr	r3, [sp, #20]
   1b8c6:	1c5a      	adds	r2, r3, #1
   1b8c8:	9205      	str	r2, [sp, #20]
   1b8ca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1b8ce:	b2d2      	uxtb	r2, r2
   1b8d0:	701a      	strb	r2, [r3, #0]
   1b8d2:	9b05      	ldr	r3, [sp, #20]
   1b8d4:	1c5a      	adds	r2, r3, #1
   1b8d6:	9205      	str	r2, [sp, #20]
   1b8d8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1b8dc:	0a12      	lsrs	r2, r2, #8
   1b8de:	b292      	uxth	r2, r2
   1b8e0:	b2d2      	uxtb	r2, r2
   1b8e2:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, cid);
   1b8e4:	9b05      	ldr	r3, [sp, #20]
   1b8e6:	1c5a      	adds	r2, r3, #1
   1b8e8:	9205      	str	r2, [sp, #20]
   1b8ea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1b8ee:	b2d2      	uxtb	r2, r2
   1b8f0:	701a      	strb	r2, [r3, #0]
   1b8f2:	9b05      	ldr	r3, [sp, #20]
   1b8f4:	1c5a      	adds	r2, r3, #1
   1b8f6:	9205      	str	r2, [sp, #20]
   1b8f8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1b8fc:	0a12      	lsrs	r2, r2, #8
   1b8fe:	b292      	uxth	r2, r2
   1b900:	b2d2      	uxtb	r2, r2
   1b902:	701a      	strb	r2, [r3, #0]

  /* Send to HCI */
  HciSendAclData(pPacket);
   1b904:	9801      	ldr	r0, [sp, #4]
   1b906:	f002 fc93 	bl	1e230 <HciSendAclData>
}
   1b90a:	bf00      	nop
   1b90c:	b007      	add	sp, #28
   1b90e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001b914 <l2cSlaveReqTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveReqTimeout(wsfMsgHdr_t *pMsg)
{
   1b914:	b500      	push	{lr}
   1b916:	b083      	sub	sp, #12
   1b918:	9001      	str	r0, [sp, #4]
  L2C_TRACE_WARN0("conn update req timeout");
   1b91a:	4806      	ldr	r0, [pc, #24]	; (1b934 <l2cSlaveReqTimeout+0x20>)
   1b91c:	f7fd fa14 	bl	18d48 <WsfTrace>

  /* Notify DM that connection update has failed (handle is stored in param) */
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
   1b920:	9b01      	ldr	r3, [sp, #4]
   1b922:	881b      	ldrh	r3, [r3, #0]
   1b924:	2101      	movs	r1, #1
   1b926:	4618      	mov	r0, r3
   1b928:	f7f6 f8a4 	bl	11a74 <DmL2cConnUpdateCnf>
}
   1b92c:	bf00      	nop
   1b92e:	b003      	add	sp, #12
   1b930:	f85d fb04 	ldr.w	pc, [sp], #4
   1b934:	00028c70 	.word	0x00028c70

0001b938 <l2cSlaveRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveRxSignalingPkt(uint16_t handle, uint16_t l2cLen, uint8_t *pPacket)
{
   1b938:	b500      	push	{lr}
   1b93a:	b085      	sub	sp, #20
   1b93c:	4603      	mov	r3, r0
   1b93e:	9200      	str	r2, [sp, #0]
   1b940:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b944:	460b      	mov	r3, r1
   1b946:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t   id;
  uint16_t  len;
  uint16_t  result;

  /* parse code, len, and identifier */
  pPacket += L2C_PAYLOAD_START;
   1b94a:	9b00      	ldr	r3, [sp, #0]
   1b94c:	3308      	adds	r3, #8
   1b94e:	9300      	str	r3, [sp, #0]
  BSTREAM_TO_UINT8(code, pPacket);
   1b950:	9b00      	ldr	r3, [sp, #0]
   1b952:	1c5a      	adds	r2, r3, #1
   1b954:	9200      	str	r2, [sp, #0]
   1b956:	781b      	ldrb	r3, [r3, #0]
   1b958:	f88d 300d 	strb.w	r3, [sp, #13]
  BSTREAM_TO_UINT8(id, pPacket);
   1b95c:	9b00      	ldr	r3, [sp, #0]
   1b95e:	1c5a      	adds	r2, r3, #1
   1b960:	9200      	str	r2, [sp, #0]
   1b962:	781b      	ldrb	r3, [r3, #0]
   1b964:	f88d 300c 	strb.w	r3, [sp, #12]
  BSTREAM_TO_UINT16(len, pPacket);
   1b968:	9b00      	ldr	r3, [sp, #0]
   1b96a:	781b      	ldrb	r3, [r3, #0]
   1b96c:	b29a      	uxth	r2, r3
   1b96e:	9b00      	ldr	r3, [sp, #0]
   1b970:	3301      	adds	r3, #1
   1b972:	781b      	ldrb	r3, [r3, #0]
   1b974:	b29b      	uxth	r3, r3
   1b976:	021b      	lsls	r3, r3, #8
   1b978:	b29b      	uxth	r3, r3
   1b97a:	4413      	add	r3, r2
   1b97c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b980:	9b00      	ldr	r3, [sp, #0]
   1b982:	3302      	adds	r3, #2
   1b984:	9300      	str	r3, [sp, #0]

  /* verify signal identifier is valid */
  if (id == L2C_SIGNAL_ID_INVALID)
   1b986:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b98a:	2b00      	cmp	r3, #0
   1b98c:	d06e      	beq.n	1ba6c <l2cSlaveRxSignalingPkt+0x134>
  /* verify signal identifier is expected
   * verify signaling length vs. l2c length
   * verify this is a conn param update rsp or command reject
   * verify parameter length
   */
  if ((id == l2cSlaveCb.signId[handle])   &&
   1b98e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b992:	4a39      	ldr	r2, [pc, #228]	; (1ba78 <l2cSlaveRxSignalingPkt+0x140>)
   1b994:	4413      	add	r3, r2
   1b996:	7d1b      	ldrb	r3, [r3, #20]
   1b998:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1b99c:	429a      	cmp	r2, r3
   1b99e:	d14e      	bne.n	1ba3e <l2cSlaveRxSignalingPkt+0x106>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   1b9a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b9a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1b9a8:	3304      	adds	r3, #4
  if ((id == l2cSlaveCb.signId[handle])   &&
   1b9aa:	429a      	cmp	r2, r3
   1b9ac:	d147      	bne.n	1ba3e <l2cSlaveRxSignalingPkt+0x106>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   1b9ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1b9b2:	2b13      	cmp	r3, #19
   1b9b4:	d103      	bne.n	1b9be <l2cSlaveRxSignalingPkt+0x86>
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
   1b9b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1b9ba:	2b02      	cmp	r3, #2
   1b9bc:	d003      	beq.n	1b9c6 <l2cSlaveRxSignalingPkt+0x8e>
   1b9be:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1b9c2:	2b01      	cmp	r3, #1
   1b9c4:	d13b      	bne.n	1ba3e <l2cSlaveRxSignalingPkt+0x106>
       (code == L2C_SIG_CMD_REJ)))
  {
    /* get last sent code */
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
   1b9c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b9ca:	4a2b      	ldr	r2, [pc, #172]	; (1ba78 <l2cSlaveRxSignalingPkt+0x140>)
   1b9cc:	4413      	add	r3, r2
   1b9ce:	7c5b      	ldrb	r3, [r3, #17]
   1b9d0:	f88d 3009 	strb.w	r3, [sp, #9]

    /* clear pending signal id */
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
   1b9d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b9d8:	4a27      	ldr	r2, [pc, #156]	; (1ba78 <l2cSlaveRxSignalingPkt+0x140>)
   1b9da:	4413      	add	r3, r2
   1b9dc:	2200      	movs	r2, #0
   1b9de:	751a      	strb	r2, [r3, #20]

    /* parse result parameter */
    BSTREAM_TO_UINT16(result, pPacket);
   1b9e0:	9b00      	ldr	r3, [sp, #0]
   1b9e2:	781b      	ldrb	r3, [r3, #0]
   1b9e4:	b29a      	uxth	r2, r3
   1b9e6:	9b00      	ldr	r3, [sp, #0]
   1b9e8:	3301      	adds	r3, #1
   1b9ea:	781b      	ldrb	r3, [r3, #0]
   1b9ec:	b29b      	uxth	r3, r3
   1b9ee:	021b      	lsls	r3, r3, #8
   1b9f0:	b29b      	uxth	r3, r3
   1b9f2:	4413      	add	r3, r2
   1b9f4:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b9f8:	9b00      	ldr	r3, [sp, #0]
   1b9fa:	3302      	adds	r3, #2
   1b9fc:	9300      	str	r3, [sp, #0]

    /* stop req timer */
    WsfTimerStop(&l2cSlaveCb.reqTimer);
   1b9fe:	481e      	ldr	r0, [pc, #120]	; (1ba78 <l2cSlaveRxSignalingPkt+0x140>)
   1ba00:	f7fd f8de 	bl	18bc0 <WsfTimerStop>

    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   1ba04:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1ba08:	2b12      	cmp	r3, #18
   1ba0a:	d10f      	bne.n	1ba2c <l2cSlaveRxSignalingPkt+0xf4>
    {
      if (code == L2C_SIG_CMD_REJ)
   1ba0c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1ba10:	2b01      	cmp	r3, #1
   1ba12:	d102      	bne.n	1ba1a <l2cSlaveRxSignalingPkt+0xe2>
      {
        /* got command reject */
        result = L2C_CONN_PARAM_REJECTED;
   1ba14:	2301      	movs	r3, #1
   1ba16:	f8ad 300e 	strh.w	r3, [sp, #14]
      }

      /* send to DM */
      DmL2cConnUpdateCnf(handle, result);
   1ba1a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1ba1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ba22:	4611      	mov	r1, r2
   1ba24:	4618      	mov	r0, r3
   1ba26:	f7f6 f825 	bl	11a74 <DmL2cConnUpdateCnf>
  {
   1ba2a:	e022      	b.n	1ba72 <l2cSlaveRxSignalingPkt+0x13a>
    }
    else
    {
      /* send to DM */
      DmL2cCmdRejInd(handle, result);
   1ba2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1ba30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ba34:	4611      	mov	r1, r2
   1ba36:	4618      	mov	r0, r3
   1ba38:	f7f6 f83e 	bl	11ab8 <DmL2cCmdRejInd>
  {
   1ba3c:	e019      	b.n	1ba72 <l2cSlaveRxSignalingPkt+0x13a>
    }
  }
  else
  {
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   1ba3e:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1ba42:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1ba46:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1ba4a:	480c      	ldr	r0, [pc, #48]	; (1ba7c <l2cSlaveRxSignalingPkt+0x144>)
   1ba4c:	f7fd f97c 	bl	18d48 <WsfTrace>

    /* reject all unknown, invalid or unidentified commands except command reject. */
    if (code != L2C_SIG_CMD_REJ)
   1ba50:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1ba54:	2b01      	cmp	r3, #1
   1ba56:	d00b      	beq.n	1ba70 <l2cSlaveRxSignalingPkt+0x138>
    {
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   1ba58:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1ba5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ba60:	2200      	movs	r2, #0
   1ba62:	4618      	mov	r0, r3
   1ba64:	f7ff fe5e 	bl	1b724 <l2cSendCmdReject>
    }

    return;
   1ba68:	bf00      	nop
   1ba6a:	e001      	b.n	1ba70 <l2cSlaveRxSignalingPkt+0x138>
    return;
   1ba6c:	bf00      	nop
   1ba6e:	e000      	b.n	1ba72 <l2cSlaveRxSignalingPkt+0x13a>
    return;
   1ba70:	bf00      	nop
  }
}
   1ba72:	b005      	add	sp, #20
   1ba74:	f85d fb04 	ldr.w	pc, [sp], #4
   1ba78:	10004280 	.word	0x10004280
   1ba7c:	00028c88 	.word	0x00028c88

0001ba80 <L2cSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveInit(void)
{
   1ba80:	b082      	sub	sp, #8
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;
   1ba82:	4b0c      	ldr	r3, [pc, #48]	; (1bab4 <L2cSlaveInit+0x34>)
   1ba84:	4a0c      	ldr	r2, [pc, #48]	; (1bab8 <L2cSlaveInit+0x38>)
   1ba86:	61da      	str	r2, [r3, #28]

  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   1ba88:	2300      	movs	r3, #0
   1ba8a:	f88d 3007 	strb.w	r3, [sp, #7]
   1ba8e:	e00a      	b.n	1baa6 <L2cSlaveInit+0x26>
  {
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
   1ba90:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ba94:	4a09      	ldr	r2, [pc, #36]	; (1babc <L2cSlaveInit+0x3c>)
   1ba96:	4413      	add	r3, r2
   1ba98:	2200      	movs	r2, #0
   1ba9a:	751a      	strb	r2, [r3, #20]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   1ba9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1baa0:	3301      	adds	r3, #1
   1baa2:	f88d 3007 	strb.w	r3, [sp, #7]
   1baa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1baaa:	2b02      	cmp	r3, #2
   1baac:	d9f0      	bls.n	1ba90 <L2cSlaveInit+0x10>
  }
}
   1baae:	bf00      	nop
   1bab0:	b002      	add	sp, #8
   1bab2:	4770      	bx	lr
   1bab4:	1000963c 	.word	0x1000963c
   1bab8:	0001b939 	.word	0x0001b939
   1babc:	10004280 	.word	0x10004280

0001bac0 <L2cDmConnUpdateReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDmConnUpdateReq(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   1bac0:	b500      	push	{lr}
   1bac2:	b085      	sub	sp, #20
   1bac4:	4603      	mov	r3, r0
   1bac6:	9100      	str	r1, [sp, #0]
   1bac8:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pPacket;
  uint8_t *p;

  /* record code */
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
   1bacc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bad0:	4a47      	ldr	r2, [pc, #284]	; (1bbf0 <L2cDmConnUpdateReq+0x130>)
   1bad2:	4413      	add	r3, r2
   1bad4:	2212      	movs	r2, #18
   1bad6:	745a      	strb	r2, [r3, #17]

  /* Start signaling request timer and store handle */
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
   1bad8:	211e      	movs	r1, #30
   1bada:	4845      	ldr	r0, [pc, #276]	; (1bbf0 <L2cDmConnUpdateReq+0x130>)
   1badc:	f7fd f84c 	bl	18b78 <WsfTimerStartSec>
  l2cSlaveCb.reqTimer.msg.param = handle;
   1bae0:	4a43      	ldr	r2, [pc, #268]	; (1bbf0 <L2cDmConnUpdateReq+0x130>)
   1bae2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bae6:	8153      	strh	r3, [r2, #10]

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
   1bae8:	2014      	movs	r0, #20
   1baea:	f7ff fe60 	bl	1b7ae <l2cMsgAlloc>
   1baee:	9003      	str	r0, [sp, #12]
   1baf0:	9b03      	ldr	r3, [sp, #12]
   1baf2:	2b00      	cmp	r3, #0
   1baf4:	d077      	beq.n	1bbe6 <L2cDmConnUpdateReq+0x126>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
   1baf6:	9b03      	ldr	r3, [sp, #12]
   1baf8:	3308      	adds	r3, #8
   1bafa:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
   1bafc:	9b02      	ldr	r3, [sp, #8]
   1bafe:	1c5a      	adds	r2, r3, #1
   1bb00:	9202      	str	r2, [sp, #8]
   1bb02:	2212      	movs	r2, #18
   1bb04:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
   1bb06:	9b02      	ldr	r3, [sp, #8]
   1bb08:	1c5a      	adds	r2, r3, #1
   1bb0a:	9202      	str	r2, [sp, #8]
   1bb0c:	4a39      	ldr	r2, [pc, #228]	; (1bbf4 <L2cDmConnUpdateReq+0x134>)
   1bb0e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   1bb12:	701a      	strb	r2, [r3, #0]
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
   1bb14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bb18:	4a36      	ldr	r2, [pc, #216]	; (1bbf4 <L2cDmConnUpdateReq+0x134>)
   1bb1a:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   1bb1e:	4a34      	ldr	r2, [pc, #208]	; (1bbf0 <L2cDmConnUpdateReq+0x130>)
   1bb20:	4413      	add	r3, r2
   1bb22:	460a      	mov	r2, r1
   1bb24:	751a      	strb	r2, [r3, #20]
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
   1bb26:	4b33      	ldr	r3, [pc, #204]	; (1bbf4 <L2cDmConnUpdateReq+0x134>)
   1bb28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bb2c:	2bff      	cmp	r3, #255	; 0xff
   1bb2e:	d005      	beq.n	1bb3c <L2cDmConnUpdateReq+0x7c>
   1bb30:	4b30      	ldr	r3, [pc, #192]	; (1bbf4 <L2cDmConnUpdateReq+0x134>)
   1bb32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bb36:	3301      	adds	r3, #1
   1bb38:	b2db      	uxtb	r3, r3
   1bb3a:	e000      	b.n	1bb3e <L2cDmConnUpdateReq+0x7e>
   1bb3c:	2301      	movs	r3, #1
   1bb3e:	4a2d      	ldr	r2, [pc, #180]	; (1bbf4 <L2cDmConnUpdateReq+0x134>)
   1bb40:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ_LEN);  /* parameter length */
   1bb44:	9b02      	ldr	r3, [sp, #8]
   1bb46:	1c5a      	adds	r2, r3, #1
   1bb48:	9202      	str	r2, [sp, #8]
   1bb4a:	2208      	movs	r2, #8
   1bb4c:	701a      	strb	r2, [r3, #0]
   1bb4e:	9b02      	ldr	r3, [sp, #8]
   1bb50:	1c5a      	adds	r2, r3, #1
   1bb52:	9202      	str	r2, [sp, #8]
   1bb54:	2200      	movs	r2, #0
   1bb56:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);   /* interval min */
   1bb58:	9b02      	ldr	r3, [sp, #8]
   1bb5a:	1c5a      	adds	r2, r3, #1
   1bb5c:	9202      	str	r2, [sp, #8]
   1bb5e:	9a00      	ldr	r2, [sp, #0]
   1bb60:	8812      	ldrh	r2, [r2, #0]
   1bb62:	b2d2      	uxtb	r2, r2
   1bb64:	701a      	strb	r2, [r3, #0]
   1bb66:	9b02      	ldr	r3, [sp, #8]
   1bb68:	1c5a      	adds	r2, r3, #1
   1bb6a:	9202      	str	r2, [sp, #8]
   1bb6c:	9a00      	ldr	r2, [sp, #0]
   1bb6e:	8812      	ldrh	r2, [r2, #0]
   1bb70:	0a12      	lsrs	r2, r2, #8
   1bb72:	b292      	uxth	r2, r2
   1bb74:	b2d2      	uxtb	r2, r2
   1bb76:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);   /* interval max */
   1bb78:	9b02      	ldr	r3, [sp, #8]
   1bb7a:	1c5a      	adds	r2, r3, #1
   1bb7c:	9202      	str	r2, [sp, #8]
   1bb7e:	9a00      	ldr	r2, [sp, #0]
   1bb80:	8852      	ldrh	r2, [r2, #2]
   1bb82:	b2d2      	uxtb	r2, r2
   1bb84:	701a      	strb	r2, [r3, #0]
   1bb86:	9b02      	ldr	r3, [sp, #8]
   1bb88:	1c5a      	adds	r2, r3, #1
   1bb8a:	9202      	str	r2, [sp, #8]
   1bb8c:	9a00      	ldr	r2, [sp, #0]
   1bb8e:	8852      	ldrh	r2, [r2, #2]
   1bb90:	0a12      	lsrs	r2, r2, #8
   1bb92:	b292      	uxth	r2, r2
   1bb94:	b2d2      	uxtb	r2, r2
   1bb96:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);       /* slave latency */
   1bb98:	9b02      	ldr	r3, [sp, #8]
   1bb9a:	1c5a      	adds	r2, r3, #1
   1bb9c:	9202      	str	r2, [sp, #8]
   1bb9e:	9a00      	ldr	r2, [sp, #0]
   1bba0:	8892      	ldrh	r2, [r2, #4]
   1bba2:	b2d2      	uxtb	r2, r2
   1bba4:	701a      	strb	r2, [r3, #0]
   1bba6:	9b02      	ldr	r3, [sp, #8]
   1bba8:	1c5a      	adds	r2, r3, #1
   1bbaa:	9202      	str	r2, [sp, #8]
   1bbac:	9a00      	ldr	r2, [sp, #0]
   1bbae:	8892      	ldrh	r2, [r2, #4]
   1bbb0:	0a12      	lsrs	r2, r2, #8
   1bbb2:	b292      	uxth	r2, r2
   1bbb4:	b2d2      	uxtb	r2, r2
   1bbb6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);        /* timeout multiplier */
   1bbb8:	9b02      	ldr	r3, [sp, #8]
   1bbba:	1c5a      	adds	r2, r3, #1
   1bbbc:	9202      	str	r2, [sp, #8]
   1bbbe:	9a00      	ldr	r2, [sp, #0]
   1bbc0:	88d2      	ldrh	r2, [r2, #6]
   1bbc2:	b2d2      	uxtb	r2, r2
   1bbc4:	701a      	strb	r2, [r3, #0]
   1bbc6:	9b02      	ldr	r3, [sp, #8]
   1bbc8:	1c5a      	adds	r2, r3, #1
   1bbca:	9202      	str	r2, [sp, #8]
   1bbcc:	9a00      	ldr	r2, [sp, #0]
   1bbce:	88d2      	ldrh	r2, [r2, #6]
   1bbd0:	0a12      	lsrs	r2, r2, #8
   1bbd2:	b292      	uxth	r2, r2
   1bbd4:	b2d2      	uxtb	r2, r2
   1bbd6:	701a      	strb	r2, [r3, #0]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
   1bbd8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1bbdc:	9b03      	ldr	r3, [sp, #12]
   1bbde:	220c      	movs	r2, #12
   1bbe0:	2005      	movs	r0, #5
   1bbe2:	f7ff fe3f 	bl	1b864 <L2cDataReq>
  }
}
   1bbe6:	bf00      	nop
   1bbe8:	b005      	add	sp, #20
   1bbea:	f85d fb04 	ldr.w	pc, [sp], #4
   1bbee:	bf00      	nop
   1bbf0:	10004280 	.word	0x10004280
   1bbf4:	1000963c 	.word	0x1000963c

0001bbf8 <L2cSlaveHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandlerInit(wsfHandlerId_t handlerId)
{
   1bbf8:	b082      	sub	sp, #8
   1bbfa:	4603      	mov	r3, r0
   1bbfc:	f88d 3007 	strb.w	r3, [sp, #7]
  l2cSlaveCb.reqTimer.msg.event = L2C_MSG_REQ_TIMEOUT;
   1bc00:	4b06      	ldr	r3, [pc, #24]	; (1bc1c <L2cSlaveHandlerInit+0x24>)
   1bc02:	2201      	movs	r2, #1
   1bc04:	731a      	strb	r2, [r3, #12]
  l2cSlaveCb.reqTimer.handlerId = handlerId;
   1bc06:	4a05      	ldr	r2, [pc, #20]	; (1bc1c <L2cSlaveHandlerInit+0x24>)
   1bc08:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bc0c:	7213      	strb	r3, [r2, #8]
  l2cSlaveCb.handlerId = handlerId;
   1bc0e:	4a03      	ldr	r2, [pc, #12]	; (1bc1c <L2cSlaveHandlerInit+0x24>)
   1bc10:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bc14:	7413      	strb	r3, [r2, #16]
}
   1bc16:	bf00      	nop
   1bc18:	b002      	add	sp, #8
   1bc1a:	4770      	bx	lr
   1bc1c:	10004280 	.word	0x10004280

0001bc20 <L2cSlaveHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1bc20:	b500      	push	{lr}
   1bc22:	b083      	sub	sp, #12
   1bc24:	4603      	mov	r3, r0
   1bc26:	9100      	str	r1, [sp, #0]
   1bc28:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
   1bc2c:	9b00      	ldr	r3, [sp, #0]
   1bc2e:	2b00      	cmp	r3, #0
   1bc30:	d006      	beq.n	1bc40 <L2cSlaveHandler+0x20>
  {
    WSF_ASSERT(pMsg->event > 0 && pMsg->event <= L2C_MSG_TYPE_MAX);

    /* handle slave signaling request timeout */
    if (pMsg->event == L2C_MSG_REQ_TIMEOUT)
   1bc32:	9b00      	ldr	r3, [sp, #0]
   1bc34:	789b      	ldrb	r3, [r3, #2]
   1bc36:	2b01      	cmp	r3, #1
   1bc38:	d102      	bne.n	1bc40 <L2cSlaveHandler+0x20>
    {
      l2cSlaveReqTimeout(pMsg);
   1bc3a:	9800      	ldr	r0, [sp, #0]
   1bc3c:	f7ff fe6a 	bl	1b914 <l2cSlaveReqTimeout>
  /* Handle events */
  else if (event)
  {

  }
}
   1bc40:	bf00      	nop
   1bc42:	b003      	add	sp, #12
   1bc44:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc48 <byte_to_float>:
 * @param val : float value to store
 *
 * return the next place to store in buffer
 */
uint8_t byte_to_float(uint8_t *d, uint8_t offset, float val)
{
   1bc48:	b086      	sub	sp, #24
   1bc4a:	9003      	str	r0, [sp, #12]
   1bc4c:	460b      	mov	r3, r1
   1bc4e:	ed8d 0a01 	vstr	s0, [sp, #4]
   1bc52:	f88d 300b 	strb.w	r3, [sp, #11]
    union {
        uint8_t array[4];
        float value;
    } conv;

    conv.value = val;
   1bc56:	9b01      	ldr	r3, [sp, #4]
   1bc58:	9304      	str	r3, [sp, #16]

    for (i = 0; i < 4; i++){
   1bc5a:	2300      	movs	r3, #0
   1bc5c:	f88d 3017 	strb.w	r3, [sp, #23]
   1bc60:	e015      	b.n	1bc8e <byte_to_float+0x46>
        d[offset+i] = conv.array[3-i] ; //or d[offset+i] = conv.array[i] ;  depending on endianness
   1bc62:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1bc66:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1bc6a:	4413      	add	r3, r2
   1bc6c:	461a      	mov	r2, r3
   1bc6e:	9b03      	ldr	r3, [sp, #12]
   1bc70:	4413      	add	r3, r2
   1bc72:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1bc76:	f1c2 0203 	rsb	r2, r2, #3
   1bc7a:	a906      	add	r1, sp, #24
   1bc7c:	440a      	add	r2, r1
   1bc7e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   1bc82:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++){
   1bc84:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1bc88:	3301      	adds	r3, #1
   1bc8a:	f88d 3017 	strb.w	r3, [sp, #23]
   1bc8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1bc92:	2b03      	cmp	r3, #3
   1bc94:	d9e5      	bls.n	1bc62 <byte_to_float+0x1a>
    }
    return(offset + i);
   1bc96:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1bc9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1bc9e:	4413      	add	r3, r2
   1bca0:	b2db      	uxtb	r3, r3
}
   1bca2:	4618      	mov	r0, r3
   1bca4:	b006      	add	sp, #24
   1bca6:	4770      	bx	lr

0001bca8 <datsSendData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void datsSendData(dmConnId_t connId)
{
   1bca8:	b500      	push	{lr}
   1bcaa:	b08f      	sub	sp, #60	; 0x3c
   1bcac:	4603      	mov	r3, r0
   1bcae:	f88d 3007 	strb.w	r3, [sp, #7]
    APP_TRACE_INFO0("datsSendData");
   1bcb2:	4825      	ldr	r0, [pc, #148]	; (1bd48 <datsSendData+0xa0>)
   1bcb4:	f7fd f848 	bl	18d48 <WsfTrace>

  // max SendPacket size is MTU (default 23 - 3 = 20)
  // if longer datsAttCback will fail with code 0x77
  // if you need to sent more sent multiple
  uint8_t SendPacket[12];
  uint8_t cnt = 0;
   1bcb8:	2300      	movs	r3, #0
   1bcba:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

  // this could be defined global of course
  float acceleration_mg[3];

  // for demo I set some values (but these should come from the acceleration
  acceleration_mg[0] = 6.77;
   1bcbe:	4b23      	ldr	r3, [pc, #140]	; (1bd4c <datsSendData+0xa4>)
   1bcc0:	9307      	str	r3, [sp, #28]
  acceleration_mg[1] = 4.50;
   1bcc2:	4b23      	ldr	r3, [pc, #140]	; (1bd50 <datsSendData+0xa8>)
   1bcc4:	9308      	str	r3, [sp, #32]
  acceleration_mg[2] = 3.75;
   1bcc6:	4b23      	ldr	r3, [pc, #140]	; (1bd54 <datsSendData+0xac>)
   1bcc8:	9309      	str	r3, [sp, #36]	; 0x24

  // now turn the float to bytes
  cnt = byte_to_float(SendPacket, cnt, acceleration_mg[0]);
   1bcca:	eddd 7a07 	vldr	s15, [sp, #28]
   1bcce:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1bcd2:	ab0a      	add	r3, sp, #40	; 0x28
   1bcd4:	eeb0 0a67 	vmov.f32	s0, s15
   1bcd8:	4611      	mov	r1, r2
   1bcda:	4618      	mov	r0, r3
   1bcdc:	f7ff ffb4 	bl	1bc48 <byte_to_float>
   1bce0:	4603      	mov	r3, r0
   1bce2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  cnt = byte_to_float(SendPacket, cnt, acceleration_mg[1]);
   1bce6:	eddd 7a08 	vldr	s15, [sp, #32]
   1bcea:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1bcee:	ab0a      	add	r3, sp, #40	; 0x28
   1bcf0:	eeb0 0a67 	vmov.f32	s0, s15
   1bcf4:	4611      	mov	r1, r2
   1bcf6:	4618      	mov	r0, r3
   1bcf8:	f7ff ffa6 	bl	1bc48 <byte_to_float>
   1bcfc:	4603      	mov	r3, r0
   1bcfe:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  cnt = byte_to_float(SendPacket, cnt, acceleration_mg[2]);
   1bd02:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   1bd06:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1bd0a:	ab0a      	add	r3, sp, #40	; 0x28
   1bd0c:	eeb0 0a67 	vmov.f32	s0, s15
   1bd10:	4611      	mov	r1, r2
   1bd12:	4618      	mov	r0, r3
   1bd14:	f7ff ff98 	bl	1bc48 <byte_to_float>
   1bd18:	4603      	mov	r3, r0
   1bd1a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

  if (AttsCccEnabled(connId, DATS_WP_DAT_CCC_IDX))
   1bd1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bd22:	2101      	movs	r1, #1
   1bd24:	4618      	mov	r0, r3
   1bd26:	f7f8 fe4b 	bl	149c0 <AttsCccEnabled>
   1bd2a:	4603      	mov	r3, r0
   1bd2c:	2b00      	cmp	r3, #0
   1bd2e:	d007      	beq.n	1bd40 <datsSendData+0x98>
  {
    AttsHandleValueNtf(connId, WP_DAT_HDL, sizeof(SendPacket), SendPacket);
   1bd30:	ab0a      	add	r3, sp, #40	; 0x28
   1bd32:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bd36:	220c      	movs	r2, #12
   1bd38:	f240 2102 	movw	r1, #514	; 0x202
   1bd3c:	f7f9 fb4f 	bl	153de <AttsHandleValueNtf>
  if (AttsCccEnabled(connId, DATS_WP_DAT_CCC_IDX))
  {
    /* send notification */
    AttsHandleValueNtf(connId, WP_DAT_HDL, sizeof(str), str);
  }
}
   1bd40:	b00f      	add	sp, #60	; 0x3c
   1bd42:	f85d fb04 	ldr.w	pc, [sp], #4
   1bd46:	bf00      	nop
   1bd48:	00028cb0 	.word	0x00028cb0
   1bd4c:	40d8a3d7 	.word	0x40d8a3d7
   1bd50:	40900000 	.word	0x40900000
   1bd54:	40700000 	.word	0x40700000

0001bd58 <datsDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void datsDmCback(dmEvt_t *pDmEvt)
{
   1bd58:	b500      	push	{lr}
   1bd5a:	b089      	sub	sp, #36	; 0x24
   1bd5c:	9001      	str	r0, [sp, #4]
  uint16_t  len;

  if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
   1bd5e:	9b01      	ldr	r3, [sp, #4]
   1bd60:	789b      	ldrb	r3, [r3, #2]
   1bd62:	2b34      	cmp	r3, #52	; 0x34
   1bd64:	d117      	bne.n	1bd96 <datsDmCback+0x3e>
  {
    DmSecSetEccKey(&pDmEvt->eccMsg.data.key);
   1bd66:	9b01      	ldr	r3, [sp, #4]
   1bd68:	3304      	adds	r3, #4
   1bd6a:	4618      	mov	r0, r3
   1bd6c:	f7f6 fe6a 	bl	12a44 <DmSecSetEccKey>
    datsSetup(NULL);
   1bd70:	2000      	movs	r0, #0
   1bd72:	f000 f8b9 	bl	1bee8 <datsSetup>

    if (datsSecCfg.oob)
   1bd76:	2300      	movs	r3, #0
   1bd78:	2b00      	cmp	r3, #0
   1bd7a:	d04e      	beq.n	1be1a <datsDmCback+0xc2>
    {
      uint8_t oobLocalRandom[SMP_RAND_LEN];
      SecRand(oobLocalRandom, SMP_RAND_LEN);
   1bd7c:	ab02      	add	r3, sp, #8
   1bd7e:	2110      	movs	r1, #16
   1bd80:	4618      	mov	r0, r3
   1bd82:	f7f7 fa6f 	bl	13264 <SecRand>
      DmSecCalcOobReq(oobLocalRandom, pDmEvt->eccMsg.data.key.pubKey_x);
   1bd86:	9b01      	ldr	r3, [sp, #4]
   1bd88:	1d1a      	adds	r2, r3, #4
   1bd8a:	ab02      	add	r3, sp, #8
   1bd8c:	4611      	mov	r1, r2
   1bd8e:	4618      	mov	r0, r3
   1bd90:	f7f6 fde0 	bl	12954 <DmSecCalcOobReq>
    {
      memcpy(pMsg, pDmEvt, len);
      WsfMsgSend(datsCb.handlerId, pMsg);
    }
  }
}
   1bd94:	e041      	b.n	1be1a <datsDmCback+0xc2>
  else if (pDmEvt->hdr.event == DM_SEC_CALC_OOB_IND)
   1bd96:	9b01      	ldr	r3, [sp, #4]
   1bd98:	789b      	ldrb	r3, [r3, #2]
   1bd9a:	2b33      	cmp	r3, #51	; 0x33
   1bd9c:	d121      	bne.n	1bde2 <datsDmCback+0x8a>
    if (datsOobCfg == NULL)
   1bd9e:	4b21      	ldr	r3, [pc, #132]	; (1be24 <datsDmCback+0xcc>)
   1bda0:	681b      	ldr	r3, [r3, #0]
   1bda2:	2b00      	cmp	r3, #0
   1bda4:	d105      	bne.n	1bdb2 <datsDmCback+0x5a>
      datsOobCfg = WsfBufAlloc(sizeof(dmSecLescOobCfg_t));
   1bda6:	2040      	movs	r0, #64	; 0x40
   1bda8:	f7fc fac8 	bl	1833c <WsfBufAlloc>
   1bdac:	4602      	mov	r2, r0
   1bdae:	4b1d      	ldr	r3, [pc, #116]	; (1be24 <datsDmCback+0xcc>)
   1bdb0:	601a      	str	r2, [r3, #0]
    if (datsOobCfg)
   1bdb2:	4b1c      	ldr	r3, [pc, #112]	; (1be24 <datsDmCback+0xcc>)
   1bdb4:	681b      	ldr	r3, [r3, #0]
   1bdb6:	2b00      	cmp	r3, #0
   1bdb8:	d02f      	beq.n	1be1a <datsDmCback+0xc2>
      Calc128Cpy(datsOobCfg->localConfirm, pDmEvt->oobCalcInd.confirm);
   1bdba:	4b1a      	ldr	r3, [pc, #104]	; (1be24 <datsDmCback+0xcc>)
   1bdbc:	681b      	ldr	r3, [r3, #0]
   1bdbe:	f103 0210 	add.w	r2, r3, #16
   1bdc2:	9b01      	ldr	r3, [sp, #4]
   1bdc4:	3304      	adds	r3, #4
   1bdc6:	4619      	mov	r1, r3
   1bdc8:	4610      	mov	r0, r2
   1bdca:	f7ff fac2 	bl	1b352 <Calc128Cpy>
      Calc128Cpy(datsOobCfg->localRandom, pDmEvt->oobCalcInd.random);
   1bdce:	4b15      	ldr	r3, [pc, #84]	; (1be24 <datsDmCback+0xcc>)
   1bdd0:	681b      	ldr	r3, [r3, #0]
   1bdd2:	461a      	mov	r2, r3
   1bdd4:	9b01      	ldr	r3, [sp, #4]
   1bdd6:	3314      	adds	r3, #20
   1bdd8:	4619      	mov	r1, r3
   1bdda:	4610      	mov	r0, r2
   1bddc:	f7ff fab9 	bl	1b352 <Calc128Cpy>
}
   1bde0:	e01b      	b.n	1be1a <datsDmCback+0xc2>
    len = DmSizeOfEvt(pDmEvt);
   1bde2:	9801      	ldr	r0, [sp, #4]
   1bde4:	f7f6 f918 	bl	12018 <DmSizeOfEvt>
   1bde8:	4603      	mov	r3, r0
   1bdea:	f8ad 301e 	strh.w	r3, [sp, #30]
    if ((pMsg = WsfMsgAlloc(len)) != NULL)
   1bdee:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1bdf2:	4618      	mov	r0, r3
   1bdf4:	f7fc fb3d 	bl	18472 <WsfMsgAlloc>
   1bdf8:	9006      	str	r0, [sp, #24]
   1bdfa:	9b06      	ldr	r3, [sp, #24]
   1bdfc:	2b00      	cmp	r3, #0
   1bdfe:	d00c      	beq.n	1be1a <datsDmCback+0xc2>
      memcpy(pMsg, pDmEvt, len);
   1be00:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1be04:	461a      	mov	r2, r3
   1be06:	9901      	ldr	r1, [sp, #4]
   1be08:	9806      	ldr	r0, [sp, #24]
   1be0a:	f7f0 f9a9 	bl	c160 <memcpy>
      WsfMsgSend(datsCb.handlerId, pMsg);
   1be0e:	4b06      	ldr	r3, [pc, #24]	; (1be28 <datsDmCback+0xd0>)
   1be10:	781b      	ldrb	r3, [r3, #0]
   1be12:	9906      	ldr	r1, [sp, #24]
   1be14:	4618      	mov	r0, r3
   1be16:	f7fc fb50 	bl	184ba <WsfMsgSend>
}
   1be1a:	bf00      	nop
   1be1c:	b009      	add	sp, #36	; 0x24
   1be1e:	f85d fb04 	ldr.w	pc, [sp], #4
   1be22:	bf00      	nop
   1be24:	1000429c 	.word	0x1000429c
   1be28:	10004298 	.word	0x10004298

0001be2c <datsAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void datsAttCback(attEvt_t *pEvt)
{
   1be2c:	b500      	push	{lr}
   1be2e:	b083      	sub	sp, #12
   1be30:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO0("datsATTCback");
   1be32:	4808      	ldr	r0, [pc, #32]	; (1be54 <datsAttCback+0x28>)
   1be34:	f7fc ff88 	bl	18d48 <WsfTrace>

  if (pEvt->hdr.status != ATT_SUCCESS) {
   1be38:	9b01      	ldr	r3, [sp, #4]
   1be3a:	78db      	ldrb	r3, [r3, #3]
   1be3c:	2b00      	cmp	r3, #0
   1be3e:	d005      	beq.n	1be4c <datsAttCback+0x20>
      APP_TRACE_INFO1("Failed to send data, error 0x%x", pEvt->hdr.status);
   1be40:	9b01      	ldr	r3, [sp, #4]
   1be42:	78db      	ldrb	r3, [r3, #3]
   1be44:	4619      	mov	r1, r3
   1be46:	4804      	ldr	r0, [pc, #16]	; (1be58 <datsAttCback+0x2c>)
   1be48:	f7fc ff7e 	bl	18d48 <WsfTrace>
  }

  // this is good place if you want to create a
  // wait a little, do a new measurement, store the values and
  // call DatsSendData()
}
   1be4c:	bf00      	nop
   1be4e:	b003      	add	sp, #12
   1be50:	f85d fb04 	ldr.w	pc, [sp], #4
   1be54:	00028cc0 	.word	0x00028cc0
   1be58:	00028cd0 	.word	0x00028cd0

0001be5c <datsCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void datsCccCback(attsCccEvt_t *pEvt)
{
   1be5c:	b500      	push	{lr}
   1be5e:	b085      	sub	sp, #20
   1be60:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO0("datsCccCback");
   1be62:	480f      	ldr	r0, [pc, #60]	; (1bea0 <datsCccCback+0x44>)
   1be64:	f7fc ff70 	bl	18d48 <WsfTrace>
  appDbHdl_t    dbHdl;

  /* if CCC not set from initialization and there's a device record */
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1be68:	9b01      	ldr	r3, [sp, #4]
   1be6a:	889b      	ldrh	r3, [r3, #4]
   1be6c:	2b00      	cmp	r3, #0
   1be6e:	d012      	beq.n	1be96 <datsCccCback+0x3a>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE))
   1be70:	9b01      	ldr	r3, [sp, #4]
   1be72:	881b      	ldrh	r3, [r3, #0]
   1be74:	b2db      	uxtb	r3, r3
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1be76:	4618      	mov	r0, r3
   1be78:	f007 fd2e 	bl	238d8 <AppDbGetHdl>
   1be7c:	9003      	str	r0, [sp, #12]
   1be7e:	9b03      	ldr	r3, [sp, #12]
   1be80:	2b00      	cmp	r3, #0
   1be82:	d008      	beq.n	1be96 <datsCccCback+0x3a>
  {
    /* store value in device database */
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   1be84:	9b01      	ldr	r3, [sp, #4]
   1be86:	7a1b      	ldrb	r3, [r3, #8]
   1be88:	b299      	uxth	r1, r3
   1be8a:	9b01      	ldr	r3, [sp, #4]
   1be8c:	88db      	ldrh	r3, [r3, #6]
   1be8e:	461a      	mov	r2, r3
   1be90:	9803      	ldr	r0, [sp, #12]
   1be92:	f000 fc84 	bl	1c79e <AppDbSetCccTblValue>
  }
}
   1be96:	bf00      	nop
   1be98:	b005      	add	sp, #20
   1be9a:	f85d fb04 	ldr.w	pc, [sp], #4
   1be9e:	bf00      	nop
   1bea0:	00028cf0 	.word	0x00028cf0

0001bea4 <datsWpWriteCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t datsWpWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                          uint16_t offset, uint16_t len, uint8_t *pValue, attsAttr_t *pAttr)
{
   1bea4:	b510      	push	{r4, lr}
   1bea6:	b082      	sub	sp, #8
   1bea8:	4604      	mov	r4, r0
   1beaa:	4608      	mov	r0, r1
   1beac:	4611      	mov	r1, r2
   1beae:	461a      	mov	r2, r3
   1beb0:	4623      	mov	r3, r4
   1beb2:	f88d 3007 	strb.w	r3, [sp, #7]
   1beb6:	4603      	mov	r3, r0
   1beb8:	f8ad 3004 	strh.w	r3, [sp, #4]
   1bebc:	460b      	mov	r3, r1
   1bebe:	f88d 3006 	strb.w	r3, [sp, #6]
   1bec2:	4613      	mov	r3, r2
   1bec4:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* print received data */
  APP_TRACE_INFO1("datsWpWriteCback: %c",(const char*) pValue);
   1bec8:	9905      	ldr	r1, [sp, #20]
   1beca:	4806      	ldr	r0, [pc, #24]	; (1bee4 <datsWpWriteCback+0x40>)
   1becc:	f7fc ff3c 	bl	18d48 <WsfTrace>

  // depending on what you receive from the client you can decide to stay in polling mode
  // or go to streaming mode on this server

  /* send back some data */
  datsSendData(connId);
   1bed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bed4:	4618      	mov	r0, r3
   1bed6:	f7ff fee7 	bl	1bca8 <datsSendData>

  return ATT_SUCCESS;
   1beda:	2300      	movs	r3, #0
}
   1bedc:	4618      	mov	r0, r3
   1bede:	b002      	add	sp, #8
   1bee0:	bd10      	pop	{r4, pc}
   1bee2:	bf00      	nop
   1bee4:	00028d00 	.word	0x00028d00

0001bee8 <datsSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void datsSetup(dmEvt_t *pMsg)
{
   1bee8:	b500      	push	{lr}
   1beea:	b083      	sub	sp, #12
   1beec:	9001      	str	r0, [sp, #4]
  /* set advertising and scan response data for discoverable mode */
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(datsAdvDataDisc), (uint8_t *) datsAdvDataDisc);
   1beee:	4a0d      	ldr	r2, [pc, #52]	; (1bf24 <datsSetup+0x3c>)
   1bef0:	2107      	movs	r1, #7
   1bef2:	2002      	movs	r0, #2
   1bef4:	f009 f89e 	bl	25034 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(datsScanDataDisc), (uint8_t *) datsScanDataDisc);
   1bef8:	4a0b      	ldr	r2, [pc, #44]	; (1bf28 <datsSetup+0x40>)
   1befa:	2109      	movs	r1, #9
   1befc:	2003      	movs	r0, #3
   1befe:	f009 f899 	bl	25034 <AppAdvSetData>

  /* set advertising and scan response data for connectable mode */
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, sizeof(datsAdvDataDisc), (uint8_t *) datsAdvDataDisc);
   1bf02:	4a08      	ldr	r2, [pc, #32]	; (1bf24 <datsSetup+0x3c>)
   1bf04:	2107      	movs	r1, #7
   1bf06:	2000      	movs	r0, #0
   1bf08:	f009 f894 	bl	25034 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(datsScanDataDisc), (uint8_t *) datsScanDataDisc);
   1bf0c:	4a06      	ldr	r2, [pc, #24]	; (1bf28 <datsSetup+0x40>)
   1bf0e:	2109      	movs	r1, #9
   1bf10:	2001      	movs	r0, #1
   1bf12:	f009 f88f 	bl	25034 <AppAdvSetData>

  /* start advertising; automatically set connectable/discoverable mode and bondable mode */
  AppAdvStart(APP_MODE_AUTO_INIT);
   1bf16:	2002      	movs	r0, #2
   1bf18:	f009 f8b2 	bl	25080 <AppAdvStart>
}
   1bf1c:	bf00      	nop
   1bf1e:	b003      	add	sp, #12
   1bf20:	f85d fb04 	ldr.w	pc, [sp], #4
   1bf24:	00029ac8 	.word	0x00029ac8
   1bf28:	00029ad0 	.word	0x00029ad0

0001bf2c <datsProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void datsProcMsg(dmEvt_t *pMsg)
{
   1bf2c:	b500      	push	{lr}
   1bf2e:	b085      	sub	sp, #20
   1bf30:	9001      	str	r0, [sp, #4]
  uint8_t uiEvent = APP_UI_NONE;
   1bf32:	2300      	movs	r3, #0
   1bf34:	f88d 300f 	strb.w	r3, [sp, #15]

  switch(pMsg->hdr.event)
   1bf38:	9b01      	ldr	r3, [sp, #4]
   1bf3a:	789b      	ldrb	r3, [r3, #2]
   1bf3c:	3b12      	subs	r3, #18
   1bf3e:	2b55      	cmp	r3, #85	; 0x55
   1bf40:	f200 8103 	bhi.w	1c14a <datsProcMsg+0x21e>
   1bf44:	a201      	add	r2, pc, #4	; (adr r2, 1bf4c <datsProcMsg+0x20>)
   1bf46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bf4a:	bf00      	nop
   1bf4c:	0001c0a5 	.word	0x0001c0a5
   1bf50:	0001c14b 	.word	0x0001c14b
   1bf54:	0001c14b 	.word	0x0001c14b
   1bf58:	0001c14b 	.word	0x0001c14b
   1bf5c:	0001c14b 	.word	0x0001c14b
   1bf60:	0001c14b 	.word	0x0001c14b
   1bf64:	0001c14b 	.word	0x0001c14b
   1bf68:	0001c14b 	.word	0x0001c14b
   1bf6c:	0001c14b 	.word	0x0001c14b
   1bf70:	0001c14b 	.word	0x0001c14b
   1bf74:	0001c14b 	.word	0x0001c14b
   1bf78:	0001c14b 	.word	0x0001c14b
   1bf7c:	0001c14b 	.word	0x0001c14b
   1bf80:	0001c14b 	.word	0x0001c14b
   1bf84:	0001c0b3 	.word	0x0001c0b3
   1bf88:	0001c0bf 	.word	0x0001c0bf
   1bf8c:	0001c0c7 	.word	0x0001c0c7
   1bf90:	0001c14b 	.word	0x0001c14b
   1bf94:	0001c14b 	.word	0x0001c14b
   1bf98:	0001c14b 	.word	0x0001c14b
   1bf9c:	0001c14b 	.word	0x0001c14b
   1bfa0:	0001c0cf 	.word	0x0001c0cf
   1bfa4:	0001c0d7 	.word	0x0001c0d7
   1bfa8:	0001c14b 	.word	0x0001c14b
   1bfac:	0001c0df 	.word	0x0001c0df
   1bfb0:	0001c0e7 	.word	0x0001c0e7
   1bfb4:	0001c0ef 	.word	0x0001c0ef
   1bfb8:	0001c0f7 	.word	0x0001c0f7
   1bfbc:	0001c0ff 	.word	0x0001c0ff
   1bfc0:	0001c14b 	.word	0x0001c14b
   1bfc4:	0001c14b 	.word	0x0001c14b
   1bfc8:	0001c14b 	.word	0x0001c14b
   1bfcc:	0001c14b 	.word	0x0001c14b
   1bfd0:	0001c14b 	.word	0x0001c14b
   1bfd4:	0001c14b 	.word	0x0001c14b
   1bfd8:	0001c141 	.word	0x0001c141
   1bfdc:	0001c14b 	.word	0x0001c14b
   1bfe0:	0001c14b 	.word	0x0001c14b
   1bfe4:	0001c14b 	.word	0x0001c14b
   1bfe8:	0001c14b 	.word	0x0001c14b
   1bfec:	0001c14b 	.word	0x0001c14b
   1bff0:	0001c14b 	.word	0x0001c14b
   1bff4:	0001c14b 	.word	0x0001c14b
   1bff8:	0001c14b 	.word	0x0001c14b
   1bffc:	0001c14b 	.word	0x0001c14b
   1c000:	0001c14b 	.word	0x0001c14b
   1c004:	0001c14b 	.word	0x0001c14b
   1c008:	0001c14b 	.word	0x0001c14b
   1c00c:	0001c14b 	.word	0x0001c14b
   1c010:	0001c14b 	.word	0x0001c14b
   1c014:	0001c14b 	.word	0x0001c14b
   1c018:	0001c14b 	.word	0x0001c14b
   1c01c:	0001c14b 	.word	0x0001c14b
   1c020:	0001c14b 	.word	0x0001c14b
   1c024:	0001c14b 	.word	0x0001c14b
   1c028:	0001c14b 	.word	0x0001c14b
   1c02c:	0001c14b 	.word	0x0001c14b
   1c030:	0001c14b 	.word	0x0001c14b
   1c034:	0001c14b 	.word	0x0001c14b
   1c038:	0001c14b 	.word	0x0001c14b
   1c03c:	0001c14b 	.word	0x0001c14b
   1c040:	0001c14b 	.word	0x0001c14b
   1c044:	0001c14b 	.word	0x0001c14b
   1c048:	0001c14b 	.word	0x0001c14b
   1c04c:	0001c14b 	.word	0x0001c14b
   1c050:	0001c14b 	.word	0x0001c14b
   1c054:	0001c14b 	.word	0x0001c14b
   1c058:	0001c14b 	.word	0x0001c14b
   1c05c:	0001c14b 	.word	0x0001c14b
   1c060:	0001c14b 	.word	0x0001c14b
   1c064:	0001c14b 	.word	0x0001c14b
   1c068:	0001c14b 	.word	0x0001c14b
   1c06c:	0001c14b 	.word	0x0001c14b
   1c070:	0001c14b 	.word	0x0001c14b
   1c074:	0001c14b 	.word	0x0001c14b
   1c078:	0001c14b 	.word	0x0001c14b
   1c07c:	0001c14b 	.word	0x0001c14b
   1c080:	0001c14b 	.word	0x0001c14b
   1c084:	0001c14b 	.word	0x0001c14b
   1c088:	0001c14b 	.word	0x0001c14b
   1c08c:	0001c14b 	.word	0x0001c14b
   1c090:	0001c14b 	.word	0x0001c14b
   1c094:	0001c14b 	.word	0x0001c14b
   1c098:	0001c14b 	.word	0x0001c14b
   1c09c:	0001c14b 	.word	0x0001c14b
   1c0a0:	0001c14b 	.word	0x0001c14b
  {
    case ATT_MTU_UPDATE_IND:
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
   1c0a4:	9b01      	ldr	r3, [sp, #4]
   1c0a6:	89db      	ldrh	r3, [r3, #14]
   1c0a8:	4619      	mov	r1, r3
   1c0aa:	482f      	ldr	r0, [pc, #188]	; (1c168 <datsProcMsg+0x23c>)
   1c0ac:	f7fc fe4c 	bl	18d48 <WsfTrace>
      break;
   1c0b0:	e04c      	b.n	1c14c <datsProcMsg+0x220>

    case DM_RESET_CMPL_IND:
      DmSecGenerateEccKeyReq();
   1c0b2:	f7f6 fcbb 	bl	12a2c <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_RESET_CMPL;
   1c0b6:	2301      	movs	r3, #1
   1c0b8:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0bc:	e046      	b.n	1c14c <datsProcMsg+0x220>

    case DM_ADV_START_IND:
      uiEvent = APP_UI_ADV_START;
   1c0be:	2303      	movs	r3, #3
   1c0c0:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0c4:	e042      	b.n	1c14c <datsProcMsg+0x220>

    case DM_ADV_STOP_IND:
      uiEvent = APP_UI_ADV_STOP;
   1c0c6:	2304      	movs	r3, #4
   1c0c8:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0cc:	e03e      	b.n	1c14c <datsProcMsg+0x220>

    case DM_CONN_OPEN_IND:
      uiEvent = APP_UI_CONN_OPEN;
   1c0ce:	2308      	movs	r3, #8
   1c0d0:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0d4:	e03a      	b.n	1c14c <datsProcMsg+0x220>

    case DM_CONN_CLOSE_IND:
      uiEvent = APP_UI_CONN_CLOSE;
   1c0d6:	2309      	movs	r3, #9
   1c0d8:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0dc:	e036      	b.n	1c14c <datsProcMsg+0x220>

    case DM_SEC_PAIR_CMPL_IND:
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   1c0de:	230a      	movs	r3, #10
   1c0e0:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0e4:	e032      	b.n	1c14c <datsProcMsg+0x220>

    case DM_SEC_PAIR_FAIL_IND:
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   1c0e6:	230b      	movs	r3, #11
   1c0e8:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0ec:	e02e      	b.n	1c14c <datsProcMsg+0x220>

    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   1c0ee:	230c      	movs	r3, #12
   1c0f0:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0f4:	e02a      	b.n	1c14c <datsProcMsg+0x220>

    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   1c0f6:	230d      	movs	r3, #13
   1c0f8:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c0fc:	e026      	b.n	1c14c <datsProcMsg+0x220>

    case DM_SEC_AUTH_REQ_IND:

      if (pMsg->authReq.oob)
   1c0fe:	9b01      	ldr	r3, [sp, #4]
   1c100:	791b      	ldrb	r3, [r3, #4]
   1c102:	2b00      	cmp	r3, #0
   1c104:	d017      	beq.n	1c136 <datsProcMsg+0x20a>
      {
        dmConnId_t connId = (dmConnId_t) pMsg->hdr.param;
   1c106:	9b01      	ldr	r3, [sp, #4]
   1c108:	881b      	ldrh	r3, [r3, #0]
   1c10a:	f88d 300e 	strb.w	r3, [sp, #14]
        /* TODO: Perform OOB Exchange with the peer. */


        /* TODO: Fill datsOobCfg peerConfirm and peerRandom with value passed out of band */

        if (datsOobCfg != NULL)
   1c10e:	4b17      	ldr	r3, [pc, #92]	; (1c16c <datsProcMsg+0x240>)
   1c110:	681b      	ldr	r3, [r3, #0]
   1c112:	2b00      	cmp	r3, #0
   1c114:	d007      	beq.n	1c126 <datsProcMsg+0x1fa>
        {
          DmSecSetOob(connId, datsOobCfg);
   1c116:	4b15      	ldr	r3, [pc, #84]	; (1c16c <datsProcMsg+0x240>)
   1c118:	681a      	ldr	r2, [r3, #0]
   1c11a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1c11e:	4611      	mov	r1, r2
   1c120:	4618      	mov	r0, r3
   1c122:	f7f6 fc07 	bl	12934 <DmSecSetOob>
        }

        DmSecAuthRsp(connId, 0, NULL);
   1c126:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1c12a:	2200      	movs	r2, #0
   1c12c:	2100      	movs	r1, #0
   1c12e:	4618      	mov	r0, r3
   1c130:	f7f6 fb59 	bl	127e6 <DmSecAuthRsp>
      }
      else
      {
        AppHandlePasskey(&pMsg->authReq);
      }
      break;
   1c134:	e00a      	b.n	1c14c <datsProcMsg+0x220>
        AppHandlePasskey(&pMsg->authReq);
   1c136:	9b01      	ldr	r3, [sp, #4]
   1c138:	4618      	mov	r0, r3
   1c13a:	f007 fb59 	bl	237f0 <AppHandlePasskey>
      break;
   1c13e:	e005      	b.n	1c14c <datsProcMsg+0x220>

    case DM_SEC_COMPARE_IND:
      AppHandleNumericComparison(&pMsg->cnfInd);
   1c140:	9b01      	ldr	r3, [sp, #4]
   1c142:	4618      	mov	r0, r3
   1c144:	f007 fb90 	bl	23868 <AppHandleNumericComparison>
      break;
   1c148:	e000      	b.n	1c14c <datsProcMsg+0x220>
        #endif
      }
      break;

      default:
      break;
   1c14a:	bf00      	nop
  }

  if (uiEvent != APP_UI_NONE)
   1c14c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c150:	2b00      	cmp	r3, #0
   1c152:	d004      	beq.n	1c15e <datsProcMsg+0x232>
  {
    AppUiAction(uiEvent);
   1c154:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c158:	4618      	mov	r0, r3
   1c15a:	f000 fb8d 	bl	1c878 <AppUiAction>
  }
}
   1c15e:	bf00      	nop
   1c160:	b005      	add	sp, #20
   1c162:	f85d fb04 	ldr.w	pc, [sp], #4
   1c166:	bf00      	nop
   1c168:	00028d18 	.word	0x00028d18
   1c16c:	1000429c 	.word	0x1000429c

0001c170 <DatsHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DatsHandlerInit(wsfHandlerId_t handlerId)
{
   1c170:	b500      	push	{lr}
   1c172:	b083      	sub	sp, #12
   1c174:	4603      	mov	r3, r0
   1c176:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_TRACE_INFO0("DatsHandlerInit");
   1c17a:	480f      	ldr	r0, [pc, #60]	; (1c1b8 <DatsHandlerInit+0x48>)
   1c17c:	f7fc fde4 	bl	18d48 <WsfTrace>

  /* store handler ID */
  datsCb.handlerId = handlerId;
   1c180:	4a0e      	ldr	r2, [pc, #56]	; (1c1bc <DatsHandlerInit+0x4c>)
   1c182:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c186:	7013      	strb	r3, [r2, #0]

  /* Set configuration pointers */
  pAppSlaveCfg = (appSlaveCfg_t *) &datsSlaveCfg;
   1c188:	4b0d      	ldr	r3, [pc, #52]	; (1c1c0 <DatsHandlerInit+0x50>)
   1c18a:	4a0e      	ldr	r2, [pc, #56]	; (1c1c4 <DatsHandlerInit+0x54>)
   1c18c:	601a      	str	r2, [r3, #0]
  pAppAdvCfg = (appAdvCfg_t *) &datsAdvCfg;
   1c18e:	4b0e      	ldr	r3, [pc, #56]	; (1c1c8 <DatsHandlerInit+0x58>)
   1c190:	4a0e      	ldr	r2, [pc, #56]	; (1c1cc <DatsHandlerInit+0x5c>)
   1c192:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &datsSecCfg;
   1c194:	4b0e      	ldr	r3, [pc, #56]	; (1c1d0 <DatsHandlerInit+0x60>)
   1c196:	4a0f      	ldr	r2, [pc, #60]	; (1c1d4 <DatsHandlerInit+0x64>)
   1c198:	601a      	str	r2, [r3, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &datsUpdateCfg;
   1c19a:	4b0f      	ldr	r3, [pc, #60]	; (1c1d8 <DatsHandlerInit+0x68>)
   1c19c:	4a0f      	ldr	r2, [pc, #60]	; (1c1dc <DatsHandlerInit+0x6c>)
   1c19e:	601a      	str	r2, [r3, #0]
  pSmpCfg = (smpCfg_t *) &datsSmpCfg;
   1c1a0:	4b0f      	ldr	r3, [pc, #60]	; (1c1e0 <DatsHandlerInit+0x70>)
   1c1a2:	4a10      	ldr	r2, [pc, #64]	; (1c1e4 <DatsHandlerInit+0x74>)
   1c1a4:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppSlaveInit();
   1c1a6:	f008 fb25 	bl	247f4 <AppSlaveInit>

  /* Set IRK for the local device */
  DmSecSetLocalIrk(localIrk);
   1c1aa:	480f      	ldr	r0, [pc, #60]	; (1c1e8 <DatsHandlerInit+0x78>)
   1c1ac:	f7f6 fb5e 	bl	1286c <DmSecSetLocalIrk>
}
   1c1b0:	bf00      	nop
   1c1b2:	b003      	add	sp, #12
   1c1b4:	f85d fb04 	ldr.w	pc, [sp], #4
   1c1b8:	00028d2c 	.word	0x00028d2c
   1c1bc:	10004298 	.word	0x10004298
   1c1c0:	10009748 	.word	0x10009748
   1c1c4:	00029a94 	.word	0x00029a94
   1c1c8:	1000976c 	.word	0x1000976c
   1c1cc:	00029a88 	.word	0x00029a88
   1c1d0:	10009760 	.word	0x10009760
   1c1d4:	00029a98 	.word	0x00029a98
   1c1d8:	10009744 	.word	0x10009744
   1c1dc:	00029ab8 	.word	0x00029ab8
   1c1e0:	10002b94 	.word	0x10002b94
   1c1e4:	00029aa0 	.word	0x00029aa0
   1c1e8:	10002bb0 	.word	0x10002bb0

0001c1ec <datsBtnCback>:
 *  \return None.
 */
/*************************************************************************************************/
// NOT USED, but you could use this if you want to include some buttons..
static void datsBtnCback(uint8_t btn)
{
   1c1ec:	b500      	push	{lr}
   1c1ee:	b083      	sub	sp, #12
   1c1f0:	4603      	mov	r3, r0
   1c1f2:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_TRACE_INFO0("datsBtnCback");
   1c1f6:	4806      	ldr	r0, [pc, #24]	; (1c210 <datsBtnCback+0x24>)
   1c1f8:	f7fc fda6 	bl	18d48 <WsfTrace>
  if (AppConnIsOpen() != DM_CONN_ID_NONE)
   1c1fc:	f007 fb4c 	bl	23898 <AppConnIsOpen>
   1c200:	4603      	mov	r3, r0
   1c202:	2b00      	cmp	r3, #0
   1c204:	d000      	beq.n	1c208 <datsBtnCback+0x1c>
  {
    switch (btn)
    {
      default:
        break;
   1c206:	bf00      	nop
    }
  }
}
   1c208:	bf00      	nop
   1c20a:	b003      	add	sp, #12
   1c20c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c210:	00028d3c 	.word	0x00028d3c

0001c214 <datsWsfBufDiagnostics>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void datsWsfBufDiagnostics(WsfBufDiag_t *pInfo)
{
   1c214:	b500      	push	{lr}
   1c216:	b083      	sub	sp, #12
   1c218:	9001      	str	r0, [sp, #4]
  if (pInfo->type == WSF_BUF_ALLOC_FAILED)
   1c21a:	9b01      	ldr	r3, [sp, #4]
   1c21c:	791b      	ldrb	r3, [r3, #4]
   1c21e:	2b01      	cmp	r3, #1
   1c220:	d108      	bne.n	1c234 <datsWsfBufDiagnostics+0x20>
  {
    APP_TRACE_INFO2("Dats got WSF Buffer Allocation Failure - Task: %d Len: %d",
   1c222:	9b01      	ldr	r3, [sp, #4]
   1c224:	781b      	ldrb	r3, [r3, #0]
   1c226:	4619      	mov	r1, r3
   1c228:	9b01      	ldr	r3, [sp, #4]
   1c22a:	885b      	ldrh	r3, [r3, #2]
   1c22c:	461a      	mov	r2, r3
   1c22e:	4803      	ldr	r0, [pc, #12]	; (1c23c <datsWsfBufDiagnostics+0x28>)
   1c230:	f7fc fd8a 	bl	18d48 <WsfTrace>
                     pInfo->param.alloc.taskId, pInfo->param.alloc.len);
  }
}
   1c234:	bf00      	nop
   1c236:	b003      	add	sp, #12
   1c238:	f85d fb04 	ldr.w	pc, [sp], #4
   1c23c:	00028d4c 	.word	0x00028d4c

0001c240 <DatsHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DatsHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1c240:	b500      	push	{lr}
   1c242:	b083      	sub	sp, #12
   1c244:	4603      	mov	r3, r0
   1c246:	9100      	str	r1, [sp, #0]
   1c248:	f88d 3007 	strb.w	r3, [sp, #7]
  if (pMsg != NULL)
   1c24c:	9b00      	ldr	r3, [sp, #0]
   1c24e:	2b00      	cmp	r3, #0
   1c250:	d016      	beq.n	1c280 <DatsHandler+0x40>
  {
    APP_TRACE_INFO1("Dats got evt %d", pMsg->event);
   1c252:	9b00      	ldr	r3, [sp, #0]
   1c254:	789b      	ldrb	r3, [r3, #2]
   1c256:	4619      	mov	r1, r3
   1c258:	480b      	ldr	r0, [pc, #44]	; (1c288 <DatsHandler+0x48>)
   1c25a:	f7fc fd75 	bl	18d48 <WsfTrace>

    if (pMsg->event >= DM_CBACK_START && pMsg->event <= DM_CBACK_END)
   1c25e:	9b00      	ldr	r3, [sp, #0]
   1c260:	789b      	ldrb	r3, [r3, #2]
   1c262:	2b1f      	cmp	r3, #31
   1c264:	d909      	bls.n	1c27a <DatsHandler+0x3a>
   1c266:	9b00      	ldr	r3, [sp, #0]
   1c268:	789b      	ldrb	r3, [r3, #2]
   1c26a:	2b67      	cmp	r3, #103	; 0x67
   1c26c:	d805      	bhi.n	1c27a <DatsHandler+0x3a>
    {
      /* process advertising and connection-related messages */
      AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   1c26e:	9800      	ldr	r0, [sp, #0]
   1c270:	f008 fb10 	bl	24894 <AppSlaveProcDmMsg>

      /* process security-related messages */
      AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   1c274:	9800      	ldr	r0, [sp, #0]
   1c276:	f008 fd77 	bl	24d68 <AppSlaveSecProcDmMsg>
    }

    /* perform profile and user interface-related operations */
    datsProcMsg((dmEvt_t *) pMsg);
   1c27a:	9800      	ldr	r0, [sp, #0]
   1c27c:	f7ff fe56 	bl	1bf2c <datsProcMsg>
  }
}
   1c280:	bf00      	nop
   1c282:	b003      	add	sp, #12
   1c284:	f85d fb04 	ldr.w	pc, [sp], #4
   1c288:	00028d88 	.word	0x00028d88

0001c28c <DatsStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DatsStart(void)
{
   1c28c:	b508      	push	{r3, lr}
  APP_TRACE_INFO0("DatsStart");
   1c28e:	4813      	ldr	r0, [pc, #76]	; (1c2dc <DatsStart+0x50>)
   1c290:	f7fc fd5a 	bl	18d48 <WsfTrace>

  /* Register for stack callbacks */
  DmRegister(datsDmCback);
   1c294:	4812      	ldr	r0, [pc, #72]	; (1c2e0 <DatsStart+0x54>)
   1c296:	f7f5 fe11 	bl	11ebc <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, datsDmCback);
   1c29a:	4911      	ldr	r1, [pc, #68]	; (1c2e0 <DatsStart+0x54>)
   1c29c:	2003      	movs	r0, #3
   1c29e:	f7f5 f90f 	bl	114c0 <DmConnRegister>
  AttRegister(datsAttCback);
   1c2a2:	4810      	ldr	r0, [pc, #64]	; (1c2e4 <DatsStart+0x58>)
   1c2a4:	f7fb fbc8 	bl	17a38 <AttRegister>
  AttConnRegister(AppServerConnCback);
   1c2a8:	480f      	ldr	r0, [pc, #60]	; (1c2e8 <DatsStart+0x5c>)
   1c2aa:	f7fb fbe5 	bl	17a78 <AttConnRegister>
  AttsCccRegister(DATS_NUM_CCC_IDX, (attsCccSet_t *) datsCccSet, datsCccCback);
   1c2ae:	4a0f      	ldr	r2, [pc, #60]	; (1c2ec <DatsStart+0x60>)
   1c2b0:	490f      	ldr	r1, [pc, #60]	; (1c2f0 <DatsStart+0x64>)
   1c2b2:	2002      	movs	r0, #2
   1c2b4:	f7f8 fae4 	bl	14880 <AttsCccRegister>

  /* Initialize attribute server database */
  SvcCoreAddGroup();
   1c2b8:	f008 ff12 	bl	250e0 <SvcCoreAddGroup>
  SvcWpCbackRegister(NULL, datsWpWriteCback);
   1c2bc:	490d      	ldr	r1, [pc, #52]	; (1c2f4 <DatsStart+0x68>)
   1c2be:	2000      	movs	r0, #0
   1c2c0:	f008 ff32 	bl	25128 <SvcWpCbackRegister>
  SvcWpAddGroup();
   1c2c4:	f008 ff28 	bl	25118 <SvcWpAddGroup>

  /* Register for app framework button callbacks */
  AppUiBtnRegister(datsBtnCback);
   1c2c8:	480b      	ldr	r0, [pc, #44]	; (1c2f8 <DatsStart+0x6c>)
   1c2ca:	f000 fbf1 	bl	1cab0 <AppUiBtnRegister>

  WsfBufDiagRegister(datsWsfBufDiagnostics);
   1c2ce:	480b      	ldr	r0, [pc, #44]	; (1c2fc <DatsStart+0x70>)
   1c2d0:	f7fc f8b2 	bl	18438 <WsfBufDiagRegister>

  /* Reset the device */
  DmDevReset();
   1c2d4:	f7f5 fd94 	bl	11e00 <DmDevReset>
}
   1c2d8:	bf00      	nop
   1c2da:	bd08      	pop	{r3, pc}
   1c2dc:	00028d98 	.word	0x00028d98
   1c2e0:	0001bd59 	.word	0x0001bd59
   1c2e4:	0001be2d 	.word	0x0001be2d
   1c2e8:	00023a13 	.word	0x00023a13
   1c2ec:	0001be5d 	.word	0x0001be5d
   1c2f0:	00029adc 	.word	0x00029adc
   1c2f4:	0001bea5 	.word	0x0001bea5
   1c2f8:	0001c1ed 	.word	0x0001c1ed
   1c2fc:	0001c215 	.word	0x0001c215

0001c300 <AppDbInit>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
  return;
   1c300:	bf00      	nop
}
   1c302:	4770      	bx	lr

0001c304 <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr, bool_t master_role)
{
   1c304:	b500      	push	{lr}
   1c306:	b085      	sub	sp, #20
   1c308:	4603      	mov	r3, r0
   1c30a:	9100      	str	r1, [sp, #0]
   1c30c:	f88d 3007 	strb.w	r3, [sp, #7]
   1c310:	4613      	mov	r3, r2
   1c312:	f88d 3006 	strb.w	r3, [sp, #6]
  appDbRec_t  *pRec = appDb.rec;
   1c316:	4b28      	ldr	r3, [pc, #160]	; (1c3b8 <AppDbNewRecord+0xb4>)
   1c318:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c31a:	2303      	movs	r3, #3
   1c31c:	f88d 300b 	strb.w	r3, [sp, #11]
   1c320:	e00c      	b.n	1c33c <AppDbNewRecord+0x38>
  {
    if (!pRec->inUse)
   1c322:	9b03      	ldr	r3, [sp, #12]
   1c324:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1c328:	2b00      	cmp	r3, #0
   1c32a:	d00c      	beq.n	1c346 <AppDbNewRecord+0x42>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c32c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c330:	3b01      	subs	r3, #1
   1c332:	f88d 300b 	strb.w	r3, [sp, #11]
   1c336:	9b03      	ldr	r3, [sp, #12]
   1c338:	33c4      	adds	r3, #196	; 0xc4
   1c33a:	9303      	str	r3, [sp, #12]
   1c33c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c340:	2b00      	cmp	r3, #0
   1c342:	d1ee      	bne.n	1c322 <AppDbNewRecord+0x1e>
   1c344:	e000      	b.n	1c348 <AppDbNewRecord+0x44>
    {
      break;
   1c346:	bf00      	nop
    }
  }

  /* if all records were allocated */
  if (i == 0)
   1c348:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c34c:	2b00      	cmp	r3, #0
   1c34e:	d10f      	bne.n	1c370 <AppDbNewRecord+0x6c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   1c350:	4b1a      	ldr	r3, [pc, #104]	; (1c3bc <AppDbNewRecord+0xb8>)
   1c352:	681b      	ldr	r3, [r3, #0]
   1c354:	9303      	str	r3, [sp, #12]

    /* get next record to overwrite */
    pAppDbNewRec++;
   1c356:	4b19      	ldr	r3, [pc, #100]	; (1c3bc <AppDbNewRecord+0xb8>)
   1c358:	681b      	ldr	r3, [r3, #0]
   1c35a:	33c4      	adds	r3, #196	; 0xc4
   1c35c:	4a17      	ldr	r2, [pc, #92]	; (1c3bc <AppDbNewRecord+0xb8>)
   1c35e:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   1c360:	4b16      	ldr	r3, [pc, #88]	; (1c3bc <AppDbNewRecord+0xb8>)
   1c362:	681b      	ldr	r3, [r3, #0]
   1c364:	4a16      	ldr	r2, [pc, #88]	; (1c3c0 <AppDbNewRecord+0xbc>)
   1c366:	4293      	cmp	r3, r2
   1c368:	d102      	bne.n	1c370 <AppDbNewRecord+0x6c>
    {
      pAppDbNewRec = appDb.rec;
   1c36a:	4b14      	ldr	r3, [pc, #80]	; (1c3bc <AppDbNewRecord+0xb8>)
   1c36c:	4a12      	ldr	r2, [pc, #72]	; (1c3b8 <AppDbNewRecord+0xb4>)
   1c36e:	601a      	str	r2, [r3, #0]
    }
  }

  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   1c370:	22c4      	movs	r2, #196	; 0xc4
   1c372:	2100      	movs	r1, #0
   1c374:	9803      	ldr	r0, [sp, #12]
   1c376:	f7ef ff8d 	bl	c294 <memset>
  pRec->inUse = TRUE;
   1c37a:	9b03      	ldr	r3, [sp, #12]
   1c37c:	2201      	movs	r2, #1
   1c37e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   1c382:	9b03      	ldr	r3, [sp, #12]
   1c384:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1c388:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   1c38a:	9b03      	ldr	r3, [sp, #12]
   1c38c:	9900      	ldr	r1, [sp, #0]
   1c38e:	4618      	mov	r0, r3
   1c390:	f7fe ff9a 	bl	1b2c8 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   1c394:	9b03      	ldr	r3, [sp, #12]
   1c396:	2200      	movs	r2, #0
   1c398:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   1c39c:	9b03      	ldr	r3, [sp, #12]
   1c39e:	2200      	movs	r2, #0
   1c3a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pRec->master_role = master_role;
   1c3a4:	9b03      	ldr	r3, [sp, #12]
   1c3a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1c3aa:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
  
  return (appDbHdl_t) pRec;
   1c3ae:	9b03      	ldr	r3, [sp, #12]
}
   1c3b0:	4618      	mov	r0, r3
   1c3b2:	b005      	add	sp, #20
   1c3b4:	f85d fb04 	ldr.w	pc, [sp], #4
   1c3b8:	100042a0 	.word	0x100042a0
   1c3bc:	10002bc0 	.word	0x10002bc0
   1c3c0:	100044ec 	.word	0x100044ec

0001c3c4 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   1c3c4:	b500      	push	{lr}
   1c3c6:	b085      	sub	sp, #20
   1c3c8:	9001      	str	r0, [sp, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   1c3ca:	9b01      	ldr	r3, [sp, #4]
   1c3cc:	2b00      	cmp	r3, #0
   1c3ce:	d102      	bne.n	1c3d6 <AppDbGetNextRecord+0x12>
  {
    pRec = appDb.rec;
   1c3d0:	4b14      	ldr	r3, [pc, #80]	; (1c424 <AppDbGetNextRecord+0x60>)
   1c3d2:	9303      	str	r3, [sp, #12]
   1c3d4:	e01c      	b.n	1c410 <AppDbGetNextRecord+0x4c>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   1c3d6:	9801      	ldr	r0, [sp, #4]
   1c3d8:	f000 f852 	bl	1c480 <AppDbRecordInUse>
   1c3dc:	4603      	mov	r3, r0
   1c3de:	2b00      	cmp	r3, #0
   1c3e0:	d005      	beq.n	1c3ee <AppDbGetNextRecord+0x2a>
  {
    pRec = (appDbRec_t *)hdl;
   1c3e2:	9b01      	ldr	r3, [sp, #4]
   1c3e4:	9303      	str	r3, [sp, #12]
    pRec++;
   1c3e6:	9b03      	ldr	r3, [sp, #12]
   1c3e8:	33c4      	adds	r3, #196	; 0xc4
   1c3ea:	9303      	str	r3, [sp, #12]
   1c3ec:	e010      	b.n	1c410 <AppDbGetNextRecord+0x4c>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   1c3ee:	2300      	movs	r3, #0
   1c3f0:	e013      	b.n	1c41a <AppDbGetNextRecord+0x56>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   1c3f2:	9b03      	ldr	r3, [sp, #12]
   1c3f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1c3f8:	2b00      	cmp	r3, #0
   1c3fa:	d006      	beq.n	1c40a <AppDbGetNextRecord+0x46>
   1c3fc:	9b03      	ldr	r3, [sp, #12]
   1c3fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1c402:	2b00      	cmp	r3, #0
   1c404:	d001      	beq.n	1c40a <AppDbGetNextRecord+0x46>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   1c406:	9b03      	ldr	r3, [sp, #12]
   1c408:	e007      	b.n	1c41a <AppDbGetNextRecord+0x56>
    }

    /* look for next record */
    pRec++;
   1c40a:	9b03      	ldr	r3, [sp, #12]
   1c40c:	33c4      	adds	r3, #196	; 0xc4
   1c40e:	9303      	str	r3, [sp, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   1c410:	9b03      	ldr	r3, [sp, #12]
   1c412:	4a05      	ldr	r2, [pc, #20]	; (1c428 <AppDbGetNextRecord+0x64>)
   1c414:	4293      	cmp	r3, r2
   1c416:	d3ec      	bcc.n	1c3f2 <AppDbGetNextRecord+0x2e>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   1c418:	2300      	movs	r3, #0
}
   1c41a:	4618      	mov	r0, r3
   1c41c:	b005      	add	sp, #20
   1c41e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c422:	bf00      	nop
   1c424:	100042a0 	.word	0x100042a0
   1c428:	100044ec 	.word	0x100044ec

0001c42c <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   1c42c:	b082      	sub	sp, #8
   1c42e:	9001      	str	r0, [sp, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   1c430:	9b01      	ldr	r3, [sp, #4]
   1c432:	2200      	movs	r2, #0
   1c434:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   1c438:	bf00      	nop
   1c43a:	b002      	add	sp, #8
   1c43c:	4770      	bx	lr

0001c43e <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   1c43e:	b082      	sub	sp, #8
   1c440:	9001      	str	r0, [sp, #4]
   1c442:	460b      	mov	r3, r1
   1c444:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   1c448:	9b01      	ldr	r3, [sp, #4]
   1c44a:	2201      	movs	r2, #1
   1c44c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   1c450:	9b01      	ldr	r3, [sp, #4]
   1c452:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1c456:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1c45a:	bf00      	nop
   1c45c:	b002      	add	sp, #8
   1c45e:	4770      	bx	lr

0001c460 <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   1c460:	b500      	push	{lr}
   1c462:	b083      	sub	sp, #12
   1c464:	9001      	str	r0, [sp, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   1c466:	9b01      	ldr	r3, [sp, #4]
   1c468:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1c46c:	2b00      	cmp	r3, #0
   1c46e:	d102      	bne.n	1c476 <AppDbCheckValidRecord+0x16>
  {
    AppDbDeleteRecord(hdl);
   1c470:	9801      	ldr	r0, [sp, #4]
   1c472:	f7ff ffdb 	bl	1c42c <AppDbDeleteRecord>
  }
}
   1c476:	bf00      	nop
   1c478:	b003      	add	sp, #12
   1c47a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001c480 <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   1c480:	b084      	sub	sp, #16
   1c482:	9001      	str	r0, [sp, #4]
  appDbRec_t  *pRec = appDb.rec;
   1c484:	4b12      	ldr	r3, [pc, #72]	; (1c4d0 <AppDbRecordInUse+0x50>)
   1c486:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c488:	2303      	movs	r3, #3
   1c48a:	f88d 300b 	strb.w	r3, [sp, #11]
   1c48e:	e017      	b.n	1c4c0 <AppDbRecordInUse+0x40>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   1c490:	9b03      	ldr	r3, [sp, #12]
   1c492:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1c496:	2b00      	cmp	r3, #0
   1c498:	d00a      	beq.n	1c4b0 <AppDbRecordInUse+0x30>
   1c49a:	9b03      	ldr	r3, [sp, #12]
   1c49c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1c4a0:	2b00      	cmp	r3, #0
   1c4a2:	d005      	beq.n	1c4b0 <AppDbRecordInUse+0x30>
   1c4a4:	9a03      	ldr	r2, [sp, #12]
   1c4a6:	9b01      	ldr	r3, [sp, #4]
   1c4a8:	429a      	cmp	r2, r3
   1c4aa:	d101      	bne.n	1c4b0 <AppDbRecordInUse+0x30>
    {
      return TRUE;
   1c4ac:	2301      	movs	r3, #1
   1c4ae:	e00c      	b.n	1c4ca <AppDbRecordInUse+0x4a>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c4b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c4b4:	3b01      	subs	r3, #1
   1c4b6:	f88d 300b 	strb.w	r3, [sp, #11]
   1c4ba:	9b03      	ldr	r3, [sp, #12]
   1c4bc:	33c4      	adds	r3, #196	; 0xc4
   1c4be:	9303      	str	r3, [sp, #12]
   1c4c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c4c4:	2b00      	cmp	r3, #0
   1c4c6:	d1e3      	bne.n	1c490 <AppDbRecordInUse+0x10>
    }
  }

  return FALSE;
   1c4c8:	2300      	movs	r3, #0
}
   1c4ca:	4618      	mov	r0, r3
   1c4cc:	b004      	add	sp, #16
   1c4ce:	4770      	bx	lr
   1c4d0:	100042a0 	.word	0x100042a0

0001c4d4 <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
   1c4d4:	b082      	sub	sp, #8
  appDbRec_t  *pRec = appDb.rec;
   1c4d6:	4b11      	ldr	r3, [pc, #68]	; (1c51c <AppDbCheckBonded+0x48>)
   1c4d8:	9301      	str	r3, [sp, #4]
  uint8_t     i;

  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c4da:	2303      	movs	r3, #3
   1c4dc:	f88d 3003 	strb.w	r3, [sp, #3]
   1c4e0:	e013      	b.n	1c50a <AppDbCheckBonded+0x36>
  {
    if (pRec->inUse && !pRec->master_role)
   1c4e2:	9b01      	ldr	r3, [sp, #4]
   1c4e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1c4e8:	2b00      	cmp	r3, #0
   1c4ea:	d006      	beq.n	1c4fa <AppDbCheckBonded+0x26>
   1c4ec:	9b01      	ldr	r3, [sp, #4]
   1c4ee:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   1c4f2:	2b00      	cmp	r3, #0
   1c4f4:	d101      	bne.n	1c4fa <AppDbCheckBonded+0x26>
    {
      return TRUE;
   1c4f6:	2301      	movs	r3, #1
   1c4f8:	e00c      	b.n	1c514 <AppDbCheckBonded+0x40>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c4fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1c4fe:	3b01      	subs	r3, #1
   1c500:	f88d 3003 	strb.w	r3, [sp, #3]
   1c504:	9b01      	ldr	r3, [sp, #4]
   1c506:	33c4      	adds	r3, #196	; 0xc4
   1c508:	9301      	str	r3, [sp, #4]
   1c50a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1c50e:	2b00      	cmp	r3, #0
   1c510:	d1e7      	bne.n	1c4e2 <AppDbCheckBonded+0xe>
    }
  }

  return FALSE;
   1c512:	2300      	movs	r3, #0
}
   1c514:	4618      	mov	r0, r3
   1c516:	b002      	add	sp, #8
   1c518:	4770      	bx	lr
   1c51a:	bf00      	nop
   1c51c:	100042a0 	.word	0x100042a0

0001c520 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   1c520:	b500      	push	{lr}
   1c522:	b085      	sub	sp, #20
   1c524:	4603      	mov	r3, r0
   1c526:	9100      	str	r1, [sp, #0]
   1c528:	f88d 3007 	strb.w	r3, [sp, #7]
  appDbRec_t  *pRec = appDb.rec;
   1c52c:	4b19      	ldr	r3, [pc, #100]	; (1c594 <AppDbFindByAddr+0x74>)
   1c52e:	9303      	str	r3, [sp, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   1c530:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c534:	4618      	mov	r0, r3
   1c536:	f7f5 fd4d 	bl	11fd4 <DmHostAddrType>
   1c53a:	4603      	mov	r3, r0
   1c53c:	f88d 300a 	strb.w	r3, [sp, #10]
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c540:	2303      	movs	r3, #3
   1c542:	f88d 300b 	strb.w	r3, [sp, #11]
   1c546:	e01c      	b.n	1c582 <AppDbFindByAddr+0x62>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1c548:	9b03      	ldr	r3, [sp, #12]
   1c54a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1c54e:	2b00      	cmp	r3, #0
   1c550:	d00f      	beq.n	1c572 <AppDbFindByAddr+0x52>
   1c552:	9b03      	ldr	r3, [sp, #12]
   1c554:	799b      	ldrb	r3, [r3, #6]
   1c556:	f89d 200a 	ldrb.w	r2, [sp, #10]
   1c55a:	429a      	cmp	r2, r3
   1c55c:	d109      	bne.n	1c572 <AppDbFindByAddr+0x52>
   1c55e:	9b03      	ldr	r3, [sp, #12]
   1c560:	9900      	ldr	r1, [sp, #0]
   1c562:	4618      	mov	r0, r3
   1c564:	f7fe febd 	bl	1b2e2 <BdaCmp>
   1c568:	4603      	mov	r3, r0
   1c56a:	2b00      	cmp	r3, #0
   1c56c:	d001      	beq.n	1c572 <AppDbFindByAddr+0x52>
    {
      return (appDbHdl_t) pRec;
   1c56e:	9b03      	ldr	r3, [sp, #12]
   1c570:	e00c      	b.n	1c58c <AppDbFindByAddr+0x6c>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c572:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c576:	3b01      	subs	r3, #1
   1c578:	f88d 300b 	strb.w	r3, [sp, #11]
   1c57c:	9b03      	ldr	r3, [sp, #12]
   1c57e:	33c4      	adds	r3, #196	; 0xc4
   1c580:	9303      	str	r3, [sp, #12]
   1c582:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c586:	2b00      	cmp	r3, #0
   1c588:	d1de      	bne.n	1c548 <AppDbFindByAddr+0x28>
    }
  }

  return APP_DB_HDL_NONE;
   1c58a:	2300      	movs	r3, #0
}
   1c58c:	4618      	mov	r0, r3
   1c58e:	b005      	add	sp, #20
   1c590:	f85d fb04 	ldr.w	pc, [sp], #4
   1c594:	100042a0 	.word	0x100042a0

0001c598 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   1c598:	b500      	push	{lr}
   1c59a:	b085      	sub	sp, #20
   1c59c:	4603      	mov	r3, r0
   1c59e:	9100      	str	r1, [sp, #0]
   1c5a0:	f8ad 3006 	strh.w	r3, [sp, #6]
  appDbRec_t  *pRec = appDb.rec;
   1c5a4:	4b17      	ldr	r3, [pc, #92]	; (1c604 <AppDbFindByLtkReq+0x6c>)
   1c5a6:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c5a8:	2303      	movs	r3, #3
   1c5aa:	f88d 300b 	strb.w	r3, [sp, #11]
   1c5ae:	e01f      	b.n	1c5f0 <AppDbFindByLtkReq+0x58>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   1c5b0:	9b03      	ldr	r3, [sp, #12]
   1c5b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1c5b6:	2b00      	cmp	r3, #0
   1c5b8:	d012      	beq.n	1c5e0 <AppDbFindByLtkReq+0x48>
   1c5ba:	9b03      	ldr	r3, [sp, #12]
   1c5bc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   1c5c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1c5c4:	429a      	cmp	r2, r3
   1c5c6:	d10b      	bne.n	1c5e0 <AppDbFindByLtkReq+0x48>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   1c5c8:	9b03      	ldr	r3, [sp, #12]
   1c5ca:	3344      	adds	r3, #68	; 0x44
   1c5cc:	2208      	movs	r2, #8
   1c5ce:	9900      	ldr	r1, [sp, #0]
   1c5d0:	4618      	mov	r0, r3
   1c5d2:	f7ef fd95 	bl	c100 <memcmp>
   1c5d6:	4603      	mov	r3, r0
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   1c5d8:	2b00      	cmp	r3, #0
   1c5da:	d101      	bne.n	1c5e0 <AppDbFindByLtkReq+0x48>
    {
      return (appDbHdl_t) pRec;
   1c5dc:	9b03      	ldr	r3, [sp, #12]
   1c5de:	e00c      	b.n	1c5fa <AppDbFindByLtkReq+0x62>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1c5e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c5e4:	3b01      	subs	r3, #1
   1c5e6:	f88d 300b 	strb.w	r3, [sp, #11]
   1c5ea:	9b03      	ldr	r3, [sp, #12]
   1c5ec:	33c4      	adds	r3, #196	; 0xc4
   1c5ee:	9303      	str	r3, [sp, #12]
   1c5f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c5f4:	2b00      	cmp	r3, #0
   1c5f6:	d1db      	bne.n	1c5b0 <AppDbFindByLtkReq+0x18>
    }
  }

  return APP_DB_HDL_NONE;
   1c5f8:	2300      	movs	r3, #0
}
   1c5fa:	4618      	mov	r0, r3
   1c5fc:	b005      	add	sp, #20
   1c5fe:	f85d fb04 	ldr.w	pc, [sp], #4
   1c602:	bf00      	nop
   1c604:	100042a0 	.word	0x100042a0

0001c608 <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   1c608:	b086      	sub	sp, #24
   1c60a:	9003      	str	r0, [sp, #12]
   1c60c:	460b      	mov	r3, r1
   1c60e:	9201      	str	r2, [sp, #4]
   1c610:	f88d 300b 	strb.w	r3, [sp, #11]
  dmSecKey_t *pKey = NULL;
   1c614:	2300      	movs	r3, #0
   1c616:	9305      	str	r3, [sp, #20]

  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   1c618:	9b03      	ldr	r3, [sp, #12]
   1c61a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   1c61e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c622:	4013      	ands	r3, r2
   1c624:	b2db      	uxtb	r3, r3
   1c626:	2b00      	cmp	r3, #0
   1c628:	d033      	beq.n	1c692 <AppDbGetKey+0x8a>
  {
    switch(type)
   1c62a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c62e:	3b01      	subs	r3, #1
   1c630:	2b07      	cmp	r3, #7
   1c632:	d82d      	bhi.n	1c690 <AppDbGetKey+0x88>
   1c634:	a201      	add	r2, pc, #4	; (adr r2, 1c63c <AppDbGetKey+0x34>)
   1c636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c63a:	bf00      	nop
   1c63c:	0001c65d 	.word	0x0001c65d
   1c640:	0001c66f 	.word	0x0001c66f
   1c644:	0001c691 	.word	0x0001c691
   1c648:	0001c681 	.word	0x0001c681
   1c64c:	0001c691 	.word	0x0001c691
   1c650:	0001c691 	.word	0x0001c691
   1c654:	0001c691 	.word	0x0001c691
   1c658:	0001c689 	.word	0x0001c689
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   1c65c:	9b03      	ldr	r3, [sp, #12]
   1c65e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   1c662:	9b01      	ldr	r3, [sp, #4]
   1c664:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   1c666:	9b03      	ldr	r3, [sp, #12]
   1c668:	3334      	adds	r3, #52	; 0x34
   1c66a:	9305      	str	r3, [sp, #20]
        break;
   1c66c:	e011      	b.n	1c692 <AppDbGetKey+0x8a>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   1c66e:	9b03      	ldr	r3, [sp, #12]
   1c670:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   1c674:	9b01      	ldr	r3, [sp, #4]
   1c676:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   1c678:	9b03      	ldr	r3, [sp, #12]
   1c67a:	3350      	adds	r3, #80	; 0x50
   1c67c:	9305      	str	r3, [sp, #20]
        break;
   1c67e:	e008      	b.n	1c692 <AppDbGetKey+0x8a>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   1c680:	9b03      	ldr	r3, [sp, #12]
   1c682:	3307      	adds	r3, #7
   1c684:	9305      	str	r3, [sp, #20]
        break;
   1c686:	e004      	b.n	1c692 <AppDbGetKey+0x8a>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   1c688:	9b03      	ldr	r3, [sp, #12]
   1c68a:	331e      	adds	r3, #30
   1c68c:	9305      	str	r3, [sp, #20]
        break;
   1c68e:	e000      	b.n	1c692 <AppDbGetKey+0x8a>

      default:
        break;
   1c690:	bf00      	nop
    }
  }

  return pKey;
   1c692:	9b05      	ldr	r3, [sp, #20]
}
   1c694:	4618      	mov	r0, r3
   1c696:	b006      	add	sp, #24
   1c698:	4770      	bx	lr
   1c69a:	bf00      	nop

0001c69c <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   1c69c:	b530      	push	{r4, r5, lr}
   1c69e:	b083      	sub	sp, #12
   1c6a0:	9001      	str	r0, [sp, #4]
   1c6a2:	9100      	str	r1, [sp, #0]
  switch(pKey->type)
   1c6a4:	9b00      	ldr	r3, [sp, #0]
   1c6a6:	7f9b      	ldrb	r3, [r3, #30]
   1c6a8:	3b01      	subs	r3, #1
   1c6aa:	2b07      	cmp	r3, #7
   1c6ac:	d86b      	bhi.n	1c786 <AppDbSetKey+0xea>
   1c6ae:	a201      	add	r2, pc, #4	; (adr r2, 1c6b4 <AppDbSetKey+0x18>)
   1c6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c6b4:	0001c6d5 	.word	0x0001c6d5
   1c6b8:	0001c6ff 	.word	0x0001c6ff
   1c6bc:	0001c787 	.word	0x0001c787
   1c6c0:	0001c729 	.word	0x0001c729
   1c6c4:	0001c787 	.word	0x0001c787
   1c6c8:	0001c787 	.word	0x0001c787
   1c6cc:	0001c787 	.word	0x0001c787
   1c6d0:	0001c765 	.word	0x0001c765
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   1c6d4:	9b00      	ldr	r3, [sp, #0]
   1c6d6:	7fda      	ldrb	r2, [r3, #31]
   1c6d8:	9b01      	ldr	r3, [sp, #4]
   1c6da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   1c6de:	9a01      	ldr	r2, [sp, #4]
   1c6e0:	9b00      	ldr	r3, [sp, #0]
   1c6e2:	f102 0434 	add.w	r4, r2, #52	; 0x34
   1c6e6:	1d1d      	adds	r5, r3, #4
   1c6e8:	6828      	ldr	r0, [r5, #0]
   1c6ea:	6869      	ldr	r1, [r5, #4]
   1c6ec:	68aa      	ldr	r2, [r5, #8]
   1c6ee:	68eb      	ldr	r3, [r5, #12]
   1c6f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c6f2:	6928      	ldr	r0, [r5, #16]
   1c6f4:	6969      	ldr	r1, [r5, #20]
   1c6f6:	c403      	stmia	r4!, {r0, r1}
   1c6f8:	8b2b      	ldrh	r3, [r5, #24]
   1c6fa:	8023      	strh	r3, [r4, #0]
      break;
   1c6fc:	e044      	b.n	1c788 <AppDbSetKey+0xec>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   1c6fe:	9b00      	ldr	r3, [sp, #0]
   1c700:	7fda      	ldrb	r2, [r3, #31]
   1c702:	9b01      	ldr	r3, [sp, #4]
   1c704:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   1c708:	9a01      	ldr	r2, [sp, #4]
   1c70a:	9b00      	ldr	r3, [sp, #0]
   1c70c:	f102 0450 	add.w	r4, r2, #80	; 0x50
   1c710:	1d1d      	adds	r5, r3, #4
   1c712:	6828      	ldr	r0, [r5, #0]
   1c714:	6869      	ldr	r1, [r5, #4]
   1c716:	68aa      	ldr	r2, [r5, #8]
   1c718:	68eb      	ldr	r3, [r5, #12]
   1c71a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c71c:	6928      	ldr	r0, [r5, #16]
   1c71e:	6969      	ldr	r1, [r5, #20]
   1c720:	c403      	stmia	r4!, {r0, r1}
   1c722:	8b2b      	ldrh	r3, [r5, #24]
   1c724:	8023      	strh	r3, [r4, #0]
      break;
   1c726:	e02f      	b.n	1c788 <AppDbSetKey+0xec>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   1c728:	9b01      	ldr	r3, [sp, #4]
   1c72a:	9a00      	ldr	r2, [sp, #0]
   1c72c:	3307      	adds	r3, #7
   1c72e:	3204      	adds	r2, #4
   1c730:	6811      	ldr	r1, [r2, #0]
   1c732:	6855      	ldr	r5, [r2, #4]
   1c734:	6894      	ldr	r4, [r2, #8]
   1c736:	68d0      	ldr	r0, [r2, #12]
   1c738:	6019      	str	r1, [r3, #0]
   1c73a:	605d      	str	r5, [r3, #4]
   1c73c:	609c      	str	r4, [r3, #8]
   1c73e:	60d8      	str	r0, [r3, #12]
   1c740:	6911      	ldr	r1, [r2, #16]
   1c742:	6119      	str	r1, [r3, #16]
   1c744:	8a91      	ldrh	r1, [r2, #20]
   1c746:	7d92      	ldrb	r2, [r2, #22]
   1c748:	8299      	strh	r1, [r3, #20]
   1c74a:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   1c74c:	9b00      	ldr	r3, [sp, #0]
   1c74e:	7e9a      	ldrb	r2, [r3, #26]
   1c750:	9b01      	ldr	r3, [sp, #4]
   1c752:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   1c754:	9a01      	ldr	r2, [sp, #4]
   1c756:	9b00      	ldr	r3, [sp, #0]
   1c758:	3314      	adds	r3, #20
   1c75a:	4619      	mov	r1, r3
   1c75c:	4610      	mov	r0, r2
   1c75e:	f7fe fdb3 	bl	1b2c8 <BdaCpy>
      break;
   1c762:	e011      	b.n	1c788 <AppDbSetKey+0xec>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   1c764:	9b01      	ldr	r3, [sp, #4]
   1c766:	9a00      	ldr	r2, [sp, #0]
   1c768:	331e      	adds	r3, #30
   1c76a:	3204      	adds	r2, #4
   1c76c:	6814      	ldr	r4, [r2, #0]
   1c76e:	6850      	ldr	r0, [r2, #4]
   1c770:	6891      	ldr	r1, [r2, #8]
   1c772:	68d2      	ldr	r2, [r2, #12]
   1c774:	601c      	str	r4, [r3, #0]
   1c776:	6058      	str	r0, [r3, #4]
   1c778:	6099      	str	r1, [r3, #8]
   1c77a:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   1c77c:	9b01      	ldr	r3, [sp, #4]
   1c77e:	2200      	movs	r2, #0
   1c780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   1c784:	e000      	b.n	1c788 <AppDbSetKey+0xec>

    default:
      break;
   1c786:	bf00      	nop
  }
}
   1c788:	bf00      	nop
   1c78a:	b003      	add	sp, #12
   1c78c:	bd30      	pop	{r4, r5, pc}
   1c78e:	bf00      	nop

0001c790 <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
   1c790:	b082      	sub	sp, #8
   1c792:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
   1c794:	9b01      	ldr	r3, [sp, #4]
   1c796:	336c      	adds	r3, #108	; 0x6c
}
   1c798:	4618      	mov	r0, r3
   1c79a:	b002      	add	sp, #8
   1c79c:	4770      	bx	lr

0001c79e <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
   1c79e:	b082      	sub	sp, #8
   1c7a0:	9001      	str	r0, [sp, #4]
   1c7a2:	460b      	mov	r3, r1
   1c7a4:	f8ad 3002 	strh.w	r3, [sp, #2]
   1c7a8:	4613      	mov	r3, r2
   1c7aa:	f8ad 3000 	strh.w	r3, [sp]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);

  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   1c7ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1c7b2:	9a01      	ldr	r2, [sp, #4]
   1c7b4:	3334      	adds	r3, #52	; 0x34
   1c7b6:	005b      	lsls	r3, r3, #1
   1c7b8:	4413      	add	r3, r2
   1c7ba:	f8bd 2000 	ldrh.w	r2, [sp]
   1c7be:	809a      	strh	r2, [r3, #4]
}
   1c7c0:	bf00      	nop
   1c7c2:	b002      	add	sp, #8
   1c7c4:	4770      	bx	lr

0001c7c6 <AppDbGetCsfRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbGetCsfRecord(appDbHdl_t hdl, uint8_t *pChangeAwareState, uint8_t **pCsf)
{
   1c7c6:	b084      	sub	sp, #16
   1c7c8:	9003      	str	r0, [sp, #12]
   1c7ca:	9102      	str	r1, [sp, #8]
   1c7cc:	9201      	str	r2, [sp, #4]
  *pChangeAwareState = ((appDbRec_t *)hdl)->changeAwareState;
   1c7ce:	9b03      	ldr	r3, [sp, #12]
   1c7d0:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
   1c7d4:	9b02      	ldr	r3, [sp, #8]
   1c7d6:	701a      	strb	r2, [r3, #0]
  *pCsf = ((appDbRec_t *) hdl)->csf;
   1c7d8:	9b03      	ldr	r3, [sp, #12]
   1c7da:	f103 0285 	add.w	r2, r3, #133	; 0x85
   1c7de:	9b01      	ldr	r3, [sp, #4]
   1c7e0:	601a      	str	r2, [r3, #0]
}
   1c7e2:	bf00      	nop
   1c7e4:	b004      	add	sp, #16
   1c7e6:	4770      	bx	lr

0001c7e8 <AppDbSetCsfRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCsfRecord(appDbHdl_t hdl, uint8_t changeAwareState, uint8_t *pCsf)
{
   1c7e8:	b084      	sub	sp, #16
   1c7ea:	9003      	str	r0, [sp, #12]
   1c7ec:	460b      	mov	r3, r1
   1c7ee:	9201      	str	r2, [sp, #4]
   1c7f0:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((pCsf != NULL) && (hdl != APP_DB_HDL_NONE))
   1c7f4:	9b01      	ldr	r3, [sp, #4]
   1c7f6:	2b00      	cmp	r3, #0
   1c7f8:	d00c      	beq.n	1c814 <AppDbSetCsfRecord+0x2c>
   1c7fa:	9b03      	ldr	r3, [sp, #12]
   1c7fc:	2b00      	cmp	r3, #0
   1c7fe:	d009      	beq.n	1c814 <AppDbSetCsfRecord+0x2c>
  {
    ((appDbRec_t *) hdl)->changeAwareState = changeAwareState;
   1c800:	9b03      	ldr	r3, [sp, #12]
   1c802:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1c806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    memcpy(&((appDbRec_t *) hdl)->csf, pCsf, ATT_CSF_LEN);
   1c80a:	9b03      	ldr	r3, [sp, #12]
   1c80c:	3385      	adds	r3, #133	; 0x85
   1c80e:	9a01      	ldr	r2, [sp, #4]
   1c810:	7812      	ldrb	r2, [r2, #0]
   1c812:	701a      	strb	r2, [r3, #0]
  }
}
   1c814:	bf00      	nop
   1c816:	b004      	add	sp, #16
   1c818:	4770      	bx	lr

0001c81a <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
   1c81a:	b082      	sub	sp, #8
   1c81c:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
   1c81e:	9b01      	ldr	r3, [sp, #4]
   1c820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1c824:	4618      	mov	r0, r3
   1c826:	b002      	add	sp, #8
   1c828:	4770      	bx	lr

0001c82a <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
   1c82a:	b082      	sub	sp, #8
   1c82c:	9001      	str	r0, [sp, #4]
   1c82e:	9100      	str	r1, [sp, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   1c830:	9b01      	ldr	r3, [sp, #4]
   1c832:	9a00      	ldr	r2, [sp, #0]
   1c834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   1c838:	bf00      	nop
   1c83a:	b002      	add	sp, #8
   1c83c:	4770      	bx	lr

0001c83e <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   1c83e:	b082      	sub	sp, #8
   1c840:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   1c842:	9b01      	ldr	r3, [sp, #4]
   1c844:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   1c848:	4618      	mov	r0, r3
   1c84a:	b002      	add	sp, #8
   1c84c:	4770      	bx	lr

0001c84e <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   1c84e:	b082      	sub	sp, #8
   1c850:	9001      	str	r0, [sp, #4]
   1c852:	460b      	mov	r3, r1
   1c854:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   1c858:	9b01      	ldr	r3, [sp, #4]
   1c85a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1c85e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   1c862:	bf00      	nop
   1c864:	b002      	add	sp, #8
   1c866:	4770      	bx	lr

0001c868 <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   1c868:	b082      	sub	sp, #8
   1c86a:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   1c86c:	9b01      	ldr	r3, [sp, #4]
   1c86e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   1c872:	4618      	mov	r0, r3
   1c874:	b002      	add	sp, #8
   1c876:	4770      	bx	lr

0001c878 <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   1c878:	b500      	push	{lr}
   1c87a:	b083      	sub	sp, #12
   1c87c:	4603      	mov	r3, r0
   1c87e:	f88d 3007 	strb.w	r3, [sp, #7]
  switch (event)
   1c882:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c886:	2b1a      	cmp	r3, #26
   1c888:	f200 809e 	bhi.w	1c9c8 <AppUiAction+0x150>
   1c88c:	a201      	add	r2, pc, #4	; (adr r2, 1c894 <AppUiAction+0x1c>)
   1c88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c892:	bf00      	nop
   1c894:	0001c9c9 	.word	0x0001c9c9
   1c898:	0001c901 	.word	0x0001c901
   1c89c:	0001c9c9 	.word	0x0001c9c9
   1c8a0:	0001c909 	.word	0x0001c909
   1c8a4:	0001c911 	.word	0x0001c911
   1c8a8:	0001c919 	.word	0x0001c919
   1c8ac:	0001c921 	.word	0x0001c921
   1c8b0:	0001c929 	.word	0x0001c929
   1c8b4:	0001c931 	.word	0x0001c931
   1c8b8:	0001c939 	.word	0x0001c939
   1c8bc:	0001c941 	.word	0x0001c941
   1c8c0:	0001c949 	.word	0x0001c949
   1c8c4:	0001c951 	.word	0x0001c951
   1c8c8:	0001c959 	.word	0x0001c959
   1c8cc:	0001c961 	.word	0x0001c961
   1c8d0:	0001c969 	.word	0x0001c969
   1c8d4:	0001c971 	.word	0x0001c971
   1c8d8:	0001c979 	.word	0x0001c979
   1c8dc:	0001c981 	.word	0x0001c981
   1c8e0:	0001c989 	.word	0x0001c989
   1c8e4:	0001c991 	.word	0x0001c991
   1c8e8:	0001c999 	.word	0x0001c999
   1c8ec:	0001c9a1 	.word	0x0001c9a1
   1c8f0:	0001c9a9 	.word	0x0001c9a9
   1c8f4:	0001c9b1 	.word	0x0001c9b1
   1c8f8:	0001c9b9 	.word	0x0001c9b9
   1c8fc:	0001c9c1 	.word	0x0001c9c1
    case APP_UI_NONE:
      /* no action */
      break;

    case APP_UI_RESET_CMPL:
      APP_TRACE_INFO0(">>> Reset complete <<<");
   1c900:	4839      	ldr	r0, [pc, #228]	; (1c9e8 <AppUiAction+0x170>)
   1c902:	f7fc fa21 	bl	18d48 <WsfTrace>
      break;
   1c906:	e060      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_ADV_START:
      APP_TRACE_INFO0(">>> Advertising started <<<");
   1c908:	4838      	ldr	r0, [pc, #224]	; (1c9ec <AppUiAction+0x174>)
   1c90a:	f7fc fa1d 	bl	18d48 <WsfTrace>
      break;
   1c90e:	e05c      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_ADV_STOP:
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   1c910:	4837      	ldr	r0, [pc, #220]	; (1c9f0 <AppUiAction+0x178>)
   1c912:	f7fc fa19 	bl	18d48 <WsfTrace>
      break;
   1c916:	e058      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_SCAN_START:
      APP_TRACE_INFO0(">>> Scanning started <<<");
   1c918:	4836      	ldr	r0, [pc, #216]	; (1c9f4 <AppUiAction+0x17c>)
   1c91a:	f7fc fa15 	bl	18d48 <WsfTrace>
      break;
   1c91e:	e054      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_SCAN_STOP:
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   1c920:	4835      	ldr	r0, [pc, #212]	; (1c9f8 <AppUiAction+0x180>)
   1c922:	f7fc fa11 	bl	18d48 <WsfTrace>
      break;
   1c926:	e050      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_SCAN_REPORT:
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   1c928:	4834      	ldr	r0, [pc, #208]	; (1c9fc <AppUiAction+0x184>)
   1c92a:	f7fc fa0d 	bl	18d48 <WsfTrace>
      break;
   1c92e:	e04c      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_CONN_OPEN:
      APP_TRACE_INFO0(">>> Connection opened <<<");
   1c930:	4833      	ldr	r0, [pc, #204]	; (1ca00 <AppUiAction+0x188>)
   1c932:	f7fc fa09 	bl	18d48 <WsfTrace>
      break;
   1c936:	e048      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_CONN_CLOSE:
      APP_TRACE_INFO0(">>> Connection closed <<<");
   1c938:	4832      	ldr	r0, [pc, #200]	; (1ca04 <AppUiAction+0x18c>)
   1c93a:	f7fc fa05 	bl	18d48 <WsfTrace>
      break;
   1c93e:	e044      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_SEC_PAIR_CMPL:
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   1c940:	4831      	ldr	r0, [pc, #196]	; (1ca08 <AppUiAction+0x190>)
   1c942:	f7fc fa01 	bl	18d48 <WsfTrace>
      break;
   1c946:	e040      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_SEC_PAIR_FAIL:
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   1c948:	4830      	ldr	r0, [pc, #192]	; (1ca0c <AppUiAction+0x194>)
   1c94a:	f7fc f9fd 	bl	18d48 <WsfTrace>
      break;
   1c94e:	e03c      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_SEC_ENCRYPT:
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   1c950:	482f      	ldr	r0, [pc, #188]	; (1ca10 <AppUiAction+0x198>)
   1c952:	f7fc f9f9 	bl	18d48 <WsfTrace>
      break;
   1c956:	e038      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_SEC_ENCRYPT_FAIL:
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   1c958:	482e      	ldr	r0, [pc, #184]	; (1ca14 <AppUiAction+0x19c>)
   1c95a:	f7fc f9f5 	bl	18d48 <WsfTrace>
      break;
   1c95e:	e034      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_PASSKEY_PROMPT:
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   1c960:	482d      	ldr	r0, [pc, #180]	; (1ca18 <AppUiAction+0x1a0>)
   1c962:	f7fc f9f1 	bl	18d48 <WsfTrace>
      break;
   1c966:	e030      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_ALERT_CANCEL:
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   1c968:	482c      	ldr	r0, [pc, #176]	; (1ca1c <AppUiAction+0x1a4>)
   1c96a:	f7fc f9ed 	bl	18d48 <WsfTrace>
      break;
   1c96e:	e02c      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_ALERT_LOW:
      APP_TRACE_INFO0(">>> Low alert <<<");
   1c970:	482b      	ldr	r0, [pc, #172]	; (1ca20 <AppUiAction+0x1a8>)
   1c972:	f7fc f9e9 	bl	18d48 <WsfTrace>
      break;
   1c976:	e028      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
   1c978:	482a      	ldr	r0, [pc, #168]	; (1ca24 <AppUiAction+0x1ac>)
   1c97a:	f7fc f9e5 	bl	18d48 <WsfTrace>
      break;
   1c97e:	e024      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_ADV_SET_START_IND:
      APP_TRACE_INFO0(">>> Advertising sets started <<<");
   1c980:	4829      	ldr	r0, [pc, #164]	; (1ca28 <AppUiAction+0x1b0>)
   1c982:	f7fc f9e1 	bl	18d48 <WsfTrace>
      break;
   1c986:	e020      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_ADV_SET_STOP_IND:
      APP_TRACE_INFO0(">>> Advertising sets stopped <<<");
   1c988:	4828      	ldr	r0, [pc, #160]	; (1ca2c <AppUiAction+0x1b4>)
   1c98a:	f7fc f9dd 	bl	18d48 <WsfTrace>
      break;
   1c98e:	e01c      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_SCAN_REQ_RCVD_IND:
      APP_TRACE_INFO0(">>> Scan request received <<<");
   1c990:	4827      	ldr	r0, [pc, #156]	; (1ca30 <AppUiAction+0x1b8>)
   1c992:	f7fc f9d9 	bl	18d48 <WsfTrace>
      break;
   1c996:	e018      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_EXT_SCAN_START_IND:
      APP_TRACE_INFO0(">>> Extended scanning started <<<");
   1c998:	4826      	ldr	r0, [pc, #152]	; (1ca34 <AppUiAction+0x1bc>)
   1c99a:	f7fc f9d5 	bl	18d48 <WsfTrace>
      break;
   1c99e:	e014      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_EXT_SCAN_STOP_IND:
      APP_TRACE_INFO0(">>> Extended scanning stopped <<<");
   1c9a0:	4825      	ldr	r0, [pc, #148]	; (1ca38 <AppUiAction+0x1c0>)
   1c9a2:	f7fc f9d1 	bl	18d48 <WsfTrace>
      break;
   1c9a6:	e010      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_PER_ADV_SET_START_IND:
      APP_TRACE_INFO0(">>> Periodic advertising set started <<<");
   1c9a8:	4824      	ldr	r0, [pc, #144]	; (1ca3c <AppUiAction+0x1c4>)
   1c9aa:	f7fc f9cd 	bl	18d48 <WsfTrace>
      break;
   1c9ae:	e00c      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_PER_ADV_SET_STOP_IND:
      APP_TRACE_INFO0(">>> Periodic advertising set stopped <<<");
   1c9b0:	4823      	ldr	r0, [pc, #140]	; (1ca40 <AppUiAction+0x1c8>)
   1c9b2:	f7fc f9c9 	bl	18d48 <WsfTrace>
      break;
   1c9b6:	e008      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_PER_ADV_SYNC_EST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync established <<<");
   1c9b8:	4822      	ldr	r0, [pc, #136]	; (1ca44 <AppUiAction+0x1cc>)
   1c9ba:	f7fc f9c5 	bl	18d48 <WsfTrace>
      break;
   1c9be:	e004      	b.n	1c9ca <AppUiAction+0x152>

    case APP_UI_PER_ADV_SYNC_LOST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync lost <<<");
   1c9c0:	4821      	ldr	r0, [pc, #132]	; (1ca48 <AppUiAction+0x1d0>)
   1c9c2:	f7fc f9c1 	bl	18d48 <WsfTrace>
      break;
   1c9c6:	e000      	b.n	1c9ca <AppUiAction+0x152>

    default:
      break;
   1c9c8:	bf00      	nop
  }

  if (appUiCbackTbl.actionCback)
   1c9ca:	4b20      	ldr	r3, [pc, #128]	; (1ca4c <AppUiAction+0x1d4>)
   1c9cc:	685b      	ldr	r3, [r3, #4]
   1c9ce:	2b00      	cmp	r3, #0
   1c9d0:	d005      	beq.n	1c9de <AppUiAction+0x166>
  {
    (*appUiCbackTbl.actionCback)(event);
   1c9d2:	4b1e      	ldr	r3, [pc, #120]	; (1ca4c <AppUiAction+0x1d4>)
   1c9d4:	685b      	ldr	r3, [r3, #4]
   1c9d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1c9da:	4610      	mov	r0, r2
   1c9dc:	4798      	blx	r3
  }
}
   1c9de:	bf00      	nop
   1c9e0:	b003      	add	sp, #12
   1c9e2:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9e6:	bf00      	nop
   1c9e8:	00028da4 	.word	0x00028da4
   1c9ec:	00028dbc 	.word	0x00028dbc
   1c9f0:	00028dd8 	.word	0x00028dd8
   1c9f4:	00028df4 	.word	0x00028df4
   1c9f8:	00028e10 	.word	0x00028e10
   1c9fc:	00028e2c 	.word	0x00028e2c
   1ca00:	00028e54 	.word	0x00028e54
   1ca04:	00028e70 	.word	0x00028e70
   1ca08:	00028e8c 	.word	0x00028e8c
   1ca0c:	00028eb4 	.word	0x00028eb4
   1ca10:	00028ecc 	.word	0x00028ecc
   1ca14:	00028eec 	.word	0x00028eec
   1ca18:	00028f08 	.word	0x00028f08
   1ca1c:	00028f30 	.word	0x00028f30
   1ca20:	00028f54 	.word	0x00028f54
   1ca24:	00028f68 	.word	0x00028f68
   1ca28:	00028f7c 	.word	0x00028f7c
   1ca2c:	00028fa0 	.word	0x00028fa0
   1ca30:	00028fc4 	.word	0x00028fc4
   1ca34:	00028fe4 	.word	0x00028fe4
   1ca38:	00029008 	.word	0x00029008
   1ca3c:	0002902c 	.word	0x0002902c
   1ca40:	00029058 	.word	0x00029058
   1ca44:	00029084 	.word	0x00029084
   1ca48:	000290b4 	.word	0x000290b4
   1ca4c:	10009664 	.word	0x10009664

0001ca50 <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   1ca50:	b500      	push	{lr}
   1ca52:	b083      	sub	sp, #12
   1ca54:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   1ca56:	9901      	ldr	r1, [sp, #4]
   1ca58:	4803      	ldr	r0, [pc, #12]	; (1ca68 <AppUiDisplayPasskey+0x18>)
   1ca5a:	f7fc f975 	bl	18d48 <WsfTrace>
}
   1ca5e:	bf00      	nop
   1ca60:	b003      	add	sp, #12
   1ca62:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca66:	bf00      	nop
   1ca68:	000290dc 	.word	0x000290dc

0001ca6c <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   1ca6c:	b500      	push	{lr}
   1ca6e:	b083      	sub	sp, #12
   1ca70:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
   1ca72:	9901      	ldr	r1, [sp, #4]
   1ca74:	4803      	ldr	r0, [pc, #12]	; (1ca84 <AppUiDisplayConfirmValue+0x18>)
   1ca76:	f7fc f967 	bl	18d48 <WsfTrace>
}
   1ca7a:	bf00      	nop
   1ca7c:	b003      	add	sp, #12
   1ca7e:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca82:	bf00      	nop
   1ca84:	000290f0 	.word	0x000290f0

0001ca88 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   1ca88:	b082      	sub	sp, #8
   1ca8a:	9001      	str	r0, [sp, #4]

}
   1ca8c:	bf00      	nop
   1ca8e:	b002      	add	sp, #8
   1ca90:	4770      	bx	lr
	...

0001ca94 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   1ca94:	b508      	push	{r3, lr}
  if (appUiCbackTbl.btnPollCback)
   1ca96:	4b04      	ldr	r3, [pc, #16]	; (1caa8 <appUiBtnPoll+0x14>)
   1ca98:	689b      	ldr	r3, [r3, #8]
   1ca9a:	2b00      	cmp	r3, #0
   1ca9c:	d002      	beq.n	1caa4 <appUiBtnPoll+0x10>
  {
    (*appUiCbackTbl.btnPollCback)();
   1ca9e:	4b02      	ldr	r3, [pc, #8]	; (1caa8 <appUiBtnPoll+0x14>)
   1caa0:	689b      	ldr	r3, [r3, #8]
   1caa2:	4798      	blx	r3
  }
}
   1caa4:	bf00      	nop
   1caa6:	bd08      	pop	{r3, pc}
   1caa8:	10009664 	.word	0x10009664

0001caac <AppUiBtnPressed>:
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{

}
   1caac:	bf00      	nop
   1caae:	4770      	bx	lr

0001cab0 <AppUiBtnRegister>:
 *
 *  \note   Registered by application to receive button events
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t btnCback)
{
   1cab0:	b082      	sub	sp, #8
   1cab2:	9001      	str	r0, [sp, #4]
  appUiCbackTbl.btnCback = btnCback;
   1cab4:	4a02      	ldr	r2, [pc, #8]	; (1cac0 <AppUiBtnRegister+0x10>)
   1cab6:	9b01      	ldr	r3, [sp, #4]
   1cab8:	6013      	str	r3, [r2, #0]
}
   1caba:	bf00      	nop
   1cabc:	b002      	add	sp, #8
   1cabe:	4770      	bx	lr
   1cac0:	10009664 	.word	0x10009664

0001cac4 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   1cac4:	b082      	sub	sp, #8
   1cac6:	9001      	str	r0, [sp, #4]
  hciCb.evtCback = evtCback;
   1cac8:	4a02      	ldr	r2, [pc, #8]	; (1cad4 <HciEvtRegister+0x10>)
   1caca:	9b01      	ldr	r3, [sp, #4]
   1cacc:	6093      	str	r3, [r2, #8]
}
   1cace:	bf00      	nop
   1cad0:	b002      	add	sp, #8
   1cad2:	4770      	bx	lr
   1cad4:	10009670 	.word	0x10009670

0001cad8 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   1cad8:	b082      	sub	sp, #8
   1cada:	9001      	str	r0, [sp, #4]
  hciCb.secCback = secCback;
   1cadc:	4a02      	ldr	r2, [pc, #8]	; (1cae8 <HciSecRegister+0x10>)
   1cade:	9b01      	ldr	r3, [sp, #4]
   1cae0:	60d3      	str	r3, [r2, #12]
}
   1cae2:	bf00      	nop
   1cae4:	b002      	add	sp, #8
   1cae6:	4770      	bx	lr
   1cae8:	10009670 	.word	0x10009670

0001caec <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   1caec:	b082      	sub	sp, #8
   1caee:	9001      	str	r0, [sp, #4]
   1caf0:	9100      	str	r1, [sp, #0]
  hciCb.aclCback = aclCback;
   1caf2:	4a04      	ldr	r2, [pc, #16]	; (1cb04 <HciAclRegister+0x18>)
   1caf4:	9b01      	ldr	r3, [sp, #4]
   1caf6:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   1caf8:	4a02      	ldr	r2, [pc, #8]	; (1cb04 <HciAclRegister+0x18>)
   1cafa:	9b00      	ldr	r3, [sp, #0]
   1cafc:	6153      	str	r3, [r2, #20]
}
   1cafe:	bf00      	nop
   1cb00:	b002      	add	sp, #8
   1cb02:	4770      	bx	lr
   1cb04:	10009670 	.word	0x10009670

0001cb08 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   1cb08:	b500      	push	{lr}
   1cb0a:	b083      	sub	sp, #12
   1cb0c:	4603      	mov	r3, r0
   1cb0e:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   1cb12:	4a08      	ldr	r2, [pc, #32]	; (1cb34 <HciHandlerInit+0x2c>)
   1cb14:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cb18:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   1cb1a:	4b06      	ldr	r3, [pc, #24]	; (1cb34 <HciHandlerInit+0x2c>)
   1cb1c:	2200      	movs	r2, #0
   1cb1e:	601a      	str	r2, [r3, #0]
   1cb20:	4b04      	ldr	r3, [pc, #16]	; (1cb34 <HciHandlerInit+0x2c>)
   1cb22:	2200      	movs	r2, #0
   1cb24:	605a      	str	r2, [r3, #4]

  /* perform other hci initialization */
  HciCoreInit();
   1cb26:	f001 fad1 	bl	1e0cc <HciCoreInit>
}
   1cb2a:	bf00      	nop
   1cb2c:	b003      	add	sp, #12
   1cb2e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb32:	bf00      	nop
   1cb34:	10009670 	.word	0x10009670

0001cb38 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1cb38:	b500      	push	{lr}
   1cb3a:	b083      	sub	sp, #12
   1cb3c:	4603      	mov	r3, r0
   1cb3e:	9100      	str	r1, [sp, #0]
   1cb40:	f88d 3007 	strb.w	r3, [sp, #7]
  HciCoreHandler(event, pMsg);
   1cb44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cb48:	9900      	ldr	r1, [sp, #0]
   1cb4a:	4618      	mov	r0, r3
   1cb4c:	f001 fc78 	bl	1e440 <HciCoreHandler>
}
   1cb50:	bf00      	nop
   1cb52:	b003      	add	sp, #12
   1cb54:	f85d fb04 	ldr.w	pc, [sp], #4

0001cb58 <secEccRng>:
 *
 *  \return TRUE if successful.
 */
/*************************************************************************************************/
static int secEccRng(uint8_t *p_dest, unsigned p_size)
{
   1cb58:	b500      	push	{lr}
   1cb5a:	b083      	sub	sp, #12
   1cb5c:	9001      	str	r0, [sp, #4]
   1cb5e:	9100      	str	r1, [sp, #0]
  SecRand(p_dest, p_size);
   1cb60:	9b00      	ldr	r3, [sp, #0]
   1cb62:	b2db      	uxtb	r3, r3
   1cb64:	4619      	mov	r1, r3
   1cb66:	9801      	ldr	r0, [sp, #4]
   1cb68:	f7f6 fb7c 	bl	13264 <SecRand>
  return TRUE;
   1cb6c:	2301      	movs	r3, #1
}
   1cb6e:	4618      	mov	r0, r3
   1cb70:	b003      	add	sp, #12
   1cb72:	f85d fb04 	ldr.w	pc, [sp], #4

0001cb76 <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1cb76:	b500      	push	{lr}
   1cb78:	b085      	sub	sp, #20
   1cb7a:	4603      	mov	r3, r0
   1cb7c:	f88d 3007 	strb.w	r3, [sp, #7]
   1cb80:	460b      	mov	r3, r1
   1cb82:	f8ad 3004 	strh.w	r3, [sp, #4]
   1cb86:	4613      	mov	r3, r2
   1cb88:	f88d 3006 	strb.w	r3, [sp, #6]
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   1cb8c:	2064      	movs	r0, #100	; 0x64
   1cb8e:	f7fb fc70 	bl	18472 <WsfMsgAlloc>
   1cb92:	9003      	str	r0, [sp, #12]

  if (pMsg)
   1cb94:	9b03      	ldr	r3, [sp, #12]
   1cb96:	2b00      	cmp	r3, #0
   1cb98:	d01a      	beq.n	1cbd0 <SecEccGenKey+0x5a>
  {
    /* Generate the keys */
    uECC_make_key(pMsg->data.key.pubKey_x, pMsg->data.key.privKey);
   1cb9a:	9b03      	ldr	r3, [sp, #12]
   1cb9c:	1d1a      	adds	r2, r3, #4
   1cb9e:	9b03      	ldr	r3, [sp, #12]
   1cba0:	3344      	adds	r3, #68	; 0x44
   1cba2:	4619      	mov	r1, r3
   1cba4:	4610      	mov	r0, r2
   1cba6:	f7fe f8c9 	bl	1ad3c <uECC_make_key>

    /* Send shared secret to handler */
    pMsg->hdr.event = event;
   1cbaa:	9b03      	ldr	r3, [sp, #12]
   1cbac:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1cbb0:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   1cbb2:	9b03      	ldr	r3, [sp, #12]
   1cbb4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1cbb8:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.status = HCI_SUCCESS;
   1cbba:	9b03      	ldr	r3, [sp, #12]
   1cbbc:	2200      	movs	r2, #0
   1cbbe:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1cbc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cbc4:	9903      	ldr	r1, [sp, #12]
   1cbc6:	4618      	mov	r0, r3
   1cbc8:	f7fb fc77 	bl	184ba <WsfMsgSend>

    return TRUE;
   1cbcc:	2301      	movs	r3, #1
   1cbce:	e000      	b.n	1cbd2 <SecEccGenKey+0x5c>
  }

  return FALSE;
   1cbd0:	2300      	movs	r3, #0
}
   1cbd2:	4618      	mov	r0, r3
   1cbd4:	b005      	add	sp, #20
   1cbd6:	f85d fb04 	ldr.w	pc, [sp], #4

0001cbda <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1cbda:	b500      	push	{lr}
   1cbdc:	b085      	sub	sp, #20
   1cbde:	9001      	str	r0, [sp, #4]
   1cbe0:	4608      	mov	r0, r1
   1cbe2:	4611      	mov	r1, r2
   1cbe4:	461a      	mov	r2, r3
   1cbe6:	4603      	mov	r3, r0
   1cbe8:	f88d 3003 	strb.w	r3, [sp, #3]
   1cbec:	460b      	mov	r3, r1
   1cbee:	f8ad 3000 	strh.w	r3, [sp]
   1cbf2:	4613      	mov	r3, r2
   1cbf4:	f88d 3002 	strb.w	r3, [sp, #2]
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   1cbf8:	2064      	movs	r0, #100	; 0x64
   1cbfa:	f7fb fc3a 	bl	18472 <WsfMsgAlloc>
   1cbfe:	9003      	str	r0, [sp, #12]

  if (pMsg)
   1cc00:	9b03      	ldr	r3, [sp, #12]
   1cc02:	2b00      	cmp	r3, #0
   1cc04:	d034      	beq.n	1cc70 <SecEccGenSharedSecret+0x96>
  {
    bool_t keyValid = uECC_valid_public_key(pKey->pubKey_x);
   1cc06:	9b01      	ldr	r3, [sp, #4]
   1cc08:	4618      	mov	r0, r3
   1cc0a:	f7fe f973 	bl	1aef4 <uECC_valid_public_key>
   1cc0e:	4603      	mov	r3, r0
   1cc10:	f88d 300b 	strb.w	r3, [sp, #11]

    if (keyValid)
   1cc14:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1cc18:	2b00      	cmp	r3, #0
   1cc1a:	d009      	beq.n	1cc30 <SecEccGenSharedSecret+0x56>
    {
      uECC_shared_secret(pKey->pubKey_x, pKey->privKey, pMsg->data.sharedSecret.secret);
   1cc1c:	9801      	ldr	r0, [sp, #4]
   1cc1e:	9b01      	ldr	r3, [sp, #4]
   1cc20:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1cc24:	9b03      	ldr	r3, [sp, #12]
   1cc26:	3304      	adds	r3, #4
   1cc28:	461a      	mov	r2, r3
   1cc2a:	f7fe f8c3 	bl	1adb4 <uECC_shared_secret>
   1cc2e:	e006      	b.n	1cc3e <SecEccGenSharedSecret+0x64>
    }
    else
    {
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   1cc30:	9b03      	ldr	r3, [sp, #12]
   1cc32:	3304      	adds	r3, #4
   1cc34:	2220      	movs	r2, #32
   1cc36:	21ff      	movs	r1, #255	; 0xff
   1cc38:	4618      	mov	r0, r3
   1cc3a:	f7ef fb2b 	bl	c294 <memset>
    }

    /* Send shared secret to handler. */
    pMsg->hdr.event = event;
   1cc3e:	9b03      	ldr	r3, [sp, #12]
   1cc40:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1cc44:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   1cc46:	9b03      	ldr	r3, [sp, #12]
   1cc48:	f8bd 2000 	ldrh.w	r2, [sp]
   1cc4c:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   1cc4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1cc52:	2b00      	cmp	r3, #0
   1cc54:	d001      	beq.n	1cc5a <SecEccGenSharedSecret+0x80>
   1cc56:	2200      	movs	r2, #0
   1cc58:	e000      	b.n	1cc5c <SecEccGenSharedSecret+0x82>
   1cc5a:	2212      	movs	r2, #18
   1cc5c:	9b03      	ldr	r3, [sp, #12]
   1cc5e:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1cc60:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1cc64:	9903      	ldr	r1, [sp, #12]
   1cc66:	4618      	mov	r0, r3
   1cc68:	f7fb fc27 	bl	184ba <WsfMsgSend>

    return TRUE;
   1cc6c:	2301      	movs	r3, #1
   1cc6e:	e000      	b.n	1cc72 <SecEccGenSharedSecret+0x98>
  }

  return FALSE;
   1cc70:	2300      	movs	r3, #0
}
   1cc72:	4618      	mov	r0, r3
   1cc74:	b005      	add	sp, #20
   1cc76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001cc7c <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   1cc7c:	b508      	push	{r3, lr}
  //srand((unsigned int)time(NULL));
  uECC_set_rng(secEccRng);
   1cc7e:	4802      	ldr	r0, [pc, #8]	; (1cc88 <SecEccInit+0xc>)
   1cc80:	f7fc fc8a 	bl	19598 <uECC_set_rng>
}
   1cc84:	bf00      	nop
   1cc86:	bd08      	pop	{r3, pc}
   1cc88:	0001cb59 	.word	0x0001cb59

0001cc8c <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   1cc8c:	b500      	push	{lr}
   1cc8e:	b085      	sub	sp, #20
   1cc90:	4603      	mov	r3, r0
   1cc92:	460a      	mov	r2, r1
   1cc94:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cc98:	4613      	mov	r3, r2
   1cc9a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1cc9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1cca2:	3303      	adds	r3, #3
   1cca4:	b29b      	uxth	r3, r3
   1cca6:	4618      	mov	r0, r3
   1cca8:	f7fb fbe3 	bl	18472 <WsfMsgAlloc>
   1ccac:	9003      	str	r0, [sp, #12]
   1ccae:	9b03      	ldr	r3, [sp, #12]
   1ccb0:	2b00      	cmp	r3, #0
   1ccb2:	d019      	beq.n	1cce8 <hciCmdAlloc+0x5c>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   1ccb4:	9b03      	ldr	r3, [sp, #12]
   1ccb6:	1c5a      	adds	r2, r3, #1
   1ccb8:	9203      	str	r2, [sp, #12]
   1ccba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ccbe:	b2d2      	uxtb	r2, r2
   1ccc0:	701a      	strb	r2, [r3, #0]
   1ccc2:	9b03      	ldr	r3, [sp, #12]
   1ccc4:	1c5a      	adds	r2, r3, #1
   1ccc6:	9203      	str	r2, [sp, #12]
   1ccc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1cccc:	0a12      	lsrs	r2, r2, #8
   1ccce:	b292      	uxth	r2, r2
   1ccd0:	b2d2      	uxtb	r2, r2
   1ccd2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   1ccd4:	9b03      	ldr	r3, [sp, #12]
   1ccd6:	1c5a      	adds	r2, r3, #1
   1ccd8:	9203      	str	r2, [sp, #12]
   1ccda:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1ccde:	b2d2      	uxtb	r2, r2
   1cce0:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   1cce2:	9b03      	ldr	r3, [sp, #12]
   1cce4:	3b03      	subs	r3, #3
   1cce6:	9303      	str	r3, [sp, #12]
  }

  return p;
   1cce8:	9b03      	ldr	r3, [sp, #12]
}
   1ccea:	4618      	mov	r0, r3
   1ccec:	b005      	add	sp, #20
   1ccee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001ccf4 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   1ccf4:	b500      	push	{lr}
   1ccf6:	b085      	sub	sp, #20
   1ccf8:	9001      	str	r0, [sp, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   1ccfa:	9b01      	ldr	r3, [sp, #4]
   1ccfc:	2b00      	cmp	r3, #0
   1ccfe:	d004      	beq.n	1cd0a <hciCmdSend+0x16>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1cd00:	9a01      	ldr	r2, [sp, #4]
   1cd02:	2100      	movs	r1, #0
   1cd04:	4817      	ldr	r0, [pc, #92]	; (1cd64 <hciCmdSend+0x70>)
   1cd06:	f7fb fbf3 	bl	184f0 <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   1cd0a:	4b17      	ldr	r3, [pc, #92]	; (1cd68 <hciCmdSend+0x74>)
   1cd0c:	7e9b      	ldrb	r3, [r3, #26]
   1cd0e:	2b00      	cmp	r3, #0
   1cd10:	d023      	beq.n	1cd5a <hciCmdSend+0x66>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1cd12:	f10d 030b 	add.w	r3, sp, #11
   1cd16:	4619      	mov	r1, r3
   1cd18:	4812      	ldr	r0, [pc, #72]	; (1cd64 <hciCmdSend+0x70>)
   1cd1a:	f7fb fbff 	bl	1851c <WsfMsgDeq>
   1cd1e:	9003      	str	r0, [sp, #12]
   1cd20:	9b03      	ldr	r3, [sp, #12]
   1cd22:	2b00      	cmp	r3, #0
   1cd24:	d019      	beq.n	1cd5a <hciCmdSend+0x66>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   1cd26:	4b10      	ldr	r3, [pc, #64]	; (1cd68 <hciCmdSend+0x74>)
   1cd28:	7e9b      	ldrb	r3, [r3, #26]
   1cd2a:	3b01      	subs	r3, #1
   1cd2c:	b2da      	uxtb	r2, r3
   1cd2e:	4b0e      	ldr	r3, [pc, #56]	; (1cd68 <hciCmdSend+0x74>)
   1cd30:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1cd32:	9b03      	ldr	r3, [sp, #12]
   1cd34:	781b      	ldrb	r3, [r3, #0]
   1cd36:	b29a      	uxth	r2, r3
   1cd38:	9b03      	ldr	r3, [sp, #12]
   1cd3a:	3301      	adds	r3, #1
   1cd3c:	781b      	ldrb	r3, [r3, #0]
   1cd3e:	b29b      	uxth	r3, r3
   1cd40:	021b      	lsls	r3, r3, #8
   1cd42:	b29b      	uxth	r3, r3
   1cd44:	4413      	add	r3, r2
   1cd46:	b29a      	uxth	r2, r3
   1cd48:	4b07      	ldr	r3, [pc, #28]	; (1cd68 <hciCmdSend+0x74>)
   1cd4a:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1cd4c:	210a      	movs	r1, #10
   1cd4e:	4806      	ldr	r0, [pc, #24]	; (1cd68 <hciCmdSend+0x74>)
   1cd50:	f7fb ff12 	bl	18b78 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   1cd54:	9803      	ldr	r0, [sp, #12]
   1cd56:	f003 fa08 	bl	2016a <hciTrSendCmd>
    }
  }
}
   1cd5a:	bf00      	nop
   1cd5c:	b005      	add	sp, #20
   1cd5e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd62:	bf00      	nop
   1cd64:	1000969c 	.word	0x1000969c
   1cd68:	1000968c 	.word	0x1000968c

0001cd6c <hciCmdInit>:
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   1cd6c:	4b08      	ldr	r3, [pc, #32]	; (1cd90 <hciCmdInit+0x24>)
   1cd6e:	2200      	movs	r2, #0
   1cd70:	611a      	str	r2, [r3, #16]
   1cd72:	4b07      	ldr	r3, [pc, #28]	; (1cd90 <hciCmdInit+0x24>)
   1cd74:	2200      	movs	r2, #0
   1cd76:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   1cd78:	4b05      	ldr	r3, [pc, #20]	; (1cd90 <hciCmdInit+0x24>)
   1cd7a:	2201      	movs	r2, #1
   1cd7c:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   1cd7e:	4b04      	ldr	r3, [pc, #16]	; (1cd90 <hciCmdInit+0x24>)
   1cd80:	2201      	movs	r2, #1
   1cd82:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   1cd84:	4b03      	ldr	r3, [pc, #12]	; (1cd94 <hciCmdInit+0x28>)
   1cd86:	7e1a      	ldrb	r2, [r3, #24]
   1cd88:	4b01      	ldr	r3, [pc, #4]	; (1cd90 <hciCmdInit+0x24>)
   1cd8a:	721a      	strb	r2, [r3, #8]
}
   1cd8c:	bf00      	nop
   1cd8e:	4770      	bx	lr
   1cd90:	1000968c 	.word	0x1000968c
   1cd94:	10009670 	.word	0x10009670

0001cd98 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   1cd98:	b500      	push	{lr}
   1cd9a:	b083      	sub	sp, #12
   1cd9c:	9001      	str	r0, [sp, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   1cd9e:	f7fc f9b5 	bl	1910c <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   1cda2:	2000      	movs	r0, #0
   1cda4:	f7fc f8ba 	bl	18f1c <HciDrvRadioBoot>
  DmDevReset();
   1cda8:	f7f5 f82a 	bl	11e00 <DmDevReset>
}
   1cdac:	bf00      	nop
   1cdae:	b003      	add	sp, #12
   1cdb0:	f85d fb04 	ldr.w	pc, [sp], #4

0001cdb4 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   1cdb4:	b500      	push	{lr}
   1cdb6:	b083      	sub	sp, #12
   1cdb8:	4603      	mov	r3, r0
   1cdba:	f88d 3007 	strb.w	r3, [sp, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   1cdbe:	4806      	ldr	r0, [pc, #24]	; (1cdd8 <hciCmdRecvCmpl+0x24>)
   1cdc0:	f7fb fefe 	bl	18bc0 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   1cdc4:	4b04      	ldr	r3, [pc, #16]	; (1cdd8 <hciCmdRecvCmpl+0x24>)
   1cdc6:	2201      	movs	r2, #1
   1cdc8:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   1cdca:	2000      	movs	r0, #0
   1cdcc:	f7ff ff92 	bl	1ccf4 <hciCmdSend>
}
   1cdd0:	bf00      	nop
   1cdd2:	b003      	add	sp, #12
   1cdd4:	f85d fb04 	ldr.w	pc, [sp], #4
   1cdd8:	1000968c 	.word	0x1000968c

0001cddc <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   1cddc:	b500      	push	{lr}
   1cdde:	b085      	sub	sp, #20
   1cde0:	4603      	mov	r3, r0
   1cde2:	460a      	mov	r2, r1
   1cde4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cde8:	4613      	mov	r3, r2
   1cdea:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   1cdee:	2103      	movs	r1, #3
   1cdf0:	f240 4006 	movw	r0, #1030	; 0x406
   1cdf4:	f7ff ff4a 	bl	1cc8c <hciCmdAlloc>
   1cdf8:	9003      	str	r0, [sp, #12]
   1cdfa:	9b03      	ldr	r3, [sp, #12]
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d01b      	beq.n	1ce38 <HciDisconnectCmd+0x5c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1ce00:	9b03      	ldr	r3, [sp, #12]
   1ce02:	3303      	adds	r3, #3
   1ce04:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1ce06:	9b02      	ldr	r3, [sp, #8]
   1ce08:	1c5a      	adds	r2, r3, #1
   1ce0a:	9202      	str	r2, [sp, #8]
   1ce0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ce10:	b2d2      	uxtb	r2, r2
   1ce12:	701a      	strb	r2, [r3, #0]
   1ce14:	9b02      	ldr	r3, [sp, #8]
   1ce16:	1c5a      	adds	r2, r3, #1
   1ce18:	9202      	str	r2, [sp, #8]
   1ce1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ce1e:	0a12      	lsrs	r2, r2, #8
   1ce20:	b292      	uxth	r2, r2
   1ce22:	b2d2      	uxtb	r2, r2
   1ce24:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   1ce26:	9b02      	ldr	r3, [sp, #8]
   1ce28:	1c5a      	adds	r2, r3, #1
   1ce2a:	9202      	str	r2, [sp, #8]
   1ce2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1ce30:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1ce32:	9803      	ldr	r0, [sp, #12]
   1ce34:	f7ff ff5e 	bl	1ccf4 <hciCmdSend>
  }
}
   1ce38:	bf00      	nop
   1ce3a:	b005      	add	sp, #20
   1ce3c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce40 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   1ce40:	b500      	push	{lr}
   1ce42:	b085      	sub	sp, #20
   1ce44:	4603      	mov	r3, r0
   1ce46:	9100      	str	r1, [sp, #0]
   1ce48:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   1ce4c:	210e      	movs	r1, #14
   1ce4e:	f242 0013 	movw	r0, #8211	; 0x2013
   1ce52:	f7ff ff1b 	bl	1cc8c <hciCmdAlloc>
   1ce56:	9003      	str	r0, [sp, #12]
   1ce58:	9b03      	ldr	r3, [sp, #12]
   1ce5a:	2b00      	cmp	r3, #0
   1ce5c:	d075      	beq.n	1cf4a <HciLeConnUpdateCmd+0x10a>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1ce5e:	9b03      	ldr	r3, [sp, #12]
   1ce60:	3303      	adds	r3, #3
   1ce62:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1ce64:	9b02      	ldr	r3, [sp, #8]
   1ce66:	1c5a      	adds	r2, r3, #1
   1ce68:	9202      	str	r2, [sp, #8]
   1ce6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ce6e:	b2d2      	uxtb	r2, r2
   1ce70:	701a      	strb	r2, [r3, #0]
   1ce72:	9b02      	ldr	r3, [sp, #8]
   1ce74:	1c5a      	adds	r2, r3, #1
   1ce76:	9202      	str	r2, [sp, #8]
   1ce78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ce7c:	0a12      	lsrs	r2, r2, #8
   1ce7e:	b292      	uxth	r2, r2
   1ce80:	b2d2      	uxtb	r2, r2
   1ce82:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   1ce84:	9b02      	ldr	r3, [sp, #8]
   1ce86:	1c5a      	adds	r2, r3, #1
   1ce88:	9202      	str	r2, [sp, #8]
   1ce8a:	9a00      	ldr	r2, [sp, #0]
   1ce8c:	8812      	ldrh	r2, [r2, #0]
   1ce8e:	b2d2      	uxtb	r2, r2
   1ce90:	701a      	strb	r2, [r3, #0]
   1ce92:	9b02      	ldr	r3, [sp, #8]
   1ce94:	1c5a      	adds	r2, r3, #1
   1ce96:	9202      	str	r2, [sp, #8]
   1ce98:	9a00      	ldr	r2, [sp, #0]
   1ce9a:	8812      	ldrh	r2, [r2, #0]
   1ce9c:	0a12      	lsrs	r2, r2, #8
   1ce9e:	b292      	uxth	r2, r2
   1cea0:	b2d2      	uxtb	r2, r2
   1cea2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   1cea4:	9b02      	ldr	r3, [sp, #8]
   1cea6:	1c5a      	adds	r2, r3, #1
   1cea8:	9202      	str	r2, [sp, #8]
   1ceaa:	9a00      	ldr	r2, [sp, #0]
   1ceac:	8852      	ldrh	r2, [r2, #2]
   1ceae:	b2d2      	uxtb	r2, r2
   1ceb0:	701a      	strb	r2, [r3, #0]
   1ceb2:	9b02      	ldr	r3, [sp, #8]
   1ceb4:	1c5a      	adds	r2, r3, #1
   1ceb6:	9202      	str	r2, [sp, #8]
   1ceb8:	9a00      	ldr	r2, [sp, #0]
   1ceba:	8852      	ldrh	r2, [r2, #2]
   1cebc:	0a12      	lsrs	r2, r2, #8
   1cebe:	b292      	uxth	r2, r2
   1cec0:	b2d2      	uxtb	r2, r2
   1cec2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   1cec4:	9b02      	ldr	r3, [sp, #8]
   1cec6:	1c5a      	adds	r2, r3, #1
   1cec8:	9202      	str	r2, [sp, #8]
   1ceca:	9a00      	ldr	r2, [sp, #0]
   1cecc:	8892      	ldrh	r2, [r2, #4]
   1cece:	b2d2      	uxtb	r2, r2
   1ced0:	701a      	strb	r2, [r3, #0]
   1ced2:	9b02      	ldr	r3, [sp, #8]
   1ced4:	1c5a      	adds	r2, r3, #1
   1ced6:	9202      	str	r2, [sp, #8]
   1ced8:	9a00      	ldr	r2, [sp, #0]
   1ceda:	8892      	ldrh	r2, [r2, #4]
   1cedc:	0a12      	lsrs	r2, r2, #8
   1cede:	b292      	uxth	r2, r2
   1cee0:	b2d2      	uxtb	r2, r2
   1cee2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   1cee4:	9b02      	ldr	r3, [sp, #8]
   1cee6:	1c5a      	adds	r2, r3, #1
   1cee8:	9202      	str	r2, [sp, #8]
   1ceea:	9a00      	ldr	r2, [sp, #0]
   1ceec:	88d2      	ldrh	r2, [r2, #6]
   1ceee:	b2d2      	uxtb	r2, r2
   1cef0:	701a      	strb	r2, [r3, #0]
   1cef2:	9b02      	ldr	r3, [sp, #8]
   1cef4:	1c5a      	adds	r2, r3, #1
   1cef6:	9202      	str	r2, [sp, #8]
   1cef8:	9a00      	ldr	r2, [sp, #0]
   1cefa:	88d2      	ldrh	r2, [r2, #6]
   1cefc:	0a12      	lsrs	r2, r2, #8
   1cefe:	b292      	uxth	r2, r2
   1cf00:	b2d2      	uxtb	r2, r2
   1cf02:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   1cf04:	9b02      	ldr	r3, [sp, #8]
   1cf06:	1c5a      	adds	r2, r3, #1
   1cf08:	9202      	str	r2, [sp, #8]
   1cf0a:	9a00      	ldr	r2, [sp, #0]
   1cf0c:	8912      	ldrh	r2, [r2, #8]
   1cf0e:	b2d2      	uxtb	r2, r2
   1cf10:	701a      	strb	r2, [r3, #0]
   1cf12:	9b02      	ldr	r3, [sp, #8]
   1cf14:	1c5a      	adds	r2, r3, #1
   1cf16:	9202      	str	r2, [sp, #8]
   1cf18:	9a00      	ldr	r2, [sp, #0]
   1cf1a:	8912      	ldrh	r2, [r2, #8]
   1cf1c:	0a12      	lsrs	r2, r2, #8
   1cf1e:	b292      	uxth	r2, r2
   1cf20:	b2d2      	uxtb	r2, r2
   1cf22:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   1cf24:	9b02      	ldr	r3, [sp, #8]
   1cf26:	1c5a      	adds	r2, r3, #1
   1cf28:	9202      	str	r2, [sp, #8]
   1cf2a:	9a00      	ldr	r2, [sp, #0]
   1cf2c:	8952      	ldrh	r2, [r2, #10]
   1cf2e:	b2d2      	uxtb	r2, r2
   1cf30:	701a      	strb	r2, [r3, #0]
   1cf32:	9b02      	ldr	r3, [sp, #8]
   1cf34:	1c5a      	adds	r2, r3, #1
   1cf36:	9202      	str	r2, [sp, #8]
   1cf38:	9a00      	ldr	r2, [sp, #0]
   1cf3a:	8952      	ldrh	r2, [r2, #10]
   1cf3c:	0a12      	lsrs	r2, r2, #8
   1cf3e:	b292      	uxth	r2, r2
   1cf40:	b2d2      	uxtb	r2, r2
   1cf42:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1cf44:	9803      	ldr	r0, [sp, #12]
   1cf46:	f7ff fed5 	bl	1ccf4 <hciCmdSend>
  }
}
   1cf4a:	bf00      	nop
   1cf4c:	b005      	add	sp, #20
   1cf4e:	f85d fb04 	ldr.w	pc, [sp], #4

0001cf52 <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   1cf52:	b510      	push	{r4, lr}
   1cf54:	b084      	sub	sp, #16
   1cf56:	4604      	mov	r4, r0
   1cf58:	4608      	mov	r0, r1
   1cf5a:	4611      	mov	r1, r2
   1cf5c:	461a      	mov	r2, r3
   1cf5e:	4623      	mov	r3, r4
   1cf60:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cf64:	4603      	mov	r3, r0
   1cf66:	f8ad 3004 	strh.w	r3, [sp, #4]
   1cf6a:	460b      	mov	r3, r1
   1cf6c:	f8ad 3002 	strh.w	r3, [sp, #2]
   1cf70:	4613      	mov	r3, r2
   1cf72:	f8ad 3000 	strh.w	r3, [sp]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   1cf76:	210e      	movs	r1, #14
   1cf78:	f242 0020 	movw	r0, #8224	; 0x2020
   1cf7c:	f7ff fe86 	bl	1cc8c <hciCmdAlloc>
   1cf80:	9003      	str	r0, [sp, #12]
   1cf82:	9b03      	ldr	r3, [sp, #12]
   1cf84:	2b00      	cmp	r3, #0
   1cf86:	d075      	beq.n	1d074 <HciLeRemoteConnParamReqReply+0x122>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1cf88:	9b03      	ldr	r3, [sp, #12]
   1cf8a:	3303      	adds	r3, #3
   1cf8c:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1cf8e:	9b02      	ldr	r3, [sp, #8]
   1cf90:	1c5a      	adds	r2, r3, #1
   1cf92:	9202      	str	r2, [sp, #8]
   1cf94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1cf98:	b2d2      	uxtb	r2, r2
   1cf9a:	701a      	strb	r2, [r3, #0]
   1cf9c:	9b02      	ldr	r3, [sp, #8]
   1cf9e:	1c5a      	adds	r2, r3, #1
   1cfa0:	9202      	str	r2, [sp, #8]
   1cfa2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1cfa6:	0a12      	lsrs	r2, r2, #8
   1cfa8:	b292      	uxth	r2, r2
   1cfaa:	b2d2      	uxtb	r2, r2
   1cfac:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   1cfae:	9b02      	ldr	r3, [sp, #8]
   1cfb0:	1c5a      	adds	r2, r3, #1
   1cfb2:	9202      	str	r2, [sp, #8]
   1cfb4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1cfb8:	b2d2      	uxtb	r2, r2
   1cfba:	701a      	strb	r2, [r3, #0]
   1cfbc:	9b02      	ldr	r3, [sp, #8]
   1cfbe:	1c5a      	adds	r2, r3, #1
   1cfc0:	9202      	str	r2, [sp, #8]
   1cfc2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1cfc6:	0a12      	lsrs	r2, r2, #8
   1cfc8:	b292      	uxth	r2, r2
   1cfca:	b2d2      	uxtb	r2, r2
   1cfcc:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   1cfce:	9b02      	ldr	r3, [sp, #8]
   1cfd0:	1c5a      	adds	r2, r3, #1
   1cfd2:	9202      	str	r2, [sp, #8]
   1cfd4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1cfd8:	b2d2      	uxtb	r2, r2
   1cfda:	701a      	strb	r2, [r3, #0]
   1cfdc:	9b02      	ldr	r3, [sp, #8]
   1cfde:	1c5a      	adds	r2, r3, #1
   1cfe0:	9202      	str	r2, [sp, #8]
   1cfe2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1cfe6:	0a12      	lsrs	r2, r2, #8
   1cfe8:	b292      	uxth	r2, r2
   1cfea:	b2d2      	uxtb	r2, r2
   1cfec:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   1cfee:	9b02      	ldr	r3, [sp, #8]
   1cff0:	1c5a      	adds	r2, r3, #1
   1cff2:	9202      	str	r2, [sp, #8]
   1cff4:	f8bd 2000 	ldrh.w	r2, [sp]
   1cff8:	b2d2      	uxtb	r2, r2
   1cffa:	701a      	strb	r2, [r3, #0]
   1cffc:	9b02      	ldr	r3, [sp, #8]
   1cffe:	1c5a      	adds	r2, r3, #1
   1d000:	9202      	str	r2, [sp, #8]
   1d002:	f8bd 2000 	ldrh.w	r2, [sp]
   1d006:	0a12      	lsrs	r2, r2, #8
   1d008:	b292      	uxth	r2, r2
   1d00a:	b2d2      	uxtb	r2, r2
   1d00c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1d00e:	9b02      	ldr	r3, [sp, #8]
   1d010:	1c5a      	adds	r2, r3, #1
   1d012:	9202      	str	r2, [sp, #8]
   1d014:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1d018:	b2d2      	uxtb	r2, r2
   1d01a:	701a      	strb	r2, [r3, #0]
   1d01c:	9b02      	ldr	r3, [sp, #8]
   1d01e:	1c5a      	adds	r2, r3, #1
   1d020:	9202      	str	r2, [sp, #8]
   1d022:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1d026:	0a12      	lsrs	r2, r2, #8
   1d028:	b292      	uxth	r2, r2
   1d02a:	b2d2      	uxtb	r2, r2
   1d02c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   1d02e:	9b02      	ldr	r3, [sp, #8]
   1d030:	1c5a      	adds	r2, r3, #1
   1d032:	9202      	str	r2, [sp, #8]
   1d034:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1d038:	b2d2      	uxtb	r2, r2
   1d03a:	701a      	strb	r2, [r3, #0]
   1d03c:	9b02      	ldr	r3, [sp, #8]
   1d03e:	1c5a      	adds	r2, r3, #1
   1d040:	9202      	str	r2, [sp, #8]
   1d042:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1d046:	0a12      	lsrs	r2, r2, #8
   1d048:	b292      	uxth	r2, r2
   1d04a:	b2d2      	uxtb	r2, r2
   1d04c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   1d04e:	9b02      	ldr	r3, [sp, #8]
   1d050:	1c5a      	adds	r2, r3, #1
   1d052:	9202      	str	r2, [sp, #8]
   1d054:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1d058:	b2d2      	uxtb	r2, r2
   1d05a:	701a      	strb	r2, [r3, #0]
   1d05c:	9b02      	ldr	r3, [sp, #8]
   1d05e:	1c5a      	adds	r2, r3, #1
   1d060:	9202      	str	r2, [sp, #8]
   1d062:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1d066:	0a12      	lsrs	r2, r2, #8
   1d068:	b292      	uxth	r2, r2
   1d06a:	b2d2      	uxtb	r2, r2
   1d06c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d06e:	9803      	ldr	r0, [sp, #12]
   1d070:	f7ff fe40 	bl	1ccf4 <hciCmdSend>
  }
}
   1d074:	bf00      	nop
   1d076:	b004      	add	sp, #16
   1d078:	bd10      	pop	{r4, pc}

0001d07a <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   1d07a:	b500      	push	{lr}
   1d07c:	b085      	sub	sp, #20
   1d07e:	4603      	mov	r3, r0
   1d080:	460a      	mov	r2, r1
   1d082:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d086:	4613      	mov	r3, r2
   1d088:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   1d08c:	2103      	movs	r1, #3
   1d08e:	f242 0021 	movw	r0, #8225	; 0x2021
   1d092:	f7ff fdfb 	bl	1cc8c <hciCmdAlloc>
   1d096:	9003      	str	r0, [sp, #12]
   1d098:	9b03      	ldr	r3, [sp, #12]
   1d09a:	2b00      	cmp	r3, #0
   1d09c:	d01b      	beq.n	1d0d6 <HciLeRemoteConnParamReqNegReply+0x5c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d09e:	9b03      	ldr	r3, [sp, #12]
   1d0a0:	3303      	adds	r3, #3
   1d0a2:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1d0a4:	9b02      	ldr	r3, [sp, #8]
   1d0a6:	1c5a      	adds	r2, r3, #1
   1d0a8:	9202      	str	r2, [sp, #8]
   1d0aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d0ae:	b2d2      	uxtb	r2, r2
   1d0b0:	701a      	strb	r2, [r3, #0]
   1d0b2:	9b02      	ldr	r3, [sp, #8]
   1d0b4:	1c5a      	adds	r2, r3, #1
   1d0b6:	9202      	str	r2, [sp, #8]
   1d0b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d0bc:	0a12      	lsrs	r2, r2, #8
   1d0be:	b292      	uxth	r2, r2
   1d0c0:	b2d2      	uxtb	r2, r2
   1d0c2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   1d0c4:	9b02      	ldr	r3, [sp, #8]
   1d0c6:	1c5a      	adds	r2, r3, #1
   1d0c8:	9202      	str	r2, [sp, #8]
   1d0ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1d0ce:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d0d0:	9803      	ldr	r0, [sp, #12]
   1d0d2:	f7ff fe0f 	bl	1ccf4 <hciCmdSend>
  }
}
   1d0d6:	bf00      	nop
   1d0d8:	b005      	add	sp, #20
   1d0da:	f85d fb04 	ldr.w	pc, [sp], #4

0001d0de <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   1d0de:	b500      	push	{lr}
   1d0e0:	b085      	sub	sp, #20
   1d0e2:	4603      	mov	r3, r0
   1d0e4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d0e8:	460b      	mov	r3, r1
   1d0ea:	f8ad 3004 	strh.w	r3, [sp, #4]
   1d0ee:	4613      	mov	r3, r2
   1d0f0:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   1d0f4:	2106      	movs	r1, #6
   1d0f6:	f242 0022 	movw	r0, #8226	; 0x2022
   1d0fa:	f7ff fdc7 	bl	1cc8c <hciCmdAlloc>
   1d0fe:	9003      	str	r0, [sp, #12]
   1d100:	9b03      	ldr	r3, [sp, #12]
   1d102:	2b00      	cmp	r3, #0
   1d104:	d035      	beq.n	1d172 <HciLeSetDataLen+0x94>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d106:	9b03      	ldr	r3, [sp, #12]
   1d108:	3303      	adds	r3, #3
   1d10a:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1d10c:	9b02      	ldr	r3, [sp, #8]
   1d10e:	1c5a      	adds	r2, r3, #1
   1d110:	9202      	str	r2, [sp, #8]
   1d112:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d116:	b2d2      	uxtb	r2, r2
   1d118:	701a      	strb	r2, [r3, #0]
   1d11a:	9b02      	ldr	r3, [sp, #8]
   1d11c:	1c5a      	adds	r2, r3, #1
   1d11e:	9202      	str	r2, [sp, #8]
   1d120:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d124:	0a12      	lsrs	r2, r2, #8
   1d126:	b292      	uxth	r2, r2
   1d128:	b2d2      	uxtb	r2, r2
   1d12a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   1d12c:	9b02      	ldr	r3, [sp, #8]
   1d12e:	1c5a      	adds	r2, r3, #1
   1d130:	9202      	str	r2, [sp, #8]
   1d132:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d136:	b2d2      	uxtb	r2, r2
   1d138:	701a      	strb	r2, [r3, #0]
   1d13a:	9b02      	ldr	r3, [sp, #8]
   1d13c:	1c5a      	adds	r2, r3, #1
   1d13e:	9202      	str	r2, [sp, #8]
   1d140:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d144:	0a12      	lsrs	r2, r2, #8
   1d146:	b292      	uxth	r2, r2
   1d148:	b2d2      	uxtb	r2, r2
   1d14a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   1d14c:	9b02      	ldr	r3, [sp, #8]
   1d14e:	1c5a      	adds	r2, r3, #1
   1d150:	9202      	str	r2, [sp, #8]
   1d152:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1d156:	b2d2      	uxtb	r2, r2
   1d158:	701a      	strb	r2, [r3, #0]
   1d15a:	9b02      	ldr	r3, [sp, #8]
   1d15c:	1c5a      	adds	r2, r3, #1
   1d15e:	9202      	str	r2, [sp, #8]
   1d160:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1d164:	0a12      	lsrs	r2, r2, #8
   1d166:	b292      	uxth	r2, r2
   1d168:	b2d2      	uxtb	r2, r2
   1d16a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d16c:	9803      	ldr	r0, [sp, #12]
   1d16e:	f7ff fdc1 	bl	1ccf4 <hciCmdSend>
  }
}
   1d172:	bf00      	nop
   1d174:	b005      	add	sp, #20
   1d176:	f85d fb04 	ldr.w	pc, [sp], #4

0001d17a <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   1d17a:	b500      	push	{lr}
   1d17c:	b085      	sub	sp, #20
   1d17e:	4603      	mov	r3, r0
   1d180:	460a      	mov	r2, r1
   1d182:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d186:	4613      	mov	r3, r2
   1d188:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   1d18c:	2104      	movs	r1, #4
   1d18e:	f242 0024 	movw	r0, #8228	; 0x2024
   1d192:	f7ff fd7b 	bl	1cc8c <hciCmdAlloc>
   1d196:	9003      	str	r0, [sp, #12]
   1d198:	9b03      	ldr	r3, [sp, #12]
   1d19a:	2b00      	cmp	r3, #0
   1d19c:	d025      	beq.n	1d1ea <HciLeWriteDefDataLen+0x70>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d19e:	9b03      	ldr	r3, [sp, #12]
   1d1a0:	3303      	adds	r3, #3
   1d1a2:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   1d1a4:	9b02      	ldr	r3, [sp, #8]
   1d1a6:	1c5a      	adds	r2, r3, #1
   1d1a8:	9202      	str	r2, [sp, #8]
   1d1aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d1ae:	b2d2      	uxtb	r2, r2
   1d1b0:	701a      	strb	r2, [r3, #0]
   1d1b2:	9b02      	ldr	r3, [sp, #8]
   1d1b4:	1c5a      	adds	r2, r3, #1
   1d1b6:	9202      	str	r2, [sp, #8]
   1d1b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d1bc:	0a12      	lsrs	r2, r2, #8
   1d1be:	b292      	uxth	r2, r2
   1d1c0:	b2d2      	uxtb	r2, r2
   1d1c2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   1d1c4:	9b02      	ldr	r3, [sp, #8]
   1d1c6:	1c5a      	adds	r2, r3, #1
   1d1c8:	9202      	str	r2, [sp, #8]
   1d1ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d1ce:	b2d2      	uxtb	r2, r2
   1d1d0:	701a      	strb	r2, [r3, #0]
   1d1d2:	9b02      	ldr	r3, [sp, #8]
   1d1d4:	1c5a      	adds	r2, r3, #1
   1d1d6:	9202      	str	r2, [sp, #8]
   1d1d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d1dc:	0a12      	lsrs	r2, r2, #8
   1d1de:	b292      	uxth	r2, r2
   1d1e0:	b2d2      	uxtb	r2, r2
   1d1e2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d1e4:	9803      	ldr	r0, [sp, #12]
   1d1e6:	f7ff fd85 	bl	1ccf4 <hciCmdSend>
  }
}
   1d1ea:	bf00      	nop
   1d1ec:	b005      	add	sp, #20
   1d1ee:	f85d fb04 	ldr.w	pc, [sp], #4

0001d1f2 <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   1d1f2:	b500      	push	{lr}
   1d1f4:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   1d1f6:	2100      	movs	r1, #0
   1d1f8:	f242 002f 	movw	r0, #8239	; 0x202f
   1d1fc:	f7ff fd46 	bl	1cc8c <hciCmdAlloc>
   1d200:	9001      	str	r0, [sp, #4]
   1d202:	9b01      	ldr	r3, [sp, #4]
   1d204:	2b00      	cmp	r3, #0
   1d206:	d002      	beq.n	1d20e <HciLeReadMaxDataLen+0x1c>
  {
    hciCmdSend(pBuf);
   1d208:	9801      	ldr	r0, [sp, #4]
   1d20a:	f7ff fd73 	bl	1ccf4 <hciCmdSend>
  }
}
   1d20e:	bf00      	nop
   1d210:	b003      	add	sp, #12
   1d212:	f85d fb04 	ldr.w	pc, [sp], #4

0001d216 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   1d216:	b500      	push	{lr}
   1d218:	b085      	sub	sp, #20
   1d21a:	9001      	str	r0, [sp, #4]
   1d21c:	9100      	str	r1, [sp, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   1d21e:	2120      	movs	r1, #32
   1d220:	f242 0017 	movw	r0, #8215	; 0x2017
   1d224:	f7ff fd32 	bl	1cc8c <hciCmdAlloc>
   1d228:	9003      	str	r0, [sp, #12]
   1d22a:	9b03      	ldr	r3, [sp, #12]
   1d22c:	2b00      	cmp	r3, #0
   1d22e:	d012      	beq.n	1d256 <HciLeEncryptCmd+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d230:	9b03      	ldr	r3, [sp, #12]
   1d232:	3303      	adds	r3, #3
   1d234:	9302      	str	r3, [sp, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   1d236:	2210      	movs	r2, #16
   1d238:	9901      	ldr	r1, [sp, #4]
   1d23a:	9802      	ldr	r0, [sp, #8]
   1d23c:	f7ee ff90 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   1d240:	9b02      	ldr	r3, [sp, #8]
   1d242:	3310      	adds	r3, #16
   1d244:	9302      	str	r3, [sp, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   1d246:	2210      	movs	r2, #16
   1d248:	9900      	ldr	r1, [sp, #0]
   1d24a:	9802      	ldr	r0, [sp, #8]
   1d24c:	f7ee ff88 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1d250:	9803      	ldr	r0, [sp, #12]
   1d252:	f7ff fd4f 	bl	1ccf4 <hciCmdSend>
  }
}
   1d256:	bf00      	nop
   1d258:	b005      	add	sp, #20
   1d25a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d25e <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   1d25e:	b500      	push	{lr}
   1d260:	b085      	sub	sp, #20
   1d262:	4603      	mov	r3, r0
   1d264:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   1d268:	2102      	movs	r1, #2
   1d26a:	f242 001b 	movw	r0, #8219	; 0x201b
   1d26e:	f7ff fd0d 	bl	1cc8c <hciCmdAlloc>
   1d272:	9003      	str	r0, [sp, #12]
   1d274:	9b03      	ldr	r3, [sp, #12]
   1d276:	2b00      	cmp	r3, #0
   1d278:	d015      	beq.n	1d2a6 <HciLeLtkReqNegReplCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d27a:	9b03      	ldr	r3, [sp, #12]
   1d27c:	3303      	adds	r3, #3
   1d27e:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1d280:	9b02      	ldr	r3, [sp, #8]
   1d282:	1c5a      	adds	r2, r3, #1
   1d284:	9202      	str	r2, [sp, #8]
   1d286:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d28a:	b2d2      	uxtb	r2, r2
   1d28c:	701a      	strb	r2, [r3, #0]
   1d28e:	9b02      	ldr	r3, [sp, #8]
   1d290:	1c5a      	adds	r2, r3, #1
   1d292:	9202      	str	r2, [sp, #8]
   1d294:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d298:	0a12      	lsrs	r2, r2, #8
   1d29a:	b292      	uxth	r2, r2
   1d29c:	b2d2      	uxtb	r2, r2
   1d29e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d2a0:	9803      	ldr	r0, [sp, #12]
   1d2a2:	f7ff fd27 	bl	1ccf4 <hciCmdSend>
  }
}
   1d2a6:	bf00      	nop
   1d2a8:	b005      	add	sp, #20
   1d2aa:	f85d fb04 	ldr.w	pc, [sp], #4

0001d2ae <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   1d2ae:	b500      	push	{lr}
   1d2b0:	b085      	sub	sp, #20
   1d2b2:	4603      	mov	r3, r0
   1d2b4:	9100      	str	r1, [sp, #0]
   1d2b6:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   1d2ba:	2112      	movs	r1, #18
   1d2bc:	f242 001a 	movw	r0, #8218	; 0x201a
   1d2c0:	f7ff fce4 	bl	1cc8c <hciCmdAlloc>
   1d2c4:	9003      	str	r0, [sp, #12]
   1d2c6:	9b03      	ldr	r3, [sp, #12]
   1d2c8:	2b00      	cmp	r3, #0
   1d2ca:	d01a      	beq.n	1d302 <HciLeLtkReqReplCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d2cc:	9b03      	ldr	r3, [sp, #12]
   1d2ce:	3303      	adds	r3, #3
   1d2d0:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1d2d2:	9b02      	ldr	r3, [sp, #8]
   1d2d4:	1c5a      	adds	r2, r3, #1
   1d2d6:	9202      	str	r2, [sp, #8]
   1d2d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d2dc:	b2d2      	uxtb	r2, r2
   1d2de:	701a      	strb	r2, [r3, #0]
   1d2e0:	9b02      	ldr	r3, [sp, #8]
   1d2e2:	1c5a      	adds	r2, r3, #1
   1d2e4:	9202      	str	r2, [sp, #8]
   1d2e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d2ea:	0a12      	lsrs	r2, r2, #8
   1d2ec:	b292      	uxth	r2, r2
   1d2ee:	b2d2      	uxtb	r2, r2
   1d2f0:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   1d2f2:	2210      	movs	r2, #16
   1d2f4:	9900      	ldr	r1, [sp, #0]
   1d2f6:	9802      	ldr	r0, [sp, #8]
   1d2f8:	f7ee ff32 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1d2fc:	9803      	ldr	r0, [sp, #12]
   1d2fe:	f7ff fcf9 	bl	1ccf4 <hciCmdSend>
  }
}
   1d302:	bf00      	nop
   1d304:	b005      	add	sp, #20
   1d306:	f85d fb04 	ldr.w	pc, [sp], #4

0001d30a <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   1d30a:	b500      	push	{lr}
   1d30c:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   1d30e:	2100      	movs	r1, #0
   1d310:	f242 0018 	movw	r0, #8216	; 0x2018
   1d314:	f7ff fcba 	bl	1cc8c <hciCmdAlloc>
   1d318:	9001      	str	r0, [sp, #4]
   1d31a:	9b01      	ldr	r3, [sp, #4]
   1d31c:	2b00      	cmp	r3, #0
   1d31e:	d002      	beq.n	1d326 <HciLeRandCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1d320:	9801      	ldr	r0, [sp, #4]
   1d322:	f7ff fce7 	bl	1ccf4 <hciCmdSend>
  }
}
   1d326:	bf00      	nop
   1d328:	b003      	add	sp, #12
   1d32a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d32e <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   1d32e:	b500      	push	{lr}
   1d330:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   1d332:	2100      	movs	r1, #0
   1d334:	f242 0002 	movw	r0, #8194	; 0x2002
   1d338:	f7ff fca8 	bl	1cc8c <hciCmdAlloc>
   1d33c:	9001      	str	r0, [sp, #4]
   1d33e:	9b01      	ldr	r3, [sp, #4]
   1d340:	2b00      	cmp	r3, #0
   1d342:	d002      	beq.n	1d34a <HciLeReadBufSizeCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1d344:	9801      	ldr	r0, [sp, #4]
   1d346:	f7ff fcd5 	bl	1ccf4 <hciCmdSend>
  }
}
   1d34a:	bf00      	nop
   1d34c:	b003      	add	sp, #12
   1d34e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d352 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   1d352:	b500      	push	{lr}
   1d354:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   1d356:	2100      	movs	r1, #0
   1d358:	f242 0003 	movw	r0, #8195	; 0x2003
   1d35c:	f7ff fc96 	bl	1cc8c <hciCmdAlloc>
   1d360:	9001      	str	r0, [sp, #4]
   1d362:	9b01      	ldr	r3, [sp, #4]
   1d364:	2b00      	cmp	r3, #0
   1d366:	d002      	beq.n	1d36e <HciLeReadLocalSupFeatCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1d368:	9801      	ldr	r0, [sp, #4]
   1d36a:	f7ff fcc3 	bl	1ccf4 <hciCmdSend>
  }
}
   1d36e:	bf00      	nop
   1d370:	b003      	add	sp, #12
   1d372:	f85d fb04 	ldr.w	pc, [sp], #4

0001d376 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   1d376:	b500      	push	{lr}
   1d378:	b085      	sub	sp, #20
   1d37a:	4603      	mov	r3, r0
   1d37c:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   1d380:	2102      	movs	r1, #2
   1d382:	f242 0016 	movw	r0, #8214	; 0x2016
   1d386:	f7ff fc81 	bl	1cc8c <hciCmdAlloc>
   1d38a:	9003      	str	r0, [sp, #12]
   1d38c:	9b03      	ldr	r3, [sp, #12]
   1d38e:	2b00      	cmp	r3, #0
   1d390:	d015      	beq.n	1d3be <HciLeReadRemoteFeatCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d392:	9b03      	ldr	r3, [sp, #12]
   1d394:	3303      	adds	r3, #3
   1d396:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1d398:	9b02      	ldr	r3, [sp, #8]
   1d39a:	1c5a      	adds	r2, r3, #1
   1d39c:	9202      	str	r2, [sp, #8]
   1d39e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d3a2:	b2d2      	uxtb	r2, r2
   1d3a4:	701a      	strb	r2, [r3, #0]
   1d3a6:	9b02      	ldr	r3, [sp, #8]
   1d3a8:	1c5a      	adds	r2, r3, #1
   1d3aa:	9202      	str	r2, [sp, #8]
   1d3ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d3b0:	0a12      	lsrs	r2, r2, #8
   1d3b2:	b292      	uxth	r2, r2
   1d3b4:	b2d2      	uxtb	r2, r2
   1d3b6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d3b8:	9803      	ldr	r0, [sp, #12]
   1d3ba:	f7ff fc9b 	bl	1ccf4 <hciCmdSend>
  }
}
   1d3be:	bf00      	nop
   1d3c0:	b005      	add	sp, #20
   1d3c2:	f85d fb04 	ldr.w	pc, [sp], #4

0001d3c6 <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   1d3c6:	b500      	push	{lr}
   1d3c8:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   1d3ca:	2100      	movs	r1, #0
   1d3cc:	f242 001c 	movw	r0, #8220	; 0x201c
   1d3d0:	f7ff fc5c 	bl	1cc8c <hciCmdAlloc>
   1d3d4:	9001      	str	r0, [sp, #4]
   1d3d6:	9b01      	ldr	r3, [sp, #4]
   1d3d8:	2b00      	cmp	r3, #0
   1d3da:	d002      	beq.n	1d3e2 <HciLeReadSupStatesCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1d3dc:	9801      	ldr	r0, [sp, #4]
   1d3de:	f7ff fc89 	bl	1ccf4 <hciCmdSend>
  }
}
   1d3e2:	bf00      	nop
   1d3e4:	b003      	add	sp, #12
   1d3e6:	f85d fb04 	ldr.w	pc, [sp], #4

0001d3ea <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   1d3ea:	b500      	push	{lr}
   1d3ec:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   1d3ee:	2100      	movs	r1, #0
   1d3f0:	f242 000f 	movw	r0, #8207	; 0x200f
   1d3f4:	f7ff fc4a 	bl	1cc8c <hciCmdAlloc>
   1d3f8:	9001      	str	r0, [sp, #4]
   1d3fa:	9b01      	ldr	r3, [sp, #4]
   1d3fc:	2b00      	cmp	r3, #0
   1d3fe:	d002      	beq.n	1d406 <HciLeReadWhiteListSizeCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1d400:	9801      	ldr	r0, [sp, #4]
   1d402:	f7ff fc77 	bl	1ccf4 <hciCmdSend>
  }
}
   1d406:	bf00      	nop
   1d408:	b003      	add	sp, #12
   1d40a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d40e <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   1d40e:	b500      	push	{lr}
   1d410:	b085      	sub	sp, #20
   1d412:	4603      	mov	r3, r0
   1d414:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   1d418:	2101      	movs	r1, #1
   1d41a:	f242 000a 	movw	r0, #8202	; 0x200a
   1d41e:	f7ff fc35 	bl	1cc8c <hciCmdAlloc>
   1d422:	9003      	str	r0, [sp, #12]
   1d424:	9b03      	ldr	r3, [sp, #12]
   1d426:	2b00      	cmp	r3, #0
   1d428:	d00b      	beq.n	1d442 <HciLeSetAdvEnableCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d42a:	9b03      	ldr	r3, [sp, #12]
   1d42c:	3303      	adds	r3, #3
   1d42e:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, enable);
   1d430:	9b02      	ldr	r3, [sp, #8]
   1d432:	1c5a      	adds	r2, r3, #1
   1d434:	9202      	str	r2, [sp, #8]
   1d436:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1d43a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d43c:	9803      	ldr	r0, [sp, #12]
   1d43e:	f7ff fc59 	bl	1ccf4 <hciCmdSend>
  }
}
   1d442:	bf00      	nop
   1d444:	b005      	add	sp, #20
   1d446:	f85d fb04 	ldr.w	pc, [sp], #4

0001d44a <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   1d44a:	b500      	push	{lr}
   1d44c:	b085      	sub	sp, #20
   1d44e:	4603      	mov	r3, r0
   1d450:	9100      	str	r1, [sp, #0]
   1d452:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   1d456:	2120      	movs	r1, #32
   1d458:	f242 0008 	movw	r0, #8200	; 0x2008
   1d45c:	f7ff fc16 	bl	1cc8c <hciCmdAlloc>
   1d460:	9003      	str	r0, [sp, #12]
   1d462:	9b03      	ldr	r3, [sp, #12]
   1d464:	2b00      	cmp	r3, #0
   1d466:	d020      	beq.n	1d4aa <HciLeSetAdvDataCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d468:	9b03      	ldr	r3, [sp, #12]
   1d46a:	3303      	adds	r3, #3
   1d46c:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, len);
   1d46e:	9b02      	ldr	r3, [sp, #8]
   1d470:	1c5a      	adds	r2, r3, #1
   1d472:	9202      	str	r2, [sp, #8]
   1d474:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1d478:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   1d47a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d47e:	461a      	mov	r2, r3
   1d480:	9900      	ldr	r1, [sp, #0]
   1d482:	9802      	ldr	r0, [sp, #8]
   1d484:	f7ee fe6c 	bl	c160 <memcpy>
    p += len;
   1d488:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d48c:	9a02      	ldr	r2, [sp, #8]
   1d48e:	4413      	add	r3, r2
   1d490:	9302      	str	r3, [sp, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   1d492:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d496:	f1c3 031f 	rsb	r3, r3, #31
   1d49a:	461a      	mov	r2, r3
   1d49c:	2100      	movs	r1, #0
   1d49e:	9802      	ldr	r0, [sp, #8]
   1d4a0:	f7ee fef8 	bl	c294 <memset>
    hciCmdSend(pBuf);
   1d4a4:	9803      	ldr	r0, [sp, #12]
   1d4a6:	f7ff fc25 	bl	1ccf4 <hciCmdSend>
  }
}
   1d4aa:	bf00      	nop
   1d4ac:	b005      	add	sp, #20
   1d4ae:	f85d fb04 	ldr.w	pc, [sp], #4

0001d4b2 <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   1d4b2:	b510      	push	{r4, lr}
   1d4b4:	b084      	sub	sp, #16
   1d4b6:	4604      	mov	r4, r0
   1d4b8:	4608      	mov	r0, r1
   1d4ba:	4611      	mov	r1, r2
   1d4bc:	461a      	mov	r2, r3
   1d4be:	4623      	mov	r3, r4
   1d4c0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d4c4:	4603      	mov	r3, r0
   1d4c6:	f8ad 3004 	strh.w	r3, [sp, #4]
   1d4ca:	460b      	mov	r3, r1
   1d4cc:	f88d 3003 	strb.w	r3, [sp, #3]
   1d4d0:	4613      	mov	r3, r2
   1d4d2:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   1d4d6:	210f      	movs	r1, #15
   1d4d8:	f242 0006 	movw	r0, #8198	; 0x2006
   1d4dc:	f7ff fbd6 	bl	1cc8c <hciCmdAlloc>
   1d4e0:	9002      	str	r0, [sp, #8]
   1d4e2:	9b02      	ldr	r3, [sp, #8]
   1d4e4:	2b00      	cmp	r3, #0
   1d4e6:	d052      	beq.n	1d58e <HciLeSetAdvParamCmd+0xdc>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d4e8:	9b02      	ldr	r3, [sp, #8]
   1d4ea:	3303      	adds	r3, #3
   1d4ec:	9303      	str	r3, [sp, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   1d4ee:	9b03      	ldr	r3, [sp, #12]
   1d4f0:	1c5a      	adds	r2, r3, #1
   1d4f2:	9203      	str	r2, [sp, #12]
   1d4f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d4f8:	b2d2      	uxtb	r2, r2
   1d4fa:	701a      	strb	r2, [r3, #0]
   1d4fc:	9b03      	ldr	r3, [sp, #12]
   1d4fe:	1c5a      	adds	r2, r3, #1
   1d500:	9203      	str	r2, [sp, #12]
   1d502:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d506:	0a12      	lsrs	r2, r2, #8
   1d508:	b292      	uxth	r2, r2
   1d50a:	b2d2      	uxtb	r2, r2
   1d50c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   1d50e:	9b03      	ldr	r3, [sp, #12]
   1d510:	1c5a      	adds	r2, r3, #1
   1d512:	9203      	str	r2, [sp, #12]
   1d514:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d518:	b2d2      	uxtb	r2, r2
   1d51a:	701a      	strb	r2, [r3, #0]
   1d51c:	9b03      	ldr	r3, [sp, #12]
   1d51e:	1c5a      	adds	r2, r3, #1
   1d520:	9203      	str	r2, [sp, #12]
   1d522:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d526:	0a12      	lsrs	r2, r2, #8
   1d528:	b292      	uxth	r2, r2
   1d52a:	b2d2      	uxtb	r2, r2
   1d52c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   1d52e:	9b03      	ldr	r3, [sp, #12]
   1d530:	1c5a      	adds	r2, r3, #1
   1d532:	9203      	str	r2, [sp, #12]
   1d534:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1d538:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   1d53a:	9b03      	ldr	r3, [sp, #12]
   1d53c:	1c5a      	adds	r2, r3, #1
   1d53e:	9203      	str	r2, [sp, #12]
   1d540:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1d544:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1d546:	9b03      	ldr	r3, [sp, #12]
   1d548:	1c5a      	adds	r2, r3, #1
   1d54a:	9203      	str	r2, [sp, #12]
   1d54c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1d550:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   1d552:	9b07      	ldr	r3, [sp, #28]
   1d554:	2b00      	cmp	r3, #0
   1d556:	d007      	beq.n	1d568 <HciLeSetAdvParamCmd+0xb6>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   1d558:	9907      	ldr	r1, [sp, #28]
   1d55a:	9803      	ldr	r0, [sp, #12]
   1d55c:	f7fd feb4 	bl	1b2c8 <BdaCpy>
   1d560:	9b03      	ldr	r3, [sp, #12]
   1d562:	3306      	adds	r3, #6
   1d564:	9303      	str	r3, [sp, #12]
   1d566:	e003      	b.n	1d570 <HciLeSetAdvParamCmd+0xbe>
    }
    else
    {
      p = BdaClr(p);
   1d568:	9803      	ldr	r0, [sp, #12]
   1d56a:	f7fd fecd 	bl	1b308 <BdaClr>
   1d56e:	9003      	str	r0, [sp, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   1d570:	9b03      	ldr	r3, [sp, #12]
   1d572:	1c5a      	adds	r2, r3, #1
   1d574:	9203      	str	r2, [sp, #12]
   1d576:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1d57a:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   1d57c:	9b03      	ldr	r3, [sp, #12]
   1d57e:	1c5a      	adds	r2, r3, #1
   1d580:	9203      	str	r2, [sp, #12]
   1d582:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   1d586:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d588:	9802      	ldr	r0, [sp, #8]
   1d58a:	f7ff fbb3 	bl	1ccf4 <hciCmdSend>
  }
}
   1d58e:	bf00      	nop
   1d590:	b004      	add	sp, #16
   1d592:	bd10      	pop	{r4, pc}

0001d594 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   1d594:	b500      	push	{lr}
   1d596:	b085      	sub	sp, #20
   1d598:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   1d59a:	2108      	movs	r1, #8
   1d59c:	f242 0001 	movw	r0, #8193	; 0x2001
   1d5a0:	f7ff fb74 	bl	1cc8c <hciCmdAlloc>
   1d5a4:	9003      	str	r0, [sp, #12]
   1d5a6:	9b03      	ldr	r3, [sp, #12]
   1d5a8:	2b00      	cmp	r3, #0
   1d5aa:	d00a      	beq.n	1d5c2 <HciLeSetEventMaskCmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d5ac:	9b03      	ldr	r3, [sp, #12]
   1d5ae:	3303      	adds	r3, #3
   1d5b0:	9302      	str	r3, [sp, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   1d5b2:	2208      	movs	r2, #8
   1d5b4:	9901      	ldr	r1, [sp, #4]
   1d5b6:	9802      	ldr	r0, [sp, #8]
   1d5b8:	f7ee fdd2 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1d5bc:	9803      	ldr	r0, [sp, #12]
   1d5be:	f7ff fb99 	bl	1ccf4 <hciCmdSend>
  }
}
   1d5c2:	bf00      	nop
   1d5c4:	b005      	add	sp, #20
   1d5c6:	f85d fb04 	ldr.w	pc, [sp], #4

0001d5ca <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   1d5ca:	b500      	push	{lr}
   1d5cc:	b085      	sub	sp, #20
   1d5ce:	4603      	mov	r3, r0
   1d5d0:	9100      	str	r1, [sp, #0]
   1d5d2:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   1d5d6:	2120      	movs	r1, #32
   1d5d8:	f242 0009 	movw	r0, #8201	; 0x2009
   1d5dc:	f7ff fb56 	bl	1cc8c <hciCmdAlloc>
   1d5e0:	9003      	str	r0, [sp, #12]
   1d5e2:	9b03      	ldr	r3, [sp, #12]
   1d5e4:	2b00      	cmp	r3, #0
   1d5e6:	d020      	beq.n	1d62a <HciLeSetScanRespDataCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d5e8:	9b03      	ldr	r3, [sp, #12]
   1d5ea:	3303      	adds	r3, #3
   1d5ec:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, len);
   1d5ee:	9b02      	ldr	r3, [sp, #8]
   1d5f0:	1c5a      	adds	r2, r3, #1
   1d5f2:	9202      	str	r2, [sp, #8]
   1d5f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1d5f8:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   1d5fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d5fe:	461a      	mov	r2, r3
   1d600:	9900      	ldr	r1, [sp, #0]
   1d602:	9802      	ldr	r0, [sp, #8]
   1d604:	f7ee fdac 	bl	c160 <memcpy>
    p += len;
   1d608:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d60c:	9a02      	ldr	r2, [sp, #8]
   1d60e:	4413      	add	r3, r2
   1d610:	9302      	str	r3, [sp, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   1d612:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d616:	f1c3 031f 	rsb	r3, r3, #31
   1d61a:	461a      	mov	r2, r3
   1d61c:	2100      	movs	r1, #0
   1d61e:	9802      	ldr	r0, [sp, #8]
   1d620:	f7ee fe38 	bl	c294 <memset>
    hciCmdSend(pBuf);
   1d624:	9803      	ldr	r0, [sp, #12]
   1d626:	f7ff fb65 	bl	1ccf4 <hciCmdSend>
  }
}
   1d62a:	bf00      	nop
   1d62c:	b005      	add	sp, #20
   1d62e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d632 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   1d632:	b500      	push	{lr}
   1d634:	b087      	sub	sp, #28
   1d636:	9102      	str	r1, [sp, #8]
   1d638:	9301      	str	r3, [sp, #4]
   1d63a:	4603      	mov	r3, r0
   1d63c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d640:	4613      	mov	r3, r2
   1d642:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   1d646:	211c      	movs	r1, #28
   1d648:	f242 0019 	movw	r0, #8217	; 0x2019
   1d64c:	f7ff fb1e 	bl	1cc8c <hciCmdAlloc>
   1d650:	9005      	str	r0, [sp, #20]
   1d652:	9b05      	ldr	r3, [sp, #20]
   1d654:	2b00      	cmp	r3, #0
   1d656:	d032      	beq.n	1d6be <HciLeStartEncryptionCmd+0x8c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d658:	9b05      	ldr	r3, [sp, #20]
   1d65a:	3303      	adds	r3, #3
   1d65c:	9304      	str	r3, [sp, #16]
    UINT16_TO_BSTREAM(p, handle);
   1d65e:	9b04      	ldr	r3, [sp, #16]
   1d660:	1c5a      	adds	r2, r3, #1
   1d662:	9204      	str	r2, [sp, #16]
   1d664:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1d668:	b2d2      	uxtb	r2, r2
   1d66a:	701a      	strb	r2, [r3, #0]
   1d66c:	9b04      	ldr	r3, [sp, #16]
   1d66e:	1c5a      	adds	r2, r3, #1
   1d670:	9204      	str	r2, [sp, #16]
   1d672:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1d676:	0a12      	lsrs	r2, r2, #8
   1d678:	b292      	uxth	r2, r2
   1d67a:	b2d2      	uxtb	r2, r2
   1d67c:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   1d67e:	2208      	movs	r2, #8
   1d680:	9902      	ldr	r1, [sp, #8]
   1d682:	9804      	ldr	r0, [sp, #16]
   1d684:	f7ee fd6c 	bl	c160 <memcpy>
    p += HCI_RAND_LEN;
   1d688:	9b04      	ldr	r3, [sp, #16]
   1d68a:	3308      	adds	r3, #8
   1d68c:	9304      	str	r3, [sp, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   1d68e:	9b04      	ldr	r3, [sp, #16]
   1d690:	1c5a      	adds	r2, r3, #1
   1d692:	9204      	str	r2, [sp, #16]
   1d694:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1d698:	b2d2      	uxtb	r2, r2
   1d69a:	701a      	strb	r2, [r3, #0]
   1d69c:	9b04      	ldr	r3, [sp, #16]
   1d69e:	1c5a      	adds	r2, r3, #1
   1d6a0:	9204      	str	r2, [sp, #16]
   1d6a2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1d6a6:	0a12      	lsrs	r2, r2, #8
   1d6a8:	b292      	uxth	r2, r2
   1d6aa:	b2d2      	uxtb	r2, r2
   1d6ac:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   1d6ae:	2210      	movs	r2, #16
   1d6b0:	9901      	ldr	r1, [sp, #4]
   1d6b2:	9804      	ldr	r0, [sp, #16]
   1d6b4:	f7ee fd54 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1d6b8:	9805      	ldr	r0, [sp, #20]
   1d6ba:	f7ff fb1b 	bl	1ccf4 <hciCmdSend>
  }
}
   1d6be:	bf00      	nop
   1d6c0:	b007      	add	sp, #28
   1d6c2:	f85d fb04 	ldr.w	pc, [sp], #4

0001d6c6 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   1d6c6:	b500      	push	{lr}
   1d6c8:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   1d6ca:	2100      	movs	r1, #0
   1d6cc:	f241 0009 	movw	r0, #4105	; 0x1009
   1d6d0:	f7ff fadc 	bl	1cc8c <hciCmdAlloc>
   1d6d4:	9001      	str	r0, [sp, #4]
   1d6d6:	9b01      	ldr	r3, [sp, #4]
   1d6d8:	2b00      	cmp	r3, #0
   1d6da:	d002      	beq.n	1d6e2 <HciReadBdAddrCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1d6dc:	9801      	ldr	r0, [sp, #4]
   1d6de:	f7ff fb09 	bl	1ccf4 <hciCmdSend>
  }
}
   1d6e2:	bf00      	nop
   1d6e4:	b003      	add	sp, #12
   1d6e6:	f85d fb04 	ldr.w	pc, [sp], #4

0001d6ea <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   1d6ea:	b500      	push	{lr}
   1d6ec:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   1d6ee:	2100      	movs	r1, #0
   1d6f0:	f241 0001 	movw	r0, #4097	; 0x1001
   1d6f4:	f7ff faca 	bl	1cc8c <hciCmdAlloc>
   1d6f8:	9001      	str	r0, [sp, #4]
   1d6fa:	9b01      	ldr	r3, [sp, #4]
   1d6fc:	2b00      	cmp	r3, #0
   1d6fe:	d002      	beq.n	1d706 <HciReadLocalVerInfoCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1d700:	9801      	ldr	r0, [sp, #4]
   1d702:	f7ff faf7 	bl	1ccf4 <hciCmdSend>
  }
}
   1d706:	bf00      	nop
   1d708:	b003      	add	sp, #12
   1d70a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d70e <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   1d70e:	b500      	push	{lr}
   1d710:	b085      	sub	sp, #20
   1d712:	4603      	mov	r3, r0
   1d714:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   1d718:	2102      	movs	r1, #2
   1d71a:	f241 4005 	movw	r0, #5125	; 0x1405
   1d71e:	f7ff fab5 	bl	1cc8c <hciCmdAlloc>
   1d722:	9003      	str	r0, [sp, #12]
   1d724:	9b03      	ldr	r3, [sp, #12]
   1d726:	2b00      	cmp	r3, #0
   1d728:	d015      	beq.n	1d756 <HciReadRssiCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d72a:	9b03      	ldr	r3, [sp, #12]
   1d72c:	3303      	adds	r3, #3
   1d72e:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1d730:	9b02      	ldr	r3, [sp, #8]
   1d732:	1c5a      	adds	r2, r3, #1
   1d734:	9202      	str	r2, [sp, #8]
   1d736:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d73a:	b2d2      	uxtb	r2, r2
   1d73c:	701a      	strb	r2, [r3, #0]
   1d73e:	9b02      	ldr	r3, [sp, #8]
   1d740:	1c5a      	adds	r2, r3, #1
   1d742:	9202      	str	r2, [sp, #8]
   1d744:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d748:	0a12      	lsrs	r2, r2, #8
   1d74a:	b292      	uxth	r2, r2
   1d74c:	b2d2      	uxtb	r2, r2
   1d74e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d750:	9803      	ldr	r0, [sp, #12]
   1d752:	f7ff facf 	bl	1ccf4 <hciCmdSend>
  }
}
   1d756:	bf00      	nop
   1d758:	b005      	add	sp, #20
   1d75a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001d760 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   1d760:	b500      	push	{lr}
   1d762:	b085      	sub	sp, #20
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   1d764:	2314      	movs	r3, #20
   1d766:	f88d 3006 	strb.w	r3, [sp, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   1d76a:	4b13      	ldr	r3, [pc, #76]	; (1d7b8 <HciResetCmd+0x58>)
   1d76c:	68db      	ldr	r3, [r3, #12]
   1d76e:	aa01      	add	r2, sp, #4
   1d770:	4610      	mov	r0, r2
   1d772:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1d774:	e002      	b.n	1d77c <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   1d776:	9803      	ldr	r0, [sp, #12]
   1d778:	f7fa fe93 	bl	184a2 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1d77c:	f10d 030b 	add.w	r3, sp, #11
   1d780:	4619      	mov	r1, r3
   1d782:	480e      	ldr	r0, [pc, #56]	; (1d7bc <HciResetCmd+0x5c>)
   1d784:	f7fa feca 	bl	1851c <WsfMsgDeq>
   1d788:	9003      	str	r0, [sp, #12]
   1d78a:	9b03      	ldr	r3, [sp, #12]
   1d78c:	2b00      	cmp	r3, #0
   1d78e:	d1f2      	bne.n	1d776 <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   1d790:	4b0b      	ldr	r3, [pc, #44]	; (1d7c0 <HciResetCmd+0x60>)
   1d792:	2201      	movs	r2, #1
   1d794:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   1d796:	2100      	movs	r1, #0
   1d798:	f640 4003 	movw	r0, #3075	; 0xc03
   1d79c:	f7ff fa76 	bl	1cc8c <hciCmdAlloc>
   1d7a0:	9003      	str	r0, [sp, #12]
   1d7a2:	9b03      	ldr	r3, [sp, #12]
   1d7a4:	2b00      	cmp	r3, #0
   1d7a6:	d002      	beq.n	1d7ae <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   1d7a8:	9803      	ldr	r0, [sp, #12]
   1d7aa:	f7ff faa3 	bl	1ccf4 <hciCmdSend>
  }
}
   1d7ae:	bf00      	nop
   1d7b0:	b005      	add	sp, #20
   1d7b2:	f85d fb04 	ldr.w	pc, [sp], #4
   1d7b6:	bf00      	nop
   1d7b8:	10009670 	.word	0x10009670
   1d7bc:	1000969c 	.word	0x1000969c
   1d7c0:	1000968c 	.word	0x1000968c

0001d7c4 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   1d7c4:	b500      	push	{lr}
   1d7c6:	b085      	sub	sp, #20
   1d7c8:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   1d7ca:	2108      	movs	r1, #8
   1d7cc:	f640 4001 	movw	r0, #3073	; 0xc01
   1d7d0:	f7ff fa5c 	bl	1cc8c <hciCmdAlloc>
   1d7d4:	9003      	str	r0, [sp, #12]
   1d7d6:	9b03      	ldr	r3, [sp, #12]
   1d7d8:	2b00      	cmp	r3, #0
   1d7da:	d00a      	beq.n	1d7f2 <HciSetEventMaskCmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d7dc:	9b03      	ldr	r3, [sp, #12]
   1d7de:	3303      	adds	r3, #3
   1d7e0:	9302      	str	r3, [sp, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   1d7e2:	2208      	movs	r2, #8
   1d7e4:	9901      	ldr	r1, [sp, #4]
   1d7e6:	9802      	ldr	r0, [sp, #8]
   1d7e8:	f7ee fcba 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1d7ec:	9803      	ldr	r0, [sp, #12]
   1d7ee:	f7ff fa81 	bl	1ccf4 <hciCmdSend>
  }
}
   1d7f2:	bf00      	nop
   1d7f4:	b005      	add	sp, #20
   1d7f6:	f85d fb04 	ldr.w	pc, [sp], #4

0001d7fa <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   1d7fa:	b500      	push	{lr}
   1d7fc:	b085      	sub	sp, #20
   1d7fe:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   1d800:	2108      	movs	r1, #8
   1d802:	f640 4063 	movw	r0, #3171	; 0xc63
   1d806:	f7ff fa41 	bl	1cc8c <hciCmdAlloc>
   1d80a:	9003      	str	r0, [sp, #12]
   1d80c:	9b03      	ldr	r3, [sp, #12]
   1d80e:	2b00      	cmp	r3, #0
   1d810:	d00a      	beq.n	1d828 <HciSetEventMaskPage2Cmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d812:	9b03      	ldr	r3, [sp, #12]
   1d814:	3303      	adds	r3, #3
   1d816:	9302      	str	r3, [sp, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   1d818:	2208      	movs	r2, #8
   1d81a:	9901      	ldr	r1, [sp, #4]
   1d81c:	9802      	ldr	r0, [sp, #8]
   1d81e:	f7ee fc9f 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1d822:	9803      	ldr	r0, [sp, #12]
   1d824:	f7ff fa66 	bl	1ccf4 <hciCmdSend>
  }
}
   1d828:	bf00      	nop
   1d82a:	b005      	add	sp, #20
   1d82c:	f85d fb04 	ldr.w	pc, [sp], #4

0001d830 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   1d830:	b500      	push	{lr}
   1d832:	b085      	sub	sp, #20
   1d834:	4603      	mov	r3, r0
   1d836:	460a      	mov	r2, r1
   1d838:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d83c:	4613      	mov	r3, r2
   1d83e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   1d842:	2104      	movs	r1, #4
   1d844:	f640 407c 	movw	r0, #3196	; 0xc7c
   1d848:	f7ff fa20 	bl	1cc8c <hciCmdAlloc>
   1d84c:	9003      	str	r0, [sp, #12]
   1d84e:	9b03      	ldr	r3, [sp, #12]
   1d850:	2b00      	cmp	r3, #0
   1d852:	d025      	beq.n	1d8a0 <HciWriteAuthPayloadTimeout+0x70>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d854:	9b03      	ldr	r3, [sp, #12]
   1d856:	3303      	adds	r3, #3
   1d858:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1d85a:	9b02      	ldr	r3, [sp, #8]
   1d85c:	1c5a      	adds	r2, r3, #1
   1d85e:	9202      	str	r2, [sp, #8]
   1d860:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d864:	b2d2      	uxtb	r2, r2
   1d866:	701a      	strb	r2, [r3, #0]
   1d868:	9b02      	ldr	r3, [sp, #8]
   1d86a:	1c5a      	adds	r2, r3, #1
   1d86c:	9202      	str	r2, [sp, #8]
   1d86e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d872:	0a12      	lsrs	r2, r2, #8
   1d874:	b292      	uxth	r2, r2
   1d876:	b2d2      	uxtb	r2, r2
   1d878:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1d87a:	9b02      	ldr	r3, [sp, #8]
   1d87c:	1c5a      	adds	r2, r3, #1
   1d87e:	9202      	str	r2, [sp, #8]
   1d880:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d884:	b2d2      	uxtb	r2, r2
   1d886:	701a      	strb	r2, [r3, #0]
   1d888:	9b02      	ldr	r3, [sp, #8]
   1d88a:	1c5a      	adds	r2, r3, #1
   1d88c:	9202      	str	r2, [sp, #8]
   1d88e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d892:	0a12      	lsrs	r2, r2, #8
   1d894:	b292      	uxth	r2, r2
   1d896:	b2d2      	uxtb	r2, r2
   1d898:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d89a:	9803      	ldr	r0, [sp, #12]
   1d89c:	f7ff fa2a 	bl	1ccf4 <hciCmdSend>
  }
}
   1d8a0:	bf00      	nop
   1d8a2:	b005      	add	sp, #20
   1d8a4:	f85d fb04 	ldr.w	pc, [sp], #4

0001d8a8 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   1d8a8:	b500      	push	{lr}
   1d8aa:	b087      	sub	sp, #28
   1d8ac:	9102      	str	r1, [sp, #8]
   1d8ae:	9201      	str	r2, [sp, #4]
   1d8b0:	9300      	str	r3, [sp, #0]
   1d8b2:	4603      	mov	r3, r0
   1d8b4:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   1d8b8:	2127      	movs	r1, #39	; 0x27
   1d8ba:	f242 0027 	movw	r0, #8231	; 0x2027
   1d8be:	f7ff f9e5 	bl	1cc8c <hciCmdAlloc>
   1d8c2:	9005      	str	r0, [sp, #20]
   1d8c4:	9b05      	ldr	r3, [sp, #20]
   1d8c6:	2b00      	cmp	r3, #0
   1d8c8:	d01f      	beq.n	1d90a <HciLeAddDeviceToResolvingListCmd+0x62>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d8ca:	9b05      	ldr	r3, [sp, #20]
   1d8cc:	3303      	adds	r3, #3
   1d8ce:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1d8d0:	9b04      	ldr	r3, [sp, #16]
   1d8d2:	1c5a      	adds	r2, r3, #1
   1d8d4:	9204      	str	r2, [sp, #16]
   1d8d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1d8da:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1d8dc:	9902      	ldr	r1, [sp, #8]
   1d8de:	9804      	ldr	r0, [sp, #16]
   1d8e0:	f7fd fcf2 	bl	1b2c8 <BdaCpy>
   1d8e4:	9b04      	ldr	r3, [sp, #16]
   1d8e6:	3306      	adds	r3, #6
   1d8e8:	9304      	str	r3, [sp, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   1d8ea:	2210      	movs	r2, #16
   1d8ec:	9901      	ldr	r1, [sp, #4]
   1d8ee:	9804      	ldr	r0, [sp, #16]
   1d8f0:	f7ee fc36 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   1d8f4:	9b04      	ldr	r3, [sp, #16]
   1d8f6:	3310      	adds	r3, #16
   1d8f8:	9304      	str	r3, [sp, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   1d8fa:	2210      	movs	r2, #16
   1d8fc:	9900      	ldr	r1, [sp, #0]
   1d8fe:	9804      	ldr	r0, [sp, #16]
   1d900:	f7ee fc2e 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1d904:	9805      	ldr	r0, [sp, #20]
   1d906:	f7ff f9f5 	bl	1ccf4 <hciCmdSend>
  }
}
   1d90a:	bf00      	nop
   1d90c:	b007      	add	sp, #28
   1d90e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d912 <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   1d912:	b500      	push	{lr}
   1d914:	b085      	sub	sp, #20
   1d916:	4603      	mov	r3, r0
   1d918:	9100      	str	r1, [sp, #0]
   1d91a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   1d91e:	2107      	movs	r1, #7
   1d920:	f242 0028 	movw	r0, #8232	; 0x2028
   1d924:	f7ff f9b2 	bl	1cc8c <hciCmdAlloc>
   1d928:	9003      	str	r0, [sp, #12]
   1d92a:	9b03      	ldr	r3, [sp, #12]
   1d92c:	2b00      	cmp	r3, #0
   1d92e:	d012      	beq.n	1d956 <HciLeRemoveDeviceFromResolvingList+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d930:	9b03      	ldr	r3, [sp, #12]
   1d932:	3303      	adds	r3, #3
   1d934:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1d936:	9b02      	ldr	r3, [sp, #8]
   1d938:	1c5a      	adds	r2, r3, #1
   1d93a:	9202      	str	r2, [sp, #8]
   1d93c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1d940:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1d942:	9900      	ldr	r1, [sp, #0]
   1d944:	9802      	ldr	r0, [sp, #8]
   1d946:	f7fd fcbf 	bl	1b2c8 <BdaCpy>
   1d94a:	9b02      	ldr	r3, [sp, #8]
   1d94c:	3306      	adds	r3, #6
   1d94e:	9302      	str	r3, [sp, #8]
    hciCmdSend(pBuf);
   1d950:	9803      	ldr	r0, [sp, #12]
   1d952:	f7ff f9cf 	bl	1ccf4 <hciCmdSend>
  }
}
   1d956:	bf00      	nop
   1d958:	b005      	add	sp, #20
   1d95a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d95e <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   1d95e:	b500      	push	{lr}
   1d960:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   1d962:	2100      	movs	r1, #0
   1d964:	f242 0029 	movw	r0, #8233	; 0x2029
   1d968:	f7ff f990 	bl	1cc8c <hciCmdAlloc>
   1d96c:	9001      	str	r0, [sp, #4]
   1d96e:	9b01      	ldr	r3, [sp, #4]
   1d970:	2b00      	cmp	r3, #0
   1d972:	d002      	beq.n	1d97a <HciLeClearResolvingList+0x1c>
  {
    hciCmdSend(pBuf);
   1d974:	9801      	ldr	r0, [sp, #4]
   1d976:	f7ff f9bd 	bl	1ccf4 <hciCmdSend>
  }
}
   1d97a:	bf00      	nop
   1d97c:	b003      	add	sp, #12
   1d97e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d982 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   1d982:	b500      	push	{lr}
   1d984:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   1d986:	2100      	movs	r1, #0
   1d988:	f242 002a 	movw	r0, #8234	; 0x202a
   1d98c:	f7ff f97e 	bl	1cc8c <hciCmdAlloc>
   1d990:	9001      	str	r0, [sp, #4]
   1d992:	9b01      	ldr	r3, [sp, #4]
   1d994:	2b00      	cmp	r3, #0
   1d996:	d002      	beq.n	1d99e <HciLeReadResolvingListSize+0x1c>
  {
    hciCmdSend(pBuf);
   1d998:	9801      	ldr	r0, [sp, #4]
   1d99a:	f7ff f9ab 	bl	1ccf4 <hciCmdSend>
  }
}
   1d99e:	bf00      	nop
   1d9a0:	b003      	add	sp, #12
   1d9a2:	f85d fb04 	ldr.w	pc, [sp], #4

0001d9a6 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   1d9a6:	b500      	push	{lr}
   1d9a8:	b085      	sub	sp, #20
   1d9aa:	4603      	mov	r3, r0
   1d9ac:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   1d9b0:	2101      	movs	r1, #1
   1d9b2:	f242 002d 	movw	r0, #8237	; 0x202d
   1d9b6:	f7ff f969 	bl	1cc8c <hciCmdAlloc>
   1d9ba:	9003      	str	r0, [sp, #12]
   1d9bc:	9b03      	ldr	r3, [sp, #12]
   1d9be:	2b00      	cmp	r3, #0
   1d9c0:	d00b      	beq.n	1d9da <HciLeSetAddrResolutionEnable+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1d9c2:	9b03      	ldr	r3, [sp, #12]
   1d9c4:	3303      	adds	r3, #3
   1d9c6:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, enable);
   1d9c8:	9b02      	ldr	r3, [sp, #8]
   1d9ca:	1c5a      	adds	r2, r3, #1
   1d9cc:	9202      	str	r2, [sp, #8]
   1d9ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1d9d2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1d9d4:	9803      	ldr	r0, [sp, #12]
   1d9d6:	f7ff f98d 	bl	1ccf4 <hciCmdSend>
  }
}
   1d9da:	bf00      	nop
   1d9dc:	b005      	add	sp, #20
   1d9de:	f85d fb04 	ldr.w	pc, [sp], #4

0001d9e2 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   1d9e2:	b500      	push	{lr}
   1d9e4:	b085      	sub	sp, #20
   1d9e6:	4603      	mov	r3, r0
   1d9e8:	9100      	str	r1, [sp, #0]
   1d9ea:	f88d 3007 	strb.w	r3, [sp, #7]
   1d9ee:	4613      	mov	r3, r2
   1d9f0:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   1d9f4:	2108      	movs	r1, #8
   1d9f6:	f242 004e 	movw	r0, #8270	; 0x204e
   1d9fa:	f7ff f947 	bl	1cc8c <hciCmdAlloc>
   1d9fe:	9003      	str	r0, [sp, #12]
   1da00:	9b03      	ldr	r3, [sp, #12]
   1da02:	2b00      	cmp	r3, #0
   1da04:	d018      	beq.n	1da38 <HciLeSetPrivacyModeCmd+0x56>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1da06:	9b03      	ldr	r3, [sp, #12]
   1da08:	3303      	adds	r3, #3
   1da0a:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, addrType);
   1da0c:	9b02      	ldr	r3, [sp, #8]
   1da0e:	1c5a      	adds	r2, r3, #1
   1da10:	9202      	str	r2, [sp, #8]
   1da12:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1da16:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   1da18:	9900      	ldr	r1, [sp, #0]
   1da1a:	9802      	ldr	r0, [sp, #8]
   1da1c:	f7fd fc54 	bl	1b2c8 <BdaCpy>
   1da20:	9b02      	ldr	r3, [sp, #8]
   1da22:	3306      	adds	r3, #6
   1da24:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, mode);
   1da26:	9b02      	ldr	r3, [sp, #8]
   1da28:	1c5a      	adds	r2, r3, #1
   1da2a:	9202      	str	r2, [sp, #8]
   1da2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1da30:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1da32:	9803      	ldr	r0, [sp, #12]
   1da34:	f7ff f95e 	bl	1ccf4 <hciCmdSend>
  }
}
   1da38:	bf00      	nop
   1da3a:	b005      	add	sp, #20
   1da3c:	f85d fb04 	ldr.w	pc, [sp], #4

0001da40 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   1da40:	b084      	sub	sp, #16
   1da42:	4603      	mov	r3, r0
   1da44:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1da48:	4b13      	ldr	r3, [pc, #76]	; (1da98 <hciCoreConnAlloc+0x58>)
   1da4a:	9302      	str	r3, [sp, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1da4c:	2303      	movs	r3, #3
   1da4e:	f88d 300f 	strb.w	r3, [sp, #15]
   1da52:	e01b      	b.n	1da8c <hciCoreConnAlloc+0x4c>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   1da54:	9b02      	ldr	r3, [sp, #8]
   1da56:	8a1b      	ldrh	r3, [r3, #16]
   1da58:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1da5c:	4293      	cmp	r3, r2
   1da5e:	d10d      	bne.n	1da7c <hciCoreConnAlloc+0x3c>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   1da60:	9b02      	ldr	r3, [sp, #8]
   1da62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1da66:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   1da68:	9b02      	ldr	r3, [sp, #8]
   1da6a:	2200      	movs	r2, #0
   1da6c:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   1da6e:	9b02      	ldr	r3, [sp, #8]
   1da70:	2200      	movs	r2, #0
   1da72:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   1da74:	9b02      	ldr	r3, [sp, #8]
   1da76:	2200      	movs	r2, #0
   1da78:	761a      	strb	r2, [r3, #24]

      return;
   1da7a:	e00b      	b.n	1da94 <hciCoreConnAlloc+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1da7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1da80:	3b01      	subs	r3, #1
   1da82:	f88d 300f 	strb.w	r3, [sp, #15]
   1da86:	9b02      	ldr	r3, [sp, #8]
   1da88:	331c      	adds	r3, #28
   1da8a:	9302      	str	r3, [sp, #8]
   1da8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1da90:	2b00      	cmp	r3, #0
   1da92:	d1df      	bne.n	1da54 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   1da94:	b004      	add	sp, #16
   1da96:	4770      	bx	lr
   1da98:	100096a8 	.word	0x100096a8

0001da9c <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   1da9c:	b500      	push	{lr}
   1da9e:	b085      	sub	sp, #20
   1daa0:	4603      	mov	r3, r0
   1daa2:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1daa6:	4b20      	ldr	r3, [pc, #128]	; (1db28 <hciCoreConnFree+0x8c>)
   1daa8:	9302      	str	r3, [sp, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1daaa:	2303      	movs	r3, #3
   1daac:	f88d 300f 	strb.w	r3, [sp, #15]
   1dab0:	e032      	b.n	1db18 <hciCoreConnFree+0x7c>
  {
    if (pConn->handle == handle)
   1dab2:	9b02      	ldr	r3, [sp, #8]
   1dab4:	8a1b      	ldrh	r3, [r3, #16]
   1dab6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1daba:	429a      	cmp	r2, r3
   1dabc:	d124      	bne.n	1db08 <hciCoreConnFree+0x6c>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   1dabe:	9b02      	ldr	r3, [sp, #8]
   1dac0:	681b      	ldr	r3, [r3, #0]
   1dac2:	2b00      	cmp	r3, #0
   1dac4:	d007      	beq.n	1dad6 <hciCoreConnFree+0x3a>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   1dac6:	9b02      	ldr	r3, [sp, #8]
   1dac8:	681b      	ldr	r3, [r3, #0]
   1daca:	4618      	mov	r0, r3
   1dacc:	f7fa fce9 	bl	184a2 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   1dad0:	9b02      	ldr	r3, [sp, #8]
   1dad2:	2200      	movs	r2, #0
   1dad4:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   1dad6:	9b02      	ldr	r3, [sp, #8]
   1dad8:	2200      	movs	r2, #0
   1dada:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   1dadc:	9b02      	ldr	r3, [sp, #8]
   1dade:	689b      	ldr	r3, [r3, #8]
   1dae0:	2b00      	cmp	r3, #0
   1dae2:	d007      	beq.n	1daf4 <hciCoreConnFree+0x58>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   1dae4:	9b02      	ldr	r3, [sp, #8]
   1dae6:	689b      	ldr	r3, [r3, #8]
   1dae8:	4618      	mov	r0, r3
   1daea:	f7fa fcda 	bl	184a2 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   1daee:	9b02      	ldr	r3, [sp, #8]
   1daf0:	2200      	movs	r2, #0
   1daf2:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   1daf4:	9b02      	ldr	r3, [sp, #8]
   1daf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1dafa:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   1dafc:	9b02      	ldr	r3, [sp, #8]
   1dafe:	7e5b      	ldrb	r3, [r3, #25]
   1db00:	4618      	mov	r0, r3
   1db02:	f000 f89b 	bl	1dc3c <hciCoreTxReady>

      return;
   1db06:	e00b      	b.n	1db20 <hciCoreConnFree+0x84>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1db08:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1db0c:	3b01      	subs	r3, #1
   1db0e:	f88d 300f 	strb.w	r3, [sp, #15]
   1db12:	9b02      	ldr	r3, [sp, #8]
   1db14:	331c      	adds	r3, #28
   1db16:	9302      	str	r3, [sp, #8]
   1db18:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1db1c:	2b00      	cmp	r3, #0
   1db1e:	d1c8      	bne.n	1dab2 <hciCoreConnFree+0x16>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   1db20:	b005      	add	sp, #20
   1db22:	f85d fb04 	ldr.w	pc, [sp], #4
   1db26:	bf00      	nop
   1db28:	100096a8 	.word	0x100096a8

0001db2c <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   1db2c:	b084      	sub	sp, #16
   1db2e:	4603      	mov	r3, r0
   1db30:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1db34:	4b0e      	ldr	r3, [pc, #56]	; (1db70 <hciCoreConnByHandle+0x44>)
   1db36:	9302      	str	r3, [sp, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1db38:	2303      	movs	r3, #3
   1db3a:	f88d 300f 	strb.w	r3, [sp, #15]
   1db3e:	e00f      	b.n	1db60 <hciCoreConnByHandle+0x34>
  {
    if (pConn->handle == handle)
   1db40:	9b02      	ldr	r3, [sp, #8]
   1db42:	8a1b      	ldrh	r3, [r3, #16]
   1db44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1db48:	429a      	cmp	r2, r3
   1db4a:	d101      	bne.n	1db50 <hciCoreConnByHandle+0x24>
    {
      return pConn;
   1db4c:	9b02      	ldr	r3, [sp, #8]
   1db4e:	e00c      	b.n	1db6a <hciCoreConnByHandle+0x3e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1db50:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1db54:	3b01      	subs	r3, #1
   1db56:	f88d 300f 	strb.w	r3, [sp, #15]
   1db5a:	9b02      	ldr	r3, [sp, #8]
   1db5c:	331c      	adds	r3, #28
   1db5e:	9302      	str	r3, [sp, #8]
   1db60:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1db64:	2b00      	cmp	r3, #0
   1db66:	d1eb      	bne.n	1db40 <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
   1db68:	2300      	movs	r3, #0
}
   1db6a:	4618      	mov	r0, r3
   1db6c:	b004      	add	sp, #16
   1db6e:	4770      	bx	lr
   1db70:	100096a8 	.word	0x100096a8

0001db74 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   1db74:	b082      	sub	sp, #8
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1db76:	4b11      	ldr	r3, [pc, #68]	; (1dbbc <hciCoreNextConnFragment+0x48>)
   1db78:	9300      	str	r3, [sp, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1db7a:	2303      	movs	r3, #3
   1db7c:	f88d 3007 	strb.w	r3, [sp, #7]
   1db80:	e013      	b.n	1dbaa <hciCoreNextConnFragment+0x36>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   1db82:	9b00      	ldr	r3, [sp, #0]
   1db84:	8a1b      	ldrh	r3, [r3, #16]
   1db86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1db8a:	4293      	cmp	r3, r2
   1db8c:	d005      	beq.n	1db9a <hciCoreNextConnFragment+0x26>
   1db8e:	9b00      	ldr	r3, [sp, #0]
   1db90:	7d9b      	ldrb	r3, [r3, #22]
   1db92:	2b00      	cmp	r3, #0
   1db94:	d001      	beq.n	1db9a <hciCoreNextConnFragment+0x26>
    {
      return pConn;
   1db96:	9b00      	ldr	r3, [sp, #0]
   1db98:	e00c      	b.n	1dbb4 <hciCoreNextConnFragment+0x40>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1db9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1db9e:	3b01      	subs	r3, #1
   1dba0:	f88d 3007 	strb.w	r3, [sp, #7]
   1dba4:	9b00      	ldr	r3, [sp, #0]
   1dba6:	331c      	adds	r3, #28
   1dba8:	9300      	str	r3, [sp, #0]
   1dbaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dbae:	2b00      	cmp	r3, #0
   1dbb0:	d1e7      	bne.n	1db82 <hciCoreNextConnFragment+0xe>
    }
  }

  return NULL;
   1dbb2:	2300      	movs	r3, #0
}
   1dbb4:	4618      	mov	r0, r3
   1dbb6:	b002      	add	sp, #8
   1dbb8:	4770      	bx	lr
   1dbba:	bf00      	nop
   1dbbc:	100096a8 	.word	0x100096a8

0001dbc0 <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   1dbc0:	b500      	push	{lr}
   1dbc2:	b083      	sub	sp, #12
   1dbc4:	4603      	mov	r3, r0
   1dbc6:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   1dbca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dbce:	4618      	mov	r0, r3
   1dbd0:	f7ff ff36 	bl	1da40 <hciCoreConnAlloc>
}
   1dbd4:	bf00      	nop
   1dbd6:	b003      	add	sp, #12
   1dbd8:	f85d fb04 	ldr.w	pc, [sp], #4

0001dbdc <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   1dbdc:	b500      	push	{lr}
   1dbde:	b083      	sub	sp, #12
   1dbe0:	4603      	mov	r3, r0
   1dbe2:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   1dbe6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dbea:	4618      	mov	r0, r3
   1dbec:	f7ff ff56 	bl	1da9c <hciCoreConnFree>
}
   1dbf0:	bf00      	nop
   1dbf2:	b003      	add	sp, #12
   1dbf4:	f85d fb04 	ldr.w	pc, [sp], #4

0001dbf8 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   1dbf8:	b500      	push	{lr}
   1dbfa:	b083      	sub	sp, #12
   1dbfc:	9001      	str	r0, [sp, #4]
   1dbfe:	9100      	str	r1, [sp, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   1dc00:	9b01      	ldr	r3, [sp, #4]
   1dc02:	7e5b      	ldrb	r3, [r3, #25]
   1dc04:	3301      	adds	r3, #1
   1dc06:	b2da      	uxtb	r2, r3
   1dc08:	9b01      	ldr	r3, [sp, #4]
   1dc0a:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   1dc0c:	9900      	ldr	r1, [sp, #0]
   1dc0e:	9801      	ldr	r0, [sp, #4]
   1dc10:	f002 fa80 	bl	20114 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   1dc14:	4b08      	ldr	r3, [pc, #32]	; (1dc38 <hciCoreSendAclData+0x40>)
   1dc16:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1dc1a:	2b00      	cmp	r3, #0
   1dc1c:	d007      	beq.n	1dc2e <hciCoreSendAclData+0x36>
  {
    hciCoreCb.availBufs--;
   1dc1e:	4b06      	ldr	r3, [pc, #24]	; (1dc38 <hciCoreSendAclData+0x40>)
   1dc20:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1dc24:	3b01      	subs	r3, #1
   1dc26:	b2da      	uxtb	r2, r3
   1dc28:	4b03      	ldr	r3, [pc, #12]	; (1dc38 <hciCoreSendAclData+0x40>)
   1dc2a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   1dc2e:	bf00      	nop
   1dc30:	b003      	add	sp, #12
   1dc32:	f85d fb04 	ldr.w	pc, [sp], #4
   1dc36:	bf00      	nop
   1dc38:	100096a8 	.word	0x100096a8

0001dc3c <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   1dc3c:	b500      	push	{lr}
   1dc3e:	b087      	sub	sp, #28
   1dc40:	4603      	mov	r3, r0
   1dc42:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   1dc46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc4a:	2b00      	cmp	r3, #0
   1dc4c:	d055      	beq.n	1dcfa <hciCoreTxReady+0xbe>
  {
    hciCoreCb.availBufs += bufs;
   1dc4e:	4b30      	ldr	r3, [pc, #192]	; (1dd10 <hciCoreTxReady+0xd4>)
   1dc50:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   1dc54:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc58:	4413      	add	r3, r2
   1dc5a:	b2da      	uxtb	r2, r3
   1dc5c:	4b2c      	ldr	r3, [pc, #176]	; (1dd10 <hciCoreTxReady+0xd4>)
   1dc5e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   1dc62:	4b2b      	ldr	r3, [pc, #172]	; (1dd10 <hciCoreTxReady+0xd4>)
   1dc64:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   1dc68:	4b29      	ldr	r3, [pc, #164]	; (1dd10 <hciCoreTxReady+0xd4>)
   1dc6a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1dc6e:	429a      	cmp	r2, r3
   1dc70:	d943      	bls.n	1dcfa <hciCoreTxReady+0xbe>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   1dc72:	4b27      	ldr	r3, [pc, #156]	; (1dd10 <hciCoreTxReady+0xd4>)
   1dc74:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
   1dc78:	4b25      	ldr	r3, [pc, #148]	; (1dd10 <hciCoreTxReady+0xd4>)
   1dc7a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   1dc7e:	e03c      	b.n	1dcfa <hciCoreTxReady+0xbe>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   1dc80:	2000      	movs	r0, #0
   1dc82:	f000 f899 	bl	1ddb8 <hciCoreTxAclContinue>
   1dc86:	4603      	mov	r3, r0
   1dc88:	2b00      	cmp	r3, #0
   1dc8a:	d136      	bne.n	1dcfa <hciCoreTxReady+0xbe>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   1dc8c:	f10d 030b 	add.w	r3, sp, #11
   1dc90:	4619      	mov	r1, r3
   1dc92:	4820      	ldr	r0, [pc, #128]	; (1dd14 <hciCoreTxReady+0xd8>)
   1dc94:	f7fa fc42 	bl	1851c <WsfMsgDeq>
   1dc98:	9005      	str	r0, [sp, #20]
   1dc9a:	9b05      	ldr	r3, [sp, #20]
   1dc9c:	2b00      	cmp	r3, #0
   1dc9e:	d032      	beq.n	1dd06 <hciCoreTxReady+0xca>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   1dca0:	9b05      	ldr	r3, [sp, #20]
   1dca2:	781b      	ldrb	r3, [r3, #0]
   1dca4:	b29a      	uxth	r2, r3
   1dca6:	9b05      	ldr	r3, [sp, #20]
   1dca8:	3301      	adds	r3, #1
   1dcaa:	781b      	ldrb	r3, [r3, #0]
   1dcac:	b29b      	uxth	r3, r3
   1dcae:	021b      	lsls	r3, r3, #8
   1dcb0:	b29b      	uxth	r3, r3
   1dcb2:	4413      	add	r3, r2
   1dcb4:	f8ad 3012 	strh.w	r3, [sp, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   1dcb8:	9b05      	ldr	r3, [sp, #20]
   1dcba:	3302      	adds	r3, #2
   1dcbc:	781b      	ldrb	r3, [r3, #0]
   1dcbe:	b29a      	uxth	r2, r3
   1dcc0:	9b05      	ldr	r3, [sp, #20]
   1dcc2:	3303      	adds	r3, #3
   1dcc4:	781b      	ldrb	r3, [r3, #0]
   1dcc6:	b29b      	uxth	r3, r3
   1dcc8:	021b      	lsls	r3, r3, #8
   1dcca:	b29b      	uxth	r3, r3
   1dccc:	4413      	add	r3, r2
   1dcce:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1dcd2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1dcd6:	4618      	mov	r0, r3
   1dcd8:	f7ff ff28 	bl	1db2c <hciCoreConnByHandle>
   1dcdc:	9003      	str	r0, [sp, #12]
   1dcde:	9b03      	ldr	r3, [sp, #12]
   1dce0:	2b00      	cmp	r3, #0
   1dce2:	d007      	beq.n	1dcf4 <hciCoreTxReady+0xb8>
        {
          hciCoreTxAclStart(pConn, len, pData);
   1dce4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1dce8:	9a05      	ldr	r2, [sp, #20]
   1dcea:	4619      	mov	r1, r3
   1dcec:	9803      	ldr	r0, [sp, #12]
   1dcee:	f000 f813 	bl	1dd18 <hciCoreTxAclStart>
   1dcf2:	e002      	b.n	1dcfa <hciCoreTxReady+0xbe>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   1dcf4:	9805      	ldr	r0, [sp, #20]
   1dcf6:	f7fa fbd4 	bl	184a2 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   1dcfa:	4b05      	ldr	r3, [pc, #20]	; (1dd10 <hciCoreTxReady+0xd4>)
   1dcfc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1dd00:	2b00      	cmp	r3, #0
   1dd02:	d1bd      	bne.n	1dc80 <hciCoreTxReady+0x44>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   1dd04:	e000      	b.n	1dd08 <hciCoreTxReady+0xcc>
        break;
   1dd06:	bf00      	nop
}
   1dd08:	bf00      	nop
   1dd0a:	b007      	add	sp, #28
   1dd0c:	f85d fb04 	ldr.w	pc, [sp], #4
   1dd10:	100096a8 	.word	0x100096a8
   1dd14:	1000970c 	.word	0x1000970c

0001dd18 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   1dd18:	b500      	push	{lr}
   1dd1a:	b087      	sub	sp, #28
   1dd1c:	9003      	str	r0, [sp, #12]
   1dd1e:	460b      	mov	r3, r1
   1dd20:	9201      	str	r2, [sp, #4]
   1dd22:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   1dd26:	f000 fbd7 	bl	1e4d8 <HciGetBufSize>
   1dd2a:	4603      	mov	r3, r0
   1dd2c:	f8ad 3016 	strh.w	r3, [sp, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   1dd30:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1dd34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1dd38:	429a      	cmp	r2, r3
   1dd3a:	d932      	bls.n	1dda2 <hciCoreTxAclStart+0x8a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   1dd3c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1dd40:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1dd44:	1ad3      	subs	r3, r2, r3
   1dd46:	b29a      	uxth	r2, r3
   1dd48:	9b03      	ldr	r3, [sp, #12]
   1dd4a:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   1dd4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1dd50:	9a01      	ldr	r2, [sp, #4]
   1dd52:	441a      	add	r2, r3
   1dd54:	9b03      	ldr	r3, [sp, #12]
   1dd56:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   1dd58:	9b03      	ldr	r3, [sp, #12]
   1dd5a:	9a01      	ldr	r2, [sp, #4]
   1dd5c:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   1dd5e:	9b03      	ldr	r3, [sp, #12]
   1dd60:	2201      	movs	r2, #1
   1dd62:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   1dd64:	9b01      	ldr	r3, [sp, #4]
   1dd66:	3302      	adds	r3, #2
   1dd68:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1dd6c:	b2d2      	uxtb	r2, r2
   1dd6e:	701a      	strb	r2, [r3, #0]
   1dd70:	9b01      	ldr	r3, [sp, #4]
   1dd72:	3303      	adds	r3, #3
   1dd74:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1dd78:	0a12      	lsrs	r2, r2, #8
   1dd7a:	b292      	uxth	r2, r2
   1dd7c:	b2d2      	uxtb	r2, r2
   1dd7e:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   1dd80:	9901      	ldr	r1, [sp, #4]
   1dd82:	9803      	ldr	r0, [sp, #12]
   1dd84:	f7ff ff38 	bl	1dbf8 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   1dd88:	bf00      	nop
   1dd8a:	4b0a      	ldr	r3, [pc, #40]	; (1ddb4 <hciCoreTxAclStart+0x9c>)
   1dd8c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1dd90:	2b00      	cmp	r3, #0
   1dd92:	d00a      	beq.n	1ddaa <hciCoreTxAclStart+0x92>
   1dd94:	9803      	ldr	r0, [sp, #12]
   1dd96:	f000 f80f 	bl	1ddb8 <hciCoreTxAclContinue>
   1dd9a:	4603      	mov	r3, r0
   1dd9c:	2b00      	cmp	r3, #0
   1dd9e:	d1f4      	bne.n	1dd8a <hciCoreTxAclStart+0x72>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
   1dda0:	e003      	b.n	1ddaa <hciCoreTxAclStart+0x92>
    hciCoreSendAclData(pConn, pData);
   1dda2:	9901      	ldr	r1, [sp, #4]
   1dda4:	9803      	ldr	r0, [sp, #12]
   1dda6:	f7ff ff27 	bl	1dbf8 <hciCoreSendAclData>
}
   1ddaa:	bf00      	nop
   1ddac:	b007      	add	sp, #28
   1ddae:	f85d fb04 	ldr.w	pc, [sp], #4
   1ddb2:	bf00      	nop
   1ddb4:	100096a8 	.word	0x100096a8

0001ddb8 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   1ddb8:	b510      	push	{r4, lr}
   1ddba:	b084      	sub	sp, #16
   1ddbc:	9001      	str	r0, [sp, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   1ddbe:	9b01      	ldr	r3, [sp, #4]
   1ddc0:	2b00      	cmp	r3, #0
   1ddc2:	d102      	bne.n	1ddca <hciCoreTxAclContinue+0x12>
  {
    pConn = hciCoreNextConnFragment();
   1ddc4:	f7ff fed6 	bl	1db74 <hciCoreNextConnFragment>
   1ddc8:	9001      	str	r0, [sp, #4]
  }

  if (pConn != NULL)
   1ddca:	9b01      	ldr	r3, [sp, #4]
   1ddcc:	2b00      	cmp	r3, #0
   1ddce:	d04f      	beq.n	1de70 <hciCoreTxAclContinue+0xb8>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   1ddd0:	9b01      	ldr	r3, [sp, #4]
   1ddd2:	8a5c      	ldrh	r4, [r3, #18]
   1ddd4:	f000 fb80 	bl	1e4d8 <HciGetBufSize>
   1ddd8:	4603      	mov	r3, r0
   1ddda:	429c      	cmp	r4, r3
   1dddc:	d202      	bcs.n	1dde4 <hciCoreTxAclContinue+0x2c>
   1ddde:	9b01      	ldr	r3, [sp, #4]
   1dde0:	8a5b      	ldrh	r3, [r3, #18]
   1dde2:	e002      	b.n	1ddea <hciCoreTxAclContinue+0x32>
   1dde4:	f000 fb78 	bl	1e4d8 <HciGetBufSize>
   1dde8:	4603      	mov	r3, r0
   1ddea:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (aclLen > 0)
   1ddee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ddf2:	2b00      	cmp	r3, #0
   1ddf4:	d03c      	beq.n	1de70 <hciCoreTxAclContinue+0xb8>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   1ddf6:	9b01      	ldr	r3, [sp, #4]
   1ddf8:	8a5a      	ldrh	r2, [r3, #18]
   1ddfa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ddfe:	1ad3      	subs	r3, r2, r3
   1de00:	b29a      	uxth	r2, r3
   1de02:	9b01      	ldr	r3, [sp, #4]
   1de04:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   1de06:	9b01      	ldr	r3, [sp, #4]
   1de08:	685b      	ldr	r3, [r3, #4]
   1de0a:	9a01      	ldr	r2, [sp, #4]
   1de0c:	8a12      	ldrh	r2, [r2, #16]
   1de0e:	b2d2      	uxtb	r2, r2
   1de10:	701a      	strb	r2, [r3, #0]
   1de12:	9b01      	ldr	r3, [sp, #4]
   1de14:	685b      	ldr	r3, [r3, #4]
   1de16:	3301      	adds	r3, #1
   1de18:	9a01      	ldr	r2, [sp, #4]
   1de1a:	8a12      	ldrh	r2, [r2, #16]
   1de1c:	0a12      	lsrs	r2, r2, #8
   1de1e:	b292      	uxth	r2, r2
   1de20:	f042 0210 	orr.w	r2, r2, #16
   1de24:	b292      	uxth	r2, r2
   1de26:	b2d2      	uxtb	r2, r2
   1de28:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   1de2a:	9b01      	ldr	r3, [sp, #4]
   1de2c:	685b      	ldr	r3, [r3, #4]
   1de2e:	3302      	adds	r3, #2
   1de30:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1de34:	b2d2      	uxtb	r2, r2
   1de36:	701a      	strb	r2, [r3, #0]
   1de38:	9b01      	ldr	r3, [sp, #4]
   1de3a:	685b      	ldr	r3, [r3, #4]
   1de3c:	3303      	adds	r3, #3
   1de3e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1de42:	0a12      	lsrs	r2, r2, #8
   1de44:	b292      	uxth	r2, r2
   1de46:	b2d2      	uxtb	r2, r2
   1de48:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   1de4a:	9b01      	ldr	r3, [sp, #4]
   1de4c:	685b      	ldr	r3, [r3, #4]
   1de4e:	4619      	mov	r1, r3
   1de50:	9801      	ldr	r0, [sp, #4]
   1de52:	f7ff fed1 	bl	1dbf8 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   1de56:	9b01      	ldr	r3, [sp, #4]
   1de58:	8a5b      	ldrh	r3, [r3, #18]
   1de5a:	2b00      	cmp	r3, #0
   1de5c:	d006      	beq.n	1de6c <hciCoreTxAclContinue+0xb4>
      {
        pConn->pNextTxFrag += aclLen;
   1de5e:	9b01      	ldr	r3, [sp, #4]
   1de60:	685a      	ldr	r2, [r3, #4]
   1de62:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1de66:	441a      	add	r2, r3
   1de68:	9b01      	ldr	r3, [sp, #4]
   1de6a:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   1de6c:	2301      	movs	r3, #1
   1de6e:	e000      	b.n	1de72 <hciCoreTxAclContinue+0xba>
    }
  }

  return FALSE;
   1de70:	2300      	movs	r3, #0
}
   1de72:	4618      	mov	r0, r3
   1de74:	b004      	add	sp, #16
   1de76:	bd10      	pop	{r4, pc}

0001de78 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   1de78:	b500      	push	{lr}
   1de7a:	b083      	sub	sp, #12
   1de7c:	9001      	str	r0, [sp, #4]
   1de7e:	9100      	str	r1, [sp, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   1de80:	9b01      	ldr	r3, [sp, #4]
   1de82:	7d9b      	ldrb	r3, [r3, #22]
   1de84:	2b00      	cmp	r3, #0
   1de86:	d00f      	beq.n	1dea8 <hciCoreTxAclComplete+0x30>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   1de88:	9b01      	ldr	r3, [sp, #4]
   1de8a:	8a5b      	ldrh	r3, [r3, #18]
   1de8c:	2b00      	cmp	r3, #0
   1de8e:	d111      	bne.n	1deb4 <hciCoreTxAclComplete+0x3c>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   1de90:	9b01      	ldr	r3, [sp, #4]
   1de92:	681b      	ldr	r3, [r3, #0]
   1de94:	4618      	mov	r0, r3
   1de96:	f7fa fb04 	bl	184a2 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   1de9a:	9b01      	ldr	r3, [sp, #4]
   1de9c:	2200      	movs	r2, #0
   1de9e:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   1dea0:	9b01      	ldr	r3, [sp, #4]
   1dea2:	2200      	movs	r2, #0
   1dea4:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   1dea6:	e005      	b.n	1deb4 <hciCoreTxAclComplete+0x3c>
  else if (pData != NULL)
   1dea8:	9b00      	ldr	r3, [sp, #0]
   1deaa:	2b00      	cmp	r3, #0
   1deac:	d002      	beq.n	1deb4 <hciCoreTxAclComplete+0x3c>
    WsfMsgFree(pData);
   1deae:	9800      	ldr	r0, [sp, #0]
   1deb0:	f7fa faf7 	bl	184a2 <WsfMsgFree>
}
   1deb4:	bf00      	nop
   1deb6:	b003      	add	sp, #12
   1deb8:	f85d fb04 	ldr.w	pc, [sp], #4

0001debc <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   1debc:	b500      	push	{lr}
   1debe:	b089      	sub	sp, #36	; 0x24
   1dec0:	9001      	str	r0, [sp, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   1dec2:	2300      	movs	r3, #0
   1dec4:	9307      	str	r3, [sp, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   1dec6:	2301      	movs	r3, #1
   1dec8:	f88d 301b 	strb.w	r3, [sp, #27]

  BYTES_TO_UINT16(handle, pData);
   1decc:	9b01      	ldr	r3, [sp, #4]
   1dece:	781b      	ldrb	r3, [r3, #0]
   1ded0:	b29a      	uxth	r2, r3
   1ded2:	9b01      	ldr	r3, [sp, #4]
   1ded4:	3301      	adds	r3, #1
   1ded6:	781b      	ldrb	r3, [r3, #0]
   1ded8:	b29b      	uxth	r3, r3
   1deda:	021b      	lsls	r3, r3, #8
   1dedc:	b29b      	uxth	r3, r3
   1dede:	4413      	add	r3, r2
   1dee0:	f8ad 3018 	strh.w	r3, [sp, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   1dee4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1dee8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   1deec:	f8ad 3016 	strh.w	r3, [sp, #22]
  handle &= HCI_HANDLE_MASK;
   1def0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1def4:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1def8:	f8ad 3018 	strh.w	r3, [sp, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   1defc:	9b01      	ldr	r3, [sp, #4]
   1defe:	3302      	adds	r3, #2
   1df00:	781b      	ldrb	r3, [r3, #0]
   1df02:	b29a      	uxth	r2, r3
   1df04:	9b01      	ldr	r3, [sp, #4]
   1df06:	3303      	adds	r3, #3
   1df08:	781b      	ldrb	r3, [r3, #0]
   1df0a:	b29b      	uxth	r3, r3
   1df0c:	021b      	lsls	r3, r3, #8
   1df0e:	b29b      	uxth	r3, r3
   1df10:	4413      	add	r3, r2
   1df12:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1df16:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1df1a:	4618      	mov	r0, r3
   1df1c:	f7ff fe06 	bl	1db2c <hciCoreConnByHandle>
   1df20:	9004      	str	r0, [sp, #16]
   1df22:	9b04      	ldr	r3, [sp, #16]
   1df24:	2b00      	cmp	r3, #0
   1df26:	f000 80c3 	beq.w	1e0b0 <hciCoreAclReassembly+0x1f4>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   1df2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1df2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1df32:	f040 808c 	bne.w	1e04e <hciCoreAclReassembly+0x192>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   1df36:	9b04      	ldr	r3, [sp, #16]
   1df38:	689b      	ldr	r3, [r3, #8]
   1df3a:	2b00      	cmp	r3, #0
   1df3c:	d007      	beq.n	1df4e <hciCoreAclReassembly+0x92>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   1df3e:	9b04      	ldr	r3, [sp, #16]
   1df40:	689b      	ldr	r3, [r3, #8]
   1df42:	4618      	mov	r0, r3
   1df44:	f7fa faad 	bl	184a2 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   1df48:	9b04      	ldr	r3, [sp, #16]
   1df4a:	2200      	movs	r2, #0
   1df4c:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   1df4e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1df52:	2b03      	cmp	r3, #3
   1df54:	f240 80ac 	bls.w	1e0b0 <hciCoreAclReassembly+0x1f4>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   1df58:	9b01      	ldr	r3, [sp, #4]
   1df5a:	3304      	adds	r3, #4
   1df5c:	781b      	ldrb	r3, [r3, #0]
   1df5e:	b29a      	uxth	r2, r3
   1df60:	9b01      	ldr	r3, [sp, #4]
   1df62:	3305      	adds	r3, #5
   1df64:	781b      	ldrb	r3, [r3, #0]
   1df66:	b29b      	uxth	r3, r3
   1df68:	021b      	lsls	r3, r3, #8
   1df6a:	b29b      	uxth	r3, r3
   1df6c:	4413      	add	r3, r2
   1df6e:	f8ad 300e 	strh.w	r3, [sp, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   1df72:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1df76:	3304      	adds	r3, #4
   1df78:	4a53      	ldr	r2, [pc, #332]	; (1e0c8 <hciCoreAclReassembly+0x20c>)
   1df7a:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
   1df7e:	4293      	cmp	r3, r2
   1df80:	f300 8096 	bgt.w	1e0b0 <hciCoreAclReassembly+0x1f4>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   1df84:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1df88:	1d1a      	adds	r2, r3, #4
   1df8a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1df8e:	429a      	cmp	r2, r3
   1df90:	dd57      	ble.n	1e042 <hciCoreAclReassembly+0x186>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   1df92:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1df96:	3308      	adds	r3, #8
   1df98:	b29b      	uxth	r3, r3
   1df9a:	2100      	movs	r1, #0
   1df9c:	4618      	mov	r0, r3
   1df9e:	f7fa fa50 	bl	18442 <WsfMsgDataAlloc>
   1dfa2:	4602      	mov	r2, r0
   1dfa4:	9b04      	ldr	r3, [sp, #16]
   1dfa6:	609a      	str	r2, [r3, #8]
   1dfa8:	9b04      	ldr	r3, [sp, #16]
   1dfaa:	689b      	ldr	r3, [r3, #8]
   1dfac:	2b00      	cmp	r3, #0
   1dfae:	d07f      	beq.n	1e0b0 <hciCoreAclReassembly+0x1f4>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   1dfb0:	9b04      	ldr	r3, [sp, #16]
   1dfb2:	689a      	ldr	r2, [r3, #8]
   1dfb4:	9b04      	ldr	r3, [sp, #16]
   1dfb6:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   1dfb8:	9b04      	ldr	r3, [sp, #16]
   1dfba:	68db      	ldr	r3, [r3, #12]
   1dfbc:	1c59      	adds	r1, r3, #1
   1dfbe:	9a04      	ldr	r2, [sp, #16]
   1dfc0:	60d1      	str	r1, [r2, #12]
   1dfc2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1dfc6:	b2d2      	uxtb	r2, r2
   1dfc8:	701a      	strb	r2, [r3, #0]
   1dfca:	9b04      	ldr	r3, [sp, #16]
   1dfcc:	68db      	ldr	r3, [r3, #12]
   1dfce:	1c59      	adds	r1, r3, #1
   1dfd0:	9a04      	ldr	r2, [sp, #16]
   1dfd2:	60d1      	str	r1, [r2, #12]
   1dfd4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1dfd8:	0a12      	lsrs	r2, r2, #8
   1dfda:	b292      	uxth	r2, r2
   1dfdc:	b2d2      	uxtb	r2, r2
   1dfde:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   1dfe0:	9b04      	ldr	r3, [sp, #16]
   1dfe2:	68db      	ldr	r3, [r3, #12]
   1dfe4:	1c59      	adds	r1, r3, #1
   1dfe6:	9a04      	ldr	r2, [sp, #16]
   1dfe8:	60d1      	str	r1, [r2, #12]
   1dfea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1dfee:	b2d2      	uxtb	r2, r2
   1dff0:	3204      	adds	r2, #4
   1dff2:	b2d2      	uxtb	r2, r2
   1dff4:	701a      	strb	r2, [r3, #0]
   1dff6:	9b04      	ldr	r3, [sp, #16]
   1dff8:	68db      	ldr	r3, [r3, #12]
   1dffa:	1c59      	adds	r1, r3, #1
   1dffc:	9a04      	ldr	r2, [sp, #16]
   1dffe:	60d1      	str	r1, [r2, #12]
   1e000:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1e004:	3204      	adds	r2, #4
   1e006:	1212      	asrs	r2, r2, #8
   1e008:	b2d2      	uxtb	r2, r2
   1e00a:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   1e00c:	9b04      	ldr	r3, [sp, #16]
   1e00e:	68d8      	ldr	r0, [r3, #12]
   1e010:	9b01      	ldr	r3, [sp, #4]
   1e012:	3304      	adds	r3, #4
   1e014:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e018:	4619      	mov	r1, r3
   1e01a:	f7ee f8a1 	bl	c160 <memcpy>
            pConn->pNextRxFrag += aclLen;
   1e01e:	9b04      	ldr	r3, [sp, #16]
   1e020:	68da      	ldr	r2, [r3, #12]
   1e022:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e026:	441a      	add	r2, r3
   1e028:	9b04      	ldr	r3, [sp, #16]
   1e02a:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   1e02c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1e030:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e034:	1ad3      	subs	r3, r2, r3
   1e036:	b29b      	uxth	r3, r3
   1e038:	3304      	adds	r3, #4
   1e03a:	b29a      	uxth	r2, r3
   1e03c:	9b04      	ldr	r3, [sp, #16]
   1e03e:	829a      	strh	r2, [r3, #20]
   1e040:	e036      	b.n	1e0b0 <hciCoreAclReassembly+0x1f4>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   1e042:	9b01      	ldr	r3, [sp, #4]
   1e044:	9307      	str	r3, [sp, #28]
          freeData = FALSE;
   1e046:	2300      	movs	r3, #0
   1e048:	f88d 301b 	strb.w	r3, [sp, #27]
   1e04c:	e030      	b.n	1e0b0 <hciCoreAclReassembly+0x1f4>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   1e04e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1e052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1e056:	d12b      	bne.n	1e0b0 <hciCoreAclReassembly+0x1f4>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   1e058:	9b04      	ldr	r3, [sp, #16]
   1e05a:	689b      	ldr	r3, [r3, #8]
   1e05c:	2b00      	cmp	r3, #0
   1e05e:	d027      	beq.n	1e0b0 <hciCoreAclReassembly+0x1f4>
      {
        if (aclLen <= pConn->rxAclRemLen)
   1e060:	9b04      	ldr	r3, [sp, #16]
   1e062:	8a9b      	ldrh	r3, [r3, #20]
   1e064:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e068:	429a      	cmp	r2, r3
   1e06a:	d821      	bhi.n	1e0b0 <hciCoreAclReassembly+0x1f4>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   1e06c:	9b04      	ldr	r3, [sp, #16]
   1e06e:	68d8      	ldr	r0, [r3, #12]
   1e070:	9b01      	ldr	r3, [sp, #4]
   1e072:	3304      	adds	r3, #4
   1e074:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e078:	4619      	mov	r1, r3
   1e07a:	f7ee f871 	bl	c160 <memcpy>
          pConn->pNextRxFrag += aclLen;
   1e07e:	9b04      	ldr	r3, [sp, #16]
   1e080:	68da      	ldr	r2, [r3, #12]
   1e082:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e086:	441a      	add	r2, r3
   1e088:	9b04      	ldr	r3, [sp, #16]
   1e08a:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   1e08c:	9b04      	ldr	r3, [sp, #16]
   1e08e:	8a9a      	ldrh	r2, [r3, #20]
   1e090:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e094:	1ad3      	subs	r3, r2, r3
   1e096:	b29a      	uxth	r2, r3
   1e098:	9b04      	ldr	r3, [sp, #16]
   1e09a:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   1e09c:	9b04      	ldr	r3, [sp, #16]
   1e09e:	8a9b      	ldrh	r3, [r3, #20]
   1e0a0:	2b00      	cmp	r3, #0
   1e0a2:	d105      	bne.n	1e0b0 <hciCoreAclReassembly+0x1f4>
          {
            pDataRtn = pConn->pRxAclPkt;
   1e0a4:	9b04      	ldr	r3, [sp, #16]
   1e0a6:	689b      	ldr	r3, [r3, #8]
   1e0a8:	9307      	str	r3, [sp, #28]
            pConn->pRxAclPkt = NULL;
   1e0aa:	9b04      	ldr	r3, [sp, #16]
   1e0ac:	2200      	movs	r2, #0
   1e0ae:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   1e0b0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1e0b4:	2b00      	cmp	r3, #0
   1e0b6:	d002      	beq.n	1e0be <hciCoreAclReassembly+0x202>
  {
    WsfMsgFree(pData);
   1e0b8:	9801      	ldr	r0, [sp, #4]
   1e0ba:	f7fa f9f2 	bl	184a2 <WsfMsgFree>
  }

  return pDataRtn;
   1e0be:	9b07      	ldr	r3, [sp, #28]
}
   1e0c0:	4618      	mov	r0, r3
   1e0c2:	b009      	add	sp, #36	; 0x24
   1e0c4:	f85d fb04 	ldr.w	pc, [sp], #4
   1e0c8:	100096a8 	.word	0x100096a8

0001e0cc <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   1e0cc:	b500      	push	{lr}
   1e0ce:	b083      	sub	sp, #12
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   1e0d0:	4b24      	ldr	r3, [pc, #144]	; (1e164 <HciCoreInit+0x98>)
   1e0d2:	2200      	movs	r2, #0
   1e0d4:	665a      	str	r2, [r3, #100]	; 0x64
   1e0d6:	4b23      	ldr	r3, [pc, #140]	; (1e164 <HciCoreInit+0x98>)
   1e0d8:	2200      	movs	r2, #0
   1e0da:	669a      	str	r2, [r3, #104]	; 0x68

  for (i = 0; i < DM_CONN_MAX; i++)
   1e0dc:	2300      	movs	r3, #0
   1e0de:	f88d 3007 	strb.w	r3, [sp, #7]
   1e0e2:	e010      	b.n	1e106 <HciCoreInit+0x3a>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   1e0e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1e0e8:	491e      	ldr	r1, [pc, #120]	; (1e164 <HciCoreInit+0x98>)
   1e0ea:	4613      	mov	r3, r2
   1e0ec:	00db      	lsls	r3, r3, #3
   1e0ee:	1a9b      	subs	r3, r3, r2
   1e0f0:	009b      	lsls	r3, r3, #2
   1e0f2:	440b      	add	r3, r1
   1e0f4:	3310      	adds	r3, #16
   1e0f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e0fa:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   1e0fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e100:	3301      	adds	r3, #1
   1e102:	f88d 3007 	strb.w	r3, [sp, #7]
   1e106:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e10a:	2b02      	cmp	r3, #2
   1e10c:	d9ea      	bls.n	1e0e4 <HciCoreInit+0x18>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   1e10e:	4b15      	ldr	r3, [pc, #84]	; (1e164 <HciCoreInit+0x98>)
   1e110:	221b      	movs	r2, #27
   1e112:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   1e116:	4b13      	ldr	r3, [pc, #76]	; (1e164 <HciCoreInit+0x98>)
   1e118:	2205      	movs	r2, #5
   1e11a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   1e11e:	4b11      	ldr	r3, [pc, #68]	; (1e164 <HciCoreInit+0x98>)
   1e120:	2203      	movs	r2, #3
   1e122:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

  #if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    if (APOLLO3_GE_B0)
   1e126:	4b10      	ldr	r3, [pc, #64]	; (1e168 <HciCoreInit+0x9c>)
   1e128:	68db      	ldr	r3, [r3, #12]
   1e12a:	b2db      	uxtb	r3, r3
   1e12c:	2b20      	cmp	r3, #32
   1e12e:	d90f      	bls.n	1e150 <HciCoreInit+0x84>
    {
      // B0 has only less internal ACL buffers
      hciCoreCb.aclQueueHi--;
   1e130:	4b0c      	ldr	r3, [pc, #48]	; (1e164 <HciCoreInit+0x98>)
   1e132:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1e136:	3b01      	subs	r3, #1
   1e138:	b2da      	uxtb	r2, r3
   1e13a:	4b0a      	ldr	r3, [pc, #40]	; (1e164 <HciCoreInit+0x98>)
   1e13c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      hciCoreCb.aclQueueLo--;
   1e140:	4b08      	ldr	r3, [pc, #32]	; (1e164 <HciCoreInit+0x98>)
   1e142:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   1e146:	3b01      	subs	r3, #1
   1e148:	b2da      	uxtb	r2, r3
   1e14a:	4b06      	ldr	r3, [pc, #24]	; (1e164 <HciCoreInit+0x98>)
   1e14c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
  #endif
  hciCoreCb.extResetSeq = NULL;
   1e150:	4b04      	ldr	r3, [pc, #16]	; (1e164 <HciCoreInit+0x98>)
   1e152:	2200      	movs	r2, #0
   1e154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  hciCoreInit();
   1e158:	f000 f8da 	bl	1e310 <hciCoreInit>
}
   1e15c:	bf00      	nop
   1e15e:	b003      	add	sp, #12
   1e160:	f85d fb04 	ldr.w	pc, [sp], #4
   1e164:	100096a8 	.word	0x100096a8
   1e168:	40020000 	.word	0x40020000

0001e16c <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   1e16c:	b500      	push	{lr}
   1e16e:	b085      	sub	sp, #20
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;

  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1e170:	4b26      	ldr	r3, [pc, #152]	; (1e20c <HciResetSequence+0xa0>)
   1e172:	9302      	str	r3, [sp, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1e174:	e002      	b.n	1e17c <HciResetSequence+0x10>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   1e176:	9801      	ldr	r0, [sp, #4]
   1e178:	f7fa f993 	bl	184a2 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1e17c:	f10d 0303 	add.w	r3, sp, #3
   1e180:	4619      	mov	r1, r3
   1e182:	4823      	ldr	r0, [pc, #140]	; (1e210 <HciResetSequence+0xa4>)
   1e184:	f7fa f9ca 	bl	1851c <WsfMsgDeq>
   1e188:	9001      	str	r0, [sp, #4]
   1e18a:	9b01      	ldr	r3, [sp, #4]
   1e18c:	2b00      	cmp	r3, #0
   1e18e:	d1f2      	bne.n	1e176 <HciResetSequence+0xa>
  }

  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1e190:	2303      	movs	r3, #3
   1e192:	f88d 300f 	strb.w	r3, [sp, #15]
   1e196:	e02b      	b.n	1e1f0 <HciResetSequence+0x84>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   1e198:	9b02      	ldr	r3, [sp, #8]
   1e19a:	681b      	ldr	r3, [r3, #0]
   1e19c:	2b00      	cmp	r3, #0
   1e19e:	d007      	beq.n	1e1b0 <HciResetSequence+0x44>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   1e1a0:	9b02      	ldr	r3, [sp, #8]
   1e1a2:	681b      	ldr	r3, [r3, #0]
   1e1a4:	4618      	mov	r0, r3
   1e1a6:	f7fa f97c 	bl	184a2 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   1e1aa:	9b02      	ldr	r3, [sp, #8]
   1e1ac:	2200      	movs	r2, #0
   1e1ae:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   1e1b0:	9b02      	ldr	r3, [sp, #8]
   1e1b2:	2200      	movs	r2, #0
   1e1b4:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   1e1b6:	9b02      	ldr	r3, [sp, #8]
   1e1b8:	689b      	ldr	r3, [r3, #8]
   1e1ba:	2b00      	cmp	r3, #0
   1e1bc:	d007      	beq.n	1e1ce <HciResetSequence+0x62>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   1e1be:	9b02      	ldr	r3, [sp, #8]
   1e1c0:	689b      	ldr	r3, [r3, #8]
   1e1c2:	4618      	mov	r0, r3
   1e1c4:	f7fa f96d 	bl	184a2 <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   1e1c8:	9b02      	ldr	r3, [sp, #8]
   1e1ca:	2200      	movs	r2, #0
   1e1cc:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   1e1ce:	9b02      	ldr	r3, [sp, #8]
   1e1d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e1d4:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   1e1d6:	9b02      	ldr	r3, [sp, #8]
   1e1d8:	7e5b      	ldrb	r3, [r3, #25]
   1e1da:	4618      	mov	r0, r3
   1e1dc:	f7ff fd2e 	bl	1dc3c <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1e1e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1e1e4:	3b01      	subs	r3, #1
   1e1e6:	f88d 300f 	strb.w	r3, [sp, #15]
   1e1ea:	9b02      	ldr	r3, [sp, #8]
   1e1ec:	331c      	adds	r3, #28
   1e1ee:	9302      	str	r3, [sp, #8]
   1e1f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1e1f4:	2b00      	cmp	r3, #0
   1e1f6:	d1cf      	bne.n	1e198 <HciResetSequence+0x2c>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   1e1f8:	4b05      	ldr	r3, [pc, #20]	; (1e210 <HciResetSequence+0xa4>)
   1e1fa:	2201      	movs	r2, #1
   1e1fc:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   1e1fe:	f002 f93d 	bl	2047c <hciCoreResetStart>
}
   1e202:	bf00      	nop
   1e204:	b005      	add	sp, #20
   1e206:	f85d fb04 	ldr.w	pc, [sp], #4
   1e20a:	bf00      	nop
   1e20c:	100096a8 	.word	0x100096a8
   1e210:	10009670 	.word	0x10009670

0001e214 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   1e214:	b082      	sub	sp, #8
   1e216:	4603      	mov	r3, r0
   1e218:	f8ad 3006 	strh.w	r3, [sp, #6]
  hciCoreCb.maxRxAclLen = len;
   1e21c:	4a03      	ldr	r2, [pc, #12]	; (1e22c <HciSetMaxRxAclLen+0x18>)
   1e21e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e222:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
   1e226:	bf00      	nop
   1e228:	b002      	add	sp, #8
   1e22a:	4770      	bx	lr
   1e22c:	100096a8 	.word	0x100096a8

0001e230 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   1e230:	b510      	push	{r4, lr}
   1e232:	b084      	sub	sp, #16
   1e234:	9001      	str	r0, [sp, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   1e236:	9b01      	ldr	r3, [sp, #4]
   1e238:	781b      	ldrb	r3, [r3, #0]
   1e23a:	b29a      	uxth	r2, r3
   1e23c:	9b01      	ldr	r3, [sp, #4]
   1e23e:	3301      	adds	r3, #1
   1e240:	781b      	ldrb	r3, [r3, #0]
   1e242:	b29b      	uxth	r3, r3
   1e244:	021b      	lsls	r3, r3, #8
   1e246:	b29b      	uxth	r3, r3
   1e248:	4413      	add	r3, r2
   1e24a:	f8ad 300e 	strh.w	r3, [sp, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   1e24e:	9b01      	ldr	r3, [sp, #4]
   1e250:	3302      	adds	r3, #2
   1e252:	781b      	ldrb	r3, [r3, #0]
   1e254:	b29a      	uxth	r2, r3
   1e256:	9b01      	ldr	r3, [sp, #4]
   1e258:	3303      	adds	r3, #3
   1e25a:	781b      	ldrb	r3, [r3, #0]
   1e25c:	b29b      	uxth	r3, r3
   1e25e:	021b      	lsls	r3, r3, #8
   1e260:	b29b      	uxth	r3, r3
   1e262:	4413      	add	r3, r2
   1e264:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1e268:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e26c:	4618      	mov	r0, r3
   1e26e:	f7ff fc5d 	bl	1db2c <hciCoreConnByHandle>
   1e272:	9002      	str	r0, [sp, #8]
   1e274:	9b02      	ldr	r3, [sp, #8]
   1e276:	2b00      	cmp	r3, #0
   1e278:	d03d      	beq.n	1e2f6 <HciSendAclData+0xc6>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   1e27a:	4822      	ldr	r0, [pc, #136]	; (1e304 <HciSendAclData+0xd4>)
   1e27c:	f7fa fbd3 	bl	18a26 <WsfQueueEmpty>
   1e280:	4603      	mov	r3, r0
   1e282:	2b00      	cmp	r3, #0
   1e284:	d00c      	beq.n	1e2a0 <HciSendAclData+0x70>
   1e286:	4b20      	ldr	r3, [pc, #128]	; (1e308 <HciSendAclData+0xd8>)
   1e288:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1e28c:	2b00      	cmp	r3, #0
   1e28e:	d007      	beq.n	1e2a0 <HciSendAclData+0x70>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   1e290:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1e294:	9a01      	ldr	r2, [sp, #4]
   1e296:	4619      	mov	r1, r3
   1e298:	9802      	ldr	r0, [sp, #8]
   1e29a:	f7ff fd3d 	bl	1dd18 <hciCoreTxAclStart>
   1e29e:	e004      	b.n	1e2aa <HciSendAclData+0x7a>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   1e2a0:	9a01      	ldr	r2, [sp, #4]
   1e2a2:	2100      	movs	r1, #0
   1e2a4:	4817      	ldr	r0, [pc, #92]	; (1e304 <HciSendAclData+0xd4>)
   1e2a6:	f7fa f923 	bl	184f0 <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   1e2aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1e2ae:	1e5c      	subs	r4, r3, #1
   1e2b0:	f000 f912 	bl	1e4d8 <HciGetBufSize>
   1e2b4:	4603      	mov	r3, r0
   1e2b6:	fb94 f3f3 	sdiv	r3, r4, r3
   1e2ba:	1c59      	adds	r1, r3, #1
   1e2bc:	9b02      	ldr	r3, [sp, #8]
   1e2be:	7e1a      	ldrb	r2, [r3, #24]
   1e2c0:	b2cb      	uxtb	r3, r1
   1e2c2:	4413      	add	r3, r2
   1e2c4:	b2da      	uxtb	r2, r3
   1e2c6:	9b02      	ldr	r3, [sp, #8]
   1e2c8:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   1e2ca:	9b02      	ldr	r3, [sp, #8]
   1e2cc:	7e1a      	ldrb	r2, [r3, #24]
   1e2ce:	4b0e      	ldr	r3, [pc, #56]	; (1e308 <HciSendAclData+0xd8>)
   1e2d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1e2d4:	429a      	cmp	r2, r3
   1e2d6:	d311      	bcc.n	1e2fc <HciSendAclData+0xcc>
   1e2d8:	9b02      	ldr	r3, [sp, #8]
   1e2da:	7ddb      	ldrb	r3, [r3, #23]
   1e2dc:	2b00      	cmp	r3, #0
   1e2de:	d10d      	bne.n	1e2fc <HciSendAclData+0xcc>
    {
      pConn->flowDisabled = TRUE;
   1e2e0:	9b02      	ldr	r3, [sp, #8]
   1e2e2:	2201      	movs	r2, #1
   1e2e4:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   1e2e6:	4b09      	ldr	r3, [pc, #36]	; (1e30c <HciSendAclData+0xdc>)
   1e2e8:	695b      	ldr	r3, [r3, #20]
   1e2ea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1e2ee:	2101      	movs	r1, #1
   1e2f0:	4610      	mov	r0, r2
   1e2f2:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   1e2f4:	e002      	b.n	1e2fc <HciSendAclData+0xcc>
    WsfMsgFree(pData);
   1e2f6:	9801      	ldr	r0, [sp, #4]
   1e2f8:	f7fa f8d3 	bl	184a2 <WsfMsgFree>
}
   1e2fc:	bf00      	nop
   1e2fe:	b004      	add	sp, #16
   1e300:	bd10      	pop	{r4, pc}
   1e302:	bf00      	nop
   1e304:	1000970c 	.word	0x1000970c
   1e308:	100096a8 	.word	0x100096a8
   1e30c:	10009670 	.word	0x10009670

0001e310 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   1e310:	b508      	push	{r3, lr}
  hciCmdInit();
   1e312:	f7fe fd2b 	bl	1cd6c <hciCmdInit>
}
   1e316:	bf00      	nop
   1e318:	bd08      	pop	{r3, pc}
	...

0001e31c <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   1e31c:	b500      	push	{lr}
   1e31e:	b087      	sub	sp, #28
   1e320:	9001      	str	r0, [sp, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   1e322:	2300      	movs	r3, #0
   1e324:	f88d 3016 	strb.w	r3, [sp, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   1e328:	9b01      	ldr	r3, [sp, #4]
   1e32a:	1c5a      	adds	r2, r3, #1
   1e32c:	9201      	str	r2, [sp, #4]
   1e32e:	781b      	ldrb	r3, [r3, #0]
   1e330:	f88d 3017 	strb.w	r3, [sp, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   1e334:	e055      	b.n	1e3e2 <hciCoreNumCmplPkts+0xc6>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   1e336:	9b01      	ldr	r3, [sp, #4]
   1e338:	781b      	ldrb	r3, [r3, #0]
   1e33a:	b29a      	uxth	r2, r3
   1e33c:	9b01      	ldr	r3, [sp, #4]
   1e33e:	3301      	adds	r3, #1
   1e340:	781b      	ldrb	r3, [r3, #0]
   1e342:	b29b      	uxth	r3, r3
   1e344:	021b      	lsls	r3, r3, #8
   1e346:	b29b      	uxth	r3, r3
   1e348:	4413      	add	r3, r2
   1e34a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e34e:	9b01      	ldr	r3, [sp, #4]
   1e350:	3302      	adds	r3, #2
   1e352:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   1e354:	9b01      	ldr	r3, [sp, #4]
   1e356:	781b      	ldrb	r3, [r3, #0]
   1e358:	b29a      	uxth	r2, r3
   1e35a:	9b01      	ldr	r3, [sp, #4]
   1e35c:	3301      	adds	r3, #1
   1e35e:	781b      	ldrb	r3, [r3, #0]
   1e360:	b29b      	uxth	r3, r3
   1e362:	021b      	lsls	r3, r3, #8
   1e364:	b29b      	uxth	r3, r3
   1e366:	4413      	add	r3, r2
   1e368:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e36c:	9b01      	ldr	r3, [sp, #4]
   1e36e:	3302      	adds	r3, #2
   1e370:	9301      	str	r3, [sp, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1e372:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e376:	4618      	mov	r0, r3
   1e378:	f7ff fbd8 	bl	1db2c <hciCoreConnByHandle>
   1e37c:	9003      	str	r0, [sp, #12]
   1e37e:	9b03      	ldr	r3, [sp, #12]
   1e380:	2b00      	cmp	r3, #0
   1e382:	d02e      	beq.n	1e3e2 <hciCoreNumCmplPkts+0xc6>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   1e384:	9b03      	ldr	r3, [sp, #12]
   1e386:	7e5a      	ldrb	r2, [r3, #25]
   1e388:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1e38c:	b2db      	uxtb	r3, r3
   1e38e:	1ad3      	subs	r3, r2, r3
   1e390:	b2da      	uxtb	r2, r3
   1e392:	9b03      	ldr	r3, [sp, #12]
   1e394:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   1e396:	9b03      	ldr	r3, [sp, #12]
   1e398:	7e1a      	ldrb	r2, [r3, #24]
   1e39a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1e39e:	b2db      	uxtb	r3, r3
   1e3a0:	1ad3      	subs	r3, r2, r3
   1e3a2:	b2da      	uxtb	r2, r3
   1e3a4:	9b03      	ldr	r3, [sp, #12]
   1e3a6:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   1e3a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1e3ac:	b2da      	uxtb	r2, r3
   1e3ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1e3b2:	4413      	add	r3, r2
   1e3b4:	f88d 3016 	strb.w	r3, [sp, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   1e3b8:	9b03      	ldr	r3, [sp, #12]
   1e3ba:	7ddb      	ldrb	r3, [r3, #23]
   1e3bc:	2b00      	cmp	r3, #0
   1e3be:	d010      	beq.n	1e3e2 <hciCoreNumCmplPkts+0xc6>
   1e3c0:	9b03      	ldr	r3, [sp, #12]
   1e3c2:	7e1a      	ldrb	r2, [r3, #24]
   1e3c4:	4b0f      	ldr	r3, [pc, #60]	; (1e404 <hciCoreNumCmplPkts+0xe8>)
   1e3c6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   1e3ca:	429a      	cmp	r2, r3
   1e3cc:	d809      	bhi.n	1e3e2 <hciCoreNumCmplPkts+0xc6>
      {
        pConn->flowDisabled = FALSE;
   1e3ce:	9b03      	ldr	r3, [sp, #12]
   1e3d0:	2200      	movs	r2, #0
   1e3d2:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   1e3d4:	4b0c      	ldr	r3, [pc, #48]	; (1e408 <hciCoreNumCmplPkts+0xec>)
   1e3d6:	695b      	ldr	r3, [r3, #20]
   1e3d8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e3dc:	2100      	movs	r1, #0
   1e3de:	4610      	mov	r0, r2
   1e3e0:	4798      	blx	r3
  while (numHandles-- > 0)
   1e3e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1e3e6:	1e5a      	subs	r2, r3, #1
   1e3e8:	f88d 2017 	strb.w	r2, [sp, #23]
   1e3ec:	2b00      	cmp	r3, #0
   1e3ee:	d1a2      	bne.n	1e336 <hciCoreNumCmplPkts+0x1a>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   1e3f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1e3f4:	4618      	mov	r0, r3
   1e3f6:	f7ff fc21 	bl	1dc3c <hciCoreTxReady>
}
   1e3fa:	bf00      	nop
   1e3fc:	b007      	add	sp, #28
   1e3fe:	f85d fb04 	ldr.w	pc, [sp], #4
   1e402:	bf00      	nop
   1e404:	100096a8 	.word	0x100096a8
   1e408:	10009670 	.word	0x10009670

0001e40c <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   1e40c:	b500      	push	{lr}
   1e40e:	b083      	sub	sp, #12
   1e410:	4603      	mov	r3, r0
   1e412:	9100      	str	r1, [sp, #0]
   1e414:	f88d 3007 	strb.w	r3, [sp, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   1e418:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e41c:	9a00      	ldr	r2, [sp, #0]
   1e41e:	4619      	mov	r1, r3
   1e420:	4806      	ldr	r0, [pc, #24]	; (1e43c <hciCoreRecv+0x30>)
   1e422:	f7fa f865 	bl	184f0 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   1e426:	4b05      	ldr	r3, [pc, #20]	; (1e43c <hciCoreRecv+0x30>)
   1e428:	7e1b      	ldrb	r3, [r3, #24]
   1e42a:	2101      	movs	r1, #1
   1e42c:	4618      	mov	r0, r3
   1e42e:	f7fa f901 	bl	18634 <WsfSetEvent>
}
   1e432:	bf00      	nop
   1e434:	b003      	add	sp, #12
   1e436:	f85d fb04 	ldr.w	pc, [sp], #4
   1e43a:	bf00      	nop
   1e43c:	10009670 	.word	0x10009670

0001e440 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1e440:	b500      	push	{lr}
   1e442:	b085      	sub	sp, #20
   1e444:	4603      	mov	r3, r0
   1e446:	9100      	str	r1, [sp, #0]
   1e448:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   1e44c:	9b00      	ldr	r3, [sp, #0]
   1e44e:	2b00      	cmp	r3, #0
   1e450:	d007      	beq.n	1e462 <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   1e452:	9b00      	ldr	r3, [sp, #0]
   1e454:	789b      	ldrb	r3, [r3, #2]
   1e456:	2b01      	cmp	r3, #1
   1e458:	d131      	bne.n	1e4be <HciCoreHandler+0x7e>
    {
      hciCmdTimeout(pMsg);
   1e45a:	9800      	ldr	r0, [sp, #0]
   1e45c:	f7fe fc9c 	bl	1cd98 <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   1e460:	e02d      	b.n	1e4be <HciCoreHandler+0x7e>
  else if (event & HCI_EVT_RX)
   1e462:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e466:	f003 0301 	and.w	r3, r3, #1
   1e46a:	2b00      	cmp	r3, #0
   1e46c:	d027      	beq.n	1e4be <HciCoreHandler+0x7e>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1e46e:	e01c      	b.n	1e4aa <HciCoreHandler+0x6a>
      if (handlerId == HCI_EVT_TYPE)
   1e470:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1e474:	2b04      	cmp	r3, #4
   1e476:	d10d      	bne.n	1e494 <HciCoreHandler+0x54>
        hciEvtProcessMsg(pBuf);
   1e478:	9803      	ldr	r0, [sp, #12]
   1e47a:	f001 fc85 	bl	1fd88 <hciEvtProcessMsg>
        if (hciCb.resetting)
   1e47e:	4b12      	ldr	r3, [pc, #72]	; (1e4c8 <HciCoreHandler+0x88>)
   1e480:	7e5b      	ldrb	r3, [r3, #25]
   1e482:	2b00      	cmp	r3, #0
   1e484:	d002      	beq.n	1e48c <HciCoreHandler+0x4c>
          hciCoreResetSequence(pBuf);
   1e486:	9803      	ldr	r0, [sp, #12]
   1e488:	f001 fffe 	bl	20488 <hciCoreResetSequence>
        WsfMsgFree(pBuf);
   1e48c:	9803      	ldr	r0, [sp, #12]
   1e48e:	f7fa f808 	bl	184a2 <WsfMsgFree>
   1e492:	e00a      	b.n	1e4aa <HciCoreHandler+0x6a>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   1e494:	9803      	ldr	r0, [sp, #12]
   1e496:	f7ff fd11 	bl	1debc <hciCoreAclReassembly>
   1e49a:	9003      	str	r0, [sp, #12]
   1e49c:	9b03      	ldr	r3, [sp, #12]
   1e49e:	2b00      	cmp	r3, #0
   1e4a0:	d003      	beq.n	1e4aa <HciCoreHandler+0x6a>
          hciCb.aclCback(pBuf);
   1e4a2:	4b09      	ldr	r3, [pc, #36]	; (1e4c8 <HciCoreHandler+0x88>)
   1e4a4:	691b      	ldr	r3, [r3, #16]
   1e4a6:	9803      	ldr	r0, [sp, #12]
   1e4a8:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1e4aa:	f10d 030b 	add.w	r3, sp, #11
   1e4ae:	4619      	mov	r1, r3
   1e4b0:	4805      	ldr	r0, [pc, #20]	; (1e4c8 <HciCoreHandler+0x88>)
   1e4b2:	f7fa f833 	bl	1851c <WsfMsgDeq>
   1e4b6:	9003      	str	r0, [sp, #12]
   1e4b8:	9b03      	ldr	r3, [sp, #12]
   1e4ba:	2b00      	cmp	r3, #0
   1e4bc:	d1d8      	bne.n	1e470 <HciCoreHandler+0x30>
}
   1e4be:	bf00      	nop
   1e4c0:	b005      	add	sp, #20
   1e4c2:	f85d fb04 	ldr.w	pc, [sp], #4
   1e4c6:	bf00      	nop
   1e4c8:	10009670 	.word	0x10009670

0001e4cc <HciGetBdAddr>:
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
  return hciCoreCb.bdAddr;
   1e4cc:	4b01      	ldr	r3, [pc, #4]	; (1e4d4 <HciGetBdAddr+0x8>)
}
   1e4ce:	4618      	mov	r0, r3
   1e4d0:	4770      	bx	lr
   1e4d2:	bf00      	nop
   1e4d4:	10009704 	.word	0x10009704

0001e4d8 <HciGetBufSize>:
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
  return hciCoreCb.bufSize;
   1e4d8:	4b02      	ldr	r3, [pc, #8]	; (1e4e4 <HciGetBufSize+0xc>)
   1e4da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
}
   1e4de:	4618      	mov	r0, r3
   1e4e0:	4770      	bx	lr
   1e4e2:	bf00      	nop
   1e4e4:	100096a8 	.word	0x100096a8

0001e4e8 <HciGetLeSupFeat>:
/*************************************************************************************************/
uint32_t HciGetLeSupFeat(void)
{
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   1e4e8:	4b02      	ldr	r3, [pc, #8]	; (1e4f4 <HciGetLeSupFeat+0xc>)
   1e4ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1e4ec:	f023 0302 	bic.w	r3, r3, #2
}
   1e4f0:	4618      	mov	r0, r3
   1e4f2:	4770      	bx	lr
   1e4f4:	100096a8 	.word	0x100096a8

0001e4f8 <HciGetMaxRxAclLen>:
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
  return hciCoreCb.maxRxAclLen;
   1e4f8:	4b02      	ldr	r3, [pc, #8]	; (1e504 <HciGetMaxRxAclLen+0xc>)
   1e4fa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
}
   1e4fe:	4618      	mov	r0, r3
   1e500:	4770      	bx	lr
   1e502:	bf00      	nop
   1e504:	100096a8 	.word	0x100096a8

0001e508 <HciLlPrivacySupported>:
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   1e508:	4b04      	ldr	r3, [pc, #16]	; (1e51c <HciLlPrivacySupported+0x14>)
   1e50a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
   1e50e:	2b00      	cmp	r3, #0
   1e510:	bf14      	ite	ne
   1e512:	2301      	movne	r3, #1
   1e514:	2300      	moveq	r3, #0
   1e516:	b2db      	uxtb	r3, r3
}
   1e518:	4618      	mov	r0, r3
   1e51a:	4770      	bx	lr
   1e51c:	100096a8 	.word	0x100096a8

0001e520 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e520:	b500      	push	{lr}
   1e522:	b085      	sub	sp, #20
   1e524:	9003      	str	r0, [sp, #12]
   1e526:	9102      	str	r1, [sp, #8]
   1e528:	4613      	mov	r3, r2
   1e52a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1e52e:	9b02      	ldr	r3, [sp, #8]
   1e530:	1c5a      	adds	r2, r3, #1
   1e532:	9202      	str	r2, [sp, #8]
   1e534:	781a      	ldrb	r2, [r3, #0]
   1e536:	9b03      	ldr	r3, [sp, #12]
   1e538:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1e53a:	9b02      	ldr	r3, [sp, #8]
   1e53c:	781b      	ldrb	r3, [r3, #0]
   1e53e:	b29a      	uxth	r2, r3
   1e540:	9b02      	ldr	r3, [sp, #8]
   1e542:	3301      	adds	r3, #1
   1e544:	781b      	ldrb	r3, [r3, #0]
   1e546:	b29b      	uxth	r3, r3
   1e548:	021b      	lsls	r3, r3, #8
   1e54a:	b29b      	uxth	r3, r3
   1e54c:	4413      	add	r3, r2
   1e54e:	b29a      	uxth	r2, r3
   1e550:	9b03      	ldr	r3, [sp, #12]
   1e552:	80da      	strh	r2, [r3, #6]
   1e554:	9b02      	ldr	r3, [sp, #8]
   1e556:	3302      	adds	r3, #2
   1e558:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1e55a:	9b02      	ldr	r3, [sp, #8]
   1e55c:	1c5a      	adds	r2, r3, #1
   1e55e:	9202      	str	r2, [sp, #8]
   1e560:	781a      	ldrb	r2, [r3, #0]
   1e562:	9b03      	ldr	r3, [sp, #12]
   1e564:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1e566:	9b02      	ldr	r3, [sp, #8]
   1e568:	1c5a      	adds	r2, r3, #1
   1e56a:	9202      	str	r2, [sp, #8]
   1e56c:	781a      	ldrb	r2, [r3, #0]
   1e56e:	9b03      	ldr	r3, [sp, #12]
   1e570:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   1e572:	9b03      	ldr	r3, [sp, #12]
   1e574:	330a      	adds	r3, #10
   1e576:	9902      	ldr	r1, [sp, #8]
   1e578:	4618      	mov	r0, r3
   1e57a:	f7fc fea5 	bl	1b2c8 <BdaCpy>
   1e57e:	9b02      	ldr	r3, [sp, #8]
   1e580:	3306      	adds	r3, #6
   1e582:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   1e584:	9b02      	ldr	r3, [sp, #8]
   1e586:	781b      	ldrb	r3, [r3, #0]
   1e588:	b29a      	uxth	r2, r3
   1e58a:	9b02      	ldr	r3, [sp, #8]
   1e58c:	3301      	adds	r3, #1
   1e58e:	781b      	ldrb	r3, [r3, #0]
   1e590:	b29b      	uxth	r3, r3
   1e592:	021b      	lsls	r3, r3, #8
   1e594:	b29b      	uxth	r3, r3
   1e596:	4413      	add	r3, r2
   1e598:	b29a      	uxth	r2, r3
   1e59a:	9b03      	ldr	r3, [sp, #12]
   1e59c:	821a      	strh	r2, [r3, #16]
   1e59e:	9b02      	ldr	r3, [sp, #8]
   1e5a0:	3302      	adds	r3, #2
   1e5a2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   1e5a4:	9b02      	ldr	r3, [sp, #8]
   1e5a6:	781b      	ldrb	r3, [r3, #0]
   1e5a8:	b29a      	uxth	r2, r3
   1e5aa:	9b02      	ldr	r3, [sp, #8]
   1e5ac:	3301      	adds	r3, #1
   1e5ae:	781b      	ldrb	r3, [r3, #0]
   1e5b0:	b29b      	uxth	r3, r3
   1e5b2:	021b      	lsls	r3, r3, #8
   1e5b4:	b29b      	uxth	r3, r3
   1e5b6:	4413      	add	r3, r2
   1e5b8:	b29a      	uxth	r2, r3
   1e5ba:	9b03      	ldr	r3, [sp, #12]
   1e5bc:	825a      	strh	r2, [r3, #18]
   1e5be:	9b02      	ldr	r3, [sp, #8]
   1e5c0:	3302      	adds	r3, #2
   1e5c2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   1e5c4:	9b02      	ldr	r3, [sp, #8]
   1e5c6:	781b      	ldrb	r3, [r3, #0]
   1e5c8:	b29a      	uxth	r2, r3
   1e5ca:	9b02      	ldr	r3, [sp, #8]
   1e5cc:	3301      	adds	r3, #1
   1e5ce:	781b      	ldrb	r3, [r3, #0]
   1e5d0:	b29b      	uxth	r3, r3
   1e5d2:	021b      	lsls	r3, r3, #8
   1e5d4:	b29b      	uxth	r3, r3
   1e5d6:	4413      	add	r3, r2
   1e5d8:	b29a      	uxth	r2, r3
   1e5da:	9b03      	ldr	r3, [sp, #12]
   1e5dc:	829a      	strh	r2, [r3, #20]
   1e5de:	9b02      	ldr	r3, [sp, #8]
   1e5e0:	3302      	adds	r3, #2
   1e5e2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   1e5e4:	9b02      	ldr	r3, [sp, #8]
   1e5e6:	1c5a      	adds	r2, r3, #1
   1e5e8:	9202      	str	r2, [sp, #8]
   1e5ea:	781a      	ldrb	r2, [r3, #0]
   1e5ec:	9b03      	ldr	r3, [sp, #12]
   1e5ee:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   1e5f0:	9b03      	ldr	r3, [sp, #12]
   1e5f2:	3317      	adds	r3, #23
   1e5f4:	2206      	movs	r2, #6
   1e5f6:	2100      	movs	r1, #0
   1e5f8:	4618      	mov	r0, r3
   1e5fa:	f7ed fe4b 	bl	c294 <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   1e5fe:	9b03      	ldr	r3, [sp, #12]
   1e600:	331d      	adds	r3, #29
   1e602:	2206      	movs	r2, #6
   1e604:	2100      	movs	r1, #0
   1e606:	4618      	mov	r0, r3
   1e608:	f7ed fe44 	bl	c294 <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1e60c:	9b03      	ldr	r3, [sp, #12]
   1e60e:	88da      	ldrh	r2, [r3, #6]
   1e610:	9b03      	ldr	r3, [sp, #12]
   1e612:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   1e614:	9b03      	ldr	r3, [sp, #12]
   1e616:	791a      	ldrb	r2, [r3, #4]
   1e618:	9b03      	ldr	r3, [sp, #12]
   1e61a:	70da      	strb	r2, [r3, #3]
}
   1e61c:	bf00      	nop
   1e61e:	b005      	add	sp, #20
   1e620:	f85d fb04 	ldr.w	pc, [sp], #4

0001e624 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e624:	b500      	push	{lr}
   1e626:	b085      	sub	sp, #20
   1e628:	9003      	str	r0, [sp, #12]
   1e62a:	9102      	str	r1, [sp, #8]
   1e62c:	4613      	mov	r3, r2
   1e62e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1e632:	9b02      	ldr	r3, [sp, #8]
   1e634:	1c5a      	adds	r2, r3, #1
   1e636:	9202      	str	r2, [sp, #8]
   1e638:	781a      	ldrb	r2, [r3, #0]
   1e63a:	9b03      	ldr	r3, [sp, #12]
   1e63c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1e63e:	9b02      	ldr	r3, [sp, #8]
   1e640:	781b      	ldrb	r3, [r3, #0]
   1e642:	b29a      	uxth	r2, r3
   1e644:	9b02      	ldr	r3, [sp, #8]
   1e646:	3301      	adds	r3, #1
   1e648:	781b      	ldrb	r3, [r3, #0]
   1e64a:	b29b      	uxth	r3, r3
   1e64c:	021b      	lsls	r3, r3, #8
   1e64e:	b29b      	uxth	r3, r3
   1e650:	4413      	add	r3, r2
   1e652:	b29a      	uxth	r2, r3
   1e654:	9b03      	ldr	r3, [sp, #12]
   1e656:	80da      	strh	r2, [r3, #6]
   1e658:	9b02      	ldr	r3, [sp, #8]
   1e65a:	3302      	adds	r3, #2
   1e65c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1e65e:	9b02      	ldr	r3, [sp, #8]
   1e660:	1c5a      	adds	r2, r3, #1
   1e662:	9202      	str	r2, [sp, #8]
   1e664:	781a      	ldrb	r2, [r3, #0]
   1e666:	9b03      	ldr	r3, [sp, #12]
   1e668:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1e66a:	9b02      	ldr	r3, [sp, #8]
   1e66c:	1c5a      	adds	r2, r3, #1
   1e66e:	9202      	str	r2, [sp, #8]
   1e670:	781a      	ldrb	r2, [r3, #0]
   1e672:	9b03      	ldr	r3, [sp, #12]
   1e674:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   1e676:	9b03      	ldr	r3, [sp, #12]
   1e678:	330a      	adds	r3, #10
   1e67a:	9902      	ldr	r1, [sp, #8]
   1e67c:	4618      	mov	r0, r3
   1e67e:	f7fc fe23 	bl	1b2c8 <BdaCpy>
   1e682:	9b02      	ldr	r3, [sp, #8]
   1e684:	3306      	adds	r3, #6
   1e686:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   1e688:	9b03      	ldr	r3, [sp, #12]
   1e68a:	3317      	adds	r3, #23
   1e68c:	9902      	ldr	r1, [sp, #8]
   1e68e:	4618      	mov	r0, r3
   1e690:	f7fc fe1a 	bl	1b2c8 <BdaCpy>
   1e694:	9b02      	ldr	r3, [sp, #8]
   1e696:	3306      	adds	r3, #6
   1e698:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   1e69a:	9b03      	ldr	r3, [sp, #12]
   1e69c:	331d      	adds	r3, #29
   1e69e:	9902      	ldr	r1, [sp, #8]
   1e6a0:	4618      	mov	r0, r3
   1e6a2:	f7fc fe11 	bl	1b2c8 <BdaCpy>
   1e6a6:	9b02      	ldr	r3, [sp, #8]
   1e6a8:	3306      	adds	r3, #6
   1e6aa:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   1e6ac:	9b02      	ldr	r3, [sp, #8]
   1e6ae:	781b      	ldrb	r3, [r3, #0]
   1e6b0:	b29a      	uxth	r2, r3
   1e6b2:	9b02      	ldr	r3, [sp, #8]
   1e6b4:	3301      	adds	r3, #1
   1e6b6:	781b      	ldrb	r3, [r3, #0]
   1e6b8:	b29b      	uxth	r3, r3
   1e6ba:	021b      	lsls	r3, r3, #8
   1e6bc:	b29b      	uxth	r3, r3
   1e6be:	4413      	add	r3, r2
   1e6c0:	b29a      	uxth	r2, r3
   1e6c2:	9b03      	ldr	r3, [sp, #12]
   1e6c4:	821a      	strh	r2, [r3, #16]
   1e6c6:	9b02      	ldr	r3, [sp, #8]
   1e6c8:	3302      	adds	r3, #2
   1e6ca:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   1e6cc:	9b02      	ldr	r3, [sp, #8]
   1e6ce:	781b      	ldrb	r3, [r3, #0]
   1e6d0:	b29a      	uxth	r2, r3
   1e6d2:	9b02      	ldr	r3, [sp, #8]
   1e6d4:	3301      	adds	r3, #1
   1e6d6:	781b      	ldrb	r3, [r3, #0]
   1e6d8:	b29b      	uxth	r3, r3
   1e6da:	021b      	lsls	r3, r3, #8
   1e6dc:	b29b      	uxth	r3, r3
   1e6de:	4413      	add	r3, r2
   1e6e0:	b29a      	uxth	r2, r3
   1e6e2:	9b03      	ldr	r3, [sp, #12]
   1e6e4:	825a      	strh	r2, [r3, #18]
   1e6e6:	9b02      	ldr	r3, [sp, #8]
   1e6e8:	3302      	adds	r3, #2
   1e6ea:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   1e6ec:	9b02      	ldr	r3, [sp, #8]
   1e6ee:	781b      	ldrb	r3, [r3, #0]
   1e6f0:	b29a      	uxth	r2, r3
   1e6f2:	9b02      	ldr	r3, [sp, #8]
   1e6f4:	3301      	adds	r3, #1
   1e6f6:	781b      	ldrb	r3, [r3, #0]
   1e6f8:	b29b      	uxth	r3, r3
   1e6fa:	021b      	lsls	r3, r3, #8
   1e6fc:	b29b      	uxth	r3, r3
   1e6fe:	4413      	add	r3, r2
   1e700:	b29a      	uxth	r2, r3
   1e702:	9b03      	ldr	r3, [sp, #12]
   1e704:	829a      	strh	r2, [r3, #20]
   1e706:	9b02      	ldr	r3, [sp, #8]
   1e708:	3302      	adds	r3, #2
   1e70a:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   1e70c:	9b02      	ldr	r3, [sp, #8]
   1e70e:	1c5a      	adds	r2, r3, #1
   1e710:	9202      	str	r2, [sp, #8]
   1e712:	781a      	ldrb	r2, [r3, #0]
   1e714:	9b03      	ldr	r3, [sp, #12]
   1e716:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1e718:	9b03      	ldr	r3, [sp, #12]
   1e71a:	88da      	ldrh	r2, [r3, #6]
   1e71c:	9b03      	ldr	r3, [sp, #12]
   1e71e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   1e720:	9b03      	ldr	r3, [sp, #12]
   1e722:	791a      	ldrb	r2, [r3, #4]
   1e724:	9b03      	ldr	r3, [sp, #12]
   1e726:	70da      	strb	r2, [r3, #3]
}
   1e728:	bf00      	nop
   1e72a:	b005      	add	sp, #20
   1e72c:	f85d fb04 	ldr.w	pc, [sp], #4

0001e730 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e730:	b084      	sub	sp, #16
   1e732:	9003      	str	r0, [sp, #12]
   1e734:	9102      	str	r1, [sp, #8]
   1e736:	4613      	mov	r3, r2
   1e738:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   1e73c:	9b02      	ldr	r3, [sp, #8]
   1e73e:	1c5a      	adds	r2, r3, #1
   1e740:	9202      	str	r2, [sp, #8]
   1e742:	781a      	ldrb	r2, [r3, #0]
   1e744:	9b03      	ldr	r3, [sp, #12]
   1e746:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   1e748:	9b02      	ldr	r3, [sp, #8]
   1e74a:	781b      	ldrb	r3, [r3, #0]
   1e74c:	b29a      	uxth	r2, r3
   1e74e:	9b02      	ldr	r3, [sp, #8]
   1e750:	3301      	adds	r3, #1
   1e752:	781b      	ldrb	r3, [r3, #0]
   1e754:	b29b      	uxth	r3, r3
   1e756:	021b      	lsls	r3, r3, #8
   1e758:	b29b      	uxth	r3, r3
   1e75a:	4413      	add	r3, r2
   1e75c:	b29a      	uxth	r2, r3
   1e75e:	9b03      	ldr	r3, [sp, #12]
   1e760:	80da      	strh	r2, [r3, #6]
   1e762:	9b02      	ldr	r3, [sp, #8]
   1e764:	3302      	adds	r3, #2
   1e766:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   1e768:	9b02      	ldr	r3, [sp, #8]
   1e76a:	1c5a      	adds	r2, r3, #1
   1e76c:	9202      	str	r2, [sp, #8]
   1e76e:	781a      	ldrb	r2, [r3, #0]
   1e770:	9b03      	ldr	r3, [sp, #12]
   1e772:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   1e774:	9b03      	ldr	r3, [sp, #12]
   1e776:	88da      	ldrh	r2, [r3, #6]
   1e778:	9b03      	ldr	r3, [sp, #12]
   1e77a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   1e77c:	9b03      	ldr	r3, [sp, #12]
   1e77e:	791a      	ldrb	r2, [r3, #4]
   1e780:	9b03      	ldr	r3, [sp, #12]
   1e782:	70da      	strb	r2, [r3, #3]
}
   1e784:	bf00      	nop
   1e786:	b004      	add	sp, #16
   1e788:	4770      	bx	lr

0001e78a <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e78a:	b084      	sub	sp, #16
   1e78c:	9003      	str	r0, [sp, #12]
   1e78e:	9102      	str	r1, [sp, #8]
   1e790:	4613      	mov	r3, r2
   1e792:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   1e796:	9b02      	ldr	r3, [sp, #8]
   1e798:	1c5a      	adds	r2, r3, #1
   1e79a:	9202      	str	r2, [sp, #8]
   1e79c:	781a      	ldrb	r2, [r3, #0]
   1e79e:	9b03      	ldr	r3, [sp, #12]
   1e7a0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   1e7a2:	9b02      	ldr	r3, [sp, #8]
   1e7a4:	781b      	ldrb	r3, [r3, #0]
   1e7a6:	b29a      	uxth	r2, r3
   1e7a8:	9b02      	ldr	r3, [sp, #8]
   1e7aa:	3301      	adds	r3, #1
   1e7ac:	781b      	ldrb	r3, [r3, #0]
   1e7ae:	b29b      	uxth	r3, r3
   1e7b0:	021b      	lsls	r3, r3, #8
   1e7b2:	b29b      	uxth	r3, r3
   1e7b4:	4413      	add	r3, r2
   1e7b6:	b29a      	uxth	r2, r3
   1e7b8:	9b03      	ldr	r3, [sp, #12]
   1e7ba:	80da      	strh	r2, [r3, #6]
   1e7bc:	9b02      	ldr	r3, [sp, #8]
   1e7be:	3302      	adds	r3, #2
   1e7c0:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   1e7c2:	9b02      	ldr	r3, [sp, #8]
   1e7c4:	781b      	ldrb	r3, [r3, #0]
   1e7c6:	b29a      	uxth	r2, r3
   1e7c8:	9b02      	ldr	r3, [sp, #8]
   1e7ca:	3301      	adds	r3, #1
   1e7cc:	781b      	ldrb	r3, [r3, #0]
   1e7ce:	b29b      	uxth	r3, r3
   1e7d0:	021b      	lsls	r3, r3, #8
   1e7d2:	b29b      	uxth	r3, r3
   1e7d4:	4413      	add	r3, r2
   1e7d6:	b29a      	uxth	r2, r3
   1e7d8:	9b03      	ldr	r3, [sp, #12]
   1e7da:	811a      	strh	r2, [r3, #8]
   1e7dc:	9b02      	ldr	r3, [sp, #8]
   1e7de:	3302      	adds	r3, #2
   1e7e0:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   1e7e2:	9b02      	ldr	r3, [sp, #8]
   1e7e4:	781b      	ldrb	r3, [r3, #0]
   1e7e6:	b29a      	uxth	r2, r3
   1e7e8:	9b02      	ldr	r3, [sp, #8]
   1e7ea:	3301      	adds	r3, #1
   1e7ec:	781b      	ldrb	r3, [r3, #0]
   1e7ee:	b29b      	uxth	r3, r3
   1e7f0:	021b      	lsls	r3, r3, #8
   1e7f2:	b29b      	uxth	r3, r3
   1e7f4:	4413      	add	r3, r2
   1e7f6:	b29a      	uxth	r2, r3
   1e7f8:	9b03      	ldr	r3, [sp, #12]
   1e7fa:	815a      	strh	r2, [r3, #10]
   1e7fc:	9b02      	ldr	r3, [sp, #8]
   1e7fe:	3302      	adds	r3, #2
   1e800:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   1e802:	9b02      	ldr	r3, [sp, #8]
   1e804:	781b      	ldrb	r3, [r3, #0]
   1e806:	b29a      	uxth	r2, r3
   1e808:	9b02      	ldr	r3, [sp, #8]
   1e80a:	3301      	adds	r3, #1
   1e80c:	781b      	ldrb	r3, [r3, #0]
   1e80e:	b29b      	uxth	r3, r3
   1e810:	021b      	lsls	r3, r3, #8
   1e812:	b29b      	uxth	r3, r3
   1e814:	4413      	add	r3, r2
   1e816:	b29a      	uxth	r2, r3
   1e818:	9b03      	ldr	r3, [sp, #12]
   1e81a:	819a      	strh	r2, [r3, #12]
   1e81c:	9b02      	ldr	r3, [sp, #8]
   1e81e:	3302      	adds	r3, #2
   1e820:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   1e822:	9b03      	ldr	r3, [sp, #12]
   1e824:	88da      	ldrh	r2, [r3, #6]
   1e826:	9b03      	ldr	r3, [sp, #12]
   1e828:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   1e82a:	9b03      	ldr	r3, [sp, #12]
   1e82c:	791a      	ldrb	r2, [r3, #4]
   1e82e:	9b03      	ldr	r3, [sp, #12]
   1e830:	70da      	strb	r2, [r3, #3]
}
   1e832:	bf00      	nop
   1e834:	b004      	add	sp, #16
   1e836:	4770      	bx	lr

0001e838 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e838:	b084      	sub	sp, #16
   1e83a:	9003      	str	r0, [sp, #12]
   1e83c:	9102      	str	r1, [sp, #8]
   1e83e:	4613      	mov	r3, r2
   1e840:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   1e844:	9b02      	ldr	r3, [sp, #8]
   1e846:	1c5a      	adds	r2, r3, #1
   1e848:	9202      	str	r2, [sp, #8]
   1e84a:	781a      	ldrb	r2, [r3, #0]
   1e84c:	9b03      	ldr	r3, [sp, #12]
   1e84e:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   1e850:	9b03      	ldr	r3, [sp, #12]
   1e852:	791a      	ldrb	r2, [r3, #4]
   1e854:	9b03      	ldr	r3, [sp, #12]
   1e856:	70da      	strb	r2, [r3, #3]
}
   1e858:	bf00      	nop
   1e85a:	b004      	add	sp, #16
   1e85c:	4770      	bx	lr

0001e85e <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e85e:	b084      	sub	sp, #16
   1e860:	9003      	str	r0, [sp, #12]
   1e862:	9102      	str	r1, [sp, #8]
   1e864:	4613      	mov	r3, r2
   1e866:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   1e86a:	9b02      	ldr	r3, [sp, #8]
   1e86c:	1c5a      	adds	r2, r3, #1
   1e86e:	9202      	str	r2, [sp, #8]
   1e870:	781a      	ldrb	r2, [r3, #0]
   1e872:	9b03      	ldr	r3, [sp, #12]
   1e874:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   1e876:	9b02      	ldr	r3, [sp, #8]
   1e878:	781b      	ldrb	r3, [r3, #0]
   1e87a:	b29a      	uxth	r2, r3
   1e87c:	9b02      	ldr	r3, [sp, #8]
   1e87e:	3301      	adds	r3, #1
   1e880:	781b      	ldrb	r3, [r3, #0]
   1e882:	b29b      	uxth	r3, r3
   1e884:	021b      	lsls	r3, r3, #8
   1e886:	b29b      	uxth	r3, r3
   1e888:	4413      	add	r3, r2
   1e88a:	b29a      	uxth	r2, r3
   1e88c:	9b03      	ldr	r3, [sp, #12]
   1e88e:	80da      	strh	r2, [r3, #6]
   1e890:	9b02      	ldr	r3, [sp, #8]
   1e892:	3302      	adds	r3, #2
   1e894:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   1e896:	9b02      	ldr	r3, [sp, #8]
   1e898:	1c5a      	adds	r2, r3, #1
   1e89a:	9202      	str	r2, [sp, #8]
   1e89c:	781b      	ldrb	r3, [r3, #0]
   1e89e:	b25a      	sxtb	r2, r3
   1e8a0:	9b03      	ldr	r3, [sp, #12]
   1e8a2:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   1e8a4:	9b03      	ldr	r3, [sp, #12]
   1e8a6:	88da      	ldrh	r2, [r3, #6]
   1e8a8:	9b03      	ldr	r3, [sp, #12]
   1e8aa:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   1e8ac:	9b03      	ldr	r3, [sp, #12]
   1e8ae:	791a      	ldrb	r2, [r3, #4]
   1e8b0:	9b03      	ldr	r3, [sp, #12]
   1e8b2:	70da      	strb	r2, [r3, #3]
}
   1e8b4:	bf00      	nop
   1e8b6:	b004      	add	sp, #16
   1e8b8:	4770      	bx	lr

0001e8ba <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e8ba:	b500      	push	{lr}
   1e8bc:	b085      	sub	sp, #20
   1e8be:	9003      	str	r0, [sp, #12]
   1e8c0:	9102      	str	r1, [sp, #8]
   1e8c2:	4613      	mov	r3, r2
   1e8c4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   1e8c8:	9b02      	ldr	r3, [sp, #8]
   1e8ca:	1c5a      	adds	r2, r3, #1
   1e8cc:	9202      	str	r2, [sp, #8]
   1e8ce:	781a      	ldrb	r2, [r3, #0]
   1e8d0:	9b03      	ldr	r3, [sp, #12]
   1e8d2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   1e8d4:	9b02      	ldr	r3, [sp, #8]
   1e8d6:	781b      	ldrb	r3, [r3, #0]
   1e8d8:	b29a      	uxth	r2, r3
   1e8da:	9b02      	ldr	r3, [sp, #8]
   1e8dc:	3301      	adds	r3, #1
   1e8de:	781b      	ldrb	r3, [r3, #0]
   1e8e0:	b29b      	uxth	r3, r3
   1e8e2:	021b      	lsls	r3, r3, #8
   1e8e4:	b29b      	uxth	r3, r3
   1e8e6:	4413      	add	r3, r2
   1e8e8:	b29a      	uxth	r2, r3
   1e8ea:	9b03      	ldr	r3, [sp, #12]
   1e8ec:	80da      	strh	r2, [r3, #6]
   1e8ee:	9b02      	ldr	r3, [sp, #8]
   1e8f0:	3302      	adds	r3, #2
   1e8f2:	9302      	str	r3, [sp, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   1e8f4:	9b03      	ldr	r3, [sp, #12]
   1e8f6:	3308      	adds	r3, #8
   1e8f8:	2205      	movs	r2, #5
   1e8fa:	9902      	ldr	r1, [sp, #8]
   1e8fc:	4618      	mov	r0, r3
   1e8fe:	f7ed fc2f 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   1e902:	9b03      	ldr	r3, [sp, #12]
   1e904:	88da      	ldrh	r2, [r3, #6]
   1e906:	9b03      	ldr	r3, [sp, #12]
   1e908:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   1e90a:	9b03      	ldr	r3, [sp, #12]
   1e90c:	791a      	ldrb	r2, [r3, #4]
   1e90e:	9b03      	ldr	r3, [sp, #12]
   1e910:	70da      	strb	r2, [r3, #3]
}
   1e912:	bf00      	nop
   1e914:	b005      	add	sp, #20
   1e916:	f85d fb04 	ldr.w	pc, [sp], #4

0001e91a <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e91a:	b084      	sub	sp, #16
   1e91c:	9003      	str	r0, [sp, #12]
   1e91e:	9102      	str	r1, [sp, #8]
   1e920:	4613      	mov	r3, r2
   1e922:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   1e926:	9b02      	ldr	r3, [sp, #8]
   1e928:	1c5a      	adds	r2, r3, #1
   1e92a:	9202      	str	r2, [sp, #8]
   1e92c:	781a      	ldrb	r2, [r3, #0]
   1e92e:	9b03      	ldr	r3, [sp, #12]
   1e930:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   1e932:	9b02      	ldr	r3, [sp, #8]
   1e934:	781a      	ldrb	r2, [r3, #0]
   1e936:	9b03      	ldr	r3, [sp, #12]
   1e938:	715a      	strb	r2, [r3, #5]
   1e93a:	9b02      	ldr	r3, [sp, #8]
   1e93c:	3302      	adds	r3, #2
   1e93e:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   1e940:	9b02      	ldr	r3, [sp, #8]
   1e942:	1c5a      	adds	r2, r3, #1
   1e944:	9202      	str	r2, [sp, #8]
   1e946:	781b      	ldrb	r3, [r3, #0]
   1e948:	b25a      	sxtb	r2, r3
   1e94a:	9b03      	ldr	r3, [sp, #12]
   1e94c:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   1e94e:	9b03      	ldr	r3, [sp, #12]
   1e950:	795b      	ldrb	r3, [r3, #5]
   1e952:	b29a      	uxth	r2, r3
   1e954:	9b03      	ldr	r3, [sp, #12]
   1e956:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   1e958:	9b03      	ldr	r3, [sp, #12]
   1e95a:	791a      	ldrb	r2, [r3, #4]
   1e95c:	9b03      	ldr	r3, [sp, #12]
   1e95e:	70da      	strb	r2, [r3, #3]
}
   1e960:	bf00      	nop
   1e962:	b004      	add	sp, #16
   1e964:	4770      	bx	lr

0001e966 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1e966:	b084      	sub	sp, #16
   1e968:	9003      	str	r0, [sp, #12]
   1e96a:	9102      	str	r1, [sp, #8]
   1e96c:	4613      	mov	r3, r2
   1e96e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   1e972:	9b02      	ldr	r3, [sp, #8]
   1e974:	1c5a      	adds	r2, r3, #1
   1e976:	9202      	str	r2, [sp, #8]
   1e978:	781a      	ldrb	r2, [r3, #0]
   1e97a:	9b03      	ldr	r3, [sp, #12]
   1e97c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   1e97e:	9b02      	ldr	r3, [sp, #8]
   1e980:	781b      	ldrb	r3, [r3, #0]
   1e982:	b29a      	uxth	r2, r3
   1e984:	9b02      	ldr	r3, [sp, #8]
   1e986:	3301      	adds	r3, #1
   1e988:	781b      	ldrb	r3, [r3, #0]
   1e98a:	b29b      	uxth	r3, r3
   1e98c:	021b      	lsls	r3, r3, #8
   1e98e:	b29b      	uxth	r3, r3
   1e990:	4413      	add	r3, r2
   1e992:	b29a      	uxth	r2, r3
   1e994:	9b03      	ldr	r3, [sp, #12]
   1e996:	80da      	strh	r2, [r3, #6]
   1e998:	9b02      	ldr	r3, [sp, #8]
   1e99a:	3302      	adds	r3, #2
   1e99c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   1e99e:	9b02      	ldr	r3, [sp, #8]
   1e9a0:	1c5a      	adds	r2, r3, #1
   1e9a2:	9202      	str	r2, [sp, #8]
   1e9a4:	781a      	ldrb	r2, [r3, #0]
   1e9a6:	9b03      	ldr	r3, [sp, #12]
   1e9a8:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   1e9aa:	9b02      	ldr	r3, [sp, #8]
   1e9ac:	781b      	ldrb	r3, [r3, #0]
   1e9ae:	b29a      	uxth	r2, r3
   1e9b0:	9b02      	ldr	r3, [sp, #8]
   1e9b2:	3301      	adds	r3, #1
   1e9b4:	781b      	ldrb	r3, [r3, #0]
   1e9b6:	b29b      	uxth	r3, r3
   1e9b8:	021b      	lsls	r3, r3, #8
   1e9ba:	b29b      	uxth	r3, r3
   1e9bc:	4413      	add	r3, r2
   1e9be:	b29a      	uxth	r2, r3
   1e9c0:	9b03      	ldr	r3, [sp, #12]
   1e9c2:	815a      	strh	r2, [r3, #10]
   1e9c4:	9b02      	ldr	r3, [sp, #8]
   1e9c6:	3302      	adds	r3, #2
   1e9c8:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   1e9ca:	9b02      	ldr	r3, [sp, #8]
   1e9cc:	781b      	ldrb	r3, [r3, #0]
   1e9ce:	b29a      	uxth	r2, r3
   1e9d0:	9b02      	ldr	r3, [sp, #8]
   1e9d2:	3301      	adds	r3, #1
   1e9d4:	781b      	ldrb	r3, [r3, #0]
   1e9d6:	b29b      	uxth	r3, r3
   1e9d8:	021b      	lsls	r3, r3, #8
   1e9da:	b29b      	uxth	r3, r3
   1e9dc:	4413      	add	r3, r2
   1e9de:	b29a      	uxth	r2, r3
   1e9e0:	9b03      	ldr	r3, [sp, #12]
   1e9e2:	819a      	strh	r2, [r3, #12]
   1e9e4:	9b02      	ldr	r3, [sp, #8]
   1e9e6:	3302      	adds	r3, #2
   1e9e8:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   1e9ea:	9b03      	ldr	r3, [sp, #12]
   1e9ec:	88da      	ldrh	r2, [r3, #6]
   1e9ee:	9b03      	ldr	r3, [sp, #12]
   1e9f0:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   1e9f2:	9b03      	ldr	r3, [sp, #12]
   1e9f4:	791a      	ldrb	r2, [r3, #4]
   1e9f6:	9b03      	ldr	r3, [sp, #12]
   1e9f8:	70da      	strb	r2, [r3, #3]
}
   1e9fa:	bf00      	nop
   1e9fc:	b004      	add	sp, #16
   1e9fe:	4770      	bx	lr

0001ea00 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ea00:	b500      	push	{lr}
   1ea02:	b085      	sub	sp, #20
   1ea04:	9003      	str	r0, [sp, #12]
   1ea06:	9102      	str	r1, [sp, #8]
   1ea08:	4613      	mov	r3, r2
   1ea0a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   1ea0e:	9b02      	ldr	r3, [sp, #8]
   1ea10:	1c5a      	adds	r2, r3, #1
   1ea12:	9202      	str	r2, [sp, #8]
   1ea14:	781a      	ldrb	r2, [r3, #0]
   1ea16:	9b03      	ldr	r3, [sp, #12]
   1ea18:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   1ea1a:	9b02      	ldr	r3, [sp, #8]
   1ea1c:	781b      	ldrb	r3, [r3, #0]
   1ea1e:	b29a      	uxth	r2, r3
   1ea20:	9b02      	ldr	r3, [sp, #8]
   1ea22:	3301      	adds	r3, #1
   1ea24:	781b      	ldrb	r3, [r3, #0]
   1ea26:	b29b      	uxth	r3, r3
   1ea28:	021b      	lsls	r3, r3, #8
   1ea2a:	b29b      	uxth	r3, r3
   1ea2c:	4413      	add	r3, r2
   1ea2e:	b29a      	uxth	r2, r3
   1ea30:	9b03      	ldr	r3, [sp, #12]
   1ea32:	80da      	strh	r2, [r3, #6]
   1ea34:	9b02      	ldr	r3, [sp, #8]
   1ea36:	3302      	adds	r3, #2
   1ea38:	9302      	str	r3, [sp, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   1ea3a:	9b03      	ldr	r3, [sp, #12]
   1ea3c:	3308      	adds	r3, #8
   1ea3e:	2208      	movs	r2, #8
   1ea40:	9902      	ldr	r1, [sp, #8]
   1ea42:	4618      	mov	r0, r3
   1ea44:	f7ed fb8c 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   1ea48:	9b03      	ldr	r3, [sp, #12]
   1ea4a:	88da      	ldrh	r2, [r3, #6]
   1ea4c:	9b03      	ldr	r3, [sp, #12]
   1ea4e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   1ea50:	9b03      	ldr	r3, [sp, #12]
   1ea52:	791a      	ldrb	r2, [r3, #4]
   1ea54:	9b03      	ldr	r3, [sp, #12]
   1ea56:	70da      	strb	r2, [r3, #3]
}
   1ea58:	bf00      	nop
   1ea5a:	b005      	add	sp, #20
   1ea5c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ea60 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ea60:	b084      	sub	sp, #16
   1ea62:	9003      	str	r0, [sp, #12]
   1ea64:	9102      	str	r1, [sp, #8]
   1ea66:	4613      	mov	r3, r2
   1ea68:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   1ea6c:	9b02      	ldr	r3, [sp, #8]
   1ea6e:	1c5a      	adds	r2, r3, #1
   1ea70:	9202      	str	r2, [sp, #8]
   1ea72:	781a      	ldrb	r2, [r3, #0]
   1ea74:	9b03      	ldr	r3, [sp, #12]
   1ea76:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   1ea78:	9b02      	ldr	r3, [sp, #8]
   1ea7a:	781b      	ldrb	r3, [r3, #0]
   1ea7c:	b29a      	uxth	r2, r3
   1ea7e:	9b02      	ldr	r3, [sp, #8]
   1ea80:	3301      	adds	r3, #1
   1ea82:	781b      	ldrb	r3, [r3, #0]
   1ea84:	b29b      	uxth	r3, r3
   1ea86:	021b      	lsls	r3, r3, #8
   1ea88:	b29b      	uxth	r3, r3
   1ea8a:	4413      	add	r3, r2
   1ea8c:	b29a      	uxth	r2, r3
   1ea8e:	9b03      	ldr	r3, [sp, #12]
   1ea90:	80da      	strh	r2, [r3, #6]
   1ea92:	9b02      	ldr	r3, [sp, #8]
   1ea94:	3302      	adds	r3, #2
   1ea96:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   1ea98:	9b03      	ldr	r3, [sp, #12]
   1ea9a:	88da      	ldrh	r2, [r3, #6]
   1ea9c:	9b03      	ldr	r3, [sp, #12]
   1ea9e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   1eaa0:	9b03      	ldr	r3, [sp, #12]
   1eaa2:	791a      	ldrb	r2, [r3, #4]
   1eaa4:	9b03      	ldr	r3, [sp, #12]
   1eaa6:	70da      	strb	r2, [r3, #3]
}
   1eaa8:	bf00      	nop
   1eaaa:	b004      	add	sp, #16
   1eaac:	4770      	bx	lr

0001eaae <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1eaae:	b084      	sub	sp, #16
   1eab0:	9003      	str	r0, [sp, #12]
   1eab2:	9102      	str	r1, [sp, #8]
   1eab4:	4613      	mov	r3, r2
   1eab6:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   1eaba:	9b02      	ldr	r3, [sp, #8]
   1eabc:	1c5a      	adds	r2, r3, #1
   1eabe:	9202      	str	r2, [sp, #8]
   1eac0:	781a      	ldrb	r2, [r3, #0]
   1eac2:	9b03      	ldr	r3, [sp, #12]
   1eac4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   1eac6:	9b02      	ldr	r3, [sp, #8]
   1eac8:	781b      	ldrb	r3, [r3, #0]
   1eaca:	b29a      	uxth	r2, r3
   1eacc:	9b02      	ldr	r3, [sp, #8]
   1eace:	3301      	adds	r3, #1
   1ead0:	781b      	ldrb	r3, [r3, #0]
   1ead2:	b29b      	uxth	r3, r3
   1ead4:	021b      	lsls	r3, r3, #8
   1ead6:	b29b      	uxth	r3, r3
   1ead8:	4413      	add	r3, r2
   1eada:	b29a      	uxth	r2, r3
   1eadc:	9b03      	ldr	r3, [sp, #12]
   1eade:	80da      	strh	r2, [r3, #6]
   1eae0:	9b02      	ldr	r3, [sp, #8]
   1eae2:	3302      	adds	r3, #2
   1eae4:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   1eae6:	9b03      	ldr	r3, [sp, #12]
   1eae8:	88da      	ldrh	r2, [r3, #6]
   1eaea:	9b03      	ldr	r3, [sp, #12]
   1eaec:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   1eaee:	9b03      	ldr	r3, [sp, #12]
   1eaf0:	791a      	ldrb	r2, [r3, #4]
   1eaf2:	9b03      	ldr	r3, [sp, #12]
   1eaf4:	70da      	strb	r2, [r3, #3]
}
   1eaf6:	bf00      	nop
   1eaf8:	b004      	add	sp, #16
   1eafa:	4770      	bx	lr

0001eafc <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1eafc:	b084      	sub	sp, #16
   1eafe:	9003      	str	r0, [sp, #12]
   1eb00:	9102      	str	r1, [sp, #8]
   1eb02:	4613      	mov	r3, r2
   1eb04:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   1eb08:	9b02      	ldr	r3, [sp, #8]
   1eb0a:	1c5a      	adds	r2, r3, #1
   1eb0c:	9202      	str	r2, [sp, #8]
   1eb0e:	781a      	ldrb	r2, [r3, #0]
   1eb10:	9b03      	ldr	r3, [sp, #12]
   1eb12:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   1eb14:	9b02      	ldr	r3, [sp, #8]
   1eb16:	781b      	ldrb	r3, [r3, #0]
   1eb18:	b29a      	uxth	r2, r3
   1eb1a:	9b02      	ldr	r3, [sp, #8]
   1eb1c:	3301      	adds	r3, #1
   1eb1e:	781b      	ldrb	r3, [r3, #0]
   1eb20:	b29b      	uxth	r3, r3
   1eb22:	021b      	lsls	r3, r3, #8
   1eb24:	b29b      	uxth	r3, r3
   1eb26:	4413      	add	r3, r2
   1eb28:	b29a      	uxth	r2, r3
   1eb2a:	9b03      	ldr	r3, [sp, #12]
   1eb2c:	80da      	strh	r2, [r3, #6]
   1eb2e:	9b02      	ldr	r3, [sp, #8]
   1eb30:	3302      	adds	r3, #2
   1eb32:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   1eb34:	9b03      	ldr	r3, [sp, #12]
   1eb36:	88da      	ldrh	r2, [r3, #6]
   1eb38:	9b03      	ldr	r3, [sp, #12]
   1eb3a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   1eb3c:	9b03      	ldr	r3, [sp, #12]
   1eb3e:	791a      	ldrb	r2, [r3, #4]
   1eb40:	9b03      	ldr	r3, [sp, #12]
   1eb42:	70da      	strb	r2, [r3, #3]
}
   1eb44:	bf00      	nop
   1eb46:	b004      	add	sp, #16
   1eb48:	4770      	bx	lr

0001eb4a <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1eb4a:	b084      	sub	sp, #16
   1eb4c:	9003      	str	r0, [sp, #12]
   1eb4e:	9102      	str	r1, [sp, #8]
   1eb50:	4613      	mov	r3, r2
   1eb52:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   1eb56:	9b02      	ldr	r3, [sp, #8]
   1eb58:	1c5a      	adds	r2, r3, #1
   1eb5a:	9202      	str	r2, [sp, #8]
   1eb5c:	781a      	ldrb	r2, [r3, #0]
   1eb5e:	9b03      	ldr	r3, [sp, #12]
   1eb60:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   1eb62:	9b02      	ldr	r3, [sp, #8]
   1eb64:	781b      	ldrb	r3, [r3, #0]
   1eb66:	b29a      	uxth	r2, r3
   1eb68:	9b02      	ldr	r3, [sp, #8]
   1eb6a:	3301      	adds	r3, #1
   1eb6c:	781b      	ldrb	r3, [r3, #0]
   1eb6e:	b29b      	uxth	r3, r3
   1eb70:	021b      	lsls	r3, r3, #8
   1eb72:	b29b      	uxth	r3, r3
   1eb74:	4413      	add	r3, r2
   1eb76:	b29a      	uxth	r2, r3
   1eb78:	9b03      	ldr	r3, [sp, #12]
   1eb7a:	80da      	strh	r2, [r3, #6]
   1eb7c:	9b02      	ldr	r3, [sp, #8]
   1eb7e:	3302      	adds	r3, #2
   1eb80:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   1eb82:	9b02      	ldr	r3, [sp, #8]
   1eb84:	1c5a      	adds	r2, r3, #1
   1eb86:	9202      	str	r2, [sp, #8]
   1eb88:	781a      	ldrb	r2, [r3, #0]
   1eb8a:	9b03      	ldr	r3, [sp, #12]
   1eb8c:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   1eb8e:	9b03      	ldr	r3, [sp, #12]
   1eb90:	88da      	ldrh	r2, [r3, #6]
   1eb92:	9b03      	ldr	r3, [sp, #12]
   1eb94:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   1eb96:	9b03      	ldr	r3, [sp, #12]
   1eb98:	791a      	ldrb	r2, [r3, #4]
   1eb9a:	9b03      	ldr	r3, [sp, #12]
   1eb9c:	70da      	strb	r2, [r3, #3]
}
   1eb9e:	bf00      	nop
   1eba0:	b004      	add	sp, #16
   1eba2:	4770      	bx	lr

0001eba4 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1eba4:	b500      	push	{lr}
   1eba6:	b085      	sub	sp, #20
   1eba8:	9003      	str	r0, [sp, #12]
   1ebaa:	9102      	str	r1, [sp, #8]
   1ebac:	4613      	mov	r3, r2
   1ebae:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   1ebb2:	9b02      	ldr	r3, [sp, #8]
   1ebb4:	781b      	ldrb	r3, [r3, #0]
   1ebb6:	b29a      	uxth	r2, r3
   1ebb8:	9b02      	ldr	r3, [sp, #8]
   1ebba:	3301      	adds	r3, #1
   1ebbc:	781b      	ldrb	r3, [r3, #0]
   1ebbe:	b29b      	uxth	r3, r3
   1ebc0:	021b      	lsls	r3, r3, #8
   1ebc2:	b29b      	uxth	r3, r3
   1ebc4:	4413      	add	r3, r2
   1ebc6:	b29a      	uxth	r2, r3
   1ebc8:	9b03      	ldr	r3, [sp, #12]
   1ebca:	809a      	strh	r2, [r3, #4]
   1ebcc:	9b02      	ldr	r3, [sp, #8]
   1ebce:	3302      	adds	r3, #2
   1ebd0:	9302      	str	r3, [sp, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   1ebd2:	9b03      	ldr	r3, [sp, #12]
   1ebd4:	3306      	adds	r3, #6
   1ebd6:	2208      	movs	r2, #8
   1ebd8:	9902      	ldr	r1, [sp, #8]
   1ebda:	4618      	mov	r0, r3
   1ebdc:	f7ed fac0 	bl	c160 <memcpy>
  p += HCI_RAND_LEN;
   1ebe0:	9b02      	ldr	r3, [sp, #8]
   1ebe2:	3308      	adds	r3, #8
   1ebe4:	9302      	str	r3, [sp, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   1ebe6:	9b02      	ldr	r3, [sp, #8]
   1ebe8:	781b      	ldrb	r3, [r3, #0]
   1ebea:	b29a      	uxth	r2, r3
   1ebec:	9b02      	ldr	r3, [sp, #8]
   1ebee:	3301      	adds	r3, #1
   1ebf0:	781b      	ldrb	r3, [r3, #0]
   1ebf2:	b29b      	uxth	r3, r3
   1ebf4:	021b      	lsls	r3, r3, #8
   1ebf6:	b29b      	uxth	r3, r3
   1ebf8:	4413      	add	r3, r2
   1ebfa:	b29a      	uxth	r2, r3
   1ebfc:	9b03      	ldr	r3, [sp, #12]
   1ebfe:	81da      	strh	r2, [r3, #14]
   1ec00:	9b02      	ldr	r3, [sp, #8]
   1ec02:	3302      	adds	r3, #2
   1ec04:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   1ec06:	9b03      	ldr	r3, [sp, #12]
   1ec08:	889a      	ldrh	r2, [r3, #4]
   1ec0a:	9b03      	ldr	r3, [sp, #12]
   1ec0c:	801a      	strh	r2, [r3, #0]
}
   1ec0e:	bf00      	nop
   1ec10:	b005      	add	sp, #20
   1ec12:	f85d fb04 	ldr.w	pc, [sp], #4

0001ec16 <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ec16:	b084      	sub	sp, #16
   1ec18:	9003      	str	r0, [sp, #12]
   1ec1a:	9102      	str	r1, [sp, #8]
   1ec1c:	4613      	mov	r3, r2
   1ec1e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   1ec22:	9b02      	ldr	r3, [sp, #8]
   1ec24:	781b      	ldrb	r3, [r3, #0]
   1ec26:	b29a      	uxth	r2, r3
   1ec28:	9b02      	ldr	r3, [sp, #8]
   1ec2a:	3301      	adds	r3, #1
   1ec2c:	781b      	ldrb	r3, [r3, #0]
   1ec2e:	b29b      	uxth	r3, r3
   1ec30:	021b      	lsls	r3, r3, #8
   1ec32:	b29b      	uxth	r3, r3
   1ec34:	4413      	add	r3, r2
   1ec36:	b29a      	uxth	r2, r3
   1ec38:	9b03      	ldr	r3, [sp, #12]
   1ec3a:	809a      	strh	r2, [r3, #4]
   1ec3c:	9b02      	ldr	r3, [sp, #8]
   1ec3e:	3302      	adds	r3, #2
   1ec40:	9302      	str	r3, [sp, #8]
}
   1ec42:	bf00      	nop
   1ec44:	b004      	add	sp, #16
   1ec46:	4770      	bx	lr

0001ec48 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ec48:	b500      	push	{lr}
   1ec4a:	b085      	sub	sp, #20
   1ec4c:	9003      	str	r0, [sp, #12]
   1ec4e:	9102      	str	r1, [sp, #8]
   1ec50:	4613      	mov	r3, r2
   1ec52:	f88d 3007 	strb.w	r3, [sp, #7]
  /* roll pointer back to opcode */
  p -= 2;
   1ec56:	9b02      	ldr	r3, [sp, #8]
   1ec58:	3b02      	subs	r3, #2
   1ec5a:	9302      	str	r3, [sp, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   1ec5c:	9b02      	ldr	r3, [sp, #8]
   1ec5e:	781b      	ldrb	r3, [r3, #0]
   1ec60:	b29a      	uxth	r2, r3
   1ec62:	9b02      	ldr	r3, [sp, #8]
   1ec64:	3301      	adds	r3, #1
   1ec66:	781b      	ldrb	r3, [r3, #0]
   1ec68:	b29b      	uxth	r3, r3
   1ec6a:	021b      	lsls	r3, r3, #8
   1ec6c:	b29b      	uxth	r3, r3
   1ec6e:	4413      	add	r3, r2
   1ec70:	b29a      	uxth	r2, r3
   1ec72:	9b03      	ldr	r3, [sp, #12]
   1ec74:	809a      	strh	r2, [r3, #4]
   1ec76:	9b02      	ldr	r3, [sp, #8]
   1ec78:	3302      	adds	r3, #2
   1ec7a:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   1ec7c:	9b02      	ldr	r3, [sp, #8]
   1ec7e:	1c5a      	adds	r2, r3, #1
   1ec80:	9202      	str	r2, [sp, #8]
   1ec82:	781a      	ldrb	r2, [r3, #0]
   1ec84:	9b03      	ldr	r3, [sp, #12]
   1ec86:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   1ec88:	9b03      	ldr	r3, [sp, #12]
   1ec8a:	1d98      	adds	r0, r3, #6
   1ec8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ec90:	3b04      	subs	r3, #4
   1ec92:	461a      	mov	r2, r3
   1ec94:	9902      	ldr	r1, [sp, #8]
   1ec96:	f7ed fa63 	bl	c160 <memcpy>
}
   1ec9a:	bf00      	nop
   1ec9c:	b005      	add	sp, #20
   1ec9e:	f85d fb04 	ldr.w	pc, [sp], #4

0001eca2 <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1eca2:	b500      	push	{lr}
   1eca4:	b085      	sub	sp, #20
   1eca6:	9003      	str	r0, [sp, #12]
   1eca8:	9102      	str	r1, [sp, #8]
   1ecaa:	4613      	mov	r3, r2
   1ecac:	f88d 3007 	strb.w	r3, [sp, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   1ecb0:	9b03      	ldr	r3, [sp, #12]
   1ecb2:	3304      	adds	r3, #4
   1ecb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1ecb8:	9902      	ldr	r1, [sp, #8]
   1ecba:	4618      	mov	r0, r3
   1ecbc:	f7ed fa50 	bl	c160 <memcpy>
}
   1ecc0:	bf00      	nop
   1ecc2:	b005      	add	sp, #20
   1ecc4:	f85d fb04 	ldr.w	pc, [sp], #4

0001ecc8 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ecc8:	b084      	sub	sp, #16
   1ecca:	9003      	str	r0, [sp, #12]
   1eccc:	9102      	str	r1, [sp, #8]
   1ecce:	4613      	mov	r3, r2
   1ecd0:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   1ecd4:	9b02      	ldr	r3, [sp, #8]
   1ecd6:	1c5a      	adds	r2, r3, #1
   1ecd8:	9202      	str	r2, [sp, #8]
   1ecda:	781a      	ldrb	r2, [r3, #0]
   1ecdc:	9b03      	ldr	r3, [sp, #12]
   1ecde:	711a      	strb	r2, [r3, #4]
}
   1ece0:	bf00      	nop
   1ece2:	b004      	add	sp, #16
   1ece4:	4770      	bx	lr

0001ece6 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ece6:	b500      	push	{lr}
   1ece8:	b085      	sub	sp, #20
   1ecea:	9003      	str	r0, [sp, #12]
   1ecec:	9102      	str	r1, [sp, #8]
   1ecee:	4613      	mov	r3, r2
   1ecf0:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   1ecf4:	9b02      	ldr	r3, [sp, #8]
   1ecf6:	1c5a      	adds	r2, r3, #1
   1ecf8:	9202      	str	r2, [sp, #8]
   1ecfa:	781a      	ldrb	r2, [r3, #0]
   1ecfc:	9b03      	ldr	r3, [sp, #12]
   1ecfe:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   1ed00:	9b03      	ldr	r3, [sp, #12]
   1ed02:	3305      	adds	r3, #5
   1ed04:	2210      	movs	r2, #16
   1ed06:	9902      	ldr	r1, [sp, #8]
   1ed08:	4618      	mov	r0, r3
   1ed0a:	f7ed fa29 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   1ed0e:	9b03      	ldr	r3, [sp, #12]
   1ed10:	791a      	ldrb	r2, [r3, #4]
   1ed12:	9b03      	ldr	r3, [sp, #12]
   1ed14:	70da      	strb	r2, [r3, #3]
}
   1ed16:	bf00      	nop
   1ed18:	b005      	add	sp, #20
   1ed1a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ed1e <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ed1e:	b500      	push	{lr}
   1ed20:	b085      	sub	sp, #20
   1ed22:	9003      	str	r0, [sp, #12]
   1ed24:	9102      	str	r1, [sp, #8]
   1ed26:	4613      	mov	r3, r2
   1ed28:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   1ed2c:	9b02      	ldr	r3, [sp, #8]
   1ed2e:	1c5a      	adds	r2, r3, #1
   1ed30:	9202      	str	r2, [sp, #8]
   1ed32:	781a      	ldrb	r2, [r3, #0]
   1ed34:	9b03      	ldr	r3, [sp, #12]
   1ed36:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   1ed38:	9b03      	ldr	r3, [sp, #12]
   1ed3a:	3305      	adds	r3, #5
   1ed3c:	2208      	movs	r2, #8
   1ed3e:	9902      	ldr	r1, [sp, #8]
   1ed40:	4618      	mov	r0, r3
   1ed42:	f7ed fa0d 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   1ed46:	9b03      	ldr	r3, [sp, #12]
   1ed48:	791a      	ldrb	r2, [r3, #4]
   1ed4a:	9b03      	ldr	r3, [sp, #12]
   1ed4c:	70da      	strb	r2, [r3, #3]
}
   1ed4e:	bf00      	nop
   1ed50:	b005      	add	sp, #20
   1ed52:	f85d fb04 	ldr.w	pc, [sp], #4

0001ed56 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ed56:	b084      	sub	sp, #16
   1ed58:	9003      	str	r0, [sp, #12]
   1ed5a:	9102      	str	r1, [sp, #8]
   1ed5c:	4613      	mov	r3, r2
   1ed5e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   1ed62:	9b02      	ldr	r3, [sp, #8]
   1ed64:	1c5a      	adds	r2, r3, #1
   1ed66:	9202      	str	r2, [sp, #8]
   1ed68:	781a      	ldrb	r2, [r3, #0]
   1ed6a:	9b03      	ldr	r3, [sp, #12]
   1ed6c:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   1ed6e:	9b03      	ldr	r3, [sp, #12]
   1ed70:	791a      	ldrb	r2, [r3, #4]
   1ed72:	9b03      	ldr	r3, [sp, #12]
   1ed74:	70da      	strb	r2, [r3, #3]
}
   1ed76:	bf00      	nop
   1ed78:	b004      	add	sp, #16
   1ed7a:	4770      	bx	lr

0001ed7c <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ed7c:	b084      	sub	sp, #16
   1ed7e:	9003      	str	r0, [sp, #12]
   1ed80:	9102      	str	r1, [sp, #8]
   1ed82:	4613      	mov	r3, r2
   1ed84:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   1ed88:	9b02      	ldr	r3, [sp, #8]
   1ed8a:	1c5a      	adds	r2, r3, #1
   1ed8c:	9202      	str	r2, [sp, #8]
   1ed8e:	781a      	ldrb	r2, [r3, #0]
   1ed90:	9b03      	ldr	r3, [sp, #12]
   1ed92:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   1ed94:	9b03      	ldr	r3, [sp, #12]
   1ed96:	791a      	ldrb	r2, [r3, #4]
   1ed98:	9b03      	ldr	r3, [sp, #12]
   1ed9a:	70da      	strb	r2, [r3, #3]
}
   1ed9c:	bf00      	nop
   1ed9e:	b004      	add	sp, #16
   1eda0:	4770      	bx	lr

0001eda2 <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1eda2:	b084      	sub	sp, #16
   1eda4:	9003      	str	r0, [sp, #12]
   1eda6:	9102      	str	r1, [sp, #8]
   1eda8:	4613      	mov	r3, r2
   1edaa:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   1edae:	9b02      	ldr	r3, [sp, #8]
   1edb0:	1c5a      	adds	r2, r3, #1
   1edb2:	9202      	str	r2, [sp, #8]
   1edb4:	781a      	ldrb	r2, [r3, #0]
   1edb6:	9b03      	ldr	r3, [sp, #12]
   1edb8:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   1edba:	9b03      	ldr	r3, [sp, #12]
   1edbc:	791a      	ldrb	r2, [r3, #4]
   1edbe:	9b03      	ldr	r3, [sp, #12]
   1edc0:	70da      	strb	r2, [r3, #3]
}
   1edc2:	bf00      	nop
   1edc4:	b004      	add	sp, #16
   1edc6:	4770      	bx	lr

0001edc8 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1edc8:	b500      	push	{lr}
   1edca:	b085      	sub	sp, #20
   1edcc:	9003      	str	r0, [sp, #12]
   1edce:	9102      	str	r1, [sp, #8]
   1edd0:	4613      	mov	r3, r2
   1edd2:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   1edd6:	9b02      	ldr	r3, [sp, #8]
   1edd8:	1c5a      	adds	r2, r3, #1
   1edda:	9202      	str	r2, [sp, #8]
   1eddc:	781a      	ldrb	r2, [r3, #0]
   1edde:	9b03      	ldr	r3, [sp, #12]
   1ede0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   1ede2:	9b03      	ldr	r3, [sp, #12]
   1ede4:	3305      	adds	r3, #5
   1ede6:	9902      	ldr	r1, [sp, #8]
   1ede8:	4618      	mov	r0, r3
   1edea:	f7fc fa6d 	bl	1b2c8 <BdaCpy>
   1edee:	9b02      	ldr	r3, [sp, #8]
   1edf0:	3306      	adds	r3, #6
   1edf2:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   1edf4:	9b03      	ldr	r3, [sp, #12]
   1edf6:	791a      	ldrb	r2, [r3, #4]
   1edf8:	9b03      	ldr	r3, [sp, #12]
   1edfa:	70da      	strb	r2, [r3, #3]
}
   1edfc:	bf00      	nop
   1edfe:	b005      	add	sp, #20
   1ee00:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee04 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ee04:	b500      	push	{lr}
   1ee06:	b085      	sub	sp, #20
   1ee08:	9003      	str	r0, [sp, #12]
   1ee0a:	9102      	str	r1, [sp, #8]
   1ee0c:	4613      	mov	r3, r2
   1ee0e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   1ee12:	9b02      	ldr	r3, [sp, #8]
   1ee14:	1c5a      	adds	r2, r3, #1
   1ee16:	9202      	str	r2, [sp, #8]
   1ee18:	781a      	ldrb	r2, [r3, #0]
   1ee1a:	9b03      	ldr	r3, [sp, #12]
   1ee1c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   1ee1e:	9b03      	ldr	r3, [sp, #12]
   1ee20:	3305      	adds	r3, #5
   1ee22:	9902      	ldr	r1, [sp, #8]
   1ee24:	4618      	mov	r0, r3
   1ee26:	f7fc fa4f 	bl	1b2c8 <BdaCpy>
   1ee2a:	9b02      	ldr	r3, [sp, #8]
   1ee2c:	3306      	adds	r3, #6
   1ee2e:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   1ee30:	9b03      	ldr	r3, [sp, #12]
   1ee32:	791a      	ldrb	r2, [r3, #4]
   1ee34:	9b03      	ldr	r3, [sp, #12]
   1ee36:	70da      	strb	r2, [r3, #3]
}
   1ee38:	bf00      	nop
   1ee3a:	b005      	add	sp, #20
   1ee3c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee40 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ee40:	b084      	sub	sp, #16
   1ee42:	9003      	str	r0, [sp, #12]
   1ee44:	9102      	str	r1, [sp, #8]
   1ee46:	4613      	mov	r3, r2
   1ee48:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   1ee4c:	9b02      	ldr	r3, [sp, #8]
   1ee4e:	1c5a      	adds	r2, r3, #1
   1ee50:	9202      	str	r2, [sp, #8]
   1ee52:	781a      	ldrb	r2, [r3, #0]
   1ee54:	9b03      	ldr	r3, [sp, #12]
   1ee56:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   1ee58:	9b03      	ldr	r3, [sp, #12]
   1ee5a:	791a      	ldrb	r2, [r3, #4]
   1ee5c:	9b03      	ldr	r3, [sp, #12]
   1ee5e:	70da      	strb	r2, [r3, #3]
}
   1ee60:	bf00      	nop
   1ee62:	b004      	add	sp, #16
   1ee64:	4770      	bx	lr

0001ee66 <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ee66:	b084      	sub	sp, #16
   1ee68:	9003      	str	r0, [sp, #12]
   1ee6a:	9102      	str	r1, [sp, #8]
   1ee6c:	4613      	mov	r3, r2
   1ee6e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   1ee72:	9b02      	ldr	r3, [sp, #8]
   1ee74:	1c5a      	adds	r2, r3, #1
   1ee76:	9202      	str	r2, [sp, #8]
   1ee78:	781a      	ldrb	r2, [r3, #0]
   1ee7a:	9b03      	ldr	r3, [sp, #12]
   1ee7c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   1ee7e:	9b02      	ldr	r3, [sp, #8]
   1ee80:	781b      	ldrb	r3, [r3, #0]
   1ee82:	b29a      	uxth	r2, r3
   1ee84:	9b02      	ldr	r3, [sp, #8]
   1ee86:	3301      	adds	r3, #1
   1ee88:	781b      	ldrb	r3, [r3, #0]
   1ee8a:	b29b      	uxth	r3, r3
   1ee8c:	021b      	lsls	r3, r3, #8
   1ee8e:	b29b      	uxth	r3, r3
   1ee90:	4413      	add	r3, r2
   1ee92:	b29a      	uxth	r2, r3
   1ee94:	9b03      	ldr	r3, [sp, #12]
   1ee96:	80da      	strh	r2, [r3, #6]
   1ee98:	9b02      	ldr	r3, [sp, #8]
   1ee9a:	3302      	adds	r3, #2
   1ee9c:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   1ee9e:	9b03      	ldr	r3, [sp, #12]
   1eea0:	791a      	ldrb	r2, [r3, #4]
   1eea2:	9b03      	ldr	r3, [sp, #12]
   1eea4:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   1eea6:	9b03      	ldr	r3, [sp, #12]
   1eea8:	88da      	ldrh	r2, [r3, #6]
   1eeaa:	9b03      	ldr	r3, [sp, #12]
   1eeac:	801a      	strh	r2, [r3, #0]
}
   1eeae:	bf00      	nop
   1eeb0:	b004      	add	sp, #16
   1eeb2:	4770      	bx	lr

0001eeb4 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1eeb4:	b084      	sub	sp, #16
   1eeb6:	9003      	str	r0, [sp, #12]
   1eeb8:	9102      	str	r1, [sp, #8]
   1eeba:	4613      	mov	r3, r2
   1eebc:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   1eec0:	9b02      	ldr	r3, [sp, #8]
   1eec2:	1c5a      	adds	r2, r3, #1
   1eec4:	9202      	str	r2, [sp, #8]
   1eec6:	781a      	ldrb	r2, [r3, #0]
   1eec8:	9b03      	ldr	r3, [sp, #12]
   1eeca:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   1eecc:	9b02      	ldr	r3, [sp, #8]
   1eece:	781b      	ldrb	r3, [r3, #0]
   1eed0:	b29a      	uxth	r2, r3
   1eed2:	9b02      	ldr	r3, [sp, #8]
   1eed4:	3301      	adds	r3, #1
   1eed6:	781b      	ldrb	r3, [r3, #0]
   1eed8:	b29b      	uxth	r3, r3
   1eeda:	021b      	lsls	r3, r3, #8
   1eedc:	b29b      	uxth	r3, r3
   1eede:	4413      	add	r3, r2
   1eee0:	b29a      	uxth	r2, r3
   1eee2:	9b03      	ldr	r3, [sp, #12]
   1eee4:	80da      	strh	r2, [r3, #6]
   1eee6:	9b02      	ldr	r3, [sp, #8]
   1eee8:	3302      	adds	r3, #2
   1eeea:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   1eeec:	9b03      	ldr	r3, [sp, #12]
   1eeee:	791a      	ldrb	r2, [r3, #4]
   1eef0:	9b03      	ldr	r3, [sp, #12]
   1eef2:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   1eef4:	9b03      	ldr	r3, [sp, #12]
   1eef6:	88da      	ldrh	r2, [r3, #6]
   1eef8:	9b03      	ldr	r3, [sp, #12]
   1eefa:	801a      	strh	r2, [r3, #0]
}
   1eefc:	bf00      	nop
   1eefe:	b004      	add	sp, #16
   1ef00:	4770      	bx	lr

0001ef02 <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ef02:	b084      	sub	sp, #16
   1ef04:	9003      	str	r0, [sp, #12]
   1ef06:	9102      	str	r1, [sp, #8]
   1ef08:	4613      	mov	r3, r2
   1ef0a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   1ef0e:	9b02      	ldr	r3, [sp, #8]
   1ef10:	1c5a      	adds	r2, r3, #1
   1ef12:	9202      	str	r2, [sp, #8]
   1ef14:	781a      	ldrb	r2, [r3, #0]
   1ef16:	9b03      	ldr	r3, [sp, #12]
   1ef18:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   1ef1a:	9b02      	ldr	r3, [sp, #8]
   1ef1c:	781b      	ldrb	r3, [r3, #0]
   1ef1e:	b29a      	uxth	r2, r3
   1ef20:	9b02      	ldr	r3, [sp, #8]
   1ef22:	3301      	adds	r3, #1
   1ef24:	781b      	ldrb	r3, [r3, #0]
   1ef26:	b29b      	uxth	r3, r3
   1ef28:	021b      	lsls	r3, r3, #8
   1ef2a:	b29b      	uxth	r3, r3
   1ef2c:	4413      	add	r3, r2
   1ef2e:	b29a      	uxth	r2, r3
   1ef30:	9b03      	ldr	r3, [sp, #12]
   1ef32:	80da      	strh	r2, [r3, #6]
   1ef34:	9b02      	ldr	r3, [sp, #8]
   1ef36:	3302      	adds	r3, #2
   1ef38:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   1ef3a:	9b02      	ldr	r3, [sp, #8]
   1ef3c:	781b      	ldrb	r3, [r3, #0]
   1ef3e:	b29a      	uxth	r2, r3
   1ef40:	9b02      	ldr	r3, [sp, #8]
   1ef42:	3301      	adds	r3, #1
   1ef44:	781b      	ldrb	r3, [r3, #0]
   1ef46:	b29b      	uxth	r3, r3
   1ef48:	021b      	lsls	r3, r3, #8
   1ef4a:	b29b      	uxth	r3, r3
   1ef4c:	4413      	add	r3, r2
   1ef4e:	b29a      	uxth	r2, r3
   1ef50:	9b03      	ldr	r3, [sp, #12]
   1ef52:	811a      	strh	r2, [r3, #8]
   1ef54:	9b02      	ldr	r3, [sp, #8]
   1ef56:	3302      	adds	r3, #2
   1ef58:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   1ef5a:	9b03      	ldr	r3, [sp, #12]
   1ef5c:	791a      	ldrb	r2, [r3, #4]
   1ef5e:	9b03      	ldr	r3, [sp, #12]
   1ef60:	70da      	strb	r2, [r3, #3]
}
   1ef62:	bf00      	nop
   1ef64:	b004      	add	sp, #16
   1ef66:	4770      	bx	lr

0001ef68 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ef68:	b084      	sub	sp, #16
   1ef6a:	9003      	str	r0, [sp, #12]
   1ef6c:	9102      	str	r1, [sp, #8]
   1ef6e:	4613      	mov	r3, r2
   1ef70:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   1ef74:	9b02      	ldr	r3, [sp, #8]
   1ef76:	1c5a      	adds	r2, r3, #1
   1ef78:	9202      	str	r2, [sp, #8]
   1ef7a:	781a      	ldrb	r2, [r3, #0]
   1ef7c:	9b03      	ldr	r3, [sp, #12]
   1ef7e:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   1ef80:	9b03      	ldr	r3, [sp, #12]
   1ef82:	791a      	ldrb	r2, [r3, #4]
   1ef84:	9b03      	ldr	r3, [sp, #12]
   1ef86:	70da      	strb	r2, [r3, #3]
}
   1ef88:	bf00      	nop
   1ef8a:	b004      	add	sp, #16
   1ef8c:	4770      	bx	lr

0001ef8e <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ef8e:	b084      	sub	sp, #16
   1ef90:	9003      	str	r0, [sp, #12]
   1ef92:	9102      	str	r1, [sp, #8]
   1ef94:	4613      	mov	r3, r2
   1ef96:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   1ef9a:	9b02      	ldr	r3, [sp, #8]
   1ef9c:	1c5a      	adds	r2, r3, #1
   1ef9e:	9202      	str	r2, [sp, #8]
   1efa0:	781a      	ldrb	r2, [r3, #0]
   1efa2:	9b03      	ldr	r3, [sp, #12]
   1efa4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   1efa6:	9b02      	ldr	r3, [sp, #8]
   1efa8:	781b      	ldrb	r3, [r3, #0]
   1efaa:	b29a      	uxth	r2, r3
   1efac:	9b02      	ldr	r3, [sp, #8]
   1efae:	3301      	adds	r3, #1
   1efb0:	781b      	ldrb	r3, [r3, #0]
   1efb2:	b29b      	uxth	r3, r3
   1efb4:	021b      	lsls	r3, r3, #8
   1efb6:	b29b      	uxth	r3, r3
   1efb8:	4413      	add	r3, r2
   1efba:	b29a      	uxth	r2, r3
   1efbc:	9b03      	ldr	r3, [sp, #12]
   1efbe:	80da      	strh	r2, [r3, #6]
   1efc0:	9b02      	ldr	r3, [sp, #8]
   1efc2:	3302      	adds	r3, #2
   1efc4:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   1efc6:	9b03      	ldr	r3, [sp, #12]
   1efc8:	791a      	ldrb	r2, [r3, #4]
   1efca:	9b03      	ldr	r3, [sp, #12]
   1efcc:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   1efce:	9b03      	ldr	r3, [sp, #12]
   1efd0:	88da      	ldrh	r2, [r3, #6]
   1efd2:	9b03      	ldr	r3, [sp, #12]
   1efd4:	801a      	strh	r2, [r3, #0]
}
   1efd6:	bf00      	nop
   1efd8:	b004      	add	sp, #16
   1efda:	4770      	bx	lr

0001efdc <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1efdc:	b084      	sub	sp, #16
   1efde:	9003      	str	r0, [sp, #12]
   1efe0:	9102      	str	r1, [sp, #8]
   1efe2:	4613      	mov	r3, r2
   1efe4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   1efe8:	9b02      	ldr	r3, [sp, #8]
   1efea:	1c5a      	adds	r2, r3, #1
   1efec:	9202      	str	r2, [sp, #8]
   1efee:	781a      	ldrb	r2, [r3, #0]
   1eff0:	9b03      	ldr	r3, [sp, #12]
   1eff2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   1eff4:	9b02      	ldr	r3, [sp, #8]
   1eff6:	781b      	ldrb	r3, [r3, #0]
   1eff8:	b29a      	uxth	r2, r3
   1effa:	9b02      	ldr	r3, [sp, #8]
   1effc:	3301      	adds	r3, #1
   1effe:	781b      	ldrb	r3, [r3, #0]
   1f000:	b29b      	uxth	r3, r3
   1f002:	021b      	lsls	r3, r3, #8
   1f004:	b29b      	uxth	r3, r3
   1f006:	4413      	add	r3, r2
   1f008:	b29a      	uxth	r2, r3
   1f00a:	9b03      	ldr	r3, [sp, #12]
   1f00c:	80da      	strh	r2, [r3, #6]
   1f00e:	9b02      	ldr	r3, [sp, #8]
   1f010:	3302      	adds	r3, #2
   1f012:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   1f014:	9b02      	ldr	r3, [sp, #8]
   1f016:	781b      	ldrb	r3, [r3, #0]
   1f018:	b29a      	uxth	r2, r3
   1f01a:	9b02      	ldr	r3, [sp, #8]
   1f01c:	3301      	adds	r3, #1
   1f01e:	781b      	ldrb	r3, [r3, #0]
   1f020:	b29b      	uxth	r3, r3
   1f022:	021b      	lsls	r3, r3, #8
   1f024:	b29b      	uxth	r3, r3
   1f026:	4413      	add	r3, r2
   1f028:	b29a      	uxth	r2, r3
   1f02a:	9b03      	ldr	r3, [sp, #12]
   1f02c:	811a      	strh	r2, [r3, #8]
   1f02e:	9b02      	ldr	r3, [sp, #8]
   1f030:	3302      	adds	r3, #2
   1f032:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   1f034:	9b02      	ldr	r3, [sp, #8]
   1f036:	781b      	ldrb	r3, [r3, #0]
   1f038:	b29a      	uxth	r2, r3
   1f03a:	9b02      	ldr	r3, [sp, #8]
   1f03c:	3301      	adds	r3, #1
   1f03e:	781b      	ldrb	r3, [r3, #0]
   1f040:	b29b      	uxth	r3, r3
   1f042:	021b      	lsls	r3, r3, #8
   1f044:	b29b      	uxth	r3, r3
   1f046:	4413      	add	r3, r2
   1f048:	b29a      	uxth	r2, r3
   1f04a:	9b03      	ldr	r3, [sp, #12]
   1f04c:	815a      	strh	r2, [r3, #10]
   1f04e:	9b02      	ldr	r3, [sp, #8]
   1f050:	3302      	adds	r3, #2
   1f052:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   1f054:	9b02      	ldr	r3, [sp, #8]
   1f056:	781b      	ldrb	r3, [r3, #0]
   1f058:	b29a      	uxth	r2, r3
   1f05a:	9b02      	ldr	r3, [sp, #8]
   1f05c:	3301      	adds	r3, #1
   1f05e:	781b      	ldrb	r3, [r3, #0]
   1f060:	b29b      	uxth	r3, r3
   1f062:	021b      	lsls	r3, r3, #8
   1f064:	b29b      	uxth	r3, r3
   1f066:	4413      	add	r3, r2
   1f068:	b29a      	uxth	r2, r3
   1f06a:	9b03      	ldr	r3, [sp, #12]
   1f06c:	819a      	strh	r2, [r3, #12]
   1f06e:	9b02      	ldr	r3, [sp, #8]
   1f070:	3302      	adds	r3, #2
   1f072:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   1f074:	9b03      	ldr	r3, [sp, #12]
   1f076:	791a      	ldrb	r2, [r3, #4]
   1f078:	9b03      	ldr	r3, [sp, #12]
   1f07a:	70da      	strb	r2, [r3, #3]
}
   1f07c:	bf00      	nop
   1f07e:	b004      	add	sp, #16
   1f080:	4770      	bx	lr

0001f082 <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f082:	b084      	sub	sp, #16
   1f084:	9003      	str	r0, [sp, #12]
   1f086:	9102      	str	r1, [sp, #8]
   1f088:	4613      	mov	r3, r2
   1f08a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   1f08e:	9b02      	ldr	r3, [sp, #8]
   1f090:	781b      	ldrb	r3, [r3, #0]
   1f092:	b29a      	uxth	r2, r3
   1f094:	9b02      	ldr	r3, [sp, #8]
   1f096:	3301      	adds	r3, #1
   1f098:	781b      	ldrb	r3, [r3, #0]
   1f09a:	b29b      	uxth	r3, r3
   1f09c:	021b      	lsls	r3, r3, #8
   1f09e:	b29b      	uxth	r3, r3
   1f0a0:	4413      	add	r3, r2
   1f0a2:	b29a      	uxth	r2, r3
   1f0a4:	9b03      	ldr	r3, [sp, #12]
   1f0a6:	809a      	strh	r2, [r3, #4]
   1f0a8:	9b02      	ldr	r3, [sp, #8]
   1f0aa:	3302      	adds	r3, #2
   1f0ac:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   1f0ae:	9b02      	ldr	r3, [sp, #8]
   1f0b0:	781b      	ldrb	r3, [r3, #0]
   1f0b2:	b29a      	uxth	r2, r3
   1f0b4:	9b02      	ldr	r3, [sp, #8]
   1f0b6:	3301      	adds	r3, #1
   1f0b8:	781b      	ldrb	r3, [r3, #0]
   1f0ba:	b29b      	uxth	r3, r3
   1f0bc:	021b      	lsls	r3, r3, #8
   1f0be:	b29b      	uxth	r3, r3
   1f0c0:	4413      	add	r3, r2
   1f0c2:	b29a      	uxth	r2, r3
   1f0c4:	9b03      	ldr	r3, [sp, #12]
   1f0c6:	80da      	strh	r2, [r3, #6]
   1f0c8:	9b02      	ldr	r3, [sp, #8]
   1f0ca:	3302      	adds	r3, #2
   1f0cc:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   1f0ce:	9b02      	ldr	r3, [sp, #8]
   1f0d0:	781b      	ldrb	r3, [r3, #0]
   1f0d2:	b29a      	uxth	r2, r3
   1f0d4:	9b02      	ldr	r3, [sp, #8]
   1f0d6:	3301      	adds	r3, #1
   1f0d8:	781b      	ldrb	r3, [r3, #0]
   1f0da:	b29b      	uxth	r3, r3
   1f0dc:	021b      	lsls	r3, r3, #8
   1f0de:	b29b      	uxth	r3, r3
   1f0e0:	4413      	add	r3, r2
   1f0e2:	b29a      	uxth	r2, r3
   1f0e4:	9b03      	ldr	r3, [sp, #12]
   1f0e6:	811a      	strh	r2, [r3, #8]
   1f0e8:	9b02      	ldr	r3, [sp, #8]
   1f0ea:	3302      	adds	r3, #2
   1f0ec:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   1f0ee:	9b02      	ldr	r3, [sp, #8]
   1f0f0:	781b      	ldrb	r3, [r3, #0]
   1f0f2:	b29a      	uxth	r2, r3
   1f0f4:	9b02      	ldr	r3, [sp, #8]
   1f0f6:	3301      	adds	r3, #1
   1f0f8:	781b      	ldrb	r3, [r3, #0]
   1f0fa:	b29b      	uxth	r3, r3
   1f0fc:	021b      	lsls	r3, r3, #8
   1f0fe:	b29b      	uxth	r3, r3
   1f100:	4413      	add	r3, r2
   1f102:	b29a      	uxth	r2, r3
   1f104:	9b03      	ldr	r3, [sp, #12]
   1f106:	815a      	strh	r2, [r3, #10]
   1f108:	9b02      	ldr	r3, [sp, #8]
   1f10a:	3302      	adds	r3, #2
   1f10c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   1f10e:	9b02      	ldr	r3, [sp, #8]
   1f110:	781b      	ldrb	r3, [r3, #0]
   1f112:	b29a      	uxth	r2, r3
   1f114:	9b02      	ldr	r3, [sp, #8]
   1f116:	3301      	adds	r3, #1
   1f118:	781b      	ldrb	r3, [r3, #0]
   1f11a:	b29b      	uxth	r3, r3
   1f11c:	021b      	lsls	r3, r3, #8
   1f11e:	b29b      	uxth	r3, r3
   1f120:	4413      	add	r3, r2
   1f122:	b29a      	uxth	r2, r3
   1f124:	9b03      	ldr	r3, [sp, #12]
   1f126:	819a      	strh	r2, [r3, #12]
   1f128:	9b02      	ldr	r3, [sp, #8]
   1f12a:	3302      	adds	r3, #2
   1f12c:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   1f12e:	9b03      	ldr	r3, [sp, #12]
   1f130:	889a      	ldrh	r2, [r3, #4]
   1f132:	9b03      	ldr	r3, [sp, #12]
   1f134:	801a      	strh	r2, [r3, #0]
}
   1f136:	bf00      	nop
   1f138:	b004      	add	sp, #16
   1f13a:	4770      	bx	lr

0001f13c <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f13c:	b084      	sub	sp, #16
   1f13e:	9003      	str	r0, [sp, #12]
   1f140:	9102      	str	r1, [sp, #8]
   1f142:	4613      	mov	r3, r2
   1f144:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   1f148:	9b02      	ldr	r3, [sp, #8]
   1f14a:	781b      	ldrb	r3, [r3, #0]
   1f14c:	b29a      	uxth	r2, r3
   1f14e:	9b02      	ldr	r3, [sp, #8]
   1f150:	3301      	adds	r3, #1
   1f152:	781b      	ldrb	r3, [r3, #0]
   1f154:	b29b      	uxth	r3, r3
   1f156:	021b      	lsls	r3, r3, #8
   1f158:	b29b      	uxth	r3, r3
   1f15a:	4413      	add	r3, r2
   1f15c:	b29a      	uxth	r2, r3
   1f15e:	9b03      	ldr	r3, [sp, #12]
   1f160:	809a      	strh	r2, [r3, #4]
   1f162:	9b02      	ldr	r3, [sp, #8]
   1f164:	3302      	adds	r3, #2
   1f166:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   1f168:	9b02      	ldr	r3, [sp, #8]
   1f16a:	781b      	ldrb	r3, [r3, #0]
   1f16c:	b29a      	uxth	r2, r3
   1f16e:	9b02      	ldr	r3, [sp, #8]
   1f170:	3301      	adds	r3, #1
   1f172:	781b      	ldrb	r3, [r3, #0]
   1f174:	b29b      	uxth	r3, r3
   1f176:	021b      	lsls	r3, r3, #8
   1f178:	b29b      	uxth	r3, r3
   1f17a:	4413      	add	r3, r2
   1f17c:	b29a      	uxth	r2, r3
   1f17e:	9b03      	ldr	r3, [sp, #12]
   1f180:	80da      	strh	r2, [r3, #6]
   1f182:	9b02      	ldr	r3, [sp, #8]
   1f184:	3302      	adds	r3, #2
   1f186:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   1f188:	9b02      	ldr	r3, [sp, #8]
   1f18a:	781b      	ldrb	r3, [r3, #0]
   1f18c:	b29a      	uxth	r2, r3
   1f18e:	9b02      	ldr	r3, [sp, #8]
   1f190:	3301      	adds	r3, #1
   1f192:	781b      	ldrb	r3, [r3, #0]
   1f194:	b29b      	uxth	r3, r3
   1f196:	021b      	lsls	r3, r3, #8
   1f198:	b29b      	uxth	r3, r3
   1f19a:	4413      	add	r3, r2
   1f19c:	b29a      	uxth	r2, r3
   1f19e:	9b03      	ldr	r3, [sp, #12]
   1f1a0:	811a      	strh	r2, [r3, #8]
   1f1a2:	9b02      	ldr	r3, [sp, #8]
   1f1a4:	3302      	adds	r3, #2
   1f1a6:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   1f1a8:	9b02      	ldr	r3, [sp, #8]
   1f1aa:	781b      	ldrb	r3, [r3, #0]
   1f1ac:	b29a      	uxth	r2, r3
   1f1ae:	9b02      	ldr	r3, [sp, #8]
   1f1b0:	3301      	adds	r3, #1
   1f1b2:	781b      	ldrb	r3, [r3, #0]
   1f1b4:	b29b      	uxth	r3, r3
   1f1b6:	021b      	lsls	r3, r3, #8
   1f1b8:	b29b      	uxth	r3, r3
   1f1ba:	4413      	add	r3, r2
   1f1bc:	b29a      	uxth	r2, r3
   1f1be:	9b03      	ldr	r3, [sp, #12]
   1f1c0:	815a      	strh	r2, [r3, #10]
   1f1c2:	9b02      	ldr	r3, [sp, #8]
   1f1c4:	3302      	adds	r3, #2
   1f1c6:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   1f1c8:	9b02      	ldr	r3, [sp, #8]
   1f1ca:	781b      	ldrb	r3, [r3, #0]
   1f1cc:	b29a      	uxth	r2, r3
   1f1ce:	9b02      	ldr	r3, [sp, #8]
   1f1d0:	3301      	adds	r3, #1
   1f1d2:	781b      	ldrb	r3, [r3, #0]
   1f1d4:	b29b      	uxth	r3, r3
   1f1d6:	021b      	lsls	r3, r3, #8
   1f1d8:	b29b      	uxth	r3, r3
   1f1da:	4413      	add	r3, r2
   1f1dc:	b29a      	uxth	r2, r3
   1f1de:	9b03      	ldr	r3, [sp, #12]
   1f1e0:	819a      	strh	r2, [r3, #12]
   1f1e2:	9b02      	ldr	r3, [sp, #8]
   1f1e4:	3302      	adds	r3, #2
   1f1e6:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   1f1e8:	9b03      	ldr	r3, [sp, #12]
   1f1ea:	889a      	ldrh	r2, [r3, #4]
   1f1ec:	9b03      	ldr	r3, [sp, #12]
   1f1ee:	801a      	strh	r2, [r3, #0]
}
   1f1f0:	bf00      	nop
   1f1f2:	b004      	add	sp, #16
   1f1f4:	4770      	bx	lr

0001f1f6 <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f1f6:	b500      	push	{lr}
   1f1f8:	b085      	sub	sp, #20
   1f1fa:	9003      	str	r0, [sp, #12]
   1f1fc:	9102      	str	r1, [sp, #8]
   1f1fe:	4613      	mov	r3, r2
   1f200:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   1f204:	9b02      	ldr	r3, [sp, #8]
   1f206:	1c5a      	adds	r2, r3, #1
   1f208:	9202      	str	r2, [sp, #8]
   1f20a:	781a      	ldrb	r2, [r3, #0]
   1f20c:	9b03      	ldr	r3, [sp, #12]
   1f20e:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   1f210:	9b03      	ldr	r3, [sp, #12]
   1f212:	3305      	adds	r3, #5
   1f214:	2240      	movs	r2, #64	; 0x40
   1f216:	9902      	ldr	r1, [sp, #8]
   1f218:	4618      	mov	r0, r3
   1f21a:	f7ec ffa1 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   1f21e:	9b03      	ldr	r3, [sp, #12]
   1f220:	791a      	ldrb	r2, [r3, #4]
   1f222:	9b03      	ldr	r3, [sp, #12]
   1f224:	70da      	strb	r2, [r3, #3]
}
   1f226:	bf00      	nop
   1f228:	b005      	add	sp, #20
   1f22a:	f85d fb04 	ldr.w	pc, [sp], #4

0001f22e <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f22e:	b500      	push	{lr}
   1f230:	b085      	sub	sp, #20
   1f232:	9003      	str	r0, [sp, #12]
   1f234:	9102      	str	r1, [sp, #8]
   1f236:	4613      	mov	r3, r2
   1f238:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   1f23c:	9b02      	ldr	r3, [sp, #8]
   1f23e:	1c5a      	adds	r2, r3, #1
   1f240:	9202      	str	r2, [sp, #8]
   1f242:	781a      	ldrb	r2, [r3, #0]
   1f244:	9b03      	ldr	r3, [sp, #12]
   1f246:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   1f248:	9b03      	ldr	r3, [sp, #12]
   1f24a:	3305      	adds	r3, #5
   1f24c:	2220      	movs	r2, #32
   1f24e:	9902      	ldr	r1, [sp, #8]
   1f250:	4618      	mov	r0, r3
   1f252:	f7ec ff85 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   1f256:	9b03      	ldr	r3, [sp, #12]
   1f258:	791a      	ldrb	r2, [r3, #4]
   1f25a:	9b03      	ldr	r3, [sp, #12]
   1f25c:	70da      	strb	r2, [r3, #3]
}
   1f25e:	bf00      	nop
   1f260:	b005      	add	sp, #20
   1f262:	f85d fb04 	ldr.w	pc, [sp], #4

0001f266 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f266:	b084      	sub	sp, #16
   1f268:	9003      	str	r0, [sp, #12]
   1f26a:	9102      	str	r1, [sp, #8]
   1f26c:	4613      	mov	r3, r2
   1f26e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   1f272:	9b02      	ldr	r3, [sp, #8]
   1f274:	1c5a      	adds	r2, r3, #1
   1f276:	9202      	str	r2, [sp, #8]
   1f278:	781a      	ldrb	r2, [r3, #0]
   1f27a:	9b03      	ldr	r3, [sp, #12]
   1f27c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   1f27e:	9b02      	ldr	r3, [sp, #8]
   1f280:	781b      	ldrb	r3, [r3, #0]
   1f282:	b29a      	uxth	r2, r3
   1f284:	9b02      	ldr	r3, [sp, #8]
   1f286:	3301      	adds	r3, #1
   1f288:	781b      	ldrb	r3, [r3, #0]
   1f28a:	b29b      	uxth	r3, r3
   1f28c:	021b      	lsls	r3, r3, #8
   1f28e:	b29b      	uxth	r3, r3
   1f290:	4413      	add	r3, r2
   1f292:	b29a      	uxth	r2, r3
   1f294:	9b03      	ldr	r3, [sp, #12]
   1f296:	80da      	strh	r2, [r3, #6]
   1f298:	9b02      	ldr	r3, [sp, #8]
   1f29a:	3302      	adds	r3, #2
   1f29c:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   1f29e:	9b03      	ldr	r3, [sp, #12]
   1f2a0:	791a      	ldrb	r2, [r3, #4]
   1f2a2:	9b03      	ldr	r3, [sp, #12]
   1f2a4:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   1f2a6:	9b03      	ldr	r3, [sp, #12]
   1f2a8:	88da      	ldrh	r2, [r3, #6]
   1f2aa:	9b03      	ldr	r3, [sp, #12]
   1f2ac:	801a      	strh	r2, [r3, #0]
}
   1f2ae:	bf00      	nop
   1f2b0:	b004      	add	sp, #16
   1f2b2:	4770      	bx	lr

0001f2b4 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f2b4:	b084      	sub	sp, #16
   1f2b6:	9003      	str	r0, [sp, #12]
   1f2b8:	9102      	str	r1, [sp, #8]
   1f2ba:	4613      	mov	r3, r2
   1f2bc:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   1f2c0:	9b02      	ldr	r3, [sp, #8]
   1f2c2:	781b      	ldrb	r3, [r3, #0]
   1f2c4:	b29a      	uxth	r2, r3
   1f2c6:	9b02      	ldr	r3, [sp, #8]
   1f2c8:	3301      	adds	r3, #1
   1f2ca:	781b      	ldrb	r3, [r3, #0]
   1f2cc:	b29b      	uxth	r3, r3
   1f2ce:	021b      	lsls	r3, r3, #8
   1f2d0:	b29b      	uxth	r3, r3
   1f2d2:	4413      	add	r3, r2
   1f2d4:	b29a      	uxth	r2, r3
   1f2d6:	9b03      	ldr	r3, [sp, #12]
   1f2d8:	809a      	strh	r2, [r3, #4]
   1f2da:	9b02      	ldr	r3, [sp, #8]
   1f2dc:	3302      	adds	r3, #2
   1f2de:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   1f2e0:	9b03      	ldr	r3, [sp, #12]
   1f2e2:	889a      	ldrh	r2, [r3, #4]
   1f2e4:	9b03      	ldr	r3, [sp, #12]
   1f2e6:	801a      	strh	r2, [r3, #0]
}
   1f2e8:	bf00      	nop
   1f2ea:	b004      	add	sp, #16
   1f2ec:	4770      	bx	lr

0001f2ee <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f2ee:	b084      	sub	sp, #16
   1f2f0:	9003      	str	r0, [sp, #12]
   1f2f2:	9102      	str	r1, [sp, #8]
   1f2f4:	4613      	mov	r3, r2
   1f2f6:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   1f2fa:	9b02      	ldr	r3, [sp, #8]
   1f2fc:	1c5a      	adds	r2, r3, #1
   1f2fe:	9202      	str	r2, [sp, #8]
   1f300:	781a      	ldrb	r2, [r3, #0]
   1f302:	9b03      	ldr	r3, [sp, #12]
   1f304:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   1f306:	9b02      	ldr	r3, [sp, #8]
   1f308:	781b      	ldrb	r3, [r3, #0]
   1f30a:	b29a      	uxth	r2, r3
   1f30c:	9b02      	ldr	r3, [sp, #8]
   1f30e:	3301      	adds	r3, #1
   1f310:	781b      	ldrb	r3, [r3, #0]
   1f312:	b29b      	uxth	r3, r3
   1f314:	021b      	lsls	r3, r3, #8
   1f316:	b29b      	uxth	r3, r3
   1f318:	4413      	add	r3, r2
   1f31a:	b29a      	uxth	r2, r3
   1f31c:	9b03      	ldr	r3, [sp, #12]
   1f31e:	80da      	strh	r2, [r3, #6]
   1f320:	9b02      	ldr	r3, [sp, #8]
   1f322:	3302      	adds	r3, #2
   1f324:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   1f326:	9b02      	ldr	r3, [sp, #8]
   1f328:	1c5a      	adds	r2, r3, #1
   1f32a:	9202      	str	r2, [sp, #8]
   1f32c:	781a      	ldrb	r2, [r3, #0]
   1f32e:	9b03      	ldr	r3, [sp, #12]
   1f330:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   1f332:	9b02      	ldr	r3, [sp, #8]
   1f334:	1c5a      	adds	r2, r3, #1
   1f336:	9202      	str	r2, [sp, #8]
   1f338:	781a      	ldrb	r2, [r3, #0]
   1f33a:	9b03      	ldr	r3, [sp, #12]
   1f33c:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   1f33e:	9b03      	ldr	r3, [sp, #12]
   1f340:	791a      	ldrb	r2, [r3, #4]
   1f342:	9b03      	ldr	r3, [sp, #12]
   1f344:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   1f346:	9b03      	ldr	r3, [sp, #12]
   1f348:	88da      	ldrh	r2, [r3, #6]
   1f34a:	9b03      	ldr	r3, [sp, #12]
   1f34c:	801a      	strh	r2, [r3, #0]
}
   1f34e:	bf00      	nop
   1f350:	b004      	add	sp, #16
   1f352:	4770      	bx	lr

0001f354 <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f354:	b084      	sub	sp, #16
   1f356:	9003      	str	r0, [sp, #12]
   1f358:	9102      	str	r1, [sp, #8]
   1f35a:	4613      	mov	r3, r2
   1f35c:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   1f360:	9b02      	ldr	r3, [sp, #8]
   1f362:	1c5a      	adds	r2, r3, #1
   1f364:	9202      	str	r2, [sp, #8]
   1f366:	781a      	ldrb	r2, [r3, #0]
   1f368:	9b03      	ldr	r3, [sp, #12]
   1f36a:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   1f36c:	9b03      	ldr	r3, [sp, #12]
   1f36e:	791a      	ldrb	r2, [r3, #4]
   1f370:	9b03      	ldr	r3, [sp, #12]
   1f372:	70da      	strb	r2, [r3, #3]
}
   1f374:	bf00      	nop
   1f376:	b004      	add	sp, #16
   1f378:	4770      	bx	lr

0001f37a <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f37a:	b084      	sub	sp, #16
   1f37c:	9003      	str	r0, [sp, #12]
   1f37e:	9102      	str	r1, [sp, #8]
   1f380:	4613      	mov	r3, r2
   1f382:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   1f386:	9b02      	ldr	r3, [sp, #8]
   1f388:	1c5a      	adds	r2, r3, #1
   1f38a:	9202      	str	r2, [sp, #8]
   1f38c:	781a      	ldrb	r2, [r3, #0]
   1f38e:	9b03      	ldr	r3, [sp, #12]
   1f390:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   1f392:	9b02      	ldr	r3, [sp, #8]
   1f394:	781b      	ldrb	r3, [r3, #0]
   1f396:	b29a      	uxth	r2, r3
   1f398:	9b02      	ldr	r3, [sp, #8]
   1f39a:	3301      	adds	r3, #1
   1f39c:	781b      	ldrb	r3, [r3, #0]
   1f39e:	b29b      	uxth	r3, r3
   1f3a0:	021b      	lsls	r3, r3, #8
   1f3a2:	b29b      	uxth	r3, r3
   1f3a4:	4413      	add	r3, r2
   1f3a6:	b29a      	uxth	r2, r3
   1f3a8:	9b03      	ldr	r3, [sp, #12]
   1f3aa:	80da      	strh	r2, [r3, #6]
   1f3ac:	9b02      	ldr	r3, [sp, #8]
   1f3ae:	3302      	adds	r3, #2
   1f3b0:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   1f3b2:	9b02      	ldr	r3, [sp, #8]
   1f3b4:	1c5a      	adds	r2, r3, #1
   1f3b6:	9202      	str	r2, [sp, #8]
   1f3b8:	781a      	ldrb	r2, [r3, #0]
   1f3ba:	9b03      	ldr	r3, [sp, #12]
   1f3bc:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   1f3be:	9b02      	ldr	r3, [sp, #8]
   1f3c0:	1c5a      	adds	r2, r3, #1
   1f3c2:	9202      	str	r2, [sp, #8]
   1f3c4:	781a      	ldrb	r2, [r3, #0]
   1f3c6:	9b03      	ldr	r3, [sp, #12]
   1f3c8:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   1f3ca:	9b03      	ldr	r3, [sp, #12]
   1f3cc:	791a      	ldrb	r2, [r3, #4]
   1f3ce:	9b03      	ldr	r3, [sp, #12]
   1f3d0:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   1f3d2:	9b03      	ldr	r3, [sp, #12]
   1f3d4:	88da      	ldrh	r2, [r3, #6]
   1f3d6:	9b03      	ldr	r3, [sp, #12]
   1f3d8:	801a      	strh	r2, [r3, #0]
}
   1f3da:	bf00      	nop
   1f3dc:	b004      	add	sp, #16
   1f3de:	4770      	bx	lr

0001f3e0 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   1f3e0:	b500      	push	{lr}
   1f3e2:	b085      	sub	sp, #20
   1f3e4:	9001      	str	r0, [sp, #4]
   1f3e6:	460b      	mov	r3, r1
   1f3e8:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   1f3ec:	9b01      	ldr	r3, [sp, #4]
   1f3ee:	1c5a      	adds	r2, r3, #1
   1f3f0:	9201      	str	r2, [sp, #4]
   1f3f2:	781b      	ldrb	r3, [r3, #0]
   1f3f4:	f88d 300f 	strb.w	r3, [sp, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   1f3f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f3fc:	2b0f      	cmp	r3, #15
   1f3fe:	d864      	bhi.n	1f4ca <hciEvtProcessLeAdvReport+0xea>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   1f400:	203b      	movs	r0, #59	; 0x3b
   1f402:	f7f8 ff9b 	bl	1833c <WsfBufAlloc>
   1f406:	9002      	str	r0, [sp, #8]
   1f408:	9b02      	ldr	r3, [sp, #8]
   1f40a:	2b00      	cmp	r3, #0
   1f40c:	d05e      	beq.n	1f4cc <hciEvtProcessLeAdvReport+0xec>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   1f40e:	e04f      	b.n	1f4b0 <hciEvtProcessLeAdvReport+0xd0>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   1f410:	9b01      	ldr	r3, [sp, #4]
   1f412:	1c5a      	adds	r2, r3, #1
   1f414:	9201      	str	r2, [sp, #4]
   1f416:	781a      	ldrb	r2, [r3, #0]
   1f418:	9b02      	ldr	r3, [sp, #8]
   1f41a:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   1f41c:	9b01      	ldr	r3, [sp, #4]
   1f41e:	1c5a      	adds	r2, r3, #1
   1f420:	9201      	str	r2, [sp, #4]
   1f422:	781a      	ldrb	r2, [r3, #0]
   1f424:	9b02      	ldr	r3, [sp, #8]
   1f426:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   1f428:	9b02      	ldr	r3, [sp, #8]
   1f42a:	330c      	adds	r3, #12
   1f42c:	9901      	ldr	r1, [sp, #4]
   1f42e:	4618      	mov	r0, r3
   1f430:	f7fb ff4a 	bl	1b2c8 <BdaCpy>
   1f434:	9b01      	ldr	r3, [sp, #4]
   1f436:	3306      	adds	r3, #6
   1f438:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   1f43a:	9b01      	ldr	r3, [sp, #4]
   1f43c:	1c5a      	adds	r2, r3, #1
   1f43e:	9201      	str	r2, [sp, #4]
   1f440:	781a      	ldrb	r2, [r3, #0]
   1f442:	9b02      	ldr	r3, [sp, #8]
   1f444:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   1f446:	9b02      	ldr	r3, [sp, #8]
   1f448:	7a1b      	ldrb	r3, [r3, #8]
   1f44a:	2b1f      	cmp	r3, #31
   1f44c:	d838      	bhi.n	1f4c0 <hciEvtProcessLeAdvReport+0xe0>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   1f44e:	9b02      	ldr	r3, [sp, #8]
   1f450:	f103 021c 	add.w	r2, r3, #28
   1f454:	9b02      	ldr	r3, [sp, #8]
   1f456:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   1f458:	9b02      	ldr	r3, [sp, #8]
   1f45a:	6858      	ldr	r0, [r3, #4]
   1f45c:	9b02      	ldr	r3, [sp, #8]
   1f45e:	7a1b      	ldrb	r3, [r3, #8]
   1f460:	461a      	mov	r2, r3
   1f462:	9901      	ldr	r1, [sp, #4]
   1f464:	f7ec fe7c 	bl	c160 <memcpy>
      p += pMsg->len;
   1f468:	9b02      	ldr	r3, [sp, #8]
   1f46a:	7a1b      	ldrb	r3, [r3, #8]
   1f46c:	461a      	mov	r2, r3
   1f46e:	9b01      	ldr	r3, [sp, #4]
   1f470:	4413      	add	r3, r2
   1f472:	9301      	str	r3, [sp, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   1f474:	9b01      	ldr	r3, [sp, #4]
   1f476:	1c5a      	adds	r2, r3, #1
   1f478:	9201      	str	r2, [sp, #4]
   1f47a:	781b      	ldrb	r3, [r3, #0]
   1f47c:	b25a      	sxtb	r2, r3
   1f47e:	9b02      	ldr	r3, [sp, #8]
   1f480:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   1f482:	9b02      	ldr	r3, [sp, #8]
   1f484:	2200      	movs	r2, #0
   1f486:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   1f488:	9b02      	ldr	r3, [sp, #8]
   1f48a:	3313      	adds	r3, #19
   1f48c:	2206      	movs	r2, #6
   1f48e:	2100      	movs	r1, #0
   1f490:	4618      	mov	r0, r3
   1f492:	f7ec feff 	bl	c294 <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   1f496:	9b02      	ldr	r3, [sp, #8]
   1f498:	2200      	movs	r2, #0
   1f49a:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   1f49c:	9b02      	ldr	r3, [sp, #8]
   1f49e:	2206      	movs	r2, #6
   1f4a0:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1f4a2:	9b02      	ldr	r3, [sp, #8]
   1f4a4:	2200      	movs	r2, #0
   1f4a6:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   1f4a8:	4b0a      	ldr	r3, [pc, #40]	; (1f4d4 <hciEvtProcessLeAdvReport+0xf4>)
   1f4aa:	689b      	ldr	r3, [r3, #8]
   1f4ac:	9802      	ldr	r0, [sp, #8]
   1f4ae:	4798      	blx	r3
    while (i-- > 0)
   1f4b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f4b4:	1e5a      	subs	r2, r3, #1
   1f4b6:	f88d 200f 	strb.w	r2, [sp, #15]
   1f4ba:	2b00      	cmp	r3, #0
   1f4bc:	d1a8      	bne.n	1f410 <hciEvtProcessLeAdvReport+0x30>
   1f4be:	e000      	b.n	1f4c2 <hciEvtProcessLeAdvReport+0xe2>
        break;
   1f4c0:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   1f4c2:	9802      	ldr	r0, [sp, #8]
   1f4c4:	f7f8 ff80 	bl	183c8 <WsfBufFree>
   1f4c8:	e000      	b.n	1f4cc <hciEvtProcessLeAdvReport+0xec>
    return;
   1f4ca:	bf00      	nop
  }
}
   1f4cc:	b005      	add	sp, #20
   1f4ce:	f85d fb04 	ldr.w	pc, [sp], #4
   1f4d2:	bf00      	nop
   1f4d4:	10009670 	.word	0x10009670

0001f4d8 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   1f4d8:	b500      	push	{lr}
   1f4da:	b087      	sub	sp, #28
   1f4dc:	9001      	str	r0, [sp, #4]
   1f4de:	460b      	mov	r3, r1
   1f4e0:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   1f4e4:	9b01      	ldr	r3, [sp, #4]
   1f4e6:	781b      	ldrb	r3, [r3, #0]
   1f4e8:	f88d 3017 	strb.w	r3, [sp, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   1f4ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1f4f0:	2b0f      	cmp	r3, #15
   1f4f2:	f200 80d2 	bhi.w	1f69a <hciEvtProcessLeExtAdvReport+0x1c2>
  {
    return;
  }

  ptr = p + 1;
   1f4f6:	9b01      	ldr	r3, [sp, #4]
   1f4f8:	3301      	adds	r3, #1
   1f4fa:	9304      	str	r3, [sp, #16]
  maxLen = 0;
   1f4fc:	2300      	movs	r3, #0
   1f4fe:	f88d 300f 	strb.w	r3, [sp, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   1f502:	e017      	b.n	1f534 <hciEvtProcessLeExtAdvReport+0x5c>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   1f504:	9b04      	ldr	r3, [sp, #16]
   1f506:	3317      	adds	r3, #23
   1f508:	9304      	str	r3, [sp, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
   1f50a:	9b04      	ldr	r3, [sp, #16]
   1f50c:	1c5a      	adds	r2, r3, #1
   1f50e:	9204      	str	r2, [sp, #16]
   1f510:	781b      	ldrb	r3, [r3, #0]
   1f512:	f88d 300e 	strb.w	r3, [sp, #14]
    ptr += dataLen;
   1f516:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1f51a:	9a04      	ldr	r2, [sp, #16]
   1f51c:	4413      	add	r3, r2
   1f51e:	9304      	str	r3, [sp, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   1f520:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1f524:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f528:	429a      	cmp	r2, r3
   1f52a:	d903      	bls.n	1f534 <hciEvtProcessLeExtAdvReport+0x5c>
    {
      /* update max len */
      maxLen = dataLen;
   1f52c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1f530:	f88d 300f 	strb.w	r3, [sp, #15]
  while (i-- > 0)
   1f534:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1f538:	1e5a      	subs	r2, r3, #1
   1f53a:	f88d 2017 	strb.w	r2, [sp, #23]
   1f53e:	2b00      	cmp	r3, #0
   1f540:	d1e0      	bne.n	1f504 <hciEvtProcessLeExtAdvReport+0x2c>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   1f542:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f546:	b29b      	uxth	r3, r3
   1f548:	3324      	adds	r3, #36	; 0x24
   1f54a:	b29b      	uxth	r3, r3
   1f54c:	4618      	mov	r0, r3
   1f54e:	f7f8 fef5 	bl	1833c <WsfBufAlloc>
   1f552:	9002      	str	r0, [sp, #8]
   1f554:	9b02      	ldr	r3, [sp, #8]
   1f556:	2b00      	cmp	r3, #0
   1f558:	f000 80a0 	beq.w	1f69c <hciEvtProcessLeExtAdvReport+0x1c4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   1f55c:	9b01      	ldr	r3, [sp, #4]
   1f55e:	1c5a      	adds	r2, r3, #1
   1f560:	9201      	str	r2, [sp, #4]
   1f562:	781b      	ldrb	r3, [r3, #0]
   1f564:	f88d 3017 	strb.w	r3, [sp, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
   1f568:	e089      	b.n	1f67e <hciEvtProcessLeExtAdvReport+0x1a6>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   1f56a:	9b01      	ldr	r3, [sp, #4]
   1f56c:	781b      	ldrb	r3, [r3, #0]
   1f56e:	b29a      	uxth	r2, r3
   1f570:	9b01      	ldr	r3, [sp, #4]
   1f572:	3301      	adds	r3, #1
   1f574:	781b      	ldrb	r3, [r3, #0]
   1f576:	b29b      	uxth	r3, r3
   1f578:	021b      	lsls	r3, r3, #8
   1f57a:	b29b      	uxth	r3, r3
   1f57c:	4413      	add	r3, r2
   1f57e:	b29a      	uxth	r2, r3
   1f580:	9b02      	ldr	r3, [sp, #8]
   1f582:	809a      	strh	r2, [r3, #4]
   1f584:	9b01      	ldr	r3, [sp, #4]
   1f586:	3302      	adds	r3, #2
   1f588:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   1f58a:	9b01      	ldr	r3, [sp, #4]
   1f58c:	1c5a      	adds	r2, r3, #1
   1f58e:	9201      	str	r2, [sp, #4]
   1f590:	781a      	ldrb	r2, [r3, #0]
   1f592:	9b02      	ldr	r3, [sp, #8]
   1f594:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   1f596:	9b02      	ldr	r3, [sp, #8]
   1f598:	3307      	adds	r3, #7
   1f59a:	9901      	ldr	r1, [sp, #4]
   1f59c:	4618      	mov	r0, r3
   1f59e:	f7fb fe93 	bl	1b2c8 <BdaCpy>
   1f5a2:	9b01      	ldr	r3, [sp, #4]
   1f5a4:	3306      	adds	r3, #6
   1f5a6:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   1f5a8:	9b01      	ldr	r3, [sp, #4]
   1f5aa:	1c5a      	adds	r2, r3, #1
   1f5ac:	9201      	str	r2, [sp, #4]
   1f5ae:	781a      	ldrb	r2, [r3, #0]
   1f5b0:	9b02      	ldr	r3, [sp, #8]
   1f5b2:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   1f5b4:	9b01      	ldr	r3, [sp, #4]
   1f5b6:	1c5a      	adds	r2, r3, #1
   1f5b8:	9201      	str	r2, [sp, #4]
   1f5ba:	781a      	ldrb	r2, [r3, #0]
   1f5bc:	9b02      	ldr	r3, [sp, #8]
   1f5be:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   1f5c0:	9b01      	ldr	r3, [sp, #4]
   1f5c2:	1c5a      	adds	r2, r3, #1
   1f5c4:	9201      	str	r2, [sp, #4]
   1f5c6:	781a      	ldrb	r2, [r3, #0]
   1f5c8:	9b02      	ldr	r3, [sp, #8]
   1f5ca:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   1f5cc:	9b01      	ldr	r3, [sp, #4]
   1f5ce:	1c5a      	adds	r2, r3, #1
   1f5d0:	9201      	str	r2, [sp, #4]
   1f5d2:	781b      	ldrb	r3, [r3, #0]
   1f5d4:	b25a      	sxtb	r2, r3
   1f5d6:	9b02      	ldr	r3, [sp, #8]
   1f5d8:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   1f5da:	9b01      	ldr	r3, [sp, #4]
   1f5dc:	1c5a      	adds	r2, r3, #1
   1f5de:	9201      	str	r2, [sp, #4]
   1f5e0:	781b      	ldrb	r3, [r3, #0]
   1f5e2:	b25a      	sxtb	r2, r3
   1f5e4:	9b02      	ldr	r3, [sp, #8]
   1f5e6:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   1f5e8:	9b01      	ldr	r3, [sp, #4]
   1f5ea:	781b      	ldrb	r3, [r3, #0]
   1f5ec:	b29a      	uxth	r2, r3
   1f5ee:	9b01      	ldr	r3, [sp, #4]
   1f5f0:	3301      	adds	r3, #1
   1f5f2:	781b      	ldrb	r3, [r3, #0]
   1f5f4:	b29b      	uxth	r3, r3
   1f5f6:	021b      	lsls	r3, r3, #8
   1f5f8:	b29b      	uxth	r3, r3
   1f5fa:	4413      	add	r3, r2
   1f5fc:	b29b      	uxth	r3, r3
   1f5fe:	b21a      	sxth	r2, r3
   1f600:	9b02      	ldr	r3, [sp, #8]
   1f602:	825a      	strh	r2, [r3, #18]
   1f604:	9b01      	ldr	r3, [sp, #4]
   1f606:	3302      	adds	r3, #2
   1f608:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   1f60a:	9b01      	ldr	r3, [sp, #4]
   1f60c:	1c5a      	adds	r2, r3, #1
   1f60e:	9201      	str	r2, [sp, #4]
   1f610:	781a      	ldrb	r2, [r3, #0]
   1f612:	9b02      	ldr	r3, [sp, #8]
   1f614:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   1f616:	9b02      	ldr	r3, [sp, #8]
   1f618:	3315      	adds	r3, #21
   1f61a:	9901      	ldr	r1, [sp, #4]
   1f61c:	4618      	mov	r0, r3
   1f61e:	f7fb fe53 	bl	1b2c8 <BdaCpy>
   1f622:	9b01      	ldr	r3, [sp, #4]
   1f624:	3306      	adds	r3, #6
   1f626:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   1f628:	9b01      	ldr	r3, [sp, #4]
   1f62a:	1c5a      	adds	r2, r3, #1
   1f62c:	9201      	str	r2, [sp, #4]
   1f62e:	781b      	ldrb	r3, [r3, #0]
   1f630:	b29a      	uxth	r2, r3
   1f632:	9b02      	ldr	r3, [sp, #8]
   1f634:	839a      	strh	r2, [r3, #28]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   1f636:	9b02      	ldr	r3, [sp, #8]
   1f638:	8b9b      	ldrh	r3, [r3, #28]
   1f63a:	2be5      	cmp	r3, #229	; 0xe5
   1f63c:	d828      	bhi.n	1f690 <hciEvtProcessLeExtAdvReport+0x1b8>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   1f63e:	9b02      	ldr	r3, [sp, #8]
   1f640:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1f644:	9b02      	ldr	r3, [sp, #8]
   1f646:	621a      	str	r2, [r3, #32]
      memcpy(pMsg->pData, p, pMsg->len);
   1f648:	9b02      	ldr	r3, [sp, #8]
   1f64a:	6a18      	ldr	r0, [r3, #32]
   1f64c:	9b02      	ldr	r3, [sp, #8]
   1f64e:	8b9b      	ldrh	r3, [r3, #28]
   1f650:	461a      	mov	r2, r3
   1f652:	9901      	ldr	r1, [sp, #4]
   1f654:	f7ec fd84 	bl	c160 <memcpy>
      p += pMsg->len;
   1f658:	9b02      	ldr	r3, [sp, #8]
   1f65a:	8b9b      	ldrh	r3, [r3, #28]
   1f65c:	461a      	mov	r2, r3
   1f65e:	9b01      	ldr	r3, [sp, #4]
   1f660:	4413      	add	r3, r2
   1f662:	9301      	str	r3, [sp, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   1f664:	9b02      	ldr	r3, [sp, #8]
   1f666:	2200      	movs	r2, #0
   1f668:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   1f66a:	9b02      	ldr	r3, [sp, #8]
   1f66c:	222c      	movs	r2, #44	; 0x2c
   1f66e:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1f670:	9b02      	ldr	r3, [sp, #8]
   1f672:	2200      	movs	r2, #0
   1f674:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   1f676:	4b0b      	ldr	r3, [pc, #44]	; (1f6a4 <hciEvtProcessLeExtAdvReport+0x1cc>)
   1f678:	689b      	ldr	r3, [r3, #8]
   1f67a:	9802      	ldr	r0, [sp, #8]
   1f67c:	4798      	blx	r3
    while (i-- > 0)
   1f67e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1f682:	1e5a      	subs	r2, r3, #1
   1f684:	f88d 2017 	strb.w	r2, [sp, #23]
   1f688:	2b00      	cmp	r3, #0
   1f68a:	f47f af6e 	bne.w	1f56a <hciEvtProcessLeExtAdvReport+0x92>
   1f68e:	e000      	b.n	1f692 <hciEvtProcessLeExtAdvReport+0x1ba>
        break;
   1f690:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   1f692:	9802      	ldr	r0, [sp, #8]
   1f694:	f7f8 fe98 	bl	183c8 <WsfBufFree>
   1f698:	e000      	b.n	1f69c <hciEvtProcessLeExtAdvReport+0x1c4>
    return;
   1f69a:	bf00      	nop
  }
}
   1f69c:	b007      	add	sp, #28
   1f69e:	f85d fb04 	ldr.w	pc, [sp], #4
   1f6a2:	bf00      	nop
   1f6a4:	10009670 	.word	0x10009670

0001f6a8 <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f6a8:	b084      	sub	sp, #16
   1f6aa:	9003      	str	r0, [sp, #12]
   1f6ac:	9102      	str	r1, [sp, #8]
   1f6ae:	4613      	mov	r3, r2
   1f6b0:	f88d 3007 	strb.w	r3, [sp, #7]
  /* empty */
}
   1f6b4:	bf00      	nop
   1f6b6:	b004      	add	sp, #16
   1f6b8:	4770      	bx	lr

0001f6ba <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f6ba:	b084      	sub	sp, #16
   1f6bc:	9003      	str	r0, [sp, #12]
   1f6be:	9102      	str	r1, [sp, #8]
   1f6c0:	4613      	mov	r3, r2
   1f6c2:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   1f6c6:	9b02      	ldr	r3, [sp, #8]
   1f6c8:	1c5a      	adds	r2, r3, #1
   1f6ca:	9202      	str	r2, [sp, #8]
   1f6cc:	781a      	ldrb	r2, [r3, #0]
   1f6ce:	9b03      	ldr	r3, [sp, #12]
   1f6d0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   1f6d2:	9b02      	ldr	r3, [sp, #8]
   1f6d4:	1c5a      	adds	r2, r3, #1
   1f6d6:	9202      	str	r2, [sp, #8]
   1f6d8:	781a      	ldrb	r2, [r3, #0]
   1f6da:	9b03      	ldr	r3, [sp, #12]
   1f6dc:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   1f6de:	9b02      	ldr	r3, [sp, #8]
   1f6e0:	781b      	ldrb	r3, [r3, #0]
   1f6e2:	b29a      	uxth	r2, r3
   1f6e4:	9b02      	ldr	r3, [sp, #8]
   1f6e6:	3301      	adds	r3, #1
   1f6e8:	781b      	ldrb	r3, [r3, #0]
   1f6ea:	b29b      	uxth	r3, r3
   1f6ec:	021b      	lsls	r3, r3, #8
   1f6ee:	b29b      	uxth	r3, r3
   1f6f0:	4413      	add	r3, r2
   1f6f2:	b29a      	uxth	r2, r3
   1f6f4:	9b03      	ldr	r3, [sp, #12]
   1f6f6:	80da      	strh	r2, [r3, #6]
   1f6f8:	9b02      	ldr	r3, [sp, #8]
   1f6fa:	3302      	adds	r3, #2
   1f6fc:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   1f6fe:	9b02      	ldr	r3, [sp, #8]
   1f700:	1c5a      	adds	r2, r3, #1
   1f702:	9202      	str	r2, [sp, #8]
   1f704:	781a      	ldrb	r2, [r3, #0]
   1f706:	9b03      	ldr	r3, [sp, #12]
   1f708:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   1f70a:	9b03      	ldr	r3, [sp, #12]
   1f70c:	791a      	ldrb	r2, [r3, #4]
   1f70e:	9b03      	ldr	r3, [sp, #12]
   1f710:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   1f712:	9b03      	ldr	r3, [sp, #12]
   1f714:	88da      	ldrh	r2, [r3, #6]
   1f716:	9b03      	ldr	r3, [sp, #12]
   1f718:	801a      	strh	r2, [r3, #0]
}
   1f71a:	bf00      	nop
   1f71c:	b004      	add	sp, #16
   1f71e:	4770      	bx	lr

0001f720 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f720:	b500      	push	{lr}
   1f722:	b085      	sub	sp, #20
   1f724:	9003      	str	r0, [sp, #12]
   1f726:	9102      	str	r1, [sp, #8]
   1f728:	4613      	mov	r3, r2
   1f72a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   1f72e:	9b02      	ldr	r3, [sp, #8]
   1f730:	1c5a      	adds	r2, r3, #1
   1f732:	9202      	str	r2, [sp, #8]
   1f734:	781a      	ldrb	r2, [r3, #0]
   1f736:	9b03      	ldr	r3, [sp, #12]
   1f738:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   1f73a:	9b02      	ldr	r3, [sp, #8]
   1f73c:	1c5a      	adds	r2, r3, #1
   1f73e:	9202      	str	r2, [sp, #8]
   1f740:	781a      	ldrb	r2, [r3, #0]
   1f742:	9b03      	ldr	r3, [sp, #12]
   1f744:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   1f746:	9b03      	ldr	r3, [sp, #12]
   1f748:	3306      	adds	r3, #6
   1f74a:	9902      	ldr	r1, [sp, #8]
   1f74c:	4618      	mov	r0, r3
   1f74e:	f7fb fdbb 	bl	1b2c8 <BdaCpy>
   1f752:	9b02      	ldr	r3, [sp, #8]
   1f754:	3306      	adds	r3, #6
   1f756:	9302      	str	r3, [sp, #8]
}
   1f758:	bf00      	nop
   1f75a:	b005      	add	sp, #20
   1f75c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f760 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f760:	b500      	push	{lr}
   1f762:	b085      	sub	sp, #20
   1f764:	9003      	str	r0, [sp, #12]
   1f766:	9102      	str	r1, [sp, #8]
   1f768:	4613      	mov	r3, r2
   1f76a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   1f76e:	9b02      	ldr	r3, [sp, #8]
   1f770:	1c5a      	adds	r2, r3, #1
   1f772:	9202      	str	r2, [sp, #8]
   1f774:	781a      	ldrb	r2, [r3, #0]
   1f776:	9b03      	ldr	r3, [sp, #12]
   1f778:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   1f77a:	9b02      	ldr	r3, [sp, #8]
   1f77c:	781b      	ldrb	r3, [r3, #0]
   1f77e:	b29a      	uxth	r2, r3
   1f780:	9b02      	ldr	r3, [sp, #8]
   1f782:	3301      	adds	r3, #1
   1f784:	781b      	ldrb	r3, [r3, #0]
   1f786:	b29b      	uxth	r3, r3
   1f788:	021b      	lsls	r3, r3, #8
   1f78a:	b29b      	uxth	r3, r3
   1f78c:	4413      	add	r3, r2
   1f78e:	b29a      	uxth	r2, r3
   1f790:	9b03      	ldr	r3, [sp, #12]
   1f792:	80da      	strh	r2, [r3, #6]
   1f794:	9b02      	ldr	r3, [sp, #8]
   1f796:	3302      	adds	r3, #2
   1f798:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   1f79a:	9b02      	ldr	r3, [sp, #8]
   1f79c:	1c5a      	adds	r2, r3, #1
   1f79e:	9202      	str	r2, [sp, #8]
   1f7a0:	781a      	ldrb	r2, [r3, #0]
   1f7a2:	9b03      	ldr	r3, [sp, #12]
   1f7a4:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   1f7a6:	9b02      	ldr	r3, [sp, #8]
   1f7a8:	1c5a      	adds	r2, r3, #1
   1f7aa:	9202      	str	r2, [sp, #8]
   1f7ac:	781a      	ldrb	r2, [r3, #0]
   1f7ae:	9b03      	ldr	r3, [sp, #12]
   1f7b0:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   1f7b2:	9b03      	ldr	r3, [sp, #12]
   1f7b4:	330a      	adds	r3, #10
   1f7b6:	9902      	ldr	r1, [sp, #8]
   1f7b8:	4618      	mov	r0, r3
   1f7ba:	f7fb fd85 	bl	1b2c8 <BdaCpy>
   1f7be:	9b02      	ldr	r3, [sp, #8]
   1f7c0:	3306      	adds	r3, #6
   1f7c2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   1f7c4:	9b02      	ldr	r3, [sp, #8]
   1f7c6:	1c5a      	adds	r2, r3, #1
   1f7c8:	9202      	str	r2, [sp, #8]
   1f7ca:	781a      	ldrb	r2, [r3, #0]
   1f7cc:	9b03      	ldr	r3, [sp, #12]
   1f7ce:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   1f7d0:	9b02      	ldr	r3, [sp, #8]
   1f7d2:	781b      	ldrb	r3, [r3, #0]
   1f7d4:	b29a      	uxth	r2, r3
   1f7d6:	9b02      	ldr	r3, [sp, #8]
   1f7d8:	3301      	adds	r3, #1
   1f7da:	781b      	ldrb	r3, [r3, #0]
   1f7dc:	b29b      	uxth	r3, r3
   1f7de:	021b      	lsls	r3, r3, #8
   1f7e0:	b29b      	uxth	r3, r3
   1f7e2:	4413      	add	r3, r2
   1f7e4:	b29a      	uxth	r2, r3
   1f7e6:	9b03      	ldr	r3, [sp, #12]
   1f7e8:	825a      	strh	r2, [r3, #18]
   1f7ea:	9b02      	ldr	r3, [sp, #8]
   1f7ec:	3302      	adds	r3, #2
   1f7ee:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   1f7f0:	9b02      	ldr	r3, [sp, #8]
   1f7f2:	1c5a      	adds	r2, r3, #1
   1f7f4:	9202      	str	r2, [sp, #8]
   1f7f6:	781a      	ldrb	r2, [r3, #0]
   1f7f8:	9b03      	ldr	r3, [sp, #12]
   1f7fa:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   1f7fc:	9b03      	ldr	r3, [sp, #12]
   1f7fe:	791a      	ldrb	r2, [r3, #4]
   1f800:	9b03      	ldr	r3, [sp, #12]
   1f802:	70da      	strb	r2, [r3, #3]
}
   1f804:	bf00      	nop
   1f806:	b005      	add	sp, #20
   1f808:	f85d fb04 	ldr.w	pc, [sp], #4

0001f80c <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   1f80c:	b500      	push	{lr}
   1f80e:	b085      	sub	sp, #20
   1f810:	9001      	str	r0, [sp, #4]
   1f812:	460b      	mov	r3, r1
   1f814:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   1f818:	9b01      	ldr	r3, [sp, #4]
   1f81a:	799b      	ldrb	r3, [r3, #6]
   1f81c:	f88d 300f 	strb.w	r3, [sp, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   1f820:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f824:	2bf7      	cmp	r3, #247	; 0xf7
   1f826:	d859      	bhi.n	1f8dc <hciEvtProcessLePerAdvReport+0xd0>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   1f828:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f82c:	b29b      	uxth	r3, r3
   1f82e:	3310      	adds	r3, #16
   1f830:	b29b      	uxth	r3, r3
   1f832:	4618      	mov	r0, r3
   1f834:	f7f8 fd82 	bl	1833c <WsfBufAlloc>
   1f838:	9002      	str	r0, [sp, #8]
   1f83a:	9b02      	ldr	r3, [sp, #8]
   1f83c:	2b00      	cmp	r3, #0
   1f83e:	d04e      	beq.n	1f8de <hciEvtProcessLePerAdvReport+0xd2>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   1f840:	9b01      	ldr	r3, [sp, #4]
   1f842:	781b      	ldrb	r3, [r3, #0]
   1f844:	b29a      	uxth	r2, r3
   1f846:	9b01      	ldr	r3, [sp, #4]
   1f848:	3301      	adds	r3, #1
   1f84a:	781b      	ldrb	r3, [r3, #0]
   1f84c:	b29b      	uxth	r3, r3
   1f84e:	021b      	lsls	r3, r3, #8
   1f850:	b29b      	uxth	r3, r3
   1f852:	4413      	add	r3, r2
   1f854:	b29a      	uxth	r2, r3
   1f856:	9b02      	ldr	r3, [sp, #8]
   1f858:	809a      	strh	r2, [r3, #4]
   1f85a:	9b01      	ldr	r3, [sp, #4]
   1f85c:	3302      	adds	r3, #2
   1f85e:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   1f860:	9b01      	ldr	r3, [sp, #4]
   1f862:	1c5a      	adds	r2, r3, #1
   1f864:	9201      	str	r2, [sp, #4]
   1f866:	781a      	ldrb	r2, [r3, #0]
   1f868:	9b02      	ldr	r3, [sp, #8]
   1f86a:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   1f86c:	9b01      	ldr	r3, [sp, #4]
   1f86e:	1c5a      	adds	r2, r3, #1
   1f870:	9201      	str	r2, [sp, #4]
   1f872:	781a      	ldrb	r2, [r3, #0]
   1f874:	9b02      	ldr	r3, [sp, #8]
   1f876:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   1f878:	9b01      	ldr	r3, [sp, #4]
   1f87a:	1c5a      	adds	r2, r3, #1
   1f87c:	9201      	str	r2, [sp, #4]
   1f87e:	781a      	ldrb	r2, [r3, #0]
   1f880:	9b02      	ldr	r3, [sp, #8]
   1f882:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   1f884:	9b01      	ldr	r3, [sp, #4]
   1f886:	1c5a      	adds	r2, r3, #1
   1f888:	9201      	str	r2, [sp, #4]
   1f88a:	781a      	ldrb	r2, [r3, #0]
   1f88c:	9b02      	ldr	r3, [sp, #8]
   1f88e:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   1f890:	9b01      	ldr	r3, [sp, #4]
   1f892:	1c5a      	adds	r2, r3, #1
   1f894:	9201      	str	r2, [sp, #4]
   1f896:	781b      	ldrb	r3, [r3, #0]
   1f898:	b29a      	uxth	r2, r3
   1f89a:	9b02      	ldr	r3, [sp, #8]
   1f89c:	815a      	strh	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   1f89e:	9b02      	ldr	r3, [sp, #8]
   1f8a0:	f103 0210 	add.w	r2, r3, #16
   1f8a4:	9b02      	ldr	r3, [sp, #8]
   1f8a6:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   1f8a8:	9b02      	ldr	r3, [sp, #8]
   1f8aa:	68d8      	ldr	r0, [r3, #12]
   1f8ac:	9b02      	ldr	r3, [sp, #8]
   1f8ae:	895b      	ldrh	r3, [r3, #10]
   1f8b0:	461a      	mov	r2, r3
   1f8b2:	9901      	ldr	r1, [sp, #4]
   1f8b4:	f7ec fc54 	bl	c160 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   1f8b8:	9b02      	ldr	r3, [sp, #8]
   1f8ba:	2200      	movs	r2, #0
   1f8bc:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   1f8be:	9b02      	ldr	r3, [sp, #8]
   1f8c0:	2231      	movs	r2, #49	; 0x31
   1f8c2:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   1f8c4:	9b02      	ldr	r3, [sp, #8]
   1f8c6:	7a5a      	ldrb	r2, [r3, #9]
   1f8c8:	9b02      	ldr	r3, [sp, #8]
   1f8ca:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   1f8cc:	4b05      	ldr	r3, [pc, #20]	; (1f8e4 <hciEvtProcessLePerAdvReport+0xd8>)
   1f8ce:	689b      	ldr	r3, [r3, #8]
   1f8d0:	9802      	ldr	r0, [sp, #8]
   1f8d2:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   1f8d4:	9802      	ldr	r0, [sp, #8]
   1f8d6:	f7f8 fd77 	bl	183c8 <WsfBufFree>
   1f8da:	e000      	b.n	1f8de <hciEvtProcessLePerAdvReport+0xd2>
    return;
   1f8dc:	bf00      	nop
  }
}
   1f8de:	b005      	add	sp, #20
   1f8e0:	f85d fb04 	ldr.w	pc, [sp], #4
   1f8e4:	10009670 	.word	0x10009670

0001f8e8 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f8e8:	b084      	sub	sp, #16
   1f8ea:	9003      	str	r0, [sp, #12]
   1f8ec:	9102      	str	r1, [sp, #8]
   1f8ee:	4613      	mov	r3, r2
   1f8f0:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   1f8f4:	9b02      	ldr	r3, [sp, #8]
   1f8f6:	1c5a      	adds	r2, r3, #1
   1f8f8:	9202      	str	r2, [sp, #8]
   1f8fa:	781a      	ldrb	r2, [r3, #0]
   1f8fc:	9b03      	ldr	r3, [sp, #12]
   1f8fe:	70da      	strb	r2, [r3, #3]
}
   1f900:	bf00      	nop
   1f902:	b004      	add	sp, #16
   1f904:	4770      	bx	lr

0001f906 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f906:	b084      	sub	sp, #16
   1f908:	9003      	str	r0, [sp, #12]
   1f90a:	9102      	str	r1, [sp, #8]
   1f90c:	4613      	mov	r3, r2
   1f90e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   1f912:	9b02      	ldr	r3, [sp, #8]
   1f914:	781b      	ldrb	r3, [r3, #0]
   1f916:	b29a      	uxth	r2, r3
   1f918:	9b02      	ldr	r3, [sp, #8]
   1f91a:	3301      	adds	r3, #1
   1f91c:	781b      	ldrb	r3, [r3, #0]
   1f91e:	b29b      	uxth	r3, r3
   1f920:	021b      	lsls	r3, r3, #8
   1f922:	b29b      	uxth	r3, r3
   1f924:	4413      	add	r3, r2
   1f926:	b29a      	uxth	r2, r3
   1f928:	9b03      	ldr	r3, [sp, #12]
   1f92a:	809a      	strh	r2, [r3, #4]
   1f92c:	9b02      	ldr	r3, [sp, #8]
   1f92e:	3302      	adds	r3, #2
   1f930:	9302      	str	r3, [sp, #8]
}
   1f932:	bf00      	nop
   1f934:	b004      	add	sp, #16
   1f936:	4770      	bx	lr

0001f938 <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   1f938:	b500      	push	{lr}
   1f93a:	b085      	sub	sp, #20
   1f93c:	9001      	str	r0, [sp, #4]
   1f93e:	460b      	mov	r3, r1
   1f940:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   1f944:	9b01      	ldr	r3, [sp, #4]
   1f946:	1c5a      	adds	r2, r3, #1
   1f948:	9201      	str	r2, [sp, #4]
   1f94a:	781b      	ldrb	r3, [r3, #0]
   1f94c:	f88d 300f 	strb.w	r3, [sp, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   1f950:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f954:	2b0f      	cmp	r3, #15
   1f956:	d850      	bhi.n	1f9fa <hciEvtProcessLeDirectAdvReport+0xc2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   1f958:	201c      	movs	r0, #28
   1f95a:	f7f8 fcef 	bl	1833c <WsfBufAlloc>
   1f95e:	9002      	str	r0, [sp, #8]
   1f960:	9b02      	ldr	r3, [sp, #8]
   1f962:	2b00      	cmp	r3, #0
   1f964:	d04a      	beq.n	1f9fc <hciEvtProcessLeDirectAdvReport+0xc4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   1f966:	e03d      	b.n	1f9e4 <hciEvtProcessLeDirectAdvReport+0xac>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   1f968:	9b01      	ldr	r3, [sp, #4]
   1f96a:	1c5a      	adds	r2, r3, #1
   1f96c:	9201      	str	r2, [sp, #4]
   1f96e:	781a      	ldrb	r2, [r3, #0]
   1f970:	9b02      	ldr	r3, [sp, #8]
   1f972:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   1f974:	9b01      	ldr	r3, [sp, #4]
   1f976:	1c5a      	adds	r2, r3, #1
   1f978:	9201      	str	r2, [sp, #4]
   1f97a:	781a      	ldrb	r2, [r3, #0]
   1f97c:	9b02      	ldr	r3, [sp, #8]
   1f97e:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   1f980:	9b02      	ldr	r3, [sp, #8]
   1f982:	330c      	adds	r3, #12
   1f984:	9901      	ldr	r1, [sp, #4]
   1f986:	4618      	mov	r0, r3
   1f988:	f7fb fc9e 	bl	1b2c8 <BdaCpy>
   1f98c:	9b01      	ldr	r3, [sp, #4]
   1f98e:	3306      	adds	r3, #6
   1f990:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   1f992:	9b01      	ldr	r3, [sp, #4]
   1f994:	1c5a      	adds	r2, r3, #1
   1f996:	9201      	str	r2, [sp, #4]
   1f998:	781a      	ldrb	r2, [r3, #0]
   1f99a:	9b02      	ldr	r3, [sp, #8]
   1f99c:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   1f99e:	9b02      	ldr	r3, [sp, #8]
   1f9a0:	3313      	adds	r3, #19
   1f9a2:	9901      	ldr	r1, [sp, #4]
   1f9a4:	4618      	mov	r0, r3
   1f9a6:	f7fb fc8f 	bl	1b2c8 <BdaCpy>
   1f9aa:	9b01      	ldr	r3, [sp, #4]
   1f9ac:	3306      	adds	r3, #6
   1f9ae:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   1f9b0:	9b01      	ldr	r3, [sp, #4]
   1f9b2:	1c5a      	adds	r2, r3, #1
   1f9b4:	9201      	str	r2, [sp, #4]
   1f9b6:	781b      	ldrb	r3, [r3, #0]
   1f9b8:	b25a      	sxtb	r2, r3
   1f9ba:	9b02      	ldr	r3, [sp, #8]
   1f9bc:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   1f9be:	9b02      	ldr	r3, [sp, #8]
   1f9c0:	2200      	movs	r2, #0
   1f9c2:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   1f9c4:	9b02      	ldr	r3, [sp, #8]
   1f9c6:	2200      	movs	r2, #0
   1f9c8:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   1f9ca:	9b02      	ldr	r3, [sp, #8]
   1f9cc:	2200      	movs	r2, #0
   1f9ce:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   1f9d0:	9b02      	ldr	r3, [sp, #8]
   1f9d2:	2206      	movs	r2, #6
   1f9d4:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1f9d6:	9b02      	ldr	r3, [sp, #8]
   1f9d8:	2200      	movs	r2, #0
   1f9da:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   1f9dc:	4b09      	ldr	r3, [pc, #36]	; (1fa04 <hciEvtProcessLeDirectAdvReport+0xcc>)
   1f9de:	689b      	ldr	r3, [r3, #8]
   1f9e0:	9802      	ldr	r0, [sp, #8]
   1f9e2:	4798      	blx	r3
    while (i-- > 0)
   1f9e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f9e8:	1e5a      	subs	r2, r3, #1
   1f9ea:	f88d 200f 	strb.w	r2, [sp, #15]
   1f9ee:	2b00      	cmp	r3, #0
   1f9f0:	d1ba      	bne.n	1f968 <hciEvtProcessLeDirectAdvReport+0x30>
    }

    /* free buffer */
    WsfBufFree(pMsg);
   1f9f2:	9802      	ldr	r0, [sp, #8]
   1f9f4:	f7f8 fce8 	bl	183c8 <WsfBufFree>
   1f9f8:	e000      	b.n	1f9fc <hciEvtProcessLeDirectAdvReport+0xc4>
    return;
   1f9fa:	bf00      	nop
  }
}
   1f9fc:	b005      	add	sp, #20
   1f9fe:	f85d fb04 	ldr.w	pc, [sp], #4
   1fa02:	bf00      	nop
   1fa04:	10009670 	.word	0x10009670

0001fa08 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   1fa08:	b082      	sub	sp, #8
   1fa0a:	4603      	mov	r3, r0
   1fa0c:	460a      	mov	r2, r1
   1fa0e:	f88d 3007 	strb.w	r3, [sp, #7]
   1fa12:	4613      	mov	r3, r2
   1fa14:	f8ad 3004 	strh.w	r3, [sp, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   1fa18:	bf00      	nop
   1fa1a:	b002      	add	sp, #8
   1fa1c:	4770      	bx	lr

0001fa1e <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   1fa1e:	b500      	push	{lr}
   1fa20:	b085      	sub	sp, #20
   1fa22:	9001      	str	r0, [sp, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   1fa24:	9b01      	ldr	r3, [sp, #4]
   1fa26:	1c5a      	adds	r2, r3, #1
   1fa28:	9201      	str	r2, [sp, #4]
   1fa2a:	781b      	ldrb	r3, [r3, #0]
   1fa2c:	f88d 300f 	strb.w	r3, [sp, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   1fa30:	9b01      	ldr	r3, [sp, #4]
   1fa32:	1c5a      	adds	r2, r3, #1
   1fa34:	9201      	str	r2, [sp, #4]
   1fa36:	781b      	ldrb	r3, [r3, #0]
   1fa38:	f88d 300e 	strb.w	r3, [sp, #14]
  BSTREAM_TO_UINT16(opcode, p);
   1fa3c:	9b01      	ldr	r3, [sp, #4]
   1fa3e:	781b      	ldrb	r3, [r3, #0]
   1fa40:	b29a      	uxth	r2, r3
   1fa42:	9b01      	ldr	r3, [sp, #4]
   1fa44:	3301      	adds	r3, #1
   1fa46:	781b      	ldrb	r3, [r3, #0]
   1fa48:	b29b      	uxth	r3, r3
   1fa4a:	021b      	lsls	r3, r3, #8
   1fa4c:	b29b      	uxth	r3, r3
   1fa4e:	4413      	add	r3, r2
   1fa50:	f8ad 300c 	strh.w	r3, [sp, #12]
   1fa54:	9b01      	ldr	r3, [sp, #4]
   1fa56:	3302      	adds	r3, #2
   1fa58:	9301      	str	r3, [sp, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   1fa5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1fa5e:	2b00      	cmp	r3, #0
   1fa60:	d007      	beq.n	1fa72 <hciEvtProcessCmdStatus+0x54>
  {
    hciEvtCmdStatusFailure(status, opcode);
   1fa62:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1fa66:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1fa6a:	4611      	mov	r1, r2
   1fa6c:	4618      	mov	r0, r3
   1fa6e:	f7ff ffcb 	bl	1fa08 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   1fa72:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1fa76:	4618      	mov	r0, r3
   1fa78:	f7fd f99c 	bl	1cdb4 <hciCmdRecvCmpl>
}
   1fa7c:	bf00      	nop
   1fa7e:	b005      	add	sp, #20
   1fa80:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa84 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   1fa84:	b500      	push	{lr}
   1fa86:	b087      	sub	sp, #28
   1fa88:	9001      	str	r0, [sp, #4]
   1fa8a:	460b      	mov	r3, r1
   1fa8c:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   1fa90:	2300      	movs	r3, #0
   1fa92:	f88d 3017 	strb.w	r3, [sp, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   1fa96:	4bb9      	ldr	r3, [pc, #740]	; (1fd7c <hciEvtProcessCmdCmpl+0x2f8>)
   1fa98:	689b      	ldr	r3, [r3, #8]
   1fa9a:	9304      	str	r3, [sp, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   1fa9c:	9b01      	ldr	r3, [sp, #4]
   1fa9e:	1c5a      	adds	r2, r3, #1
   1faa0:	9201      	str	r2, [sp, #4]
   1faa2:	781b      	ldrb	r3, [r3, #0]
   1faa4:	f88d 300f 	strb.w	r3, [sp, #15]
  BSTREAM_TO_UINT16(opcode, p);
   1faa8:	9b01      	ldr	r3, [sp, #4]
   1faaa:	781b      	ldrb	r3, [r3, #0]
   1faac:	b29a      	uxth	r2, r3
   1faae:	9b01      	ldr	r3, [sp, #4]
   1fab0:	3301      	adds	r3, #1
   1fab2:	781b      	ldrb	r3, [r3, #0]
   1fab4:	b29b      	uxth	r3, r3
   1fab6:	021b      	lsls	r3, r3, #8
   1fab8:	b29b      	uxth	r3, r3
   1faba:	4413      	add	r3, r2
   1fabc:	f8ad 300c 	strh.w	r3, [sp, #12]
   1fac0:	9b01      	ldr	r3, [sp, #4]
   1fac2:	3302      	adds	r3, #2
   1fac4:	9301      	str	r3, [sp, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   1fac6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1faca:	f242 0222 	movw	r2, #8226	; 0x2022
   1face:	4293      	cmp	r3, r2
   1fad0:	f000 80b3 	beq.w	1fc3a <hciEvtProcessCmdCmpl+0x1b6>
   1fad4:	f242 0222 	movw	r2, #8226	; 0x2022
   1fad8:	4293      	cmp	r3, r2
   1fada:	dc4b      	bgt.n	1fb74 <hciEvtProcessCmdCmpl+0xf0>
   1fadc:	f242 0215 	movw	r2, #8213	; 0x2015
   1fae0:	4293      	cmp	r3, r2
   1fae2:	f000 80c1 	beq.w	1fc68 <hciEvtProcessCmdCmpl+0x1e4>
   1fae6:	f242 0215 	movw	r2, #8213	; 0x2015
   1faea:	4293      	cmp	r3, r2
   1faec:	dc22      	bgt.n	1fb34 <hciEvtProcessCmdCmpl+0xb0>
   1faee:	f241 4205 	movw	r2, #5125	; 0x1405
   1faf2:	4293      	cmp	r3, r2
   1faf4:	f000 80bc 	beq.w	1fc70 <hciEvtProcessCmdCmpl+0x1ec>
   1faf8:	f241 4205 	movw	r2, #5125	; 0x1405
   1fafc:	4293      	cmp	r3, r2
   1fafe:	dc0a      	bgt.n	1fb16 <hciEvtProcessCmdCmpl+0x92>
   1fb00:	f640 422d 	movw	r2, #3117	; 0xc2d
   1fb04:	4293      	cmp	r3, r2
   1fb06:	f000 80b7 	beq.w	1fc78 <hciEvtProcessCmdCmpl+0x1f4>
   1fb0a:	f640 427c 	movw	r2, #3196	; 0xc7c
   1fb0e:	4293      	cmp	r3, r2
   1fb10:	f000 80ce 	beq.w	1fcb0 <hciEvtProcessCmdCmpl+0x22c>
   1fb14:	e0ec      	b.n	1fcf0 <hciEvtProcessCmdCmpl+0x26c>
   1fb16:	f242 020c 	movw	r2, #8204	; 0x200c
   1fb1a:	4293      	cmp	r3, r2
   1fb1c:	f000 80d4 	beq.w	1fcc8 <hciEvtProcessCmdCmpl+0x244>
   1fb20:	f242 020e 	movw	r2, #8206	; 0x200e
   1fb24:	4293      	cmp	r3, r2
   1fb26:	d06d      	beq.n	1fc04 <hciEvtProcessCmdCmpl+0x180>
   1fb28:	f242 020a 	movw	r2, #8202	; 0x200a
   1fb2c:	4293      	cmp	r3, r2
   1fb2e:	f000 80cf 	beq.w	1fcd0 <hciEvtProcessCmdCmpl+0x24c>
   1fb32:	e0dd      	b.n	1fcf0 <hciEvtProcessCmdCmpl+0x26c>
   1fb34:	f242 021a 	movw	r2, #8218	; 0x201a
   1fb38:	4293      	cmp	r3, r2
   1fb3a:	f000 8086 	beq.w	1fc4a <hciEvtProcessCmdCmpl+0x1c6>
   1fb3e:	f242 021a 	movw	r2, #8218	; 0x201a
   1fb42:	4293      	cmp	r3, r2
   1fb44:	dc09      	bgt.n	1fb5a <hciEvtProcessCmdCmpl+0xd6>
   1fb46:	f242 0217 	movw	r2, #8215	; 0x2017
   1fb4a:	4293      	cmp	r3, r2
   1fb4c:	d05e      	beq.n	1fc0c <hciEvtProcessCmdCmpl+0x188>
   1fb4e:	f242 0218 	movw	r2, #8216	; 0x2018
   1fb52:	4293      	cmp	r3, r2
   1fb54:	f000 8081 	beq.w	1fc5a <hciEvtProcessCmdCmpl+0x1d6>
   1fb58:	e0ca      	b.n	1fcf0 <hciEvtProcessCmdCmpl+0x26c>
   1fb5a:	f242 0220 	movw	r2, #8224	; 0x2020
   1fb5e:	4293      	cmp	r3, r2
   1fb60:	d05b      	beq.n	1fc1a <hciEvtProcessCmdCmpl+0x196>
   1fb62:	f242 0220 	movw	r2, #8224	; 0x2020
   1fb66:	4293      	cmp	r3, r2
   1fb68:	dc5b      	bgt.n	1fc22 <hciEvtProcessCmdCmpl+0x19e>
   1fb6a:	f242 021b 	movw	r2, #8219	; 0x201b
   1fb6e:	4293      	cmp	r3, r2
   1fb70:	d06f      	beq.n	1fc52 <hciEvtProcessCmdCmpl+0x1ce>
   1fb72:	e0bd      	b.n	1fcf0 <hciEvtProcessCmdCmpl+0x26c>
   1fb74:	f242 022c 	movw	r2, #8236	; 0x202c
   1fb78:	4293      	cmp	r3, r2
   1fb7a:	f000 8091 	beq.w	1fca0 <hciEvtProcessCmdCmpl+0x21c>
   1fb7e:	f242 022c 	movw	r2, #8236	; 0x202c
   1fb82:	4293      	cmp	r3, r2
   1fb84:	dc1d      	bgt.n	1fbc2 <hciEvtProcessCmdCmpl+0x13e>
   1fb86:	f242 0227 	movw	r2, #8231	; 0x2027
   1fb8a:	4293      	cmp	r3, r2
   1fb8c:	d078      	beq.n	1fc80 <hciEvtProcessCmdCmpl+0x1fc>
   1fb8e:	f242 0227 	movw	r2, #8231	; 0x2027
   1fb92:	4293      	cmp	r3, r2
   1fb94:	dc08      	bgt.n	1fba8 <hciEvtProcessCmdCmpl+0x124>
   1fb96:	f242 0223 	movw	r2, #8227	; 0x2023
   1fb9a:	4293      	cmp	r3, r2
   1fb9c:	d045      	beq.n	1fc2a <hciEvtProcessCmdCmpl+0x1a6>
   1fb9e:	f242 0224 	movw	r2, #8228	; 0x2024
   1fba2:	4293      	cmp	r3, r2
   1fba4:	d045      	beq.n	1fc32 <hciEvtProcessCmdCmpl+0x1ae>
   1fba6:	e0a3      	b.n	1fcf0 <hciEvtProcessCmdCmpl+0x26c>
   1fba8:	f242 0229 	movw	r2, #8233	; 0x2029
   1fbac:	4293      	cmp	r3, r2
   1fbae:	d06f      	beq.n	1fc90 <hciEvtProcessCmdCmpl+0x20c>
   1fbb0:	f242 0229 	movw	r2, #8233	; 0x2029
   1fbb4:	4293      	cmp	r3, r2
   1fbb6:	db67      	blt.n	1fc88 <hciEvtProcessCmdCmpl+0x204>
   1fbb8:	f242 022b 	movw	r2, #8235	; 0x202b
   1fbbc:	4293      	cmp	r3, r2
   1fbbe:	d06b      	beq.n	1fc98 <hciEvtProcessCmdCmpl+0x214>
   1fbc0:	e096      	b.n	1fcf0 <hciEvtProcessCmdCmpl+0x26c>
   1fbc2:	f242 0231 	movw	r2, #8241	; 0x2031
   1fbc6:	4293      	cmp	r3, r2
   1fbc8:	d07a      	beq.n	1fcc0 <hciEvtProcessCmdCmpl+0x23c>
   1fbca:	f242 0231 	movw	r2, #8241	; 0x2031
   1fbce:	4293      	cmp	r3, r2
   1fbd0:	dc0c      	bgt.n	1fbec <hciEvtProcessCmdCmpl+0x168>
   1fbd2:	f242 022f 	movw	r2, #8239	; 0x202f
   1fbd6:	4293      	cmp	r3, r2
   1fbd8:	d033      	beq.n	1fc42 <hciEvtProcessCmdCmpl+0x1be>
   1fbda:	f242 022f 	movw	r2, #8239	; 0x202f
   1fbde:	4293      	cmp	r3, r2
   1fbe0:	dc6a      	bgt.n	1fcb8 <hciEvtProcessCmdCmpl+0x234>
   1fbe2:	f242 022d 	movw	r2, #8237	; 0x202d
   1fbe6:	4293      	cmp	r3, r2
   1fbe8:	d05e      	beq.n	1fca8 <hciEvtProcessCmdCmpl+0x224>
   1fbea:	e081      	b.n	1fcf0 <hciEvtProcessCmdCmpl+0x26c>
   1fbec:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
   1fbf0:	d07a      	beq.n	1fce8 <hciEvtProcessCmdCmpl+0x264>
   1fbf2:	f242 0242 	movw	r2, #8258	; 0x2042
   1fbf6:	4293      	cmp	r3, r2
   1fbf8:	d06e      	beq.n	1fcd8 <hciEvtProcessCmdCmpl+0x254>
   1fbfa:	f242 0239 	movw	r2, #8249	; 0x2039
   1fbfe:	4293      	cmp	r3, r2
   1fc00:	d06e      	beq.n	1fce0 <hciEvtProcessCmdCmpl+0x25c>
   1fc02:	e075      	b.n	1fcf0 <hciEvtProcessCmdCmpl+0x26c>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   1fc04:	2305      	movs	r3, #5
   1fc06:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc0a:	e083      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   1fc0c:	231b      	movs	r3, #27
   1fc0e:	f88d 3017 	strb.w	r3, [sp, #23]
    cback = hciCb.secCback;
   1fc12:	4b5a      	ldr	r3, [pc, #360]	; (1fd7c <hciEvtProcessCmdCmpl+0x2f8>)
   1fc14:	68db      	ldr	r3, [r3, #12]
   1fc16:	9304      	str	r3, [sp, #16]
    break;
   1fc18:	e07c      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   1fc1a:	231d      	movs	r3, #29
   1fc1c:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc20:	e078      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   1fc22:	231e      	movs	r3, #30
   1fc24:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc28:	e074      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   1fc2a:	231f      	movs	r3, #31
   1fc2c:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc30:	e070      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   1fc32:	2320      	movs	r3, #32
   1fc34:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc38:	e06c      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   1fc3a:	2321      	movs	r3, #33	; 0x21
   1fc3c:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc40:	e068      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   1fc42:	2322      	movs	r3, #34	; 0x22
   1fc44:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc48:	e064      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   1fc4a:	230c      	movs	r3, #12
   1fc4c:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc50:	e060      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   1fc52:	230d      	movs	r3, #13
   1fc54:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc58:	e05c      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   1fc5a:	231c      	movs	r3, #28
   1fc5c:	f88d 3017 	strb.w	r3, [sp, #23]
    cback = hciCb.secCback;
   1fc60:	4b46      	ldr	r3, [pc, #280]	; (1fd7c <hciEvtProcessCmdCmpl+0x2f8>)
   1fc62:	68db      	ldr	r3, [r3, #12]
   1fc64:	9304      	str	r3, [sp, #16]
    break;
   1fc66:	e055      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   1fc68:	2308      	movs	r3, #8
   1fc6a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc6e:	e051      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   1fc70:	2307      	movs	r3, #7
   1fc72:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc76:	e04d      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   1fc78:	2309      	movs	r3, #9
   1fc7a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc7e:	e049      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   1fc80:	2315      	movs	r3, #21
   1fc82:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc86:	e045      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   1fc88:	2316      	movs	r3, #22
   1fc8a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc8e:	e041      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   1fc90:	2317      	movs	r3, #23
   1fc92:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc96:	e03d      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   1fc98:	2318      	movs	r3, #24
   1fc9a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fc9e:	e039      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   1fca0:	2319      	movs	r3, #25
   1fca2:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fca6:	e035      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   1fca8:	231a      	movs	r3, #26
   1fcaa:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fcae:	e031      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   1fcb0:	2327      	movs	r3, #39	; 0x27
   1fcb2:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fcb6:	e02d      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   1fcb8:	2329      	movs	r3, #41	; 0x29
   1fcba:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fcbe:	e029      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   1fcc0:	232a      	movs	r3, #42	; 0x2a
   1fcc2:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fcc6:	e025      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   1fcc8:	2334      	movs	r3, #52	; 0x34
   1fcca:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fcce:	e021      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   1fcd0:	2335      	movs	r3, #53	; 0x35
   1fcd2:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fcd6:	e01d      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   1fcd8:	2336      	movs	r3, #54	; 0x36
   1fcda:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fcde:	e019      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   1fce0:	2337      	movs	r3, #55	; 0x37
   1fce2:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fce6:	e015      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   1fce8:	2338      	movs	r3, #56	; 0x38
   1fcea:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1fcee:	e011      	b.n	1fd14 <hciEvtProcessCmdCmpl+0x290>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   1fcf0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1fcf4:	0a9b      	lsrs	r3, r3, #10
   1fcf6:	b29b      	uxth	r3, r3
   1fcf8:	2b3f      	cmp	r3, #63	; 0x3f
   1fcfa:	d10a      	bne.n	1fd12 <hciEvtProcessCmdCmpl+0x28e>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   1fcfc:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1fd00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1fd04:	9901      	ldr	r1, [sp, #4]
   1fd06:	4618      	mov	r0, r3
   1fd08:	f000 fd30 	bl	2076c <hciCoreVsCmdCmplRcvd>
   1fd0c:	4603      	mov	r3, r0
   1fd0e:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    break;
   1fd12:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   1fd14:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1fd18:	2b00      	cmp	r3, #0
   1fd1a:	d025      	beq.n	1fd68 <hciEvtProcessCmdCmpl+0x2e4>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   1fd1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1fd20:	4a17      	ldr	r2, [pc, #92]	; (1fd80 <hciEvtProcessCmdCmpl+0x2fc>)
   1fd22:	5cd3      	ldrb	r3, [r2, r3]
   1fd24:	b29b      	uxth	r3, r3
   1fd26:	4618      	mov	r0, r3
   1fd28:	f7f8 fb08 	bl	1833c <WsfBufAlloc>
   1fd2c:	9002      	str	r0, [sp, #8]
   1fd2e:	9b02      	ldr	r3, [sp, #8]
   1fd30:	2b00      	cmp	r3, #0
   1fd32:	d019      	beq.n	1fd68 <hciEvtProcessCmdCmpl+0x2e4>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   1fd34:	9b02      	ldr	r3, [sp, #8]
   1fd36:	2200      	movs	r2, #0
   1fd38:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   1fd3a:	9b02      	ldr	r3, [sp, #8]
   1fd3c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1fd40:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1fd42:	9b02      	ldr	r3, [sp, #8]
   1fd44:	2200      	movs	r2, #0
   1fd46:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   1fd48:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1fd4c:	4a0d      	ldr	r2, [pc, #52]	; (1fd84 <hciEvtProcessCmdCmpl+0x300>)
   1fd4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1fd52:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1fd56:	9901      	ldr	r1, [sp, #4]
   1fd58:	9802      	ldr	r0, [sp, #8]
   1fd5a:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   1fd5c:	9b04      	ldr	r3, [sp, #16]
   1fd5e:	9802      	ldr	r0, [sp, #8]
   1fd60:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   1fd62:	9802      	ldr	r0, [sp, #8]
   1fd64:	f7f8 fb30 	bl	183c8 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   1fd68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1fd6c:	4618      	mov	r0, r3
   1fd6e:	f7fd f821 	bl	1cdb4 <hciCmdRecvCmpl>
}
   1fd72:	bf00      	nop
   1fd74:	b007      	add	sp, #28
   1fd76:	f85d fb04 	ldr.w	pc, [sp], #4
   1fd7a:	bf00      	nop
   1fd7c:	10009670 	.word	0x10009670
   1fd80:	00029be4 	.word	0x00029be4
   1fd84:	00029b00 	.word	0x00029b00

0001fd88 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   1fd88:	b500      	push	{lr}
   1fd8a:	b089      	sub	sp, #36	; 0x24
   1fd8c:	9001      	str	r0, [sp, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   1fd8e:	2300      	movs	r3, #0
   1fd90:	f88d 301f 	strb.w	r3, [sp, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   1fd94:	4bb3      	ldr	r3, [pc, #716]	; (20064 <hciEvtProcessMsg+0x2dc>)
   1fd96:	689b      	ldr	r3, [r3, #8]
   1fd98:	9306      	str	r3, [sp, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   1fd9a:	9b01      	ldr	r3, [sp, #4]
   1fd9c:	1c5a      	adds	r2, r3, #1
   1fd9e:	9201      	str	r2, [sp, #4]
   1fda0:	781b      	ldrb	r3, [r3, #0]
   1fda2:	f88d 3017 	strb.w	r3, [sp, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   1fda6:	9b01      	ldr	r3, [sp, #4]
   1fda8:	1c5a      	adds	r2, r3, #1
   1fdaa:	9201      	str	r2, [sp, #4]
   1fdac:	781b      	ldrb	r3, [r3, #0]
   1fdae:	f88d 3016 	strb.w	r3, [sp, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   1fdb2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1fdb6:	2b10      	cmp	r3, #16
   1fdb8:	f000 813f 	beq.w	2003a <hciEvtProcessMsg+0x2b2>
   1fdbc:	2b10      	cmp	r3, #16
   1fdbe:	dc10      	bgt.n	1fde2 <hciEvtProcessMsg+0x5a>
   1fdc0:	2b0c      	cmp	r3, #12
   1fdc2:	f000 811f 	beq.w	20004 <hciEvtProcessMsg+0x27c>
   1fdc6:	2b0c      	cmp	r3, #12
   1fdc8:	dc06      	bgt.n	1fdd8 <hciEvtProcessMsg+0x50>
   1fdca:	2b05      	cmp	r3, #5
   1fdcc:	f000 8106 	beq.w	1ffdc <hciEvtProcessMsg+0x254>
   1fdd0:	2b08      	cmp	r3, #8
   1fdd2:	f000 810d 	beq.w	1fff0 <hciEvtProcessMsg+0x268>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   1fdd6:	e153      	b.n	20080 <hciEvtProcessMsg+0x2f8>
  switch (evt)
   1fdd8:	2b0e      	cmp	r3, #14
   1fdda:	d020      	beq.n	1fe1e <hciEvtProcessMsg+0x96>
   1fddc:	2b0f      	cmp	r3, #15
   1fdde:	d014      	beq.n	1fe0a <hciEvtProcessMsg+0x82>
      break;
   1fde0:	e14e      	b.n	20080 <hciEvtProcessMsg+0x2f8>
  switch (evt)
   1fde2:	2b30      	cmp	r3, #48	; 0x30
   1fde4:	f000 8118 	beq.w	20018 <hciEvtProcessMsg+0x290>
   1fde8:	2b30      	cmp	r3, #48	; 0x30
   1fdea:	dc05      	bgt.n	1fdf8 <hciEvtProcessMsg+0x70>
   1fdec:	2b13      	cmp	r3, #19
   1fdee:	d023      	beq.n	1fe38 <hciEvtProcessMsg+0xb0>
   1fdf0:	2b1a      	cmp	r3, #26
   1fdf2:	f000 811b 	beq.w	2002c <hciEvtProcessMsg+0x2a4>
      break;
   1fdf6:	e143      	b.n	20080 <hciEvtProcessMsg+0x2f8>
  switch (evt)
   1fdf8:	2b57      	cmp	r3, #87	; 0x57
   1fdfa:	f000 8128 	beq.w	2004e <hciEvtProcessMsg+0x2c6>
   1fdfe:	2bff      	cmp	r3, #255	; 0xff
   1fe00:	f000 8134 	beq.w	2006c <hciEvtProcessMsg+0x2e4>
   1fe04:	2b3e      	cmp	r3, #62	; 0x3e
   1fe06:	d021      	beq.n	1fe4c <hciEvtProcessMsg+0xc4>
      break;
   1fe08:	e13a      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numCmdStatusEvt++;
   1fe0a:	4b97      	ldr	r3, [pc, #604]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fe0c:	891b      	ldrh	r3, [r3, #8]
   1fe0e:	3301      	adds	r3, #1
   1fe10:	b29a      	uxth	r2, r3
   1fe12:	4b95      	ldr	r3, [pc, #596]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fe14:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   1fe16:	9801      	ldr	r0, [sp, #4]
   1fe18:	f7ff fe01 	bl	1fa1e <hciEvtProcessCmdStatus>
      break;
   1fe1c:	e130      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numCmdCmplEvt++;
   1fe1e:	4b92      	ldr	r3, [pc, #584]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fe20:	88db      	ldrh	r3, [r3, #6]
   1fe22:	3301      	adds	r3, #1
   1fe24:	b29a      	uxth	r2, r3
   1fe26:	4b90      	ldr	r3, [pc, #576]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fe28:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   1fe2a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1fe2e:	4619      	mov	r1, r3
   1fe30:	9801      	ldr	r0, [sp, #4]
   1fe32:	f7ff fe27 	bl	1fa84 <hciEvtProcessCmdCmpl>
      break;
   1fe36:	e123      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciCoreNumCmplPkts(pEvt);
   1fe38:	9801      	ldr	r0, [sp, #4]
   1fe3a:	f7fe fa6f 	bl	1e31c <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   1fe3e:	4b8a      	ldr	r3, [pc, #552]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fe40:	899b      	ldrh	r3, [r3, #12]
   1fe42:	3301      	adds	r3, #1
   1fe44:	b29a      	uxth	r2, r3
   1fe46:	4b88      	ldr	r3, [pc, #544]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fe48:	819a      	strh	r2, [r3, #12]
      break;
   1fe4a:	e119      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   1fe4c:	9b01      	ldr	r3, [sp, #4]
   1fe4e:	1c5a      	adds	r2, r3, #1
   1fe50:	9201      	str	r2, [sp, #4]
   1fe52:	781b      	ldrb	r3, [r3, #0]
   1fe54:	f88d 3015 	strb.w	r3, [sp, #21]
      hciEvtStats.numLeMetaEvt++;
   1fe58:	4b83      	ldr	r3, [pc, #524]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fe5a:	8a5b      	ldrh	r3, [r3, #18]
   1fe5c:	3301      	adds	r3, #1
   1fe5e:	b29a      	uxth	r2, r3
   1fe60:	4b81      	ldr	r3, [pc, #516]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fe62:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   1fe64:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1fe68:	3b01      	subs	r3, #1
   1fe6a:	2b12      	cmp	r3, #18
   1fe6c:	f200 80b4 	bhi.w	1ffd8 <hciEvtProcessMsg+0x250>
   1fe70:	a201      	add	r2, pc, #4	; (adr r2, 1fe78 <hciEvtProcessMsg+0xf0>)
   1fe72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fe76:	bf00      	nop
   1fe78:	0001fec5 	.word	0x0001fec5
   1fe7c:	0001fef9 	.word	0x0001fef9
   1fe80:	0001ff07 	.word	0x0001ff07
   1fe84:	0001ff0f 	.word	0x0001ff0f
   1fe88:	0001ff17 	.word	0x0001ff17
   1fe8c:	0001ff61 	.word	0x0001ff61
   1fe90:	0001ff69 	.word	0x0001ff69
   1fe94:	0001ff71 	.word	0x0001ff71
   1fe98:	0001ff7f 	.word	0x0001ff7f
   1fe9c:	0001ff1f 	.word	0x0001ff1f
   1fea0:	0001ff53 	.word	0x0001ff53
   1fea4:	0001ff8d 	.word	0x0001ff8d
   1fea8:	0001ff95 	.word	0x0001ff95
   1feac:	0001ffbb 	.word	0x0001ffbb
   1feb0:	0001ffc3 	.word	0x0001ffc3
   1feb4:	0001ffd1 	.word	0x0001ffd1
   1feb8:	0001ffa3 	.word	0x0001ffa3
   1febc:	0001ffab 	.word	0x0001ffab
   1fec0:	0001ffb3 	.word	0x0001ffb3
          if (*pEvt == HCI_SUCCESS)
   1fec4:	9b01      	ldr	r3, [sp, #4]
   1fec6:	781b      	ldrb	r3, [r3, #0]
   1fec8:	2b00      	cmp	r3, #0
   1feca:	d111      	bne.n	1fef0 <hciEvtProcessMsg+0x168>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   1fecc:	9b01      	ldr	r3, [sp, #4]
   1fece:	3301      	adds	r3, #1
   1fed0:	781b      	ldrb	r3, [r3, #0]
   1fed2:	b29a      	uxth	r2, r3
   1fed4:	9b01      	ldr	r3, [sp, #4]
   1fed6:	3302      	adds	r3, #2
   1fed8:	781b      	ldrb	r3, [r3, #0]
   1feda:	b29b      	uxth	r3, r3
   1fedc:	021b      	lsls	r3, r3, #8
   1fede:	b29b      	uxth	r3, r3
   1fee0:	4413      	add	r3, r2
   1fee2:	f8ad 3012 	strh.w	r3, [sp, #18]
            hciCoreConnOpen(handle);
   1fee6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1feea:	4618      	mov	r0, r3
   1feec:	f7fd fe68 	bl	1dbc0 <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   1fef0:	2301      	movs	r3, #1
   1fef2:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1fef6:	e070      	b.n	1ffda <hciEvtProcessMsg+0x252>
          hciEvtProcessLeAdvReport(pEvt, len);
   1fef8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1fefc:	4619      	mov	r1, r3
   1fefe:	9801      	ldr	r0, [sp, #4]
   1ff00:	f7ff fa6e 	bl	1f3e0 <hciEvtProcessLeAdvReport>
          break;
   1ff04:	e069      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   1ff06:	2304      	movs	r3, #4
   1ff08:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff0c:	e065      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   1ff0e:	230b      	movs	r3, #11
   1ff10:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff14:	e061      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   1ff16:	2310      	movs	r3, #16
   1ff18:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff1c:	e05d      	b.n	1ffda <hciEvtProcessMsg+0x252>
          if (*pEvt == HCI_SUCCESS)
   1ff1e:	9b01      	ldr	r3, [sp, #4]
   1ff20:	781b      	ldrb	r3, [r3, #0]
   1ff22:	2b00      	cmp	r3, #0
   1ff24:	d111      	bne.n	1ff4a <hciEvtProcessMsg+0x1c2>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   1ff26:	9b01      	ldr	r3, [sp, #4]
   1ff28:	3301      	adds	r3, #1
   1ff2a:	781b      	ldrb	r3, [r3, #0]
   1ff2c:	b29a      	uxth	r2, r3
   1ff2e:	9b01      	ldr	r3, [sp, #4]
   1ff30:	3302      	adds	r3, #2
   1ff32:	781b      	ldrb	r3, [r3, #0]
   1ff34:	b29b      	uxth	r3, r3
   1ff36:	021b      	lsls	r3, r3, #8
   1ff38:	b29b      	uxth	r3, r3
   1ff3a:	4413      	add	r3, r2
   1ff3c:	f8ad 3012 	strh.w	r3, [sp, #18]
            hciCoreConnOpen(handle);
   1ff40:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1ff44:	4618      	mov	r0, r3
   1ff46:	f7fd fe3b 	bl	1dbc0 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   1ff4a:	2302      	movs	r3, #2
   1ff4c:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff50:	e043      	b.n	1ffda <hciEvtProcessMsg+0x252>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   1ff52:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1ff56:	4619      	mov	r1, r3
   1ff58:	9801      	ldr	r0, [sp, #4]
   1ff5a:	f7ff fced 	bl	1f938 <hciEvtProcessLeDirectAdvReport>
          break;
   1ff5e:	e03c      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   1ff60:	2323      	movs	r3, #35	; 0x23
   1ff62:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff66:	e038      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   1ff68:	2324      	movs	r3, #36	; 0x24
   1ff6a:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff6e:	e034      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cback = hciCb.secCback;
   1ff70:	4b3c      	ldr	r3, [pc, #240]	; (20064 <hciEvtProcessMsg+0x2dc>)
   1ff72:	68db      	ldr	r3, [r3, #12]
   1ff74:	9306      	str	r3, [sp, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   1ff76:	2325      	movs	r3, #37	; 0x25
   1ff78:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff7c:	e02d      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cback = hciCb.secCback;
   1ff7e:	4b39      	ldr	r3, [pc, #228]	; (20064 <hciEvtProcessMsg+0x2dc>)
   1ff80:	68db      	ldr	r3, [r3, #12]
   1ff82:	9306      	str	r3, [sp, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   1ff84:	2326      	movs	r3, #38	; 0x26
   1ff86:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff8a:	e026      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   1ff8c:	232b      	movs	r3, #43	; 0x2b
   1ff8e:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ff92:	e022      	b.n	1ffda <hciEvtProcessMsg+0x252>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   1ff94:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1ff98:	4619      	mov	r1, r3
   1ff9a:	9801      	ldr	r0, [sp, #4]
   1ff9c:	f7ff fa9c 	bl	1f4d8 <hciEvtProcessLeExtAdvReport>
          break;
   1ffa0:	e01b      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   1ffa2:	232d      	movs	r3, #45	; 0x2d
   1ffa4:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ffa8:	e017      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   1ffaa:	232e      	movs	r3, #46	; 0x2e
   1ffac:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ffb0:	e013      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   1ffb2:	232f      	movs	r3, #47	; 0x2f
   1ffb4:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ffb8:	e00f      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   1ffba:	2330      	movs	r3, #48	; 0x30
   1ffbc:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ffc0:	e00b      	b.n	1ffda <hciEvtProcessMsg+0x252>
          hciEvtProcessLePerAdvReport(pEvt, len);
   1ffc2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1ffc6:	4619      	mov	r1, r3
   1ffc8:	9801      	ldr	r0, [sp, #4]
   1ffca:	f7ff fc1f 	bl	1f80c <hciEvtProcessLePerAdvReport>
          break;
   1ffce:	e004      	b.n	1ffda <hciEvtProcessMsg+0x252>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   1ffd0:	2332      	movs	r3, #50	; 0x32
   1ffd2:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1ffd6:	e000      	b.n	1ffda <hciEvtProcessMsg+0x252>
          break;
   1ffd8:	bf00      	nop
      break;
   1ffda:	e051      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numDiscCmplEvt++;
   1ffdc:	4b22      	ldr	r3, [pc, #136]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1ffde:	881b      	ldrh	r3, [r3, #0]
   1ffe0:	3301      	adds	r3, #1
   1ffe2:	b29a      	uxth	r2, r3
   1ffe4:	4b20      	ldr	r3, [pc, #128]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1ffe6:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   1ffe8:	2303      	movs	r3, #3
   1ffea:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   1ffee:	e047      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numEncChangeEvt++;
   1fff0:	4b1d      	ldr	r3, [pc, #116]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fff2:	885b      	ldrh	r3, [r3, #2]
   1fff4:	3301      	adds	r3, #1
   1fff6:	b29a      	uxth	r2, r3
   1fff8:	4b1b      	ldr	r3, [pc, #108]	; (20068 <hciEvtProcessMsg+0x2e0>)
   1fffa:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   1fffc:	230f      	movs	r3, #15
   1fffe:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   20002:	e03d      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   20004:	4b18      	ldr	r3, [pc, #96]	; (20068 <hciEvtProcessMsg+0x2e0>)
   20006:	889b      	ldrh	r3, [r3, #4]
   20008:	3301      	adds	r3, #1
   2000a:	b29a      	uxth	r2, r3
   2000c:	4b16      	ldr	r3, [pc, #88]	; (20068 <hciEvtProcessMsg+0x2e0>)
   2000e:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   20010:	230a      	movs	r3, #10
   20012:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   20016:	e033      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   20018:	4b13      	ldr	r3, [pc, #76]	; (20068 <hciEvtProcessMsg+0x2e0>)
   2001a:	8a1b      	ldrh	r3, [r3, #16]
   2001c:	3301      	adds	r3, #1
   2001e:	b29a      	uxth	r2, r3
   20020:	4b11      	ldr	r3, [pc, #68]	; (20068 <hciEvtProcessMsg+0x2e0>)
   20022:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   20024:	230e      	movs	r3, #14
   20026:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   2002a:	e029      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numDataBufOverflowEvt++;
   2002c:	4b0e      	ldr	r3, [pc, #56]	; (20068 <hciEvtProcessMsg+0x2e0>)
   2002e:	89db      	ldrh	r3, [r3, #14]
   20030:	3301      	adds	r3, #1
   20032:	b29a      	uxth	r2, r3
   20034:	4b0c      	ldr	r3, [pc, #48]	; (20068 <hciEvtProcessMsg+0x2e0>)
   20036:	81da      	strh	r2, [r3, #14]
      break;
   20038:	e022      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numHwErrorEvt++;
   2003a:	4b0b      	ldr	r3, [pc, #44]	; (20068 <hciEvtProcessMsg+0x2e0>)
   2003c:	895b      	ldrh	r3, [r3, #10]
   2003e:	3301      	adds	r3, #1
   20040:	b29a      	uxth	r2, r3
   20042:	4b09      	ldr	r3, [pc, #36]	; (20068 <hciEvtProcessMsg+0x2e0>)
   20044:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   20046:	2314      	movs	r3, #20
   20048:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   2004c:	e018      	b.n	20080 <hciEvtProcessMsg+0x2f8>
      hciEvtStats.numAuthToEvt++;
   2004e:	4b06      	ldr	r3, [pc, #24]	; (20068 <hciEvtProcessMsg+0x2e0>)
   20050:	8adb      	ldrh	r3, [r3, #22]
   20052:	3301      	adds	r3, #1
   20054:	b29a      	uxth	r2, r3
   20056:	4b04      	ldr	r3, [pc, #16]	; (20068 <hciEvtProcessMsg+0x2e0>)
   20058:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   2005a:	2328      	movs	r3, #40	; 0x28
   2005c:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   20060:	e00e      	b.n	20080 <hciEvtProcessMsg+0x2f8>
   20062:	bf00      	nop
   20064:	10009670 	.word	0x10009670
   20068:	10004514 	.word	0x10004514
      hciEvtStats.numVendorSpecEvt++;
   2006c:	4b26      	ldr	r3, [pc, #152]	; (20108 <hciEvtProcessMsg+0x380>)
   2006e:	8a9b      	ldrh	r3, [r3, #20]
   20070:	3301      	adds	r3, #1
   20072:	b29a      	uxth	r2, r3
   20074:	4b24      	ldr	r3, [pc, #144]	; (20108 <hciEvtProcessMsg+0x380>)
   20076:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   20078:	2313      	movs	r3, #19
   2007a:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   2007e:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   20080:	f89d 301f 	ldrb.w	r3, [sp, #31]
   20084:	2b00      	cmp	r3, #0
   20086:	d03b      	beq.n	20100 <hciEvtProcessMsg+0x378>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   20088:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2008c:	4a1f      	ldr	r2, [pc, #124]	; (2010c <hciEvtProcessMsg+0x384>)
   2008e:	5cd3      	ldrb	r3, [r2, r3]
   20090:	b29b      	uxth	r3, r3
   20092:	4618      	mov	r0, r3
   20094:	f7f8 f952 	bl	1833c <WsfBufAlloc>
   20098:	9003      	str	r0, [sp, #12]
   2009a:	9b03      	ldr	r3, [sp, #12]
   2009c:	2b00      	cmp	r3, #0
   2009e:	d019      	beq.n	200d4 <hciEvtProcessMsg+0x34c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   200a0:	9b03      	ldr	r3, [sp, #12]
   200a2:	2200      	movs	r2, #0
   200a4:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   200a6:	9b03      	ldr	r3, [sp, #12]
   200a8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   200ac:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   200ae:	9b03      	ldr	r3, [sp, #12]
   200b0:	2200      	movs	r2, #0
   200b2:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   200b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
   200b8:	4a15      	ldr	r2, [pc, #84]	; (20110 <hciEvtProcessMsg+0x388>)
   200ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   200be:	f89d 2016 	ldrb.w	r2, [sp, #22]
   200c2:	9901      	ldr	r1, [sp, #4]
   200c4:	9803      	ldr	r0, [sp, #12]
   200c6:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   200c8:	9b06      	ldr	r3, [sp, #24]
   200ca:	9803      	ldr	r0, [sp, #12]
   200cc:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   200ce:	9803      	ldr	r0, [sp, #12]
   200d0:	f7f8 f97a 	bl	183c8 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   200d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
   200d8:	2b03      	cmp	r3, #3
   200da:	d111      	bne.n	20100 <hciEvtProcessMsg+0x378>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   200dc:	9b01      	ldr	r3, [sp, #4]
   200de:	3301      	adds	r3, #1
   200e0:	781b      	ldrb	r3, [r3, #0]
   200e2:	b29a      	uxth	r2, r3
   200e4:	9b01      	ldr	r3, [sp, #4]
   200e6:	3302      	adds	r3, #2
   200e8:	781b      	ldrb	r3, [r3, #0]
   200ea:	b29b      	uxth	r3, r3
   200ec:	021b      	lsls	r3, r3, #8
   200ee:	b29b      	uxth	r3, r3
   200f0:	4413      	add	r3, r2
   200f2:	f8ad 3012 	strh.w	r3, [sp, #18]
      hciCoreConnClose(handle);
   200f6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   200fa:	4618      	mov	r0, r3
   200fc:	f7fd fd6e 	bl	1dbdc <hciCoreConnClose>
    }
  }
}
   20100:	bf00      	nop
   20102:	b009      	add	sp, #36	; 0x24
   20104:	f85d fb04 	ldr.w	pc, [sp], #4
   20108:	10004514 	.word	0x10004514
   2010c:	00029be4 	.word	0x00029be4
   20110:	00029b00 	.word	0x00029b00

00020114 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   20114:	b500      	push	{lr}
   20116:	b085      	sub	sp, #20
   20118:	9001      	str	r0, [sp, #4]
   2011a:	9100      	str	r1, [sp, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   2011c:	9b00      	ldr	r3, [sp, #0]
   2011e:	3302      	adds	r3, #2
   20120:	781b      	ldrb	r3, [r3, #0]
   20122:	b29a      	uxth	r2, r3
   20124:	9b00      	ldr	r3, [sp, #0]
   20126:	3303      	adds	r3, #3
   20128:	781b      	ldrb	r3, [r3, #0]
   2012a:	b29b      	uxth	r3, r3
   2012c:	021b      	lsls	r3, r3, #8
   2012e:	b29b      	uxth	r3, r3
   20130:	4413      	add	r3, r2
   20132:	f8ad 300e 	strh.w	r3, [sp, #14]
  len += HCI_ACL_HDR_LEN;
   20136:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2013a:	3304      	adds	r3, #4
   2013c:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   20140:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   20144:	9a00      	ldr	r2, [sp, #0]
   20146:	4619      	mov	r1, r3
   20148:	2002      	movs	r0, #2
   2014a:	f7f9 f827 	bl	1919c <hciDrvWrite>
   2014e:	4603      	mov	r3, r0
   20150:	461a      	mov	r2, r3
   20152:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   20156:	4293      	cmp	r3, r2
   20158:	d103      	bne.n	20162 <hciTrSendAclData+0x4e>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   2015a:	9900      	ldr	r1, [sp, #0]
   2015c:	9801      	ldr	r0, [sp, #4]
   2015e:	f7fd fe8b 	bl	1de78 <hciCoreTxAclComplete>
  }
}
   20162:	bf00      	nop
   20164:	b005      	add	sp, #20
   20166:	f85d fb04 	ldr.w	pc, [sp], #4

0002016a <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   2016a:	b500      	push	{lr}
   2016c:	b085      	sub	sp, #20
   2016e:	9001      	str	r0, [sp, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   20170:	9b01      	ldr	r3, [sp, #4]
   20172:	3302      	adds	r3, #2
   20174:	781b      	ldrb	r3, [r3, #0]
   20176:	3303      	adds	r3, #3
   20178:	f88d 300f 	strb.w	r3, [sp, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   2017c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20180:	b29b      	uxth	r3, r3
   20182:	9a01      	ldr	r2, [sp, #4]
   20184:	4619      	mov	r1, r3
   20186:	2001      	movs	r0, #1
   20188:	f7f9 f808 	bl	1919c <hciDrvWrite>
   2018c:	4603      	mov	r3, r0
   2018e:	461a      	mov	r2, r3
   20190:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20194:	b29b      	uxth	r3, r3
   20196:	429a      	cmp	r2, r3
   20198:	d102      	bne.n	201a0 <hciTrSendCmd+0x36>
  {
    /* free buffer */
    WsfMsgFree(pData);
   2019a:	9801      	ldr	r0, [sp, #4]
   2019c:	f7f8 f981 	bl	184a2 <WsfMsgFree>
  }
}
   201a0:	bf00      	nop
   201a2:	b005      	add	sp, #20
   201a4:	f85d fb04 	ldr.w	pc, [sp], #4

000201a8 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   201a8:	b500      	push	{lr}
   201aa:	b085      	sub	sp, #20
   201ac:	9001      	str	r0, [sp, #4]
   201ae:	460b      	mov	r3, r1
   201b0:	f8ad 3002 	strh.w	r3, [sp, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   201b4:	2300      	movs	r3, #0
   201b6:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   201ba:	e10f      	b.n	203dc <hciTrSerialRxIncoming+0x234>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   201bc:	9b01      	ldr	r3, [sp, #4]
   201be:	781b      	ldrb	r3, [r3, #0]
   201c0:	f88d 3008 	strb.w	r3, [sp, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   201c4:	4b8b      	ldr	r3, [pc, #556]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   201c6:	781b      	ldrb	r3, [r3, #0]
   201c8:	2b00      	cmp	r3, #0
   201ca:	d11a      	bne.n	20202 <hciTrSerialRxIncoming+0x5a>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   201cc:	4a8a      	ldr	r2, [pc, #552]	; (203f8 <hciTrSerialRxIncoming+0x250>)
   201ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
   201d2:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   201d4:	4b89      	ldr	r3, [pc, #548]	; (203fc <hciTrSerialRxIncoming+0x254>)
   201d6:	2200      	movs	r2, #0
   201d8:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   201da:	4b86      	ldr	r3, [pc, #536]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   201dc:	2201      	movs	r2, #1
   201de:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   201e0:	4b87      	ldr	r3, [pc, #540]	; (20400 <hciTrSerialRxIncoming+0x258>)
   201e2:	2201      	movs	r2, #1
   201e4:	701a      	strb	r2, [r3, #0]
      pBuf++;
   201e6:	9b01      	ldr	r3, [sp, #4]
   201e8:	3301      	adds	r3, #1
   201ea:	9301      	str	r3, [sp, #4]
      consumed_bytes++;
   201ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   201f0:	3301      	adds	r3, #1
   201f2:	f8ad 300e 	strh.w	r3, [sp, #14]
      len--;
   201f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   201fa:	3b01      	subs	r3, #1
   201fc:	f8ad 3002 	strh.w	r3, [sp, #2]
   20200:	e0d6      	b.n	203b0 <hciTrSerialRxIncoming+0x208>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   20202:	4b7c      	ldr	r3, [pc, #496]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   20204:	781b      	ldrb	r3, [r3, #0]
   20206:	2b01      	cmp	r3, #1
   20208:	f040 80ac 	bne.w	20364 <hciTrSerialRxIncoming+0x1bc>
    {
      uint8_t  hdrLen = 0;
   2020c:	2300      	movs	r3, #0
   2020e:	f88d 300d 	strb.w	r3, [sp, #13]
      uint16_t dataLen = 0;
   20212:	2300      	movs	r3, #0
   20214:	f8ad 300a 	strh.w	r3, [sp, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   20218:	4b77      	ldr	r3, [pc, #476]	; (203f8 <hciTrSerialRxIncoming+0x250>)
   2021a:	781b      	ldrb	r3, [r3, #0]
   2021c:	2b04      	cmp	r3, #4
   2021e:	d103      	bne.n	20228 <hciTrSerialRxIncoming+0x80>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   20220:	2302      	movs	r3, #2
   20222:	f88d 300d 	strb.w	r3, [sp, #13]
   20226:	e00a      	b.n	2023e <hciTrSerialRxIncoming+0x96>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   20228:	4b73      	ldr	r3, [pc, #460]	; (203f8 <hciTrSerialRxIncoming+0x250>)
   2022a:	781b      	ldrb	r3, [r3, #0]
   2022c:	2b02      	cmp	r3, #2
   2022e:	d103      	bne.n	20238 <hciTrSerialRxIncoming+0x90>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   20230:	2304      	movs	r3, #4
   20232:	f88d 300d 	strb.w	r3, [sp, #13]
   20236:	e002      	b.n	2023e <hciTrSerialRxIncoming+0x96>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   20238:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2023c:	e0d5      	b.n	203ea <hciTrSerialRxIncoming+0x242>
      }

      if (iRx != hdrLen) {
   2023e:	f89d 300d 	ldrb.w	r3, [sp, #13]
   20242:	b29a      	uxth	r2, r3
   20244:	4b6d      	ldr	r3, [pc, #436]	; (203fc <hciTrSerialRxIncoming+0x254>)
   20246:	881b      	ldrh	r3, [r3, #0]
   20248:	429a      	cmp	r2, r3
   2024a:	d017      	beq.n	2027c <hciTrSerialRxIncoming+0xd4>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   2024c:	4b6b      	ldr	r3, [pc, #428]	; (203fc <hciTrSerialRxIncoming+0x254>)
   2024e:	881b      	ldrh	r3, [r3, #0]
   20250:	1c5a      	adds	r2, r3, #1
   20252:	b291      	uxth	r1, r2
   20254:	4a69      	ldr	r2, [pc, #420]	; (203fc <hciTrSerialRxIncoming+0x254>)
   20256:	8011      	strh	r1, [r2, #0]
   20258:	4619      	mov	r1, r3
   2025a:	4a6a      	ldr	r2, [pc, #424]	; (20404 <hciTrSerialRxIncoming+0x25c>)
   2025c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   20260:	5453      	strb	r3, [r2, r1]
        pBuf++;
   20262:	9b01      	ldr	r3, [sp, #4]
   20264:	3301      	adds	r3, #1
   20266:	9301      	str	r3, [sp, #4]
        consumed_bytes++;
   20268:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2026c:	3301      	adds	r3, #1
   2026e:	f8ad 300e 	strh.w	r3, [sp, #14]
        len--;
   20272:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20276:	3b01      	subs	r3, #1
   20278:	f8ad 3002 	strh.w	r3, [sp, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   2027c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   20280:	b29a      	uxth	r2, r3
   20282:	4b5e      	ldr	r3, [pc, #376]	; (203fc <hciTrSerialRxIncoming+0x254>)
   20284:	881b      	ldrh	r3, [r3, #0]
   20286:	429a      	cmp	r2, r3
   20288:	f040 8092 	bne.w	203b0 <hciTrSerialRxIncoming+0x208>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   2028c:	4b5a      	ldr	r3, [pc, #360]	; (203f8 <hciTrSerialRxIncoming+0x250>)
   2028e:	781b      	ldrb	r3, [r3, #0]
   20290:	2b04      	cmp	r3, #4
   20292:	d104      	bne.n	2029e <hciTrSerialRxIncoming+0xf6>
        {
          dataLen = hdrRx[1];
   20294:	4b5b      	ldr	r3, [pc, #364]	; (20404 <hciTrSerialRxIncoming+0x25c>)
   20296:	785b      	ldrb	r3, [r3, #1]
   20298:	f8ad 300a 	strh.w	r3, [sp, #10]
   2029c:	e00e      	b.n	202bc <hciTrSerialRxIncoming+0x114>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   2029e:	4b56      	ldr	r3, [pc, #344]	; (203f8 <hciTrSerialRxIncoming+0x250>)
   202a0:	781b      	ldrb	r3, [r3, #0]
   202a2:	2b02      	cmp	r3, #2
   202a4:	d10a      	bne.n	202bc <hciTrSerialRxIncoming+0x114>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   202a6:	4b57      	ldr	r3, [pc, #348]	; (20404 <hciTrSerialRxIncoming+0x25c>)
   202a8:	789b      	ldrb	r3, [r3, #2]
   202aa:	b29a      	uxth	r2, r3
   202ac:	4b56      	ldr	r3, [pc, #344]	; (20408 <hciTrSerialRxIncoming+0x260>)
   202ae:	781b      	ldrb	r3, [r3, #0]
   202b0:	b29b      	uxth	r3, r3
   202b2:	021b      	lsls	r3, r3, #8
   202b4:	b29b      	uxth	r3, r3
   202b6:	4413      	add	r3, r2
   202b8:	f8ad 300a 	strh.w	r3, [sp, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   202bc:	4b4e      	ldr	r3, [pc, #312]	; (203f8 <hciTrSerialRxIncoming+0x250>)
   202be:	781b      	ldrb	r3, [r3, #0]
   202c0:	2b02      	cmp	r3, #2
   202c2:	d10e      	bne.n	202e2 <hciTrSerialRxIncoming+0x13a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   202c4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   202c8:	b29a      	uxth	r2, r3
   202ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   202ce:	4413      	add	r3, r2
   202d0:	b29b      	uxth	r3, r3
   202d2:	2100      	movs	r1, #0
   202d4:	4618      	mov	r0, r3
   202d6:	f7f8 f8b4 	bl	18442 <WsfMsgDataAlloc>
   202da:	4602      	mov	r2, r0
   202dc:	4b4b      	ldr	r3, [pc, #300]	; (2040c <hciTrSerialRxIncoming+0x264>)
   202de:	601a      	str	r2, [r3, #0]
   202e0:	e00c      	b.n	202fc <hciTrSerialRxIncoming+0x154>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   202e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   202e6:	b29a      	uxth	r2, r3
   202e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   202ec:	4413      	add	r3, r2
   202ee:	b29b      	uxth	r3, r3
   202f0:	4618      	mov	r0, r3
   202f2:	f7f8 f8be 	bl	18472 <WsfMsgAlloc>
   202f6:	4602      	mov	r2, r0
   202f8:	4b44      	ldr	r3, [pc, #272]	; (2040c <hciTrSerialRxIncoming+0x264>)
   202fa:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
   202fc:	4b43      	ldr	r3, [pc, #268]	; (2040c <hciTrSerialRxIncoming+0x264>)
   202fe:	681b      	ldr	r3, [r3, #0]
   20300:	2b00      	cmp	r3, #0
   20302:	d02c      	beq.n	2035e <hciTrSerialRxIncoming+0x1b6>
        {
          pDataRx = pPktRx;
   20304:	4b41      	ldr	r3, [pc, #260]	; (2040c <hciTrSerialRxIncoming+0x264>)
   20306:	681b      	ldr	r3, [r3, #0]
   20308:	4a41      	ldr	r2, [pc, #260]	; (20410 <hciTrSerialRxIncoming+0x268>)
   2030a:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   2030c:	2300      	movs	r3, #0
   2030e:	f88d 3009 	strb.w	r3, [sp, #9]
   20312:	e00e      	b.n	20332 <hciTrSerialRxIncoming+0x18a>
            {
              *pDataRx++ = hdrRx[i];
   20314:	4b3e      	ldr	r3, [pc, #248]	; (20410 <hciTrSerialRxIncoming+0x268>)
   20316:	681b      	ldr	r3, [r3, #0]
   20318:	1c5a      	adds	r2, r3, #1
   2031a:	493d      	ldr	r1, [pc, #244]	; (20410 <hciTrSerialRxIncoming+0x268>)
   2031c:	600a      	str	r2, [r1, #0]
   2031e:	f89d 2009 	ldrb.w	r2, [sp, #9]
   20322:	4938      	ldr	r1, [pc, #224]	; (20404 <hciTrSerialRxIncoming+0x25c>)
   20324:	5c8a      	ldrb	r2, [r1, r2]
   20326:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   20328:	f89d 3009 	ldrb.w	r3, [sp, #9]
   2032c:	3301      	adds	r3, #1
   2032e:	f88d 3009 	strb.w	r3, [sp, #9]
   20332:	f89d 2009 	ldrb.w	r2, [sp, #9]
   20336:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2033a:	429a      	cmp	r2, r3
   2033c:	d3ea      	bcc.n	20314 <hciTrSerialRxIncoming+0x16c>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   2033e:	4a2f      	ldr	r2, [pc, #188]	; (203fc <hciTrSerialRxIncoming+0x254>)
   20340:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   20344:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   20346:	4b2d      	ldr	r3, [pc, #180]	; (203fc <hciTrSerialRxIncoming+0x254>)
   20348:	881b      	ldrh	r3, [r3, #0]
   2034a:	2b00      	cmp	r3, #0
   2034c:	d103      	bne.n	20356 <hciTrSerialRxIncoming+0x1ae>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   2034e:	4b29      	ldr	r3, [pc, #164]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   20350:	2203      	movs	r2, #3
   20352:	701a      	strb	r2, [r3, #0]
   20354:	e02c      	b.n	203b0 <hciTrSerialRxIncoming+0x208>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   20356:	4b27      	ldr	r3, [pc, #156]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   20358:	2202      	movs	r2, #2
   2035a:	701a      	strb	r2, [r3, #0]
   2035c:	e028      	b.n	203b0 <hciTrSerialRxIncoming+0x208>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   2035e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   20362:	e042      	b.n	203ea <hciTrSerialRxIncoming+0x242>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   20364:	4b23      	ldr	r3, [pc, #140]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   20366:	781b      	ldrb	r3, [r3, #0]
   20368:	2b02      	cmp	r3, #2
   2036a:	d121      	bne.n	203b0 <hciTrSerialRxIncoming+0x208>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   2036c:	4b28      	ldr	r3, [pc, #160]	; (20410 <hciTrSerialRxIncoming+0x268>)
   2036e:	681b      	ldr	r3, [r3, #0]
   20370:	1c5a      	adds	r2, r3, #1
   20372:	4927      	ldr	r1, [pc, #156]	; (20410 <hciTrSerialRxIncoming+0x268>)
   20374:	600a      	str	r2, [r1, #0]
   20376:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2037a:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   2037c:	4b1f      	ldr	r3, [pc, #124]	; (203fc <hciTrSerialRxIncoming+0x254>)
   2037e:	881b      	ldrh	r3, [r3, #0]
   20380:	3b01      	subs	r3, #1
   20382:	b29a      	uxth	r2, r3
   20384:	4b1d      	ldr	r3, [pc, #116]	; (203fc <hciTrSerialRxIncoming+0x254>)
   20386:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   20388:	4b1c      	ldr	r3, [pc, #112]	; (203fc <hciTrSerialRxIncoming+0x254>)
   2038a:	881b      	ldrh	r3, [r3, #0]
   2038c:	2b00      	cmp	r3, #0
   2038e:	d102      	bne.n	20396 <hciTrSerialRxIncoming+0x1ee>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   20390:	4b18      	ldr	r3, [pc, #96]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   20392:	2203      	movs	r2, #3
   20394:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   20396:	9b01      	ldr	r3, [sp, #4]
   20398:	3301      	adds	r3, #1
   2039a:	9301      	str	r3, [sp, #4]
      consumed_bytes++;
   2039c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   203a0:	3301      	adds	r3, #1
   203a2:	f8ad 300e 	strh.w	r3, [sp, #14]
      len--;
   203a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   203aa:	3b01      	subs	r3, #1
   203ac:	f8ad 3002 	strh.w	r3, [sp, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   203b0:	4b10      	ldr	r3, [pc, #64]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   203b2:	781b      	ldrb	r3, [r3, #0]
   203b4:	2b03      	cmp	r3, #3
   203b6:	d111      	bne.n	203dc <hciTrSerialRxIncoming+0x234>
    {
      g_bHCIReceivingPacket = FALSE;
   203b8:	4b11      	ldr	r3, [pc, #68]	; (20400 <hciTrSerialRxIncoming+0x258>)
   203ba:	2200      	movs	r2, #0
   203bc:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   203be:	4b13      	ldr	r3, [pc, #76]	; (2040c <hciTrSerialRxIncoming+0x264>)
   203c0:	681b      	ldr	r3, [r3, #0]
   203c2:	2b00      	cmp	r3, #0
   203c4:	d007      	beq.n	203d6 <hciTrSerialRxIncoming+0x22e>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   203c6:	4b0c      	ldr	r3, [pc, #48]	; (203f8 <hciTrSerialRxIncoming+0x250>)
   203c8:	781a      	ldrb	r2, [r3, #0]
   203ca:	4b10      	ldr	r3, [pc, #64]	; (2040c <hciTrSerialRxIncoming+0x264>)
   203cc:	681b      	ldr	r3, [r3, #0]
   203ce:	4619      	mov	r1, r3
   203d0:	4610      	mov	r0, r2
   203d2:	f7fe f81b 	bl	1e40c <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   203d6:	4b07      	ldr	r3, [pc, #28]	; (203f4 <hciTrSerialRxIncoming+0x24c>)
   203d8:	2200      	movs	r2, #0
   203da:	701a      	strb	r2, [r3, #0]
  while (len)
   203dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   203e0:	2b00      	cmp	r3, #0
   203e2:	f47f aeeb 	bne.w	201bc <hciTrSerialRxIncoming+0x14>
    }
  }
  return consumed_bytes;
   203e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   203ea:	4618      	mov	r0, r3
   203ec:	b005      	add	sp, #20
   203ee:	f85d fb04 	ldr.w	pc, [sp], #4
   203f2:	bf00      	nop
   203f4:	1000452d 	.word	0x1000452d
   203f8:	1000452e 	.word	0x1000452e
   203fc:	10004530 	.word	0x10004530
   20400:	1000452c 	.word	0x1000452c
   20404:	10004534 	.word	0x10004534
   20408:	10004537 	.word	0x10004537
   2040c:	10004538 	.word	0x10004538
   20410:	1000453c 	.word	0x1000453c

00020414 <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   20414:	b508      	push	{r3, lr}
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   20416:	4b0b      	ldr	r3, [pc, #44]	; (20444 <hciCoreReadResolvingListSize+0x30>)
   20418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   2041a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   2041e:	2b00      	cmp	r3, #0
   20420:	d008      	beq.n	20434 <hciCoreReadResolvingListSize+0x20>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   20422:	4b09      	ldr	r3, [pc, #36]	; (20448 <hciCoreReadResolvingListSize+0x34>)
   20424:	681b      	ldr	r3, [r3, #0]
   20426:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   2042a:	2b00      	cmp	r3, #0
   2042c:	d002      	beq.n	20434 <hciCoreReadResolvingListSize+0x20>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   2042e:	f7fd faa8 	bl	1d982 <HciLeReadResolvingListSize>
   20432:	e005      	b.n	20440 <hciCoreReadResolvingListSize+0x2c>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   20434:	4b03      	ldr	r3, [pc, #12]	; (20444 <hciCoreReadResolvingListSize+0x30>)
   20436:	2200      	movs	r2, #0
   20438:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   2043c:	f000 f806 	bl	2044c <hciCoreReadMaxDataLen>
  }
}
   20440:	bf00      	nop
   20442:	bd08      	pop	{r3, pc}
   20444:	100096a8 	.word	0x100096a8
   20448:	10002bc4 	.word	0x10002bc4

0002044c <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   2044c:	b508      	push	{r3, lr}
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   2044e:	4b09      	ldr	r3, [pc, #36]	; (20474 <hciCoreReadMaxDataLen+0x28>)
   20450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   20452:	f003 0320 	and.w	r3, r3, #32
   20456:	2b00      	cmp	r3, #0
   20458:	d008      	beq.n	2046c <hciCoreReadMaxDataLen+0x20>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   2045a:	4b07      	ldr	r3, [pc, #28]	; (20478 <hciCoreReadMaxDataLen+0x2c>)
   2045c:	681b      	ldr	r3, [r3, #0]
   2045e:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   20462:	2b00      	cmp	r3, #0
   20464:	d002      	beq.n	2046c <hciCoreReadMaxDataLen+0x20>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   20466:	f7fc fec4 	bl	1d1f2 <HciLeReadMaxDataLen>
   2046a:	e001      	b.n	20470 <hciCoreReadMaxDataLen+0x24>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   2046c:	f7fc ff4d 	bl	1d30a <HciLeRandCmd>
  }
}
   20470:	bf00      	nop
   20472:	bd08      	pop	{r3, pc}
   20474:	100096a8 	.word	0x100096a8
   20478:	10002bc4 	.word	0x10002bc4

0002047c <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   2047c:	b508      	push	{r3, lr}
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   2047e:	f7fd f96f 	bl	1d760 <HciResetCmd>
}
   20482:	bf00      	nop
   20484:	bd08      	pop	{r3, pc}
	...

00020488 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   20488:	b500      	push	{lr}
   2048a:	b087      	sub	sp, #28
   2048c:	9001      	str	r0, [sp, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   2048e:	9b01      	ldr	r3, [sp, #4]
   20490:	781b      	ldrb	r3, [r3, #0]
   20492:	2b0e      	cmp	r3, #14
   20494:	f040 8156 	bne.w	20744 <hciCoreResetSequence+0x2bc>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   20498:	9b01      	ldr	r3, [sp, #4]
   2049a:	3302      	adds	r3, #2
   2049c:	9301      	str	r3, [sp, #4]
    pMsg++;                   /* skip num packets */
   2049e:	9b01      	ldr	r3, [sp, #4]
   204a0:	3301      	adds	r3, #1
   204a2:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   204a4:	9b01      	ldr	r3, [sp, #4]
   204a6:	781b      	ldrb	r3, [r3, #0]
   204a8:	b29a      	uxth	r2, r3
   204aa:	9b01      	ldr	r3, [sp, #4]
   204ac:	3301      	adds	r3, #1
   204ae:	781b      	ldrb	r3, [r3, #0]
   204b0:	b29b      	uxth	r3, r3
   204b2:	021b      	lsls	r3, r3, #8
   204b4:	b29b      	uxth	r3, r3
   204b6:	4413      	add	r3, r2
   204b8:	f8ad 3016 	strh.w	r3, [sp, #22]
   204bc:	9b01      	ldr	r3, [sp, #4]
   204be:	3302      	adds	r3, #2
   204c0:	9301      	str	r3, [sp, #4]
    pMsg++;                   /* skip status */
   204c2:	9b01      	ldr	r3, [sp, #4]
   204c4:	3301      	adds	r3, #1
   204c6:	9301      	str	r3, [sp, #4]

    /* decode opcode */
    switch (opcode)
   204c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   204cc:	f242 020f 	movw	r2, #8207	; 0x200f
   204d0:	4293      	cmp	r3, r2
   204d2:	f000 80a3 	beq.w	2061c <hciCoreResetSequence+0x194>
   204d6:	f242 020f 	movw	r2, #8207	; 0x200f
   204da:	4293      	cmp	r3, r2
   204dc:	dc22      	bgt.n	20524 <hciCoreResetSequence+0x9c>
   204de:	f241 0209 	movw	r2, #4105	; 0x1009
   204e2:	4293      	cmp	r3, r2
   204e4:	d05c      	beq.n	205a0 <hciCoreResetSequence+0x118>
   204e6:	f241 0209 	movw	r2, #4105	; 0x1009
   204ea:	4293      	cmp	r3, r2
   204ec:	dc0c      	bgt.n	20508 <hciCoreResetSequence+0x80>
   204ee:	f640 4203 	movw	r2, #3075	; 0xc03
   204f2:	4293      	cmp	r3, r2
   204f4:	d042      	beq.n	2057c <hciCoreResetSequence+0xf4>
   204f6:	f640 4263 	movw	r2, #3171	; 0xc63
   204fa:	4293      	cmp	r3, r2
   204fc:	d04d      	beq.n	2059a <hciCoreResetSequence+0x112>
   204fe:	f640 4201 	movw	r2, #3073	; 0xc01
   20502:	4293      	cmp	r3, r2
   20504:	d041      	beq.n	2058a <hciCoreResetSequence+0x102>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   20506:	e11d      	b.n	20744 <hciCoreResetSequence+0x2bc>
    switch (opcode)
   20508:	f242 0202 	movw	r2, #8194	; 0x2002
   2050c:	4293      	cmp	r3, r2
   2050e:	d04e      	beq.n	205ae <hciCoreResetSequence+0x126>
   20510:	f242 0203 	movw	r2, #8195	; 0x2003
   20514:	4293      	cmp	r3, r2
   20516:	f000 808b 	beq.w	20630 <hciCoreResetSequence+0x1a8>
   2051a:	f242 0201 	movw	r2, #8193	; 0x2001
   2051e:	4293      	cmp	r3, r2
   20520:	d037      	beq.n	20592 <hciCoreResetSequence+0x10a>
        break;
   20522:	e10f      	b.n	20744 <hciCoreResetSequence+0x2bc>
    switch (opcode)
   20524:	f242 022a 	movw	r2, #8234	; 0x202a
   20528:	4293      	cmp	r3, r2
   2052a:	f000 8092 	beq.w	20652 <hciCoreResetSequence+0x1ca>
   2052e:	f242 022a 	movw	r2, #8234	; 0x202a
   20532:	4293      	cmp	r3, r2
   20534:	dc0e      	bgt.n	20554 <hciCoreResetSequence+0xcc>
   20536:	f242 021c 	movw	r2, #8220	; 0x201c
   2053a:	4293      	cmp	r3, r2
   2053c:	d065      	beq.n	2060a <hciCoreResetSequence+0x182>
   2053e:	f242 0224 	movw	r2, #8228	; 0x2024
   20542:	4293      	cmp	r3, r2
   20544:	f000 80b6 	beq.w	206b4 <hciCoreResetSequence+0x22c>
   20548:	f242 0218 	movw	r2, #8216	; 0x2018
   2054c:	4293      	cmp	r3, r2
   2054e:	f000 80dc 	beq.w	2070a <hciCoreResetSequence+0x282>
        break;
   20552:	e0f7      	b.n	20744 <hciCoreResetSequence+0x2bc>
    switch (opcode)
   20554:	f242 023b 	movw	r2, #8251	; 0x203b
   20558:	4293      	cmp	r3, r2
   2055a:	dc09      	bgt.n	20570 <hciCoreResetSequence+0xe8>
   2055c:	f242 023a 	movw	r2, #8250	; 0x203a
   20560:	4293      	cmp	r3, r2
   20562:	f280 80c4 	bge.w	206ee <hciCoreResetSequence+0x266>
   20566:	f242 022f 	movw	r2, #8239	; 0x202f
   2056a:	4293      	cmp	r3, r2
   2056c:	d07b      	beq.n	20666 <hciCoreResetSequence+0x1de>
        break;
   2056e:	e0e9      	b.n	20744 <hciCoreResetSequence+0x2bc>
    switch (opcode)
   20570:	f242 024a 	movw	r2, #8266	; 0x204a
   20574:	4293      	cmp	r3, r2
   20576:	f000 80ba 	beq.w	206ee <hciCoreResetSequence+0x266>
        break;
   2057a:	e0e3      	b.n	20744 <hciCoreResetSequence+0x2bc>
        randCnt = 0;
   2057c:	4b73      	ldr	r3, [pc, #460]	; (2074c <hciCoreResetSequence+0x2c4>)
   2057e:	2200      	movs	r2, #0
   20580:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   20582:	4873      	ldr	r0, [pc, #460]	; (20750 <hciCoreResetSequence+0x2c8>)
   20584:	f7fd f91e 	bl	1d7c4 <HciSetEventMaskCmd>
        break;
   20588:	e0dc      	b.n	20744 <hciCoreResetSequence+0x2bc>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   2058a:	4872      	ldr	r0, [pc, #456]	; (20754 <hciCoreResetSequence+0x2cc>)
   2058c:	f7fd f802 	bl	1d594 <HciLeSetEventMaskCmd>
        break;
   20590:	e0d8      	b.n	20744 <hciCoreResetSequence+0x2bc>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   20592:	4871      	ldr	r0, [pc, #452]	; (20758 <hciCoreResetSequence+0x2d0>)
   20594:	f7fd f931 	bl	1d7fa <HciSetEventMaskPage2Cmd>
        break;
   20598:	e0d4      	b.n	20744 <hciCoreResetSequence+0x2bc>
        HciReadBdAddrCmd();
   2059a:	f7fd f894 	bl	1d6c6 <HciReadBdAddrCmd>
        break;
   2059e:	e0d1      	b.n	20744 <hciCoreResetSequence+0x2bc>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   205a0:	9901      	ldr	r1, [sp, #4]
   205a2:	486e      	ldr	r0, [pc, #440]	; (2075c <hciCoreResetSequence+0x2d4>)
   205a4:	f7fa fe90 	bl	1b2c8 <BdaCpy>
        HciLeReadBufSizeCmd();
   205a8:	f7fc fec1 	bl	1d32e <HciLeReadBufSizeCmd>
        break;
   205ac:	e0ca      	b.n	20744 <hciCoreResetSequence+0x2bc>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   205ae:	9b01      	ldr	r3, [sp, #4]
   205b0:	781b      	ldrb	r3, [r3, #0]
   205b2:	b29a      	uxth	r2, r3
   205b4:	9b01      	ldr	r3, [sp, #4]
   205b6:	3301      	adds	r3, #1
   205b8:	781b      	ldrb	r3, [r3, #0]
   205ba:	b29b      	uxth	r3, r3
   205bc:	021b      	lsls	r3, r3, #8
   205be:	b29b      	uxth	r3, r3
   205c0:	4413      	add	r3, r2
   205c2:	b29a      	uxth	r2, r3
   205c4:	4b66      	ldr	r3, [pc, #408]	; (20760 <hciCoreResetSequence+0x2d8>)
   205c6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   205ca:	9b01      	ldr	r3, [sp, #4]
   205cc:	3302      	adds	r3, #2
   205ce:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   205d0:	9b01      	ldr	r3, [sp, #4]
   205d2:	1c5a      	adds	r2, r3, #1
   205d4:	9201      	str	r2, [sp, #4]
   205d6:	781a      	ldrb	r2, [r3, #0]
   205d8:	4b61      	ldr	r3, [pc, #388]	; (20760 <hciCoreResetSequence+0x2d8>)
   205da:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        if (!APOLLO3_GE_B0)
   205de:	4b61      	ldr	r3, [pc, #388]	; (20764 <hciCoreResetSequence+0x2dc>)
   205e0:	68db      	ldr	r3, [r3, #12]
   205e2:	b2db      	uxtb	r3, r3
   205e4:	2b20      	cmp	r3, #32
   205e6:	d807      	bhi.n	205f8 <hciCoreResetSequence+0x170>
          hciCoreCb.numBufs--;
   205e8:	4b5d      	ldr	r3, [pc, #372]	; (20760 <hciCoreResetSequence+0x2d8>)
   205ea:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   205ee:	3b01      	subs	r3, #1
   205f0:	b2da      	uxtb	r2, r3
   205f2:	4b5b      	ldr	r3, [pc, #364]	; (20760 <hciCoreResetSequence+0x2d8>)
   205f4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   205f8:	4b59      	ldr	r3, [pc, #356]	; (20760 <hciCoreResetSequence+0x2d8>)
   205fa:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
   205fe:	4b58      	ldr	r3, [pc, #352]	; (20760 <hciCoreResetSequence+0x2d8>)
   20600:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        HciLeReadSupStatesCmd();
   20604:	f7fc fedf 	bl	1d3c6 <HciLeReadSupStatesCmd>
        break;
   20608:	e09c      	b.n	20744 <hciCoreResetSequence+0x2bc>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   2060a:	4b55      	ldr	r3, [pc, #340]	; (20760 <hciCoreResetSequence+0x2d8>)
   2060c:	9a01      	ldr	r2, [sp, #4]
   2060e:	3354      	adds	r3, #84	; 0x54
   20610:	6810      	ldr	r0, [r2, #0]
   20612:	6851      	ldr	r1, [r2, #4]
   20614:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   20616:	f7fc fee8 	bl	1d3ea <HciLeReadWhiteListSizeCmd>
        break;
   2061a:	e093      	b.n	20744 <hciCoreResetSequence+0x2bc>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   2061c:	9b01      	ldr	r3, [sp, #4]
   2061e:	1c5a      	adds	r2, r3, #1
   20620:	9201      	str	r2, [sp, #4]
   20622:	781a      	ldrb	r2, [r3, #0]
   20624:	4b4e      	ldr	r3, [pc, #312]	; (20760 <hciCoreResetSequence+0x2d8>)
   20626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        HciLeReadLocalSupFeatCmd();
   2062a:	f7fc fe92 	bl	1d352 <HciLeReadLocalSupFeatCmd>
        break;
   2062e:	e089      	b.n	20744 <hciCoreResetSequence+0x2bc>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   20630:	9b01      	ldr	r3, [sp, #4]
   20632:	781b      	ldrb	r3, [r3, #0]
   20634:	461a      	mov	r2, r3
   20636:	9b01      	ldr	r3, [sp, #4]
   20638:	3301      	adds	r3, #1
   2063a:	781b      	ldrb	r3, [r3, #0]
   2063c:	021b      	lsls	r3, r3, #8
   2063e:	4413      	add	r3, r2
   20640:	461a      	mov	r2, r3
   20642:	4b47      	ldr	r3, [pc, #284]	; (20760 <hciCoreResetSequence+0x2d8>)
   20644:	67da      	str	r2, [r3, #124]	; 0x7c
   20646:	9b01      	ldr	r3, [sp, #4]
   20648:	3302      	adds	r3, #2
   2064a:	9301      	str	r3, [sp, #4]
        hciCoreReadResolvingListSize();
   2064c:	f7ff fee2 	bl	20414 <hciCoreReadResolvingListSize>
        break;
   20650:	e078      	b.n	20744 <hciCoreResetSequence+0x2bc>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   20652:	9b01      	ldr	r3, [sp, #4]
   20654:	1c5a      	adds	r2, r3, #1
   20656:	9201      	str	r2, [sp, #4]
   20658:	781a      	ldrb	r2, [r3, #0]
   2065a:	4b41      	ldr	r3, [pc, #260]	; (20760 <hciCoreResetSequence+0x2d8>)
   2065c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        hciCoreReadMaxDataLen();
   20660:	f7ff fef4 	bl	2044c <hciCoreReadMaxDataLen>
        break;
   20664:	e06e      	b.n	20744 <hciCoreResetSequence+0x2bc>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   20666:	9b01      	ldr	r3, [sp, #4]
   20668:	781b      	ldrb	r3, [r3, #0]
   2066a:	b29a      	uxth	r2, r3
   2066c:	9b01      	ldr	r3, [sp, #4]
   2066e:	3301      	adds	r3, #1
   20670:	781b      	ldrb	r3, [r3, #0]
   20672:	b29b      	uxth	r3, r3
   20674:	021b      	lsls	r3, r3, #8
   20676:	b29b      	uxth	r3, r3
   20678:	4413      	add	r3, r2
   2067a:	f8ad 3014 	strh.w	r3, [sp, #20]
   2067e:	9b01      	ldr	r3, [sp, #4]
   20680:	3302      	adds	r3, #2
   20682:	9301      	str	r3, [sp, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   20684:	9b01      	ldr	r3, [sp, #4]
   20686:	781b      	ldrb	r3, [r3, #0]
   20688:	b29a      	uxth	r2, r3
   2068a:	9b01      	ldr	r3, [sp, #4]
   2068c:	3301      	adds	r3, #1
   2068e:	781b      	ldrb	r3, [r3, #0]
   20690:	b29b      	uxth	r3, r3
   20692:	021b      	lsls	r3, r3, #8
   20694:	b29b      	uxth	r3, r3
   20696:	4413      	add	r3, r2
   20698:	f8ad 3012 	strh.w	r3, [sp, #18]
   2069c:	9b01      	ldr	r3, [sp, #4]
   2069e:	3302      	adds	r3, #2
   206a0:	9301      	str	r3, [sp, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   206a2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   206a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   206aa:	4611      	mov	r1, r2
   206ac:	4618      	mov	r0, r3
   206ae:	f7fc fd64 	bl	1d17a <HciLeWriteDefDataLen>
        break;
   206b2:	e047      	b.n	20744 <hciCoreResetSequence+0x2bc>
        if (hciCoreCb.extResetSeq)
   206b4:	4b2a      	ldr	r3, [pc, #168]	; (20760 <hciCoreResetSequence+0x2d8>)
   206b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   206ba:	2b00      	cmp	r3, #0
   206bc:	d008      	beq.n	206d0 <hciCoreResetSequence+0x248>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   206be:	4b28      	ldr	r3, [pc, #160]	; (20760 <hciCoreResetSequence+0x2d8>)
   206c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   206c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   206c8:	4611      	mov	r1, r2
   206ca:	9801      	ldr	r0, [sp, #4]
   206cc:	4798      	blx	r3
        break;
   206ce:	e039      	b.n	20744 <hciCoreResetSequence+0x2bc>
          hciCoreCb.maxAdvDataLen = 0;
   206d0:	4b23      	ldr	r3, [pc, #140]	; (20760 <hciCoreResetSequence+0x2d8>)
   206d2:	2200      	movs	r2, #0
   206d4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
          hciCoreCb.numSupAdvSets = 0;
   206d8:	4b21      	ldr	r3, [pc, #132]	; (20760 <hciCoreResetSequence+0x2d8>)
   206da:	2200      	movs	r2, #0
   206dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          hciCoreCb.perAdvListSize = 0;
   206e0:	4b1f      	ldr	r3, [pc, #124]	; (20760 <hciCoreResetSequence+0x2d8>)
   206e2:	2200      	movs	r2, #0
   206e4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
          HciLeRandCmd();
   206e8:	f7fc fe0f 	bl	1d30a <HciLeRandCmd>
        break;
   206ec:	e02a      	b.n	20744 <hciCoreResetSequence+0x2bc>
        if (hciCoreCb.extResetSeq)
   206ee:	4b1c      	ldr	r3, [pc, #112]	; (20760 <hciCoreResetSequence+0x2d8>)
   206f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   206f4:	2b00      	cmp	r3, #0
   206f6:	d024      	beq.n	20742 <hciCoreResetSequence+0x2ba>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   206f8:	4b19      	ldr	r3, [pc, #100]	; (20760 <hciCoreResetSequence+0x2d8>)
   206fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   206fe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20702:	4611      	mov	r1, r2
   20704:	9801      	ldr	r0, [sp, #4]
   20706:	4798      	blx	r3
        break;
   20708:	e01b      	b.n	20742 <hciCoreResetSequence+0x2ba>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   2070a:	4b10      	ldr	r3, [pc, #64]	; (2074c <hciCoreResetSequence+0x2c4>)
   2070c:	781b      	ldrb	r3, [r3, #0]
   2070e:	2b02      	cmp	r3, #2
   20710:	d808      	bhi.n	20724 <hciCoreResetSequence+0x29c>
          randCnt++;
   20712:	4b0e      	ldr	r3, [pc, #56]	; (2074c <hciCoreResetSequence+0x2c4>)
   20714:	781b      	ldrb	r3, [r3, #0]
   20716:	3301      	adds	r3, #1
   20718:	b2da      	uxtb	r2, r3
   2071a:	4b0c      	ldr	r3, [pc, #48]	; (2074c <hciCoreResetSequence+0x2c4>)
   2071c:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   2071e:	f7fc fdf4 	bl	1d30a <HciLeRandCmd>
        break;
   20722:	e00f      	b.n	20744 <hciCoreResetSequence+0x2bc>
          hciCb.resetting = FALSE;
   20724:	4b10      	ldr	r3, [pc, #64]	; (20768 <hciCoreResetSequence+0x2e0>)
   20726:	2200      	movs	r2, #0
   20728:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   2072a:	2300      	movs	r3, #0
   2072c:	f8ad 300c 	strh.w	r3, [sp, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   20730:	2300      	movs	r3, #0
   20732:	f88d 300e 	strb.w	r3, [sp, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   20736:	4b0c      	ldr	r3, [pc, #48]	; (20768 <hciCoreResetSequence+0x2e0>)
   20738:	689b      	ldr	r3, [r3, #8]
   2073a:	aa03      	add	r2, sp, #12
   2073c:	4610      	mov	r0, r2
   2073e:	4798      	blx	r3
        break;
   20740:	e000      	b.n	20744 <hciCoreResetSequence+0x2bc>
        break;
   20742:	bf00      	nop
    }
  }
}
   20744:	bf00      	nop
   20746:	b007      	add	sp, #28
   20748:	f85d fb04 	ldr.w	pc, [sp], #4
   2074c:	10004540 	.word	0x10004540
   20750:	00029ae8 	.word	0x00029ae8
   20754:	00029af0 	.word	0x00029af0
   20758:	00029af8 	.word	0x00029af8
   2075c:	10009704 	.word	0x10009704
   20760:	100096a8 	.word	0x100096a8
   20764:	40020000 	.word	0x40020000
   20768:	10009670 	.word	0x10009670

0002076c <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   2076c:	b082      	sub	sp, #8
   2076e:	4603      	mov	r3, r0
   20770:	9100      	str	r1, [sp, #0]
   20772:	f8ad 3006 	strh.w	r3, [sp, #6]
   20776:	4613      	mov	r3, r2
   20778:	f88d 3005 	strb.w	r3, [sp, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   2077c:	2312      	movs	r3, #18
}
   2077e:	4618      	mov	r0, r3
   20780:	b002      	add	sp, #8
   20782:	4770      	bx	lr

00020784 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   20784:	b082      	sub	sp, #8
   20786:	4603      	mov	r3, r0
   20788:	f88d 3007 	strb.w	r3, [sp, #7]

}
   2078c:	bf00      	nop
   2078e:	b002      	add	sp, #8
   20790:	4770      	bx	lr
	...

00020794 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   20794:	b500      	push	{lr}
   20796:	b089      	sub	sp, #36	; 0x24
   20798:	9001      	str	r0, [sp, #4]
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   2079a:	ab03      	add	r3, sp, #12
   2079c:	4618      	mov	r0, r3
   2079e:	f006 f9e3 	bl	26b68 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   207a2:	9b03      	ldr	r3, [sp, #12]
   207a4:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   207a6:	9b07      	ldr	r3, [sp, #28]
   207a8:	4a07      	ldr	r2, [pc, #28]	; (207c8 <am_util_delay_ms+0x34>)
   207aa:	fba2 2303 	umull	r2, r3, r2, r3
   207ae:	099b      	lsrs	r3, r3, #6
   207b0:	9a01      	ldr	r2, [sp, #4]
   207b2:	fb02 f303 	mul.w	r3, r2, r3
   207b6:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   207b8:	9806      	ldr	r0, [sp, #24]
   207ba:	f006 fa3b 	bl	26c34 <am_hal_flash_delay>
}
   207be:	bf00      	nop
   207c0:	b009      	add	sp, #36	; 0x24
   207c2:	f85d fb04 	ldr.w	pc, [sp], #4
   207c6:	bf00      	nop
   207c8:	057619f1 	.word	0x057619f1

000207cc <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   207cc:	b500      	push	{lr}
   207ce:	b089      	sub	sp, #36	; 0x24
   207d0:	9001      	str	r0, [sp, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   207d2:	ab03      	add	r3, sp, #12
   207d4:	4618      	mov	r0, r3
   207d6:	f006 f9c7 	bl	26b68 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   207da:	9b03      	ldr	r3, [sp, #12]
   207dc:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   207de:	9b07      	ldr	r3, [sp, #28]
   207e0:	4a07      	ldr	r2, [pc, #28]	; (20800 <am_util_delay_us+0x34>)
   207e2:	fba2 2303 	umull	r2, r3, r2, r3
   207e6:	0c9b      	lsrs	r3, r3, #18
   207e8:	9a01      	ldr	r2, [sp, #4]
   207ea:	fb02 f303 	mul.w	r3, r2, r3
   207ee:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   207f0:	9806      	ldr	r0, [sp, #24]
   207f2:	f006 fa1f 	bl	26c34 <am_hal_flash_delay>
}
   207f6:	bf00      	nop
   207f8:	b009      	add	sp, #36	; 0x24
   207fa:	f85d fb04 	ldr.w	pc, [sp], #4
   207fe:	bf00      	nop
   20800:	165e9f81 	.word	0x165e9f81

00020804 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   20804:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   20806:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   2080a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   2080c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   20810:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   20814:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   20818:	f000 f80a 	bl	20830 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   2081c:	bd01      	pop	{r0, pc}
}
   2081e:	bf00      	nop
   20820:	4618      	mov	r0, r3

00020822 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   20822:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   20824:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   20826:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   20828:	4770      	bx	lr
}
   2082a:	bf00      	nop
   2082c:	4618      	mov	r0, r3
	...

00020830 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   20830:	b500      	push	{lr}
   20832:	b097      	sub	sp, #92	; 0x5c
   20834:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   20836:	ab03      	add	r3, sp, #12
   20838:	2200      	movs	r2, #0
   2083a:	601a      	str	r2, [r3, #0]
   2083c:	605a      	str	r2, [r3, #4]
   2083e:	609a      	str	r2, [r3, #8]
   20840:	60da      	str	r2, [r3, #12]
   20842:	611a      	str	r2, [r3, #16]
   20844:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   20846:	2300      	movs	r3, #0
   20848:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   2084a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2084c:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   2084e:	4b2e      	ldr	r3, [pc, #184]	; (20908 <am_util_faultisr_collect_data+0xd8>)
   20850:	681b      	ldr	r3, [r3, #0]
   20852:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   20854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20856:	b2db      	uxtb	r3, r3
   20858:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   2085c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2085e:	0a1b      	lsrs	r3, r3, #8
   20860:	b2db      	uxtb	r3, r3
   20862:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   20866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20868:	0c1b      	lsrs	r3, r3, #16
   2086a:	b29b      	uxth	r3, r3
   2086c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   20870:	4b26      	ldr	r3, [pc, #152]	; (2090c <am_util_faultisr_collect_data+0xdc>)
   20872:	681b      	ldr	r3, [r3, #0]
   20874:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   20876:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   2087a:	b2db      	uxtb	r3, r3
   2087c:	f003 0302 	and.w	r3, r3, #2
   20880:	2b00      	cmp	r3, #0
   20882:	d005      	beq.n	20890 <am_util_faultisr_collect_data+0x60>
   20884:	9901      	ldr	r1, [sp, #4]
   20886:	2006      	movs	r0, #6
   20888:	f7ff ffcb 	bl	20822 <getStackedReg>
   2088c:	4603      	mov	r3, r0
   2088e:	e001      	b.n	20894 <am_util_faultisr_collect_data+0x64>
   20890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20894:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   20896:	9901      	ldr	r1, [sp, #4]
   20898:	2000      	movs	r0, #0
   2089a:	f7ff ffc2 	bl	20822 <getStackedReg>
   2089e:	4603      	mov	r3, r0
   208a0:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   208a2:	9901      	ldr	r1, [sp, #4]
   208a4:	2001      	movs	r0, #1
   208a6:	f7ff ffbc 	bl	20822 <getStackedReg>
   208aa:	4603      	mov	r3, r0
   208ac:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   208ae:	9901      	ldr	r1, [sp, #4]
   208b0:	2002      	movs	r0, #2
   208b2:	f7ff ffb6 	bl	20822 <getStackedReg>
   208b6:	4603      	mov	r3, r0
   208b8:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   208ba:	9901      	ldr	r1, [sp, #4]
   208bc:	2003      	movs	r0, #3
   208be:	f7ff ffb0 	bl	20822 <getStackedReg>
   208c2:	4603      	mov	r3, r0
   208c4:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   208c6:	9901      	ldr	r1, [sp, #4]
   208c8:	2004      	movs	r0, #4
   208ca:	f7ff ffaa 	bl	20822 <getStackedReg>
   208ce:	4603      	mov	r3, r0
   208d0:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   208d2:	9901      	ldr	r1, [sp, #4]
   208d4:	2005      	movs	r0, #5
   208d6:	f7ff ffa4 	bl	20822 <getStackedReg>
   208da:	4603      	mov	r3, r0
   208dc:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   208de:	9901      	ldr	r1, [sp, #4]
   208e0:	2006      	movs	r0, #6
   208e2:	f7ff ff9e 	bl	20822 <getStackedReg>
   208e6:	4603      	mov	r3, r0
   208e8:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   208ea:	9901      	ldr	r1, [sp, #4]
   208ec:	2007      	movs	r0, #7
   208ee:	f7ff ff98 	bl	20822 <getStackedReg>
   208f2:	4603      	mov	r3, r0
   208f4:	9310      	str	r3, [sp, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   208f6:	ab03      	add	r3, sp, #12
   208f8:	4619      	mov	r1, r3
   208fa:	2002      	movs	r0, #2
   208fc:	f006 fb7a 	bl	26ff4 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
   20900:	2300      	movs	r3, #0
   20902:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   20904:	e7fe      	b.n	20904 <am_util_faultisr_collect_data+0xd4>
   20906:	bf00      	nop
   20908:	e000ed28 	.word	0xe000ed28
   2090c:	e000ed38 	.word	0xe000ed38

00020910 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   20910:	b082      	sub	sp, #8
   20912:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
   20914:	4a02      	ldr	r2, [pc, #8]	; (20920 <am_util_stdio_printf_init+0x10>)
   20916:	9b01      	ldr	r3, [sp, #4]
   20918:	6013      	str	r3, [r2, #0]
}
   2091a:	bf00      	nop
   2091c:	b002      	add	sp, #8
   2091e:	4770      	bx	lr
   20920:	1000973c 	.word	0x1000973c

00020924 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   20924:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   20928:	b094      	sub	sp, #80	; 0x50
   2092a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   2092e:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   20932:	0027      	movs	r7, r4
   20934:	f04f 0800 	mov.w	r8, #0
   20938:	ea57 0308 	orrs.w	r3, r7, r8
   2093c:	f000 8099 	beq.w	20a72 <divu64_10+0x14e>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   20940:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   20944:	0862      	lsrs	r2, r4, #1
   20946:	ea4f 0133 	mov.w	r1, r3, rrx
   2094a:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   2094e:	089d      	lsrs	r5, r3, #2
   20950:	ea45 7584 	orr.w	r5, r5, r4, lsl #30
   20954:	08a6      	lsrs	r6, r4, #2
   20956:	194b      	adds	r3, r1, r5
   20958:	eb42 0406 	adc.w	r4, r2, r6
   2095c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
   20960:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   20964:	091a      	lsrs	r2, r3, #4
   20966:	9200      	str	r2, [sp, #0]
   20968:	9a00      	ldr	r2, [sp, #0]
   2096a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
   2096e:	9200      	str	r2, [sp, #0]
   20970:	0923      	lsrs	r3, r4, #4
   20972:	9301      	str	r3, [sp, #4]
   20974:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   20978:	e9dd 1200 	ldrd	r1, r2, [sp]
   2097c:	18c9      	adds	r1, r1, r3
   2097e:	eb42 0204 	adc.w	r2, r2, r4
   20982:	460b      	mov	r3, r1
   20984:	4614      	mov	r4, r2
   20986:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
   2098a:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   2098e:	0a1a      	lsrs	r2, r3, #8
   20990:	9202      	str	r2, [sp, #8]
   20992:	9a02      	ldr	r2, [sp, #8]
   20994:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   20998:	9202      	str	r2, [sp, #8]
   2099a:	0a23      	lsrs	r3, r4, #8
   2099c:	9303      	str	r3, [sp, #12]
   2099e:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   209a2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   209a6:	18c9      	adds	r1, r1, r3
   209a8:	eb42 0204 	adc.w	r2, r2, r4
   209ac:	460b      	mov	r3, r1
   209ae:	4614      	mov	r4, r2
   209b0:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
   209b4:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   209b8:	0c1a      	lsrs	r2, r3, #16
   209ba:	9204      	str	r2, [sp, #16]
   209bc:	9a04      	ldr	r2, [sp, #16]
   209be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   209c2:	9204      	str	r2, [sp, #16]
   209c4:	0c23      	lsrs	r3, r4, #16
   209c6:	9305      	str	r3, [sp, #20]
   209c8:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   209cc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   209d0:	18c9      	adds	r1, r1, r3
   209d2:	eb42 0204 	adc.w	r2, r2, r4
   209d6:	460b      	mov	r3, r1
   209d8:	4614      	mov	r4, r2
   209da:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
   209de:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   209e2:	0023      	movs	r3, r4
   209e4:	9308      	str	r3, [sp, #32]
   209e6:	2300      	movs	r3, #0
   209e8:	9309      	str	r3, [sp, #36]	; 0x24
   209ea:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   209ee:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   209f2:	18c9      	adds	r1, r1, r3
   209f4:	eb42 0204 	adc.w	r2, r2, r4
   209f8:	460b      	mov	r3, r1
   209fa:	4614      	mov	r4, r2
   209fc:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
   20a00:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   20a04:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
   20a08:	ea4b 7b44 	orr.w	fp, fp, r4, lsl #29
   20a0c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
   20a10:	e9cd bc12 	strd	fp, ip, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
   20a14:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   20a18:	460b      	mov	r3, r1
   20a1a:	4614      	mov	r4, r2
   20a1c:	00a0      	lsls	r0, r4, #2
   20a1e:	9007      	str	r0, [sp, #28]
   20a20:	9807      	ldr	r0, [sp, #28]
   20a22:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   20a26:	9007      	str	r0, [sp, #28]
   20a28:	009b      	lsls	r3, r3, #2
   20a2a:	9306      	str	r3, [sp, #24]
   20a2c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   20a30:	185b      	adds	r3, r3, r1
   20a32:	eb44 0402 	adc.w	r4, r4, r2
   20a36:	18db      	adds	r3, r3, r3
   20a38:	eb44 0404 	adc.w	r4, r4, r4
   20a3c:	4619      	mov	r1, r3
   20a3e:	4622      	mov	r2, r4
   20a40:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   20a44:	1a5b      	subs	r3, r3, r1
   20a46:	eb64 0402 	sbc.w	r4, r4, r2
   20a4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
   20a4e:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
   20a52:	3306      	adds	r3, #6
   20a54:	f144 0400 	adc.w	r4, r4, #0
   20a58:	ea4f 1913 	mov.w	r9, r3, lsr #4
   20a5c:	ea49 7904 	orr.w	r9, r9, r4, lsl #28
   20a60:	ea4f 1a14 	mov.w	sl, r4, lsr #4
   20a64:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   20a68:	eb13 0309 	adds.w	r3, r3, r9
   20a6c:	eb44 040a 	adc.w	r4, r4, sl
   20a70:	e029      	b.n	20ac6 <divu64_10+0x1a2>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   20a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20a74:	930f      	str	r3, [sp, #60]	; 0x3c
        q32 = (ui32Val>>1) + (ui32Val>>2);
   20a76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20a78:	085a      	lsrs	r2, r3, #1
   20a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20a7c:	089b      	lsrs	r3, r3, #2
   20a7e:	4413      	add	r3, r2
   20a80:	930e      	str	r3, [sp, #56]	; 0x38
        q32 += (q32 >> 4);
   20a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20a84:	091b      	lsrs	r3, r3, #4
   20a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20a88:	4413      	add	r3, r2
   20a8a:	930e      	str	r3, [sp, #56]	; 0x38
        q32 += (q32 >> 8);
   20a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20a8e:	0a1b      	lsrs	r3, r3, #8
   20a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20a92:	4413      	add	r3, r2
   20a94:	930e      	str	r3, [sp, #56]	; 0x38
        q32 += (q32 >> 16);
   20a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20a98:	0c1b      	lsrs	r3, r3, #16
   20a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20a9c:	4413      	add	r3, r2
   20a9e:	930e      	str	r3, [sp, #56]	; 0x38
        q32 >>= 3;
   20aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20aa2:	08db      	lsrs	r3, r3, #3
   20aa4:	930e      	str	r3, [sp, #56]	; 0x38
        r32 = ui32Val - q32*10;
   20aa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20aa8:	4613      	mov	r3, r2
   20aaa:	009b      	lsls	r3, r3, #2
   20aac:	4413      	add	r3, r2
   20aae:	005b      	lsls	r3, r3, #1
   20ab0:	461a      	mov	r2, r3
   20ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20ab4:	1a9b      	subs	r3, r3, r2
   20ab6:	930d      	str	r3, [sp, #52]	; 0x34
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   20ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20aba:	3306      	adds	r3, #6
   20abc:	091a      	lsrs	r2, r3, #4
   20abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20ac0:	4413      	add	r3, r2
   20ac2:	f04f 0400 	mov.w	r4, #0
    }
}
   20ac6:	4618      	mov	r0, r3
   20ac8:	4621      	mov	r1, r4
   20aca:	b014      	add	sp, #80	; 0x50
   20acc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   20ad0:	4770      	bx	lr

00020ad2 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   20ad2:	b510      	push	{r4, lr}
   20ad4:	b084      	sub	sp, #16
   20ad6:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
   20ada:	9a00      	ldr	r2, [sp, #0]
   20adc:	9b01      	ldr	r3, [sp, #4]
   20ade:	4313      	orrs	r3, r2
   20ae0:	2b00      	cmp	r3, #0
   20ae2:	bf0c      	ite	eq
   20ae4:	2301      	moveq	r3, #1
   20ae6:	2300      	movne	r3, #0
   20ae8:	b2db      	uxtb	r3, r3
   20aea:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
   20aec:	e008      	b.n	20b00 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   20aee:	e9dd 0100 	ldrd	r0, r1, [sp]
   20af2:	f7ff ff17 	bl	20924 <divu64_10>
   20af6:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
   20afa:	9b03      	ldr	r3, [sp, #12]
   20afc:	3301      	adds	r3, #1
   20afe:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
   20b00:	e9dd 3400 	ldrd	r3, r4, [sp]
   20b04:	4323      	orrs	r3, r4
   20b06:	d1f2      	bne.n	20aee <ndigits_in_u64+0x1c>
    }

    return iNDigits;
   20b08:	9b03      	ldr	r3, [sp, #12]
}
   20b0a:	4618      	mov	r0, r3
   20b0c:	b004      	add	sp, #16
   20b0e:	bd10      	pop	{r4, pc}

00020b10 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   20b10:	b510      	push	{r4, lr}
   20b12:	b082      	sub	sp, #8
   20b14:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
   20b18:	e9dd 3400 	ldrd	r3, r4, [sp]
   20b1c:	2b00      	cmp	r3, #0
   20b1e:	f174 0300 	sbcs.w	r3, r4, #0
   20b22:	da06      	bge.n	20b32 <ndigits_in_i64+0x22>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   20b24:	e9dd 3400 	ldrd	r3, r4, [sp]
   20b28:	425b      	negs	r3, r3
   20b2a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   20b2e:	e9cd 3400 	strd	r3, r4, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   20b32:	e9dd 3400 	ldrd	r3, r4, [sp]
   20b36:	4618      	mov	r0, r3
   20b38:	4621      	mov	r1, r4
   20b3a:	f7ff ffca 	bl	20ad2 <ndigits_in_u64>
   20b3e:	4603      	mov	r3, r0
}
   20b40:	4618      	mov	r0, r3
   20b42:	b002      	add	sp, #8
   20b44:	bd10      	pop	{r4, pc}

00020b46 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   20b46:	b410      	push	{r4}
   20b48:	b085      	sub	sp, #20
   20b4a:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
   20b4e:	9900      	ldr	r1, [sp, #0]
   20b50:	9a01      	ldr	r2, [sp, #4]
   20b52:	430a      	orrs	r2, r1
   20b54:	2a00      	cmp	r2, #0
   20b56:	bf0c      	ite	eq
   20b58:	2201      	moveq	r2, #1
   20b5a:	2200      	movne	r2, #0
   20b5c:	b2d2      	uxtb	r2, r2
   20b5e:	9203      	str	r2, [sp, #12]

    while ( ui64Val )
   20b60:	e00a      	b.n	20b78 <ndigits_in_hex+0x32>
    {
        ui64Val >>= 4;
   20b62:	e9dd 1200 	ldrd	r1, r2, [sp]
   20b66:	090b      	lsrs	r3, r1, #4
   20b68:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   20b6c:	0914      	lsrs	r4, r2, #4
   20b6e:	e9cd 3400 	strd	r3, r4, [sp]
        ++iDigits;
   20b72:	9a03      	ldr	r2, [sp, #12]
   20b74:	3201      	adds	r2, #1
   20b76:	9203      	str	r2, [sp, #12]
    while ( ui64Val )
   20b78:	e9dd 1200 	ldrd	r1, r2, [sp]
   20b7c:	430a      	orrs	r2, r1
   20b7e:	d1f0      	bne.n	20b62 <ndigits_in_hex+0x1c>
    }

    return iDigits;
   20b80:	9b03      	ldr	r3, [sp, #12]
}
   20b82:	4618      	mov	r0, r3
   20b84:	b005      	add	sp, #20
   20b86:	f85d 4b04 	ldr.w	r4, [sp], #4
   20b8a:	4770      	bx	lr

00020b8c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   20b8c:	b086      	sub	sp, #24
   20b8e:	9001      	str	r0, [sp, #4]
   20b90:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
   20b92:	2300      	movs	r3, #0
   20b94:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   20b98:	2300      	movs	r3, #0
   20b9a:	9304      	str	r3, [sp, #16]
   20b9c:	2300      	movs	r3, #0
   20b9e:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
   20ba0:	9b01      	ldr	r3, [sp, #4]
   20ba2:	781b      	ldrb	r3, [r3, #0]
   20ba4:	2b2d      	cmp	r3, #45	; 0x2d
   20ba6:	d11c      	bne.n	20be2 <decstr_to_int+0x56>
    {
        bNeg = true;
   20ba8:	2301      	movs	r3, #1
   20baa:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
   20bae:	9b01      	ldr	r3, [sp, #4]
   20bb0:	3301      	adds	r3, #1
   20bb2:	9301      	str	r3, [sp, #4]
        uCnt++;
   20bb4:	9b03      	ldr	r3, [sp, #12]
   20bb6:	3301      	adds	r3, #1
   20bb8:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20bba:	e012      	b.n	20be2 <decstr_to_int+0x56>
    {
        ++uCnt;
   20bbc:	9b03      	ldr	r3, [sp, #12]
   20bbe:	3301      	adds	r3, #1
   20bc0:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   20bc2:	9a04      	ldr	r2, [sp, #16]
   20bc4:	4613      	mov	r3, r2
   20bc6:	009b      	lsls	r3, r3, #2
   20bc8:	4413      	add	r3, r2
   20bca:	005b      	lsls	r3, r3, #1
   20bcc:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   20bce:	9b01      	ldr	r3, [sp, #4]
   20bd0:	781b      	ldrb	r3, [r3, #0]
   20bd2:	461a      	mov	r2, r3
   20bd4:	9b04      	ldr	r3, [sp, #16]
   20bd6:	4413      	add	r3, r2
   20bd8:	3b30      	subs	r3, #48	; 0x30
   20bda:	9304      	str	r3, [sp, #16]
        pcStr++;
   20bdc:	9b01      	ldr	r3, [sp, #4]
   20bde:	3301      	adds	r3, #1
   20be0:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20be2:	9b01      	ldr	r3, [sp, #4]
   20be4:	781b      	ldrb	r3, [r3, #0]
   20be6:	2b2f      	cmp	r3, #47	; 0x2f
   20be8:	d903      	bls.n	20bf2 <decstr_to_int+0x66>
   20bea:	9b01      	ldr	r3, [sp, #4]
   20bec:	781b      	ldrb	r3, [r3, #0]
   20bee:	2b39      	cmp	r3, #57	; 0x39
   20bf0:	d9e4      	bls.n	20bbc <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   20bf2:	9b00      	ldr	r3, [sp, #0]
   20bf4:	2b00      	cmp	r3, #0
   20bf6:	d002      	beq.n	20bfe <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   20bf8:	9b00      	ldr	r3, [sp, #0]
   20bfa:	9a03      	ldr	r2, [sp, #12]
   20bfc:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   20bfe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   20c02:	2b00      	cmp	r3, #0
   20c04:	d002      	beq.n	20c0c <decstr_to_int+0x80>
   20c06:	9b04      	ldr	r3, [sp, #16]
   20c08:	425b      	negs	r3, r3
   20c0a:	e000      	b.n	20c0e <decstr_to_int+0x82>
   20c0c:	9b04      	ldr	r3, [sp, #16]
}
   20c0e:	4618      	mov	r0, r3
   20c10:	b006      	add	sp, #24
   20c12:	4770      	bx	lr

00020c14 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   20c14:	b510      	push	{r4, lr}
   20c16:	b090      	sub	sp, #64	; 0x40
   20c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20c1c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   20c1e:	2300      	movs	r3, #0
   20c20:	930f      	str	r3, [sp, #60]	; 0x3c
   20c22:	2300      	movs	r3, #0
   20c24:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   20c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20c2a:	f7ff fe7b 	bl	20924 <divu64_10>
   20c2e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   20c32:	9902      	ldr	r1, [sp, #8]
   20c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20c36:	4613      	mov	r3, r2
   20c38:	009b      	lsls	r3, r3, #2
   20c3a:	4413      	add	r3, r2
   20c3c:	005b      	lsls	r3, r3, #1
   20c3e:	1acb      	subs	r3, r1, r3
   20c40:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   20c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20c44:	1c5a      	adds	r2, r3, #1
   20c46:	920f      	str	r2, [sp, #60]	; 0x3c
   20c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20c4a:	b2d2      	uxtb	r2, r2
   20c4c:	3230      	adds	r2, #48	; 0x30
   20c4e:	b2d2      	uxtb	r2, r2
   20c50:	a910      	add	r1, sp, #64	; 0x40
   20c52:	440b      	add	r3, r1
   20c54:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   20c58:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   20c5c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    } while ( ui64Val );
   20c60:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   20c64:	4323      	orrs	r3, r4
   20c66:	d1de      	bne.n	20c26 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   20c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20c6a:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   20c6c:	9b01      	ldr	r3, [sp, #4]
   20c6e:	2b00      	cmp	r3, #0
   20c70:	d010      	beq.n	20c94 <uint64_to_str+0x80>
    {
        while ( ix-- )
   20c72:	e007      	b.n	20c84 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
   20c74:	9b01      	ldr	r3, [sp, #4]
   20c76:	1c5a      	adds	r2, r3, #1
   20c78:	9201      	str	r2, [sp, #4]
   20c7a:	a904      	add	r1, sp, #16
   20c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20c7e:	440a      	add	r2, r1
   20c80:	7812      	ldrb	r2, [r2, #0]
   20c82:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   20c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20c86:	1e5a      	subs	r2, r3, #1
   20c88:	920f      	str	r2, [sp, #60]	; 0x3c
   20c8a:	2b00      	cmp	r3, #0
   20c8c:	d1f2      	bne.n	20c74 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   20c8e:	9b01      	ldr	r3, [sp, #4]
   20c90:	2200      	movs	r2, #0
   20c92:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   20c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
   20c96:	4618      	mov	r0, r3
   20c98:	b010      	add	sp, #64	; 0x40
   20c9a:	bd10      	pop	{r4, pc}

00020c9c <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   20c9c:	b430      	push	{r4, r5}
   20c9e:	b08c      	sub	sp, #48	; 0x30
   20ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20ca4:	9201      	str	r2, [sp, #4]
   20ca6:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
   20caa:	2300      	movs	r3, #0
   20cac:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   20cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20cb2:	4313      	orrs	r3, r2
   20cb4:	d131      	bne.n	20d1a <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
   20cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20cb8:	1c5a      	adds	r2, r3, #1
   20cba:	920b      	str	r2, [sp, #44]	; 0x2c
   20cbc:	aa0c      	add	r2, sp, #48	; 0x30
   20cbe:	4413      	add	r3, r2
   20cc0:	2230      	movs	r2, #48	; 0x30
   20cc2:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   20cc6:	e028      	b.n	20d1a <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
   20cc8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   20ccc:	f003 030f 	and.w	r3, r3, #15
   20cd0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   20cd4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   20cd8:	2b09      	cmp	r3, #9
   20cda:	d90b      	bls.n	20cf4 <uint64_to_hexstr+0x58>
        {
            cCh += bLower ? 0x27 : 0x7;
   20cdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   20ce0:	2b00      	cmp	r3, #0
   20ce2:	d001      	beq.n	20ce8 <uint64_to_hexstr+0x4c>
   20ce4:	2227      	movs	r2, #39	; 0x27
   20ce6:	e000      	b.n	20cea <uint64_to_hexstr+0x4e>
   20ce8:	2207      	movs	r2, #7
   20cea:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   20cee:	4413      	add	r3, r2
   20cf0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   20cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20cf6:	1c5a      	adds	r2, r3, #1
   20cf8:	920b      	str	r2, [sp, #44]	; 0x2c
   20cfa:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
   20cfe:	3230      	adds	r2, #48	; 0x30
   20d00:	b2d2      	uxtb	r2, r2
   20d02:	a90c      	add	r1, sp, #48	; 0x30
   20d04:	440b      	add	r3, r1
   20d06:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   20d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20d0e:	0914      	lsrs	r4, r2, #4
   20d10:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
   20d14:	091d      	lsrs	r5, r3, #4
   20d16:	e9cd 4502 	strd	r4, r5, [sp, #8]
    while ( ui64Val )
   20d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20d1e:	4313      	orrs	r3, r2
   20d20:	d1d2      	bne.n	20cc8 <uint64_to_hexstr+0x2c>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   20d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20d24:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   20d26:	9b01      	ldr	r3, [sp, #4]
   20d28:	2b00      	cmp	r3, #0
   20d2a:	d010      	beq.n	20d4e <uint64_to_hexstr+0xb2>
    {
        while (ix--)
   20d2c:	e007      	b.n	20d3e <uint64_to_hexstr+0xa2>
        {
            *pcBuf++ = tbuf[ix];
   20d2e:	9b01      	ldr	r3, [sp, #4]
   20d30:	1c5a      	adds	r2, r3, #1
   20d32:	9201      	str	r2, [sp, #4]
   20d34:	a904      	add	r1, sp, #16
   20d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20d38:	440a      	add	r2, r1
   20d3a:	7812      	ldrb	r2, [r2, #0]
   20d3c:	701a      	strb	r2, [r3, #0]
        while (ix--)
   20d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20d40:	1e5a      	subs	r2, r3, #1
   20d42:	920b      	str	r2, [sp, #44]	; 0x2c
   20d44:	2b00      	cmp	r3, #0
   20d46:	d1f2      	bne.n	20d2e <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   20d48:	9b01      	ldr	r3, [sp, #4]
   20d4a:	2200      	movs	r2, #0
   20d4c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   20d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
   20d50:	4618      	mov	r0, r3
   20d52:	b00c      	add	sp, #48	; 0x30
   20d54:	bc30      	pop	{r4, r5}
   20d56:	4770      	bx	lr

00020d58 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   20d58:	b084      	sub	sp, #16
   20d5a:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
   20d5c:	2300      	movs	r3, #0
   20d5e:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
   20d60:	9b01      	ldr	r3, [sp, #4]
   20d62:	2b00      	cmp	r3, #0
   20d64:	d104      	bne.n	20d70 <simple_strlen+0x18>
    {
        return ui32RetVal;
   20d66:	9b03      	ldr	r3, [sp, #12]
   20d68:	e009      	b.n	20d7e <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   20d6a:	9b03      	ldr	r3, [sp, #12]
   20d6c:	3301      	adds	r3, #1
   20d6e:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
   20d70:	9b01      	ldr	r3, [sp, #4]
   20d72:	1c5a      	adds	r2, r3, #1
   20d74:	9201      	str	r2, [sp, #4]
   20d76:	781b      	ldrb	r3, [r3, #0]
   20d78:	2b00      	cmp	r3, #0
   20d7a:	d1f6      	bne.n	20d6a <simple_strlen+0x12>
    }
    return ui32RetVal;
   20d7c:	9b03      	ldr	r3, [sp, #12]
}
   20d7e:	4618      	mov	r0, r3
   20d80:	b004      	add	sp, #16
   20d82:	4770      	bx	lr

00020d84 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   20d84:	b086      	sub	sp, #24
   20d86:	9003      	str	r0, [sp, #12]
   20d88:	460b      	mov	r3, r1
   20d8a:	9201      	str	r2, [sp, #4]
   20d8c:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
   20d90:	2300      	movs	r3, #0
   20d92:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
   20d94:	9b01      	ldr	r3, [sp, #4]
   20d96:	2b00      	cmp	r3, #0
   20d98:	dc0d      	bgt.n	20db6 <padbuffer+0x32>
    {
        return i32Cnt;
   20d9a:	9b05      	ldr	r3, [sp, #20]
   20d9c:	e011      	b.n	20dc2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   20d9e:	9b03      	ldr	r3, [sp, #12]
   20da0:	2b00      	cmp	r3, #0
   20da2:	d005      	beq.n	20db0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   20da4:	9b03      	ldr	r3, [sp, #12]
   20da6:	1c5a      	adds	r2, r3, #1
   20da8:	9203      	str	r2, [sp, #12]
   20daa:	f89d 200b 	ldrb.w	r2, [sp, #11]
   20dae:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   20db0:	9b05      	ldr	r3, [sp, #20]
   20db2:	3301      	adds	r3, #1
   20db4:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
   20db6:	9b01      	ldr	r3, [sp, #4]
   20db8:	1e5a      	subs	r2, r3, #1
   20dba:	9201      	str	r2, [sp, #4]
   20dbc:	2b00      	cmp	r3, #0
   20dbe:	d1ee      	bne.n	20d9e <padbuffer+0x1a>
    }

    return i32Cnt;
   20dc0:	9b05      	ldr	r3, [sp, #20]
}
   20dc2:	4618      	mov	r0, r3
   20dc4:	b006      	add	sp, #24
   20dc6:	4770      	bx	lr

00020dc8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   20dc8:	b510      	push	{r4, lr}
   20dca:	b08e      	sub	sp, #56	; 0x38
   20dcc:	ed8d 0a03 	vstr	s0, [sp, #12]
   20dd0:	9002      	str	r0, [sp, #8]
   20dd2:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   20dd4:	9b02      	ldr	r3, [sp, #8]
   20dd6:	681b      	ldr	r3, [r3, #0]
   20dd8:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
   20dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20ddc:	2b03      	cmp	r3, #3
   20dde:	dc02      	bgt.n	20de6 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
   20de0:	f06f 0302 	mvn.w	r3, #2
   20de4:	e0e7      	b.n	20fb6 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
   20de6:	eddd 7a03 	vldr	s15, [sp, #12]
   20dea:	eef5 7a40 	vcmp.f32	s15, #0.0
   20dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20df2:	d104      	bne.n	20dfe <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   20df4:	9b02      	ldr	r3, [sp, #8]
   20df6:	4a71      	ldr	r2, [pc, #452]	; (20fbc <ftoa+0x1f4>)
   20df8:	601a      	str	r2, [r3, #0]
        return 3;
   20dfa:	2303      	movs	r3, #3
   20dfc:	e0db      	b.n	20fb6 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
   20dfe:	9b02      	ldr	r3, [sp, #8]
   20e00:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
   20e02:	9b03      	ldr	r3, [sp, #12]
   20e04:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   20e06:	9b04      	ldr	r3, [sp, #16]
   20e08:	15db      	asrs	r3, r3, #23
   20e0a:	b2db      	uxtb	r3, r3
   20e0c:	3b7f      	subs	r3, #127	; 0x7f
   20e0e:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   20e10:	9b04      	ldr	r3, [sp, #16]
   20e12:	f3c3 0316 	ubfx	r3, r3, #0, #23
   20e16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   20e1a:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
   20e1c:	2300      	movs	r3, #0
   20e1e:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
   20e20:	2300      	movs	r3, #0
   20e22:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
   20e24:	9b07      	ldr	r3, [sp, #28]
   20e26:	2b1e      	cmp	r3, #30
   20e28:	dd02      	ble.n	20e30 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   20e2a:	f06f 0301 	mvn.w	r3, #1
   20e2e:	e0c2      	b.n	20fb6 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
   20e30:	9b07      	ldr	r3, [sp, #28]
   20e32:	f113 0f17 	cmn.w	r3, #23
   20e36:	da02      	bge.n	20e3e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   20e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e3c:	e0bb      	b.n	20fb6 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
   20e3e:	9b07      	ldr	r3, [sp, #28]
   20e40:	2b16      	cmp	r3, #22
   20e42:	dd06      	ble.n	20e52 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   20e44:	9b07      	ldr	r3, [sp, #28]
   20e46:	3b17      	subs	r3, #23
   20e48:	9a06      	ldr	r2, [sp, #24]
   20e4a:	fa02 f303 	lsl.w	r3, r2, r3
   20e4e:	930d      	str	r3, [sp, #52]	; 0x34
   20e50:	e01a      	b.n	20e88 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
   20e52:	9b07      	ldr	r3, [sp, #28]
   20e54:	2b00      	cmp	r3, #0
   20e56:	db0f      	blt.n	20e78 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   20e58:	9b07      	ldr	r3, [sp, #28]
   20e5a:	f1c3 0317 	rsb	r3, r3, #23
   20e5e:	9a06      	ldr	r2, [sp, #24]
   20e60:	fa42 f303 	asr.w	r3, r2, r3
   20e64:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   20e66:	9b07      	ldr	r3, [sp, #28]
   20e68:	3301      	adds	r3, #1
   20e6a:	9a06      	ldr	r2, [sp, #24]
   20e6c:	fa02 f303 	lsl.w	r3, r2, r3
   20e70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   20e74:	930c      	str	r3, [sp, #48]	; 0x30
   20e76:	e007      	b.n	20e88 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   20e78:	9b06      	ldr	r3, [sp, #24]
   20e7a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   20e7e:	9b07      	ldr	r3, [sp, #28]
   20e80:	43db      	mvns	r3, r3
   20e82:	fa42 f303 	asr.w	r3, r2, r3
   20e86:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   20e88:	9b04      	ldr	r3, [sp, #16]
   20e8a:	2b00      	cmp	r3, #0
   20e8c:	da04      	bge.n	20e98 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
   20e8e:	9b02      	ldr	r3, [sp, #8]
   20e90:	1c5a      	adds	r2, r3, #1
   20e92:	9202      	str	r2, [sp, #8]
   20e94:	222d      	movs	r2, #45	; 0x2d
   20e96:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   20e98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20e9a:	2b00      	cmp	r3, #0
   20e9c:	d105      	bne.n	20eaa <ftoa+0xe2>
    {
        *pcBuf++ = '0';
   20e9e:	9b02      	ldr	r3, [sp, #8]
   20ea0:	1c5a      	adds	r2, r3, #1
   20ea2:	9202      	str	r2, [sp, #8]
   20ea4:	2230      	movs	r2, #48	; 0x30
   20ea6:	701a      	strb	r2, [r3, #0]
   20ea8:	e021      	b.n	20eee <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
   20eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20eac:	2b00      	cmp	r3, #0
   20eae:	dd08      	ble.n	20ec2 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
   20eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20eb2:	ea4f 74e3 	mov.w	r4, r3, asr #31
   20eb6:	9a02      	ldr	r2, [sp, #8]
   20eb8:	4618      	mov	r0, r3
   20eba:	4621      	mov	r1, r4
   20ebc:	f7ff feaa 	bl	20c14 <uint64_to_str>
   20ec0:	e011      	b.n	20ee6 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
   20ec2:	9b02      	ldr	r3, [sp, #8]
   20ec4:	1c5a      	adds	r2, r3, #1
   20ec6:	9202      	str	r2, [sp, #8]
   20ec8:	222d      	movs	r2, #45	; 0x2d
   20eca:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   20ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20ece:	425b      	negs	r3, r3
   20ed0:	ea4f 74e3 	mov.w	r4, r3, asr #31
   20ed4:	9a02      	ldr	r2, [sp, #8]
   20ed6:	4618      	mov	r0, r3
   20ed8:	4621      	mov	r1, r4
   20eda:	f7ff fe9b 	bl	20c14 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   20ede:	e002      	b.n	20ee6 <ftoa+0x11e>
        {
            pcBuf++;
   20ee0:	9b02      	ldr	r3, [sp, #8]
   20ee2:	3301      	adds	r3, #1
   20ee4:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
   20ee6:	9b02      	ldr	r3, [sp, #8]
   20ee8:	781b      	ldrb	r3, [r3, #0]
   20eea:	2b00      	cmp	r3, #0
   20eec:	d1f8      	bne.n	20ee0 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   20eee:	9b02      	ldr	r3, [sp, #8]
   20ef0:	1c5a      	adds	r2, r3, #1
   20ef2:	9202      	str	r2, [sp, #8]
   20ef4:	222e      	movs	r2, #46	; 0x2e
   20ef6:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   20ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20efa:	2b00      	cmp	r3, #0
   20efc:	d105      	bne.n	20f0a <ftoa+0x142>
    {
        *pcBuf++ = '0';
   20efe:	9b02      	ldr	r3, [sp, #8]
   20f00:	1c5a      	adds	r2, r3, #1
   20f02:	9202      	str	r2, [sp, #8]
   20f04:	2230      	movs	r2, #48	; 0x30
   20f06:	701a      	strb	r2, [r3, #0]
   20f08:	e04f      	b.n	20faa <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   20f0a:	9a02      	ldr	r2, [sp, #8]
   20f0c:	9b08      	ldr	r3, [sp, #32]
   20f0e:	1ad3      	subs	r3, r2, r3
   20f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20f12:	1ad3      	subs	r3, r2, r3
   20f14:	3b01      	subs	r3, #1
   20f16:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   20f18:	9a05      	ldr	r2, [sp, #20]
   20f1a:	9b01      	ldr	r3, [sp, #4]
   20f1c:	4293      	cmp	r3, r2
   20f1e:	bfa8      	it	ge
   20f20:	4613      	movge	r3, r2
   20f22:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
   20f24:	2300      	movs	r3, #0
   20f26:	930a      	str	r3, [sp, #40]	; 0x28
   20f28:	e015      	b.n	20f56 <ftoa+0x18e>
        {
            i32FracPart *= 10;
   20f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20f2c:	4613      	mov	r3, r2
   20f2e:	009b      	lsls	r3, r3, #2
   20f30:	4413      	add	r3, r2
   20f32:	005b      	lsls	r3, r3, #1
   20f34:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   20f36:	9b02      	ldr	r3, [sp, #8]
   20f38:	1c5a      	adds	r2, r3, #1
   20f3a:	9202      	str	r2, [sp, #8]
   20f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20f3e:	1612      	asrs	r2, r2, #24
   20f40:	b2d2      	uxtb	r2, r2
   20f42:	3230      	adds	r2, #48	; 0x30
   20f44:	b2d2      	uxtb	r2, r2
   20f46:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   20f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20f4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   20f4e:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   20f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20f52:	3301      	adds	r3, #1
   20f54:	930a      	str	r3, [sp, #40]	; 0x28
   20f56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20f58:	9b05      	ldr	r3, [sp, #20]
   20f5a:	429a      	cmp	r2, r3
   20f5c:	dbe5      	blt.n	20f2a <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   20f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20f60:	4613      	mov	r3, r2
   20f62:	009b      	lsls	r3, r3, #2
   20f64:	4413      	add	r3, r2
   20f66:	005b      	lsls	r3, r3, #1
   20f68:	161b      	asrs	r3, r3, #24
   20f6a:	2b04      	cmp	r3, #4
   20f6c:	dd1d      	ble.n	20faa <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   20f6e:	9b02      	ldr	r3, [sp, #8]
   20f70:	3b01      	subs	r3, #1
   20f72:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   20f74:	e015      	b.n	20fa2 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
   20f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20f78:	781b      	ldrb	r3, [r3, #0]
   20f7a:	2b2e      	cmp	r3, #46	; 0x2e
   20f7c:	d00e      	beq.n	20f9c <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
   20f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20f80:	781b      	ldrb	r3, [r3, #0]
   20f82:	2b39      	cmp	r3, #57	; 0x39
   20f84:	d103      	bne.n	20f8e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
   20f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20f88:	2230      	movs	r2, #48	; 0x30
   20f8a:	701a      	strb	r2, [r3, #0]
   20f8c:	e006      	b.n	20f9c <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
   20f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20f90:	781b      	ldrb	r3, [r3, #0]
   20f92:	3301      	adds	r3, #1
   20f94:	b2da      	uxtb	r2, r3
   20f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20f98:	701a      	strb	r2, [r3, #0]
                    break;
   20f9a:	e006      	b.n	20faa <ftoa+0x1e2>
                }
                pcBuftmp--;
   20f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20f9e:	3b01      	subs	r3, #1
   20fa0:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   20fa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20fa4:	9b08      	ldr	r3, [sp, #32]
   20fa6:	429a      	cmp	r2, r3
   20fa8:	d2e5      	bcs.n	20f76 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   20faa:	9b02      	ldr	r3, [sp, #8]
   20fac:	2200      	movs	r2, #0
   20fae:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   20fb0:	9a02      	ldr	r2, [sp, #8]
   20fb2:	9b08      	ldr	r3, [sp, #32]
   20fb4:	1ad3      	subs	r3, r2, r3
} // ftoa()
   20fb6:	4618      	mov	r0, r3
   20fb8:	b00e      	add	sp, #56	; 0x38
   20fba:	bd10      	pop	{r4, pc}
   20fbc:	00302e30 	.word	0x00302e30

00020fc0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   20fc0:	b510      	push	{r4, lr}
   20fc2:	b094      	sub	sp, #80	; 0x50
   20fc4:	9003      	str	r0, [sp, #12]
   20fc6:	9102      	str	r1, [sp, #8]
   20fc8:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   20fca:	2300      	movs	r3, #0
   20fcc:	930f      	str	r3, [sp, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   20fce:	2300      	movs	r3, #0
   20fd0:	9309      	str	r3, [sp, #36]	; 0x24

    while ( *pcFmt != 0x0 )
   20fd2:	e2e6      	b.n	215a2 <am_util_stdio_vsprintf+0x5e2>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   20fd4:	2306      	movs	r3, #6
   20fd6:	930c      	str	r3, [sp, #48]	; 0x30

        if ( *pcFmt != '%' )
   20fd8:	9b02      	ldr	r3, [sp, #8]
   20fda:	781b      	ldrb	r3, [r3, #0]
   20fdc:	2b25      	cmp	r3, #37	; 0x25
   20fde:	d01f      	beq.n	21020 <am_util_stdio_vsprintf+0x60>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   20fe0:	9b03      	ldr	r3, [sp, #12]
   20fe2:	2b00      	cmp	r3, #0
   20fe4:	d015      	beq.n	21012 <am_util_stdio_vsprintf+0x52>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   20fe6:	9b02      	ldr	r3, [sp, #8]
   20fe8:	781b      	ldrb	r3, [r3, #0]
   20fea:	2b0a      	cmp	r3, #10
   20fec:	d10b      	bne.n	21006 <am_util_stdio_vsprintf+0x46>
   20fee:	4bb1      	ldr	r3, [pc, #708]	; (212b4 <am_util_stdio_vsprintf+0x2f4>)
   20ff0:	781b      	ldrb	r3, [r3, #0]
   20ff2:	2b00      	cmp	r3, #0
   20ff4:	d007      	beq.n	21006 <am_util_stdio_vsprintf+0x46>
                {
                    *pcBuf++ = '\r';
   20ff6:	9b03      	ldr	r3, [sp, #12]
   20ff8:	1c5a      	adds	r2, r3, #1
   20ffa:	9203      	str	r2, [sp, #12]
   20ffc:	220d      	movs	r2, #13
   20ffe:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   21000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21002:	3301      	adds	r3, #1
   21004:	930f      	str	r3, [sp, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
   21006:	9b03      	ldr	r3, [sp, #12]
   21008:	1c5a      	adds	r2, r3, #1
   2100a:	9203      	str	r2, [sp, #12]
   2100c:	9a02      	ldr	r2, [sp, #8]
   2100e:	7812      	ldrb	r2, [r2, #0]
   21010:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   21012:	9b02      	ldr	r3, [sp, #8]
   21014:	3301      	adds	r3, #1
   21016:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
   21018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2101a:	3301      	adds	r3, #1
   2101c:	930f      	str	r3, [sp, #60]	; 0x3c
            continue;
   2101e:	e2c0      	b.n	215a2 <am_util_stdio_vsprintf+0x5e2>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   21020:	9b02      	ldr	r3, [sp, #8]
   21022:	3301      	adds	r3, #1
   21024:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
   21026:	2300      	movs	r3, #0
   21028:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   2102c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   21030:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   21034:	2320      	movs	r3, #32
   21036:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

        if ( *pcFmt == '0' )
   2103a:	9b02      	ldr	r3, [sp, #8]
   2103c:	781b      	ldrb	r3, [r3, #0]
   2103e:	2b30      	cmp	r3, #48	; 0x30
   21040:	d105      	bne.n	2104e <am_util_stdio_vsprintf+0x8e>
        {
            ui8PadChar = '0';
   21042:	2330      	movs	r3, #48	; 0x30
   21044:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
            ++pcFmt;
   21048:	9b02      	ldr	r3, [sp, #8]
   2104a:	3301      	adds	r3, #1
   2104c:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   2104e:	ab04      	add	r3, sp, #16
   21050:	4619      	mov	r1, r3
   21052:	9802      	ldr	r0, [sp, #8]
   21054:	f7ff fd9a 	bl	20b8c <decstr_to_int>
   21058:	4603      	mov	r3, r0
   2105a:	930e      	str	r3, [sp, #56]	; 0x38
        pcFmt += ui32NumChars;
   2105c:	9b04      	ldr	r3, [sp, #16]
   2105e:	9a02      	ldr	r2, [sp, #8]
   21060:	4413      	add	r3, r2
   21062:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   21064:	9b02      	ldr	r3, [sp, #8]
   21066:	781b      	ldrb	r3, [r3, #0]
   21068:	2b73      	cmp	r3, #115	; 0x73
   2106a:	d005      	beq.n	21078 <am_util_stdio_vsprintf+0xb8>
   2106c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2106e:	2b00      	cmp	r3, #0
   21070:	da02      	bge.n	21078 <am_util_stdio_vsprintf+0xb8>
        {
            iWidth = -iWidth;
   21072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21074:	425b      	negs	r3, r3
   21076:	930e      	str	r3, [sp, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   21078:	9b02      	ldr	r3, [sp, #8]
   2107a:	781b      	ldrb	r3, [r3, #0]
   2107c:	2b2e      	cmp	r3, #46	; 0x2e
   2107e:	d10d      	bne.n	2109c <am_util_stdio_vsprintf+0xdc>
        {
            ++pcFmt;
   21080:	9b02      	ldr	r3, [sp, #8]
   21082:	3301      	adds	r3, #1
   21084:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   21086:	ab04      	add	r3, sp, #16
   21088:	4619      	mov	r1, r3
   2108a:	9802      	ldr	r0, [sp, #8]
   2108c:	f7ff fd7e 	bl	20b8c <decstr_to_int>
   21090:	4603      	mov	r3, r0
   21092:	930c      	str	r3, [sp, #48]	; 0x30
            pcFmt += ui32NumChars;
   21094:	9b04      	ldr	r3, [sp, #16]
   21096:	9a02      	ldr	r2, [sp, #8]
   21098:	4413      	add	r3, r2
   2109a:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   2109c:	9b02      	ldr	r3, [sp, #8]
   2109e:	781b      	ldrb	r3, [r3, #0]
   210a0:	2b6c      	cmp	r3, #108	; 0x6c
   210a2:	d10c      	bne.n	210be <am_util_stdio_vsprintf+0xfe>
        {
            pcFmt++;
   210a4:	9b02      	ldr	r3, [sp, #8]
   210a6:	3301      	adds	r3, #1
   210a8:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   210aa:	9b02      	ldr	r3, [sp, #8]
   210ac:	781b      	ldrb	r3, [r3, #0]
   210ae:	2b6c      	cmp	r3, #108	; 0x6c
   210b0:	d105      	bne.n	210be <am_util_stdio_vsprintf+0xfe>
            {
                pcFmt++;
   210b2:	9b02      	ldr	r3, [sp, #8]
   210b4:	3301      	adds	r3, #1
   210b6:	9302      	str	r3, [sp, #8]
                bLongLong = true;
   210b8:	2301      	movs	r3, #1
   210ba:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
   210be:	9b02      	ldr	r3, [sp, #8]
   210c0:	781b      	ldrb	r3, [r3, #0]
   210c2:	3b46      	subs	r3, #70	; 0x46
   210c4:	2b32      	cmp	r3, #50	; 0x32
   210c6:	f200 8259 	bhi.w	2157c <am_util_stdio_vsprintf+0x5bc>
   210ca:	a201      	add	r2, pc, #4	; (adr r2, 210d0 <am_util_stdio_vsprintf+0x110>)
   210cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   210d0:	00021503 	.word	0x00021503
   210d4:	0002157d 	.word	0x0002157d
   210d8:	0002157d 	.word	0x0002157d
   210dc:	0002157d 	.word	0x0002157d
   210e0:	0002157d 	.word	0x0002157d
   210e4:	0002157d 	.word	0x0002157d
   210e8:	0002157d 	.word	0x0002157d
   210ec:	0002157d 	.word	0x0002157d
   210f0:	0002157d 	.word	0x0002157d
   210f4:	0002157d 	.word	0x0002157d
   210f8:	0002157d 	.word	0x0002157d
   210fc:	0002157d 	.word	0x0002157d
   21100:	0002157d 	.word	0x0002157d
   21104:	0002157d 	.word	0x0002157d
   21108:	0002157d 	.word	0x0002157d
   2110c:	0002157d 	.word	0x0002157d
   21110:	0002157d 	.word	0x0002157d
   21114:	0002157d 	.word	0x0002157d
   21118:	00021297 	.word	0x00021297
   2111c:	0002157d 	.word	0x0002157d
   21120:	0002157d 	.word	0x0002157d
   21124:	0002157d 	.word	0x0002157d
   21128:	0002157d 	.word	0x0002157d
   2112c:	0002157d 	.word	0x0002157d
   21130:	0002157d 	.word	0x0002157d
   21134:	0002157d 	.word	0x0002157d
   21138:	0002157d 	.word	0x0002157d
   2113c:	0002157d 	.word	0x0002157d
   21140:	0002157d 	.word	0x0002157d
   21144:	0002119d 	.word	0x0002119d
   21148:	000213c9 	.word	0x000213c9
   2114c:	0002157d 	.word	0x0002157d
   21150:	00021503 	.word	0x00021503
   21154:	0002157d 	.word	0x0002157d
   21158:	0002157d 	.word	0x0002157d
   2115c:	000213c9 	.word	0x000213c9
   21160:	0002157d 	.word	0x0002157d
   21164:	0002157d 	.word	0x0002157d
   21168:	0002157d 	.word	0x0002157d
   2116c:	0002157d 	.word	0x0002157d
   21170:	0002157d 	.word	0x0002157d
   21174:	0002157d 	.word	0x0002157d
   21178:	0002157d 	.word	0x0002157d
   2117c:	0002157d 	.word	0x0002157d
   21180:	0002157d 	.word	0x0002157d
   21184:	000211c3 	.word	0x000211c3
   21188:	0002157d 	.word	0x0002157d
   2118c:	00021335 	.word	0x00021335
   21190:	0002157d 	.word	0x0002157d
   21194:	0002157d 	.word	0x0002157d
   21198:	00021291 	.word	0x00021291
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   2119c:	9b01      	ldr	r3, [sp, #4]
   2119e:	1d1a      	adds	r2, r3, #4
   211a0:	9201      	str	r2, [sp, #4]
   211a2:	681b      	ldr	r3, [r3, #0]
   211a4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

                if ( pcBuf )
   211a8:	9b03      	ldr	r3, [sp, #12]
   211aa:	2b00      	cmp	r3, #0
   211ac:	d005      	beq.n	211ba <am_util_stdio_vsprintf+0x1fa>
                {
                    *pcBuf++ = ui8CharSpecifier;
   211ae:	9b03      	ldr	r3, [sp, #12]
   211b0:	1c5a      	adds	r2, r3, #1
   211b2:	9203      	str	r2, [sp, #12]
   211b4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   211b8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   211ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   211bc:	3301      	adds	r3, #1
   211be:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
   211c0:	e1ec      	b.n	2159c <am_util_stdio_vsprintf+0x5dc>

            case 's':
                pcStr = va_arg(pArgs, char *);
   211c2:	9b01      	ldr	r3, [sp, #4]
   211c4:	1d1a      	adds	r2, r3, #4
   211c6:	9201      	str	r2, [sp, #4]
   211c8:	681b      	ldr	r3, [r3, #0]
   211ca:	9313      	str	r3, [sp, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   211cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   211ce:	f7ff fdc3 	bl	20d58 <simple_strlen>
   211d2:	9009      	str	r0, [sp, #36]	; 0x24
                if ( iWidth > 0 )
   211d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   211d6:	2b00      	cmp	r3, #0
   211d8:	dd2e      	ble.n	21238 <am_util_stdio_vsprintf+0x278>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   211da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   211dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   211de:	429a      	cmp	r2, r3
   211e0:	d22a      	bcs.n	21238 <am_util_stdio_vsprintf+0x278>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   211e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   211e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   211e6:	1ad3      	subs	r3, r2, r3
   211e8:	930e      	str	r3, [sp, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   211ea:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   211ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   211f0:	4619      	mov	r1, r3
   211f2:	9803      	ldr	r0, [sp, #12]
   211f4:	f7ff fdc6 	bl	20d84 <padbuffer>
   211f8:	900e      	str	r0, [sp, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   211fa:	9b03      	ldr	r3, [sp, #12]
   211fc:	2b00      	cmp	r3, #0
   211fe:	d001      	beq.n	21204 <am_util_stdio_vsprintf+0x244>
   21200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21202:	e000      	b.n	21206 <am_util_stdio_vsprintf+0x246>
   21204:	2300      	movs	r3, #0
   21206:	9a03      	ldr	r2, [sp, #12]
   21208:	4413      	add	r3, r2
   2120a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
   2120c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2120e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21210:	4413      	add	r3, r2
   21212:	930f      	str	r3, [sp, #60]	; 0x3c
                        iWidth = 0;
   21214:	2300      	movs	r3, #0
   21216:	930e      	str	r3, [sp, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
   21218:	e00e      	b.n	21238 <am_util_stdio_vsprintf+0x278>
                {
                    if ( pcBuf )
   2121a:	9b03      	ldr	r3, [sp, #12]
   2121c:	2b00      	cmp	r3, #0
   2121e:	d005      	beq.n	2122c <am_util_stdio_vsprintf+0x26c>
                    {
                        *pcBuf++ = *pcStr;
   21220:	9b03      	ldr	r3, [sp, #12]
   21222:	1c5a      	adds	r2, r3, #1
   21224:	9203      	str	r2, [sp, #12]
   21226:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21228:	7812      	ldrb	r2, [r2, #0]
   2122a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   2122c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2122e:	3301      	adds	r3, #1
   21230:	9313      	str	r3, [sp, #76]	; 0x4c
                    ++ui32CharCnt;
   21232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21234:	3301      	adds	r3, #1
   21236:	930f      	str	r3, [sp, #60]	; 0x3c
                while (*pcStr != 0x0)
   21238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2123a:	781b      	ldrb	r3, [r3, #0]
   2123c:	2b00      	cmp	r3, #0
   2123e:	d1ec      	bne.n	2121a <am_util_stdio_vsprintf+0x25a>
                }

                if ( iWidth )
   21240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21242:	2b00      	cmp	r3, #0
   21244:	f000 81a7 	beq.w	21596 <am_util_stdio_vsprintf+0x5d6>
                {
                    iWidth = -iWidth;
   21248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2124a:	425b      	negs	r3, r3
   2124c:	930e      	str	r3, [sp, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   2124e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21250:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21252:	429a      	cmp	r2, r3
   21254:	f080 819f 	bcs.w	21596 <am_util_stdio_vsprintf+0x5d6>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   21258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2125a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2125c:	1ad3      	subs	r3, r2, r3
   2125e:	930e      	str	r3, [sp, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21260:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   21264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21266:	4619      	mov	r1, r3
   21268:	9803      	ldr	r0, [sp, #12]
   2126a:	f7ff fd8b 	bl	20d84 <padbuffer>
   2126e:	900e      	str	r0, [sp, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   21270:	9b03      	ldr	r3, [sp, #12]
   21272:	2b00      	cmp	r3, #0
   21274:	d001      	beq.n	2127a <am_util_stdio_vsprintf+0x2ba>
   21276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21278:	e000      	b.n	2127c <am_util_stdio_vsprintf+0x2bc>
   2127a:	2300      	movs	r3, #0
   2127c:	9a03      	ldr	r2, [sp, #12]
   2127e:	4413      	add	r3, r2
   21280:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
   21282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21286:	4413      	add	r3, r2
   21288:	930f      	str	r3, [sp, #60]	; 0x3c
                        iWidth = 0;
   2128a:	2300      	movs	r3, #0
   2128c:	930e      	str	r3, [sp, #56]	; 0x38
                    }
                }
                break;
   2128e:	e182      	b.n	21596 <am_util_stdio_vsprintf+0x5d6>

            case 'x':
                bLower = true;
   21290:	2301      	movs	r3, #1
   21292:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21296:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   2129a:	2b00      	cmp	r3, #0
   2129c:	d00c      	beq.n	212b8 <am_util_stdio_vsprintf+0x2f8>
   2129e:	9b01      	ldr	r3, [sp, #4]
   212a0:	3307      	adds	r3, #7
   212a2:	f023 0307 	bic.w	r3, r3, #7
   212a6:	f103 0208 	add.w	r2, r3, #8
   212aa:	9201      	str	r2, [sp, #4]
   212ac:	e9d3 3400 	ldrd	r3, r4, [r3]
   212b0:	e008      	b.n	212c4 <am_util_stdio_vsprintf+0x304>
   212b2:	bf00      	nop
   212b4:	10004644 	.word	0x10004644
                                      va_arg(pArgs, uint32_t);
   212b8:	9b01      	ldr	r3, [sp, #4]
   212ba:	1d1a      	adds	r2, r3, #4
   212bc:	9201      	str	r2, [sp, #4]
   212be:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   212c0:	f04f 0400 	mov.w	r4, #0
   212c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40

                if ( iWidth )
   212c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   212ca:	2b00      	cmp	r3, #0
   212cc:	d01e      	beq.n	2130c <am_util_stdio_vsprintf+0x34c>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   212ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   212d2:	f7ff fc38 	bl	20b46 <ndigits_in_hex>
   212d6:	4602      	mov	r2, r0
   212d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   212da:	1a9b      	subs	r3, r3, r2
   212dc:	930e      	str	r3, [sp, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   212de:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   212e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   212e4:	4619      	mov	r1, r3
   212e6:	9803      	ldr	r0, [sp, #12]
   212e8:	f7ff fd4c 	bl	20d84 <padbuffer>
   212ec:	900e      	str	r0, [sp, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   212ee:	9b03      	ldr	r3, [sp, #12]
   212f0:	2b00      	cmp	r3, #0
   212f2:	d001      	beq.n	212f8 <am_util_stdio_vsprintf+0x338>
   212f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   212f6:	e000      	b.n	212fa <am_util_stdio_vsprintf+0x33a>
   212f8:	2300      	movs	r3, #0
   212fa:	9a03      	ldr	r2, [sp, #12]
   212fc:	4413      	add	r3, r2
   212fe:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
   21300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21304:	4413      	add	r3, r2
   21306:	930f      	str	r3, [sp, #60]	; 0x3c
                    iWidth = 0;
   21308:	2300      	movs	r3, #0
   2130a:	930e      	str	r3, [sp, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   2130c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   21310:	9a03      	ldr	r2, [sp, #12]
   21312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21316:	f7ff fcc1 	bl	20c9c <uint64_to_hexstr>
   2131a:	900d      	str	r0, [sp, #52]	; 0x34

                if ( pcBuf )
   2131c:	9b03      	ldr	r3, [sp, #12]
   2131e:	2b00      	cmp	r3, #0
   21320:	d003      	beq.n	2132a <am_util_stdio_vsprintf+0x36a>
                {
                    pcBuf += iVal;
   21322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21324:	9a03      	ldr	r2, [sp, #12]
   21326:	4413      	add	r3, r2
   21328:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
   2132a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2132c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2132e:	4413      	add	r3, r2
   21330:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
   21332:	e133      	b.n	2159c <am_util_stdio_vsprintf+0x5dc>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21334:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   21338:	2b00      	cmp	r3, #0
   2133a:	d009      	beq.n	21350 <am_util_stdio_vsprintf+0x390>
   2133c:	9b01      	ldr	r3, [sp, #4]
   2133e:	3307      	adds	r3, #7
   21340:	f023 0307 	bic.w	r3, r3, #7
   21344:	f103 0208 	add.w	r2, r3, #8
   21348:	9201      	str	r2, [sp, #4]
   2134a:	e9d3 3400 	ldrd	r3, r4, [r3]
   2134e:	e005      	b.n	2135c <am_util_stdio_vsprintf+0x39c>
                                      va_arg(pArgs, uint32_t);
   21350:	9b01      	ldr	r3, [sp, #4]
   21352:	1d1a      	adds	r2, r3, #4
   21354:	9201      	str	r2, [sp, #4]
   21356:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21358:	f04f 0400 	mov.w	r4, #0
   2135c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40

                if ( iWidth )
   21360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21362:	2b00      	cmp	r3, #0
   21364:	d01e      	beq.n	213a4 <am_util_stdio_vsprintf+0x3e4>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   21366:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2136a:	f7ff fbb2 	bl	20ad2 <ndigits_in_u64>
   2136e:	4602      	mov	r2, r0
   21370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21372:	1a9b      	subs	r3, r3, r2
   21374:	930e      	str	r3, [sp, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21376:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   2137a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2137c:	4619      	mov	r1, r3
   2137e:	9803      	ldr	r0, [sp, #12]
   21380:	f7ff fd00 	bl	20d84 <padbuffer>
   21384:	900e      	str	r0, [sp, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   21386:	9b03      	ldr	r3, [sp, #12]
   21388:	2b00      	cmp	r3, #0
   2138a:	d001      	beq.n	21390 <am_util_stdio_vsprintf+0x3d0>
   2138c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2138e:	e000      	b.n	21392 <am_util_stdio_vsprintf+0x3d2>
   21390:	2300      	movs	r3, #0
   21392:	9a03      	ldr	r2, [sp, #12]
   21394:	4413      	add	r3, r2
   21396:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
   21398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2139a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2139c:	4413      	add	r3, r2
   2139e:	930f      	str	r3, [sp, #60]	; 0x3c
                    iWidth = 0;
   213a0:	2300      	movs	r3, #0
   213a2:	930e      	str	r3, [sp, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   213a4:	9a03      	ldr	r2, [sp, #12]
   213a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   213aa:	f7ff fc33 	bl	20c14 <uint64_to_str>
   213ae:	900d      	str	r0, [sp, #52]	; 0x34

                if ( pcBuf )
   213b0:	9b03      	ldr	r3, [sp, #12]
   213b2:	2b00      	cmp	r3, #0
   213b4:	d003      	beq.n	213be <am_util_stdio_vsprintf+0x3fe>
                {
                    pcBuf += iVal;
   213b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   213b8:	9a03      	ldr	r2, [sp, #12]
   213ba:	4413      	add	r3, r2
   213bc:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
   213be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   213c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   213c2:	4413      	add	r3, r2
   213c4:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
   213c6:	e0e9      	b.n	2159c <am_util_stdio_vsprintf+0x5dc>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   213c8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   213cc:	2b00      	cmp	r3, #0
   213ce:	d009      	beq.n	213e4 <am_util_stdio_vsprintf+0x424>
   213d0:	9b01      	ldr	r3, [sp, #4]
   213d2:	3307      	adds	r3, #7
   213d4:	f023 0307 	bic.w	r3, r3, #7
   213d8:	f103 0208 	add.w	r2, r3, #8
   213dc:	9201      	str	r2, [sp, #4]
   213de:	e9d3 3400 	ldrd	r3, r4, [r3]
   213e2:	e005      	b.n	213f0 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
   213e4:	9b01      	ldr	r3, [sp, #4]
   213e6:	1d1a      	adds	r2, r3, #4
   213e8:	9201      	str	r2, [sp, #4]
   213ea:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   213ec:	ea4f 74e3 	mov.w	r4, r3, asr #31
   213f0:	e9cd 3406 	strd	r3, r4, [sp, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   213f4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   213f8:	2b00      	cmp	r3, #0
   213fa:	f174 0300 	sbcs.w	r3, r4, #0
   213fe:	da0a      	bge.n	21416 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
   21400:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   21404:	425b      	negs	r3, r3
   21406:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   2140a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
                    bNeg = true;
   2140e:	2301      	movs	r3, #1
   21410:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   21414:	e006      	b.n	21424 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
   21416:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   2141a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
                    bNeg = false;
   2141e:	2300      	movs	r3, #0
   21420:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                }

                if ( iWidth )
   21424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21426:	2b00      	cmp	r3, #0
   21428:	d04a      	beq.n	214c0 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   2142a:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
   2142e:	4618      	mov	r0, r3
   21430:	4621      	mov	r1, r4
   21432:	f7ff fb6d 	bl	20b10 <ndigits_in_i64>
   21436:	4602      	mov	r2, r0
   21438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2143a:	1a9b      	subs	r3, r3, r2
   2143c:	930e      	str	r3, [sp, #56]	; 0x38

                    if ( bNeg )
   2143e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   21442:	2b00      	cmp	r3, #0
   21444:	d011      	beq.n	2146a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
   21446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21448:	3b01      	subs	r3, #1
   2144a:	930e      	str	r3, [sp, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   2144c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   21450:	2b30      	cmp	r3, #48	; 0x30
   21452:	d10a      	bne.n	2146a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   21454:	9b03      	ldr	r3, [sp, #12]
   21456:	2b00      	cmp	r3, #0
   21458:	d004      	beq.n	21464 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
   2145a:	9b03      	ldr	r3, [sp, #12]
   2145c:	1c5a      	adds	r2, r3, #1
   2145e:	9203      	str	r2, [sp, #12]
   21460:	222d      	movs	r2, #45	; 0x2d
   21462:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   21464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21466:	3301      	adds	r3, #1
   21468:	930f      	str	r3, [sp, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   2146a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   2146e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21470:	4619      	mov	r1, r3
   21472:	9803      	ldr	r0, [sp, #12]
   21474:	f7ff fc86 	bl	20d84 <padbuffer>
   21478:	900e      	str	r0, [sp, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   2147a:	9b03      	ldr	r3, [sp, #12]
   2147c:	2b00      	cmp	r3, #0
   2147e:	d001      	beq.n	21484 <am_util_stdio_vsprintf+0x4c4>
   21480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21482:	e000      	b.n	21486 <am_util_stdio_vsprintf+0x4c6>
   21484:	2300      	movs	r3, #0
   21486:	9a03      	ldr	r2, [sp, #12]
   21488:	4413      	add	r3, r2
   2148a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
   2148c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2148e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21490:	4413      	add	r3, r2
   21492:	930f      	str	r3, [sp, #60]	; 0x3c
                    iWidth = 0;
   21494:	2300      	movs	r3, #0
   21496:	930e      	str	r3, [sp, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   21498:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2149c:	2b00      	cmp	r3, #0
   2149e:	d01e      	beq.n	214de <am_util_stdio_vsprintf+0x51e>
   214a0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   214a4:	2b20      	cmp	r3, #32
   214a6:	d11a      	bne.n	214de <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   214a8:	9b03      	ldr	r3, [sp, #12]
   214aa:	2b00      	cmp	r3, #0
   214ac:	d004      	beq.n	214b8 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
   214ae:	9b03      	ldr	r3, [sp, #12]
   214b0:	1c5a      	adds	r2, r3, #1
   214b2:	9203      	str	r2, [sp, #12]
   214b4:	222d      	movs	r2, #45	; 0x2d
   214b6:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   214b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   214ba:	3301      	adds	r3, #1
   214bc:	930f      	str	r3, [sp, #60]	; 0x3c
   214be:	e00e      	b.n	214de <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
   214c0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   214c4:	2b00      	cmp	r3, #0
   214c6:	d00a      	beq.n	214de <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
   214c8:	9b03      	ldr	r3, [sp, #12]
   214ca:	2b00      	cmp	r3, #0
   214cc:	d004      	beq.n	214d8 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
   214ce:	9b03      	ldr	r3, [sp, #12]
   214d0:	1c5a      	adds	r2, r3, #1
   214d2:	9203      	str	r2, [sp, #12]
   214d4:	222d      	movs	r2, #45	; 0x2d
   214d6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   214d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   214da:	3301      	adds	r3, #1
   214dc:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   214de:	9a03      	ldr	r2, [sp, #12]
   214e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   214e4:	f7ff fb96 	bl	20c14 <uint64_to_str>
   214e8:	900d      	str	r0, [sp, #52]	; 0x34

                if ( pcBuf )
   214ea:	9b03      	ldr	r3, [sp, #12]
   214ec:	2b00      	cmp	r3, #0
   214ee:	d003      	beq.n	214f8 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
   214f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   214f2:	9a03      	ldr	r2, [sp, #12]
   214f4:	4413      	add	r3, r2
   214f6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
   214f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   214fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   214fc:	4413      	add	r3, r2
   214fe:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
   21500:	e04c      	b.n	2159c <am_util_stdio_vsprintf+0x5dc>


            case 'f':
            case 'F':
                if ( pcBuf )
   21502:	9b03      	ldr	r3, [sp, #12]
   21504:	2b00      	cmp	r3, #0
   21506:	d048      	beq.n	2159a <am_util_stdio_vsprintf+0x5da>
                {
                    float fValue = va_arg(pArgs, double);
   21508:	9b01      	ldr	r3, [sp, #4]
   2150a:	3307      	adds	r3, #7
   2150c:	f023 0307 	bic.w	r3, r3, #7
   21510:	f103 0208 	add.w	r2, r3, #8
   21514:	9201      	str	r2, [sp, #4]
   21516:	e9d3 3400 	ldrd	r3, r4, [r3]
   2151a:	4618      	mov	r0, r3
   2151c:	4621      	mov	r1, r4
   2151e:	f7ea ff07 	bl	c330 <__aeabi_d2f>
   21522:	4603      	mov	r3, r0
   21524:	9305      	str	r3, [sp, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   21526:	9b03      	ldr	r3, [sp, #12]
   21528:	2214      	movs	r2, #20
   2152a:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   2152c:	990c      	ldr	r1, [sp, #48]	; 0x30
   2152e:	9803      	ldr	r0, [sp, #12]
   21530:	ed9d 0a05 	vldr	s0, [sp, #20]
   21534:	f7ff fc48 	bl	20dc8 <ftoa>
   21538:	900d      	str	r0, [sp, #52]	; 0x34
                    if ( iVal < 0 )
   2153a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2153c:	2b00      	cmp	r3, #0
   2153e:	da14      	bge.n	2156a <am_util_stdio_vsprintf+0x5aa>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   21540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21546:	d102      	bne.n	2154e <am_util_stdio_vsprintf+0x58e>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   21548:	4b1d      	ldr	r3, [pc, #116]	; (215c0 <am_util_stdio_vsprintf+0x600>)
   2154a:	930a      	str	r3, [sp, #40]	; 0x28
   2154c:	e008      	b.n	21560 <am_util_stdio_vsprintf+0x5a0>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   2154e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21550:	f113 0f02 	cmn.w	r3, #2
   21554:	d102      	bne.n	2155c <am_util_stdio_vsprintf+0x59c>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   21556:	4b1b      	ldr	r3, [pc, #108]	; (215c4 <am_util_stdio_vsprintf+0x604>)
   21558:	930a      	str	r3, [sp, #40]	; 0x28
   2155a:	e001      	b.n	21560 <am_util_stdio_vsprintf+0x5a0>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   2155c:	4b1a      	ldr	r3, [pc, #104]	; (215c8 <am_util_stdio_vsprintf+0x608>)
   2155e:	930a      	str	r3, [sp, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   21560:	9b03      	ldr	r3, [sp, #12]
   21562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21564:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   21566:	2303      	movs	r3, #3
   21568:	930d      	str	r3, [sp, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
   2156a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2156c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2156e:	4413      	add	r3, r2
   21570:	930f      	str	r3, [sp, #60]	; 0x3c
                    pcBuf += iVal;
   21572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21574:	9a03      	ldr	r2, [sp, #12]
   21576:	4413      	add	r3, r2
   21578:	9303      	str	r3, [sp, #12]
                }
                break;
   2157a:	e00e      	b.n	2159a <am_util_stdio_vsprintf+0x5da>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   2157c:	9b03      	ldr	r3, [sp, #12]
   2157e:	2b00      	cmp	r3, #0
   21580:	d005      	beq.n	2158e <am_util_stdio_vsprintf+0x5ce>
                {
                    *pcBuf++ = *pcFmt;
   21582:	9b03      	ldr	r3, [sp, #12]
   21584:	1c5a      	adds	r2, r3, #1
   21586:	9203      	str	r2, [sp, #12]
   21588:	9a02      	ldr	r2, [sp, #8]
   2158a:	7812      	ldrb	r2, [r2, #0]
   2158c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   2158e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21590:	3301      	adds	r3, #1
   21592:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
   21594:	e002      	b.n	2159c <am_util_stdio_vsprintf+0x5dc>
                break;
   21596:	bf00      	nop
   21598:	e000      	b.n	2159c <am_util_stdio_vsprintf+0x5dc>
                break;
   2159a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   2159c:	9b02      	ldr	r3, [sp, #8]
   2159e:	3301      	adds	r3, #1
   215a0:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
   215a2:	9b02      	ldr	r3, [sp, #8]
   215a4:	781b      	ldrb	r3, [r3, #0]
   215a6:	2b00      	cmp	r3, #0
   215a8:	f47f ad14 	bne.w	20fd4 <am_util_stdio_vsprintf+0x14>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   215ac:	9b03      	ldr	r3, [sp, #12]
   215ae:	2b00      	cmp	r3, #0
   215b0:	d002      	beq.n	215b8 <am_util_stdio_vsprintf+0x5f8>
    {
        *pcBuf = 0x0;
   215b2:	9b03      	ldr	r3, [sp, #12]
   215b4:	2200      	movs	r2, #0
   215b6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   215b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
   215ba:	4618      	mov	r0, r3
   215bc:	b014      	add	sp, #80	; 0x50
   215be:	bd10      	pop	{r4, pc}
   215c0:	00302e30 	.word	0x00302e30
   215c4:	00232e23 	.word	0x00232e23
   215c8:	003f2e3f 	.word	0x003f2e3f

000215cc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   215cc:	b40f      	push	{r0, r1, r2, r3}
   215ce:	b500      	push	{lr}
   215d0:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   215d2:	4b0c      	ldr	r3, [pc, #48]	; (21604 <am_util_stdio_printf+0x38>)
   215d4:	681b      	ldr	r3, [r3, #0]
   215d6:	2b00      	cmp	r3, #0
   215d8:	d101      	bne.n	215de <am_util_stdio_printf+0x12>
    {
        return 0;
   215da:	2300      	movs	r3, #0
   215dc:	e00c      	b.n	215f8 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   215de:	ab05      	add	r3, sp, #20
   215e0:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   215e2:	9a00      	ldr	r2, [sp, #0]
   215e4:	9904      	ldr	r1, [sp, #16]
   215e6:	4808      	ldr	r0, [pc, #32]	; (21608 <am_util_stdio_printf+0x3c>)
   215e8:	f7ff fcea 	bl	20fc0 <am_util_stdio_vsprintf>
   215ec:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   215ee:	4b05      	ldr	r3, [pc, #20]	; (21604 <am_util_stdio_printf+0x38>)
   215f0:	681b      	ldr	r3, [r3, #0]
   215f2:	4805      	ldr	r0, [pc, #20]	; (21608 <am_util_stdio_printf+0x3c>)
   215f4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   215f6:	9b01      	ldr	r3, [sp, #4]
}
   215f8:	4618      	mov	r0, r3
   215fa:	b003      	add	sp, #12
   215fc:	f85d eb04 	ldr.w	lr, [sp], #4
   21600:	b004      	add	sp, #16
   21602:	4770      	bx	lr
   21604:	1000973c 	.word	0x1000973c
   21608:	10004544 	.word	0x10004544

0002160c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
   2160c:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   2160e:	4802      	ldr	r0, [pc, #8]	; (21618 <am_util_stdio_terminal_clear+0xc>)
   21610:	f7ff ffdc 	bl	215cc <am_util_stdio_printf>
}
   21614:	bf00      	nop
   21616:	bd08      	pop	{r3, pc}
   21618:	00029124 	.word	0x00029124

0002161c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   2161c:	b500      	push	{lr}
   2161e:	b089      	sub	sp, #36	; 0x24
   21620:	9001      	str	r0, [sp, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   21622:	2300      	movs	r3, #0
   21624:	9305      	str	r3, [sp, #20]

	vTaskSuspendAll();
   21626:	f001 f8a1 	bl	2276c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   2162a:	4b41      	ldr	r3, [pc, #260]	; (21730 <pvPortMalloc+0x114>)
   2162c:	681b      	ldr	r3, [r3, #0]
   2162e:	2b00      	cmp	r3, #0
   21630:	d104      	bne.n	2163c <pvPortMalloc+0x20>
		{
			prvHeapInit();
   21632:	f000 f8bd 	bl	217b0 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   21636:	4b3e      	ldr	r3, [pc, #248]	; (21730 <pvPortMalloc+0x114>)
   21638:	2201      	movs	r2, #1
   2163a:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   2163c:	9b01      	ldr	r3, [sp, #4]
   2163e:	2b00      	cmp	r3, #0
   21640:	d00e      	beq.n	21660 <pvPortMalloc+0x44>
		{
			xWantedSize += heapSTRUCT_SIZE;
   21642:	2308      	movs	r3, #8
   21644:	461a      	mov	r2, r3
   21646:	9b01      	ldr	r3, [sp, #4]
   21648:	4413      	add	r3, r2
   2164a:	9301      	str	r3, [sp, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   2164c:	9b01      	ldr	r3, [sp, #4]
   2164e:	f003 0307 	and.w	r3, r3, #7
   21652:	2b00      	cmp	r3, #0
   21654:	d004      	beq.n	21660 <pvPortMalloc+0x44>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   21656:	9b01      	ldr	r3, [sp, #4]
   21658:	f023 0307 	bic.w	r3, r3, #7
   2165c:	3308      	adds	r3, #8
   2165e:	9301      	str	r3, [sp, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   21660:	9b01      	ldr	r3, [sp, #4]
   21662:	2b00      	cmp	r3, #0
   21664:	d057      	beq.n	21716 <pvPortMalloc+0xfa>
   21666:	9b01      	ldr	r3, [sp, #4]
   21668:	f643 72f7 	movw	r2, #16375	; 0x3ff7
   2166c:	4293      	cmp	r3, r2
   2166e:	d852      	bhi.n	21716 <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   21670:	4b30      	ldr	r3, [pc, #192]	; (21734 <pvPortMalloc+0x118>)
   21672:	9306      	str	r3, [sp, #24]
			pxBlock = xStart.pxNextFreeBlock;
   21674:	4b2f      	ldr	r3, [pc, #188]	; (21734 <pvPortMalloc+0x118>)
   21676:	681b      	ldr	r3, [r3, #0]
   21678:	9307      	str	r3, [sp, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   2167a:	e004      	b.n	21686 <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
   2167c:	9b07      	ldr	r3, [sp, #28]
   2167e:	9306      	str	r3, [sp, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   21680:	9b07      	ldr	r3, [sp, #28]
   21682:	681b      	ldr	r3, [r3, #0]
   21684:	9307      	str	r3, [sp, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   21686:	9b07      	ldr	r3, [sp, #28]
   21688:	685a      	ldr	r2, [r3, #4]
   2168a:	9b01      	ldr	r3, [sp, #4]
   2168c:	429a      	cmp	r2, r3
   2168e:	d203      	bcs.n	21698 <pvPortMalloc+0x7c>
   21690:	9b07      	ldr	r3, [sp, #28]
   21692:	681b      	ldr	r3, [r3, #0]
   21694:	2b00      	cmp	r3, #0
   21696:	d1f1      	bne.n	2167c <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   21698:	9b07      	ldr	r3, [sp, #28]
   2169a:	4a27      	ldr	r2, [pc, #156]	; (21738 <pvPortMalloc+0x11c>)
   2169c:	4293      	cmp	r3, r2
   2169e:	d03a      	beq.n	21716 <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   216a0:	9b06      	ldr	r3, [sp, #24]
   216a2:	681b      	ldr	r3, [r3, #0]
   216a4:	2208      	movs	r2, #8
   216a6:	4413      	add	r3, r2
   216a8:	9305      	str	r3, [sp, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   216aa:	9b07      	ldr	r3, [sp, #28]
   216ac:	681a      	ldr	r2, [r3, #0]
   216ae:	9b06      	ldr	r3, [sp, #24]
   216b0:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   216b2:	9b07      	ldr	r3, [sp, #28]
   216b4:	685a      	ldr	r2, [r3, #4]
   216b6:	9b01      	ldr	r3, [sp, #4]
   216b8:	1ad3      	subs	r3, r2, r3
   216ba:	2208      	movs	r2, #8
   216bc:	0052      	lsls	r2, r2, #1
   216be:	4293      	cmp	r3, r2
   216c0:	d922      	bls.n	21708 <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   216c2:	9a07      	ldr	r2, [sp, #28]
   216c4:	9b01      	ldr	r3, [sp, #4]
   216c6:	4413      	add	r3, r2
   216c8:	9303      	str	r3, [sp, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   216ca:	9b07      	ldr	r3, [sp, #28]
   216cc:	685a      	ldr	r2, [r3, #4]
   216ce:	9b01      	ldr	r3, [sp, #4]
   216d0:	1ad2      	subs	r2, r2, r3
   216d2:	9b03      	ldr	r3, [sp, #12]
   216d4:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   216d6:	9b07      	ldr	r3, [sp, #28]
   216d8:	9a01      	ldr	r2, [sp, #4]
   216da:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   216dc:	9b03      	ldr	r3, [sp, #12]
   216de:	685b      	ldr	r3, [r3, #4]
   216e0:	9302      	str	r3, [sp, #8]
   216e2:	4b14      	ldr	r3, [pc, #80]	; (21734 <pvPortMalloc+0x118>)
   216e4:	9304      	str	r3, [sp, #16]
   216e6:	e002      	b.n	216ee <pvPortMalloc+0xd2>
   216e8:	9b04      	ldr	r3, [sp, #16]
   216ea:	681b      	ldr	r3, [r3, #0]
   216ec:	9304      	str	r3, [sp, #16]
   216ee:	9b04      	ldr	r3, [sp, #16]
   216f0:	681b      	ldr	r3, [r3, #0]
   216f2:	685a      	ldr	r2, [r3, #4]
   216f4:	9b02      	ldr	r3, [sp, #8]
   216f6:	429a      	cmp	r2, r3
   216f8:	d3f6      	bcc.n	216e8 <pvPortMalloc+0xcc>
   216fa:	9b04      	ldr	r3, [sp, #16]
   216fc:	681a      	ldr	r2, [r3, #0]
   216fe:	9b03      	ldr	r3, [sp, #12]
   21700:	601a      	str	r2, [r3, #0]
   21702:	9b04      	ldr	r3, [sp, #16]
   21704:	9a03      	ldr	r2, [sp, #12]
   21706:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   21708:	4b0c      	ldr	r3, [pc, #48]	; (2173c <pvPortMalloc+0x120>)
   2170a:	681a      	ldr	r2, [r3, #0]
   2170c:	9b07      	ldr	r3, [sp, #28]
   2170e:	685b      	ldr	r3, [r3, #4]
   21710:	1ad3      	subs	r3, r2, r3
   21712:	4a0a      	ldr	r2, [pc, #40]	; (2173c <pvPortMalloc+0x120>)
   21714:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   21716:	f001 f865 	bl	227e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   2171a:	9b05      	ldr	r3, [sp, #20]
   2171c:	2b00      	cmp	r3, #0
   2171e:	d101      	bne.n	21724 <pvPortMalloc+0x108>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   21720:	f7f9 fd92 	bl	1b248 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   21724:	9b05      	ldr	r3, [sp, #20]
}
   21726:	4618      	mov	r0, r3
   21728:	b009      	add	sp, #36	; 0x24
   2172a:	f85d fb04 	ldr.w	pc, [sp], #4
   2172e:	bf00      	nop
   21730:	10008658 	.word	0x10008658
   21734:	10008648 	.word	0x10008648
   21738:	10008650 	.word	0x10008650
   2173c:	10002bc8 	.word	0x10002bc8

00021740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   21740:	b500      	push	{lr}
   21742:	b087      	sub	sp, #28
   21744:	9001      	str	r0, [sp, #4]
uint8_t *puc = ( uint8_t * ) pv;
   21746:	9b01      	ldr	r3, [sp, #4]
   21748:	9304      	str	r3, [sp, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   2174a:	9b01      	ldr	r3, [sp, #4]
   2174c:	2b00      	cmp	r3, #0
   2174e:	d027      	beq.n	217a0 <vPortFree+0x60>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   21750:	2308      	movs	r3, #8
   21752:	425b      	negs	r3, r3
   21754:	9a04      	ldr	r2, [sp, #16]
   21756:	4413      	add	r3, r2
   21758:	9304      	str	r3, [sp, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   2175a:	9b04      	ldr	r3, [sp, #16]
   2175c:	9303      	str	r3, [sp, #12]

		vTaskSuspendAll();
   2175e:	f001 f805 	bl	2276c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   21762:	9b03      	ldr	r3, [sp, #12]
   21764:	685b      	ldr	r3, [r3, #4]
   21766:	9302      	str	r3, [sp, #8]
   21768:	4b0f      	ldr	r3, [pc, #60]	; (217a8 <vPortFree+0x68>)
   2176a:	9305      	str	r3, [sp, #20]
   2176c:	e002      	b.n	21774 <vPortFree+0x34>
   2176e:	9b05      	ldr	r3, [sp, #20]
   21770:	681b      	ldr	r3, [r3, #0]
   21772:	9305      	str	r3, [sp, #20]
   21774:	9b05      	ldr	r3, [sp, #20]
   21776:	681b      	ldr	r3, [r3, #0]
   21778:	685a      	ldr	r2, [r3, #4]
   2177a:	9b02      	ldr	r3, [sp, #8]
   2177c:	429a      	cmp	r2, r3
   2177e:	d3f6      	bcc.n	2176e <vPortFree+0x2e>
   21780:	9b05      	ldr	r3, [sp, #20]
   21782:	681a      	ldr	r2, [r3, #0]
   21784:	9b03      	ldr	r3, [sp, #12]
   21786:	601a      	str	r2, [r3, #0]
   21788:	9b05      	ldr	r3, [sp, #20]
   2178a:	9a03      	ldr	r2, [sp, #12]
   2178c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   2178e:	9b03      	ldr	r3, [sp, #12]
   21790:	685a      	ldr	r2, [r3, #4]
   21792:	4b06      	ldr	r3, [pc, #24]	; (217ac <vPortFree+0x6c>)
   21794:	681b      	ldr	r3, [r3, #0]
   21796:	4413      	add	r3, r2
   21798:	4a04      	ldr	r2, [pc, #16]	; (217ac <vPortFree+0x6c>)
   2179a:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   2179c:	f001 f822 	bl	227e4 <xTaskResumeAll>
	}
}
   217a0:	bf00      	nop
   217a2:	b007      	add	sp, #28
   217a4:	f85d fb04 	ldr.w	pc, [sp], #4
   217a8:	10008648 	.word	0x10008648
   217ac:	10002bc8 	.word	0x10002bc8

000217b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   217b0:	b082      	sub	sp, #8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   217b2:	4b0e      	ldr	r3, [pc, #56]	; (217ec <prvHeapInit+0x3c>)
   217b4:	f023 0307 	bic.w	r3, r3, #7
   217b8:	9301      	str	r3, [sp, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   217ba:	4a0d      	ldr	r2, [pc, #52]	; (217f0 <prvHeapInit+0x40>)
   217bc:	9b01      	ldr	r3, [sp, #4]
   217be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   217c0:	4b0b      	ldr	r3, [pc, #44]	; (217f0 <prvHeapInit+0x40>)
   217c2:	2200      	movs	r2, #0
   217c4:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   217c6:	4b0b      	ldr	r3, [pc, #44]	; (217f4 <prvHeapInit+0x44>)
   217c8:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   217cc:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   217ce:	4b09      	ldr	r3, [pc, #36]	; (217f4 <prvHeapInit+0x44>)
   217d0:	2200      	movs	r2, #0
   217d2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   217d4:	9b01      	ldr	r3, [sp, #4]
   217d6:	9300      	str	r3, [sp, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   217d8:	9b00      	ldr	r3, [sp, #0]
   217da:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   217de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   217e0:	9b00      	ldr	r3, [sp, #0]
   217e2:	4a04      	ldr	r2, [pc, #16]	; (217f4 <prvHeapInit+0x44>)
   217e4:	601a      	str	r2, [r3, #0]
}
   217e6:	bf00      	nop
   217e8:	b002      	add	sp, #8
   217ea:	4770      	bx	lr
   217ec:	10004650 	.word	0x10004650
   217f0:	10008648 	.word	0x10008648
   217f4:	10008650 	.word	0x10008650

000217f8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   217f8:	b500      	push	{lr}
   217fa:	b083      	sub	sp, #12
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   217fc:	2018      	movs	r0, #24
   217fe:	f7ff ff0d 	bl	2161c <pvPortMalloc>
   21802:	9001      	str	r0, [sp, #4]

		if( pxEventBits != NULL )
   21804:	9b01      	ldr	r3, [sp, #4]
   21806:	2b00      	cmp	r3, #0
   21808:	d007      	beq.n	2181a <xEventGroupCreate+0x22>
		{
			pxEventBits->uxEventBits = 0;
   2180a:	9b01      	ldr	r3, [sp, #4]
   2180c:	2200      	movs	r2, #0
   2180e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   21810:	9b01      	ldr	r3, [sp, #4]
   21812:	3304      	adds	r3, #4
   21814:	4618      	mov	r0, r3
   21816:	f000 f94a 	bl	21aae <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
   2181a:	9b01      	ldr	r3, [sp, #4]
	}
   2181c:	4618      	mov	r0, r3
   2181e:	b003      	add	sp, #12
   21820:	f85d fb04 	ldr.w	pc, [sp], #4

00021824 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   21824:	b500      	push	{lr}
   21826:	b08d      	sub	sp, #52	; 0x34
   21828:	9003      	str	r0, [sp, #12]
   2182a:	9102      	str	r1, [sp, #8]
   2182c:	9201      	str	r2, [sp, #4]
   2182e:	9300      	str	r3, [sp, #0]
EventGroup_t *pxEventBits = xEventGroup;
   21830:	9b03      	ldr	r3, [sp, #12]
   21832:	9309      	str	r3, [sp, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   21834:	2300      	movs	r3, #0
   21836:	930a      	str	r3, [sp, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   21838:	2300      	movs	r3, #0
   2183a:	9308      	str	r3, [sp, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   2183c:	9b03      	ldr	r3, [sp, #12]
   2183e:	2b00      	cmp	r3, #0
   21840:	d100      	bne.n	21844 <xEventGroupWaitBits+0x20>
   21842:	e7fe      	b.n	21842 <xEventGroupWaitBits+0x1e>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   21844:	9b02      	ldr	r3, [sp, #8]
   21846:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   2184a:	2b00      	cmp	r3, #0
   2184c:	d000      	beq.n	21850 <xEventGroupWaitBits+0x2c>
   2184e:	e7fe      	b.n	2184e <xEventGroupWaitBits+0x2a>
	configASSERT( uxBitsToWaitFor != 0 );
   21850:	9b02      	ldr	r3, [sp, #8]
   21852:	2b00      	cmp	r3, #0
   21854:	d100      	bne.n	21858 <xEventGroupWaitBits+0x34>
   21856:	e7fe      	b.n	21856 <xEventGroupWaitBits+0x32>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   21858:	f001 fbba 	bl	22fd0 <xTaskGetSchedulerState>
   2185c:	4603      	mov	r3, r0
   2185e:	2b00      	cmp	r3, #0
   21860:	d102      	bne.n	21868 <xEventGroupWaitBits+0x44>
   21862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21864:	2b00      	cmp	r3, #0
   21866:	d101      	bne.n	2186c <xEventGroupWaitBits+0x48>
   21868:	2301      	movs	r3, #1
   2186a:	e000      	b.n	2186e <xEventGroupWaitBits+0x4a>
   2186c:	2300      	movs	r3, #0
   2186e:	2b00      	cmp	r3, #0
   21870:	d100      	bne.n	21874 <xEventGroupWaitBits+0x50>
   21872:	e7fe      	b.n	21872 <xEventGroupWaitBits+0x4e>
	}
	#endif

	vTaskSuspendAll();
   21874:	f000 ff7a 	bl	2276c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   21878:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2187a:	681b      	ldr	r3, [r3, #0]
   2187c:	9307      	str	r3, [sp, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   2187e:	9a00      	ldr	r2, [sp, #0]
   21880:	9902      	ldr	r1, [sp, #8]
   21882:	9807      	ldr	r0, [sp, #28]
   21884:	f000 f8f6 	bl	21a74 <prvTestWaitCondition>
   21888:	9006      	str	r0, [sp, #24]

		if( xWaitConditionMet != pdFALSE )
   2188a:	9b06      	ldr	r3, [sp, #24]
   2188c:	2b00      	cmp	r3, #0
   2188e:	d00e      	beq.n	218ae <xEventGroupWaitBits+0x8a>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   21890:	9b07      	ldr	r3, [sp, #28]
   21892:	930b      	str	r3, [sp, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   21894:	2300      	movs	r3, #0
   21896:	930e      	str	r3, [sp, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   21898:	9b01      	ldr	r3, [sp, #4]
   2189a:	2b00      	cmp	r3, #0
   2189c:	d028      	beq.n	218f0 <xEventGroupWaitBits+0xcc>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   2189e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   218a0:	681a      	ldr	r2, [r3, #0]
   218a2:	9b02      	ldr	r3, [sp, #8]
   218a4:	43db      	mvns	r3, r3
   218a6:	401a      	ands	r2, r3
   218a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   218aa:	601a      	str	r2, [r3, #0]
   218ac:	e020      	b.n	218f0 <xEventGroupWaitBits+0xcc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   218ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   218b0:	2b00      	cmp	r3, #0
   218b2:	d104      	bne.n	218be <xEventGroupWaitBits+0x9a>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   218b4:	9b07      	ldr	r3, [sp, #28]
   218b6:	930b      	str	r3, [sp, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
   218b8:	2301      	movs	r3, #1
   218ba:	9308      	str	r3, [sp, #32]
   218bc:	e018      	b.n	218f0 <xEventGroupWaitBits+0xcc>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   218be:	9b01      	ldr	r3, [sp, #4]
   218c0:	2b00      	cmp	r3, #0
   218c2:	d003      	beq.n	218cc <xEventGroupWaitBits+0xa8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   218c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   218c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   218ca:	930a      	str	r3, [sp, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   218cc:	9b00      	ldr	r3, [sp, #0]
   218ce:	2b00      	cmp	r3, #0
   218d0:	d003      	beq.n	218da <xEventGroupWaitBits+0xb6>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   218d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   218d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   218d8:	930a      	str	r3, [sp, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   218da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   218dc:	1d18      	adds	r0, r3, #4
   218de:	9a02      	ldr	r2, [sp, #8]
   218e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   218e2:	4313      	orrs	r3, r2
   218e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   218e6:	4619      	mov	r1, r3
   218e8:	f001 f960 	bl	22bac <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   218ec:	2300      	movs	r3, #0
   218ee:	930b      	str	r3, [sp, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   218f0:	f000 ff78 	bl	227e4 <xTaskResumeAll>
   218f4:	9005      	str	r0, [sp, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   218f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   218f8:	2b00      	cmp	r3, #0
   218fa:	d031      	beq.n	21960 <xEventGroupWaitBits+0x13c>
	{
		if( xAlreadyYielded == pdFALSE )
   218fc:	9b05      	ldr	r3, [sp, #20]
   218fe:	2b00      	cmp	r3, #0
   21900:	d107      	bne.n	21912 <xEventGroupWaitBits+0xee>
		{
			portYIELD_WITHIN_API();
   21902:	4b1a      	ldr	r3, [pc, #104]	; (2196c <xEventGroupWaitBits+0x148>)
   21904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21908:	601a      	str	r2, [r3, #0]
   2190a:	f3bf 8f4f 	dsb	sy
   2190e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   21912:	f001 fb77 	bl	23004 <uxTaskResetEventItemValue>
   21916:	900b      	str	r0, [sp, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   21918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   2191e:	2b00      	cmp	r3, #0
   21920:	d11a      	bne.n	21958 <xEventGroupWaitBits+0x134>
		{
			taskENTER_CRITICAL();
   21922:	f7f6 fa15 	bl	17d50 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   21926:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21928:	681b      	ldr	r3, [r3, #0]
   2192a:	930b      	str	r3, [sp, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   2192c:	9a00      	ldr	r2, [sp, #0]
   2192e:	9902      	ldr	r1, [sp, #8]
   21930:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21932:	f000 f89f 	bl	21a74 <prvTestWaitCondition>
   21936:	4603      	mov	r3, r0
   21938:	2b00      	cmp	r3, #0
   2193a:	d009      	beq.n	21950 <xEventGroupWaitBits+0x12c>
				{
					if( xClearOnExit != pdFALSE )
   2193c:	9b01      	ldr	r3, [sp, #4]
   2193e:	2b00      	cmp	r3, #0
   21940:	d006      	beq.n	21950 <xEventGroupWaitBits+0x12c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   21942:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21944:	681a      	ldr	r2, [r3, #0]
   21946:	9b02      	ldr	r3, [sp, #8]
   21948:	43db      	mvns	r3, r3
   2194a:	401a      	ands	r2, r3
   2194c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2194e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
   21950:	2301      	movs	r3, #1
   21952:	9308      	str	r3, [sp, #32]
			}
			taskEXIT_CRITICAL();
   21954:	f7f6 fa1c 	bl	17d90 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   21958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2195a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2195e:	930b      	str	r3, [sp, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
   21960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
   21962:	4618      	mov	r0, r3
   21964:	b00d      	add	sp, #52	; 0x34
   21966:	f85d fb04 	ldr.w	pc, [sp], #4
   2196a:	bf00      	nop
   2196c:	e000ed04 	.word	0xe000ed04

00021970 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   21970:	b500      	push	{lr}
   21972:	b08d      	sub	sp, #52	; 0x34
   21974:	9001      	str	r0, [sp, #4]
   21976:	9100      	str	r1, [sp, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   21978:	2300      	movs	r3, #0
   2197a:	930a      	str	r3, [sp, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
   2197c:	9b01      	ldr	r3, [sp, #4]
   2197e:	9308      	str	r3, [sp, #32]
BaseType_t xMatchFound = pdFALSE;
   21980:	2300      	movs	r3, #0
   21982:	9309      	str	r3, [sp, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   21984:	9b01      	ldr	r3, [sp, #4]
   21986:	2b00      	cmp	r3, #0
   21988:	d100      	bne.n	2198c <xEventGroupSetBits+0x1c>
   2198a:	e7fe      	b.n	2198a <xEventGroupSetBits+0x1a>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   2198c:	9b00      	ldr	r3, [sp, #0]
   2198e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   21992:	2b00      	cmp	r3, #0
   21994:	d000      	beq.n	21998 <xEventGroupSetBits+0x28>
   21996:	e7fe      	b.n	21996 <xEventGroupSetBits+0x26>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   21998:	9b08      	ldr	r3, [sp, #32]
   2199a:	3304      	adds	r3, #4
   2199c:	9307      	str	r3, [sp, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   2199e:	9b07      	ldr	r3, [sp, #28]
   219a0:	3308      	adds	r3, #8
   219a2:	9306      	str	r3, [sp, #24]
	vTaskSuspendAll();
   219a4:	f000 fee2 	bl	2276c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   219a8:	9b07      	ldr	r3, [sp, #28]
   219aa:	68db      	ldr	r3, [r3, #12]
   219ac:	930b      	str	r3, [sp, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   219ae:	9b08      	ldr	r3, [sp, #32]
   219b0:	681a      	ldr	r2, [r3, #0]
   219b2:	9b00      	ldr	r3, [sp, #0]
   219b4:	431a      	orrs	r2, r3
   219b6:	9b08      	ldr	r3, [sp, #32]
   219b8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   219ba:	e03c      	b.n	21a36 <xEventGroupSetBits+0xc6>
		{
			pxNext = listGET_NEXT( pxListItem );
   219bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   219be:	685b      	ldr	r3, [r3, #4]
   219c0:	9305      	str	r3, [sp, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   219c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   219c4:	681b      	ldr	r3, [r3, #0]
   219c6:	9304      	str	r3, [sp, #16]
			xMatchFound = pdFALSE;
   219c8:	2300      	movs	r3, #0
   219ca:	9309      	str	r3, [sp, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   219cc:	9b04      	ldr	r3, [sp, #16]
   219ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   219d2:	9303      	str	r3, [sp, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   219d4:	9b04      	ldr	r3, [sp, #16]
   219d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   219da:	9304      	str	r3, [sp, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   219dc:	9b03      	ldr	r3, [sp, #12]
   219de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   219e2:	2b00      	cmp	r3, #0
   219e4:	d108      	bne.n	219f8 <xEventGroupSetBits+0x88>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   219e6:	9b08      	ldr	r3, [sp, #32]
   219e8:	681a      	ldr	r2, [r3, #0]
   219ea:	9b04      	ldr	r3, [sp, #16]
   219ec:	4013      	ands	r3, r2
   219ee:	2b00      	cmp	r3, #0
   219f0:	d00b      	beq.n	21a0a <xEventGroupSetBits+0x9a>
				{
					xMatchFound = pdTRUE;
   219f2:	2301      	movs	r3, #1
   219f4:	9309      	str	r3, [sp, #36]	; 0x24
   219f6:	e008      	b.n	21a0a <xEventGroupSetBits+0x9a>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   219f8:	9b08      	ldr	r3, [sp, #32]
   219fa:	681a      	ldr	r2, [r3, #0]
   219fc:	9b04      	ldr	r3, [sp, #16]
   219fe:	401a      	ands	r2, r3
   21a00:	9b04      	ldr	r3, [sp, #16]
   21a02:	429a      	cmp	r2, r3
   21a04:	d101      	bne.n	21a0a <xEventGroupSetBits+0x9a>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   21a06:	2301      	movs	r3, #1
   21a08:	9309      	str	r3, [sp, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   21a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21a0c:	2b00      	cmp	r3, #0
   21a0e:	d010      	beq.n	21a32 <xEventGroupSetBits+0xc2>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   21a10:	9b03      	ldr	r3, [sp, #12]
   21a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   21a16:	2b00      	cmp	r3, #0
   21a18:	d003      	beq.n	21a22 <xEventGroupSetBits+0xb2>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   21a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21a1c:	9b04      	ldr	r3, [sp, #16]
   21a1e:	4313      	orrs	r3, r2
   21a20:	930a      	str	r3, [sp, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   21a22:	9b08      	ldr	r3, [sp, #32]
   21a24:	681b      	ldr	r3, [r3, #0]
   21a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   21a2a:	4619      	mov	r1, r3
   21a2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21a2e:	f001 f95f 	bl	22cf0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   21a32:	9b05      	ldr	r3, [sp, #20]
   21a34:	930b      	str	r3, [sp, #44]	; 0x2c
		while( pxListItem != pxListEnd )
   21a36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21a38:	9b06      	ldr	r3, [sp, #24]
   21a3a:	429a      	cmp	r2, r3
   21a3c:	d1be      	bne.n	219bc <xEventGroupSetBits+0x4c>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   21a3e:	9b08      	ldr	r3, [sp, #32]
   21a40:	681a      	ldr	r2, [r3, #0]
   21a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21a44:	43db      	mvns	r3, r3
   21a46:	401a      	ands	r2, r3
   21a48:	9b08      	ldr	r3, [sp, #32]
   21a4a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   21a4c:	f000 feca 	bl	227e4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   21a50:	9b08      	ldr	r3, [sp, #32]
   21a52:	681b      	ldr	r3, [r3, #0]
}
   21a54:	4618      	mov	r0, r3
   21a56:	b00d      	add	sp, #52	; 0x34
   21a58:	f85d fb04 	ldr.w	pc, [sp], #4

00021a5c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   21a5c:	b500      	push	{lr}
   21a5e:	b083      	sub	sp, #12
   21a60:	9001      	str	r0, [sp, #4]
   21a62:	9100      	str	r1, [sp, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
   21a64:	9900      	ldr	r1, [sp, #0]
   21a66:	9801      	ldr	r0, [sp, #4]
   21a68:	f7ff ff82 	bl	21970 <xEventGroupSetBits>
}
   21a6c:	bf00      	nop
   21a6e:	b003      	add	sp, #12
   21a70:	f85d fb04 	ldr.w	pc, [sp], #4

00021a74 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   21a74:	b086      	sub	sp, #24
   21a76:	9003      	str	r0, [sp, #12]
   21a78:	9102      	str	r1, [sp, #8]
   21a7a:	9201      	str	r2, [sp, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   21a7c:	2300      	movs	r3, #0
   21a7e:	9305      	str	r3, [sp, #20]

	if( xWaitForAllBits == pdFALSE )
   21a80:	9b01      	ldr	r3, [sp, #4]
   21a82:	2b00      	cmp	r3, #0
   21a84:	d107      	bne.n	21a96 <prvTestWaitCondition+0x22>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   21a86:	9a03      	ldr	r2, [sp, #12]
   21a88:	9b02      	ldr	r3, [sp, #8]
   21a8a:	4013      	ands	r3, r2
   21a8c:	2b00      	cmp	r3, #0
   21a8e:	d00a      	beq.n	21aa6 <prvTestWaitCondition+0x32>
		{
			xWaitConditionMet = pdTRUE;
   21a90:	2301      	movs	r3, #1
   21a92:	9305      	str	r3, [sp, #20]
   21a94:	e007      	b.n	21aa6 <prvTestWaitCondition+0x32>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   21a96:	9a03      	ldr	r2, [sp, #12]
   21a98:	9b02      	ldr	r3, [sp, #8]
   21a9a:	401a      	ands	r2, r3
   21a9c:	9b02      	ldr	r3, [sp, #8]
   21a9e:	429a      	cmp	r2, r3
   21aa0:	d101      	bne.n	21aa6 <prvTestWaitCondition+0x32>
		{
			xWaitConditionMet = pdTRUE;
   21aa2:	2301      	movs	r3, #1
   21aa4:	9305      	str	r3, [sp, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   21aa6:	9b05      	ldr	r3, [sp, #20]
}
   21aa8:	4618      	mov	r0, r3
   21aaa:	b006      	add	sp, #24
   21aac:	4770      	bx	lr

00021aae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   21aae:	b082      	sub	sp, #8
   21ab0:	9001      	str	r0, [sp, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21ab2:	9b01      	ldr	r3, [sp, #4]
   21ab4:	f103 0208 	add.w	r2, r3, #8
   21ab8:	9b01      	ldr	r3, [sp, #4]
   21aba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   21abc:	9b01      	ldr	r3, [sp, #4]
   21abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21ac2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21ac4:	9b01      	ldr	r3, [sp, #4]
   21ac6:	f103 0208 	add.w	r2, r3, #8
   21aca:	9b01      	ldr	r3, [sp, #4]
   21acc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21ace:	9b01      	ldr	r3, [sp, #4]
   21ad0:	f103 0208 	add.w	r2, r3, #8
   21ad4:	9b01      	ldr	r3, [sp, #4]
   21ad6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   21ad8:	9b01      	ldr	r3, [sp, #4]
   21ada:	2200      	movs	r2, #0
   21adc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   21ade:	bf00      	nop
   21ae0:	b002      	add	sp, #8
   21ae2:	4770      	bx	lr

00021ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   21ae4:	b082      	sub	sp, #8
   21ae6:	9001      	str	r0, [sp, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   21ae8:	9b01      	ldr	r3, [sp, #4]
   21aea:	2200      	movs	r2, #0
   21aec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   21aee:	bf00      	nop
   21af0:	b002      	add	sp, #8
   21af2:	4770      	bx	lr

00021af4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   21af4:	b084      	sub	sp, #16
   21af6:	9001      	str	r0, [sp, #4]
   21af8:	9100      	str	r1, [sp, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   21afa:	9b01      	ldr	r3, [sp, #4]
   21afc:	685b      	ldr	r3, [r3, #4]
   21afe:	9303      	str	r3, [sp, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   21b00:	9b00      	ldr	r3, [sp, #0]
   21b02:	9a03      	ldr	r2, [sp, #12]
   21b04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   21b06:	9b03      	ldr	r3, [sp, #12]
   21b08:	689a      	ldr	r2, [r3, #8]
   21b0a:	9b00      	ldr	r3, [sp, #0]
   21b0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   21b0e:	9b03      	ldr	r3, [sp, #12]
   21b10:	689b      	ldr	r3, [r3, #8]
   21b12:	9a00      	ldr	r2, [sp, #0]
   21b14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   21b16:	9b03      	ldr	r3, [sp, #12]
   21b18:	9a00      	ldr	r2, [sp, #0]
   21b1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   21b1c:	9b00      	ldr	r3, [sp, #0]
   21b1e:	9a01      	ldr	r2, [sp, #4]
   21b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   21b22:	9b01      	ldr	r3, [sp, #4]
   21b24:	681b      	ldr	r3, [r3, #0]
   21b26:	1c5a      	adds	r2, r3, #1
   21b28:	9b01      	ldr	r3, [sp, #4]
   21b2a:	601a      	str	r2, [r3, #0]
}
   21b2c:	bf00      	nop
   21b2e:	b004      	add	sp, #16
   21b30:	4770      	bx	lr

00021b32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   21b32:	b084      	sub	sp, #16
   21b34:	9001      	str	r0, [sp, #4]
   21b36:	9100      	str	r1, [sp, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   21b38:	9b00      	ldr	r3, [sp, #0]
   21b3a:	681b      	ldr	r3, [r3, #0]
   21b3c:	9302      	str	r3, [sp, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   21b3e:	9b02      	ldr	r3, [sp, #8]
   21b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21b44:	d103      	bne.n	21b4e <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   21b46:	9b01      	ldr	r3, [sp, #4]
   21b48:	691b      	ldr	r3, [r3, #16]
   21b4a:	9303      	str	r3, [sp, #12]
   21b4c:	e00c      	b.n	21b68 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   21b4e:	9b01      	ldr	r3, [sp, #4]
   21b50:	3308      	adds	r3, #8
   21b52:	9303      	str	r3, [sp, #12]
   21b54:	e002      	b.n	21b5c <vListInsert+0x2a>
   21b56:	9b03      	ldr	r3, [sp, #12]
   21b58:	685b      	ldr	r3, [r3, #4]
   21b5a:	9303      	str	r3, [sp, #12]
   21b5c:	9b03      	ldr	r3, [sp, #12]
   21b5e:	685b      	ldr	r3, [r3, #4]
   21b60:	681a      	ldr	r2, [r3, #0]
   21b62:	9b02      	ldr	r3, [sp, #8]
   21b64:	429a      	cmp	r2, r3
   21b66:	d9f6      	bls.n	21b56 <vListInsert+0x24>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   21b68:	9b03      	ldr	r3, [sp, #12]
   21b6a:	685a      	ldr	r2, [r3, #4]
   21b6c:	9b00      	ldr	r3, [sp, #0]
   21b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   21b70:	9b00      	ldr	r3, [sp, #0]
   21b72:	685b      	ldr	r3, [r3, #4]
   21b74:	9a00      	ldr	r2, [sp, #0]
   21b76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   21b78:	9b00      	ldr	r3, [sp, #0]
   21b7a:	9a03      	ldr	r2, [sp, #12]
   21b7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   21b7e:	9b03      	ldr	r3, [sp, #12]
   21b80:	9a00      	ldr	r2, [sp, #0]
   21b82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   21b84:	9b00      	ldr	r3, [sp, #0]
   21b86:	9a01      	ldr	r2, [sp, #4]
   21b88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   21b8a:	9b01      	ldr	r3, [sp, #4]
   21b8c:	681b      	ldr	r3, [r3, #0]
   21b8e:	1c5a      	adds	r2, r3, #1
   21b90:	9b01      	ldr	r3, [sp, #4]
   21b92:	601a      	str	r2, [r3, #0]
}
   21b94:	bf00      	nop
   21b96:	b004      	add	sp, #16
   21b98:	4770      	bx	lr

00021b9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   21b9a:	b084      	sub	sp, #16
   21b9c:	9001      	str	r0, [sp, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   21b9e:	9b01      	ldr	r3, [sp, #4]
   21ba0:	691b      	ldr	r3, [r3, #16]
   21ba2:	9303      	str	r3, [sp, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   21ba4:	9b01      	ldr	r3, [sp, #4]
   21ba6:	685b      	ldr	r3, [r3, #4]
   21ba8:	9a01      	ldr	r2, [sp, #4]
   21baa:	6892      	ldr	r2, [r2, #8]
   21bac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   21bae:	9b01      	ldr	r3, [sp, #4]
   21bb0:	689b      	ldr	r3, [r3, #8]
   21bb2:	9a01      	ldr	r2, [sp, #4]
   21bb4:	6852      	ldr	r2, [r2, #4]
   21bb6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   21bb8:	9b03      	ldr	r3, [sp, #12]
   21bba:	685a      	ldr	r2, [r3, #4]
   21bbc:	9b01      	ldr	r3, [sp, #4]
   21bbe:	429a      	cmp	r2, r3
   21bc0:	d103      	bne.n	21bca <uxListRemove+0x30>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   21bc2:	9b01      	ldr	r3, [sp, #4]
   21bc4:	689a      	ldr	r2, [r3, #8]
   21bc6:	9b03      	ldr	r3, [sp, #12]
   21bc8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   21bca:	9b01      	ldr	r3, [sp, #4]
   21bcc:	2200      	movs	r2, #0
   21bce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   21bd0:	9b03      	ldr	r3, [sp, #12]
   21bd2:	681b      	ldr	r3, [r3, #0]
   21bd4:	1e5a      	subs	r2, r3, #1
   21bd6:	9b03      	ldr	r3, [sp, #12]
   21bd8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   21bda:	9b03      	ldr	r3, [sp, #12]
   21bdc:	681b      	ldr	r3, [r3, #0]
}
   21bde:	4618      	mov	r0, r3
   21be0:	b004      	add	sp, #16
   21be2:	4770      	bx	lr

00021be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   21be4:	b500      	push	{lr}
   21be6:	b085      	sub	sp, #20
   21be8:	9001      	str	r0, [sp, #4]
   21bea:	9100      	str	r1, [sp, #0]
Queue_t * const pxQueue = xQueue;
   21bec:	9b01      	ldr	r3, [sp, #4]
   21bee:	9303      	str	r3, [sp, #12]

	configASSERT( pxQueue );
   21bf0:	9b03      	ldr	r3, [sp, #12]
   21bf2:	2b00      	cmp	r3, #0
   21bf4:	d100      	bne.n	21bf8 <xQueueGenericReset+0x14>
   21bf6:	e7fe      	b.n	21bf6 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   21bf8:	f7f6 f8aa 	bl	17d50 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21bfc:	9b03      	ldr	r3, [sp, #12]
   21bfe:	681a      	ldr	r2, [r3, #0]
   21c00:	9b03      	ldr	r3, [sp, #12]
   21c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21c04:	9903      	ldr	r1, [sp, #12]
   21c06:	6c09      	ldr	r1, [r1, #64]	; 0x40
   21c08:	fb01 f303 	mul.w	r3, r1, r3
   21c0c:	441a      	add	r2, r3
   21c0e:	9b03      	ldr	r3, [sp, #12]
   21c10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   21c12:	9b03      	ldr	r3, [sp, #12]
   21c14:	2200      	movs	r2, #0
   21c16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   21c18:	9b03      	ldr	r3, [sp, #12]
   21c1a:	681a      	ldr	r2, [r3, #0]
   21c1c:	9b03      	ldr	r3, [sp, #12]
   21c1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21c20:	9b03      	ldr	r3, [sp, #12]
   21c22:	681a      	ldr	r2, [r3, #0]
   21c24:	9b03      	ldr	r3, [sp, #12]
   21c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21c28:	3b01      	subs	r3, #1
   21c2a:	9903      	ldr	r1, [sp, #12]
   21c2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
   21c2e:	fb01 f303 	mul.w	r3, r1, r3
   21c32:	441a      	add	r2, r3
   21c34:	9b03      	ldr	r3, [sp, #12]
   21c36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   21c38:	9b03      	ldr	r3, [sp, #12]
   21c3a:	22ff      	movs	r2, #255	; 0xff
   21c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   21c40:	9b03      	ldr	r3, [sp, #12]
   21c42:	22ff      	movs	r2, #255	; 0xff
   21c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   21c48:	9b00      	ldr	r3, [sp, #0]
   21c4a:	2b00      	cmp	r3, #0
   21c4c:	d114      	bne.n	21c78 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21c4e:	9b03      	ldr	r3, [sp, #12]
   21c50:	691b      	ldr	r3, [r3, #16]
   21c52:	2b00      	cmp	r3, #0
   21c54:	d01a      	beq.n	21c8c <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21c56:	9b03      	ldr	r3, [sp, #12]
   21c58:	3310      	adds	r3, #16
   21c5a:	4618      	mov	r0, r3
   21c5c:	f000 ffee 	bl	22c3c <xTaskRemoveFromEventList>
   21c60:	4603      	mov	r3, r0
   21c62:	2b00      	cmp	r3, #0
   21c64:	d012      	beq.n	21c8c <xQueueGenericReset+0xa8>
				{
					queueYIELD_IF_USING_PREEMPTION();
   21c66:	4b0d      	ldr	r3, [pc, #52]	; (21c9c <xQueueGenericReset+0xb8>)
   21c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21c6c:	601a      	str	r2, [r3, #0]
   21c6e:	f3bf 8f4f 	dsb	sy
   21c72:	f3bf 8f6f 	isb	sy
   21c76:	e009      	b.n	21c8c <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   21c78:	9b03      	ldr	r3, [sp, #12]
   21c7a:	3310      	adds	r3, #16
   21c7c:	4618      	mov	r0, r3
   21c7e:	f7ff ff16 	bl	21aae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   21c82:	9b03      	ldr	r3, [sp, #12]
   21c84:	3324      	adds	r3, #36	; 0x24
   21c86:	4618      	mov	r0, r3
   21c88:	f7ff ff11 	bl	21aae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   21c8c:	f7f6 f880 	bl	17d90 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   21c90:	2301      	movs	r3, #1
}
   21c92:	4618      	mov	r0, r3
   21c94:	b005      	add	sp, #20
   21c96:	f85d fb04 	ldr.w	pc, [sp], #4
   21c9a:	bf00      	nop
   21c9c:	e000ed04 	.word	0xe000ed04

00021ca0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   21ca0:	b500      	push	{lr}
   21ca2:	b08b      	sub	sp, #44	; 0x2c
   21ca4:	9005      	str	r0, [sp, #20]
   21ca6:	9104      	str	r1, [sp, #16]
   21ca8:	4613      	mov	r3, r2
   21caa:	f88d 300f 	strb.w	r3, [sp, #15]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   21cae:	9b05      	ldr	r3, [sp, #20]
   21cb0:	2b00      	cmp	r3, #0
   21cb2:	d100      	bne.n	21cb6 <xQueueGenericCreate+0x16>
   21cb4:	e7fe      	b.n	21cb4 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   21cb6:	9b04      	ldr	r3, [sp, #16]
   21cb8:	2b00      	cmp	r3, #0
   21cba:	d102      	bne.n	21cc2 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   21cbc:	2300      	movs	r3, #0
   21cbe:	9309      	str	r3, [sp, #36]	; 0x24
   21cc0:	e004      	b.n	21ccc <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21cc2:	9b05      	ldr	r3, [sp, #20]
   21cc4:	9a04      	ldr	r2, [sp, #16]
   21cc6:	fb02 f303 	mul.w	r3, r2, r3
   21cca:	9309      	str	r3, [sp, #36]	; 0x24
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   21ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21cce:	3348      	adds	r3, #72	; 0x48
   21cd0:	4618      	mov	r0, r3
   21cd2:	f7ff fca3 	bl	2161c <pvPortMalloc>
   21cd6:	9008      	str	r0, [sp, #32]

		if( pxNewQueue != NULL )
   21cd8:	9b08      	ldr	r3, [sp, #32]
   21cda:	2b00      	cmp	r3, #0
   21cdc:	d00e      	beq.n	21cfc <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
   21cde:	9b08      	ldr	r3, [sp, #32]
   21ce0:	9307      	str	r3, [sp, #28]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21ce2:	9b07      	ldr	r3, [sp, #28]
   21ce4:	3348      	adds	r3, #72	; 0x48
   21ce6:	9307      	str	r3, [sp, #28]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   21ce8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   21cec:	9b08      	ldr	r3, [sp, #32]
   21cee:	9300      	str	r3, [sp, #0]
   21cf0:	4613      	mov	r3, r2
   21cf2:	9a07      	ldr	r2, [sp, #28]
   21cf4:	9904      	ldr	r1, [sp, #16]
   21cf6:	9805      	ldr	r0, [sp, #20]
   21cf8:	f000 f805 	bl	21d06 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
   21cfc:	9b08      	ldr	r3, [sp, #32]
	}
   21cfe:	4618      	mov	r0, r3
   21d00:	b00b      	add	sp, #44	; 0x2c
   21d02:	f85d fb04 	ldr.w	pc, [sp], #4

00021d06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   21d06:	b500      	push	{lr}
   21d08:	b085      	sub	sp, #20
   21d0a:	9003      	str	r0, [sp, #12]
   21d0c:	9102      	str	r1, [sp, #8]
   21d0e:	9201      	str	r2, [sp, #4]
   21d10:	f88d 3003 	strb.w	r3, [sp, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   21d14:	9b02      	ldr	r3, [sp, #8]
   21d16:	2b00      	cmp	r3, #0
   21d18:	d103      	bne.n	21d22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   21d1a:	9b06      	ldr	r3, [sp, #24]
   21d1c:	9a06      	ldr	r2, [sp, #24]
   21d1e:	601a      	str	r2, [r3, #0]
   21d20:	e002      	b.n	21d28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   21d22:	9b06      	ldr	r3, [sp, #24]
   21d24:	9a01      	ldr	r2, [sp, #4]
   21d26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   21d28:	9b06      	ldr	r3, [sp, #24]
   21d2a:	9a03      	ldr	r2, [sp, #12]
   21d2c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   21d2e:	9b06      	ldr	r3, [sp, #24]
   21d30:	9a02      	ldr	r2, [sp, #8]
   21d32:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   21d34:	2101      	movs	r1, #1
   21d36:	9806      	ldr	r0, [sp, #24]
   21d38:	f7ff ff54 	bl	21be4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   21d3c:	bf00      	nop
   21d3e:	b005      	add	sp, #20
   21d40:	f85d fb04 	ldr.w	pc, [sp], #4

00021d44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   21d44:	b500      	push	{lr}
   21d46:	b08b      	sub	sp, #44	; 0x2c
   21d48:	9003      	str	r0, [sp, #12]
   21d4a:	9102      	str	r1, [sp, #8]
   21d4c:	9201      	str	r2, [sp, #4]
   21d4e:	9300      	str	r3, [sp, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   21d50:	2300      	movs	r3, #0
   21d52:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   21d54:	9b03      	ldr	r3, [sp, #12]
   21d56:	9308      	str	r3, [sp, #32]

	configASSERT( pxQueue );
   21d58:	9b08      	ldr	r3, [sp, #32]
   21d5a:	2b00      	cmp	r3, #0
   21d5c:	d100      	bne.n	21d60 <xQueueGenericSend+0x1c>
   21d5e:	e7fe      	b.n	21d5e <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   21d60:	9b02      	ldr	r3, [sp, #8]
   21d62:	2b00      	cmp	r3, #0
   21d64:	d103      	bne.n	21d6e <xQueueGenericSend+0x2a>
   21d66:	9b08      	ldr	r3, [sp, #32]
   21d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   21d6a:	2b00      	cmp	r3, #0
   21d6c:	d101      	bne.n	21d72 <xQueueGenericSend+0x2e>
   21d6e:	2301      	movs	r3, #1
   21d70:	e000      	b.n	21d74 <xQueueGenericSend+0x30>
   21d72:	2300      	movs	r3, #0
   21d74:	2b00      	cmp	r3, #0
   21d76:	d100      	bne.n	21d7a <xQueueGenericSend+0x36>
   21d78:	e7fe      	b.n	21d78 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   21d7a:	9b00      	ldr	r3, [sp, #0]
   21d7c:	2b02      	cmp	r3, #2
   21d7e:	d103      	bne.n	21d88 <xQueueGenericSend+0x44>
   21d80:	9b08      	ldr	r3, [sp, #32]
   21d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21d84:	2b01      	cmp	r3, #1
   21d86:	d101      	bne.n	21d8c <xQueueGenericSend+0x48>
   21d88:	2301      	movs	r3, #1
   21d8a:	e000      	b.n	21d8e <xQueueGenericSend+0x4a>
   21d8c:	2300      	movs	r3, #0
   21d8e:	2b00      	cmp	r3, #0
   21d90:	d100      	bne.n	21d94 <xQueueGenericSend+0x50>
   21d92:	e7fe      	b.n	21d92 <xQueueGenericSend+0x4e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   21d94:	f001 f91c 	bl	22fd0 <xTaskGetSchedulerState>
   21d98:	4603      	mov	r3, r0
   21d9a:	2b00      	cmp	r3, #0
   21d9c:	d102      	bne.n	21da4 <xQueueGenericSend+0x60>
   21d9e:	9b01      	ldr	r3, [sp, #4]
   21da0:	2b00      	cmp	r3, #0
   21da2:	d101      	bne.n	21da8 <xQueueGenericSend+0x64>
   21da4:	2301      	movs	r3, #1
   21da6:	e000      	b.n	21daa <xQueueGenericSend+0x66>
   21da8:	2300      	movs	r3, #0
   21daa:	2b00      	cmp	r3, #0
   21dac:	d100      	bne.n	21db0 <xQueueGenericSend+0x6c>
   21dae:	e7fe      	b.n	21dae <xQueueGenericSend+0x6a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   21db0:	f7f5 ffce 	bl	17d50 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   21db4:	9b08      	ldr	r3, [sp, #32]
   21db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   21db8:	9b08      	ldr	r3, [sp, #32]
   21dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21dbc:	429a      	cmp	r2, r3
   21dbe:	d302      	bcc.n	21dc6 <xQueueGenericSend+0x82>
   21dc0:	9b00      	ldr	r3, [sp, #0]
   21dc2:	2b02      	cmp	r3, #2
   21dc4:	d129      	bne.n	21e1a <xQueueGenericSend+0xd6>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   21dc6:	9a00      	ldr	r2, [sp, #0]
   21dc8:	9902      	ldr	r1, [sp, #8]
   21dca:	9808      	ldr	r0, [sp, #32]
   21dcc:	f000 f9c4 	bl	22158 <prvCopyDataToQueue>
   21dd0:	9007      	str	r0, [sp, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21dd2:	9b08      	ldr	r3, [sp, #32]
   21dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21dd6:	2b00      	cmp	r3, #0
   21dd8:	d010      	beq.n	21dfc <xQueueGenericSend+0xb8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21dda:	9b08      	ldr	r3, [sp, #32]
   21ddc:	3324      	adds	r3, #36	; 0x24
   21dde:	4618      	mov	r0, r3
   21de0:	f000 ff2c 	bl	22c3c <xTaskRemoveFromEventList>
   21de4:	4603      	mov	r3, r0
   21de6:	2b00      	cmp	r3, #0
   21de8:	d013      	beq.n	21e12 <xQueueGenericSend+0xce>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   21dea:	4b3f      	ldr	r3, [pc, #252]	; (21ee8 <xQueueGenericSend+0x1a4>)
   21dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21df0:	601a      	str	r2, [r3, #0]
   21df2:	f3bf 8f4f 	dsb	sy
   21df6:	f3bf 8f6f 	isb	sy
   21dfa:	e00a      	b.n	21e12 <xQueueGenericSend+0xce>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   21dfc:	9b07      	ldr	r3, [sp, #28]
   21dfe:	2b00      	cmp	r3, #0
   21e00:	d007      	beq.n	21e12 <xQueueGenericSend+0xce>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   21e02:	4b39      	ldr	r3, [pc, #228]	; (21ee8 <xQueueGenericSend+0x1a4>)
   21e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21e08:	601a      	str	r2, [r3, #0]
   21e0a:	f3bf 8f4f 	dsb	sy
   21e0e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   21e12:	f7f5 ffbd 	bl	17d90 <vPortExitCritical>
				return pdPASS;
   21e16:	2301      	movs	r3, #1
   21e18:	e061      	b.n	21ede <xQueueGenericSend+0x19a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   21e1a:	9b01      	ldr	r3, [sp, #4]
   21e1c:	2b00      	cmp	r3, #0
   21e1e:	d103      	bne.n	21e28 <xQueueGenericSend+0xe4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   21e20:	f7f5 ffb6 	bl	17d90 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   21e24:	2300      	movs	r3, #0
   21e26:	e05a      	b.n	21ede <xQueueGenericSend+0x19a>
				}
				else if( xEntryTimeSet == pdFALSE )
   21e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21e2a:	2b00      	cmp	r3, #0
   21e2c:	d105      	bne.n	21e3a <xQueueGenericSend+0xf6>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   21e2e:	ab05      	add	r3, sp, #20
   21e30:	4618      	mov	r0, r3
   21e32:	f000 ffab 	bl	22d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   21e36:	2301      	movs	r3, #1
   21e38:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   21e3a:	f7f5 ffa9 	bl	17d90 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   21e3e:	f000 fc95 	bl	2276c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   21e42:	f7f5 ff85 	bl	17d50 <vPortEnterCritical>
   21e46:	9b08      	ldr	r3, [sp, #32]
   21e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   21e4c:	b25b      	sxtb	r3, r3
   21e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21e52:	d103      	bne.n	21e5c <xQueueGenericSend+0x118>
   21e54:	9b08      	ldr	r3, [sp, #32]
   21e56:	2200      	movs	r2, #0
   21e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   21e5c:	9b08      	ldr	r3, [sp, #32]
   21e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   21e62:	b25b      	sxtb	r3, r3
   21e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21e68:	d103      	bne.n	21e72 <xQueueGenericSend+0x12e>
   21e6a:	9b08      	ldr	r3, [sp, #32]
   21e6c:	2200      	movs	r2, #0
   21e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   21e72:	f7f5 ff8d 	bl	17d90 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   21e76:	aa01      	add	r2, sp, #4
   21e78:	ab05      	add	r3, sp, #20
   21e7a:	4611      	mov	r1, r2
   21e7c:	4618      	mov	r0, r3
   21e7e:	f000 ff97 	bl	22db0 <xTaskCheckForTimeOut>
   21e82:	4603      	mov	r3, r0
   21e84:	2b00      	cmp	r3, #0
   21e86:	d124      	bne.n	21ed2 <xQueueGenericSend+0x18e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   21e88:	9808      	ldr	r0, [sp, #32]
   21e8a:	f000 fa51 	bl	22330 <prvIsQueueFull>
   21e8e:	4603      	mov	r3, r0
   21e90:	2b00      	cmp	r3, #0
   21e92:	d018      	beq.n	21ec6 <xQueueGenericSend+0x182>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   21e94:	9b08      	ldr	r3, [sp, #32]
   21e96:	3310      	adds	r3, #16
   21e98:	9a01      	ldr	r2, [sp, #4]
   21e9a:	4611      	mov	r1, r2
   21e9c:	4618      	mov	r0, r3
   21e9e:	f000 fe6b 	bl	22b78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   21ea2:	9808      	ldr	r0, [sp, #32]
   21ea4:	f000 f9d8 	bl	22258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   21ea8:	f000 fc9c 	bl	227e4 <xTaskResumeAll>
   21eac:	4603      	mov	r3, r0
   21eae:	2b00      	cmp	r3, #0
   21eb0:	f47f af7e 	bne.w	21db0 <xQueueGenericSend+0x6c>
				{
					portYIELD_WITHIN_API();
   21eb4:	4b0c      	ldr	r3, [pc, #48]	; (21ee8 <xQueueGenericSend+0x1a4>)
   21eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21eba:	601a      	str	r2, [r3, #0]
   21ebc:	f3bf 8f4f 	dsb	sy
   21ec0:	f3bf 8f6f 	isb	sy
   21ec4:	e774      	b.n	21db0 <xQueueGenericSend+0x6c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   21ec6:	9808      	ldr	r0, [sp, #32]
   21ec8:	f000 f9c6 	bl	22258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   21ecc:	f000 fc8a 	bl	227e4 <xTaskResumeAll>
   21ed0:	e76e      	b.n	21db0 <xQueueGenericSend+0x6c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   21ed2:	9808      	ldr	r0, [sp, #32]
   21ed4:	f000 f9c0 	bl	22258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   21ed8:	f000 fc84 	bl	227e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   21edc:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
   21ede:	4618      	mov	r0, r3
   21ee0:	b00b      	add	sp, #44	; 0x2c
   21ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   21ee6:	bf00      	nop
   21ee8:	e000ed04 	.word	0xe000ed04

00021eec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   21eec:	b500      	push	{lr}
   21eee:	b08d      	sub	sp, #52	; 0x34
   21ef0:	9003      	str	r0, [sp, #12]
   21ef2:	9102      	str	r1, [sp, #8]
   21ef4:	9201      	str	r2, [sp, #4]
   21ef6:	9300      	str	r3, [sp, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
   21ef8:	9b03      	ldr	r3, [sp, #12]
   21efa:	930a      	str	r3, [sp, #40]	; 0x28

	configASSERT( pxQueue );
   21efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21efe:	2b00      	cmp	r3, #0
   21f00:	d100      	bne.n	21f04 <xQueueGenericSendFromISR+0x18>
   21f02:	e7fe      	b.n	21f02 <xQueueGenericSendFromISR+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   21f04:	9b02      	ldr	r3, [sp, #8]
   21f06:	2b00      	cmp	r3, #0
   21f08:	d103      	bne.n	21f12 <xQueueGenericSendFromISR+0x26>
   21f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   21f0e:	2b00      	cmp	r3, #0
   21f10:	d101      	bne.n	21f16 <xQueueGenericSendFromISR+0x2a>
   21f12:	2301      	movs	r3, #1
   21f14:	e000      	b.n	21f18 <xQueueGenericSendFromISR+0x2c>
   21f16:	2300      	movs	r3, #0
   21f18:	2b00      	cmp	r3, #0
   21f1a:	d100      	bne.n	21f1e <xQueueGenericSendFromISR+0x32>
   21f1c:	e7fe      	b.n	21f1c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   21f1e:	9b00      	ldr	r3, [sp, #0]
   21f20:	2b02      	cmp	r3, #2
   21f22:	d103      	bne.n	21f2c <xQueueGenericSendFromISR+0x40>
   21f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21f28:	2b01      	cmp	r3, #1
   21f2a:	d101      	bne.n	21f30 <xQueueGenericSendFromISR+0x44>
   21f2c:	2301      	movs	r3, #1
   21f2e:	e000      	b.n	21f32 <xQueueGenericSendFromISR+0x46>
   21f30:	2300      	movs	r3, #0
   21f32:	2b00      	cmp	r3, #0
   21f34:	d100      	bne.n	21f38 <xQueueGenericSendFromISR+0x4c>
   21f36:	e7fe      	b.n	21f36 <xQueueGenericSendFromISR+0x4a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   21f38:	f7f5 ffa8 	bl	17e8c <vPortValidateInterruptPriority>
	__asm volatile
   21f3c:	f3ef 8211 	mrs	r2, BASEPRI
   21f40:	f04f 0380 	mov.w	r3, #128	; 0x80
   21f44:	f383 8811 	msr	BASEPRI, r3
   21f48:	f3bf 8f6f 	isb	sy
   21f4c:	f3bf 8f4f 	dsb	sy
   21f50:	9207      	str	r2, [sp, #28]
   21f52:	9306      	str	r3, [sp, #24]
	return ulOriginalBASEPRI;
   21f54:	9b07      	ldr	r3, [sp, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   21f56:	9309      	str	r3, [sp, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   21f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   21f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21f60:	429a      	cmp	r2, r3
   21f62:	d302      	bcc.n	21f6a <xQueueGenericSendFromISR+0x7e>
   21f64:	9b00      	ldr	r3, [sp, #0]
   21f66:	2b02      	cmp	r3, #2
   21f68:	d12c      	bne.n	21fc4 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   21f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   21f70:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   21f74:	9a00      	ldr	r2, [sp, #0]
   21f76:	9902      	ldr	r1, [sp, #8]
   21f78:	980a      	ldr	r0, [sp, #40]	; 0x28
   21f7a:	f000 f8ed 	bl	22158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   21f7e:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
   21f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21f86:	d112      	bne.n	21fae <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21f8c:	2b00      	cmp	r3, #0
   21f8e:	d016      	beq.n	21fbe <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f92:	3324      	adds	r3, #36	; 0x24
   21f94:	4618      	mov	r0, r3
   21f96:	f000 fe51 	bl	22c3c <xTaskRemoveFromEventList>
   21f9a:	4603      	mov	r3, r0
   21f9c:	2b00      	cmp	r3, #0
   21f9e:	d00e      	beq.n	21fbe <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   21fa0:	9b01      	ldr	r3, [sp, #4]
   21fa2:	2b00      	cmp	r3, #0
   21fa4:	d00b      	beq.n	21fbe <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   21fa6:	9b01      	ldr	r3, [sp, #4]
   21fa8:	2201      	movs	r2, #1
   21faa:	601a      	str	r2, [r3, #0]
   21fac:	e007      	b.n	21fbe <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   21fae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   21fb2:	3301      	adds	r3, #1
   21fb4:	b2db      	uxtb	r3, r3
   21fb6:	b25a      	sxtb	r2, r3
   21fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   21fbe:	2301      	movs	r3, #1
   21fc0:	930b      	str	r3, [sp, #44]	; 0x2c
		{
   21fc2:	e001      	b.n	21fc8 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   21fc4:	2300      	movs	r3, #0
   21fc6:	930b      	str	r3, [sp, #44]	; 0x2c
   21fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21fca:	9305      	str	r3, [sp, #20]
	__asm volatile
   21fcc:	9b05      	ldr	r3, [sp, #20]
   21fce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   21fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
   21fd4:	4618      	mov	r0, r3
   21fd6:	b00d      	add	sp, #52	; 0x34
   21fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00021fdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   21fdc:	b500      	push	{lr}
   21fde:	b08b      	sub	sp, #44	; 0x2c
   21fe0:	9003      	str	r0, [sp, #12]
   21fe2:	9102      	str	r1, [sp, #8]
   21fe4:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   21fe6:	2300      	movs	r3, #0
   21fe8:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   21fea:	9b03      	ldr	r3, [sp, #12]
   21fec:	9308      	str	r3, [sp, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   21fee:	9b08      	ldr	r3, [sp, #32]
   21ff0:	2b00      	cmp	r3, #0
   21ff2:	d100      	bne.n	21ff6 <xQueueReceive+0x1a>
   21ff4:	e7fe      	b.n	21ff4 <xQueueReceive+0x18>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   21ff6:	9b02      	ldr	r3, [sp, #8]
   21ff8:	2b00      	cmp	r3, #0
   21ffa:	d103      	bne.n	22004 <xQueueReceive+0x28>
   21ffc:	9b08      	ldr	r3, [sp, #32]
   21ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22000:	2b00      	cmp	r3, #0
   22002:	d101      	bne.n	22008 <xQueueReceive+0x2c>
   22004:	2301      	movs	r3, #1
   22006:	e000      	b.n	2200a <xQueueReceive+0x2e>
   22008:	2300      	movs	r3, #0
   2200a:	2b00      	cmp	r3, #0
   2200c:	d100      	bne.n	22010 <xQueueReceive+0x34>
   2200e:	e7fe      	b.n	2200e <xQueueReceive+0x32>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   22010:	f000 ffde 	bl	22fd0 <xTaskGetSchedulerState>
   22014:	4603      	mov	r3, r0
   22016:	2b00      	cmp	r3, #0
   22018:	d102      	bne.n	22020 <xQueueReceive+0x44>
   2201a:	9b01      	ldr	r3, [sp, #4]
   2201c:	2b00      	cmp	r3, #0
   2201e:	d101      	bne.n	22024 <xQueueReceive+0x48>
   22020:	2301      	movs	r3, #1
   22022:	e000      	b.n	22026 <xQueueReceive+0x4a>
   22024:	2300      	movs	r3, #0
   22026:	2b00      	cmp	r3, #0
   22028:	d100      	bne.n	2202c <xQueueReceive+0x50>
   2202a:	e7fe      	b.n	2202a <xQueueReceive+0x4e>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   2202c:	f7f5 fe90 	bl	17d50 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   22030:	9b08      	ldr	r3, [sp, #32]
   22032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22034:	9307      	str	r3, [sp, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   22036:	9b07      	ldr	r3, [sp, #28]
   22038:	2b00      	cmp	r3, #0
   2203a:	d01f      	beq.n	2207c <xQueueReceive+0xa0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   2203c:	9902      	ldr	r1, [sp, #8]
   2203e:	9808      	ldr	r0, [sp, #32]
   22040:	f000 f8e5 	bl	2220e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   22044:	9b07      	ldr	r3, [sp, #28]
   22046:	1e5a      	subs	r2, r3, #1
   22048:	9b08      	ldr	r3, [sp, #32]
   2204a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2204c:	9b08      	ldr	r3, [sp, #32]
   2204e:	691b      	ldr	r3, [r3, #16]
   22050:	2b00      	cmp	r3, #0
   22052:	d00f      	beq.n	22074 <xQueueReceive+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   22054:	9b08      	ldr	r3, [sp, #32]
   22056:	3310      	adds	r3, #16
   22058:	4618      	mov	r0, r3
   2205a:	f000 fdef 	bl	22c3c <xTaskRemoveFromEventList>
   2205e:	4603      	mov	r3, r0
   22060:	2b00      	cmp	r3, #0
   22062:	d007      	beq.n	22074 <xQueueReceive+0x98>
					{
						queueYIELD_IF_USING_PREEMPTION();
   22064:	4b3b      	ldr	r3, [pc, #236]	; (22154 <xQueueReceive+0x178>)
   22066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2206a:	601a      	str	r2, [r3, #0]
   2206c:	f3bf 8f4f 	dsb	sy
   22070:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   22074:	f7f5 fe8c 	bl	17d90 <vPortExitCritical>
				return pdPASS;
   22078:	2301      	movs	r3, #1
   2207a:	e067      	b.n	2214c <xQueueReceive+0x170>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   2207c:	9b01      	ldr	r3, [sp, #4]
   2207e:	2b00      	cmp	r3, #0
   22080:	d103      	bne.n	2208a <xQueueReceive+0xae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   22082:	f7f5 fe85 	bl	17d90 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   22086:	2300      	movs	r3, #0
   22088:	e060      	b.n	2214c <xQueueReceive+0x170>
				}
				else if( xEntryTimeSet == pdFALSE )
   2208a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2208c:	2b00      	cmp	r3, #0
   2208e:	d105      	bne.n	2209c <xQueueReceive+0xc0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   22090:	ab05      	add	r3, sp, #20
   22092:	4618      	mov	r0, r3
   22094:	f000 fe7a 	bl	22d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   22098:	2301      	movs	r3, #1
   2209a:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   2209c:	f7f5 fe78 	bl	17d90 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   220a0:	f000 fb64 	bl	2276c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   220a4:	f7f5 fe54 	bl	17d50 <vPortEnterCritical>
   220a8:	9b08      	ldr	r3, [sp, #32]
   220aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   220ae:	b25b      	sxtb	r3, r3
   220b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   220b4:	d103      	bne.n	220be <xQueueReceive+0xe2>
   220b6:	9b08      	ldr	r3, [sp, #32]
   220b8:	2200      	movs	r2, #0
   220ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   220be:	9b08      	ldr	r3, [sp, #32]
   220c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   220c4:	b25b      	sxtb	r3, r3
   220c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   220ca:	d103      	bne.n	220d4 <xQueueReceive+0xf8>
   220cc:	9b08      	ldr	r3, [sp, #32]
   220ce:	2200      	movs	r2, #0
   220d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   220d4:	f7f5 fe5c 	bl	17d90 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   220d8:	aa01      	add	r2, sp, #4
   220da:	ab05      	add	r3, sp, #20
   220dc:	4611      	mov	r1, r2
   220de:	4618      	mov	r0, r3
   220e0:	f000 fe66 	bl	22db0 <xTaskCheckForTimeOut>
   220e4:	4603      	mov	r3, r0
   220e6:	2b00      	cmp	r3, #0
   220e8:	d123      	bne.n	22132 <xQueueReceive+0x156>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   220ea:	9808      	ldr	r0, [sp, #32]
   220ec:	f000 f90b 	bl	22306 <prvIsQueueEmpty>
   220f0:	4603      	mov	r3, r0
   220f2:	2b00      	cmp	r3, #0
   220f4:	d017      	beq.n	22126 <xQueueReceive+0x14a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   220f6:	9b08      	ldr	r3, [sp, #32]
   220f8:	3324      	adds	r3, #36	; 0x24
   220fa:	9a01      	ldr	r2, [sp, #4]
   220fc:	4611      	mov	r1, r2
   220fe:	4618      	mov	r0, r3
   22100:	f000 fd3a 	bl	22b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   22104:	9808      	ldr	r0, [sp, #32]
   22106:	f000 f8a7 	bl	22258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   2210a:	f000 fb6b 	bl	227e4 <xTaskResumeAll>
   2210e:	4603      	mov	r3, r0
   22110:	2b00      	cmp	r3, #0
   22112:	d18b      	bne.n	2202c <xQueueReceive+0x50>
				{
					portYIELD_WITHIN_API();
   22114:	4b0f      	ldr	r3, [pc, #60]	; (22154 <xQueueReceive+0x178>)
   22116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2211a:	601a      	str	r2, [r3, #0]
   2211c:	f3bf 8f4f 	dsb	sy
   22120:	f3bf 8f6f 	isb	sy
   22124:	e782      	b.n	2202c <xQueueReceive+0x50>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   22126:	9808      	ldr	r0, [sp, #32]
   22128:	f000 f896 	bl	22258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   2212c:	f000 fb5a 	bl	227e4 <xTaskResumeAll>
   22130:	e77c      	b.n	2202c <xQueueReceive+0x50>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   22132:	9808      	ldr	r0, [sp, #32]
   22134:	f000 f890 	bl	22258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   22138:	f000 fb54 	bl	227e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   2213c:	9808      	ldr	r0, [sp, #32]
   2213e:	f000 f8e2 	bl	22306 <prvIsQueueEmpty>
   22142:	4603      	mov	r3, r0
   22144:	2b00      	cmp	r3, #0
   22146:	f43f af71 	beq.w	2202c <xQueueReceive+0x50>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   2214a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
   2214c:	4618      	mov	r0, r3
   2214e:	b00b      	add	sp, #44	; 0x2c
   22150:	f85d fb04 	ldr.w	pc, [sp], #4
   22154:	e000ed04 	.word	0xe000ed04

00022158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   22158:	b500      	push	{lr}
   2215a:	b087      	sub	sp, #28
   2215c:	9003      	str	r0, [sp, #12]
   2215e:	9102      	str	r1, [sp, #8]
   22160:	9201      	str	r2, [sp, #4]
BaseType_t xReturn = pdFALSE;
   22162:	2300      	movs	r3, #0
   22164:	9304      	str	r3, [sp, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   22166:	9b03      	ldr	r3, [sp, #12]
   22168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2216a:	9305      	str	r3, [sp, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   2216c:	9b03      	ldr	r3, [sp, #12]
   2216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22170:	2b00      	cmp	r3, #0
   22172:	d043      	beq.n	221fc <prvCopyDataToQueue+0xa4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   22174:	9b01      	ldr	r3, [sp, #4]
   22176:	2b00      	cmp	r3, #0
   22178:	d119      	bne.n	221ae <prvCopyDataToQueue+0x56>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   2217a:	9b03      	ldr	r3, [sp, #12]
   2217c:	6858      	ldr	r0, [r3, #4]
   2217e:	9b03      	ldr	r3, [sp, #12]
   22180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22182:	461a      	mov	r2, r3
   22184:	9902      	ldr	r1, [sp, #8]
   22186:	f7e9 ffeb 	bl	c160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   2218a:	9b03      	ldr	r3, [sp, #12]
   2218c:	685a      	ldr	r2, [r3, #4]
   2218e:	9b03      	ldr	r3, [sp, #12]
   22190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22192:	441a      	add	r2, r3
   22194:	9b03      	ldr	r3, [sp, #12]
   22196:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   22198:	9b03      	ldr	r3, [sp, #12]
   2219a:	685a      	ldr	r2, [r3, #4]
   2219c:	9b03      	ldr	r3, [sp, #12]
   2219e:	689b      	ldr	r3, [r3, #8]
   221a0:	429a      	cmp	r2, r3
   221a2:	d32b      	bcc.n	221fc <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   221a4:	9b03      	ldr	r3, [sp, #12]
   221a6:	681a      	ldr	r2, [r3, #0]
   221a8:	9b03      	ldr	r3, [sp, #12]
   221aa:	605a      	str	r2, [r3, #4]
   221ac:	e026      	b.n	221fc <prvCopyDataToQueue+0xa4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   221ae:	9b03      	ldr	r3, [sp, #12]
   221b0:	68d8      	ldr	r0, [r3, #12]
   221b2:	9b03      	ldr	r3, [sp, #12]
   221b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   221b6:	461a      	mov	r2, r3
   221b8:	9902      	ldr	r1, [sp, #8]
   221ba:	f7e9 ffd1 	bl	c160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   221be:	9b03      	ldr	r3, [sp, #12]
   221c0:	68da      	ldr	r2, [r3, #12]
   221c2:	9b03      	ldr	r3, [sp, #12]
   221c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   221c6:	425b      	negs	r3, r3
   221c8:	441a      	add	r2, r3
   221ca:	9b03      	ldr	r3, [sp, #12]
   221cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   221ce:	9b03      	ldr	r3, [sp, #12]
   221d0:	68da      	ldr	r2, [r3, #12]
   221d2:	9b03      	ldr	r3, [sp, #12]
   221d4:	681b      	ldr	r3, [r3, #0]
   221d6:	429a      	cmp	r2, r3
   221d8:	d207      	bcs.n	221ea <prvCopyDataToQueue+0x92>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   221da:	9b03      	ldr	r3, [sp, #12]
   221dc:	689a      	ldr	r2, [r3, #8]
   221de:	9b03      	ldr	r3, [sp, #12]
   221e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   221e2:	425b      	negs	r3, r3
   221e4:	441a      	add	r2, r3
   221e6:	9b03      	ldr	r3, [sp, #12]
   221e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   221ea:	9b01      	ldr	r3, [sp, #4]
   221ec:	2b02      	cmp	r3, #2
   221ee:	d105      	bne.n	221fc <prvCopyDataToQueue+0xa4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   221f0:	9b05      	ldr	r3, [sp, #20]
   221f2:	2b00      	cmp	r3, #0
   221f4:	d002      	beq.n	221fc <prvCopyDataToQueue+0xa4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   221f6:	9b05      	ldr	r3, [sp, #20]
   221f8:	3b01      	subs	r3, #1
   221fa:	9305      	str	r3, [sp, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   221fc:	9b05      	ldr	r3, [sp, #20]
   221fe:	1c5a      	adds	r2, r3, #1
   22200:	9b03      	ldr	r3, [sp, #12]
   22202:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   22204:	9b04      	ldr	r3, [sp, #16]
}
   22206:	4618      	mov	r0, r3
   22208:	b007      	add	sp, #28
   2220a:	f85d fb04 	ldr.w	pc, [sp], #4

0002220e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   2220e:	b500      	push	{lr}
   22210:	b083      	sub	sp, #12
   22212:	9001      	str	r0, [sp, #4]
   22214:	9100      	str	r1, [sp, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   22216:	9b01      	ldr	r3, [sp, #4]
   22218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2221a:	2b00      	cmp	r3, #0
   2221c:	d018      	beq.n	22250 <prvCopyDataFromQueue+0x42>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   2221e:	9b01      	ldr	r3, [sp, #4]
   22220:	68da      	ldr	r2, [r3, #12]
   22222:	9b01      	ldr	r3, [sp, #4]
   22224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22226:	441a      	add	r2, r3
   22228:	9b01      	ldr	r3, [sp, #4]
   2222a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   2222c:	9b01      	ldr	r3, [sp, #4]
   2222e:	68da      	ldr	r2, [r3, #12]
   22230:	9b01      	ldr	r3, [sp, #4]
   22232:	689b      	ldr	r3, [r3, #8]
   22234:	429a      	cmp	r2, r3
   22236:	d303      	bcc.n	22240 <prvCopyDataFromQueue+0x32>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   22238:	9b01      	ldr	r3, [sp, #4]
   2223a:	681a      	ldr	r2, [r3, #0]
   2223c:	9b01      	ldr	r3, [sp, #4]
   2223e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   22240:	9b01      	ldr	r3, [sp, #4]
   22242:	68d9      	ldr	r1, [r3, #12]
   22244:	9b01      	ldr	r3, [sp, #4]
   22246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22248:	461a      	mov	r2, r3
   2224a:	9800      	ldr	r0, [sp, #0]
   2224c:	f7e9 ff88 	bl	c160 <memcpy>
	}
}
   22250:	bf00      	nop
   22252:	b003      	add	sp, #12
   22254:	f85d fb04 	ldr.w	pc, [sp], #4

00022258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   22258:	b500      	push	{lr}
   2225a:	b085      	sub	sp, #20
   2225c:	9001      	str	r0, [sp, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   2225e:	f7f5 fd77 	bl	17d50 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   22262:	9b01      	ldr	r3, [sp, #4]
   22264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   22268:	f88d 300f 	strb.w	r3, [sp, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   2226c:	e013      	b.n	22296 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2226e:	9b01      	ldr	r3, [sp, #4]
   22270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22272:	2b00      	cmp	r3, #0
   22274:	d014      	beq.n	222a0 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   22276:	9b01      	ldr	r3, [sp, #4]
   22278:	3324      	adds	r3, #36	; 0x24
   2227a:	4618      	mov	r0, r3
   2227c:	f000 fcde 	bl	22c3c <xTaskRemoveFromEventList>
   22280:	4603      	mov	r3, r0
   22282:	2b00      	cmp	r3, #0
   22284:	d001      	beq.n	2228a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   22286:	f000 fde1 	bl	22e4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   2228a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2228e:	3b01      	subs	r3, #1
   22290:	b2db      	uxtb	r3, r3
   22292:	f88d 300f 	strb.w	r3, [sp, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   22296:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   2229a:	2b00      	cmp	r3, #0
   2229c:	dce7      	bgt.n	2226e <prvUnlockQueue+0x16>
   2229e:	e000      	b.n	222a2 <prvUnlockQueue+0x4a>
					break;
   222a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   222a2:	9b01      	ldr	r3, [sp, #4]
   222a4:	22ff      	movs	r2, #255	; 0xff
   222a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   222aa:	f7f5 fd71 	bl	17d90 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   222ae:	f7f5 fd4f 	bl	17d50 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   222b2:	9b01      	ldr	r3, [sp, #4]
   222b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   222b8:	f88d 300e 	strb.w	r3, [sp, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   222bc:	e013      	b.n	222e6 <prvUnlockQueue+0x8e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   222be:	9b01      	ldr	r3, [sp, #4]
   222c0:	691b      	ldr	r3, [r3, #16]
   222c2:	2b00      	cmp	r3, #0
   222c4:	d014      	beq.n	222f0 <prvUnlockQueue+0x98>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   222c6:	9b01      	ldr	r3, [sp, #4]
   222c8:	3310      	adds	r3, #16
   222ca:	4618      	mov	r0, r3
   222cc:	f000 fcb6 	bl	22c3c <xTaskRemoveFromEventList>
   222d0:	4603      	mov	r3, r0
   222d2:	2b00      	cmp	r3, #0
   222d4:	d001      	beq.n	222da <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
   222d6:	f000 fdb9 	bl	22e4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   222da:	f89d 300e 	ldrb.w	r3, [sp, #14]
   222de:	3b01      	subs	r3, #1
   222e0:	b2db      	uxtb	r3, r3
   222e2:	f88d 300e 	strb.w	r3, [sp, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   222e6:	f99d 300e 	ldrsb.w	r3, [sp, #14]
   222ea:	2b00      	cmp	r3, #0
   222ec:	dce7      	bgt.n	222be <prvUnlockQueue+0x66>
   222ee:	e000      	b.n	222f2 <prvUnlockQueue+0x9a>
			}
			else
			{
				break;
   222f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   222f2:	9b01      	ldr	r3, [sp, #4]
   222f4:	22ff      	movs	r2, #255	; 0xff
   222f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   222fa:	f7f5 fd49 	bl	17d90 <vPortExitCritical>
}
   222fe:	bf00      	nop
   22300:	b005      	add	sp, #20
   22302:	f85d fb04 	ldr.w	pc, [sp], #4

00022306 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   22306:	b500      	push	{lr}
   22308:	b085      	sub	sp, #20
   2230a:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   2230c:	f7f5 fd20 	bl	17d50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   22310:	9b01      	ldr	r3, [sp, #4]
   22312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22314:	2b00      	cmp	r3, #0
   22316:	d102      	bne.n	2231e <prvIsQueueEmpty+0x18>
		{
			xReturn = pdTRUE;
   22318:	2301      	movs	r3, #1
   2231a:	9303      	str	r3, [sp, #12]
   2231c:	e001      	b.n	22322 <prvIsQueueEmpty+0x1c>
		}
		else
		{
			xReturn = pdFALSE;
   2231e:	2300      	movs	r3, #0
   22320:	9303      	str	r3, [sp, #12]
		}
	}
	taskEXIT_CRITICAL();
   22322:	f7f5 fd35 	bl	17d90 <vPortExitCritical>

	return xReturn;
   22326:	9b03      	ldr	r3, [sp, #12]
}
   22328:	4618      	mov	r0, r3
   2232a:	b005      	add	sp, #20
   2232c:	f85d fb04 	ldr.w	pc, [sp], #4

00022330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   22330:	b500      	push	{lr}
   22332:	b085      	sub	sp, #20
   22334:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   22336:	f7f5 fd0b 	bl	17d50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   2233a:	9b01      	ldr	r3, [sp, #4]
   2233c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2233e:	9b01      	ldr	r3, [sp, #4]
   22340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   22342:	429a      	cmp	r2, r3
   22344:	d102      	bne.n	2234c <prvIsQueueFull+0x1c>
		{
			xReturn = pdTRUE;
   22346:	2301      	movs	r3, #1
   22348:	9303      	str	r3, [sp, #12]
   2234a:	e001      	b.n	22350 <prvIsQueueFull+0x20>
		}
		else
		{
			xReturn = pdFALSE;
   2234c:	2300      	movs	r3, #0
   2234e:	9303      	str	r3, [sp, #12]
		}
	}
	taskEXIT_CRITICAL();
   22350:	f7f5 fd1e 	bl	17d90 <vPortExitCritical>

	return xReturn;
   22354:	9b03      	ldr	r3, [sp, #12]
}
   22356:	4618      	mov	r0, r3
   22358:	b005      	add	sp, #20
   2235a:	f85d fb04 	ldr.w	pc, [sp], #4

0002235e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   2235e:	b500      	push	{lr}
   22360:	b087      	sub	sp, #28
   22362:	9003      	str	r0, [sp, #12]
   22364:	9102      	str	r1, [sp, #8]
   22366:	9201      	str	r2, [sp, #4]
	Queue_t * const pxQueue = xQueue;
   22368:	9b03      	ldr	r3, [sp, #12]
   2236a:	9305      	str	r3, [sp, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   2236c:	f7f5 fcf0 	bl	17d50 <vPortEnterCritical>
   22370:	9b05      	ldr	r3, [sp, #20]
   22372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   22376:	b25b      	sxtb	r3, r3
   22378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2237c:	d103      	bne.n	22386 <vQueueWaitForMessageRestricted+0x28>
   2237e:	9b05      	ldr	r3, [sp, #20]
   22380:	2200      	movs	r2, #0
   22382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   22386:	9b05      	ldr	r3, [sp, #20]
   22388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   2238c:	b25b      	sxtb	r3, r3
   2238e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22392:	d103      	bne.n	2239c <vQueueWaitForMessageRestricted+0x3e>
   22394:	9b05      	ldr	r3, [sp, #20]
   22396:	2200      	movs	r2, #0
   22398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   2239c:	f7f5 fcf8 	bl	17d90 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   223a0:	9b05      	ldr	r3, [sp, #20]
   223a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   223a4:	2b00      	cmp	r3, #0
   223a6:	d106      	bne.n	223b6 <vQueueWaitForMessageRestricted+0x58>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   223a8:	9b05      	ldr	r3, [sp, #20]
   223aa:	3324      	adds	r3, #36	; 0x24
   223ac:	9a01      	ldr	r2, [sp, #4]
   223ae:	9902      	ldr	r1, [sp, #8]
   223b0:	4618      	mov	r0, r3
   223b2:	f000 fc23 	bl	22bfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   223b6:	9805      	ldr	r0, [sp, #20]
   223b8:	f7ff ff4e 	bl	22258 <prvUnlockQueue>
	}
   223bc:	bf00      	nop
   223be:	b007      	add	sp, #28
   223c0:	f85d fb04 	ldr.w	pc, [sp], #4

000223c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   223c4:	b500      	push	{lr}
   223c6:	b08d      	sub	sp, #52	; 0x34
   223c8:	9007      	str	r0, [sp, #28]
   223ca:	9106      	str	r1, [sp, #24]
   223cc:	9304      	str	r3, [sp, #16]
   223ce:	4613      	mov	r3, r2
   223d0:	f8ad 3016 	strh.w	r3, [sp, #22]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   223d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   223d8:	009b      	lsls	r3, r3, #2
   223da:	4618      	mov	r0, r3
   223dc:	f7ff f91e 	bl	2161c <pvPortMalloc>
   223e0:	9009      	str	r0, [sp, #36]	; 0x24

			if( pxStack != NULL )
   223e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   223e4:	2b00      	cmp	r3, #0
   223e6:	d00e      	beq.n	22406 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   223e8:	204c      	movs	r0, #76	; 0x4c
   223ea:	f7ff f917 	bl	2161c <pvPortMalloc>
   223ee:	900b      	str	r0, [sp, #44]	; 0x2c

				if( pxNewTCB != NULL )
   223f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   223f2:	2b00      	cmp	r3, #0
   223f4:	d003      	beq.n	223fe <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   223f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   223f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   223fa:	631a      	str	r2, [r3, #48]	; 0x30
   223fc:	e005      	b.n	2240a <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   223fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   22400:	f7ff f99e 	bl	21740 <vPortFree>
   22404:	e001      	b.n	2240a <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
   22406:	2300      	movs	r3, #0
   22408:	930b      	str	r3, [sp, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   2240a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2240c:	2b00      	cmp	r3, #0
   2240e:	d014      	beq.n	2243a <xTaskCreate+0x76>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   22410:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22414:	2300      	movs	r3, #0
   22416:	9303      	str	r3, [sp, #12]
   22418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2241a:	9302      	str	r3, [sp, #8]
   2241c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2241e:	9301      	str	r3, [sp, #4]
   22420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22422:	9300      	str	r3, [sp, #0]
   22424:	9b04      	ldr	r3, [sp, #16]
   22426:	9906      	ldr	r1, [sp, #24]
   22428:	9807      	ldr	r0, [sp, #28]
   2242a:	f000 f80e 	bl	2244a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   2242e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22430:	f000 f886 	bl	22540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   22434:	2301      	movs	r3, #1
   22436:	930a      	str	r3, [sp, #40]	; 0x28
   22438:	e002      	b.n	22440 <xTaskCreate+0x7c>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   2243a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2243e:	930a      	str	r3, [sp, #40]	; 0x28
		}

		return xReturn;
   22440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	}
   22442:	4618      	mov	r0, r3
   22444:	b00d      	add	sp, #52	; 0x34
   22446:	f85d fb04 	ldr.w	pc, [sp], #4

0002244a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   2244a:	b500      	push	{lr}
   2244c:	b087      	sub	sp, #28
   2244e:	9003      	str	r0, [sp, #12]
   22450:	9102      	str	r1, [sp, #8]
   22452:	9201      	str	r2, [sp, #4]
   22454:	9300      	str	r3, [sp, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
   22456:	9b02      	ldr	r3, [sp, #8]
   22458:	2b00      	cmp	r3, #0
   2245a:	d100      	bne.n	2245e <prvInitialiseNewTask+0x14>
   2245c:	e7fe      	b.n	2245c <prvInitialiseNewTask+0x12>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   2245e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22460:	6b18      	ldr	r0, [r3, #48]	; 0x30
   22462:	9b01      	ldr	r3, [sp, #4]
   22464:	009b      	lsls	r3, r3, #2
   22466:	461a      	mov	r2, r3
   22468:	21a5      	movs	r1, #165	; 0xa5
   2246a:	f7e9 ff13 	bl	c294 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   2246e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   22472:	9b01      	ldr	r3, [sp, #4]
   22474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22478:	3b01      	subs	r3, #1
   2247a:	009b      	lsls	r3, r3, #2
   2247c:	4413      	add	r3, r2
   2247e:	9304      	str	r3, [sp, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   22480:	9b04      	ldr	r3, [sp, #16]
   22482:	f023 0307 	bic.w	r3, r3, #7
   22486:	9304      	str	r3, [sp, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   22488:	9b04      	ldr	r3, [sp, #16]
   2248a:	f003 0307 	and.w	r3, r3, #7
   2248e:	2b00      	cmp	r3, #0
   22490:	d000      	beq.n	22494 <prvInitialiseNewTask+0x4a>
   22492:	e7fe      	b.n	22492 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   22494:	2300      	movs	r3, #0
   22496:	9305      	str	r3, [sp, #20]
   22498:	e012      	b.n	224c0 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2249a:	9a02      	ldr	r2, [sp, #8]
   2249c:	9b05      	ldr	r3, [sp, #20]
   2249e:	4413      	add	r3, r2
   224a0:	7819      	ldrb	r1, [r3, #0]
   224a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   224a4:	9b05      	ldr	r3, [sp, #20]
   224a6:	4413      	add	r3, r2
   224a8:	3334      	adds	r3, #52	; 0x34
   224aa:	460a      	mov	r2, r1
   224ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
   224ae:	9a02      	ldr	r2, [sp, #8]
   224b0:	9b05      	ldr	r3, [sp, #20]
   224b2:	4413      	add	r3, r2
   224b4:	781b      	ldrb	r3, [r3, #0]
   224b6:	2b00      	cmp	r3, #0
   224b8:	d006      	beq.n	224c8 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   224ba:	9b05      	ldr	r3, [sp, #20]
   224bc:	3301      	adds	r3, #1
   224be:	9305      	str	r3, [sp, #20]
   224c0:	9b05      	ldr	r3, [sp, #20]
   224c2:	2b0f      	cmp	r3, #15
   224c4:	d9e9      	bls.n	2249a <prvInitialiseNewTask+0x50>
   224c6:	e000      	b.n	224ca <prvInitialiseNewTask+0x80>
		{
			break;
   224c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   224ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   224cc:	2200      	movs	r2, #0
   224ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   224d2:	9b08      	ldr	r3, [sp, #32]
   224d4:	2b03      	cmp	r3, #3
   224d6:	d901      	bls.n	224dc <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   224d8:	2303      	movs	r3, #3
   224da:	9308      	str	r3, [sp, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   224dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   224de:	9a08      	ldr	r2, [sp, #32]
   224e0:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   224e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   224e4:	3304      	adds	r3, #4
   224e6:	4618      	mov	r0, r3
   224e8:	f7ff fafc 	bl	21ae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   224ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   224ee:	3318      	adds	r3, #24
   224f0:	4618      	mov	r0, r3
   224f2:	f7ff faf7 	bl	21ae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   224f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   224f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   224fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   224fc:	9b08      	ldr	r3, [sp, #32]
   224fe:	f1c3 0204 	rsb	r2, r3, #4
   22502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22504:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   22506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2250a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   2250c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2250e:	2200      	movs	r2, #0
   22510:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   22512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22514:	2200      	movs	r2, #0
   22516:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   2251a:	9a00      	ldr	r2, [sp, #0]
   2251c:	9903      	ldr	r1, [sp, #12]
   2251e:	9804      	ldr	r0, [sp, #16]
   22520:	f7f5 fb16 	bl	17b50 <pxPortInitialiseStack>
   22524:	4602      	mov	r2, r0
   22526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22528:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   2252a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2252c:	2b00      	cmp	r3, #0
   2252e:	d002      	beq.n	22536 <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   22530:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   22536:	bf00      	nop
   22538:	b007      	add	sp, #28
   2253a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00022540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   22540:	b500      	push	{lr}
   22542:	b083      	sub	sp, #12
   22544:	9001      	str	r0, [sp, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   22546:	f7f5 fc03 	bl	17d50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   2254a:	4b2b      	ldr	r3, [pc, #172]	; (225f8 <prvAddNewTaskToReadyList+0xb8>)
   2254c:	681b      	ldr	r3, [r3, #0]
   2254e:	3301      	adds	r3, #1
   22550:	4a29      	ldr	r2, [pc, #164]	; (225f8 <prvAddNewTaskToReadyList+0xb8>)
   22552:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   22554:	4b29      	ldr	r3, [pc, #164]	; (225fc <prvAddNewTaskToReadyList+0xbc>)
   22556:	681b      	ldr	r3, [r3, #0]
   22558:	2b00      	cmp	r3, #0
   2255a:	d109      	bne.n	22570 <prvAddNewTaskToReadyList+0x30>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   2255c:	4a27      	ldr	r2, [pc, #156]	; (225fc <prvAddNewTaskToReadyList+0xbc>)
   2255e:	9b01      	ldr	r3, [sp, #4]
   22560:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   22562:	4b25      	ldr	r3, [pc, #148]	; (225f8 <prvAddNewTaskToReadyList+0xb8>)
   22564:	681b      	ldr	r3, [r3, #0]
   22566:	2b01      	cmp	r3, #1
   22568:	d110      	bne.n	2258c <prvAddNewTaskToReadyList+0x4c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   2256a:	f000 fcd9 	bl	22f20 <prvInitialiseTaskLists>
   2256e:	e00d      	b.n	2258c <prvAddNewTaskToReadyList+0x4c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   22570:	4b23      	ldr	r3, [pc, #140]	; (22600 <prvAddNewTaskToReadyList+0xc0>)
   22572:	681b      	ldr	r3, [r3, #0]
   22574:	2b00      	cmp	r3, #0
   22576:	d109      	bne.n	2258c <prvAddNewTaskToReadyList+0x4c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   22578:	4b20      	ldr	r3, [pc, #128]	; (225fc <prvAddNewTaskToReadyList+0xbc>)
   2257a:	681b      	ldr	r3, [r3, #0]
   2257c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2257e:	9b01      	ldr	r3, [sp, #4]
   22580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22582:	429a      	cmp	r2, r3
   22584:	d802      	bhi.n	2258c <prvAddNewTaskToReadyList+0x4c>
				{
					pxCurrentTCB = pxNewTCB;
   22586:	4a1d      	ldr	r2, [pc, #116]	; (225fc <prvAddNewTaskToReadyList+0xbc>)
   22588:	9b01      	ldr	r3, [sp, #4]
   2258a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   2258c:	4b1d      	ldr	r3, [pc, #116]	; (22604 <prvAddNewTaskToReadyList+0xc4>)
   2258e:	681b      	ldr	r3, [r3, #0]
   22590:	3301      	adds	r3, #1
   22592:	4a1c      	ldr	r2, [pc, #112]	; (22604 <prvAddNewTaskToReadyList+0xc4>)
   22594:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   22596:	9b01      	ldr	r3, [sp, #4]
   22598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2259a:	4b1b      	ldr	r3, [pc, #108]	; (22608 <prvAddNewTaskToReadyList+0xc8>)
   2259c:	681b      	ldr	r3, [r3, #0]
   2259e:	429a      	cmp	r2, r3
   225a0:	d903      	bls.n	225aa <prvAddNewTaskToReadyList+0x6a>
   225a2:	9b01      	ldr	r3, [sp, #4]
   225a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   225a6:	4a18      	ldr	r2, [pc, #96]	; (22608 <prvAddNewTaskToReadyList+0xc8>)
   225a8:	6013      	str	r3, [r2, #0]
   225aa:	9b01      	ldr	r3, [sp, #4]
   225ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   225ae:	4613      	mov	r3, r2
   225b0:	009b      	lsls	r3, r3, #2
   225b2:	4413      	add	r3, r2
   225b4:	009b      	lsls	r3, r3, #2
   225b6:	4a15      	ldr	r2, [pc, #84]	; (2260c <prvAddNewTaskToReadyList+0xcc>)
   225b8:	441a      	add	r2, r3
   225ba:	9b01      	ldr	r3, [sp, #4]
   225bc:	3304      	adds	r3, #4
   225be:	4619      	mov	r1, r3
   225c0:	4610      	mov	r0, r2
   225c2:	f7ff fa97 	bl	21af4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   225c6:	f7f5 fbe3 	bl	17d90 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   225ca:	4b0d      	ldr	r3, [pc, #52]	; (22600 <prvAddNewTaskToReadyList+0xc0>)
   225cc:	681b      	ldr	r3, [r3, #0]
   225ce:	2b00      	cmp	r3, #0
   225d0:	d00e      	beq.n	225f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   225d2:	4b0a      	ldr	r3, [pc, #40]	; (225fc <prvAddNewTaskToReadyList+0xbc>)
   225d4:	681b      	ldr	r3, [r3, #0]
   225d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   225d8:	9b01      	ldr	r3, [sp, #4]
   225da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   225dc:	429a      	cmp	r2, r3
   225de:	d207      	bcs.n	225f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
   225e0:	4b0b      	ldr	r3, [pc, #44]	; (22610 <prvAddNewTaskToReadyList+0xd0>)
   225e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   225e6:	601a      	str	r2, [r3, #0]
   225e8:	f3bf 8f4f 	dsb	sy
   225ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   225f0:	bf00      	nop
   225f2:	b003      	add	sp, #12
   225f4:	f85d fb04 	ldr.w	pc, [sp], #4
   225f8:	10008708 	.word	0x10008708
   225fc:	1000865c 	.word	0x1000865c
   22600:	10008714 	.word	0x10008714
   22604:	10008724 	.word	0x10008724
   22608:	10008710 	.word	0x10008710
   2260c:	10008660 	.word	0x10008660
   22610:	e000ed04 	.word	0xe000ed04

00022614 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   22614:	b500      	push	{lr}
   22616:	b085      	sub	sp, #20
   22618:	9001      	str	r0, [sp, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   2261a:	f7f5 fb99 	bl	17d50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   2261e:	9b01      	ldr	r3, [sp, #4]
   22620:	2b00      	cmp	r3, #0
   22622:	d102      	bne.n	2262a <vTaskSuspend+0x16>
   22624:	4b2a      	ldr	r3, [pc, #168]	; (226d0 <vTaskSuspend+0xbc>)
   22626:	681b      	ldr	r3, [r3, #0]
   22628:	e000      	b.n	2262c <vTaskSuspend+0x18>
   2262a:	9b01      	ldr	r3, [sp, #4]
   2262c:	9303      	str	r3, [sp, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2262e:	9b03      	ldr	r3, [sp, #12]
   22630:	3304      	adds	r3, #4
   22632:	4618      	mov	r0, r3
   22634:	f7ff fab1 	bl	21b9a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   22638:	9b03      	ldr	r3, [sp, #12]
   2263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2263c:	2b00      	cmp	r3, #0
   2263e:	d004      	beq.n	2264a <vTaskSuspend+0x36>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   22640:	9b03      	ldr	r3, [sp, #12]
   22642:	3318      	adds	r3, #24
   22644:	4618      	mov	r0, r3
   22646:	f7ff faa8 	bl	21b9a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   2264a:	9b03      	ldr	r3, [sp, #12]
   2264c:	3304      	adds	r3, #4
   2264e:	4619      	mov	r1, r3
   22650:	4820      	ldr	r0, [pc, #128]	; (226d4 <vTaskSuspend+0xc0>)
   22652:	f7ff fa4f 	bl	21af4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   22656:	9b03      	ldr	r3, [sp, #12]
   22658:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   2265c:	b2db      	uxtb	r3, r3
   2265e:	2b01      	cmp	r3, #1
   22660:	d103      	bne.n	2266a <vTaskSuspend+0x56>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   22662:	9b03      	ldr	r3, [sp, #12]
   22664:	2200      	movs	r2, #0
   22666:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   2266a:	f7f5 fb91 	bl	17d90 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   2266e:	4b1a      	ldr	r3, [pc, #104]	; (226d8 <vTaskSuspend+0xc4>)
   22670:	681b      	ldr	r3, [r3, #0]
   22672:	2b00      	cmp	r3, #0
   22674:	d005      	beq.n	22682 <vTaskSuspend+0x6e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   22676:	f7f5 fb6b 	bl	17d50 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   2267a:	f000 fc8d 	bl	22f98 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   2267e:	f7f5 fb87 	bl	17d90 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   22682:	4b13      	ldr	r3, [pc, #76]	; (226d0 <vTaskSuspend+0xbc>)
   22684:	681b      	ldr	r3, [r3, #0]
   22686:	9a03      	ldr	r2, [sp, #12]
   22688:	429a      	cmp	r2, r3
   2268a:	d11d      	bne.n	226c8 <vTaskSuspend+0xb4>
		{
			if( xSchedulerRunning != pdFALSE )
   2268c:	4b12      	ldr	r3, [pc, #72]	; (226d8 <vTaskSuspend+0xc4>)
   2268e:	681b      	ldr	r3, [r3, #0]
   22690:	2b00      	cmp	r3, #0
   22692:	d00d      	beq.n	226b0 <vTaskSuspend+0x9c>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   22694:	4b11      	ldr	r3, [pc, #68]	; (226dc <vTaskSuspend+0xc8>)
   22696:	681b      	ldr	r3, [r3, #0]
   22698:	2b00      	cmp	r3, #0
   2269a:	d000      	beq.n	2269e <vTaskSuspend+0x8a>
   2269c:	e7fe      	b.n	2269c <vTaskSuspend+0x88>
				portYIELD_WITHIN_API();
   2269e:	4b10      	ldr	r3, [pc, #64]	; (226e0 <vTaskSuspend+0xcc>)
   226a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   226a4:	601a      	str	r2, [r3, #0]
   226a6:	f3bf 8f4f 	dsb	sy
   226aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   226ae:	e00b      	b.n	226c8 <vTaskSuspend+0xb4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   226b0:	4b08      	ldr	r3, [pc, #32]	; (226d4 <vTaskSuspend+0xc0>)
   226b2:	681a      	ldr	r2, [r3, #0]
   226b4:	4b0b      	ldr	r3, [pc, #44]	; (226e4 <vTaskSuspend+0xd0>)
   226b6:	681b      	ldr	r3, [r3, #0]
   226b8:	429a      	cmp	r2, r3
   226ba:	d103      	bne.n	226c4 <vTaskSuspend+0xb0>
					pxCurrentTCB = NULL;
   226bc:	4b04      	ldr	r3, [pc, #16]	; (226d0 <vTaskSuspend+0xbc>)
   226be:	2200      	movs	r2, #0
   226c0:	601a      	str	r2, [r3, #0]
	}
   226c2:	e001      	b.n	226c8 <vTaskSuspend+0xb4>
					vTaskSwitchContext();
   226c4:	f000 f9e0 	bl	22a88 <vTaskSwitchContext>
	}
   226c8:	bf00      	nop
   226ca:	b005      	add	sp, #20
   226cc:	f85d fb04 	ldr.w	pc, [sp], #4
   226d0:	1000865c 	.word	0x1000865c
   226d4:	100086f4 	.word	0x100086f4
   226d8:	10008714 	.word	0x10008714
   226dc:	10008730 	.word	0x10008730
   226e0:	e000ed04 	.word	0xe000ed04
   226e4:	10008708 	.word	0x10008708

000226e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   226e8:	b500      	push	{lr}
   226ea:	b085      	sub	sp, #20
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   226ec:	4b19      	ldr	r3, [pc, #100]	; (22754 <vTaskStartScheduler+0x6c>)
   226ee:	9301      	str	r3, [sp, #4]
   226f0:	2300      	movs	r3, #0
   226f2:	9300      	str	r3, [sp, #0]
   226f4:	2300      	movs	r3, #0
   226f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   226fa:	4917      	ldr	r1, [pc, #92]	; (22758 <vTaskStartScheduler+0x70>)
   226fc:	4817      	ldr	r0, [pc, #92]	; (2275c <vTaskStartScheduler+0x74>)
   226fe:	f7ff fe61 	bl	223c4 <xTaskCreate>
   22702:	9003      	str	r0, [sp, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   22704:	9b03      	ldr	r3, [sp, #12]
   22706:	2b01      	cmp	r3, #1
   22708:	d102      	bne.n	22710 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
   2270a:	f000 fce3 	bl	230d4 <xTimerCreateTimerTask>
   2270e:	9003      	str	r0, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   22710:	9b03      	ldr	r3, [sp, #12]
   22712:	2b01      	cmp	r3, #1
   22714:	d115      	bne.n	22742 <vTaskStartScheduler+0x5a>
	__asm volatile
   22716:	f04f 0380 	mov.w	r3, #128	; 0x80
   2271a:	f383 8811 	msr	BASEPRI, r3
   2271e:	f3bf 8f6f 	isb	sy
   22722:	f3bf 8f4f 	dsb	sy
   22726:	9302      	str	r3, [sp, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   22728:	4b0d      	ldr	r3, [pc, #52]	; (22760 <vTaskStartScheduler+0x78>)
   2272a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2272e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   22730:	4b0c      	ldr	r3, [pc, #48]	; (22764 <vTaskStartScheduler+0x7c>)
   22732:	2201      	movs	r2, #1
   22734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   22736:	4b0c      	ldr	r3, [pc, #48]	; (22768 <vTaskStartScheduler+0x80>)
   22738:	2200      	movs	r2, #0
   2273a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   2273c:	f7f5 fa80 	bl	17c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   22740:	e004      	b.n	2274c <vTaskStartScheduler+0x64>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   22742:	9b03      	ldr	r3, [sp, #12]
   22744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22748:	d100      	bne.n	2274c <vTaskStartScheduler+0x64>
   2274a:	e7fe      	b.n	2274a <vTaskStartScheduler+0x62>
}
   2274c:	bf00      	nop
   2274e:	b005      	add	sp, #20
   22750:	f85d fb04 	ldr.w	pc, [sp], #4
   22754:	1000872c 	.word	0x1000872c
   22758:	00029138 	.word	0x00029138
   2275c:	00022e5d 	.word	0x00022e5d
   22760:	10008728 	.word	0x10008728
   22764:	10008714 	.word	0x10008714
   22768:	1000870c 	.word	0x1000870c

0002276c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   2276c:	4b03      	ldr	r3, [pc, #12]	; (2277c <vTaskSuspendAll+0x10>)
   2276e:	681b      	ldr	r3, [r3, #0]
   22770:	3301      	adds	r3, #1
   22772:	4a02      	ldr	r2, [pc, #8]	; (2277c <vTaskSuspendAll+0x10>)
   22774:	6013      	str	r3, [r2, #0]
}
   22776:	bf00      	nop
   22778:	4770      	bx	lr
   2277a:	bf00      	nop
   2277c:	10008730 	.word	0x10008730

00022780 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   22780:	b082      	sub	sp, #8
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   22782:	2300      	movs	r3, #0
   22784:	9300      	str	r3, [sp, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   22786:	4b12      	ldr	r3, [pc, #72]	; (227d0 <prvGetExpectedIdleTime+0x50>)
   22788:	681b      	ldr	r3, [r3, #0]
   2278a:	2b00      	cmp	r3, #0
   2278c:	d001      	beq.n	22792 <prvGetExpectedIdleTime+0x12>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   2278e:	2301      	movs	r3, #1
   22790:	9300      	str	r3, [sp, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   22792:	4b10      	ldr	r3, [pc, #64]	; (227d4 <prvGetExpectedIdleTime+0x54>)
   22794:	681b      	ldr	r3, [r3, #0]
   22796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22798:	2b00      	cmp	r3, #0
   2279a:	d002      	beq.n	227a2 <prvGetExpectedIdleTime+0x22>
		{
			xReturn = 0;
   2279c:	2300      	movs	r3, #0
   2279e:	9301      	str	r3, [sp, #4]
   227a0:	e012      	b.n	227c8 <prvGetExpectedIdleTime+0x48>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   227a2:	4b0d      	ldr	r3, [pc, #52]	; (227d8 <prvGetExpectedIdleTime+0x58>)
   227a4:	681b      	ldr	r3, [r3, #0]
   227a6:	2b01      	cmp	r3, #1
   227a8:	d902      	bls.n	227b0 <prvGetExpectedIdleTime+0x30>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   227aa:	2300      	movs	r3, #0
   227ac:	9301      	str	r3, [sp, #4]
   227ae:	e00b      	b.n	227c8 <prvGetExpectedIdleTime+0x48>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   227b0:	9b00      	ldr	r3, [sp, #0]
   227b2:	2b00      	cmp	r3, #0
   227b4:	d002      	beq.n	227bc <prvGetExpectedIdleTime+0x3c>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   227b6:	2300      	movs	r3, #0
   227b8:	9301      	str	r3, [sp, #4]
   227ba:	e005      	b.n	227c8 <prvGetExpectedIdleTime+0x48>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   227bc:	4b07      	ldr	r3, [pc, #28]	; (227dc <prvGetExpectedIdleTime+0x5c>)
   227be:	681a      	ldr	r2, [r3, #0]
   227c0:	4b07      	ldr	r3, [pc, #28]	; (227e0 <prvGetExpectedIdleTime+0x60>)
   227c2:	681b      	ldr	r3, [r3, #0]
   227c4:	1ad3      	subs	r3, r2, r3
   227c6:	9301      	str	r3, [sp, #4]
		}

		return xReturn;
   227c8:	9b01      	ldr	r3, [sp, #4]
	}
   227ca:	4618      	mov	r0, r3
   227cc:	b002      	add	sp, #8
   227ce:	4770      	bx	lr
   227d0:	10008710 	.word	0x10008710
   227d4:	1000865c 	.word	0x1000865c
   227d8:	10008660 	.word	0x10008660
   227dc:	10008728 	.word	0x10008728
   227e0:	1000870c 	.word	0x1000870c

000227e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   227e4:	b500      	push	{lr}
   227e6:	b085      	sub	sp, #20
TCB_t *pxTCB = NULL;
   227e8:	2300      	movs	r3, #0
   227ea:	9303      	str	r3, [sp, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   227ec:	2300      	movs	r3, #0
   227ee:	9302      	str	r3, [sp, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   227f0:	4b3c      	ldr	r3, [pc, #240]	; (228e4 <xTaskResumeAll+0x100>)
   227f2:	681b      	ldr	r3, [r3, #0]
   227f4:	2b00      	cmp	r3, #0
   227f6:	d100      	bne.n	227fa <xTaskResumeAll+0x16>
   227f8:	e7fe      	b.n	227f8 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   227fa:	f7f5 faa9 	bl	17d50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   227fe:	4b39      	ldr	r3, [pc, #228]	; (228e4 <xTaskResumeAll+0x100>)
   22800:	681b      	ldr	r3, [r3, #0]
   22802:	3b01      	subs	r3, #1
   22804:	4a37      	ldr	r2, [pc, #220]	; (228e4 <xTaskResumeAll+0x100>)
   22806:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22808:	4b36      	ldr	r3, [pc, #216]	; (228e4 <xTaskResumeAll+0x100>)
   2280a:	681b      	ldr	r3, [r3, #0]
   2280c:	2b00      	cmp	r3, #0
   2280e:	d162      	bne.n	228d6 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   22810:	4b35      	ldr	r3, [pc, #212]	; (228e8 <xTaskResumeAll+0x104>)
   22812:	681b      	ldr	r3, [r3, #0]
   22814:	2b00      	cmp	r3, #0
   22816:	d05e      	beq.n	228d6 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   22818:	e02f      	b.n	2287a <xTaskResumeAll+0x96>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2281a:	4b34      	ldr	r3, [pc, #208]	; (228ec <xTaskResumeAll+0x108>)
   2281c:	68db      	ldr	r3, [r3, #12]
   2281e:	68db      	ldr	r3, [r3, #12]
   22820:	9303      	str	r3, [sp, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   22822:	9b03      	ldr	r3, [sp, #12]
   22824:	3318      	adds	r3, #24
   22826:	4618      	mov	r0, r3
   22828:	f7ff f9b7 	bl	21b9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   2282c:	9b03      	ldr	r3, [sp, #12]
   2282e:	3304      	adds	r3, #4
   22830:	4618      	mov	r0, r3
   22832:	f7ff f9b2 	bl	21b9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   22836:	9b03      	ldr	r3, [sp, #12]
   22838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2283a:	4b2d      	ldr	r3, [pc, #180]	; (228f0 <xTaskResumeAll+0x10c>)
   2283c:	681b      	ldr	r3, [r3, #0]
   2283e:	429a      	cmp	r2, r3
   22840:	d903      	bls.n	2284a <xTaskResumeAll+0x66>
   22842:	9b03      	ldr	r3, [sp, #12]
   22844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22846:	4a2a      	ldr	r2, [pc, #168]	; (228f0 <xTaskResumeAll+0x10c>)
   22848:	6013      	str	r3, [r2, #0]
   2284a:	9b03      	ldr	r3, [sp, #12]
   2284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2284e:	4613      	mov	r3, r2
   22850:	009b      	lsls	r3, r3, #2
   22852:	4413      	add	r3, r2
   22854:	009b      	lsls	r3, r3, #2
   22856:	4a27      	ldr	r2, [pc, #156]	; (228f4 <xTaskResumeAll+0x110>)
   22858:	441a      	add	r2, r3
   2285a:	9b03      	ldr	r3, [sp, #12]
   2285c:	3304      	adds	r3, #4
   2285e:	4619      	mov	r1, r3
   22860:	4610      	mov	r0, r2
   22862:	f7ff f947 	bl	21af4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22866:	9b03      	ldr	r3, [sp, #12]
   22868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2286a:	4b23      	ldr	r3, [pc, #140]	; (228f8 <xTaskResumeAll+0x114>)
   2286c:	681b      	ldr	r3, [r3, #0]
   2286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22870:	429a      	cmp	r2, r3
   22872:	d302      	bcc.n	2287a <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   22874:	4b21      	ldr	r3, [pc, #132]	; (228fc <xTaskResumeAll+0x118>)
   22876:	2201      	movs	r2, #1
   22878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   2287a:	4b1c      	ldr	r3, [pc, #112]	; (228ec <xTaskResumeAll+0x108>)
   2287c:	681b      	ldr	r3, [r3, #0]
   2287e:	2b00      	cmp	r3, #0
   22880:	d1cb      	bne.n	2281a <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   22882:	9b03      	ldr	r3, [sp, #12]
   22884:	2b00      	cmp	r3, #0
   22886:	d001      	beq.n	2288c <xTaskResumeAll+0xa8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   22888:	f000 fb86 	bl	22f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   2288c:	4b1c      	ldr	r3, [pc, #112]	; (22900 <xTaskResumeAll+0x11c>)
   2288e:	681b      	ldr	r3, [r3, #0]
   22890:	9301      	str	r3, [sp, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   22892:	9b01      	ldr	r3, [sp, #4]
   22894:	2b00      	cmp	r3, #0
   22896:	d010      	beq.n	228ba <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   22898:	f000 f858 	bl	2294c <xTaskIncrementTick>
   2289c:	4603      	mov	r3, r0
   2289e:	2b00      	cmp	r3, #0
   228a0:	d002      	beq.n	228a8 <xTaskResumeAll+0xc4>
							{
								xYieldPending = pdTRUE;
   228a2:	4b16      	ldr	r3, [pc, #88]	; (228fc <xTaskResumeAll+0x118>)
   228a4:	2201      	movs	r2, #1
   228a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   228a8:	9b01      	ldr	r3, [sp, #4]
   228aa:	3b01      	subs	r3, #1
   228ac:	9301      	str	r3, [sp, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   228ae:	9b01      	ldr	r3, [sp, #4]
   228b0:	2b00      	cmp	r3, #0
   228b2:	d1f1      	bne.n	22898 <xTaskResumeAll+0xb4>

						uxPendedTicks = 0;
   228b4:	4b12      	ldr	r3, [pc, #72]	; (22900 <xTaskResumeAll+0x11c>)
   228b6:	2200      	movs	r2, #0
   228b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   228ba:	4b10      	ldr	r3, [pc, #64]	; (228fc <xTaskResumeAll+0x118>)
   228bc:	681b      	ldr	r3, [r3, #0]
   228be:	2b00      	cmp	r3, #0
   228c0:	d009      	beq.n	228d6 <xTaskResumeAll+0xf2>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   228c2:	2301      	movs	r3, #1
   228c4:	9302      	str	r3, [sp, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   228c6:	4b0f      	ldr	r3, [pc, #60]	; (22904 <xTaskResumeAll+0x120>)
   228c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   228cc:	601a      	str	r2, [r3, #0]
   228ce:	f3bf 8f4f 	dsb	sy
   228d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   228d6:	f7f5 fa5b 	bl	17d90 <vPortExitCritical>

	return xAlreadyYielded;
   228da:	9b02      	ldr	r3, [sp, #8]
}
   228dc:	4618      	mov	r0, r3
   228de:	b005      	add	sp, #20
   228e0:	f85d fb04 	ldr.w	pc, [sp], #4
   228e4:	10008730 	.word	0x10008730
   228e8:	10008708 	.word	0x10008708
   228ec:	100086e0 	.word	0x100086e0
   228f0:	10008710 	.word	0x10008710
   228f4:	10008660 	.word	0x10008660
   228f8:	1000865c 	.word	0x1000865c
   228fc:	1000871c 	.word	0x1000871c
   22900:	10008718 	.word	0x10008718
   22904:	e000ed04 	.word	0xe000ed04

00022908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   22908:	b082      	sub	sp, #8
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   2290a:	4b03      	ldr	r3, [pc, #12]	; (22918 <xTaskGetTickCount+0x10>)
   2290c:	681b      	ldr	r3, [r3, #0]
   2290e:	9301      	str	r3, [sp, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   22910:	9b01      	ldr	r3, [sp, #4]
}
   22912:	4618      	mov	r0, r3
   22914:	b002      	add	sp, #8
   22916:	4770      	bx	lr
   22918:	1000870c 	.word	0x1000870c

0002291c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   2291c:	b082      	sub	sp, #8
   2291e:	9001      	str	r0, [sp, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   22920:	4b08      	ldr	r3, [pc, #32]	; (22944 <vTaskStepTick+0x28>)
   22922:	681a      	ldr	r2, [r3, #0]
   22924:	9b01      	ldr	r3, [sp, #4]
   22926:	441a      	add	r2, r3
   22928:	4b07      	ldr	r3, [pc, #28]	; (22948 <vTaskStepTick+0x2c>)
   2292a:	681b      	ldr	r3, [r3, #0]
   2292c:	429a      	cmp	r2, r3
   2292e:	d900      	bls.n	22932 <vTaskStepTick+0x16>
   22930:	e7fe      	b.n	22930 <vTaskStepTick+0x14>
		xTickCount += xTicksToJump;
   22932:	4b04      	ldr	r3, [pc, #16]	; (22944 <vTaskStepTick+0x28>)
   22934:	681a      	ldr	r2, [r3, #0]
   22936:	9b01      	ldr	r3, [sp, #4]
   22938:	4413      	add	r3, r2
   2293a:	4a02      	ldr	r2, [pc, #8]	; (22944 <vTaskStepTick+0x28>)
   2293c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   2293e:	bf00      	nop
   22940:	b002      	add	sp, #8
   22942:	4770      	bx	lr
   22944:	1000870c 	.word	0x1000870c
   22948:	10008728 	.word	0x10008728

0002294c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   2294c:	b500      	push	{lr}
   2294e:	b087      	sub	sp, #28
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   22950:	2300      	movs	r3, #0
   22952:	9305      	str	r3, [sp, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22954:	4b41      	ldr	r3, [pc, #260]	; (22a5c <xTaskIncrementTick+0x110>)
   22956:	681b      	ldr	r3, [r3, #0]
   22958:	2b00      	cmp	r3, #0
   2295a:	d16f      	bne.n	22a3c <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   2295c:	4b40      	ldr	r3, [pc, #256]	; (22a60 <xTaskIncrementTick+0x114>)
   2295e:	681b      	ldr	r3, [r3, #0]
   22960:	3301      	adds	r3, #1
   22962:	9304      	str	r3, [sp, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   22964:	4a3e      	ldr	r2, [pc, #248]	; (22a60 <xTaskIncrementTick+0x114>)
   22966:	9b04      	ldr	r3, [sp, #16]
   22968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   2296a:	9b04      	ldr	r3, [sp, #16]
   2296c:	2b00      	cmp	r3, #0
   2296e:	d116      	bne.n	2299e <xTaskIncrementTick+0x52>
		{
			taskSWITCH_DELAYED_LISTS();
   22970:	4b3c      	ldr	r3, [pc, #240]	; (22a64 <xTaskIncrementTick+0x118>)
   22972:	681b      	ldr	r3, [r3, #0]
   22974:	681b      	ldr	r3, [r3, #0]
   22976:	2b00      	cmp	r3, #0
   22978:	d000      	beq.n	2297c <xTaskIncrementTick+0x30>
   2297a:	e7fe      	b.n	2297a <xTaskIncrementTick+0x2e>
   2297c:	4b39      	ldr	r3, [pc, #228]	; (22a64 <xTaskIncrementTick+0x118>)
   2297e:	681b      	ldr	r3, [r3, #0]
   22980:	9303      	str	r3, [sp, #12]
   22982:	4b39      	ldr	r3, [pc, #228]	; (22a68 <xTaskIncrementTick+0x11c>)
   22984:	681b      	ldr	r3, [r3, #0]
   22986:	4a37      	ldr	r2, [pc, #220]	; (22a64 <xTaskIncrementTick+0x118>)
   22988:	6013      	str	r3, [r2, #0]
   2298a:	4a37      	ldr	r2, [pc, #220]	; (22a68 <xTaskIncrementTick+0x11c>)
   2298c:	9b03      	ldr	r3, [sp, #12]
   2298e:	6013      	str	r3, [r2, #0]
   22990:	4b36      	ldr	r3, [pc, #216]	; (22a6c <xTaskIncrementTick+0x120>)
   22992:	681b      	ldr	r3, [r3, #0]
   22994:	3301      	adds	r3, #1
   22996:	4a35      	ldr	r2, [pc, #212]	; (22a6c <xTaskIncrementTick+0x120>)
   22998:	6013      	str	r3, [r2, #0]
   2299a:	f000 fafd 	bl	22f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   2299e:	4b34      	ldr	r3, [pc, #208]	; (22a70 <xTaskIncrementTick+0x124>)
   229a0:	681b      	ldr	r3, [r3, #0]
   229a2:	9a04      	ldr	r2, [sp, #16]
   229a4:	429a      	cmp	r2, r3
   229a6:	d34e      	bcc.n	22a46 <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   229a8:	4b2e      	ldr	r3, [pc, #184]	; (22a64 <xTaskIncrementTick+0x118>)
   229aa:	681b      	ldr	r3, [r3, #0]
   229ac:	681b      	ldr	r3, [r3, #0]
   229ae:	2b00      	cmp	r3, #0
   229b0:	d104      	bne.n	229bc <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   229b2:	4b2f      	ldr	r3, [pc, #188]	; (22a70 <xTaskIncrementTick+0x124>)
   229b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   229b8:	601a      	str	r2, [r3, #0]
					break;
   229ba:	e044      	b.n	22a46 <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   229bc:	4b29      	ldr	r3, [pc, #164]	; (22a64 <xTaskIncrementTick+0x118>)
   229be:	681b      	ldr	r3, [r3, #0]
   229c0:	68db      	ldr	r3, [r3, #12]
   229c2:	68db      	ldr	r3, [r3, #12]
   229c4:	9302      	str	r3, [sp, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   229c6:	9b02      	ldr	r3, [sp, #8]
   229c8:	685b      	ldr	r3, [r3, #4]
   229ca:	9301      	str	r3, [sp, #4]

					if( xConstTickCount < xItemValue )
   229cc:	9a04      	ldr	r2, [sp, #16]
   229ce:	9b01      	ldr	r3, [sp, #4]
   229d0:	429a      	cmp	r2, r3
   229d2:	d203      	bcs.n	229dc <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   229d4:	4a26      	ldr	r2, [pc, #152]	; (22a70 <xTaskIncrementTick+0x124>)
   229d6:	9b01      	ldr	r3, [sp, #4]
   229d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   229da:	e034      	b.n	22a46 <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   229dc:	9b02      	ldr	r3, [sp, #8]
   229de:	3304      	adds	r3, #4
   229e0:	4618      	mov	r0, r3
   229e2:	f7ff f8da 	bl	21b9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   229e6:	9b02      	ldr	r3, [sp, #8]
   229e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   229ea:	2b00      	cmp	r3, #0
   229ec:	d004      	beq.n	229f8 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   229ee:	9b02      	ldr	r3, [sp, #8]
   229f0:	3318      	adds	r3, #24
   229f2:	4618      	mov	r0, r3
   229f4:	f7ff f8d1 	bl	21b9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   229f8:	9b02      	ldr	r3, [sp, #8]
   229fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   229fc:	4b1d      	ldr	r3, [pc, #116]	; (22a74 <xTaskIncrementTick+0x128>)
   229fe:	681b      	ldr	r3, [r3, #0]
   22a00:	429a      	cmp	r2, r3
   22a02:	d903      	bls.n	22a0c <xTaskIncrementTick+0xc0>
   22a04:	9b02      	ldr	r3, [sp, #8]
   22a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22a08:	4a1a      	ldr	r2, [pc, #104]	; (22a74 <xTaskIncrementTick+0x128>)
   22a0a:	6013      	str	r3, [r2, #0]
   22a0c:	9b02      	ldr	r3, [sp, #8]
   22a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22a10:	4613      	mov	r3, r2
   22a12:	009b      	lsls	r3, r3, #2
   22a14:	4413      	add	r3, r2
   22a16:	009b      	lsls	r3, r3, #2
   22a18:	4a17      	ldr	r2, [pc, #92]	; (22a78 <xTaskIncrementTick+0x12c>)
   22a1a:	441a      	add	r2, r3
   22a1c:	9b02      	ldr	r3, [sp, #8]
   22a1e:	3304      	adds	r3, #4
   22a20:	4619      	mov	r1, r3
   22a22:	4610      	mov	r0, r2
   22a24:	f7ff f866 	bl	21af4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22a28:	9b02      	ldr	r3, [sp, #8]
   22a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22a2c:	4b13      	ldr	r3, [pc, #76]	; (22a7c <xTaskIncrementTick+0x130>)
   22a2e:	681b      	ldr	r3, [r3, #0]
   22a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22a32:	429a      	cmp	r2, r3
   22a34:	d3b8      	bcc.n	229a8 <xTaskIncrementTick+0x5c>
						{
							xSwitchRequired = pdTRUE;
   22a36:	2301      	movs	r3, #1
   22a38:	9305      	str	r3, [sp, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22a3a:	e7b5      	b.n	229a8 <xTaskIncrementTick+0x5c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   22a3c:	4b10      	ldr	r3, [pc, #64]	; (22a80 <xTaskIncrementTick+0x134>)
   22a3e:	681b      	ldr	r3, [r3, #0]
   22a40:	3301      	adds	r3, #1
   22a42:	4a0f      	ldr	r2, [pc, #60]	; (22a80 <xTaskIncrementTick+0x134>)
   22a44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   22a46:	4b0f      	ldr	r3, [pc, #60]	; (22a84 <xTaskIncrementTick+0x138>)
   22a48:	681b      	ldr	r3, [r3, #0]
   22a4a:	2b00      	cmp	r3, #0
   22a4c:	d001      	beq.n	22a52 <xTaskIncrementTick+0x106>
		{
			xSwitchRequired = pdTRUE;
   22a4e:	2301      	movs	r3, #1
   22a50:	9305      	str	r3, [sp, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   22a52:	9b05      	ldr	r3, [sp, #20]
}
   22a54:	4618      	mov	r0, r3
   22a56:	b007      	add	sp, #28
   22a58:	f85d fb04 	ldr.w	pc, [sp], #4
   22a5c:	10008730 	.word	0x10008730
   22a60:	1000870c 	.word	0x1000870c
   22a64:	100086d8 	.word	0x100086d8
   22a68:	100086dc 	.word	0x100086dc
   22a6c:	10008720 	.word	0x10008720
   22a70:	10008728 	.word	0x10008728
   22a74:	10008710 	.word	0x10008710
   22a78:	10008660 	.word	0x10008660
   22a7c:	1000865c 	.word	0x1000865c
   22a80:	10008718 	.word	0x10008718
   22a84:	1000871c 	.word	0x1000871c

00022a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   22a88:	b500      	push	{lr}
   22a8a:	b085      	sub	sp, #20
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   22a8c:	4b35      	ldr	r3, [pc, #212]	; (22b64 <vTaskSwitchContext+0xdc>)
   22a8e:	681b      	ldr	r3, [r3, #0]
   22a90:	2b00      	cmp	r3, #0
   22a92:	d003      	beq.n	22a9c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   22a94:	4b34      	ldr	r3, [pc, #208]	; (22b68 <vTaskSwitchContext+0xe0>)
   22a96:	2201      	movs	r2, #1
   22a98:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   22a9a:	e05e      	b.n	22b5a <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
   22a9c:	4b32      	ldr	r3, [pc, #200]	; (22b68 <vTaskSwitchContext+0xe0>)
   22a9e:	2200      	movs	r2, #0
   22aa0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   22aa2:	4b32      	ldr	r3, [pc, #200]	; (22b6c <vTaskSwitchContext+0xe4>)
   22aa4:	681b      	ldr	r3, [r3, #0]
   22aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   22aa8:	9302      	str	r3, [sp, #8]
   22aaa:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   22aae:	9301      	str	r3, [sp, #4]
   22ab0:	9b02      	ldr	r3, [sp, #8]
   22ab2:	681a      	ldr	r2, [r3, #0]
   22ab4:	9b01      	ldr	r3, [sp, #4]
   22ab6:	429a      	cmp	r2, r3
   22ab8:	d111      	bne.n	22ade <vTaskSwitchContext+0x56>
   22aba:	9b02      	ldr	r3, [sp, #8]
   22abc:	3304      	adds	r3, #4
   22abe:	681a      	ldr	r2, [r3, #0]
   22ac0:	9b01      	ldr	r3, [sp, #4]
   22ac2:	429a      	cmp	r2, r3
   22ac4:	d10b      	bne.n	22ade <vTaskSwitchContext+0x56>
   22ac6:	9b02      	ldr	r3, [sp, #8]
   22ac8:	3308      	adds	r3, #8
   22aca:	681a      	ldr	r2, [r3, #0]
   22acc:	9b01      	ldr	r3, [sp, #4]
   22ace:	429a      	cmp	r2, r3
   22ad0:	d105      	bne.n	22ade <vTaskSwitchContext+0x56>
   22ad2:	9b02      	ldr	r3, [sp, #8]
   22ad4:	330c      	adds	r3, #12
   22ad6:	681a      	ldr	r2, [r3, #0]
   22ad8:	9b01      	ldr	r3, [sp, #4]
   22ada:	429a      	cmp	r2, r3
   22adc:	d008      	beq.n	22af0 <vTaskSwitchContext+0x68>
   22ade:	4b23      	ldr	r3, [pc, #140]	; (22b6c <vTaskSwitchContext+0xe4>)
   22ae0:	681a      	ldr	r2, [r3, #0]
   22ae2:	4b22      	ldr	r3, [pc, #136]	; (22b6c <vTaskSwitchContext+0xe4>)
   22ae4:	681b      	ldr	r3, [r3, #0]
   22ae6:	3334      	adds	r3, #52	; 0x34
   22ae8:	4619      	mov	r1, r3
   22aea:	4610      	mov	r0, r2
   22aec:	f7f8 fbad 	bl	1b24a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22af0:	4b1f      	ldr	r3, [pc, #124]	; (22b70 <vTaskSwitchContext+0xe8>)
   22af2:	681b      	ldr	r3, [r3, #0]
   22af4:	9303      	str	r3, [sp, #12]
   22af6:	e006      	b.n	22b06 <vTaskSwitchContext+0x7e>
   22af8:	9b03      	ldr	r3, [sp, #12]
   22afa:	2b00      	cmp	r3, #0
   22afc:	d100      	bne.n	22b00 <vTaskSwitchContext+0x78>
   22afe:	e7fe      	b.n	22afe <vTaskSwitchContext+0x76>
   22b00:	9b03      	ldr	r3, [sp, #12]
   22b02:	3b01      	subs	r3, #1
   22b04:	9303      	str	r3, [sp, #12]
   22b06:	491b      	ldr	r1, [pc, #108]	; (22b74 <vTaskSwitchContext+0xec>)
   22b08:	9a03      	ldr	r2, [sp, #12]
   22b0a:	4613      	mov	r3, r2
   22b0c:	009b      	lsls	r3, r3, #2
   22b0e:	4413      	add	r3, r2
   22b10:	009b      	lsls	r3, r3, #2
   22b12:	440b      	add	r3, r1
   22b14:	681b      	ldr	r3, [r3, #0]
   22b16:	2b00      	cmp	r3, #0
   22b18:	d0ee      	beq.n	22af8 <vTaskSwitchContext+0x70>
   22b1a:	9a03      	ldr	r2, [sp, #12]
   22b1c:	4613      	mov	r3, r2
   22b1e:	009b      	lsls	r3, r3, #2
   22b20:	4413      	add	r3, r2
   22b22:	009b      	lsls	r3, r3, #2
   22b24:	4a13      	ldr	r2, [pc, #76]	; (22b74 <vTaskSwitchContext+0xec>)
   22b26:	4413      	add	r3, r2
   22b28:	9300      	str	r3, [sp, #0]
   22b2a:	9b00      	ldr	r3, [sp, #0]
   22b2c:	685b      	ldr	r3, [r3, #4]
   22b2e:	685a      	ldr	r2, [r3, #4]
   22b30:	9b00      	ldr	r3, [sp, #0]
   22b32:	605a      	str	r2, [r3, #4]
   22b34:	9b00      	ldr	r3, [sp, #0]
   22b36:	685a      	ldr	r2, [r3, #4]
   22b38:	9b00      	ldr	r3, [sp, #0]
   22b3a:	3308      	adds	r3, #8
   22b3c:	429a      	cmp	r2, r3
   22b3e:	d104      	bne.n	22b4a <vTaskSwitchContext+0xc2>
   22b40:	9b00      	ldr	r3, [sp, #0]
   22b42:	685b      	ldr	r3, [r3, #4]
   22b44:	685a      	ldr	r2, [r3, #4]
   22b46:	9b00      	ldr	r3, [sp, #0]
   22b48:	605a      	str	r2, [r3, #4]
   22b4a:	9b00      	ldr	r3, [sp, #0]
   22b4c:	685b      	ldr	r3, [r3, #4]
   22b4e:	68db      	ldr	r3, [r3, #12]
   22b50:	4a06      	ldr	r2, [pc, #24]	; (22b6c <vTaskSwitchContext+0xe4>)
   22b52:	6013      	str	r3, [r2, #0]
   22b54:	4a06      	ldr	r2, [pc, #24]	; (22b70 <vTaskSwitchContext+0xe8>)
   22b56:	9b03      	ldr	r3, [sp, #12]
   22b58:	6013      	str	r3, [r2, #0]
}
   22b5a:	bf00      	nop
   22b5c:	b005      	add	sp, #20
   22b5e:	f85d fb04 	ldr.w	pc, [sp], #4
   22b62:	bf00      	nop
   22b64:	10008730 	.word	0x10008730
   22b68:	1000871c 	.word	0x1000871c
   22b6c:	1000865c 	.word	0x1000865c
   22b70:	10008710 	.word	0x10008710
   22b74:	10008660 	.word	0x10008660

00022b78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   22b78:	b500      	push	{lr}
   22b7a:	b083      	sub	sp, #12
   22b7c:	9001      	str	r0, [sp, #4]
   22b7e:	9100      	str	r1, [sp, #0]
	configASSERT( pxEventList );
   22b80:	9b01      	ldr	r3, [sp, #4]
   22b82:	2b00      	cmp	r3, #0
   22b84:	d100      	bne.n	22b88 <vTaskPlaceOnEventList+0x10>
   22b86:	e7fe      	b.n	22b86 <vTaskPlaceOnEventList+0xe>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   22b88:	4b07      	ldr	r3, [pc, #28]	; (22ba8 <vTaskPlaceOnEventList+0x30>)
   22b8a:	681b      	ldr	r3, [r3, #0]
   22b8c:	3318      	adds	r3, #24
   22b8e:	4619      	mov	r1, r3
   22b90:	9801      	ldr	r0, [sp, #4]
   22b92:	f7fe ffce 	bl	21b32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   22b96:	2101      	movs	r1, #1
   22b98:	9800      	ldr	r0, [sp, #0]
   22b9a:	f000 fa47 	bl	2302c <prvAddCurrentTaskToDelayedList>
}
   22b9e:	bf00      	nop
   22ba0:	b003      	add	sp, #12
   22ba2:	f85d fb04 	ldr.w	pc, [sp], #4
   22ba6:	bf00      	nop
   22ba8:	1000865c 	.word	0x1000865c

00022bac <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   22bac:	b500      	push	{lr}
   22bae:	b085      	sub	sp, #20
   22bb0:	9003      	str	r0, [sp, #12]
   22bb2:	9102      	str	r1, [sp, #8]
   22bb4:	9201      	str	r2, [sp, #4]
	configASSERT( pxEventList );
   22bb6:	9b03      	ldr	r3, [sp, #12]
   22bb8:	2b00      	cmp	r3, #0
   22bba:	d100      	bne.n	22bbe <vTaskPlaceOnUnorderedEventList+0x12>
   22bbc:	e7fe      	b.n	22bbc <vTaskPlaceOnUnorderedEventList+0x10>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   22bbe:	4b0d      	ldr	r3, [pc, #52]	; (22bf4 <vTaskPlaceOnUnorderedEventList+0x48>)
   22bc0:	681b      	ldr	r3, [r3, #0]
   22bc2:	2b00      	cmp	r3, #0
   22bc4:	d100      	bne.n	22bc8 <vTaskPlaceOnUnorderedEventList+0x1c>
   22bc6:	e7fe      	b.n	22bc6 <vTaskPlaceOnUnorderedEventList+0x1a>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   22bc8:	4b0b      	ldr	r3, [pc, #44]	; (22bf8 <vTaskPlaceOnUnorderedEventList+0x4c>)
   22bca:	681b      	ldr	r3, [r3, #0]
   22bcc:	9a02      	ldr	r2, [sp, #8]
   22bce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   22bd2:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   22bd4:	4b08      	ldr	r3, [pc, #32]	; (22bf8 <vTaskPlaceOnUnorderedEventList+0x4c>)
   22bd6:	681b      	ldr	r3, [r3, #0]
   22bd8:	3318      	adds	r3, #24
   22bda:	4619      	mov	r1, r3
   22bdc:	9803      	ldr	r0, [sp, #12]
   22bde:	f7fe ff89 	bl	21af4 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   22be2:	2101      	movs	r1, #1
   22be4:	9801      	ldr	r0, [sp, #4]
   22be6:	f000 fa21 	bl	2302c <prvAddCurrentTaskToDelayedList>
}
   22bea:	bf00      	nop
   22bec:	b005      	add	sp, #20
   22bee:	f85d fb04 	ldr.w	pc, [sp], #4
   22bf2:	bf00      	nop
   22bf4:	10008730 	.word	0x10008730
   22bf8:	1000865c 	.word	0x1000865c

00022bfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   22bfc:	b500      	push	{lr}
   22bfe:	b085      	sub	sp, #20
   22c00:	9003      	str	r0, [sp, #12]
   22c02:	9102      	str	r1, [sp, #8]
   22c04:	9201      	str	r2, [sp, #4]
		configASSERT( pxEventList );
   22c06:	9b03      	ldr	r3, [sp, #12]
   22c08:	2b00      	cmp	r3, #0
   22c0a:	d100      	bne.n	22c0e <vTaskPlaceOnEventListRestricted+0x12>
   22c0c:	e7fe      	b.n	22c0c <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   22c0e:	4b0a      	ldr	r3, [pc, #40]	; (22c38 <vTaskPlaceOnEventListRestricted+0x3c>)
   22c10:	681b      	ldr	r3, [r3, #0]
   22c12:	3318      	adds	r3, #24
   22c14:	4619      	mov	r1, r3
   22c16:	9803      	ldr	r0, [sp, #12]
   22c18:	f7fe ff6c 	bl	21af4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   22c1c:	9b01      	ldr	r3, [sp, #4]
   22c1e:	2b00      	cmp	r3, #0
   22c20:	d002      	beq.n	22c28 <vTaskPlaceOnEventListRestricted+0x2c>
		{
			xTicksToWait = portMAX_DELAY;
   22c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22c26:	9302      	str	r3, [sp, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   22c28:	9901      	ldr	r1, [sp, #4]
   22c2a:	9802      	ldr	r0, [sp, #8]
   22c2c:	f000 f9fe 	bl	2302c <prvAddCurrentTaskToDelayedList>
	}
   22c30:	bf00      	nop
   22c32:	b005      	add	sp, #20
   22c34:	f85d fb04 	ldr.w	pc, [sp], #4
   22c38:	1000865c 	.word	0x1000865c

00022c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   22c3c:	b500      	push	{lr}
   22c3e:	b085      	sub	sp, #20
   22c40:	9001      	str	r0, [sp, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22c42:	9b01      	ldr	r3, [sp, #4]
   22c44:	68db      	ldr	r3, [r3, #12]
   22c46:	68db      	ldr	r3, [r3, #12]
   22c48:	9302      	str	r3, [sp, #8]
	configASSERT( pxUnblockedTCB );
   22c4a:	9b02      	ldr	r3, [sp, #8]
   22c4c:	2b00      	cmp	r3, #0
   22c4e:	d100      	bne.n	22c52 <xTaskRemoveFromEventList+0x16>
   22c50:	e7fe      	b.n	22c50 <xTaskRemoveFromEventList+0x14>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   22c52:	9b02      	ldr	r3, [sp, #8]
   22c54:	3318      	adds	r3, #24
   22c56:	4618      	mov	r0, r3
   22c58:	f7fe ff9f 	bl	21b9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22c5c:	4b1e      	ldr	r3, [pc, #120]	; (22cd8 <xTaskRemoveFromEventList+0x9c>)
   22c5e:	681b      	ldr	r3, [r3, #0]
   22c60:	2b00      	cmp	r3, #0
   22c62:	d11d      	bne.n	22ca0 <xTaskRemoveFromEventList+0x64>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   22c64:	9b02      	ldr	r3, [sp, #8]
   22c66:	3304      	adds	r3, #4
   22c68:	4618      	mov	r0, r3
   22c6a:	f7fe ff96 	bl	21b9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   22c6e:	9b02      	ldr	r3, [sp, #8]
   22c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22c72:	4b1a      	ldr	r3, [pc, #104]	; (22cdc <xTaskRemoveFromEventList+0xa0>)
   22c74:	681b      	ldr	r3, [r3, #0]
   22c76:	429a      	cmp	r2, r3
   22c78:	d903      	bls.n	22c82 <xTaskRemoveFromEventList+0x46>
   22c7a:	9b02      	ldr	r3, [sp, #8]
   22c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22c7e:	4a17      	ldr	r2, [pc, #92]	; (22cdc <xTaskRemoveFromEventList+0xa0>)
   22c80:	6013      	str	r3, [r2, #0]
   22c82:	9b02      	ldr	r3, [sp, #8]
   22c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22c86:	4613      	mov	r3, r2
   22c88:	009b      	lsls	r3, r3, #2
   22c8a:	4413      	add	r3, r2
   22c8c:	009b      	lsls	r3, r3, #2
   22c8e:	4a14      	ldr	r2, [pc, #80]	; (22ce0 <xTaskRemoveFromEventList+0xa4>)
   22c90:	441a      	add	r2, r3
   22c92:	9b02      	ldr	r3, [sp, #8]
   22c94:	3304      	adds	r3, #4
   22c96:	4619      	mov	r1, r3
   22c98:	4610      	mov	r0, r2
   22c9a:	f7fe ff2b 	bl	21af4 <vListInsertEnd>
   22c9e:	e005      	b.n	22cac <xTaskRemoveFromEventList+0x70>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   22ca0:	9b02      	ldr	r3, [sp, #8]
   22ca2:	3318      	adds	r3, #24
   22ca4:	4619      	mov	r1, r3
   22ca6:	480f      	ldr	r0, [pc, #60]	; (22ce4 <xTaskRemoveFromEventList+0xa8>)
   22ca8:	f7fe ff24 	bl	21af4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   22cac:	9b02      	ldr	r3, [sp, #8]
   22cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22cb0:	4b0d      	ldr	r3, [pc, #52]	; (22ce8 <xTaskRemoveFromEventList+0xac>)
   22cb2:	681b      	ldr	r3, [r3, #0]
   22cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22cb6:	429a      	cmp	r2, r3
   22cb8:	d905      	bls.n	22cc6 <xTaskRemoveFromEventList+0x8a>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   22cba:	2301      	movs	r3, #1
   22cbc:	9303      	str	r3, [sp, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   22cbe:	4b0b      	ldr	r3, [pc, #44]	; (22cec <xTaskRemoveFromEventList+0xb0>)
   22cc0:	2201      	movs	r2, #1
   22cc2:	601a      	str	r2, [r3, #0]
   22cc4:	e001      	b.n	22cca <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		xReturn = pdFALSE;
   22cc6:	2300      	movs	r3, #0
   22cc8:	9303      	str	r3, [sp, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   22cca:	f000 f965 	bl	22f98 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   22cce:	9b03      	ldr	r3, [sp, #12]
}
   22cd0:	4618      	mov	r0, r3
   22cd2:	b005      	add	sp, #20
   22cd4:	f85d fb04 	ldr.w	pc, [sp], #4
   22cd8:	10008730 	.word	0x10008730
   22cdc:	10008710 	.word	0x10008710
   22ce0:	10008660 	.word	0x10008660
   22ce4:	100086e0 	.word	0x100086e0
   22ce8:	1000865c 	.word	0x1000865c
   22cec:	1000871c 	.word	0x1000871c

00022cf0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   22cf0:	b500      	push	{lr}
   22cf2:	b085      	sub	sp, #20
   22cf4:	9001      	str	r0, [sp, #4]
   22cf6:	9100      	str	r1, [sp, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   22cf8:	4b1f      	ldr	r3, [pc, #124]	; (22d78 <vTaskRemoveFromUnorderedEventList+0x88>)
   22cfa:	681b      	ldr	r3, [r3, #0]
   22cfc:	2b00      	cmp	r3, #0
   22cfe:	d100      	bne.n	22d02 <vTaskRemoveFromUnorderedEventList+0x12>
   22d00:	e7fe      	b.n	22d00 <vTaskRemoveFromUnorderedEventList+0x10>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   22d02:	9b00      	ldr	r3, [sp, #0]
   22d04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   22d08:	9b01      	ldr	r3, [sp, #4]
   22d0a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22d0c:	9b01      	ldr	r3, [sp, #4]
   22d0e:	68db      	ldr	r3, [r3, #12]
   22d10:	9303      	str	r3, [sp, #12]
	configASSERT( pxUnblockedTCB );
   22d12:	9b03      	ldr	r3, [sp, #12]
   22d14:	2b00      	cmp	r3, #0
   22d16:	d100      	bne.n	22d1a <vTaskRemoveFromUnorderedEventList+0x2a>
   22d18:	e7fe      	b.n	22d18 <vTaskRemoveFromUnorderedEventList+0x28>
	( void ) uxListRemove( pxEventListItem );
   22d1a:	9801      	ldr	r0, [sp, #4]
   22d1c:	f7fe ff3d 	bl	21b9a <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   22d20:	9b03      	ldr	r3, [sp, #12]
   22d22:	3304      	adds	r3, #4
   22d24:	4618      	mov	r0, r3
   22d26:	f7fe ff38 	bl	21b9a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   22d2a:	9b03      	ldr	r3, [sp, #12]
   22d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22d2e:	4b13      	ldr	r3, [pc, #76]	; (22d7c <vTaskRemoveFromUnorderedEventList+0x8c>)
   22d30:	681b      	ldr	r3, [r3, #0]
   22d32:	429a      	cmp	r2, r3
   22d34:	d903      	bls.n	22d3e <vTaskRemoveFromUnorderedEventList+0x4e>
   22d36:	9b03      	ldr	r3, [sp, #12]
   22d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22d3a:	4a10      	ldr	r2, [pc, #64]	; (22d7c <vTaskRemoveFromUnorderedEventList+0x8c>)
   22d3c:	6013      	str	r3, [r2, #0]
   22d3e:	9b03      	ldr	r3, [sp, #12]
   22d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22d42:	4613      	mov	r3, r2
   22d44:	009b      	lsls	r3, r3, #2
   22d46:	4413      	add	r3, r2
   22d48:	009b      	lsls	r3, r3, #2
   22d4a:	4a0d      	ldr	r2, [pc, #52]	; (22d80 <vTaskRemoveFromUnorderedEventList+0x90>)
   22d4c:	441a      	add	r2, r3
   22d4e:	9b03      	ldr	r3, [sp, #12]
   22d50:	3304      	adds	r3, #4
   22d52:	4619      	mov	r1, r3
   22d54:	4610      	mov	r0, r2
   22d56:	f7fe fecd 	bl	21af4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   22d5a:	9b03      	ldr	r3, [sp, #12]
   22d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22d5e:	4b09      	ldr	r3, [pc, #36]	; (22d84 <vTaskRemoveFromUnorderedEventList+0x94>)
   22d60:	681b      	ldr	r3, [r3, #0]
   22d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22d64:	429a      	cmp	r2, r3
   22d66:	d902      	bls.n	22d6e <vTaskRemoveFromUnorderedEventList+0x7e>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
   22d68:	4b07      	ldr	r3, [pc, #28]	; (22d88 <vTaskRemoveFromUnorderedEventList+0x98>)
   22d6a:	2201      	movs	r2, #1
   22d6c:	601a      	str	r2, [r3, #0]
	}
}
   22d6e:	bf00      	nop
   22d70:	b005      	add	sp, #20
   22d72:	f85d fb04 	ldr.w	pc, [sp], #4
   22d76:	bf00      	nop
   22d78:	10008730 	.word	0x10008730
   22d7c:	10008710 	.word	0x10008710
   22d80:	10008660 	.word	0x10008660
   22d84:	1000865c 	.word	0x1000865c
   22d88:	1000871c 	.word	0x1000871c

00022d8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   22d8c:	b082      	sub	sp, #8
   22d8e:	9001      	str	r0, [sp, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   22d90:	4b05      	ldr	r3, [pc, #20]	; (22da8 <vTaskInternalSetTimeOutState+0x1c>)
   22d92:	681a      	ldr	r2, [r3, #0]
   22d94:	9b01      	ldr	r3, [sp, #4]
   22d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   22d98:	4b04      	ldr	r3, [pc, #16]	; (22dac <vTaskInternalSetTimeOutState+0x20>)
   22d9a:	681a      	ldr	r2, [r3, #0]
   22d9c:	9b01      	ldr	r3, [sp, #4]
   22d9e:	605a      	str	r2, [r3, #4]
}
   22da0:	bf00      	nop
   22da2:	b002      	add	sp, #8
   22da4:	4770      	bx	lr
   22da6:	bf00      	nop
   22da8:	10008720 	.word	0x10008720
   22dac:	1000870c 	.word	0x1000870c

00022db0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   22db0:	b500      	push	{lr}
   22db2:	b087      	sub	sp, #28
   22db4:	9001      	str	r0, [sp, #4]
   22db6:	9100      	str	r1, [sp, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   22db8:	9b01      	ldr	r3, [sp, #4]
   22dba:	2b00      	cmp	r3, #0
   22dbc:	d100      	bne.n	22dc0 <xTaskCheckForTimeOut+0x10>
   22dbe:	e7fe      	b.n	22dbe <xTaskCheckForTimeOut+0xe>
	configASSERT( pxTicksToWait );
   22dc0:	9b00      	ldr	r3, [sp, #0]
   22dc2:	2b00      	cmp	r3, #0
   22dc4:	d100      	bne.n	22dc8 <xTaskCheckForTimeOut+0x18>
   22dc6:	e7fe      	b.n	22dc6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   22dc8:	f7f4 ffc2 	bl	17d50 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   22dcc:	4b1d      	ldr	r3, [pc, #116]	; (22e44 <xTaskCheckForTimeOut+0x94>)
   22dce:	681b      	ldr	r3, [r3, #0]
   22dd0:	9304      	str	r3, [sp, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   22dd2:	9b01      	ldr	r3, [sp, #4]
   22dd4:	685b      	ldr	r3, [r3, #4]
   22dd6:	9a04      	ldr	r2, [sp, #16]
   22dd8:	1ad3      	subs	r3, r2, r3
   22dda:	9303      	str	r3, [sp, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   22ddc:	9b00      	ldr	r3, [sp, #0]
   22dde:	681b      	ldr	r3, [r3, #0]
   22de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22de4:	d102      	bne.n	22dec <xTaskCheckForTimeOut+0x3c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   22de6:	2300      	movs	r3, #0
   22de8:	9305      	str	r3, [sp, #20]
   22dea:	e023      	b.n	22e34 <xTaskCheckForTimeOut+0x84>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   22dec:	9b01      	ldr	r3, [sp, #4]
   22dee:	681a      	ldr	r2, [r3, #0]
   22df0:	4b15      	ldr	r3, [pc, #84]	; (22e48 <xTaskCheckForTimeOut+0x98>)
   22df2:	681b      	ldr	r3, [r3, #0]
   22df4:	429a      	cmp	r2, r3
   22df6:	d007      	beq.n	22e08 <xTaskCheckForTimeOut+0x58>
   22df8:	9b01      	ldr	r3, [sp, #4]
   22dfa:	685a      	ldr	r2, [r3, #4]
   22dfc:	9b04      	ldr	r3, [sp, #16]
   22dfe:	429a      	cmp	r2, r3
   22e00:	d802      	bhi.n	22e08 <xTaskCheckForTimeOut+0x58>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   22e02:	2301      	movs	r3, #1
   22e04:	9305      	str	r3, [sp, #20]
   22e06:	e015      	b.n	22e34 <xTaskCheckForTimeOut+0x84>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   22e08:	9b00      	ldr	r3, [sp, #0]
   22e0a:	681a      	ldr	r2, [r3, #0]
   22e0c:	9b03      	ldr	r3, [sp, #12]
   22e0e:	429a      	cmp	r2, r3
   22e10:	d90b      	bls.n	22e2a <xTaskCheckForTimeOut+0x7a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   22e12:	9b00      	ldr	r3, [sp, #0]
   22e14:	681a      	ldr	r2, [r3, #0]
   22e16:	9b03      	ldr	r3, [sp, #12]
   22e18:	1ad2      	subs	r2, r2, r3
   22e1a:	9b00      	ldr	r3, [sp, #0]
   22e1c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   22e1e:	9801      	ldr	r0, [sp, #4]
   22e20:	f7ff ffb4 	bl	22d8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
   22e24:	2300      	movs	r3, #0
   22e26:	9305      	str	r3, [sp, #20]
   22e28:	e004      	b.n	22e34 <xTaskCheckForTimeOut+0x84>
		}
		else
		{
			*pxTicksToWait = 0;
   22e2a:	9b00      	ldr	r3, [sp, #0]
   22e2c:	2200      	movs	r2, #0
   22e2e:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   22e30:	2301      	movs	r3, #1
   22e32:	9305      	str	r3, [sp, #20]
		}
	}
	taskEXIT_CRITICAL();
   22e34:	f7f4 ffac 	bl	17d90 <vPortExitCritical>

	return xReturn;
   22e38:	9b05      	ldr	r3, [sp, #20]
}
   22e3a:	4618      	mov	r0, r3
   22e3c:	b007      	add	sp, #28
   22e3e:	f85d fb04 	ldr.w	pc, [sp], #4
   22e42:	bf00      	nop
   22e44:	1000870c 	.word	0x1000870c
   22e48:	10008720 	.word	0x10008720

00022e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
   22e4c:	4b02      	ldr	r3, [pc, #8]	; (22e58 <vTaskMissedYield+0xc>)
   22e4e:	2201      	movs	r2, #1
   22e50:	601a      	str	r2, [r3, #0]
}
   22e52:	bf00      	nop
   22e54:	4770      	bx	lr
   22e56:	bf00      	nop
   22e58:	1000871c 	.word	0x1000871c

00022e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   22e5c:	b500      	push	{lr}
   22e5e:	b085      	sub	sp, #20
   22e60:	9001      	str	r0, [sp, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   22e62:	f000 f897 	bl	22f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   22e66:	4b13      	ldr	r3, [pc, #76]	; (22eb4 <prvIdleTask+0x58>)
   22e68:	681b      	ldr	r3, [r3, #0]
   22e6a:	2b01      	cmp	r3, #1
   22e6c:	d907      	bls.n	22e7e <prvIdleTask+0x22>
			{
				taskYIELD();
   22e6e:	4b12      	ldr	r3, [pc, #72]	; (22eb8 <prvIdleTask+0x5c>)
   22e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22e74:	601a      	str	r2, [r3, #0]
   22e76:	f3bf 8f4f 	dsb	sy
   22e7a:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   22e7e:	f7ff fc7f 	bl	22780 <prvGetExpectedIdleTime>
   22e82:	9003      	str	r0, [sp, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   22e84:	9b03      	ldr	r3, [sp, #12]
   22e86:	2b01      	cmp	r3, #1
   22e88:	d9eb      	bls.n	22e62 <prvIdleTask+0x6>
			{
				vTaskSuspendAll();
   22e8a:	f7ff fc6f 	bl	2276c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   22e8e:	4b0b      	ldr	r3, [pc, #44]	; (22ebc <prvIdleTask+0x60>)
   22e90:	681a      	ldr	r2, [r3, #0]
   22e92:	4b0b      	ldr	r3, [pc, #44]	; (22ec0 <prvIdleTask+0x64>)
   22e94:	681b      	ldr	r3, [r3, #0]
   22e96:	429a      	cmp	r2, r3
   22e98:	d200      	bcs.n	22e9c <prvIdleTask+0x40>
   22e9a:	e7fe      	b.n	22e9a <prvIdleTask+0x3e>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   22e9c:	f7ff fc70 	bl	22780 <prvGetExpectedIdleTime>
   22ea0:	9003      	str	r0, [sp, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   22ea2:	9b03      	ldr	r3, [sp, #12]
   22ea4:	2b01      	cmp	r3, #1
   22ea6:	d902      	bls.n	22eae <prvIdleTask+0x52>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   22ea8:	9803      	ldr	r0, [sp, #12]
   22eaa:	f7f5 f817 	bl	17edc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   22eae:	f7ff fc99 	bl	227e4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
   22eb2:	e7d6      	b.n	22e62 <prvIdleTask+0x6>
   22eb4:	10008660 	.word	0x10008660
   22eb8:	e000ed04 	.word	0xe000ed04
   22ebc:	10008728 	.word	0x10008728
   22ec0:	1000870c 	.word	0x1000870c

00022ec4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   22ec4:	b082      	sub	sp, #8
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   22ec6:	2301      	movs	r3, #1
   22ec8:	9300      	str	r3, [sp, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   22eca:	2301      	movs	r3, #1
   22ecc:	f88d 3007 	strb.w	r3, [sp, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   22ed0:	4b0f      	ldr	r3, [pc, #60]	; (22f10 <eTaskConfirmSleepModeStatus+0x4c>)
   22ed2:	681b      	ldr	r3, [r3, #0]
   22ed4:	2b00      	cmp	r3, #0
   22ed6:	d003      	beq.n	22ee0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   22ed8:	2300      	movs	r3, #0
   22eda:	f88d 3007 	strb.w	r3, [sp, #7]
   22ede:	e012      	b.n	22f06 <eTaskConfirmSleepModeStatus+0x42>
		}
		else if( xYieldPending != pdFALSE )
   22ee0:	4b0c      	ldr	r3, [pc, #48]	; (22f14 <eTaskConfirmSleepModeStatus+0x50>)
   22ee2:	681b      	ldr	r3, [r3, #0]
   22ee4:	2b00      	cmp	r3, #0
   22ee6:	d003      	beq.n	22ef0 <eTaskConfirmSleepModeStatus+0x2c>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   22ee8:	2300      	movs	r3, #0
   22eea:	f88d 3007 	strb.w	r3, [sp, #7]
   22eee:	e00a      	b.n	22f06 <eTaskConfirmSleepModeStatus+0x42>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   22ef0:	4b09      	ldr	r3, [pc, #36]	; (22f18 <eTaskConfirmSleepModeStatus+0x54>)
   22ef2:	681a      	ldr	r2, [r3, #0]
   22ef4:	4b09      	ldr	r3, [pc, #36]	; (22f1c <eTaskConfirmSleepModeStatus+0x58>)
   22ef6:	6819      	ldr	r1, [r3, #0]
   22ef8:	9b00      	ldr	r3, [sp, #0]
   22efa:	1acb      	subs	r3, r1, r3
   22efc:	429a      	cmp	r2, r3
   22efe:	d102      	bne.n	22f06 <eTaskConfirmSleepModeStatus+0x42>
			{
				eReturn = eNoTasksWaitingTimeout;
   22f00:	2302      	movs	r3, #2
   22f02:	f88d 3007 	strb.w	r3, [sp, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   22f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
	}
   22f0a:	4618      	mov	r0, r3
   22f0c:	b002      	add	sp, #8
   22f0e:	4770      	bx	lr
   22f10:	100086e0 	.word	0x100086e0
   22f14:	1000871c 	.word	0x1000871c
   22f18:	100086f4 	.word	0x100086f4
   22f1c:	10008708 	.word	0x10008708

00022f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   22f20:	b500      	push	{lr}
   22f22:	b083      	sub	sp, #12
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   22f24:	2300      	movs	r3, #0
   22f26:	9301      	str	r3, [sp, #4]
   22f28:	e00c      	b.n	22f44 <prvInitialiseTaskLists+0x24>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   22f2a:	9a01      	ldr	r2, [sp, #4]
   22f2c:	4613      	mov	r3, r2
   22f2e:	009b      	lsls	r3, r3, #2
   22f30:	4413      	add	r3, r2
   22f32:	009b      	lsls	r3, r3, #2
   22f34:	4a10      	ldr	r2, [pc, #64]	; (22f78 <prvInitialiseTaskLists+0x58>)
   22f36:	4413      	add	r3, r2
   22f38:	4618      	mov	r0, r3
   22f3a:	f7fe fdb8 	bl	21aae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   22f3e:	9b01      	ldr	r3, [sp, #4]
   22f40:	3301      	adds	r3, #1
   22f42:	9301      	str	r3, [sp, #4]
   22f44:	9b01      	ldr	r3, [sp, #4]
   22f46:	2b03      	cmp	r3, #3
   22f48:	d9ef      	bls.n	22f2a <prvInitialiseTaskLists+0xa>
	}

	vListInitialise( &xDelayedTaskList1 );
   22f4a:	480c      	ldr	r0, [pc, #48]	; (22f7c <prvInitialiseTaskLists+0x5c>)
   22f4c:	f7fe fdaf 	bl	21aae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   22f50:	480b      	ldr	r0, [pc, #44]	; (22f80 <prvInitialiseTaskLists+0x60>)
   22f52:	f7fe fdac 	bl	21aae <vListInitialise>
	vListInitialise( &xPendingReadyList );
   22f56:	480b      	ldr	r0, [pc, #44]	; (22f84 <prvInitialiseTaskLists+0x64>)
   22f58:	f7fe fda9 	bl	21aae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   22f5c:	480a      	ldr	r0, [pc, #40]	; (22f88 <prvInitialiseTaskLists+0x68>)
   22f5e:	f7fe fda6 	bl	21aae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   22f62:	4b0a      	ldr	r3, [pc, #40]	; (22f8c <prvInitialiseTaskLists+0x6c>)
   22f64:	4a05      	ldr	r2, [pc, #20]	; (22f7c <prvInitialiseTaskLists+0x5c>)
   22f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   22f68:	4b09      	ldr	r3, [pc, #36]	; (22f90 <prvInitialiseTaskLists+0x70>)
   22f6a:	4a05      	ldr	r2, [pc, #20]	; (22f80 <prvInitialiseTaskLists+0x60>)
   22f6c:	601a      	str	r2, [r3, #0]
}
   22f6e:	bf00      	nop
   22f70:	b003      	add	sp, #12
   22f72:	f85d fb04 	ldr.w	pc, [sp], #4
   22f76:	bf00      	nop
   22f78:	10008660 	.word	0x10008660
   22f7c:	100086b0 	.word	0x100086b0
   22f80:	100086c4 	.word	0x100086c4
   22f84:	100086e0 	.word	0x100086e0
   22f88:	100086f4 	.word	0x100086f4
   22f8c:	100086d8 	.word	0x100086d8
   22f90:	100086dc 	.word	0x100086dc

00022f94 <prvCheckTasksWaitingTermination>:

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   22f94:	bf00      	nop
   22f96:	4770      	bx	lr

00022f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   22f98:	b082      	sub	sp, #8
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22f9a:	4b0b      	ldr	r3, [pc, #44]	; (22fc8 <prvResetNextTaskUnblockTime+0x30>)
   22f9c:	681b      	ldr	r3, [r3, #0]
   22f9e:	681b      	ldr	r3, [r3, #0]
   22fa0:	2b00      	cmp	r3, #0
   22fa2:	d104      	bne.n	22fae <prvResetNextTaskUnblockTime+0x16>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   22fa4:	4b09      	ldr	r3, [pc, #36]	; (22fcc <prvResetNextTaskUnblockTime+0x34>)
   22fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22faa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   22fac:	e008      	b.n	22fc0 <prvResetNextTaskUnblockTime+0x28>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22fae:	4b06      	ldr	r3, [pc, #24]	; (22fc8 <prvResetNextTaskUnblockTime+0x30>)
   22fb0:	681b      	ldr	r3, [r3, #0]
   22fb2:	68db      	ldr	r3, [r3, #12]
   22fb4:	68db      	ldr	r3, [r3, #12]
   22fb6:	9301      	str	r3, [sp, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   22fb8:	9b01      	ldr	r3, [sp, #4]
   22fba:	685b      	ldr	r3, [r3, #4]
   22fbc:	4a03      	ldr	r2, [pc, #12]	; (22fcc <prvResetNextTaskUnblockTime+0x34>)
   22fbe:	6013      	str	r3, [r2, #0]
}
   22fc0:	bf00      	nop
   22fc2:	b002      	add	sp, #8
   22fc4:	4770      	bx	lr
   22fc6:	bf00      	nop
   22fc8:	100086d8 	.word	0x100086d8
   22fcc:	10008728 	.word	0x10008728

00022fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   22fd0:	b082      	sub	sp, #8
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   22fd2:	4b0a      	ldr	r3, [pc, #40]	; (22ffc <xTaskGetSchedulerState+0x2c>)
   22fd4:	681b      	ldr	r3, [r3, #0]
   22fd6:	2b00      	cmp	r3, #0
   22fd8:	d102      	bne.n	22fe0 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   22fda:	2301      	movs	r3, #1
   22fdc:	9301      	str	r3, [sp, #4]
   22fde:	e008      	b.n	22ff2 <xTaskGetSchedulerState+0x22>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22fe0:	4b07      	ldr	r3, [pc, #28]	; (23000 <xTaskGetSchedulerState+0x30>)
   22fe2:	681b      	ldr	r3, [r3, #0]
   22fe4:	2b00      	cmp	r3, #0
   22fe6:	d102      	bne.n	22fee <xTaskGetSchedulerState+0x1e>
			{
				xReturn = taskSCHEDULER_RUNNING;
   22fe8:	2302      	movs	r3, #2
   22fea:	9301      	str	r3, [sp, #4]
   22fec:	e001      	b.n	22ff2 <xTaskGetSchedulerState+0x22>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   22fee:	2300      	movs	r3, #0
   22ff0:	9301      	str	r3, [sp, #4]
			}
		}

		return xReturn;
   22ff2:	9b01      	ldr	r3, [sp, #4]
	}
   22ff4:	4618      	mov	r0, r3
   22ff6:	b002      	add	sp, #8
   22ff8:	4770      	bx	lr
   22ffa:	bf00      	nop
   22ffc:	10008714 	.word	0x10008714
   23000:	10008730 	.word	0x10008730

00023004 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   23004:	b082      	sub	sp, #8
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   23006:	4b08      	ldr	r3, [pc, #32]	; (23028 <uxTaskResetEventItemValue+0x24>)
   23008:	681b      	ldr	r3, [r3, #0]
   2300a:	699b      	ldr	r3, [r3, #24]
   2300c:	9301      	str	r3, [sp, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2300e:	4b06      	ldr	r3, [pc, #24]	; (23028 <uxTaskResetEventItemValue+0x24>)
   23010:	681b      	ldr	r3, [r3, #0]
   23012:	4a05      	ldr	r2, [pc, #20]	; (23028 <uxTaskResetEventItemValue+0x24>)
   23014:	6812      	ldr	r2, [r2, #0]
   23016:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   23018:	f1c2 0204 	rsb	r2, r2, #4
   2301c:	619a      	str	r2, [r3, #24]

	return uxReturn;
   2301e:	9b01      	ldr	r3, [sp, #4]
}
   23020:	4618      	mov	r0, r3
   23022:	b002      	add	sp, #8
   23024:	4770      	bx	lr
   23026:	bf00      	nop
   23028:	1000865c 	.word	0x1000865c

0002302c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   2302c:	b500      	push	{lr}
   2302e:	b085      	sub	sp, #20
   23030:	9001      	str	r0, [sp, #4]
   23032:	9100      	str	r1, [sp, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   23034:	4b21      	ldr	r3, [pc, #132]	; (230bc <prvAddCurrentTaskToDelayedList+0x90>)
   23036:	681b      	ldr	r3, [r3, #0]
   23038:	9303      	str	r3, [sp, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2303a:	4b21      	ldr	r3, [pc, #132]	; (230c0 <prvAddCurrentTaskToDelayedList+0x94>)
   2303c:	681b      	ldr	r3, [r3, #0]
   2303e:	3304      	adds	r3, #4
   23040:	4618      	mov	r0, r3
   23042:	f7fe fdaa 	bl	21b9a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   23046:	9b01      	ldr	r3, [sp, #4]
   23048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2304c:	d10a      	bne.n	23064 <prvAddCurrentTaskToDelayedList+0x38>
   2304e:	9b00      	ldr	r3, [sp, #0]
   23050:	2b00      	cmp	r3, #0
   23052:	d007      	beq.n	23064 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   23054:	4b1a      	ldr	r3, [pc, #104]	; (230c0 <prvAddCurrentTaskToDelayedList+0x94>)
   23056:	681b      	ldr	r3, [r3, #0]
   23058:	3304      	adds	r3, #4
   2305a:	4619      	mov	r1, r3
   2305c:	4819      	ldr	r0, [pc, #100]	; (230c4 <prvAddCurrentTaskToDelayedList+0x98>)
   2305e:	f7fe fd49 	bl	21af4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   23062:	e026      	b.n	230b2 <prvAddCurrentTaskToDelayedList+0x86>
			xTimeToWake = xConstTickCount + xTicksToWait;
   23064:	9a03      	ldr	r2, [sp, #12]
   23066:	9b01      	ldr	r3, [sp, #4]
   23068:	4413      	add	r3, r2
   2306a:	9302      	str	r3, [sp, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   2306c:	4b14      	ldr	r3, [pc, #80]	; (230c0 <prvAddCurrentTaskToDelayedList+0x94>)
   2306e:	681b      	ldr	r3, [r3, #0]
   23070:	9a02      	ldr	r2, [sp, #8]
   23072:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   23074:	9a02      	ldr	r2, [sp, #8]
   23076:	9b03      	ldr	r3, [sp, #12]
   23078:	429a      	cmp	r2, r3
   2307a:	d209      	bcs.n	23090 <prvAddCurrentTaskToDelayedList+0x64>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   2307c:	4b12      	ldr	r3, [pc, #72]	; (230c8 <prvAddCurrentTaskToDelayedList+0x9c>)
   2307e:	681a      	ldr	r2, [r3, #0]
   23080:	4b0f      	ldr	r3, [pc, #60]	; (230c0 <prvAddCurrentTaskToDelayedList+0x94>)
   23082:	681b      	ldr	r3, [r3, #0]
   23084:	3304      	adds	r3, #4
   23086:	4619      	mov	r1, r3
   23088:	4610      	mov	r0, r2
   2308a:	f7fe fd52 	bl	21b32 <vListInsert>
}
   2308e:	e010      	b.n	230b2 <prvAddCurrentTaskToDelayedList+0x86>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   23090:	4b0e      	ldr	r3, [pc, #56]	; (230cc <prvAddCurrentTaskToDelayedList+0xa0>)
   23092:	681a      	ldr	r2, [r3, #0]
   23094:	4b0a      	ldr	r3, [pc, #40]	; (230c0 <prvAddCurrentTaskToDelayedList+0x94>)
   23096:	681b      	ldr	r3, [r3, #0]
   23098:	3304      	adds	r3, #4
   2309a:	4619      	mov	r1, r3
   2309c:	4610      	mov	r0, r2
   2309e:	f7fe fd48 	bl	21b32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   230a2:	4b0b      	ldr	r3, [pc, #44]	; (230d0 <prvAddCurrentTaskToDelayedList+0xa4>)
   230a4:	681b      	ldr	r3, [r3, #0]
   230a6:	9a02      	ldr	r2, [sp, #8]
   230a8:	429a      	cmp	r2, r3
   230aa:	d202      	bcs.n	230b2 <prvAddCurrentTaskToDelayedList+0x86>
					xNextTaskUnblockTime = xTimeToWake;
   230ac:	4a08      	ldr	r2, [pc, #32]	; (230d0 <prvAddCurrentTaskToDelayedList+0xa4>)
   230ae:	9b02      	ldr	r3, [sp, #8]
   230b0:	6013      	str	r3, [r2, #0]
}
   230b2:	bf00      	nop
   230b4:	b005      	add	sp, #20
   230b6:	f85d fb04 	ldr.w	pc, [sp], #4
   230ba:	bf00      	nop
   230bc:	1000870c 	.word	0x1000870c
   230c0:	1000865c 	.word	0x1000865c
   230c4:	100086f4 	.word	0x100086f4
   230c8:	100086dc 	.word	0x100086dc
   230cc:	100086d8 	.word	0x100086d8
   230d0:	10008728 	.word	0x10008728

000230d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   230d4:	b500      	push	{lr}
   230d6:	b085      	sub	sp, #20
BaseType_t xReturn = pdFAIL;
   230d8:	2300      	movs	r3, #0
   230da:	9303      	str	r3, [sp, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   230dc:	f000 fa9a 	bl	23614 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   230e0:	4b0c      	ldr	r3, [pc, #48]	; (23114 <xTimerCreateTimerTask+0x40>)
   230e2:	681b      	ldr	r3, [r3, #0]
   230e4:	2b00      	cmp	r3, #0
   230e6:	d00b      	beq.n	23100 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   230e8:	4b0b      	ldr	r3, [pc, #44]	; (23118 <xTimerCreateTimerTask+0x44>)
   230ea:	9301      	str	r3, [sp, #4]
   230ec:	2303      	movs	r3, #3
   230ee:	9300      	str	r3, [sp, #0]
   230f0:	2300      	movs	r3, #0
   230f2:	f44f 7280 	mov.w	r2, #256	; 0x100
   230f6:	4909      	ldr	r1, [pc, #36]	; (2311c <xTimerCreateTimerTask+0x48>)
   230f8:	4809      	ldr	r0, [pc, #36]	; (23120 <xTimerCreateTimerTask+0x4c>)
   230fa:	f7ff f963 	bl	223c4 <xTaskCreate>
   230fe:	9003      	str	r0, [sp, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   23100:	9b03      	ldr	r3, [sp, #12]
   23102:	2b00      	cmp	r3, #0
   23104:	d100      	bne.n	23108 <xTimerCreateTimerTask+0x34>
   23106:	e7fe      	b.n	23106 <xTimerCreateTimerTask+0x32>
	return xReturn;
   23108:	9b03      	ldr	r3, [sp, #12]
}
   2310a:	4618      	mov	r0, r3
   2310c:	b005      	add	sp, #20
   2310e:	f85d fb04 	ldr.w	pc, [sp], #4
   23112:	bf00      	nop
   23114:	10008764 	.word	0x10008764
   23118:	10008768 	.word	0x10008768
   2311c:	00029140 	.word	0x00029140
   23120:	00023299 	.word	0x00023299

00023124 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   23124:	b500      	push	{lr}
   23126:	b089      	sub	sp, #36	; 0x24
   23128:	9005      	str	r0, [sp, #20]
   2312a:	9104      	str	r1, [sp, #16]
   2312c:	9203      	str	r2, [sp, #12]
   2312e:	9302      	str	r3, [sp, #8]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   23130:	2028      	movs	r0, #40	; 0x28
   23132:	f7fe fa73 	bl	2161c <pvPortMalloc>
   23136:	9007      	str	r0, [sp, #28]

		if( pxNewTimer != NULL )
   23138:	9b07      	ldr	r3, [sp, #28]
   2313a:	2b00      	cmp	r3, #0
   2313c:	d009      	beq.n	23152 <xTimerCreate+0x2e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   2313e:	9b07      	ldr	r3, [sp, #28]
   23140:	9301      	str	r3, [sp, #4]
   23142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23144:	9300      	str	r3, [sp, #0]
   23146:	9b02      	ldr	r3, [sp, #8]
   23148:	9a03      	ldr	r2, [sp, #12]
   2314a:	9904      	ldr	r1, [sp, #16]
   2314c:	9805      	ldr	r0, [sp, #20]
   2314e:	f000 f805 	bl	2315c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   23152:	9b07      	ldr	r3, [sp, #28]
	}
   23154:	4618      	mov	r0, r3
   23156:	b009      	add	sp, #36	; 0x24
   23158:	f85d fb04 	ldr.w	pc, [sp], #4

0002315c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   2315c:	b500      	push	{lr}
   2315e:	b085      	sub	sp, #20
   23160:	9003      	str	r0, [sp, #12]
   23162:	9102      	str	r1, [sp, #8]
   23164:	9201      	str	r2, [sp, #4]
   23166:	9300      	str	r3, [sp, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   23168:	9b02      	ldr	r3, [sp, #8]
   2316a:	2b00      	cmp	r3, #0
   2316c:	d100      	bne.n	23170 <prvInitialiseNewTimer+0x14>
   2316e:	e7fe      	b.n	2316e <prvInitialiseNewTimer+0x12>

	if( pxNewTimer != NULL )
   23170:	9b07      	ldr	r3, [sp, #28]
   23172:	2b00      	cmp	r3, #0
   23174:	d015      	beq.n	231a2 <prvInitialiseNewTimer+0x46>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   23176:	f000 fa4d 	bl	23614 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   2317a:	9b07      	ldr	r3, [sp, #28]
   2317c:	9a03      	ldr	r2, [sp, #12]
   2317e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   23180:	9b07      	ldr	r3, [sp, #28]
   23182:	9a02      	ldr	r2, [sp, #8]
   23184:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   23186:	9b07      	ldr	r3, [sp, #28]
   23188:	9a01      	ldr	r2, [sp, #4]
   2318a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   2318c:	9b07      	ldr	r3, [sp, #28]
   2318e:	9a00      	ldr	r2, [sp, #0]
   23190:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   23192:	9b07      	ldr	r3, [sp, #28]
   23194:	9a06      	ldr	r2, [sp, #24]
   23196:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   23198:	9b07      	ldr	r3, [sp, #28]
   2319a:	3304      	adds	r3, #4
   2319c:	4618      	mov	r0, r3
   2319e:	f7fe fca1 	bl	21ae4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   231a2:	bf00      	nop
   231a4:	b005      	add	sp, #20
   231a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000231ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   231ac:	b500      	push	{lr}
   231ae:	b08b      	sub	sp, #44	; 0x2c
   231b0:	9003      	str	r0, [sp, #12]
   231b2:	9102      	str	r1, [sp, #8]
   231b4:	9201      	str	r2, [sp, #4]
   231b6:	9300      	str	r3, [sp, #0]
BaseType_t xReturn = pdFAIL;
   231b8:	2300      	movs	r3, #0
   231ba:	9309      	str	r3, [sp, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   231bc:	9b03      	ldr	r3, [sp, #12]
   231be:	2b00      	cmp	r3, #0
   231c0:	d100      	bne.n	231c4 <xTimerGenericCommand+0x18>
   231c2:	e7fe      	b.n	231c2 <xTimerGenericCommand+0x16>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   231c4:	4b18      	ldr	r3, [pc, #96]	; (23228 <xTimerGenericCommand+0x7c>)
   231c6:	681b      	ldr	r3, [r3, #0]
   231c8:	2b00      	cmp	r3, #0
   231ca:	d027      	beq.n	2321c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   231cc:	9b02      	ldr	r3, [sp, #8]
   231ce:	9305      	str	r3, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   231d0:	9b01      	ldr	r3, [sp, #4]
   231d2:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   231d4:	9b03      	ldr	r3, [sp, #12]
   231d6:	9307      	str	r3, [sp, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   231d8:	9b02      	ldr	r3, [sp, #8]
   231da:	2b05      	cmp	r3, #5
   231dc:	dc16      	bgt.n	2320c <xTimerGenericCommand+0x60>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   231de:	f7ff fef7 	bl	22fd0 <xTaskGetSchedulerState>
   231e2:	4603      	mov	r3, r0
   231e4:	2b02      	cmp	r3, #2
   231e6:	d108      	bne.n	231fa <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   231e8:	4b0f      	ldr	r3, [pc, #60]	; (23228 <xTimerGenericCommand+0x7c>)
   231ea:	6818      	ldr	r0, [r3, #0]
   231ec:	a905      	add	r1, sp, #20
   231ee:	2300      	movs	r3, #0
   231f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   231f2:	f7fe fda7 	bl	21d44 <xQueueGenericSend>
   231f6:	9009      	str	r0, [sp, #36]	; 0x24
   231f8:	e010      	b.n	2321c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   231fa:	4b0b      	ldr	r3, [pc, #44]	; (23228 <xTimerGenericCommand+0x7c>)
   231fc:	6818      	ldr	r0, [r3, #0]
   231fe:	a905      	add	r1, sp, #20
   23200:	2300      	movs	r3, #0
   23202:	2200      	movs	r2, #0
   23204:	f7fe fd9e 	bl	21d44 <xQueueGenericSend>
   23208:	9009      	str	r0, [sp, #36]	; 0x24
   2320a:	e007      	b.n	2321c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   2320c:	4b06      	ldr	r3, [pc, #24]	; (23228 <xTimerGenericCommand+0x7c>)
   2320e:	6818      	ldr	r0, [r3, #0]
   23210:	a905      	add	r1, sp, #20
   23212:	2300      	movs	r3, #0
   23214:	9a00      	ldr	r2, [sp, #0]
   23216:	f7fe fe69 	bl	21eec <xQueueGenericSendFromISR>
   2321a:	9009      	str	r0, [sp, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   2321c:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
   2321e:	4618      	mov	r0, r3
   23220:	b00b      	add	sp, #44	; 0x2c
   23222:	f85d fb04 	ldr.w	pc, [sp], #4
   23226:	bf00      	nop
   23228:	10008764 	.word	0x10008764

0002322c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   2322c:	b500      	push	{lr}
   2322e:	b087      	sub	sp, #28
   23230:	9003      	str	r0, [sp, #12]
   23232:	9102      	str	r1, [sp, #8]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   23234:	4b17      	ldr	r3, [pc, #92]	; (23294 <prvProcessExpiredTimer+0x68>)
   23236:	681b      	ldr	r3, [r3, #0]
   23238:	68db      	ldr	r3, [r3, #12]
   2323a:	68db      	ldr	r3, [r3, #12]
   2323c:	9305      	str	r3, [sp, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   2323e:	9b05      	ldr	r3, [sp, #20]
   23240:	3304      	adds	r3, #4
   23242:	4618      	mov	r0, r3
   23244:	f7fe fca9 	bl	21b9a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   23248:	9b05      	ldr	r3, [sp, #20]
   2324a:	69db      	ldr	r3, [r3, #28]
   2324c:	2b01      	cmp	r3, #1
   2324e:	d118      	bne.n	23282 <prvProcessExpiredTimer+0x56>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   23250:	9b05      	ldr	r3, [sp, #20]
   23252:	699a      	ldr	r2, [r3, #24]
   23254:	9b03      	ldr	r3, [sp, #12]
   23256:	18d1      	adds	r1, r2, r3
   23258:	9b03      	ldr	r3, [sp, #12]
   2325a:	9a02      	ldr	r2, [sp, #8]
   2325c:	9805      	ldr	r0, [sp, #20]
   2325e:	f000 f8b3 	bl	233c8 <prvInsertTimerInActiveList>
   23262:	4603      	mov	r3, r0
   23264:	2b00      	cmp	r3, #0
   23266:	d00c      	beq.n	23282 <prvProcessExpiredTimer+0x56>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   23268:	2300      	movs	r3, #0
   2326a:	9300      	str	r3, [sp, #0]
   2326c:	2300      	movs	r3, #0
   2326e:	9a03      	ldr	r2, [sp, #12]
   23270:	2100      	movs	r1, #0
   23272:	9805      	ldr	r0, [sp, #20]
   23274:	f7ff ff9a 	bl	231ac <xTimerGenericCommand>
   23278:	9004      	str	r0, [sp, #16]
			configASSERT( xResult );
   2327a:	9b04      	ldr	r3, [sp, #16]
   2327c:	2b00      	cmp	r3, #0
   2327e:	d100      	bne.n	23282 <prvProcessExpiredTimer+0x56>
   23280:	e7fe      	b.n	23280 <prvProcessExpiredTimer+0x54>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   23282:	9b05      	ldr	r3, [sp, #20]
   23284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23286:	9805      	ldr	r0, [sp, #20]
   23288:	4798      	blx	r3
}
   2328a:	bf00      	nop
   2328c:	b007      	add	sp, #28
   2328e:	f85d fb04 	ldr.w	pc, [sp], #4
   23292:	bf00      	nop
   23294:	1000875c 	.word	0x1000875c

00023298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   23298:	b500      	push	{lr}
   2329a:	b085      	sub	sp, #20
   2329c:	9001      	str	r0, [sp, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   2329e:	ab02      	add	r3, sp, #8
   232a0:	4618      	mov	r0, r3
   232a2:	f000 f855 	bl	23350 <prvGetNextExpireTime>
   232a6:	9003      	str	r0, [sp, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   232a8:	9b02      	ldr	r3, [sp, #8]
   232aa:	4619      	mov	r1, r3
   232ac:	9803      	ldr	r0, [sp, #12]
   232ae:	f000 f803 	bl	232b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   232b2:	f000 f8cb 	bl	2344c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   232b6:	e7f2      	b.n	2329e <prvTimerTask+0x6>

000232b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   232b8:	b500      	push	{lr}
   232ba:	b085      	sub	sp, #20
   232bc:	9001      	str	r0, [sp, #4]
   232be:	9100      	str	r1, [sp, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   232c0:	f7ff fa54 	bl	2276c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   232c4:	ab02      	add	r3, sp, #8
   232c6:	4618      	mov	r0, r3
   232c8:	f000 f860 	bl	2338c <prvSampleTimeNow>
   232cc:	9003      	str	r0, [sp, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   232ce:	9b02      	ldr	r3, [sp, #8]
   232d0:	2b00      	cmp	r3, #0
   232d2:	d130      	bne.n	23336 <prvProcessTimerOrBlockTask+0x7e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   232d4:	9b00      	ldr	r3, [sp, #0]
   232d6:	2b00      	cmp	r3, #0
   232d8:	d10a      	bne.n	232f0 <prvProcessTimerOrBlockTask+0x38>
   232da:	9a01      	ldr	r2, [sp, #4]
   232dc:	9b03      	ldr	r3, [sp, #12]
   232de:	429a      	cmp	r2, r3
   232e0:	d806      	bhi.n	232f0 <prvProcessTimerOrBlockTask+0x38>
			{
				( void ) xTaskResumeAll();
   232e2:	f7ff fa7f 	bl	227e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   232e6:	9903      	ldr	r1, [sp, #12]
   232e8:	9801      	ldr	r0, [sp, #4]
   232ea:	f7ff ff9f 	bl	2322c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   232ee:	e024      	b.n	2333a <prvProcessTimerOrBlockTask+0x82>
				if( xListWasEmpty != pdFALSE )
   232f0:	9b00      	ldr	r3, [sp, #0]
   232f2:	2b00      	cmp	r3, #0
   232f4:	d008      	beq.n	23308 <prvProcessTimerOrBlockTask+0x50>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   232f6:	4b13      	ldr	r3, [pc, #76]	; (23344 <prvProcessTimerOrBlockTask+0x8c>)
   232f8:	681b      	ldr	r3, [r3, #0]
   232fa:	681b      	ldr	r3, [r3, #0]
   232fc:	2b00      	cmp	r3, #0
   232fe:	d101      	bne.n	23304 <prvProcessTimerOrBlockTask+0x4c>
   23300:	2301      	movs	r3, #1
   23302:	e000      	b.n	23306 <prvProcessTimerOrBlockTask+0x4e>
   23304:	2300      	movs	r3, #0
   23306:	9300      	str	r3, [sp, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   23308:	4b0f      	ldr	r3, [pc, #60]	; (23348 <prvProcessTimerOrBlockTask+0x90>)
   2330a:	6818      	ldr	r0, [r3, #0]
   2330c:	9a01      	ldr	r2, [sp, #4]
   2330e:	9b03      	ldr	r3, [sp, #12]
   23310:	1ad3      	subs	r3, r2, r3
   23312:	9a00      	ldr	r2, [sp, #0]
   23314:	4619      	mov	r1, r3
   23316:	f7ff f822 	bl	2235e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   2331a:	f7ff fa63 	bl	227e4 <xTaskResumeAll>
   2331e:	4603      	mov	r3, r0
   23320:	2b00      	cmp	r3, #0
   23322:	d10a      	bne.n	2333a <prvProcessTimerOrBlockTask+0x82>
					portYIELD_WITHIN_API();
   23324:	4b09      	ldr	r3, [pc, #36]	; (2334c <prvProcessTimerOrBlockTask+0x94>)
   23326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2332a:	601a      	str	r2, [r3, #0]
   2332c:	f3bf 8f4f 	dsb	sy
   23330:	f3bf 8f6f 	isb	sy
}
   23334:	e001      	b.n	2333a <prvProcessTimerOrBlockTask+0x82>
			( void ) xTaskResumeAll();
   23336:	f7ff fa55 	bl	227e4 <xTaskResumeAll>
}
   2333a:	bf00      	nop
   2333c:	b005      	add	sp, #20
   2333e:	f85d fb04 	ldr.w	pc, [sp], #4
   23342:	bf00      	nop
   23344:	10008760 	.word	0x10008760
   23348:	10008764 	.word	0x10008764
   2334c:	e000ed04 	.word	0xe000ed04

00023350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   23350:	b084      	sub	sp, #16
   23352:	9001      	str	r0, [sp, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   23354:	4b0c      	ldr	r3, [pc, #48]	; (23388 <prvGetNextExpireTime+0x38>)
   23356:	681b      	ldr	r3, [r3, #0]
   23358:	681b      	ldr	r3, [r3, #0]
   2335a:	2b00      	cmp	r3, #0
   2335c:	d101      	bne.n	23362 <prvGetNextExpireTime+0x12>
   2335e:	2201      	movs	r2, #1
   23360:	e000      	b.n	23364 <prvGetNextExpireTime+0x14>
   23362:	2200      	movs	r2, #0
   23364:	9b01      	ldr	r3, [sp, #4]
   23366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   23368:	9b01      	ldr	r3, [sp, #4]
   2336a:	681b      	ldr	r3, [r3, #0]
   2336c:	2b00      	cmp	r3, #0
   2336e:	d105      	bne.n	2337c <prvGetNextExpireTime+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   23370:	4b05      	ldr	r3, [pc, #20]	; (23388 <prvGetNextExpireTime+0x38>)
   23372:	681b      	ldr	r3, [r3, #0]
   23374:	68db      	ldr	r3, [r3, #12]
   23376:	681b      	ldr	r3, [r3, #0]
   23378:	9303      	str	r3, [sp, #12]
   2337a:	e001      	b.n	23380 <prvGetNextExpireTime+0x30>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   2337c:	2300      	movs	r3, #0
   2337e:	9303      	str	r3, [sp, #12]
	}

	return xNextExpireTime;
   23380:	9b03      	ldr	r3, [sp, #12]
}
   23382:	4618      	mov	r0, r3
   23384:	b004      	add	sp, #16
   23386:	4770      	bx	lr
   23388:	1000875c 	.word	0x1000875c

0002338c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   2338c:	b500      	push	{lr}
   2338e:	b085      	sub	sp, #20
   23390:	9001      	str	r0, [sp, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   23392:	f7ff fab9 	bl	22908 <xTaskGetTickCount>
   23396:	9003      	str	r0, [sp, #12]

	if( xTimeNow < xLastTime )
   23398:	4b0a      	ldr	r3, [pc, #40]	; (233c4 <prvSampleTimeNow+0x38>)
   2339a:	681b      	ldr	r3, [r3, #0]
   2339c:	9a03      	ldr	r2, [sp, #12]
   2339e:	429a      	cmp	r2, r3
   233a0:	d205      	bcs.n	233ae <prvSampleTimeNow+0x22>
	{
		prvSwitchTimerLists();
   233a2:	f000 f8e1 	bl	23568 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   233a6:	9b01      	ldr	r3, [sp, #4]
   233a8:	2201      	movs	r2, #1
   233aa:	601a      	str	r2, [r3, #0]
   233ac:	e002      	b.n	233b4 <prvSampleTimeNow+0x28>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   233ae:	9b01      	ldr	r3, [sp, #4]
   233b0:	2200      	movs	r2, #0
   233b2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   233b4:	4a03      	ldr	r2, [pc, #12]	; (233c4 <prvSampleTimeNow+0x38>)
   233b6:	9b03      	ldr	r3, [sp, #12]
   233b8:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   233ba:	9b03      	ldr	r3, [sp, #12]
}
   233bc:	4618      	mov	r0, r3
   233be:	b005      	add	sp, #20
   233c0:	f85d fb04 	ldr.w	pc, [sp], #4
   233c4:	1000876c 	.word	0x1000876c

000233c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   233c8:	b500      	push	{lr}
   233ca:	b087      	sub	sp, #28
   233cc:	9003      	str	r0, [sp, #12]
   233ce:	9102      	str	r1, [sp, #8]
   233d0:	9201      	str	r2, [sp, #4]
   233d2:	9300      	str	r3, [sp, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   233d4:	2300      	movs	r3, #0
   233d6:	9305      	str	r3, [sp, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   233d8:	9b03      	ldr	r3, [sp, #12]
   233da:	9a02      	ldr	r2, [sp, #8]
   233dc:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   233de:	9b03      	ldr	r3, [sp, #12]
   233e0:	9a03      	ldr	r2, [sp, #12]
   233e2:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   233e4:	9a02      	ldr	r2, [sp, #8]
   233e6:	9b01      	ldr	r3, [sp, #4]
   233e8:	429a      	cmp	r2, r3
   233ea:	d812      	bhi.n	23412 <prvInsertTimerInActiveList+0x4a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   233ec:	9a01      	ldr	r2, [sp, #4]
   233ee:	9b00      	ldr	r3, [sp, #0]
   233f0:	1ad2      	subs	r2, r2, r3
   233f2:	9b03      	ldr	r3, [sp, #12]
   233f4:	699b      	ldr	r3, [r3, #24]
   233f6:	429a      	cmp	r2, r3
   233f8:	d302      	bcc.n	23400 <prvInsertTimerInActiveList+0x38>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   233fa:	2301      	movs	r3, #1
   233fc:	9305      	str	r3, [sp, #20]
   233fe:	e01b      	b.n	23438 <prvInsertTimerInActiveList+0x70>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   23400:	4b10      	ldr	r3, [pc, #64]	; (23444 <prvInsertTimerInActiveList+0x7c>)
   23402:	681a      	ldr	r2, [r3, #0]
   23404:	9b03      	ldr	r3, [sp, #12]
   23406:	3304      	adds	r3, #4
   23408:	4619      	mov	r1, r3
   2340a:	4610      	mov	r0, r2
   2340c:	f7fe fb91 	bl	21b32 <vListInsert>
   23410:	e012      	b.n	23438 <prvInsertTimerInActiveList+0x70>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   23412:	9a01      	ldr	r2, [sp, #4]
   23414:	9b00      	ldr	r3, [sp, #0]
   23416:	429a      	cmp	r2, r3
   23418:	d206      	bcs.n	23428 <prvInsertTimerInActiveList+0x60>
   2341a:	9a02      	ldr	r2, [sp, #8]
   2341c:	9b00      	ldr	r3, [sp, #0]
   2341e:	429a      	cmp	r2, r3
   23420:	d302      	bcc.n	23428 <prvInsertTimerInActiveList+0x60>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   23422:	2301      	movs	r3, #1
   23424:	9305      	str	r3, [sp, #20]
   23426:	e007      	b.n	23438 <prvInsertTimerInActiveList+0x70>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   23428:	4b07      	ldr	r3, [pc, #28]	; (23448 <prvInsertTimerInActiveList+0x80>)
   2342a:	681a      	ldr	r2, [r3, #0]
   2342c:	9b03      	ldr	r3, [sp, #12]
   2342e:	3304      	adds	r3, #4
   23430:	4619      	mov	r1, r3
   23432:	4610      	mov	r0, r2
   23434:	f7fe fb7d 	bl	21b32 <vListInsert>
		}
	}

	return xProcessTimerNow;
   23438:	9b05      	ldr	r3, [sp, #20]
}
   2343a:	4618      	mov	r0, r3
   2343c:	b007      	add	sp, #28
   2343e:	f85d fb04 	ldr.w	pc, [sp], #4
   23442:	bf00      	nop
   23444:	10008760 	.word	0x10008760
   23448:	1000875c 	.word	0x1000875c

0002344c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   2344c:	b500      	push	{lr}
   2344e:	b08d      	sub	sp, #52	; 0x34
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   23450:	e079      	b.n	23546 <prvProcessReceivedCommands+0xfa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   23452:	9b04      	ldr	r3, [sp, #16]
   23454:	2b00      	cmp	r3, #0
   23456:	da0e      	bge.n	23476 <prvProcessReceivedCommands+0x2a>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   23458:	ab04      	add	r3, sp, #16
   2345a:	3304      	adds	r3, #4
   2345c:	930b      	str	r3, [sp, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   2345e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23460:	2b00      	cmp	r3, #0
   23462:	d100      	bne.n	23466 <prvProcessReceivedCommands+0x1a>
   23464:	e7fe      	b.n	23464 <prvProcessReceivedCommands+0x18>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   23466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23468:	681b      	ldr	r3, [r3, #0]
   2346a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2346c:	6850      	ldr	r0, [r2, #4]
   2346e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23470:	6892      	ldr	r2, [r2, #8]
   23472:	4611      	mov	r1, r2
   23474:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   23476:	9b04      	ldr	r3, [sp, #16]
   23478:	2b00      	cmp	r3, #0
   2347a:	db64      	blt.n	23546 <prvProcessReceivedCommands+0xfa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   2347c:	9b06      	ldr	r3, [sp, #24]
   2347e:	930a      	str	r3, [sp, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   23480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23482:	695b      	ldr	r3, [r3, #20]
   23484:	2b00      	cmp	r3, #0
   23486:	d004      	beq.n	23492 <prvProcessReceivedCommands+0x46>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   23488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2348a:	3304      	adds	r3, #4
   2348c:	4618      	mov	r0, r3
   2348e:	f7fe fb84 	bl	21b9a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   23492:	ab03      	add	r3, sp, #12
   23494:	4618      	mov	r0, r3
   23496:	f7ff ff79 	bl	2338c <prvSampleTimeNow>
   2349a:	9009      	str	r0, [sp, #36]	; 0x24

			switch( xMessage.xMessageID )
   2349c:	9b04      	ldr	r3, [sp, #16]
   2349e:	2b09      	cmp	r3, #9
   234a0:	d850      	bhi.n	23544 <prvProcessReceivedCommands+0xf8>
   234a2:	a201      	add	r2, pc, #4	; (adr r2, 234a8 <prvProcessReceivedCommands+0x5c>)
   234a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   234a8:	000234d1 	.word	0x000234d1
   234ac:	000234d1 	.word	0x000234d1
   234b0:	000234d1 	.word	0x000234d1
   234b4:	00023547 	.word	0x00023547
   234b8:	00023519 	.word	0x00023519
   234bc:	0002353d 	.word	0x0002353d
   234c0:	000234d1 	.word	0x000234d1
   234c4:	000234d1 	.word	0x000234d1
   234c8:	00023547 	.word	0x00023547
   234cc:	00023519 	.word	0x00023519
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   234d0:	9a05      	ldr	r2, [sp, #20]
   234d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   234d4:	699b      	ldr	r3, [r3, #24]
   234d6:	18d1      	adds	r1, r2, r3
   234d8:	9b05      	ldr	r3, [sp, #20]
   234da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   234dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   234de:	f7ff ff73 	bl	233c8 <prvInsertTimerInActiveList>
   234e2:	4603      	mov	r3, r0
   234e4:	2b00      	cmp	r3, #0
   234e6:	d02e      	beq.n	23546 <prvProcessReceivedCommands+0xfa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   234e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   234ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   234ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   234ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   234f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   234f2:	69db      	ldr	r3, [r3, #28]
   234f4:	2b01      	cmp	r3, #1
   234f6:	d126      	bne.n	23546 <prvProcessReceivedCommands+0xfa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   234f8:	9a05      	ldr	r2, [sp, #20]
   234fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   234fc:	699b      	ldr	r3, [r3, #24]
   234fe:	441a      	add	r2, r3
   23500:	2300      	movs	r3, #0
   23502:	9300      	str	r3, [sp, #0]
   23504:	2300      	movs	r3, #0
   23506:	2100      	movs	r1, #0
   23508:	980a      	ldr	r0, [sp, #40]	; 0x28
   2350a:	f7ff fe4f 	bl	231ac <xTimerGenericCommand>
   2350e:	9008      	str	r0, [sp, #32]
							configASSERT( xResult );
   23510:	9b08      	ldr	r3, [sp, #32]
   23512:	2b00      	cmp	r3, #0
   23514:	d117      	bne.n	23546 <prvProcessReceivedCommands+0xfa>
   23516:	e7fe      	b.n	23516 <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   23518:	9a05      	ldr	r2, [sp, #20]
   2351a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2351c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   2351e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23520:	699b      	ldr	r3, [r3, #24]
   23522:	2b00      	cmp	r3, #0
   23524:	d100      	bne.n	23528 <prvProcessReceivedCommands+0xdc>
   23526:	e7fe      	b.n	23526 <prvProcessReceivedCommands+0xda>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   23528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2352a:	699a      	ldr	r2, [r3, #24]
   2352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2352e:	18d1      	adds	r1, r2, r3
   23530:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23532:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23534:	980a      	ldr	r0, [sp, #40]	; 0x28
   23536:	f7ff ff47 	bl	233c8 <prvInsertTimerInActiveList>
					break;
   2353a:	e004      	b.n	23546 <prvProcessReceivedCommands+0xfa>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   2353c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2353e:	f7fe f8ff 	bl	21740 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   23542:	e000      	b.n	23546 <prvProcessReceivedCommands+0xfa>

				default	:
					/* Don't expect to get here. */
					break;
   23544:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   23546:	4b07      	ldr	r3, [pc, #28]	; (23564 <prvProcessReceivedCommands+0x118>)
   23548:	681b      	ldr	r3, [r3, #0]
   2354a:	a904      	add	r1, sp, #16
   2354c:	2200      	movs	r2, #0
   2354e:	4618      	mov	r0, r3
   23550:	f7fe fd44 	bl	21fdc <xQueueReceive>
   23554:	4603      	mov	r3, r0
   23556:	2b00      	cmp	r3, #0
   23558:	f47f af7b 	bne.w	23452 <prvProcessReceivedCommands+0x6>
			}
		}
	}
}
   2355c:	bf00      	nop
   2355e:	b00d      	add	sp, #52	; 0x34
   23560:	f85d fb04 	ldr.w	pc, [sp], #4
   23564:	10008764 	.word	0x10008764

00023568 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   23568:	b500      	push	{lr}
   2356a:	b089      	sub	sp, #36	; 0x24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   2356c:	e03b      	b.n	235e6 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   2356e:	4b27      	ldr	r3, [pc, #156]	; (2360c <prvSwitchTimerLists+0xa4>)
   23570:	681b      	ldr	r3, [r3, #0]
   23572:	68db      	ldr	r3, [r3, #12]
   23574:	681b      	ldr	r3, [r3, #0]
   23576:	9307      	str	r3, [sp, #28]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   23578:	4b24      	ldr	r3, [pc, #144]	; (2360c <prvSwitchTimerLists+0xa4>)
   2357a:	681b      	ldr	r3, [r3, #0]
   2357c:	68db      	ldr	r3, [r3, #12]
   2357e:	68db      	ldr	r3, [r3, #12]
   23580:	9306      	str	r3, [sp, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   23582:	9b06      	ldr	r3, [sp, #24]
   23584:	3304      	adds	r3, #4
   23586:	4618      	mov	r0, r3
   23588:	f7fe fb07 	bl	21b9a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2358c:	9b06      	ldr	r3, [sp, #24]
   2358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23590:	9806      	ldr	r0, [sp, #24]
   23592:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   23594:	9b06      	ldr	r3, [sp, #24]
   23596:	69db      	ldr	r3, [r3, #28]
   23598:	2b01      	cmp	r3, #1
   2359a:	d124      	bne.n	235e6 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   2359c:	9b06      	ldr	r3, [sp, #24]
   2359e:	699a      	ldr	r2, [r3, #24]
   235a0:	9b07      	ldr	r3, [sp, #28]
   235a2:	4413      	add	r3, r2
   235a4:	9305      	str	r3, [sp, #20]
			if( xReloadTime > xNextExpireTime )
   235a6:	9a05      	ldr	r2, [sp, #20]
   235a8:	9b07      	ldr	r3, [sp, #28]
   235aa:	429a      	cmp	r2, r3
   235ac:	d90e      	bls.n	235cc <prvSwitchTimerLists+0x64>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   235ae:	9b06      	ldr	r3, [sp, #24]
   235b0:	9a05      	ldr	r2, [sp, #20]
   235b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   235b4:	9b06      	ldr	r3, [sp, #24]
   235b6:	9a06      	ldr	r2, [sp, #24]
   235b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   235ba:	4b14      	ldr	r3, [pc, #80]	; (2360c <prvSwitchTimerLists+0xa4>)
   235bc:	681a      	ldr	r2, [r3, #0]
   235be:	9b06      	ldr	r3, [sp, #24]
   235c0:	3304      	adds	r3, #4
   235c2:	4619      	mov	r1, r3
   235c4:	4610      	mov	r0, r2
   235c6:	f7fe fab4 	bl	21b32 <vListInsert>
   235ca:	e00c      	b.n	235e6 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   235cc:	2300      	movs	r3, #0
   235ce:	9300      	str	r3, [sp, #0]
   235d0:	2300      	movs	r3, #0
   235d2:	9a07      	ldr	r2, [sp, #28]
   235d4:	2100      	movs	r1, #0
   235d6:	9806      	ldr	r0, [sp, #24]
   235d8:	f7ff fde8 	bl	231ac <xTimerGenericCommand>
   235dc:	9004      	str	r0, [sp, #16]
				configASSERT( xResult );
   235de:	9b04      	ldr	r3, [sp, #16]
   235e0:	2b00      	cmp	r3, #0
   235e2:	d100      	bne.n	235e6 <prvSwitchTimerLists+0x7e>
   235e4:	e7fe      	b.n	235e4 <prvSwitchTimerLists+0x7c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   235e6:	4b09      	ldr	r3, [pc, #36]	; (2360c <prvSwitchTimerLists+0xa4>)
   235e8:	681b      	ldr	r3, [r3, #0]
   235ea:	681b      	ldr	r3, [r3, #0]
   235ec:	2b00      	cmp	r3, #0
   235ee:	d1be      	bne.n	2356e <prvSwitchTimerLists+0x6>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   235f0:	4b06      	ldr	r3, [pc, #24]	; (2360c <prvSwitchTimerLists+0xa4>)
   235f2:	681b      	ldr	r3, [r3, #0]
   235f4:	9303      	str	r3, [sp, #12]
	pxCurrentTimerList = pxOverflowTimerList;
   235f6:	4b06      	ldr	r3, [pc, #24]	; (23610 <prvSwitchTimerLists+0xa8>)
   235f8:	681b      	ldr	r3, [r3, #0]
   235fa:	4a04      	ldr	r2, [pc, #16]	; (2360c <prvSwitchTimerLists+0xa4>)
   235fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   235fe:	4a04      	ldr	r2, [pc, #16]	; (23610 <prvSwitchTimerLists+0xa8>)
   23600:	9b03      	ldr	r3, [sp, #12]
   23602:	6013      	str	r3, [r2, #0]
}
   23604:	bf00      	nop
   23606:	b009      	add	sp, #36	; 0x24
   23608:	f85d fb04 	ldr.w	pc, [sp], #4
   2360c:	1000875c 	.word	0x1000875c
   23610:	10008760 	.word	0x10008760

00023614 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   23614:	b508      	push	{r3, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   23616:	f7f4 fb9b 	bl	17d50 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   2361a:	4b0e      	ldr	r3, [pc, #56]	; (23654 <prvCheckForValidListAndQueue+0x40>)
   2361c:	681b      	ldr	r3, [r3, #0]
   2361e:	2b00      	cmp	r3, #0
   23620:	d113      	bne.n	2364a <prvCheckForValidListAndQueue+0x36>
		{
			vListInitialise( &xActiveTimerList1 );
   23622:	480d      	ldr	r0, [pc, #52]	; (23658 <prvCheckForValidListAndQueue+0x44>)
   23624:	f7fe fa43 	bl	21aae <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   23628:	480c      	ldr	r0, [pc, #48]	; (2365c <prvCheckForValidListAndQueue+0x48>)
   2362a:	f7fe fa40 	bl	21aae <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   2362e:	4b0c      	ldr	r3, [pc, #48]	; (23660 <prvCheckForValidListAndQueue+0x4c>)
   23630:	4a09      	ldr	r2, [pc, #36]	; (23658 <prvCheckForValidListAndQueue+0x44>)
   23632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   23634:	4b0b      	ldr	r3, [pc, #44]	; (23664 <prvCheckForValidListAndQueue+0x50>)
   23636:	4a09      	ldr	r2, [pc, #36]	; (2365c <prvCheckForValidListAndQueue+0x48>)
   23638:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   2363a:	2200      	movs	r2, #0
   2363c:	2110      	movs	r1, #16
   2363e:	2005      	movs	r0, #5
   23640:	f7fe fb2e 	bl	21ca0 <xQueueGenericCreate>
   23644:	4602      	mov	r2, r0
   23646:	4b03      	ldr	r3, [pc, #12]	; (23654 <prvCheckForValidListAndQueue+0x40>)
   23648:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   2364a:	f7f4 fba1 	bl	17d90 <vPortExitCritical>
}
   2364e:	bf00      	nop
   23650:	bd08      	pop	{r3, pc}
   23652:	bf00      	nop
   23654:	10008764 	.word	0x10008764
   23658:	10008734 	.word	0x10008734
   2365c:	10008748 	.word	0x10008748
   23660:	1000875c 	.word	0x1000875c
   23664:	10008760 	.word	0x10008760

00023668 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   23668:	b500      	push	{lr}
   2366a:	b08b      	sub	sp, #44	; 0x2c
   2366c:	9003      	str	r0, [sp, #12]
   2366e:	9102      	str	r1, [sp, #8]
   23670:	9201      	str	r2, [sp, #4]
   23672:	9300      	str	r3, [sp, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   23674:	f06f 0301 	mvn.w	r3, #1
   23678:	9305      	str	r3, [sp, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   2367a:	9b03      	ldr	r3, [sp, #12]
   2367c:	9306      	str	r3, [sp, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   2367e:	9b02      	ldr	r3, [sp, #8]
   23680:	9307      	str	r3, [sp, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   23682:	9b01      	ldr	r3, [sp, #4]
   23684:	9308      	str	r3, [sp, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   23686:	4b06      	ldr	r3, [pc, #24]	; (236a0 <xTimerPendFunctionCallFromISR+0x38>)
   23688:	6818      	ldr	r0, [r3, #0]
   2368a:	a905      	add	r1, sp, #20
   2368c:	2300      	movs	r3, #0
   2368e:	9a00      	ldr	r2, [sp, #0]
   23690:	f7fe fc2c 	bl	21eec <xQueueGenericSendFromISR>
   23694:	9009      	str	r0, [sp, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   23696:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}
   23698:	4618      	mov	r0, r3
   2369a:	b00b      	add	sp, #44	; 0x2c
   2369c:	f85d fb04 	ldr.w	pc, [sp], #4
   236a0:	10008764 	.word	0x10008764

000236a4 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   236a4:	b500      	push	{lr}
   236a6:	b083      	sub	sp, #12
   236a8:	9001      	str	r0, [sp, #4]
  switch(pMsg->event)
   236aa:	9b01      	ldr	r3, [sp, #4]
   236ac:	789b      	ldrb	r3, [r3, #2]
   236ae:	2b00      	cmp	r3, #0
   236b0:	d002      	beq.n	236b8 <appProcMsg+0x14>
   236b2:	2b01      	cmp	r3, #1
   236b4:	d003      	beq.n	236be <appProcMsg+0x1a>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;

    default:
      break;
   236b6:	e006      	b.n	236c6 <appProcMsg+0x22>
      appUiBtnPoll();
   236b8:	f7f9 f9ec 	bl	1ca94 <appUiBtnPoll>
      break;
   236bc:	e003      	b.n	236c6 <appProcMsg+0x22>
      appUiTimerExpired(pMsg);
   236be:	9801      	ldr	r0, [sp, #4]
   236c0:	f7f9 f9e2 	bl	1ca88 <appUiTimerExpired>
      break;
   236c4:	bf00      	nop
  }
}
   236c6:	bf00      	nop
   236c8:	b003      	add	sp, #12
   236ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000236d0 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   236d0:	b500      	push	{lr}
   236d2:	b085      	sub	sp, #20
   236d4:	4603      	mov	r3, r0
   236d6:	f88d 3007 	strb.w	r3, [sp, #7]
  appConnCb_t   *pCcb = appConnCb;
   236da:	4b17      	ldr	r3, [pc, #92]	; (23738 <appNumConns+0x68>)
   236dc:	9303      	str	r3, [sp, #12]
  uint8_t       i, j;

  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   236de:	2303      	movs	r3, #3
   236e0:	f88d 300b 	strb.w	r3, [sp, #11]
   236e4:	2300      	movs	r3, #0
   236e6:	f88d 300a 	strb.w	r3, [sp, #10]
   236ea:	e01b      	b.n	23724 <appNumConns+0x54>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   236ec:	9b03      	ldr	r3, [sp, #12]
   236ee:	791b      	ldrb	r3, [r3, #4]
   236f0:	2b00      	cmp	r3, #0
   236f2:	d00f      	beq.n	23714 <appNumConns+0x44>
   236f4:	9b03      	ldr	r3, [sp, #12]
   236f6:	791b      	ldrb	r3, [r3, #4]
   236f8:	4618      	mov	r0, r3
   236fa:	f7ee f935 	bl	11968 <DmConnRole>
   236fe:	4603      	mov	r3, r0
   23700:	461a      	mov	r2, r3
   23702:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23706:	4293      	cmp	r3, r2
   23708:	d104      	bne.n	23714 <appNumConns+0x44>
    {
      j++;
   2370a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2370e:	3301      	adds	r3, #1
   23710:	f88d 300a 	strb.w	r3, [sp, #10]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   23714:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23718:	3b01      	subs	r3, #1
   2371a:	f88d 300b 	strb.w	r3, [sp, #11]
   2371e:	9b03      	ldr	r3, [sp, #12]
   23720:	3320      	adds	r3, #32
   23722:	9303      	str	r3, [sp, #12]
   23724:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23728:	2b00      	cmp	r3, #0
   2372a:	d1df      	bne.n	236ec <appNumConns+0x1c>
    }
  }

  return j;
   2372c:	f89d 300a 	ldrb.w	r3, [sp, #10]
}
   23730:	4618      	mov	r0, r3
   23732:	b005      	add	sp, #20
   23734:	f85d fb04 	ldr.w	pc, [sp], #4
   23738:	10009770 	.word	0x10009770

0002373c <AppCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t AppCheckBonded(dmConnId_t connId)
{
   2373c:	b082      	sub	sp, #8
   2373e:	4603      	mov	r3, r0
   23740:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return appConnCb[connId - 1].bonded;
   23744:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23748:	3b01      	subs	r3, #1
   2374a:	4a04      	ldr	r2, [pc, #16]	; (2375c <AppCheckBonded+0x20>)
   2374c:	015b      	lsls	r3, r3, #5
   2374e:	4413      	add	r3, r2
   23750:	3305      	adds	r3, #5
   23752:	781b      	ldrb	r3, [r3, #0]
}
   23754:	4618      	mov	r0, r3
   23756:	b002      	add	sp, #8
   23758:	4770      	bx	lr
   2375a:	bf00      	nop
   2375c:	10009770 	.word	0x10009770

00023760 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   23760:	b500      	push	{lr}
   23762:	b083      	sub	sp, #12
   23764:	4603      	mov	r3, r0
   23766:	f88d 3007 	strb.w	r3, [sp, #7]
  appHandlerId = handlerId;
   2376a:	4a05      	ldr	r2, [pc, #20]	; (23780 <AppHandlerInit+0x20>)
   2376c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23770:	7013      	strb	r3, [r2, #0]

  AppDbInit();
   23772:	f7f8 fdc5 	bl	1c300 <AppDbInit>
}
   23776:	bf00      	nop
   23778:	b003      	add	sp, #12
   2377a:	f85d fb04 	ldr.w	pc, [sp], #4
   2377e:	bf00      	nop
   23780:	1000975c 	.word	0x1000975c

00023784 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   23784:	b500      	push	{lr}
   23786:	b083      	sub	sp, #12
   23788:	4603      	mov	r3, r0
   2378a:	9100      	str	r1, [sp, #0]
   2378c:	f88d 3007 	strb.w	r3, [sp, #7]
  if (pMsg != NULL)
   23790:	9b00      	ldr	r3, [sp, #0]
   23792:	2b00      	cmp	r3, #0
   23794:	d01b      	beq.n	237ce <AppHandler+0x4a>
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);
   23796:	9b00      	ldr	r3, [sp, #0]
   23798:	789b      	ldrb	r3, [r3, #2]
   2379a:	4619      	mov	r1, r3
   2379c:	4812      	ldr	r0, [pc, #72]	; (237e8 <AppHandler+0x64>)
   2379e:	f7f5 fad3 	bl	18d48 <WsfTrace>

    if (pMsg->event >= APP_MASTER_MSG_START)
   237a2:	9b00      	ldr	r3, [sp, #0]
   237a4:	789b      	ldrb	r3, [r3, #2]
   237a6:	2b1f      	cmp	r3, #31
   237a8:	d904      	bls.n	237b4 <AppHandler+0x30>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);
   237aa:	4b10      	ldr	r3, [pc, #64]	; (237ec <AppHandler+0x68>)
   237ac:	685b      	ldr	r3, [r3, #4]
   237ae:	9800      	ldr	r0, [sp, #0]
   237b0:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   237b2:	e014      	b.n	237de <AppHandler+0x5a>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   237b4:	9b00      	ldr	r3, [sp, #0]
   237b6:	789b      	ldrb	r3, [r3, #2]
   237b8:	2b0f      	cmp	r3, #15
   237ba:	d904      	bls.n	237c6 <AppHandler+0x42>
      (*appCb.slaveCback)(pMsg);
   237bc:	4b0b      	ldr	r3, [pc, #44]	; (237ec <AppHandler+0x68>)
   237be:	681b      	ldr	r3, [r3, #0]
   237c0:	9800      	ldr	r0, [sp, #0]
   237c2:	4798      	blx	r3
}
   237c4:	e00b      	b.n	237de <AppHandler+0x5a>
      appProcMsg(pMsg);
   237c6:	9800      	ldr	r0, [sp, #0]
   237c8:	f7ff ff6c 	bl	236a4 <appProcMsg>
}
   237cc:	e007      	b.n	237de <AppHandler+0x5a>
    if (event & APP_BTN_DOWN_EVT)
   237ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   237d2:	f003 0310 	and.w	r3, r3, #16
   237d6:	2b00      	cmp	r3, #0
   237d8:	d001      	beq.n	237de <AppHandler+0x5a>
      AppUiBtnPressed();
   237da:	f7f9 f967 	bl	1caac <AppUiBtnPressed>
}
   237de:	bf00      	nop
   237e0:	b003      	add	sp, #12
   237e2:	f85d fb04 	ldr.w	pc, [sp], #4
   237e6:	bf00      	nop
   237e8:	00029148 	.word	0x00029148
   237ec:	1000974c 	.word	0x1000974c

000237f0 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   237f0:	b500      	push	{lr}
   237f2:	b085      	sub	sp, #20
   237f4:	9001      	str	r0, [sp, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];

  if (pAuthReq->display)
   237f6:	9b01      	ldr	r3, [sp, #4]
   237f8:	795b      	ldrb	r3, [r3, #5]
   237fa:	2b00      	cmp	r3, #0
   237fc:	d029      	beq.n	23852 <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   237fe:	ab03      	add	r3, sp, #12
   23800:	2104      	movs	r1, #4
   23802:	4618      	mov	r0, r3
   23804:	f7ef fd2e 	bl	13264 <SecRand>
    passkey %= 1000000;
   23808:	9a03      	ldr	r2, [sp, #12]
   2380a:	4b15      	ldr	r3, [pc, #84]	; (23860 <AppHandlePasskey+0x70>)
   2380c:	fba3 1302 	umull	r1, r3, r3, r2
   23810:	0c9b      	lsrs	r3, r3, #18
   23812:	4914      	ldr	r1, [pc, #80]	; (23864 <AppHandlePasskey+0x74>)
   23814:	fb01 f303 	mul.w	r3, r1, r3
   23818:	1ad3      	subs	r3, r2, r3
   2381a:	9303      	str	r3, [sp, #12]

    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   2381c:	9b03      	ldr	r3, [sp, #12]
   2381e:	b2db      	uxtb	r3, r3
   23820:	f88d 3008 	strb.w	r3, [sp, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   23824:	9b03      	ldr	r3, [sp, #12]
   23826:	0a1b      	lsrs	r3, r3, #8
   23828:	b2db      	uxtb	r3, r3
   2382a:	f88d 3009 	strb.w	r3, [sp, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   2382e:	9b03      	ldr	r3, [sp, #12]
   23830:	0c1b      	lsrs	r3, r3, #16
   23832:	b2db      	uxtb	r3, r3
   23834:	f88d 300a 	strb.w	r3, [sp, #10]

    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   23838:	9b01      	ldr	r3, [sp, #4]
   2383a:	881b      	ldrh	r3, [r3, #0]
   2383c:	b2db      	uxtb	r3, r3
   2383e:	aa02      	add	r2, sp, #8
   23840:	2103      	movs	r1, #3
   23842:	4618      	mov	r0, r3
   23844:	f7ee ffcf 	bl	127e6 <DmSecAuthRsp>

    /* display passkey */
    AppUiDisplayPasskey(passkey);
   23848:	9b03      	ldr	r3, [sp, #12]
   2384a:	4618      	mov	r0, r3
   2384c:	f7f9 f900 	bl	1ca50 <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  }
}
   23850:	e002      	b.n	23858 <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   23852:	200e      	movs	r0, #14
   23854:	f7f9 f810 	bl	1c878 <AppUiAction>
}
   23858:	bf00      	nop
   2385a:	b005      	add	sp, #20
   2385c:	f85d fb04 	ldr.w	pc, [sp], #4
   23860:	431bde83 	.word	0x431bde83
   23864:	000f4240 	.word	0x000f4240

00023868 <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   23868:	b500      	push	{lr}
   2386a:	b085      	sub	sp, #20
   2386c:	9001      	str	r0, [sp, #4]
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   2386e:	9b01      	ldr	r3, [sp, #4]
   23870:	3304      	adds	r3, #4
   23872:	4618      	mov	r0, r3
   23874:	f7ef f92a 	bl	12acc <DmSecGetCompareValue>
   23878:	9003      	str	r0, [sp, #12]

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   2387a:	9803      	ldr	r0, [sp, #12]
   2387c:	f7f9 f8f6 	bl	1ca6c <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   23880:	9b01      	ldr	r3, [sp, #4]
   23882:	881b      	ldrh	r3, [r3, #0]
   23884:	b2db      	uxtb	r3, r3
   23886:	2101      	movs	r1, #1
   23888:	4618      	mov	r0, r3
   2388a:	f7ef f8f3 	bl	12a74 <DmSecCompareRsp>
}
   2388e:	bf00      	nop
   23890:	b005      	add	sp, #20
   23892:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00023898 <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   23898:	b082      	sub	sp, #8
  appConnCb_t   *pCcb = appConnCb;
   2389a:	4b0e      	ldr	r3, [pc, #56]	; (238d4 <AppConnIsOpen+0x3c>)
   2389c:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   2389e:	2303      	movs	r3, #3
   238a0:	f88d 3003 	strb.w	r3, [sp, #3]
   238a4:	e00e      	b.n	238c4 <AppConnIsOpen+0x2c>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   238a6:	9b01      	ldr	r3, [sp, #4]
   238a8:	791b      	ldrb	r3, [r3, #4]
   238aa:	2b00      	cmp	r3, #0
   238ac:	d002      	beq.n	238b4 <AppConnIsOpen+0x1c>
    {
      return pCcb->connId;
   238ae:	9b01      	ldr	r3, [sp, #4]
   238b0:	791b      	ldrb	r3, [r3, #4]
   238b2:	e00c      	b.n	238ce <AppConnIsOpen+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   238b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   238b8:	3b01      	subs	r3, #1
   238ba:	f88d 3003 	strb.w	r3, [sp, #3]
   238be:	9b01      	ldr	r3, [sp, #4]
   238c0:	3320      	adds	r3, #32
   238c2:	9301      	str	r3, [sp, #4]
   238c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   238c8:	2b00      	cmp	r3, #0
   238ca:	d1ec      	bne.n	238a6 <AppConnIsOpen+0xe>
    }
  }

  return DM_CONN_ID_NONE;
   238cc:	2300      	movs	r3, #0
}
   238ce:	4618      	mov	r0, r3
   238d0:	b002      	add	sp, #8
   238d2:	4770      	bx	lr
   238d4:	10009770 	.word	0x10009770

000238d8 <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   238d8:	b082      	sub	sp, #8
   238da:	4603      	mov	r3, r0
   238dc:	f88d 3007 	strb.w	r3, [sp, #7]
  return appConnCb[connId-1].dbHdl;
   238e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   238e4:	3b01      	subs	r3, #1
   238e6:	4a03      	ldr	r2, [pc, #12]	; (238f4 <AppDbGetHdl+0x1c>)
   238e8:	015b      	lsls	r3, r3, #5
   238ea:	4413      	add	r3, r2
   238ec:	681b      	ldr	r3, [r3, #0]
}
   238ee:	4618      	mov	r0, r3
   238f0:	b002      	add	sp, #8
   238f2:	4770      	bx	lr
   238f4:	10009770 	.word	0x10009770

000238f8 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   238f8:	b570      	push	{r4, r5, r6, lr}
   238fa:	b086      	sub	sp, #24
   238fc:	9003      	str	r0, [sp, #12]
   238fe:	460b      	mov	r3, r1
   23900:	f88d 300b 	strb.w	r3, [sp, #11]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   23904:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23908:	3b01      	subs	r3, #1
   2390a:	4a15      	ldr	r2, [pc, #84]	; (23960 <AppAddDevToResList+0x68>)
   2390c:	015b      	lsls	r3, r3, #5
   2390e:	4413      	add	r3, r2
   23910:	681b      	ldr	r3, [r3, #0]
   23912:	9305      	str	r3, [sp, #20]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   23914:	f7fa fdf8 	bl	1e508 <HciLlPrivacySupported>
   23918:	4603      	mov	r3, r0
   2391a:	2b00      	cmp	r3, #0
   2391c:	d01c      	beq.n	23958 <AppAddDevToResList+0x60>
   2391e:	2200      	movs	r2, #0
   23920:	2104      	movs	r1, #4
   23922:	9805      	ldr	r0, [sp, #20]
   23924:	f7f8 fe70 	bl	1c608 <AppDbGetKey>
   23928:	9004      	str	r0, [sp, #16]
   2392a:	9b04      	ldr	r3, [sp, #16]
   2392c:	2b00      	cmp	r3, #0
   2392e:	d013      	beq.n	23958 <AppAddDevToResList+0x60>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   23930:	9b04      	ldr	r3, [sp, #16]
   23932:	7d9c      	ldrb	r4, [r3, #22]
   23934:	9b04      	ldr	r3, [sp, #16]
   23936:	f103 0510 	add.w	r5, r3, #16
   2393a:	9e04      	ldr	r6, [sp, #16]
   2393c:	f7ee ffac 	bl	12898 <DmSecGetLocalIrk>
   23940:	4602      	mov	r2, r0
   23942:	9b03      	ldr	r3, [sp, #12]
   23944:	881b      	ldrh	r3, [r3, #0]
   23946:	9301      	str	r3, [sp, #4]
   23948:	2301      	movs	r3, #1
   2394a:	9300      	str	r3, [sp, #0]
   2394c:	4613      	mov	r3, r2
   2394e:	4632      	mov	r2, r6
   23950:	4629      	mov	r1, r5
   23952:	4620      	mov	r0, r4
   23954:	f7ee fdb4 	bl	124c0 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   23958:	bf00      	nop
   2395a:	b006      	add	sp, #24
   2395c:	bd70      	pop	{r4, r5, r6, pc}
   2395e:	bf00      	nop
   23960:	10009770 	.word	0x10009770

00023964 <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   23964:	b500      	push	{lr}
   23966:	b085      	sub	sp, #20
   23968:	9001      	str	r0, [sp, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   2396a:	9b01      	ldr	r3, [sp, #4]
   2396c:	2b00      	cmp	r3, #0
   2396e:	d020      	beq.n	239b2 <AppUpdatePrivacyMode+0x4e>
   23970:	9801      	ldr	r0, [sp, #4]
   23972:	f7f8 ff64 	bl	1c83e <AppDbGetPeerAddedToRl>
   23976:	4603      	mov	r3, r0
   23978:	2b00      	cmp	r3, #0
   2397a:	d01a      	beq.n	239b2 <AppUpdatePrivacyMode+0x4e>
   2397c:	9801      	ldr	r0, [sp, #4]
   2397e:	f7f8 ff73 	bl	1c868 <AppDbGetPeerRpao>
   23982:	4603      	mov	r3, r0
   23984:	2b00      	cmp	r3, #0
   23986:	d114      	bne.n	239b2 <AppUpdatePrivacyMode+0x4e>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   23988:	2200      	movs	r2, #0
   2398a:	2104      	movs	r1, #4
   2398c:	9801      	ldr	r0, [sp, #4]
   2398e:	f7f8 fe3b 	bl	1c608 <AppDbGetKey>
   23992:	9003      	str	r0, [sp, #12]
    if (pPeerKey != NULL)
   23994:	9b03      	ldr	r3, [sp, #12]
   23996:	2b00      	cmp	r3, #0
   23998:	d00b      	beq.n	239b2 <AppUpdatePrivacyMode+0x4e>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   2399a:	9b03      	ldr	r3, [sp, #12]
   2399c:	7d98      	ldrb	r0, [r3, #22]
   2399e:	9b03      	ldr	r3, [sp, #12]
   239a0:	3310      	adds	r3, #16
   239a2:	2201      	movs	r2, #1
   239a4:	4619      	mov	r1, r3
   239a6:	f7ee fdc9 	bl	1253c <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   239aa:	2100      	movs	r1, #0
   239ac:	9801      	ldr	r0, [sp, #4]
   239ae:	f7f8 ff4e 	bl	1c84e <AppDbSetPeerAddedToRl>
    }
  }
}
   239b2:	bf00      	nop
   239b4:	b005      	add	sp, #20
   239b6:	f85d fb04 	ldr.w	pc, [sp], #4

000239ba <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   239ba:	b500      	push	{lr}
   239bc:	b085      	sub	sp, #20
   239be:	4603      	mov	r3, r0
   239c0:	f88d 3007 	strb.w	r3, [sp, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   239c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   239c8:	4618      	mov	r0, r3
   239ca:	f7ff ff85 	bl	238d8 <AppDbGetHdl>
   239ce:	9003      	str	r0, [sp, #12]
   239d0:	9b03      	ldr	r3, [sp, #12]
   239d2:	2b00      	cmp	r3, #0
   239d4:	d019      	beq.n	23a0a <appServerSetSigningInfo+0x50>
   239d6:	2200      	movs	r2, #0
   239d8:	2108      	movs	r1, #8
   239da:	9803      	ldr	r0, [sp, #12]
   239dc:	f7f8 fe14 	bl	1c608 <AppDbGetKey>
   239e0:	9002      	str	r0, [sp, #8]
   239e2:	9b02      	ldr	r3, [sp, #8]
   239e4:	2b00      	cmp	r3, #0
   239e6:	d010      	beq.n	23a0a <appServerSetSigningInfo+0x50>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key, FALSE);
   239e8:	9902      	ldr	r1, [sp, #8]
   239ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   239ee:	2200      	movs	r2, #0
   239f0:	4618      	mov	r0, r3
   239f2:	f7f3 faeb 	bl	16fcc <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   239f6:	9803      	ldr	r0, [sp, #12]
   239f8:	f7f8 ff0f 	bl	1c81a <AppDbGetPeerSignCounter>
   239fc:	4602      	mov	r2, r0
   239fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23a02:	4611      	mov	r1, r2
   23a04:	4618      	mov	r0, r3
   23a06:	f7f3 faff 	bl	17008 <AttsSetSignCounter>
  }
}
   23a0a:	bf00      	nop
   23a0c:	b005      	add	sp, #20
   23a0e:	f85d fb04 	ldr.w	pc, [sp], #4

00023a12 <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   23a12:	b500      	push	{lr}
   23a14:	b089      	sub	sp, #36	; 0x24
   23a16:	9001      	str	r0, [sp, #4]
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   23a18:	9b01      	ldr	r3, [sp, #4]
   23a1a:	881b      	ldrh	r3, [r3, #0]
   23a1c:	f88d 301e 	strb.w	r3, [sp, #30]

  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   23a20:	9b01      	ldr	r3, [sp, #4]
   23a22:	789b      	ldrb	r3, [r3, #2]
   23a24:	2b27      	cmp	r3, #39	; 0x27
   23a26:	d141      	bne.n	23aac <AppServerConnCback+0x9a>
  {
    /* apply the peer's CCC table - values are persistant across connection when bonded */
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   23a28:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23a2c:	4618      	mov	r0, r3
   23a2e:	f7ff ff53 	bl	238d8 <AppDbGetHdl>
   23a32:	9006      	str	r0, [sp, #24]
   23a34:	9b06      	ldr	r3, [sp, #24]
   23a36:	2b00      	cmp	r3, #0
   23a38:	d025      	beq.n	23a86 <AppServerConnCback+0x74>
    {
      uint8_t changeAwareState;
      uint8_t *pCsf;

      AppDbGetCsfRecord(dbHdl, &changeAwareState, &pCsf);
   23a3a:	aa03      	add	r2, sp, #12
   23a3c:	f10d 0313 	add.w	r3, sp, #19
   23a40:	4619      	mov	r1, r3
   23a42:	9806      	ldr	r0, [sp, #24]
   23a44:	f7f8 febf 	bl	1c7c6 <AppDbGetCsfRecord>

      /* Apply peer's client supported features. */
      AttsCsfConnOpen(connId, changeAwareState, pCsf);
   23a48:	f89d 1013 	ldrb.w	r1, [sp, #19]
   23a4c:	9a03      	ldr	r2, [sp, #12]
   23a4e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23a52:	4618      	mov	r0, r3
   23a54:	f7f1 f906 	bl	14c64 <AttsCsfConnOpen>

      AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   23a58:	9806      	ldr	r0, [sp, #24]
   23a5a:	f7f8 fe99 	bl	1c790 <AppDbGetCccTbl>
   23a5e:	4602      	mov	r2, r0
   23a60:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23a64:	4611      	mov	r1, r2
   23a66:	4618      	mov	r0, r3
   23a68:	f7f0 ff26 	bl	148b8 <AttsCccInitTable>

      /* If database has changed and peer configured service indications, send one now. */
      if (changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   23a6c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   23a70:	2b03      	cmp	r3, #3
   23a72:	d115      	bne.n	23aa0 <AppServerConnCback+0x8e>
      {
        GattSendServiceChangedInd(connId, ATT_HANDLE_START, ATT_HANDLE_MAX);
   23a74:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23a7c:	2101      	movs	r1, #1
   23a7e:	4618      	mov	r0, r3
   23a80:	f7f5 f988 	bl	18d94 <GattSendServiceChangedInd>
   23a84:	e00c      	b.n	23aa0 <AppServerConnCback+0x8e>
      }
    }
    else
    {
      /* set up CCC table with uninitialized (all zero) values. */
      AttsCccInitTable(connId, NULL);
   23a86:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23a8a:	2100      	movs	r1, #0
   23a8c:	4618      	mov	r0, r3
   23a8e:	f7f0 ff13 	bl	148b8 <AttsCccInitTable>

      /* set CSF values to default */
      AttsCsfConnOpen(connId, TRUE, NULL);
   23a92:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23a96:	2200      	movs	r2, #0
   23a98:	2101      	movs	r1, #1
   23a9a:	4618      	mov	r0, r3
   23a9c:	f7f1 f8e2 	bl	14c64 <AttsCsfConnOpen>
    }

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   23aa0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23aa4:	4618      	mov	r0, r3
   23aa6:	f7ff ff88 	bl	239ba <appServerSetSigningInfo>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   23aaa:	e084      	b.n	23bb6 <AppServerConnCback+0x1a4>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   23aac:	9b01      	ldr	r3, [sp, #4]
   23aae:	789b      	ldrb	r3, [r3, #2]
   23ab0:	2b2a      	cmp	r3, #42	; 0x2a
   23ab2:	d164      	bne.n	23b7e <AppServerConnCback+0x16c>
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   23ab4:	9b01      	ldr	r3, [sp, #4]
   23ab6:	791b      	ldrb	r3, [r3, #4]
   23ab8:	f003 0301 	and.w	r3, r3, #1
   23abc:	2b00      	cmp	r3, #0
   23abe:	bf14      	ite	ne
   23ac0:	2301      	movne	r3, #1
   23ac2:	2300      	moveq	r3, #0
   23ac4:	b2db      	uxtb	r3, r3
   23ac6:	f88d 3017 	strb.w	r3, [sp, #23]
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   23aca:	f89d 3017 	ldrb.w	r3, [sp, #23]
   23ace:	2b00      	cmp	r3, #0
   23ad0:	d04f      	beq.n	23b72 <AppServerConnCback+0x160>
   23ad2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23ad6:	4618      	mov	r0, r3
   23ad8:	f7ff fe30 	bl	2373c <AppCheckBonded>
   23adc:	4603      	mov	r3, r0
   23ade:	2b00      	cmp	r3, #0
   23ae0:	d147      	bne.n	23b72 <AppServerConnCback+0x160>
   23ae2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23ae6:	4618      	mov	r0, r3
   23ae8:	f7ff fef6 	bl	238d8 <AppDbGetHdl>
   23aec:	9006      	str	r0, [sp, #24]
   23aee:	9b06      	ldr	r3, [sp, #24]
   23af0:	2b00      	cmp	r3, #0
   23af2:	d03e      	beq.n	23b72 <AppServerConnCback+0x160>
      tableLen = AttsGetCccTableLen();
   23af4:	f7f0 ff92 	bl	14a1c <AttsGetCccTableLen>
   23af8:	4603      	mov	r3, r0
   23afa:	f88d 3016 	strb.w	r3, [sp, #22]
      for (idx = 0; idx < tableLen; idx++)
   23afe:	2300      	movs	r3, #0
   23b00:	f88d 301f 	strb.w	r3, [sp, #31]
   23b04:	e01c      	b.n	23b40 <AppServerConnCback+0x12e>
        if ((cccValue = AttsCccGet(connId, idx)) != 0)
   23b06:	f89d 201f 	ldrb.w	r2, [sp, #31]
   23b0a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23b0e:	4611      	mov	r1, r2
   23b10:	4618      	mov	r0, r3
   23b12:	f7f0 ff37 	bl	14984 <AttsCccGet>
   23b16:	4603      	mov	r3, r0
   23b18:	f8ad 3014 	strh.w	r3, [sp, #20]
   23b1c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   23b20:	2b00      	cmp	r3, #0
   23b22:	d008      	beq.n	23b36 <AppServerConnCback+0x124>
          AppDbSetCccTblValue(dbHdl, idx, cccValue);
   23b24:	f89d 301f 	ldrb.w	r3, [sp, #31]
   23b28:	b29b      	uxth	r3, r3
   23b2a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23b2e:	4619      	mov	r1, r3
   23b30:	9806      	ldr	r0, [sp, #24]
   23b32:	f7f8 fe34 	bl	1c79e <AppDbSetCccTblValue>
      for (idx = 0; idx < tableLen; idx++)
   23b36:	f89d 301f 	ldrb.w	r3, [sp, #31]
   23b3a:	3301      	adds	r3, #1
   23b3c:	f88d 301f 	strb.w	r3, [sp, #31]
   23b40:	f89d 201f 	ldrb.w	r2, [sp, #31]
   23b44:	f89d 3016 	ldrb.w	r3, [sp, #22]
   23b48:	429a      	cmp	r2, r3
   23b4a:	d3dc      	bcc.n	23b06 <AppServerConnCback+0xf4>
      AttsCsfGetFeatures(connId, csf, sizeof(csf));
   23b4c:	a902      	add	r1, sp, #8
   23b4e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23b52:	2201      	movs	r2, #1
   23b54:	4618      	mov	r0, r3
   23b56:	f7f1 f8b5 	bl	14cc4 <AttsCsfGetFeatures>
      AppDbSetCsfRecord(dbHdl, AttsCsfGetChangeAwareState(connId), csf);
   23b5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23b5e:	4618      	mov	r0, r3
   23b60:	f7f1 f8d0 	bl	14d04 <AttsCsfGetChangeAwareState>
   23b64:	4603      	mov	r3, r0
   23b66:	4619      	mov	r1, r3
   23b68:	ab02      	add	r3, sp, #8
   23b6a:	461a      	mov	r2, r3
   23b6c:	9806      	ldr	r0, [sp, #24]
   23b6e:	f7f8 fe3b 	bl	1c7e8 <AppDbSetCsfRecord>
    appServerSetSigningInfo(connId);
   23b72:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23b76:	4618      	mov	r0, r3
   23b78:	f7ff ff1f 	bl	239ba <appServerSetSigningInfo>
}
   23b7c:	e01b      	b.n	23bb6 <AppServerConnCback+0x1a4>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   23b7e:	9b01      	ldr	r3, [sp, #4]
   23b80:	789b      	ldrb	r3, [r3, #2]
   23b82:	2b28      	cmp	r3, #40	; 0x28
   23b84:	d117      	bne.n	23bb6 <AppServerConnCback+0x1a4>
    AttsCccClearTable(connId);
   23b86:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23b8a:	4618      	mov	r0, r3
   23b8c:	f7f0 fee4 	bl	14958 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   23b90:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23b94:	4618      	mov	r0, r3
   23b96:	f7ff fe9f 	bl	238d8 <AppDbGetHdl>
   23b9a:	9006      	str	r0, [sp, #24]
   23b9c:	9b06      	ldr	r3, [sp, #24]
   23b9e:	2b00      	cmp	r3, #0
   23ba0:	d009      	beq.n	23bb6 <AppServerConnCback+0x1a4>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   23ba2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23ba6:	4618      	mov	r0, r3
   23ba8:	f7f3 fa40 	bl	1702c <AttsGetSignCounter>
   23bac:	4603      	mov	r3, r0
   23bae:	4619      	mov	r1, r3
   23bb0:	9806      	ldr	r0, [sp, #24]
   23bb2:	f7f8 fe3a 	bl	1c82a <AppDbSetPeerSignCounter>
}
   23bb6:	bf00      	nop
   23bb8:	b009      	add	sp, #36	; 0x24
   23bba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00023bc0 <appSlaveAdvModeInit>:
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   23bc0:	4b03      	ldr	r3, [pc, #12]	; (23bd0 <appSlaveAdvModeInit+0x10>)
   23bc2:	2200      	movs	r2, #0
   23bc4:	641a      	str	r2, [r3, #64]	; 0x40
  appSlaveCb.advRestartCback = NULL;
   23bc6:	4b02      	ldr	r3, [pc, #8]	; (23bd0 <appSlaveAdvModeInit+0x10>)
   23bc8:	2200      	movs	r2, #0
   23bca:	645a      	str	r2, [r3, #68]	; 0x44
}
   23bcc:	bf00      	nop
   23bce:	4770      	bx	lr
   23bd0:	100097d0 	.word	0x100097d0

00023bd4 <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   23bd4:	b084      	sub	sp, #16
   23bd6:	4603      	mov	r3, r0
   23bd8:	9100      	str	r1, [sp, #0]
   23bda:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   23bde:	2300      	movs	r3, #0
   23be0:	f88d 300f 	strb.w	r3, [sp, #15]
   23be4:	e034      	b.n	23c50 <appSlaveConnectableAdv+0x7c>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   23be6:	2300      	movs	r3, #0
   23be8:	f88d 300e 	strb.w	r3, [sp, #14]
   23bec:	e027      	b.n	23c3e <appSlaveConnectableAdv+0x6a>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                                  &&
   23bee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23bf2:	9a00      	ldr	r2, [sp, #0]
   23bf4:	4413      	add	r3, r2
   23bf6:	781b      	ldrb	r3, [r3, #0]
   23bf8:	f89d 200e 	ldrb.w	r2, [sp, #14]
   23bfc:	429a      	cmp	r2, r3
   23bfe:	d119      	bne.n	23c34 <appSlaveConnectableAdv+0x60>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT)       ||
   23c00:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23c04:	4a17      	ldr	r2, [pc, #92]	; (23c64 <appSlaveConnectableAdv+0x90>)
   23c06:	4413      	add	r3, r2
   23c08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
      if ((pAdvHandles[i] == j)                                  &&
   23c0c:	2b00      	cmp	r3, #0
   23c0e:	d00f      	beq.n	23c30 <appSlaveConnectableAdv+0x5c>
           (appSlaveCb.advType[j] == DM_ADV_CONN_DIRECT_LO_DUTY) ||
   23c10:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23c14:	4a13      	ldr	r2, [pc, #76]	; (23c64 <appSlaveConnectableAdv+0x90>)
   23c16:	4413      	add	r3, r2
   23c18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT)       ||
   23c1c:	2b04      	cmp	r3, #4
   23c1e:	d007      	beq.n	23c30 <appSlaveConnectableAdv+0x5c>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   23c20:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23c24:	4a0f      	ldr	r2, [pc, #60]	; (23c64 <appSlaveConnectableAdv+0x90>)
   23c26:	4413      	add	r3, r2
   23c28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
           (appSlaveCb.advType[j] == DM_ADV_CONN_DIRECT_LO_DUTY) ||
   23c2c:	2b05      	cmp	r3, #5
   23c2e:	d101      	bne.n	23c34 <appSlaveConnectableAdv+0x60>
      {
        return TRUE;
   23c30:	2301      	movs	r3, #1
   23c32:	e014      	b.n	23c5e <appSlaveConnectableAdv+0x8a>
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   23c34:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23c38:	3301      	adds	r3, #1
   23c3a:	f88d 300e 	strb.w	r3, [sp, #14]
   23c3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23c42:	2b00      	cmp	r3, #0
   23c44:	d0d3      	beq.n	23bee <appSlaveConnectableAdv+0x1a>
  for (i = 0; i < numSets; i++)
   23c46:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23c4a:	3301      	adds	r3, #1
   23c4c:	f88d 300f 	strb.w	r3, [sp, #15]
   23c50:	f89d 200f 	ldrb.w	r2, [sp, #15]
   23c54:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23c58:	429a      	cmp	r2, r3
   23c5a:	d3c4      	bcc.n	23be6 <appSlaveConnectableAdv+0x12>
      }
    }
  }

  return FALSE;
   23c5c:	2300      	movs	r3, #0
}
   23c5e:	4618      	mov	r0, r3
   23c60:	b004      	add	sp, #16
   23c62:	4770      	bx	lr
   23c64:	100097d0 	.word	0x100097d0

00023c68 <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   23c68:	b084      	sub	sp, #16
   23c6a:	4603      	mov	r3, r0
   23c6c:	460a      	mov	r2, r1
   23c6e:	f88d 3007 	strb.w	r3, [sp, #7]
   23c72:	4613      	mov	r3, r2
   23c74:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   23c78:	f89d 3006 	ldrb.w	r3, [sp, #6]
   23c7c:	005b      	lsls	r3, r3, #1
   23c7e:	f88d 300f 	strb.w	r3, [sp, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   23c82:	f89d 3006 	ldrb.w	r3, [sp, #6]
   23c86:	005b      	lsls	r3, r3, #1
   23c88:	b2db      	uxtb	r3, r3
   23c8a:	3301      	adds	r3, #1
   23c8c:	f88d 300e 	strb.w	r3, [sp, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   23c90:	f89d 2007 	ldrb.w	r2, [sp, #7]
   23c94:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23c98:	490d      	ldr	r1, [pc, #52]	; (23cd0 <appSlaveForceAdvDataSync+0x68>)
   23c9a:	0092      	lsls	r2, r2, #2
   23c9c:	4413      	add	r3, r2
   23c9e:	3310      	adds	r3, #16
   23ca0:	2200      	movs	r2, #0
   23ca2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   23ca6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   23caa:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23cae:	4908      	ldr	r1, [pc, #32]	; (23cd0 <appSlaveForceAdvDataSync+0x68>)
   23cb0:	0092      	lsls	r2, r2, #2
   23cb2:	4413      	add	r3, r2
   23cb4:	3310      	adds	r3, #16
   23cb6:	2200      	movs	r2, #0
   23cb8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   23cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23cc0:	4a03      	ldr	r2, [pc, #12]	; (23cd0 <appSlaveForceAdvDataSync+0x68>)
   23cc2:	4413      	add	r3, r2
   23cc4:	2200      	movs	r2, #0
   23cc6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   23cca:	bf00      	nop
   23ccc:	b004      	add	sp, #16
   23cce:	4770      	bx	lr
   23cd0:	100097d0 	.word	0x100097d0

00023cd4 <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   23cd4:	b530      	push	{r4, r5, lr}
   23cd6:	b089      	sub	sp, #36	; 0x24
   23cd8:	4603      	mov	r3, r0
   23cda:	460a      	mov	r2, r1
   23cdc:	f88d 300f 	strb.w	r3, [sp, #15]
   23ce0:	4613      	mov	r3, r2
   23ce2:	f88d 300e 	strb.w	r3, [sp, #14]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   23ce6:	2301      	movs	r3, #1
   23ce8:	f88d 3019 	strb.w	r3, [sp, #25]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   23cec:	f89d 200f 	ldrb.w	r2, [sp, #15]
   23cf0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23cf4:	494a      	ldr	r1, [pc, #296]	; (23e20 <appSetAdvScanDataFrag+0x14c>)
   23cf6:	0092      	lsls	r2, r2, #2
   23cf8:	4413      	add	r3, r2
   23cfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   23cfe:	9305      	str	r3, [sp, #20]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   23d00:	f89d 200f 	ldrb.w	r2, [sp, #15]
   23d04:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23d08:	4945      	ldr	r1, [pc, #276]	; (23e20 <appSetAdvScanDataFrag+0x14c>)
   23d0a:	0092      	lsls	r2, r2, #2
   23d0c:	4413      	add	r3, r2
   23d0e:	3308      	adds	r3, #8
   23d10:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   23d14:	f89d 100f 	ldrb.w	r1, [sp, #15]
   23d18:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23d1c:	4840      	ldr	r0, [pc, #256]	; (23e20 <appSetAdvScanDataFrag+0x14c>)
   23d1e:	0089      	lsls	r1, r1, #2
   23d20:	440b      	add	r3, r1
   23d22:	3310      	adds	r3, #16
   23d24:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   23d28:	1ad3      	subs	r3, r2, r3
   23d2a:	f8ad 301a 	strh.w	r3, [sp, #26]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   23d2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23d32:	4a3b      	ldr	r2, [pc, #236]	; (23e20 <appSetAdvScanDataFrag+0x14c>)
   23d34:	3314      	adds	r3, #20
   23d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   23d3a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   23d3e:	429a      	cmp	r2, r3
   23d40:	d967      	bls.n	23e12 <appSetAdvScanDataFrag+0x13e>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   23d42:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23d46:	4a36      	ldr	r2, [pc, #216]	; (23e20 <appSetAdvScanDataFrag+0x14c>)
   23d48:	3314      	adds	r3, #20
   23d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   23d4e:	f8ad 301a 	strh.w	r3, [sp, #26]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   23d52:	e05e      	b.n	23e12 <appSetAdvScanDataFrag+0x13e>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   23d54:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   23d58:	2bfb      	cmp	r3, #251	; 0xfb
   23d5a:	d90c      	bls.n	23d76 <appSetAdvScanDataFrag+0xa2>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   23d5c:	23fb      	movs	r3, #251	; 0xfb
   23d5e:	f8ad 301c 	strh.w	r3, [sp, #28]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   23d62:	f89d 3019 	ldrb.w	r3, [sp, #25]
   23d66:	2b00      	cmp	r3, #0
   23d68:	bf14      	ite	ne
   23d6a:	2301      	movne	r3, #1
   23d6c:	2300      	moveq	r3, #0
   23d6e:	b2db      	uxtb	r3, r3
   23d70:	f88d 301f 	strb.w	r3, [sp, #31]
   23d74:	e00c      	b.n	23d90 <appSetAdvScanDataFrag+0xbc>

    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   23d76:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   23d7a:	f8ad 301c 	strh.w	r3, [sp, #28]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   23d7e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   23d82:	2b00      	cmp	r3, #0
   23d84:	d001      	beq.n	23d8a <appSetAdvScanDataFrag+0xb6>
   23d86:	2303      	movs	r3, #3
   23d88:	e000      	b.n	23d8c <appSetAdvScanDataFrag+0xb8>
   23d8a:	2302      	movs	r3, #2
   23d8c:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   23d90:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23d94:	f003 0301 	and.w	r3, r3, #1
   23d98:	b2dc      	uxtb	r4, r3
   23d9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   23d9e:	b2dd      	uxtb	r5, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   23da0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   23da4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23da8:	491d      	ldr	r1, [pc, #116]	; (23e20 <appSetAdvScanDataFrag+0x14c>)
   23daa:	0092      	lsls	r2, r2, #2
   23dac:	4413      	add	r3, r2
   23dae:	3310      	adds	r3, #16
   23db0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   23db4:	461a      	mov	r2, r3
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   23db6:	9b05      	ldr	r3, [sp, #20]
   23db8:	4413      	add	r3, r2
   23dba:	f89d 101f 	ldrb.w	r1, [sp, #31]
   23dbe:	f89d 000f 	ldrb.w	r0, [sp, #15]
   23dc2:	9300      	str	r3, [sp, #0]
   23dc4:	462b      	mov	r3, r5
   23dc6:	4622      	mov	r2, r4
   23dc8:	f7ec facc 	bl	10364 <DmAdvSetData>

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   23dcc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   23dd0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23dd4:	f89d 000f 	ldrb.w	r0, [sp, #15]
   23dd8:	f89d 100e 	ldrb.w	r1, [sp, #14]
   23ddc:	4c10      	ldr	r4, [pc, #64]	; (23e20 <appSetAdvScanDataFrag+0x14c>)
   23dde:	0080      	lsls	r0, r0, #2
   23de0:	4401      	add	r1, r0
   23de2:	3110      	adds	r1, #16
   23de4:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   23de8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   23dec:	4401      	add	r1, r0
   23dee:	b288      	uxth	r0, r1
   23df0:	490b      	ldr	r1, [pc, #44]	; (23e20 <appSetAdvScanDataFrag+0x14c>)
   23df2:	0092      	lsls	r2, r2, #2
   23df4:	4413      	add	r3, r2
   23df6:	3310      	adds	r3, #16
   23df8:	4602      	mov	r2, r0
   23dfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   23dfe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   23e02:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   23e06:	1ad3      	subs	r3, r2, r3
   23e08:	f8ad 301a 	strh.w	r3, [sp, #26]
    firstFrag = FALSE;
   23e0c:	2300      	movs	r3, #0
   23e0e:	f88d 3019 	strb.w	r3, [sp, #25]
  while (remainLen > 0)
   23e12:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   23e16:	2b00      	cmp	r3, #0
   23e18:	d19c      	bne.n	23d54 <appSetAdvScanDataFrag+0x80>
  }
}
   23e1a:	bf00      	nop
   23e1c:	b009      	add	sp, #36	; 0x24
   23e1e:	bd30      	pop	{r4, r5, pc}
   23e20:	100097d0 	.word	0x100097d0

00023e24 <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   23e24:	b500      	push	{lr}
   23e26:	b085      	sub	sp, #20
   23e28:	4603      	mov	r3, r0
   23e2a:	460a      	mov	r2, r1
   23e2c:	f88d 3007 	strb.w	r3, [sp, #7]
   23e30:	4613      	mov	r3, r2
   23e32:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   23e36:	f89d 3006 	ldrb.w	r3, [sp, #6]
   23e3a:	005b      	lsls	r3, r3, #1
   23e3c:	f88d 300f 	strb.w	r3, [sp, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   23e40:	f89d 3006 	ldrb.w	r3, [sp, #6]
   23e44:	005b      	lsls	r3, r3, #1
   23e46:	b2db      	uxtb	r3, r3
   23e48:	3301      	adds	r3, #1
   23e4a:	f88d 300e 	strb.w	r3, [sp, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   23e4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   23e52:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23e56:	4937      	ldr	r1, [pc, #220]	; (23f34 <appSetAdvScanData+0x110>)
   23e58:	0092      	lsls	r2, r2, #2
   23e5a:	4413      	add	r3, r2
   23e5c:	3310      	adds	r3, #16
   23e5e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   23e62:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23e66:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23e6a:	4832      	ldr	r0, [pc, #200]	; (23f34 <appSetAdvScanData+0x110>)
   23e6c:	0089      	lsls	r1, r1, #2
   23e6e:	440b      	add	r3, r1
   23e70:	3308      	adds	r3, #8
   23e72:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   23e76:	429a      	cmp	r2, r3
   23e78:	d207      	bcs.n	23e8a <appSetAdvScanData+0x66>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   23e7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   23e7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23e82:	4611      	mov	r1, r2
   23e84:	4618      	mov	r0, r3
   23e86:	f7ff ff25 	bl	23cd4 <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   23e8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   23e8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23e92:	4928      	ldr	r1, [pc, #160]	; (23f34 <appSetAdvScanData+0x110>)
   23e94:	0092      	lsls	r2, r2, #2
   23e96:	4413      	add	r3, r2
   23e98:	3310      	adds	r3, #16
   23e9a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   23e9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23ea2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23ea6:	4823      	ldr	r0, [pc, #140]	; (23f34 <appSetAdvScanData+0x110>)
   23ea8:	0089      	lsls	r1, r1, #2
   23eaa:	440b      	add	r3, r1
   23eac:	3308      	adds	r3, #8
   23eae:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   23eb2:	429a      	cmp	r2, r3
   23eb4:	d207      	bcs.n	23ec6 <appSetAdvScanData+0xa2>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   23eb6:	f89d 200e 	ldrb.w	r2, [sp, #14]
   23eba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23ebe:	4611      	mov	r1, r2
   23ec0:	4618      	mov	r0, r3
   23ec2:	f7ff ff07 	bl	23cd4 <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   23ec6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   23eca:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23ece:	4919      	ldr	r1, [pc, #100]	; (23f34 <appSetAdvScanData+0x110>)
   23ed0:	0092      	lsls	r2, r2, #2
   23ed2:	4413      	add	r3, r2
   23ed4:	3310      	adds	r3, #16
   23ed6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   23eda:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23ede:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23ee2:	4814      	ldr	r0, [pc, #80]	; (23f34 <appSetAdvScanData+0x110>)
   23ee4:	0089      	lsls	r1, r1, #2
   23ee6:	440b      	add	r3, r1
   23ee8:	3308      	adds	r3, #8
   23eea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   23eee:	429a      	cmp	r2, r3
   23ef0:	d31c      	bcc.n	23f2c <appSetAdvScanData+0x108>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   23ef2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   23ef6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23efa:	490e      	ldr	r1, [pc, #56]	; (23f34 <appSetAdvScanData+0x110>)
   23efc:	0092      	lsls	r2, r2, #2
   23efe:	4413      	add	r3, r2
   23f00:	3310      	adds	r3, #16
   23f02:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   23f06:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23f0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23f0e:	4809      	ldr	r0, [pc, #36]	; (23f34 <appSetAdvScanData+0x110>)
   23f10:	0089      	lsls	r1, r1, #2
   23f12:	440b      	add	r3, r1
   23f14:	3308      	adds	r3, #8
   23f16:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   23f1a:	429a      	cmp	r2, r3
   23f1c:	d306      	bcc.n	23f2c <appSetAdvScanData+0x108>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   23f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23f22:	4a04      	ldr	r2, [pc, #16]	; (23f34 <appSetAdvScanData+0x110>)
   23f24:	4413      	add	r3, r2
   23f26:	2201      	movs	r2, #1
   23f28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   23f2c:	bf00      	nop
   23f2e:	b005      	add	sp, #20
   23f30:	f85d fb04 	ldr.w	pc, [sp], #4
   23f34:	100097d0 	.word	0x100097d0

00023f38 <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   23f38:	b500      	push	{lr}
   23f3a:	b085      	sub	sp, #20
   23f3c:	4603      	mov	r3, r0
   23f3e:	f88d 3007 	strb.w	r3, [sp, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   23f42:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23f46:	3b01      	subs	r3, #1
   23f48:	015b      	lsls	r3, r3, #5
   23f4a:	4a0e      	ldr	r2, [pc, #56]	; (23f84 <appConnUpdateTimerStart+0x4c>)
   23f4c:	4413      	add	r3, r2
   23f4e:	9303      	str	r3, [sp, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   23f50:	4b0d      	ldr	r3, [pc, #52]	; (23f88 <appConnUpdateTimerStart+0x50>)
   23f52:	781a      	ldrb	r2, [r3, #0]
   23f54:	9b03      	ldr	r3, [sp, #12]
   23f56:	761a      	strb	r2, [r3, #24]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   23f58:	9b03      	ldr	r3, [sp, #12]
   23f5a:	2210      	movs	r2, #16
   23f5c:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.param = connId;
   23f5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23f62:	b29a      	uxth	r2, r3
   23f64:	9b03      	ldr	r3, [sp, #12]
   23f66:	835a      	strh	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   23f68:	9b03      	ldr	r3, [sp, #12]
   23f6a:	f103 0210 	add.w	r2, r3, #16
   23f6e:	4b07      	ldr	r3, [pc, #28]	; (23f8c <appConnUpdateTimerStart+0x54>)
   23f70:	681b      	ldr	r3, [r3, #0]
   23f72:	681b      	ldr	r3, [r3, #0]
   23f74:	4619      	mov	r1, r3
   23f76:	4610      	mov	r0, r2
   23f78:	f7f4 fe0e 	bl	18b98 <WsfTimerStartMs>
}
   23f7c:	bf00      	nop
   23f7e:	b005      	add	sp, #20
   23f80:	f85d fb04 	ldr.w	pc, [sp], #4
   23f84:	10009770 	.word	0x10009770
   23f88:	1000975c 	.word	0x1000975c
   23f8c:	10009744 	.word	0x10009744

00023f90 <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   23f90:	b500      	push	{lr}
   23f92:	b083      	sub	sp, #12
   23f94:	9001      	str	r0, [sp, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   23f96:	4b07      	ldr	r3, [pc, #28]	; (23fb4 <appConnUpdateTimerStop+0x24>)
   23f98:	681b      	ldr	r3, [r3, #0]
   23f9a:	681b      	ldr	r3, [r3, #0]
   23f9c:	2b00      	cmp	r3, #0
   23f9e:	d004      	beq.n	23faa <appConnUpdateTimerStop+0x1a>
  {
    WsfTimerStop(&pCb->updateTimer);
   23fa0:	9b01      	ldr	r3, [sp, #4]
   23fa2:	3310      	adds	r3, #16
   23fa4:	4618      	mov	r0, r3
   23fa6:	f7f4 fe0b 	bl	18bc0 <WsfTimerStop>
  }
}
   23faa:	bf00      	nop
   23fac:	b003      	add	sp, #12
   23fae:	f85d fb04 	ldr.w	pc, [sp], #4
   23fb2:	bf00      	nop
   23fb4:	10009744 	.word	0x10009744

00023fb8 <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   23fb8:	b500      	push	{lr}
   23fba:	b085      	sub	sp, #20
   23fbc:	9001      	str	r0, [sp, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   23fbe:	4b17      	ldr	r3, [pc, #92]	; (2401c <appSlaveResolveAddr+0x64>)
   23fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   23fc4:	2b00      	cmp	r3, #0
   23fc6:	d124      	bne.n	24012 <appSlaveResolveAddr+0x5a>
  {
    return;
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   23fc8:	2000      	movs	r0, #0
   23fca:	f7f8 f9fb 	bl	1c3c4 <AppDbGetNextRecord>
   23fce:	9003      	str	r0, [sp, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   23fd0:	9b03      	ldr	r3, [sp, #12]
   23fd2:	2b00      	cmp	r3, #0
   23fd4:	d01e      	beq.n	24014 <appSlaveResolveAddr+0x5c>
   23fd6:	2200      	movs	r2, #0
   23fd8:	2104      	movs	r1, #4
   23fda:	9803      	ldr	r0, [sp, #12]
   23fdc:	f7f8 fb14 	bl	1c608 <AppDbGetKey>
   23fe0:	9002      	str	r0, [sp, #8]
   23fe2:	9b02      	ldr	r3, [sp, #8]
   23fe4:	2b00      	cmp	r3, #0
   23fe6:	d015      	beq.n	24014 <appSlaveResolveAddr+0x5c>
  {
    /* resolve advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   23fe8:	9b01      	ldr	r3, [sp, #4]
   23fea:	f103 000a 	add.w	r0, r3, #10
   23fee:	9902      	ldr	r1, [sp, #8]
   23ff0:	9b01      	ldr	r3, [sp, #4]
   23ff2:	881b      	ldrh	r3, [r3, #0]
   23ff4:	461a      	mov	r2, r3
   23ff6:	f7ee fa35 	bl	12464 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   23ffa:	4a08      	ldr	r2, [pc, #32]	; (2401c <appSlaveResolveAddr+0x64>)
   23ffc:	9b03      	ldr	r3, [sp, #12]
   23ffe:	6393      	str	r3, [r2, #56]	; 0x38
    appSlaveCb.inProgress = TRUE;
   24000:	4b06      	ldr	r3, [pc, #24]	; (2401c <appSlaveResolveAddr+0x64>)
   24002:	2201      	movs	r2, #1
   24004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    appSlaveCb.findLtk = FALSE;
   24008:	4b04      	ldr	r3, [pc, #16]	; (2401c <appSlaveResolveAddr+0x64>)
   2400a:	2200      	movs	r2, #0
   2400c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   24010:	e000      	b.n	24014 <appSlaveResolveAddr+0x5c>
    return;
   24012:	bf00      	nop
  }
}
   24014:	b005      	add	sp, #20
   24016:	f85d fb04 	ldr.w	pc, [sp], #4
   2401a:	bf00      	nop
   2401c:	100097d0 	.word	0x100097d0

00024020 <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   24020:	b500      	push	{lr}
   24022:	b085      	sub	sp, #20
   24024:	9001      	str	r0, [sp, #4]
  dmSecKey_t  *pKey = NULL;
   24026:	2300      	movs	r3, #0
   24028:	9303      	str	r3, [sp, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   2402a:	9b01      	ldr	r3, [sp, #4]
   2402c:	681b      	ldr	r3, [r3, #0]
   2402e:	2b00      	cmp	r3, #0
   24030:	d008      	beq.n	24044 <appSecRspLtk+0x24>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   24032:	9b01      	ldr	r3, [sp, #4]
   24034:	681b      	ldr	r3, [r3, #0]
   24036:	f10d 020b 	add.w	r2, sp, #11
   2403a:	2101      	movs	r1, #1
   2403c:	4618      	mov	r0, r3
   2403e:	f7f8 fae3 	bl	1c608 <AppDbGetKey>
   24042:	9003      	str	r0, [sp, #12]
  }

  if (pKey != NULL)
   24044:	9b03      	ldr	r3, [sp, #12]
   24046:	2b00      	cmp	r3, #0
   24048:	d012      	beq.n	24070 <appSecRspLtk+0x50>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   2404a:	9b01      	ldr	r3, [sp, #4]
   2404c:	795b      	ldrb	r3, [r3, #5]
   2404e:	2b00      	cmp	r3, #0
   24050:	bf0c      	ite	eq
   24052:	2301      	moveq	r3, #1
   24054:	2300      	movne	r3, #0
   24056:	b2db      	uxtb	r3, r3
   24058:	461a      	mov	r2, r3
   2405a:	9b01      	ldr	r3, [sp, #4]
   2405c:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   2405e:	9b01      	ldr	r3, [sp, #4]
   24060:	7918      	ldrb	r0, [r3, #4]
   24062:	f89d 200b 	ldrb.w	r2, [sp, #11]
   24066:	9b03      	ldr	r3, [sp, #12]
   24068:	2101      	movs	r1, #1
   2406a:	f7ee fdbf 	bl	12bec <DmSecLtkRsp>
    pCb->bondByLtk = FALSE;

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
  }
}
   2406e:	e009      	b.n	24084 <appSecRspLtk+0x64>
    pCb->bondByLtk = FALSE;
   24070:	9b01      	ldr	r3, [sp, #4]
   24072:	2200      	movs	r2, #0
   24074:	719a      	strb	r2, [r3, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   24076:	9b01      	ldr	r3, [sp, #4]
   24078:	7918      	ldrb	r0, [r3, #4]
   2407a:	2300      	movs	r3, #0
   2407c:	2200      	movs	r2, #0
   2407e:	2100      	movs	r1, #0
   24080:	f7ee fdb4 	bl	12bec <DmSecLtkRsp>
}
   24084:	bf00      	nop
   24086:	b005      	add	sp, #20
   24088:	f85d fb04 	ldr.w	pc, [sp], #4

0002408c <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   2408c:	b500      	push	{lr}
   2408e:	b083      	sub	sp, #12
   24090:	9001      	str	r0, [sp, #4]
   24092:	9100      	str	r1, [sp, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   24094:	9900      	ldr	r1, [sp, #0]
   24096:	9801      	ldr	r0, [sp, #4]
   24098:	f000 f830 	bl	240fc <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   2409c:	4b08      	ldr	r3, [pc, #32]	; (240c0 <appSlaveConnOpen+0x34>)
   2409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   240a0:	2b00      	cmp	r3, #0
   240a2:	d003      	beq.n	240ac <appSlaveConnOpen+0x20>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   240a4:	4b06      	ldr	r3, [pc, #24]	; (240c0 <appSlaveConnOpen+0x34>)
   240a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   240a8:	9801      	ldr	r0, [sp, #4]
   240aa:	4798      	blx	r3
  }

  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   240ac:	9b01      	ldr	r3, [sp, #4]
   240ae:	881b      	ldrh	r3, [r3, #0]
   240b0:	b2db      	uxtb	r3, r3
   240b2:	4618      	mov	r0, r3
   240b4:	f7ed fa1c 	bl	114f0 <DmReadRemoteFeatures>
}
   240b8:	bf00      	nop
   240ba:	b003      	add	sp, #12
   240bc:	f85d fb04 	ldr.w	pc, [sp], #4
   240c0:	100097d0 	.word	0x100097d0

000240c4 <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   240c4:	b500      	push	{lr}
   240c6:	b083      	sub	sp, #12
   240c8:	9001      	str	r0, [sp, #4]
   240ca:	9100      	str	r1, [sp, #0]
  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   240cc:	9b00      	ldr	r3, [sp, #0]
   240ce:	681b      	ldr	r3, [r3, #0]
   240d0:	4618      	mov	r0, r3
   240d2:	f7ff fc47 	bl	23964 <AppUpdatePrivacyMode>

  /* process connection close event */
  appSlaveProcConnClose(pMsg, pCb);
   240d6:	9900      	ldr	r1, [sp, #0]
   240d8:	9801      	ldr	r0, [sp, #4]
   240da:	f000 f84b 	bl	24174 <appSlaveProcConnClose>

  if (appSlaveCb.advRestartCback != NULL)
   240de:	4b06      	ldr	r3, [pc, #24]	; (240f8 <appSlaveConnClose+0x34>)
   240e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   240e2:	2b00      	cmp	r3, #0
   240e4:	d003      	beq.n	240ee <appSlaveConnClose+0x2a>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   240e6:	4b04      	ldr	r3, [pc, #16]	; (240f8 <appSlaveConnClose+0x34>)
   240e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   240ea:	9801      	ldr	r0, [sp, #4]
   240ec:	4798      	blx	r3
  }
}
   240ee:	bf00      	nop
   240f0:	b003      	add	sp, #12
   240f2:	f85d fb04 	ldr.w	pc, [sp], #4
   240f6:	bf00      	nop
   240f8:	100097d0 	.word	0x100097d0

000240fc <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   240fc:	b500      	push	{lr}
   240fe:	b083      	sub	sp, #12
   24100:	9001      	str	r0, [sp, #4]
   24102:	9100      	str	r1, [sp, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   24104:	9b01      	ldr	r3, [sp, #4]
   24106:	881b      	ldrh	r3, [r3, #0]
   24108:	b2da      	uxtb	r2, r3
   2410a:	9b00      	ldr	r3, [sp, #0]
   2410c:	711a      	strb	r2, [r3, #4]

  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   2410e:	4b18      	ldr	r3, [pc, #96]	; (24170 <appSlaveProcConnOpen+0x74>)
   24110:	681b      	ldr	r3, [r3, #0]
   24112:	681b      	ldr	r3, [r3, #0]
   24114:	2b00      	cmp	r3, #0
   24116:	d026      	beq.n	24166 <appSlaveProcConnOpen+0x6a>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   24118:	9b01      	ldr	r3, [sp, #4]
   2411a:	8a1a      	ldrh	r2, [r3, #16]
   2411c:	4b14      	ldr	r3, [pc, #80]	; (24170 <appSlaveProcConnOpen+0x74>)
   2411e:	681b      	ldr	r3, [r3, #0]
   24120:	889b      	ldrh	r3, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   24122:	429a      	cmp	r2, r3
   24124:	d314      	bcc.n	24150 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   24126:	9b01      	ldr	r3, [sp, #4]
   24128:	8a1a      	ldrh	r2, [r3, #16]
   2412a:	4b11      	ldr	r3, [pc, #68]	; (24170 <appSlaveProcConnOpen+0x74>)
   2412c:	681b      	ldr	r3, [r3, #0]
   2412e:	88db      	ldrh	r3, [r3, #6]
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   24130:	429a      	cmp	r2, r3
   24132:	d80d      	bhi.n	24150 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   24134:	9b01      	ldr	r3, [sp, #4]
   24136:	8a5a      	ldrh	r2, [r3, #18]
   24138:	4b0d      	ldr	r3, [pc, #52]	; (24170 <appSlaveProcConnOpen+0x74>)
   2413a:	681b      	ldr	r3, [r3, #0]
   2413c:	891b      	ldrh	r3, [r3, #8]
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   2413e:	429a      	cmp	r2, r3
   24140:	d106      	bne.n	24150 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   24142:	9b01      	ldr	r3, [sp, #4]
   24144:	8a9a      	ldrh	r2, [r3, #20]
   24146:	4b0a      	ldr	r3, [pc, #40]	; (24170 <appSlaveProcConnOpen+0x74>)
   24148:	681b      	ldr	r3, [r3, #0]
   2414a:	895b      	ldrh	r3, [r3, #10]
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   2414c:	429a      	cmp	r2, r3
   2414e:	d00a      	beq.n	24166 <appSlaveProcConnOpen+0x6a>
  {
    pCb->connWasIdle = FALSE;
   24150:	9b00      	ldr	r3, [sp, #0]
   24152:	2200      	movs	r2, #0
   24154:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   24156:	9b00      	ldr	r3, [sp, #0]
   24158:	2200      	movs	r2, #0
   2415a:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   2415c:	9b00      	ldr	r3, [sp, #0]
   2415e:	791b      	ldrb	r3, [r3, #4]
   24160:	4618      	mov	r0, r3
   24162:	f7ff fee9 	bl	23f38 <appConnUpdateTimerStart>
  }
}
   24166:	bf00      	nop
   24168:	b003      	add	sp, #12
   2416a:	f85d fb04 	ldr.w	pc, [sp], #4
   2416e:	bf00      	nop
   24170:	10009744 	.word	0x10009744

00024174 <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24174:	b500      	push	{lr}
   24176:	b085      	sub	sp, #20
   24178:	9001      	str	r0, [sp, #4]
   2417a:	9100      	str	r1, [sp, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   2417c:	9800      	ldr	r0, [sp, #0]
   2417e:	f7ff ff07 	bl	23f90 <appConnUpdateTimerStop>

  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   24182:	9b00      	ldr	r3, [sp, #0]
   24184:	2200      	movs	r2, #0
   24186:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   24188:	9b00      	ldr	r3, [sp, #0]
   2418a:	2200      	movs	r2, #0
   2418c:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   2418e:	4b13      	ldr	r3, [pc, #76]	; (241dc <appSlaveProcConnClose+0x68>)
   24190:	2200      	movs	r2, #0
   24192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   24196:	9b00      	ldr	r3, [sp, #0]
   24198:	7a5b      	ldrb	r3, [r3, #9]
   2419a:	2b00      	cmp	r3, #0
   2419c:	d019      	beq.n	241d2 <appSlaveProcConnClose+0x5e>
  {
    pCb->setConnectable = FALSE;
   2419e:	9b00      	ldr	r3, [sp, #0]
   241a0:	2200      	movs	r2, #0
   241a2:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   241a4:	4b0d      	ldr	r3, [pc, #52]	; (241dc <appSlaveProcConnClose+0x68>)
   241a6:	2200      	movs	r2, #0
   241a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   241ac:	2300      	movs	r3, #0
   241ae:	f88d 300f 	strb.w	r3, [sp, #15]
   241b2:	e00a      	b.n	241ca <appSlaveProcConnClose+0x56>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   241b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   241b8:	2100      	movs	r1, #0
   241ba:	4618      	mov	r0, r3
   241bc:	f7ff fd54 	bl	23c68 <appSlaveForceAdvDataSync>
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   241c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   241c4:	3301      	adds	r3, #1
   241c6:	f88d 300f 	strb.w	r3, [sp, #15]
   241ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
   241ce:	2b00      	cmp	r3, #0
   241d0:	d0f0      	beq.n	241b4 <appSlaveProcConnClose+0x40>
    }
  }
}
   241d2:	bf00      	nop
   241d4:	b005      	add	sp, #20
   241d6:	f85d fb04 	ldr.w	pc, [sp], #4
   241da:	bf00      	nop
   241dc:	100097d0 	.word	0x100097d0

000241e0 <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   241e0:	b500      	push	{lr}
   241e2:	b083      	sub	sp, #12
   241e4:	9001      	str	r0, [sp, #4]
   241e6:	9100      	str	r1, [sp, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   241e8:	4b1a      	ldr	r3, [pc, #104]	; (24254 <appSlaveConnUpdate+0x74>)
   241ea:	681b      	ldr	r3, [r3, #0]
   241ec:	681b      	ldr	r3, [r3, #0]
   241ee:	2b00      	cmp	r3, #0
   241f0:	d02b      	beq.n	2424a <appSlaveConnUpdate+0x6a>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   241f2:	9b01      	ldr	r3, [sp, #4]
   241f4:	78db      	ldrb	r3, [r3, #3]
   241f6:	2b00      	cmp	r3, #0
   241f8:	d117      	bne.n	2422a <appSlaveConnUpdate+0x4a>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   241fa:	4b16      	ldr	r3, [pc, #88]	; (24254 <appSlaveConnUpdate+0x74>)
   241fc:	681b      	ldr	r3, [r3, #0]
   241fe:	889a      	ldrh	r2, [r3, #4]
   24200:	9b01      	ldr	r3, [sp, #4]
   24202:	891b      	ldrh	r3, [r3, #8]
   24204:	429a      	cmp	r2, r3
   24206:	d80a      	bhi.n	2421e <appSlaveConnUpdate+0x3e>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   24208:	4b12      	ldr	r3, [pc, #72]	; (24254 <appSlaveConnUpdate+0x74>)
   2420a:	681b      	ldr	r3, [r3, #0]
   2420c:	88da      	ldrh	r2, [r3, #6]
   2420e:	9b01      	ldr	r3, [sp, #4]
   24210:	891b      	ldrh	r3, [r3, #8]
   24212:	429a      	cmp	r2, r3
   24214:	d303      	bcc.n	2421e <appSlaveConnUpdate+0x3e>
      {
        appConnUpdateTimerStop(pCb);
   24216:	9800      	ldr	r0, [sp, #0]
   24218:	f7ff feba 	bl	23f90 <appConnUpdateTimerStop>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
    }
  }
}
   2421c:	e015      	b.n	2424a <appSlaveConnUpdate+0x6a>
        appConnUpdateTimerStart(pCb->connId);
   2421e:	9b00      	ldr	r3, [sp, #0]
   24220:	791b      	ldrb	r3, [r3, #4]
   24222:	4618      	mov	r0, r3
   24224:	f7ff fe88 	bl	23f38 <appConnUpdateTimerStart>
}
   24228:	e00f      	b.n	2424a <appSlaveConnUpdate+0x6a>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   2422a:	9b01      	ldr	r3, [sp, #4]
   2422c:	78db      	ldrb	r3, [r3, #3]
   2422e:	2b0c      	cmp	r3, #12
   24230:	d00b      	beq.n	2424a <appSlaveConnUpdate+0x6a>
   24232:	9b00      	ldr	r3, [sp, #0]
   24234:	7b1a      	ldrb	r2, [r3, #12]
   24236:	4b07      	ldr	r3, [pc, #28]	; (24254 <appSlaveConnUpdate+0x74>)
   24238:	681b      	ldr	r3, [r3, #0]
   2423a:	7b1b      	ldrb	r3, [r3, #12]
   2423c:	429a      	cmp	r2, r3
   2423e:	d204      	bcs.n	2424a <appSlaveConnUpdate+0x6a>
      appConnUpdateTimerStart(pCb->connId);
   24240:	9b00      	ldr	r3, [sp, #0]
   24242:	791b      	ldrb	r3, [r3, #4]
   24244:	4618      	mov	r0, r3
   24246:	f7ff fe77 	bl	23f38 <appConnUpdateTimerStart>
}
   2424a:	bf00      	nop
   2424c:	b003      	add	sp, #12
   2424e:	f85d fb04 	ldr.w	pc, [sp], #4
   24252:	bf00      	nop
   24254:	10009744 	.word	0x10009744

00024258 <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24258:	b500      	push	{lr}
   2425a:	b085      	sub	sp, #20
   2425c:	9001      	str	r0, [sp, #4]
   2425e:	9100      	str	r1, [sp, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   24260:	4b26      	ldr	r3, [pc, #152]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   24262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   24266:	2b00      	cmp	r3, #0
   24268:	d044      	beq.n	242f4 <appSlaveResolvedAddrInd+0x9c>
  {
    return;
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   2426a:	9b01      	ldr	r3, [sp, #4]
   2426c:	78db      	ldrb	r3, [r3, #3]
   2426e:	2b00      	cmp	r3, #0
   24270:	d110      	bne.n	24294 <appSlaveResolvedAddrInd+0x3c>
  {
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   24272:	4b22      	ldr	r3, [pc, #136]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   24274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   24276:	9b00      	ldr	r3, [sp, #0]
   24278:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   2427a:	4b20      	ldr	r3, [pc, #128]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   2427c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   24280:	2b00      	cmp	r3, #0
   24282:	d032      	beq.n	242ea <appSlaveResolvedAddrInd+0x92>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   24284:	9800      	ldr	r0, [sp, #0]
   24286:	f7ff fecb 	bl	24020 <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   2428a:	4b1c      	ldr	r3, [pc, #112]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   2428c:	2200      	movs	r2, #0
   2428e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   24292:	e02a      	b.n	242ea <appSlaveResolvedAddrInd+0x92>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   24294:	9b01      	ldr	r3, [sp, #4]
   24296:	78db      	ldrb	r3, [r3, #3]
   24298:	2b05      	cmp	r3, #5
   2429a:	d126      	bne.n	242ea <appSlaveResolvedAddrInd+0x92>
   2429c:	4b17      	ldr	r3, [pc, #92]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   2429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   242a0:	2b00      	cmp	r3, #0
   242a2:	d022      	beq.n	242ea <appSlaveResolvedAddrInd+0x92>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   242a4:	4b15      	ldr	r3, [pc, #84]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   242a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   242a8:	4618      	mov	r0, r3
   242aa:	f7f8 f88b 	bl	1c3c4 <AppDbGetNextRecord>
   242ae:	4602      	mov	r2, r0
   242b0:	4b12      	ldr	r3, [pc, #72]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   242b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   242b4:	4b11      	ldr	r3, [pc, #68]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   242b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   242b8:	2b00      	cmp	r3, #0
   242ba:	d016      	beq.n	242ea <appSlaveResolvedAddrInd+0x92>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   242bc:	4b0f      	ldr	r3, [pc, #60]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   242be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   242c0:	2200      	movs	r2, #0
   242c2:	2104      	movs	r1, #4
   242c4:	4618      	mov	r0, r3
   242c6:	f7f8 f99f 	bl	1c608 <AppDbGetKey>
   242ca:	9003      	str	r0, [sp, #12]
   242cc:	9b03      	ldr	r3, [sp, #12]
   242ce:	2b00      	cmp	r3, #0
   242d0:	d00b      	beq.n	242ea <appSlaveResolvedAddrInd+0x92>
    {
      /* resolve RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   242d2:	9b00      	ldr	r3, [sp, #0]
   242d4:	791b      	ldrb	r3, [r3, #4]
   242d6:	4618      	mov	r0, r3
   242d8:	f7ed fa42 	bl	11760 <DmConnPeerAddr>
   242dc:	9903      	ldr	r1, [sp, #12]
   242de:	9b01      	ldr	r3, [sp, #4]
   242e0:	881b      	ldrh	r3, [r3, #0]
   242e2:	461a      	mov	r2, r3
   242e4:	f7ee f8be 	bl	12464 <DmPrivResolveAddr>

      /* not done yet */
      return;
   242e8:	e005      	b.n	242f6 <appSlaveResolvedAddrInd+0x9e>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   242ea:	4b04      	ldr	r3, [pc, #16]	; (242fc <appSlaveResolvedAddrInd+0xa4>)
   242ec:	2200      	movs	r2, #0
   242ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   242f2:	e000      	b.n	242f6 <appSlaveResolvedAddrInd+0x9e>
    return;
   242f4:	bf00      	nop
}
   242f6:	b005      	add	sp, #20
   242f8:	f85d fb04 	ldr.w	pc, [sp], #4
   242fc:	100097d0 	.word	0x100097d0

00024300 <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24300:	b500      	push	{lr}
   24302:	b087      	sub	sp, #28
   24304:	9001      	str	r0, [sp, #4]
   24306:	9100      	str	r1, [sp, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   24308:	4b19      	ldr	r3, [pc, #100]	; (24370 <appSlaveRemoteConnParamReq+0x70>)
   2430a:	681b      	ldr	r3, [r3, #0]
   2430c:	781b      	ldrb	r3, [r3, #0]
   2430e:	2b00      	cmp	r3, #0
   24310:	d11e      	bne.n	24350 <appSlaveRemoteConnParamReq+0x50>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   24312:	9b01      	ldr	r3, [sp, #4]
   24314:	88db      	ldrh	r3, [r3, #6]
   24316:	f8ad 300c 	strh.w	r3, [sp, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   2431a:	9b01      	ldr	r3, [sp, #4]
   2431c:	891b      	ldrh	r3, [r3, #8]
   2431e:	f8ad 300e 	strh.w	r3, [sp, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   24322:	9b01      	ldr	r3, [sp, #4]
   24324:	895b      	ldrh	r3, [r3, #10]
   24326:	f8ad 3010 	strh.w	r3, [sp, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   2432a:	9b01      	ldr	r3, [sp, #4]
   2432c:	899b      	ldrh	r3, [r3, #12]
   2432e:	f8ad 3012 	strh.w	r3, [sp, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   24332:	2300      	movs	r3, #0
   24334:	f8ad 3016 	strh.w	r3, [sp, #22]
   24338:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2433c:	f8ad 3014 	strh.w	r3, [sp, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   24340:	9b00      	ldr	r3, [sp, #0]
   24342:	791b      	ldrb	r3, [r3, #4]
   24344:	aa03      	add	r2, sp, #12
   24346:	4611      	mov	r1, r2
   24348:	4618      	mov	r0, r3
   2434a:	f7ed f95d 	bl	11608 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   2434e:	e00a      	b.n	24366 <appSlaveRemoteConnParamReq+0x66>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   24350:	4b07      	ldr	r3, [pc, #28]	; (24370 <appSlaveRemoteConnParamReq+0x70>)
   24352:	681b      	ldr	r3, [r3, #0]
   24354:	781b      	ldrb	r3, [r3, #0]
   24356:	2b01      	cmp	r3, #1
   24358:	d105      	bne.n	24366 <appSlaveRemoteConnParamReq+0x66>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   2435a:	9b00      	ldr	r3, [sp, #0]
   2435c:	791b      	ldrb	r3, [r3, #4]
   2435e:	2111      	movs	r1, #17
   24360:	4618      	mov	r0, r3
   24362:	f7ed f979 	bl	11658 <DmRemoteConnParamReqNegReply>
}
   24366:	bf00      	nop
   24368:	b007      	add	sp, #28
   2436a:	f85d fb04 	ldr.w	pc, [sp], #4
   2436e:	bf00      	nop
   24370:	10002bcc 	.word	0x10002bcc

00024374 <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24374:	b500      	push	{lr}
   24376:	b083      	sub	sp, #12
   24378:	9001      	str	r0, [sp, #4]
   2437a:	9100      	str	r1, [sp, #0]
  /* initialize state variables */
  // don't reset bonded flag which will overwrite saved bonded status.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   2437c:	9b00      	ldr	r3, [sp, #0]
   2437e:	2200      	movs	r2, #0
   24380:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   24382:	9b00      	ldr	r3, [sp, #0]
   24384:	2200      	movs	r2, #0
   24386:	71da      	strb	r2, [r3, #7]

  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   24388:	9b01      	ldr	r3, [sp, #4]
   2438a:	7a5a      	ldrb	r2, [r3, #9]
   2438c:	9b01      	ldr	r3, [sp, #4]
   2438e:	330a      	adds	r3, #10
   24390:	4619      	mov	r1, r3
   24392:	4610      	mov	r0, r2
   24394:	f7f8 f8c4 	bl	1c520 <AppDbFindByAddr>
   24398:	4602      	mov	r2, r0
   2439a:	9b00      	ldr	r3, [sp, #0]
   2439c:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   2439e:	9b00      	ldr	r3, [sp, #0]
   243a0:	681b      	ldr	r3, [r3, #0]
   243a2:	2b00      	cmp	r3, #0
   243a4:	d10c      	bne.n	243c0 <appSlaveSecConnOpen+0x4c>
   243a6:	9b01      	ldr	r3, [sp, #4]
   243a8:	7a5b      	ldrb	r3, [r3, #9]
   243aa:	2b01      	cmp	r3, #1
   243ac:	d108      	bne.n	243c0 <appSlaveSecConnOpen+0x4c>
   243ae:	9b01      	ldr	r3, [sp, #4]
   243b0:	7bdb      	ldrb	r3, [r3, #15]
   243b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   243b6:	2b40      	cmp	r3, #64	; 0x40
   243b8:	d102      	bne.n	243c0 <appSlaveSecConnOpen+0x4c>
  {
    /* resolve master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   243ba:	9801      	ldr	r0, [sp, #4]
   243bc:	f7ff fdfc 	bl	23fb8 <appSlaveResolveAddr>
  }

  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   243c0:	4b0b      	ldr	r3, [pc, #44]	; (243f0 <appSlaveSecConnOpen+0x7c>)
   243c2:	681b      	ldr	r3, [r3, #0]
   243c4:	791b      	ldrb	r3, [r3, #4]
   243c6:	2b00      	cmp	r3, #0
   243c8:	d00e      	beq.n	243e8 <appSlaveSecConnOpen+0x74>
   243ca:	f7f8 f883 	bl	1c4d4 <AppDbCheckBonded>
   243ce:	4603      	mov	r3, r0
   243d0:	2b00      	cmp	r3, #0
   243d2:	d009      	beq.n	243e8 <appSlaveSecConnOpen+0x74>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   243d4:	9b01      	ldr	r3, [sp, #4]
   243d6:	881b      	ldrh	r3, [r3, #0]
   243d8:	b2da      	uxtb	r2, r3
   243da:	4b05      	ldr	r3, [pc, #20]	; (243f0 <appSlaveSecConnOpen+0x7c>)
   243dc:	681b      	ldr	r3, [r3, #0]
   243de:	781b      	ldrb	r3, [r3, #0]
   243e0:	4619      	mov	r1, r3
   243e2:	4610      	mov	r0, r2
   243e4:	f7ee fbdf 	bl	12ba6 <DmSecSlaveReq>
  }
}
   243e8:	bf00      	nop
   243ea:	b003      	add	sp, #12
   243ec:	f85d fb04 	ldr.w	pc, [sp], #4
   243f0:	10009760 	.word	0x10009760

000243f4 <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   243f4:	b500      	push	{lr}
   243f6:	b083      	sub	sp, #12
   243f8:	9001      	str	r0, [sp, #4]
   243fa:	9100      	str	r1, [sp, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   243fc:	9b00      	ldr	r3, [sp, #0]
   243fe:	681b      	ldr	r3, [r3, #0]
   24400:	2b00      	cmp	r3, #0
   24402:	d004      	beq.n	2440e <appSecConnClose+0x1a>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   24404:	9b00      	ldr	r3, [sp, #0]
   24406:	681b      	ldr	r3, [r3, #0]
   24408:	4618      	mov	r0, r3
   2440a:	f7f8 f829 	bl	1c460 <AppDbCheckValidRecord>
  }
}
   2440e:	bf00      	nop
   24410:	b003      	add	sp, #12
   24412:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00024418 <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24418:	b510      	push	{r4, lr}
   2441a:	b086      	sub	sp, #24
   2441c:	9003      	str	r0, [sp, #12]
   2441e:	9102      	str	r1, [sp, #8]
  uint8_t rKeyDist;

  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   24420:	4b43      	ldr	r3, [pc, #268]	; (24530 <appSecPairInd+0x118>)
   24422:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   24426:	2b00      	cmp	r3, #0
   24428:	d111      	bne.n	2444e <appSecPairInd+0x36>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   2442a:	9b03      	ldr	r3, [sp, #12]
   2442c:	791b      	ldrb	r3, [r3, #4]
   2442e:	f003 0301 	and.w	r3, r3, #1
  if (appSlaveCb.bondable ||
   24432:	2b00      	cmp	r3, #0
   24434:	d00b      	beq.n	2444e <appSecPairInd+0x36>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   24436:	9b02      	ldr	r3, [sp, #8]
   24438:	795b      	ldrb	r3, [r3, #5]
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   2443a:	2b00      	cmp	r3, #0
   2443c:	d06f      	beq.n	2451e <appSecPairInd+0x106>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   2443e:	9b02      	ldr	r3, [sp, #8]
   24440:	791b      	ldrb	r3, [r3, #4]
   24442:	4618      	mov	r0, r3
   24444:	f7ed f9ee 	bl	11824 <DmConnSecLevel>
   24448:	4603      	mov	r3, r0
   2444a:	2b00      	cmp	r3, #0
   2444c:	d167      	bne.n	2451e <appSecPairInd+0x106>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   2444e:	9b03      	ldr	r3, [sp, #12]
   24450:	791a      	ldrb	r2, [r3, #4]
   24452:	4b38      	ldr	r3, [pc, #224]	; (24534 <appSecPairInd+0x11c>)
   24454:	681b      	ldr	r3, [r3, #0]
   24456:	781b      	ldrb	r3, [r3, #0]
   24458:	4013      	ands	r3, r2
   2445a:	b2db      	uxtb	r3, r3
   2445c:	f003 0301 	and.w	r3, r3, #1
   24460:	2b00      	cmp	r3, #0
   24462:	bf14      	ite	ne
   24464:	2301      	movne	r3, #1
   24466:	2300      	moveq	r3, #0
   24468:	b2db      	uxtb	r3, r3
   2446a:	461a      	mov	r2, r3
   2446c:	9b02      	ldr	r3, [sp, #8]
   2446e:	71da      	strb	r2, [r3, #7]

    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   24470:	9b02      	ldr	r3, [sp, #8]
   24472:	79db      	ldrb	r3, [r3, #7]
   24474:	2b00      	cmp	r3, #0
   24476:	d018      	beq.n	244aa <appSecPairInd+0x92>
   24478:	9b02      	ldr	r3, [sp, #8]
   2447a:	681b      	ldr	r3, [r3, #0]
   2447c:	2b00      	cmp	r3, #0
   2447e:	d114      	bne.n	244aa <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId), FALSE);
   24480:	9b02      	ldr	r3, [sp, #8]
   24482:	791b      	ldrb	r3, [r3, #4]
   24484:	4618      	mov	r0, r3
   24486:	f7ed f957 	bl	11738 <DmConnPeerAddrType>
   2448a:	4603      	mov	r3, r0
   2448c:	461c      	mov	r4, r3
   2448e:	9b02      	ldr	r3, [sp, #8]
   24490:	791b      	ldrb	r3, [r3, #4]
   24492:	4618      	mov	r0, r3
   24494:	f7ed f964 	bl	11760 <DmConnPeerAddr>
   24498:	4603      	mov	r3, r0
   2449a:	2200      	movs	r2, #0
   2449c:	4619      	mov	r1, r3
   2449e:	4620      	mov	r0, r4
   244a0:	f7f7 ff30 	bl	1c304 <AppDbNewRecord>
   244a4:	4602      	mov	r2, r0
   244a6:	9b02      	ldr	r3, [sp, #8]
   244a8:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   244aa:	9b02      	ldr	r3, [sp, #8]
   244ac:	2200      	movs	r2, #0
   244ae:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   244b0:	4b20      	ldr	r3, [pc, #128]	; (24534 <appSecPairInd+0x11c>)
   244b2:	681b      	ldr	r3, [r3, #0]
   244b4:	789b      	ldrb	r3, [r3, #2]
   244b6:	f88d 3016 	strb.w	r3, [sp, #22]
    iKeyDist = pAppSecCfg->iKeyDist;
   244ba:	4b1e      	ldr	r3, [pc, #120]	; (24534 <appSecPairInd+0x11c>)
   244bc:	681b      	ldr	r3, [r3, #0]
   244be:	785b      	ldrb	r3, [r3, #1]
   244c0:	f88d 3017 	strb.w	r3, [sp, #23]

    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   244c4:	9b02      	ldr	r3, [sp, #8]
   244c6:	791b      	ldrb	r3, [r3, #4]
   244c8:	4618      	mov	r0, r3
   244ca:	f7ed f935 	bl	11738 <DmConnPeerAddrType>
   244ce:	4603      	mov	r3, r0
   244d0:	2b01      	cmp	r3, #1
   244d2:	d105      	bne.n	244e0 <appSecPairInd+0xc8>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   244d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   244d8:	f043 0302 	orr.w	r3, r3, #2
   244dc:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   244e0:	9b03      	ldr	r3, [sp, #12]
   244e2:	79da      	ldrb	r2, [r3, #7]
   244e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   244e8:	4013      	ands	r3, r2
   244ea:	f88d 3016 	strb.w	r3, [sp, #22]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   244ee:	9b03      	ldr	r3, [sp, #12]
   244f0:	799a      	ldrb	r2, [r3, #6]
   244f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   244f6:	4013      	ands	r3, r2
   244f8:	f88d 3017 	strb.w	r3, [sp, #23]

    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   244fc:	9b02      	ldr	r3, [sp, #8]
   244fe:	7918      	ldrb	r0, [r3, #4]
   24500:	4b0c      	ldr	r3, [pc, #48]	; (24534 <appSecPairInd+0x11c>)
   24502:	681b      	ldr	r3, [r3, #0]
   24504:	78d9      	ldrb	r1, [r3, #3]
   24506:	4b0b      	ldr	r3, [pc, #44]	; (24534 <appSecPairInd+0x11c>)
   24508:	681b      	ldr	r3, [r3, #0]
   2450a:	781a      	ldrb	r2, [r3, #0]
   2450c:	f89d 4017 	ldrb.w	r4, [sp, #23]
   24510:	f89d 3016 	ldrb.w	r3, [sp, #22]
   24514:	9300      	str	r3, [sp, #0]
   24516:	4623      	mov	r3, r4
   24518:	f7ee fb08 	bl	12b2c <DmSecPairRsp>
   2451c:	e005      	b.n	2452a <appSecPairInd+0x112>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   2451e:	9b02      	ldr	r3, [sp, #8]
   24520:	791b      	ldrb	r3, [r3, #4]
   24522:	2105      	movs	r1, #5
   24524:	4618      	mov	r0, r3
   24526:	f7ee f93b 	bl	127a0 <DmSecCancelReq>
  }
}
   2452a:	bf00      	nop
   2452c:	b006      	add	sp, #24
   2452e:	bd10      	pop	{r4, pc}
   24530:	100097d0 	.word	0x100097d0
   24534:	10009760 	.word	0x10009760

00024538 <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24538:	b500      	push	{lr}
   2453a:	b083      	sub	sp, #12
   2453c:	9001      	str	r0, [sp, #4]
   2453e:	9100      	str	r1, [sp, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   24540:	9b00      	ldr	r3, [sp, #0]
   24542:	79db      	ldrb	r3, [r3, #7]
   24544:	2b00      	cmp	r3, #0
   24546:	d012      	beq.n	2456e <appSecStoreKey+0x36>
   24548:	9b00      	ldr	r3, [sp, #0]
   2454a:	681b      	ldr	r3, [r3, #0]
   2454c:	2b00      	cmp	r3, #0
   2454e:	d00e      	beq.n	2456e <appSecStoreKey+0x36>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   24550:	9b00      	ldr	r3, [sp, #0]
   24552:	7ada      	ldrb	r2, [r3, #11]
   24554:	9b01      	ldr	r3, [sp, #4]
   24556:	7f9b      	ldrb	r3, [r3, #30]
   24558:	4313      	orrs	r3, r2
   2455a:	b2da      	uxtb	r2, r3
   2455c:	9b00      	ldr	r3, [sp, #0]
   2455e:	72da      	strb	r2, [r3, #11]

    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   24560:	9b00      	ldr	r3, [sp, #0]
   24562:	681b      	ldr	r3, [r3, #0]
   24564:	9a01      	ldr	r2, [sp, #4]
   24566:	4611      	mov	r1, r2
   24568:	4618      	mov	r0, r3
   2456a:	f7f8 f897 	bl	1c69c <AppDbSetKey>
  }
}
   2456e:	bf00      	nop
   24570:	b003      	add	sp, #12
   24572:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00024578 <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24578:	b500      	push	{lr}
   2457a:	b083      	sub	sp, #12
   2457c:	9001      	str	r0, [sp, #4]
   2457e:	9100      	str	r1, [sp, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   24580:	9b00      	ldr	r3, [sp, #0]
   24582:	79db      	ldrb	r3, [r3, #7]
   24584:	2b00      	cmp	r3, #0
   24586:	d023      	beq.n	245d0 <appSecPairCmpl+0x58>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   24588:	9b00      	ldr	r3, [sp, #0]
   2458a:	2201      	movs	r2, #1
   2458c:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   2458e:	9b00      	ldr	r3, [sp, #0]
   24590:	681b      	ldr	r3, [r3, #0]
   24592:	2b00      	cmp	r3, #0
   24594:	d007      	beq.n	245a6 <appSecPairCmpl+0x2e>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   24596:	9b00      	ldr	r3, [sp, #0]
   24598:	681a      	ldr	r2, [r3, #0]
   2459a:	9b00      	ldr	r3, [sp, #0]
   2459c:	7adb      	ldrb	r3, [r3, #11]
   2459e:	4619      	mov	r1, r3
   245a0:	4610      	mov	r0, r2
   245a2:	f7f7 ff4c 	bl	1c43e <AppDbValidateRecord>
    }

    /* if bonded clear bondable mode */
    AppSetBondable(FALSE);
   245a6:	2000      	movs	r0, #0
   245a8:	f000 fc60 	bl	24e6c <AppSetBondable>

    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   245ac:	4b0a      	ldr	r3, [pc, #40]	; (245d8 <appSecPairCmpl+0x60>)
   245ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   245b2:	2b01      	cmp	r3, #1
   245b4:	d102      	bne.n	245bc <appSecPairCmpl+0x44>
    {
      pCb->setConnectable = TRUE;
   245b6:	9b00      	ldr	r3, [sp, #0]
   245b8:	2201      	movs	r2, #1
   245ba:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   245bc:	9b00      	ldr	r3, [sp, #0]
   245be:	681b      	ldr	r3, [r3, #0]
   245c0:	2b00      	cmp	r3, #0
   245c2:	d005      	beq.n	245d0 <appSecPairCmpl+0x58>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   245c4:	9b00      	ldr	r3, [sp, #0]
   245c6:	791b      	ldrb	r3, [r3, #4]
   245c8:	4619      	mov	r1, r3
   245ca:	9801      	ldr	r0, [sp, #4]
   245cc:	f7ff f994 	bl	238f8 <AppAddDevToResList>
    }
  }
}
   245d0:	bf00      	nop
   245d2:	b003      	add	sp, #12
   245d4:	f85d fb04 	ldr.w	pc, [sp], #4
   245d8:	100097d0 	.word	0x100097d0

000245dc <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   245dc:	b082      	sub	sp, #8
   245de:	9001      	str	r0, [sp, #4]
   245e0:	9100      	str	r1, [sp, #0]
  return;
   245e2:	bf00      	nop
}
   245e4:	b002      	add	sp, #8
   245e6:	4770      	bx	lr

000245e8 <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   245e8:	b082      	sub	sp, #8
   245ea:	9001      	str	r0, [sp, #4]
   245ec:	9100      	str	r1, [sp, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   245ee:	9b00      	ldr	r3, [sp, #0]
   245f0:	799b      	ldrb	r3, [r3, #6]
   245f2:	2b00      	cmp	r3, #0
   245f4:	d009      	beq.n	2460a <appSecEncryptInd+0x22>
   245f6:	9b01      	ldr	r3, [sp, #4]
   245f8:	791b      	ldrb	r3, [r3, #4]
   245fa:	2b00      	cmp	r3, #0
   245fc:	d005      	beq.n	2460a <appSecEncryptInd+0x22>
  {
    pCb->bonded = TRUE;
   245fe:	9b00      	ldr	r3, [sp, #0]
   24600:	2201      	movs	r2, #1
   24602:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   24604:	9b00      	ldr	r3, [sp, #0]
   24606:	2200      	movs	r2, #0
   24608:	719a      	strb	r2, [r3, #6]
  }
}
   2460a:	bf00      	nop
   2460c:	b002      	add	sp, #8
   2460e:	4770      	bx	lr

00024610 <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24610:	b500      	push	{lr}
   24612:	b083      	sub	sp, #12
   24614:	9001      	str	r0, [sp, #4]
   24616:	9100      	str	r1, [sp, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   24618:	9b00      	ldr	r3, [sp, #0]
   2461a:	681b      	ldr	r3, [r3, #0]
   2461c:	2b00      	cmp	r3, #0
   2461e:	d12b      	bne.n	24678 <appSecFindLtk+0x68>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   24620:	9b01      	ldr	r3, [sp, #4]
   24622:	89db      	ldrh	r3, [r3, #14]
   24624:	2b00      	cmp	r3, #0
   24626:	d109      	bne.n	2463c <appSecFindLtk+0x2c>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   24628:	9b01      	ldr	r3, [sp, #4]
   2462a:	3306      	adds	r3, #6
   2462c:	2208      	movs	r2, #8
   2462e:	4915      	ldr	r1, [pc, #84]	; (24684 <appSecFindLtk+0x74>)
   24630:	4618      	mov	r0, r3
   24632:	f7e7 fd65 	bl	c100 <memcmp>
   24636:	4603      	mov	r3, r0
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   24638:	2b00      	cmp	r3, #0
   2463a:	d013      	beq.n	24664 <appSecFindLtk+0x54>
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   2463c:	9b01      	ldr	r3, [sp, #4]
   2463e:	89da      	ldrh	r2, [r3, #14]
   24640:	9b01      	ldr	r3, [sp, #4]
   24642:	3306      	adds	r3, #6
   24644:	4619      	mov	r1, r3
   24646:	4610      	mov	r0, r2
   24648:	f7f7 ffa6 	bl	1c598 <AppDbFindByLtkReq>
   2464c:	4602      	mov	r2, r0
   2464e:	9b00      	ldr	r3, [sp, #0]
   24650:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   24652:	9b00      	ldr	r3, [sp, #0]
   24654:	681b      	ldr	r3, [r3, #0]
   24656:	2b00      	cmp	r3, #0
   24658:	d00e      	beq.n	24678 <appSecFindLtk+0x68>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   2465a:	4b0b      	ldr	r3, [pc, #44]	; (24688 <appSecFindLtk+0x78>)
   2465c:	2200      	movs	r2, #0
   2465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   24662:	e009      	b.n	24678 <appSecFindLtk+0x68>
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   24664:	4b08      	ldr	r3, [pc, #32]	; (24688 <appSecFindLtk+0x78>)
   24666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   2466a:	2b00      	cmp	r3, #0
   2466c:	d004      	beq.n	24678 <appSecFindLtk+0x68>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   2466e:	4b06      	ldr	r3, [pc, #24]	; (24688 <appSecFindLtk+0x78>)
   24670:	2201      	movs	r2, #1
   24672:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      return;
   24676:	e002      	b.n	2467e <appSecFindLtk+0x6e>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   24678:	9800      	ldr	r0, [sp, #0]
   2467a:	f7ff fcd1 	bl	24020 <appSecRspLtk>
}
   2467e:	b003      	add	sp, #12
   24680:	f85d fb04 	ldr.w	pc, [sp], #4
   24684:	00029a78 	.word	0x00029a78
   24688:	100097d0 	.word	0x100097d0

0002468c <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   2468c:	b500      	push	{lr}
   2468e:	b083      	sub	sp, #12
   24690:	9001      	str	r0, [sp, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   24692:	9b01      	ldr	r3, [sp, #4]
   24694:	78db      	ldrb	r3, [r3, #3]
   24696:	2b00      	cmp	r3, #0
   24698:	d105      	bne.n	246a6 <appPrivSetAddrResEnableInd+0x1a>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   2469a:	f7ed fc73 	bl	11f84 <DmLlPrivEnabled>
   2469e:	4603      	mov	r3, r0
   246a0:	4618      	mov	r0, r3
   246a2:	f000 fd2b 	bl	250fc <SvcCoreGapCentAddrResUpdate>
  }
}
   246a6:	bf00      	nop
   246a8:	b003      	add	sp, #12
   246aa:	f85d fb04 	ldr.w	pc, [sp], #4

000246ae <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   246ae:	b500      	push	{lr}
   246b0:	b083      	sub	sp, #12
   246b2:	9001      	str	r0, [sp, #4]
   246b4:	9100      	str	r1, [sp, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   246b6:	9b01      	ldr	r3, [sp, #4]
   246b8:	78db      	ldrb	r3, [r3, #3]
   246ba:	2b00      	cmp	r3, #0
   246bc:	d109      	bne.n	246d2 <appPrivAddDevToResListInd+0x24>
   246be:	9b00      	ldr	r3, [sp, #0]
   246c0:	681b      	ldr	r3, [r3, #0]
   246c2:	2b00      	cmp	r3, #0
   246c4:	d005      	beq.n	246d2 <appPrivAddDevToResListInd+0x24>
  {
    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   246c6:	9b00      	ldr	r3, [sp, #0]
   246c8:	681b      	ldr	r3, [r3, #0]
   246ca:	2101      	movs	r1, #1
   246cc:	4618      	mov	r0, r3
   246ce:	f7f8 f8be 	bl	1c84e <AppDbSetPeerAddedToRl>
  }
}
   246d2:	bf00      	nop
   246d4:	b003      	add	sp, #12
   246d6:	f85d fb04 	ldr.w	pc, [sp], #4

000246da <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   246da:	b500      	push	{lr}
   246dc:	b083      	sub	sp, #12
   246de:	9001      	str	r0, [sp, #4]
   246e0:	9100      	str	r1, [sp, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   246e2:	9b01      	ldr	r3, [sp, #4]
   246e4:	78db      	ldrb	r3, [r3, #3]
   246e6:	2b00      	cmp	r3, #0
   246e8:	d109      	bne.n	246fe <appPrivRemDevFromResListInd+0x24>
   246ea:	9b00      	ldr	r3, [sp, #0]
   246ec:	681b      	ldr	r3, [r3, #0]
   246ee:	2b00      	cmp	r3, #0
   246f0:	d005      	beq.n	246fe <appPrivRemDevFromResListInd+0x24>
  {
    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   246f2:	9b00      	ldr	r3, [sp, #0]
   246f4:	681b      	ldr	r3, [r3, #0]
   246f6:	2100      	movs	r1, #0
   246f8:	4618      	mov	r0, r3
   246fa:	f7f8 f8a8 	bl	1c84e <AppDbSetPeerAddedToRl>
  }
}
   246fe:	bf00      	nop
   24700:	b003      	add	sp, #12
   24702:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00024708 <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   24708:	b500      	push	{lr}
   2470a:	b087      	sub	sp, #28
   2470c:	9001      	str	r0, [sp, #4]
   2470e:	9100      	str	r1, [sp, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;

  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   24710:	9b00      	ldr	r3, [sp, #0]
   24712:	2202      	movs	r2, #2
   24714:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   24716:	9b00      	ldr	r3, [sp, #0]
   24718:	791b      	ldrb	r3, [r3, #4]
   2471a:	4618      	mov	r0, r3
   2471c:	f7ed f906 	bl	1192c <DmConnCheckIdle>
   24720:	4603      	mov	r3, r0
   24722:	2b00      	cmp	r3, #0
   24724:	bf0c      	ite	eq
   24726:	2301      	moveq	r3, #1
   24728:	2300      	movne	r3, #0
   2472a:	b2db      	uxtb	r3, r3
   2472c:	f88d 3017 	strb.w	r3, [sp, #23]

  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   24730:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24734:	2b00      	cmp	r3, #0
   24736:	d02c      	beq.n	24792 <appSlaveConnUpdateTimeout+0x8a>
   24738:	9b00      	ldr	r3, [sp, #0]
   2473a:	7a9b      	ldrb	r3, [r3, #10]
   2473c:	2b00      	cmp	r3, #0
   2473e:	d028      	beq.n	24792 <appSlaveConnUpdateTimeout+0x8a>
  {
    /* do update */
    pCb->attempts++;
   24740:	9b00      	ldr	r3, [sp, #0]
   24742:	7b1b      	ldrb	r3, [r3, #12]
   24744:	3301      	adds	r3, #1
   24746:	b2da      	uxtb	r2, r3
   24748:	9b00      	ldr	r3, [sp, #0]
   2474a:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   2474c:	4b17      	ldr	r3, [pc, #92]	; (247ac <appSlaveConnUpdateTimeout+0xa4>)
   2474e:	681b      	ldr	r3, [r3, #0]
   24750:	889b      	ldrh	r3, [r3, #4]
   24752:	f8ad 3008 	strh.w	r3, [sp, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   24756:	4b15      	ldr	r3, [pc, #84]	; (247ac <appSlaveConnUpdateTimeout+0xa4>)
   24758:	681b      	ldr	r3, [r3, #0]
   2475a:	88db      	ldrh	r3, [r3, #6]
   2475c:	f8ad 300a 	strh.w	r3, [sp, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   24760:	4b12      	ldr	r3, [pc, #72]	; (247ac <appSlaveConnUpdateTimeout+0xa4>)
   24762:	681b      	ldr	r3, [r3, #0]
   24764:	891b      	ldrh	r3, [r3, #8]
   24766:	f8ad 300c 	strh.w	r3, [sp, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   2476a:	4b10      	ldr	r3, [pc, #64]	; (247ac <appSlaveConnUpdateTimeout+0xa4>)
   2476c:	681b      	ldr	r3, [r3, #0]
   2476e:	895b      	ldrh	r3, [r3, #10]
   24770:	f8ad 300e 	strh.w	r3, [sp, #14]
    connSpec.minCeLen = 0;
   24774:	2300      	movs	r3, #0
   24776:	f8ad 3010 	strh.w	r3, [sp, #16]
    connSpec.maxCeLen = 0xffff;
   2477a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2477e:	f8ad 3012 	strh.w	r3, [sp, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   24782:	9b00      	ldr	r3, [sp, #0]
   24784:	791b      	ldrb	r3, [r3, #4]
   24786:	aa02      	add	r2, sp, #8
   24788:	4611      	mov	r1, r2
   2478a:	4618      	mov	r0, r3
   2478c:	f7ec ff0a 	bl	115a4 <DmConnUpdate>
   24790:	e008      	b.n	247a4 <appSlaveConnUpdateTimeout+0x9c>
  }
  else
  {
    pCb->connWasIdle = idle;
   24792:	9b00      	ldr	r3, [sp, #0]
   24794:	f89d 2017 	ldrb.w	r2, [sp, #23]
   24798:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   2479a:	9b00      	ldr	r3, [sp, #0]
   2479c:	791b      	ldrb	r3, [r3, #4]
   2479e:	4618      	mov	r0, r3
   247a0:	f7ff fbca 	bl	23f38 <appConnUpdateTimerStart>
  }
}
   247a4:	bf00      	nop
   247a6:	b007      	add	sp, #28
   247a8:	f85d fb04 	ldr.w	pc, [sp], #4
   247ac:	10009744 	.word	0x10009744

000247b0 <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   247b0:	b500      	push	{lr}
   247b2:	b085      	sub	sp, #20
   247b4:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb;

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   247b6:	9b01      	ldr	r3, [sp, #4]
   247b8:	881b      	ldrh	r3, [r3, #0]
   247ba:	3b01      	subs	r3, #1
   247bc:	015b      	lsls	r3, r3, #5
   247be:	4a0c      	ldr	r2, [pc, #48]	; (247f0 <appSlaveProcMsg+0x40>)
   247c0:	4413      	add	r3, r2
   247c2:	9303      	str	r3, [sp, #12]

  switch(pMsg->event)
   247c4:	9b01      	ldr	r3, [sp, #4]
   247c6:	789b      	ldrb	r3, [r3, #2]
   247c8:	2b10      	cmp	r3, #16
   247ca:	d000      	beq.n	247ce <appSlaveProcMsg+0x1e>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
      }
      break;

    default:
      break;
   247cc:	e00c      	b.n	247e8 <appSlaveProcMsg+0x38>
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   247ce:	9b03      	ldr	r3, [sp, #12]
   247d0:	7b5b      	ldrb	r3, [r3, #13]
   247d2:	2b02      	cmp	r3, #2
   247d4:	d104      	bne.n	247e0 <appSlaveProcMsg+0x30>
        appSlaveConnUpdateTimeout(pMsg, pCb);
   247d6:	9903      	ldr	r1, [sp, #12]
   247d8:	9801      	ldr	r0, [sp, #4]
   247da:	f7ff ff95 	bl	24708 <appSlaveConnUpdateTimeout>
      break;
   247de:	e002      	b.n	247e6 <appSlaveProcMsg+0x36>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   247e0:	9b03      	ldr	r3, [sp, #12]
   247e2:	2201      	movs	r2, #1
   247e4:	735a      	strb	r2, [r3, #13]
      break;
   247e6:	bf00      	nop
  }
}
   247e8:	bf00      	nop
   247ea:	b005      	add	sp, #20
   247ec:	f85d fb04 	ldr.w	pc, [sp], #4
   247f0:	10009770 	.word	0x10009770

000247f4 <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   247f4:	b500      	push	{lr}
   247f6:	b083      	sub	sp, #12
  uint8_t i;

  /* for each advertising set */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   247f8:	2300      	movs	r3, #0
   247fa:	f88d 3007 	strb.w	r3, [sp, #7]
   247fe:	e02e      	b.n	2485e <AppSlaveInit+0x6a>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   24800:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24804:	4a20      	ldr	r2, [pc, #128]	; (24888 <AppSlaveInit+0x94>)
   24806:	4413      	add	r3, r2
   24808:	2203      	movs	r2, #3
   2480a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   2480e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24812:	4a1d      	ldr	r2, [pc, #116]	; (24888 <AppSlaveInit+0x94>)
   24814:	4413      	add	r3, r2
   24816:	2200      	movs	r2, #0
   24818:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   2481c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24820:	4a19      	ldr	r2, [pc, #100]	; (24888 <AppSlaveInit+0x94>)
   24822:	4413      	add	r3, r2
   24824:	2200      	movs	r2, #0
   24826:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* initialize peer address */
    appSlaveCb.peerAddrType[i] = HCI_ADDR_TYPE_PUBLIC;
   2482a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2482e:	4a16      	ldr	r2, [pc, #88]	; (24888 <AppSlaveInit+0x94>)
   24830:	4413      	add	r3, r2
   24832:	2200      	movs	r2, #0
   24834:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   24838:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2483c:	4613      	mov	r3, r2
   2483e:	005b      	lsls	r3, r3, #1
   24840:	4413      	add	r3, r2
   24842:	005b      	lsls	r3, r3, #1
   24844:	3330      	adds	r3, #48	; 0x30
   24846:	4a10      	ldr	r2, [pc, #64]	; (24888 <AppSlaveInit+0x94>)
   24848:	4413      	add	r3, r2
   2484a:	2206      	movs	r2, #6
   2484c:	2100      	movs	r1, #0
   2484e:	4618      	mov	r0, r3
   24850:	f7e7 fd20 	bl	c294 <memset>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   24854:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24858:	3301      	adds	r3, #1
   2485a:	f88d 3007 	strb.w	r3, [sp, #7]
   2485e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24862:	2b00      	cmp	r3, #0
   24864:	d0cc      	beq.n	24800 <AppSlaveInit+0xc>
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   24866:	4b08      	ldr	r3, [pc, #32]	; (24888 <AppSlaveInit+0x94>)
   24868:	22ff      	movs	r2, #255	; 0xff
   2486a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   2486e:	f7ff f9a7 	bl	23bc0 <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   24872:	4b05      	ldr	r3, [pc, #20]	; (24888 <AppSlaveInit+0x94>)
   24874:	2200      	movs	r2, #0
   24876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   2487a:	4b04      	ldr	r3, [pc, #16]	; (2488c <AppSlaveInit+0x98>)
   2487c:	4a04      	ldr	r2, [pc, #16]	; (24890 <AppSlaveInit+0x9c>)
   2487e:	601a      	str	r2, [r3, #0]
}
   24880:	bf00      	nop
   24882:	b003      	add	sp, #12
   24884:	f85d fb04 	ldr.w	pc, [sp], #4
   24888:	100097d0 	.word	0x100097d0
   2488c:	1000974c 	.word	0x1000974c
   24890:	000247b1 	.word	0x000247b1

00024894 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   24894:	b500      	push	{lr}
   24896:	b085      	sub	sp, #20
   24898:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb = NULL;
   2489a:	2300      	movs	r3, #0
   2489c:	9303      	str	r3, [sp, #12]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   2489e:	9b01      	ldr	r3, [sp, #4]
   248a0:	789b      	ldrb	r3, [r3, #2]
   248a2:	2b22      	cmp	r3, #34	; 0x22
   248a4:	d00a      	beq.n	248bc <AppSlaveProcDmMsg+0x28>
      (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   248a6:	9b01      	ldr	r3, [sp, #4]
   248a8:	789b      	ldrb	r3, [r3, #2]
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   248aa:	2b48      	cmp	r3, #72	; 0x48
   248ac:	d006      	beq.n	248bc <AppSlaveProcDmMsg+0x28>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   248ae:	9b01      	ldr	r3, [sp, #4]
   248b0:	881b      	ldrh	r3, [r3, #0]
   248b2:	3b01      	subs	r3, #1
   248b4:	015b      	lsls	r3, r3, #5
   248b6:	4a6c      	ldr	r2, [pc, #432]	; (24a68 <AppSlaveProcDmMsg+0x1d4>)
   248b8:	4413      	add	r3, r2
   248ba:	9303      	str	r3, [sp, #12]
  }

  switch (pMsg->hdr.event)
   248bc:	9b01      	ldr	r3, [sp, #4]
   248be:	789b      	ldrb	r3, [r3, #2]
   248c0:	3b20      	subs	r3, #32
   248c2:	2b45      	cmp	r3, #69	; 0x45
   248c4:	f200 80c8 	bhi.w	24a58 <AppSlaveProcDmMsg+0x1c4>
   248c8:	a201      	add	r2, pc, #4	; (adr r2, 248d0 <AppSlaveProcDmMsg+0x3c>)
   248ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   248ce:	bf00      	nop
   248d0:	000249e9 	.word	0x000249e9
   248d4:	00024a59 	.word	0x00024a59
   248d8:	000249ef 	.word	0x000249ef
   248dc:	00024a59 	.word	0x00024a59
   248e0:	00024a59 	.word	0x00024a59
   248e4:	00024a59 	.word	0x00024a59
   248e8:	00024a59 	.word	0x00024a59
   248ec:	00024a01 	.word	0x00024a01
   248f0:	00024a0b 	.word	0x00024a0b
   248f4:	00024a15 	.word	0x00024a15
   248f8:	00024a59 	.word	0x00024a59
   248fc:	00024a59 	.word	0x00024a59
   24900:	00024a59 	.word	0x00024a59
   24904:	00024a59 	.word	0x00024a59
   24908:	00024a59 	.word	0x00024a59
   2490c:	00024a59 	.word	0x00024a59
   24910:	00024a59 	.word	0x00024a59
   24914:	00024a59 	.word	0x00024a59
   24918:	00024a59 	.word	0x00024a59
   2491c:	00024a59 	.word	0x00024a59
   24920:	00024a59 	.word	0x00024a59
   24924:	00024a59 	.word	0x00024a59
   24928:	00024a59 	.word	0x00024a59
   2492c:	00024a1f 	.word	0x00024a1f
   24930:	00024a59 	.word	0x00024a59
   24934:	00024a59 	.word	0x00024a59
   24938:	00024a59 	.word	0x00024a59
   2493c:	00024a59 	.word	0x00024a59
   24940:	00024a59 	.word	0x00024a59
   24944:	00024a59 	.word	0x00024a59
   24948:	00024a59 	.word	0x00024a59
   2494c:	00024a59 	.word	0x00024a59
   24950:	00024a29 	.word	0x00024a29
   24954:	00024a59 	.word	0x00024a59
   24958:	00024a59 	.word	0x00024a59
   2495c:	00024a59 	.word	0x00024a59
   24960:	00024a59 	.word	0x00024a59
   24964:	00024a59 	.word	0x00024a59
   24968:	00024a59 	.word	0x00024a59
   2496c:	00024a59 	.word	0x00024a59
   24970:	000249ef 	.word	0x000249ef
   24974:	00024a59 	.word	0x00024a59
   24978:	00024a59 	.word	0x00024a59
   2497c:	00024a59 	.word	0x00024a59
   24980:	00024a59 	.word	0x00024a59
   24984:	00024a59 	.word	0x00024a59
   24988:	00024a59 	.word	0x00024a59
   2498c:	00024a59 	.word	0x00024a59
   24990:	00024a59 	.word	0x00024a59
   24994:	00024a59 	.word	0x00024a59
   24998:	00024a59 	.word	0x00024a59
   2499c:	00024a59 	.word	0x00024a59
   249a0:	00024a59 	.word	0x00024a59
   249a4:	00024a59 	.word	0x00024a59
   249a8:	00024a59 	.word	0x00024a59
   249ac:	00024a33 	.word	0x00024a33
   249b0:	00024a59 	.word	0x00024a59
   249b4:	00024a59 	.word	0x00024a59
   249b8:	00024a59 	.word	0x00024a59
   249bc:	00024a59 	.word	0x00024a59
   249c0:	00024a59 	.word	0x00024a59
   249c4:	00024a59 	.word	0x00024a59
   249c8:	00024a59 	.word	0x00024a59
   249cc:	00024a59 	.word	0x00024a59
   249d0:	00024a59 	.word	0x00024a59
   249d4:	00024a59 	.word	0x00024a59
   249d8:	00024a59 	.word	0x00024a59
   249dc:	00024a59 	.word	0x00024a59
   249e0:	00024a59 	.word	0x00024a59
   249e4:	00024a4d 	.word	0x00024a4d
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   249e8:	f7ff f8ea 	bl	23bc0 <appSlaveAdvModeInit>
      break;
   249ec:	e037      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   249ee:	4b1f      	ldr	r3, [pc, #124]	; (24a6c <AppSlaveProcDmMsg+0x1d8>)
   249f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   249f2:	2b00      	cmp	r3, #0
   249f4:	d032      	beq.n	24a5c <AppSlaveProcDmMsg+0x1c8>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   249f6:	4b1d      	ldr	r3, [pc, #116]	; (24a6c <AppSlaveProcDmMsg+0x1d8>)
   249f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   249fa:	9801      	ldr	r0, [sp, #4]
   249fc:	4798      	blx	r3
      }
      break;
   249fe:	e02d      	b.n	24a5c <AppSlaveProcDmMsg+0x1c8>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   24a00:	9903      	ldr	r1, [sp, #12]
   24a02:	9801      	ldr	r0, [sp, #4]
   24a04:	f7ff fb42 	bl	2408c <appSlaveConnOpen>
      break;
   24a08:	e029      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   24a0a:	9903      	ldr	r1, [sp, #12]
   24a0c:	9801      	ldr	r0, [sp, #4]
   24a0e:	f7ff fb59 	bl	240c4 <appSlaveConnClose>
      break;
   24a12:	e024      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   24a14:	9903      	ldr	r1, [sp, #12]
   24a16:	9801      	ldr	r0, [sp, #4]
   24a18:	f7ff fbe2 	bl	241e0 <appSlaveConnUpdate>
      break;
   24a1c:	e01f      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   24a1e:	9903      	ldr	r1, [sp, #12]
   24a20:	9801      	ldr	r0, [sp, #4]
   24a22:	f7ff fc19 	bl	24258 <appSlaveResolvedAddrInd>
      break;
   24a26:	e01a      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   24a28:	9903      	ldr	r1, [sp, #12]
   24a2a:	9801      	ldr	r0, [sp, #4]
   24a2c:	f7ff fc68 	bl	24300 <appSlaveRemoteConnParamReq>
      break;
   24a30:	e015      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>

    case DM_REMOTE_FEATURES_IND:
      /* If conn update is waiting for features, perform the conn update timeout action */
      if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   24a32:	9b03      	ldr	r3, [sp, #12]
   24a34:	7b5b      	ldrb	r3, [r3, #13]
   24a36:	2b01      	cmp	r3, #1
   24a38:	d104      	bne.n	24a44 <AppSlaveProcDmMsg+0x1b0>
      {
        appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   24a3a:	9903      	ldr	r1, [sp, #12]
   24a3c:	9801      	ldr	r0, [sp, #4]
   24a3e:	f7ff fe63 	bl	24708 <appSlaveConnUpdateTimeout>
      }
      else
      {
        pCb->updateState = APP_CU_STATE_UPDATING;
      }
      break;
   24a42:	e00c      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>
        pCb->updateState = APP_CU_STATE_UPDATING;
   24a44:	9b03      	ldr	r3, [sp, #12]
   24a46:	2202      	movs	r2, #2
   24a48:	735a      	strb	r2, [r3, #13]
      break;
   24a4a:	e008      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>

    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   24a4c:	2000      	movs	r0, #0
   24a4e:	f7f4 fa65 	bl	18f1c <HciDrvRadioBoot>
      DmDevReset();
   24a52:	f7ed f9d5 	bl	11e00 <DmDevReset>
	  break;
   24a56:	e002      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>
	  
    default:
      break;
   24a58:	bf00      	nop
   24a5a:	e000      	b.n	24a5e <AppSlaveProcDmMsg+0x1ca>
      break;
   24a5c:	bf00      	nop
  }
}
   24a5e:	bf00      	nop
   24a60:	b005      	add	sp, #20
   24a62:	f85d fb04 	ldr.w	pc, [sp], #4
   24a66:	bf00      	nop
   24a68:	10009770 	.word	0x10009770
   24a6c:	100097d0 	.word	0x100097d0

00024a70 <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   24a70:	b500      	push	{lr}
   24a72:	b083      	sub	sp, #12
   24a74:	9300      	str	r3, [sp, #0]
   24a76:	4603      	mov	r3, r0
   24a78:	f88d 3007 	strb.w	r3, [sp, #7]
   24a7c:	460b      	mov	r3, r1
   24a7e:	f88d 3006 	strb.w	r3, [sp, #6]
   24a82:	4613      	mov	r3, r2
   24a84:	f8ad 3004 	strh.w	r3, [sp, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   24a88:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24a8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24a90:	492f      	ldr	r1, [pc, #188]	; (24b50 <appAdvSetData+0xe0>)
   24a92:	0092      	lsls	r2, r2, #2
   24a94:	4413      	add	r3, r2
   24a96:	9a00      	ldr	r2, [sp, #0]
   24a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   24a9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24aa0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24aa4:	492a      	ldr	r1, [pc, #168]	; (24b50 <appAdvSetData+0xe0>)
   24aa6:	0092      	lsls	r2, r2, #2
   24aa8:	4413      	add	r3, r2
   24aaa:	3308      	adds	r3, #8
   24aac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   24ab0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   24ab4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24ab8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24abc:	4924      	ldr	r1, [pc, #144]	; (24b50 <appAdvSetData+0xe0>)
   24abe:	0092      	lsls	r2, r2, #2
   24ac0:	4413      	add	r3, r2
   24ac2:	330c      	adds	r3, #12
   24ac4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   24ac8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   24acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24ad0:	491f      	ldr	r1, [pc, #124]	; (24b50 <appAdvSetData+0xe0>)
   24ad2:	3314      	adds	r3, #20
   24ad4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   24ad8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   24adc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24ae0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24ae4:	491a      	ldr	r1, [pc, #104]	; (24b50 <appAdvSetData+0xe0>)
   24ae6:	0092      	lsls	r2, r2, #2
   24ae8:	4413      	add	r3, r2
   24aea:	3310      	adds	r3, #16
   24aec:	2200      	movs	r2, #0
   24aee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   24af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24af6:	4a16      	ldr	r2, [pc, #88]	; (24b50 <appAdvSetData+0xe0>)
   24af8:	4413      	add	r3, r2
   24afa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   24afe:	2b03      	cmp	r3, #3
   24b00:	d01b      	beq.n	24b3a <appAdvSetData+0xca>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   24b02:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24b06:	085b      	lsrs	r3, r3, #1
   24b08:	b2da      	uxtb	r2, r3
   24b0a:	4b11      	ldr	r3, [pc, #68]	; (24b50 <appAdvSetData+0xe0>)
   24b0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   24b10:	429a      	cmp	r2, r3
   24b12:	d112      	bne.n	24b3a <appAdvSetData+0xca>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   24b14:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   24b18:	2bfb      	cmp	r3, #251	; 0xfb
   24b1a:	d80e      	bhi.n	24b3a <appAdvSetData+0xca>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   24b1c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   24b20:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   24b24:	429a      	cmp	r2, r3
   24b26:	d808      	bhi.n	24b3a <appAdvSetData+0xca>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   24b28:	f89d 2006 	ldrb.w	r2, [sp, #6]
   24b2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24b30:	4611      	mov	r1, r2
   24b32:	4618      	mov	r0, r3
   24b34:	f7ff f8ce 	bl	23cd4 <appSetAdvScanDataFrag>
   24b38:	e006      	b.n	24b48 <appAdvSetData+0xd8>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   24b3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24b3e:	4a04      	ldr	r2, [pc, #16]	; (24b50 <appAdvSetData+0xe0>)
   24b40:	4413      	add	r3, r2
   24b42:	2200      	movs	r2, #0
   24b44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   24b48:	bf00      	nop
   24b4a:	b003      	add	sp, #12
   24b4c:	f85d fb04 	ldr.w	pc, [sp], #4
   24b50:	100097d0 	.word	0x100097d0

00024b54 <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   24b54:	b510      	push	{r4, lr}
   24b56:	b086      	sub	sp, #24
   24b58:	9102      	str	r1, [sp, #8]
   24b5a:	9201      	str	r2, [sp, #4]
   24b5c:	9300      	str	r3, [sp, #0]
   24b5e:	4603      	mov	r3, r0
   24b60:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   24b64:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24b68:	9902      	ldr	r1, [sp, #8]
   24b6a:	4618      	mov	r0, r3
   24b6c:	f7ff f832 	bl	23bd4 <appSlaveConnectableAdv>
   24b70:	4603      	mov	r3, r0
   24b72:	2b00      	cmp	r3, #0
   24b74:	d009      	beq.n	24b8a <appAdvStart+0x36>
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   24b76:	2001      	movs	r0, #1
   24b78:	f7fe fdaa 	bl	236d0 <appNumConns>
   24b7c:	4603      	mov	r3, r0
   24b7e:	461a      	mov	r2, r3
   24b80:	4b48      	ldr	r3, [pc, #288]	; (24ca4 <appAdvStart+0x150>)
   24b82:	681b      	ldr	r3, [r3, #0]
   24b84:	781b      	ldrb	r3, [r3, #0]
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   24b86:	429a      	cmp	r2, r3
   24b88:	d26f      	bcs.n	24c6a <appAdvStart+0x116>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   24b8a:	2300      	movs	r3, #0
   24b8c:	f88d 3017 	strb.w	r3, [sp, #23]
   24b90:	e05d      	b.n	24c4e <appAdvStart+0xfa>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   24b92:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   24b96:	2b00      	cmp	r3, #0
   24b98:	d03c      	beq.n	24c14 <appAdvStart+0xc0>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   24b9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24b9e:	9a02      	ldr	r2, [sp, #8]
   24ba0:	4413      	add	r3, r2
   24ba2:	7818      	ldrb	r0, [r3, #0]
   24ba4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24ba8:	005b      	lsls	r3, r3, #1
   24baa:	9a01      	ldr	r2, [sp, #4]
   24bac:	4413      	add	r3, r2
   24bae:	8819      	ldrh	r1, [r3, #0]
   24bb0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24bb4:	005b      	lsls	r3, r3, #1
   24bb6:	9a01      	ldr	r2, [sp, #4]
   24bb8:	4413      	add	r3, r2
   24bba:	881b      	ldrh	r3, [r3, #0]
   24bbc:	461a      	mov	r2, r3
   24bbe:	f7eb fc69 	bl	10494 <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   24bc2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24bc6:	9a02      	ldr	r2, [sp, #8]
   24bc8:	4413      	add	r3, r2
   24bca:	7818      	ldrb	r0, [r3, #0]
   24bcc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24bd0:	9a02      	ldr	r2, [sp, #8]
   24bd2:	4413      	add	r3, r2
   24bd4:	781b      	ldrb	r3, [r3, #0]
   24bd6:	461a      	mov	r2, r3
   24bd8:	4b33      	ldr	r3, [pc, #204]	; (24ca8 <appAdvStart+0x154>)
   24bda:	4413      	add	r3, r2
   24bdc:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   24be0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24be4:	9a02      	ldr	r2, [sp, #8]
   24be6:	4413      	add	r3, r2
   24be8:	781b      	ldrb	r3, [r3, #0]
   24bea:	461a      	mov	r2, r3
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   24bec:	4b2e      	ldr	r3, [pc, #184]	; (24ca8 <appAdvStart+0x154>)
   24bee:	4413      	add	r3, r2
   24bf0:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   24bf4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24bf8:	9a02      	ldr	r2, [sp, #8]
   24bfa:	4413      	add	r3, r2
   24bfc:	781b      	ldrb	r3, [r3, #0]
   24bfe:	461a      	mov	r2, r3
   24c00:	4613      	mov	r3, r2
   24c02:	005b      	lsls	r3, r3, #1
   24c04:	4413      	add	r3, r2
   24c06:	005b      	lsls	r3, r3, #1
   24c08:	3330      	adds	r3, #48	; 0x30
   24c0a:	4a27      	ldr	r2, [pc, #156]	; (24ca8 <appAdvStart+0x154>)
   24c0c:	4413      	add	r3, r2
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   24c0e:	4622      	mov	r2, r4
   24c10:	f7eb fb74 	bl	102fc <DmAdvConfig>
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   24c14:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24c18:	9a02      	ldr	r2, [sp, #8]
   24c1a:	4413      	add	r3, r2
   24c1c:	781b      	ldrb	r3, [r3, #0]
   24c1e:	461a      	mov	r2, r3
   24c20:	4b21      	ldr	r3, [pc, #132]	; (24ca8 <appAdvStart+0x154>)
   24c22:	4413      	add	r3, r2
   24c24:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   24c28:	2b00      	cmp	r3, #0
   24c2a:	d10b      	bne.n	24c44 <appAdvStart+0xf0>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   24c2c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24c30:	9a02      	ldr	r2, [sp, #8]
   24c32:	4413      	add	r3, r2
   24c34:	781a      	ldrb	r2, [r3, #0]
   24c36:	4b1c      	ldr	r3, [pc, #112]	; (24ca8 <appAdvStart+0x154>)
   24c38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   24c3c:	4619      	mov	r1, r3
   24c3e:	4610      	mov	r0, r2
   24c40:	f7ff f8f0 	bl	23e24 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   24c44:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24c48:	3301      	adds	r3, #1
   24c4a:	f88d 3017 	strb.w	r3, [sp, #23]
   24c4e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   24c52:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24c56:	429a      	cmp	r2, r3
   24c58:	d39b      	bcc.n	24b92 <appAdvStart+0x3e>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   24c5a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   24c5e:	9b08      	ldr	r3, [sp, #32]
   24c60:	9a00      	ldr	r2, [sp, #0]
   24c62:	9902      	ldr	r1, [sp, #8]
   24c64:	f7eb fbc2 	bl	103ec <DmAdvStart>

    return;
   24c68:	e019      	b.n	24c9e <appAdvStart+0x14a>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   24c6a:	2300      	movs	r3, #0
   24c6c:	f88d 3017 	strb.w	r3, [sp, #23]
   24c70:	e00f      	b.n	24c92 <appAdvStart+0x13e>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   24c72:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24c76:	9a02      	ldr	r2, [sp, #8]
   24c78:	4413      	add	r3, r2
   24c7a:	781b      	ldrb	r3, [r3, #0]
   24c7c:	461a      	mov	r2, r3
   24c7e:	4b0a      	ldr	r3, [pc, #40]	; (24ca8 <appAdvStart+0x154>)
   24c80:	4413      	add	r3, r2
   24c82:	2203      	movs	r2, #3
   24c84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < numSets; i++)
   24c88:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24c8c:	3301      	adds	r3, #1
   24c8e:	f88d 3017 	strb.w	r3, [sp, #23]
   24c92:	f89d 2017 	ldrb.w	r2, [sp, #23]
   24c96:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24c9a:	429a      	cmp	r2, r3
   24c9c:	d3e9      	bcc.n	24c72 <appAdvStart+0x11e>
  }
}
   24c9e:	b006      	add	sp, #24
   24ca0:	bd10      	pop	{r4, pc}
   24ca2:	bf00      	nop
   24ca4:	10009748 	.word	0x10009748
   24ca8:	100097d0 	.word	0x100097d0

00024cac <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   24cac:	b500      	push	{lr}
   24cae:	b089      	sub	sp, #36	; 0x24
   24cb0:	9104      	str	r1, [sp, #16]
   24cb2:	9203      	str	r2, [sp, #12]
   24cb4:	9302      	str	r3, [sp, #8]
   24cb6:	4603      	mov	r3, r0
   24cb8:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   24cbc:	4b29      	ldr	r3, [pc, #164]	; (24d64 <appSlaveAdvStart+0xb8>)
   24cbe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   24cc2:	f88d 301e 	strb.w	r3, [sp, #30]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   24cc6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   24cca:	2b02      	cmp	r3, #2
   24ccc:	d114      	bne.n	24cf8 <appSlaveAdvStart+0x4c>
  {
    if (AppDbCheckBonded() == FALSE)
   24cce:	f7f7 fc01 	bl	1c4d4 <AppDbCheckBonded>
   24cd2:	4603      	mov	r3, r0
   24cd4:	2b00      	cmp	r3, #0
   24cd6:	d107      	bne.n	24ce8 <appSlaveAdvStart+0x3c>
    {
      AppSetBondable(TRUE);
   24cd8:	2001      	movs	r0, #1
   24cda:	f000 f8c7 	bl	24e6c <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   24cde:	4b21      	ldr	r3, [pc, #132]	; (24d64 <appSlaveAdvStart+0xb8>)
   24ce0:	2201      	movs	r2, #1
   24ce2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   24ce6:	e00c      	b.n	24d02 <appSlaveAdvStart+0x56>
    }
    else
    {
      AppSetBondable(FALSE);
   24ce8:	2000      	movs	r0, #0
   24cea:	f000 f8bf 	bl	24e6c <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   24cee:	4b1d      	ldr	r3, [pc, #116]	; (24d64 <appSlaveAdvStart+0xb8>)
   24cf0:	2200      	movs	r2, #0
   24cf2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   24cf6:	e004      	b.n	24d02 <appSlaveAdvStart+0x56>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   24cf8:	4a1a      	ldr	r2, [pc, #104]	; (24d64 <appSlaveAdvStart+0xb8>)
   24cfa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   24cfe:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   24d02:	4b18      	ldr	r3, [pc, #96]	; (24d64 <appSlaveAdvStart+0xb8>)
   24d04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   24d08:	f89d 201e 	ldrb.w	r2, [sp, #30]
   24d0c:	429a      	cmp	r2, r3
   24d0e:	d01a      	beq.n	24d46 <appSlaveAdvStart+0x9a>
  {
    for (i = 0; i < numSets; i++)
   24d10:	2300      	movs	r3, #0
   24d12:	f88d 301f 	strb.w	r3, [sp, #31]
   24d16:	e010      	b.n	24d3a <appSlaveAdvStart+0x8e>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   24d18:	f89d 301f 	ldrb.w	r3, [sp, #31]
   24d1c:	9a04      	ldr	r2, [sp, #16]
   24d1e:	4413      	add	r3, r2
   24d20:	781a      	ldrb	r2, [r3, #0]
   24d22:	4b10      	ldr	r3, [pc, #64]	; (24d64 <appSlaveAdvStart+0xb8>)
   24d24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   24d28:	4619      	mov	r1, r3
   24d2a:	4610      	mov	r0, r2
   24d2c:	f7fe ff9c 	bl	23c68 <appSlaveForceAdvDataSync>
    for (i = 0; i < numSets; i++)
   24d30:	f89d 301f 	ldrb.w	r3, [sp, #31]
   24d34:	3301      	adds	r3, #1
   24d36:	f88d 301f 	strb.w	r3, [sp, #31]
   24d3a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   24d3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24d42:	429a      	cmp	r2, r3
   24d44:	d3e8      	bcc.n	24d18 <appSlaveAdvStart+0x6c>
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   24d46:	f89d 0017 	ldrb.w	r0, [sp, #23]
   24d4a:	2301      	movs	r3, #1
   24d4c:	9301      	str	r3, [sp, #4]
   24d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24d50:	9300      	str	r3, [sp, #0]
   24d52:	9b02      	ldr	r3, [sp, #8]
   24d54:	9a03      	ldr	r2, [sp, #12]
   24d56:	9904      	ldr	r1, [sp, #16]
   24d58:	f7ff fefc 	bl	24b54 <appAdvStart>
}
   24d5c:	bf00      	nop
   24d5e:	b009      	add	sp, #36	; 0x24
   24d60:	f85d fb04 	ldr.w	pc, [sp], #4
   24d64:	100097d0 	.word	0x100097d0

00024d68 <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   24d68:	b500      	push	{lr}
   24d6a:	b085      	sub	sp, #20
   24d6c:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb;

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   24d6e:	9b01      	ldr	r3, [sp, #4]
   24d70:	881b      	ldrh	r3, [r3, #0]
   24d72:	3b01      	subs	r3, #1
   24d74:	015b      	lsls	r3, r3, #5
   24d76:	4a3c      	ldr	r2, [pc, #240]	; (24e68 <AppSlaveSecProcDmMsg+0x100>)
   24d78:	4413      	add	r3, r2
   24d7a:	9303      	str	r3, [sp, #12]

  switch(pMsg->hdr.event)
   24d7c:	9b01      	ldr	r3, [sp, #4]
   24d7e:	789b      	ldrb	r3, [r3, #2]
   24d80:	3b27      	subs	r3, #39	; 0x27
   24d82:	2b18      	cmp	r3, #24
   24d84:	d86a      	bhi.n	24e5c <AppSlaveSecProcDmMsg+0xf4>
   24d86:	a201      	add	r2, pc, #4	; (adr r2, 24d8c <AppSlaveSecProcDmMsg+0x24>)
   24d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24d8c:	00024df1 	.word	0x00024df1
   24d90:	00024dfb 	.word	0x00024dfb
   24d94:	00024e5d 	.word	0x00024e5d
   24d98:	00024e05 	.word	0x00024e05
   24d9c:	00024e0f 	.word	0x00024e0f
   24da0:	00024e19 	.word	0x00024e19
   24da4:	00024e5d 	.word	0x00024e5d
   24da8:	00024e5d 	.word	0x00024e5d
   24dac:	00024e23 	.word	0x00024e23
   24db0:	00024e37 	.word	0x00024e37
   24db4:	00024e2d 	.word	0x00024e2d
   24db8:	00024e5d 	.word	0x00024e5d
   24dbc:	00024e5d 	.word	0x00024e5d
   24dc0:	00024e5d 	.word	0x00024e5d
   24dc4:	00024e5d 	.word	0x00024e5d
   24dc8:	00024e5d 	.word	0x00024e5d
   24dcc:	00024e5d 	.word	0x00024e5d
   24dd0:	00024e5d 	.word	0x00024e5d
   24dd4:	00024e5d 	.word	0x00024e5d
   24dd8:	00024e49 	.word	0x00024e49
   24ddc:	00024e53 	.word	0x00024e53
   24de0:	00024e5d 	.word	0x00024e5d
   24de4:	00024e5d 	.word	0x00024e5d
   24de8:	00024e5d 	.word	0x00024e5d
   24dec:	00024e41 	.word	0x00024e41
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   24df0:	9903      	ldr	r1, [sp, #12]
   24df2:	9801      	ldr	r0, [sp, #4]
   24df4:	f7ff fabe 	bl	24374 <appSlaveSecConnOpen>
      break;
   24df8:	e031      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   24dfa:	9903      	ldr	r1, [sp, #12]
   24dfc:	9801      	ldr	r0, [sp, #4]
   24dfe:	f7ff faf9 	bl	243f4 <appSecConnClose>
      break;
   24e02:	e02c      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   24e04:	9903      	ldr	r1, [sp, #12]
   24e06:	9801      	ldr	r0, [sp, #4]
   24e08:	f7ff fbb6 	bl	24578 <appSecPairCmpl>
      break;
   24e0c:	e027      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   24e0e:	9903      	ldr	r1, [sp, #12]
   24e10:	9801      	ldr	r0, [sp, #4]
   24e12:	f7ff fbe3 	bl	245dc <appSecPairFailed>
      break;
   24e16:	e022      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   24e18:	9903      	ldr	r1, [sp, #12]
   24e1a:	9801      	ldr	r0, [sp, #4]
   24e1c:	f7ff fbe4 	bl	245e8 <appSecEncryptInd>
      break;
   24e20:	e01d      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   24e22:	9903      	ldr	r1, [sp, #12]
   24e24:	9801      	ldr	r0, [sp, #4]
   24e26:	f7ff fb87 	bl	24538 <appSecStoreKey>
      break;
   24e2a:	e018      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   24e2c:	9903      	ldr	r1, [sp, #12]
   24e2e:	9801      	ldr	r0, [sp, #4]
   24e30:	f7ff faf2 	bl	24418 <appSecPairInd>
      break;
   24e34:	e013      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   24e36:	9903      	ldr	r1, [sp, #12]
   24e38:	9801      	ldr	r0, [sp, #4]
   24e3a:	f7ff fbe9 	bl	24610 <appSecFindLtk>
      break;
   24e3e:	e00e      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   24e40:	9801      	ldr	r0, [sp, #4]
   24e42:	f7ff fc23 	bl	2468c <appPrivSetAddrResEnableInd>
      break;
   24e46:	e00a      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   24e48:	9903      	ldr	r1, [sp, #12]
   24e4a:	9801      	ldr	r0, [sp, #4]
   24e4c:	f7ff fc2f 	bl	246ae <appPrivAddDevToResListInd>
      break;
   24e50:	e005      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   24e52:	9903      	ldr	r1, [sp, #12]
   24e54:	9801      	ldr	r0, [sp, #4]
   24e56:	f7ff fc40 	bl	246da <appPrivRemDevFromResListInd>
      break;
   24e5a:	e000      	b.n	24e5e <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   24e5c:	bf00      	nop
  }
}
   24e5e:	bf00      	nop
   24e60:	b005      	add	sp, #20
   24e62:	f85d fb04 	ldr.w	pc, [sp], #4
   24e66:	bf00      	nop
   24e68:	10009770 	.word	0x10009770

00024e6c <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   24e6c:	b082      	sub	sp, #8
   24e6e:	4603      	mov	r3, r0
   24e70:	f88d 3007 	strb.w	r3, [sp, #7]
  appSlaveCb.bondable = bondable;
   24e74:	4a03      	ldr	r2, [pc, #12]	; (24e84 <AppSetBondable+0x18>)
   24e76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24e7a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
   24e7e:	bf00      	nop
   24e80:	b002      	add	sp, #8
   24e82:	4770      	bx	lr
   24e84:	100097d0 	.word	0x100097d0

00024e88 <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   24e88:	b500      	push	{lr}
   24e8a:	b085      	sub	sp, #20
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   24e8c:	4b17      	ldr	r3, [pc, #92]	; (24eec <appSlaveLegAdvStart+0x64>)
   24e8e:	681a      	ldr	r2, [r3, #0]
   24e90:	4b17      	ldr	r3, [pc, #92]	; (24ef0 <appSlaveLegAdvStart+0x68>)
   24e92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   24e96:	005b      	lsls	r3, r3, #1
   24e98:	4413      	add	r3, r2
   24e9a:	88db      	ldrh	r3, [r3, #6]
   24e9c:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* if this advertising state is being used */
  if (interval > 0)
   24ea0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   24ea4:	2b00      	cmp	r3, #0
   24ea6:	d019      	beq.n	24edc <appSlaveLegAdvStart+0x54>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   24ea8:	2300      	movs	r3, #0
   24eaa:	f88d 300f 	strb.w	r3, [sp, #15]
    maxEaEvents = 0;
   24eae:	2300      	movs	r3, #0
   24eb0:	f88d 300e 	strb.w	r3, [sp, #14]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   24eb4:	4b0d      	ldr	r3, [pc, #52]	; (24eec <appSlaveLegAdvStart+0x64>)
   24eb6:	681a      	ldr	r2, [r3, #0]
   24eb8:	4b0d      	ldr	r3, [pc, #52]	; (24ef0 <appSlaveLegAdvStart+0x68>)
   24eba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    appAdvStart(1, &advHandle, &interval,
   24ebe:	005b      	lsls	r3, r3, #1
   24ec0:	18d0      	adds	r0, r2, r3
   24ec2:	aa03      	add	r2, sp, #12
   24ec4:	f10d 010f 	add.w	r1, sp, #15
   24ec8:	2301      	movs	r3, #1
   24eca:	9301      	str	r3, [sp, #4]
   24ecc:	f10d 030e 	add.w	r3, sp, #14
   24ed0:	9300      	str	r3, [sp, #0]
   24ed2:	4603      	mov	r3, r0
   24ed4:	2001      	movs	r0, #1
   24ed6:	f7ff fe3d 	bl	24b54 <appAdvStart>
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }
}
   24eda:	e003      	b.n	24ee4 <appSlaveLegAdvStart+0x5c>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   24edc:	4b04      	ldr	r3, [pc, #16]	; (24ef0 <appSlaveLegAdvStart+0x68>)
   24ede:	2203      	movs	r2, #3
   24ee0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   24ee4:	bf00      	nop
   24ee6:	b005      	add	sp, #20
   24ee8:	f85d fb04 	ldr.w	pc, [sp], #4
   24eec:	1000976c 	.word	0x1000976c
   24ef0:	100097d0 	.word	0x100097d0

00024ef4 <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   24ef4:	b500      	push	{lr}
   24ef6:	b083      	sub	sp, #12
   24ef8:	9001      	str	r0, [sp, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   24efa:	4b07      	ldr	r3, [pc, #28]	; (24f18 <appSlaveLegAdvTypeChanged+0x24>)
   24efc:	2200      	movs	r2, #0
   24efe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   24f02:	4b05      	ldr	r3, [pc, #20]	; (24f18 <appSlaveLegAdvTypeChanged+0x24>)
   24f04:	2200      	movs	r2, #0
   24f06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* start advertising */
  appSlaveLegAdvStart();
   24f0a:	f7ff ffbd 	bl	24e88 <appSlaveLegAdvStart>
}
   24f0e:	bf00      	nop
   24f10:	b003      	add	sp, #12
   24f12:	f85d fb04 	ldr.w	pc, [sp], #4
   24f16:	bf00      	nop
   24f18:	100097d0 	.word	0x100097d0

00024f1c <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   24f1c:	b500      	push	{lr}
   24f1e:	b083      	sub	sp, #12
   24f20:	9001      	str	r0, [sp, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   24f22:	4b09      	ldr	r3, [pc, #36]	; (24f48 <appSlaveNextLegAdvState+0x2c>)
   24f24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   24f28:	3301      	adds	r3, #1
   24f2a:	b2da      	uxtb	r2, r3
   24f2c:	4b06      	ldr	r3, [pc, #24]	; (24f48 <appSlaveNextLegAdvState+0x2c>)
   24f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   24f32:	4b05      	ldr	r3, [pc, #20]	; (24f48 <appSlaveNextLegAdvState+0x2c>)
   24f34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   24f38:	2b02      	cmp	r3, #2
   24f3a:	d801      	bhi.n	24f40 <appSlaveNextLegAdvState+0x24>
  {
    appSlaveLegAdvStart();
   24f3c:	f7ff ffa4 	bl	24e88 <appSlaveLegAdvStart>
  }
}
   24f40:	bf00      	nop
   24f42:	b003      	add	sp, #12
   24f44:	f85d fb04 	ldr.w	pc, [sp], #4
   24f48:	100097d0 	.word	0x100097d0

00024f4c <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   24f4c:	b500      	push	{lr}
   24f4e:	b083      	sub	sp, #12
   24f50:	9001      	str	r0, [sp, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   24f52:	9b01      	ldr	r3, [sp, #4]
   24f54:	789b      	ldrb	r3, [r3, #2]
   24f56:	2b48      	cmp	r3, #72	; 0x48
   24f58:	d103      	bne.n	24f62 <appSlaveLegAdvStop+0x16>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   24f5a:	9b01      	ldr	r3, [sp, #4]
   24f5c:	791b      	ldrb	r3, [r3, #4]
   24f5e:	2b00      	cmp	r3, #0
   24f60:	d00c      	beq.n	24f7c <appSlaveLegAdvStop+0x30>
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   24f62:	4b08      	ldr	r3, [pc, #32]	; (24f84 <appSlaveLegAdvStop+0x38>)
   24f64:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   24f68:	2b00      	cmp	r3, #0
   24f6a:	d003      	beq.n	24f74 <appSlaveLegAdvStop+0x28>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   24f6c:	9801      	ldr	r0, [sp, #4]
   24f6e:	f7ff ffc1 	bl	24ef4 <appSlaveLegAdvTypeChanged>
   24f72:	e004      	b.n	24f7e <appSlaveLegAdvStop+0x32>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   24f74:	9801      	ldr	r0, [sp, #4]
   24f76:	f7ff ffd1 	bl	24f1c <appSlaveNextLegAdvState>
   24f7a:	e000      	b.n	24f7e <appSlaveLegAdvStop+0x32>
      return;
   24f7c:	bf00      	nop
  }
}
   24f7e:	b003      	add	sp, #12
   24f80:	f85d fb04 	ldr.w	pc, [sp], #4
   24f84:	100097d0 	.word	0x100097d0

00024f88 <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   24f88:	b500      	push	{lr}
   24f8a:	b083      	sub	sp, #12
   24f8c:	9001      	str	r0, [sp, #4]
  /* if connection closed */
  if (pMsg->hdr.event == DM_CONN_CLOSE_IND)
   24f8e:	9b01      	ldr	r3, [sp, #4]
   24f90:	789b      	ldrb	r3, [r3, #2]
   24f92:	2b28      	cmp	r3, #40	; 0x28
   24f94:	d109      	bne.n	24faa <appSlaveLegAdvRestart+0x22>
  {
    /* if connectable directed advertising failed to establish connection or was cancelled */
    if (appSlaveCb.advDirected)
   24f96:	4b15      	ldr	r3, [pc, #84]	; (24fec <appSlaveLegAdvRestart+0x64>)
   24f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   24f9c:	2b00      	cmp	r3, #0
   24f9e:	d016      	beq.n	24fce <appSlaveLegAdvRestart+0x46>
    {
      appSlaveCb.advDirected = FALSE;
   24fa0:	4b12      	ldr	r3, [pc, #72]	; (24fec <appSlaveLegAdvRestart+0x64>)
   24fa2:	2200      	movs	r2, #0
   24fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return;
   24fa8:	e01c      	b.n	24fe4 <appSlaveLegAdvRestart+0x5c>
    }
  }
  /* else if connection opened */
  else if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   24faa:	9b01      	ldr	r3, [sp, #4]
   24fac:	789b      	ldrb	r3, [r3, #2]
   24fae:	2b27      	cmp	r3, #39	; 0x27
   24fb0:	d10d      	bne.n	24fce <appSlaveLegAdvRestart+0x46>
  {
    /* if connectable directed advertising */
    if (appSlaveCb.advDirected)
   24fb2:	4b0e      	ldr	r3, [pc, #56]	; (24fec <appSlaveLegAdvRestart+0x64>)
   24fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   24fb8:	2b00      	cmp	r3, #0
   24fba:	d004      	beq.n	24fc6 <appSlaveLegAdvRestart+0x3e>
    {
      appSlaveCb.advDirected = FALSE;
   24fbc:	4b0b      	ldr	r3, [pc, #44]	; (24fec <appSlaveLegAdvRestart+0x64>)
   24fbe:	2200      	movs	r2, #0
   24fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return;
   24fc4:	e00e      	b.n	24fe4 <appSlaveLegAdvRestart+0x5c>
    }

    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   24fc6:	4b09      	ldr	r3, [pc, #36]	; (24fec <appSlaveLegAdvRestart+0x64>)
   24fc8:	2203      	movs	r2, #3
   24fca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   24fce:	4b07      	ldr	r3, [pc, #28]	; (24fec <appSlaveLegAdvRestart+0x64>)
   24fd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   24fd4:	2b03      	cmp	r3, #3
   24fd6:	d105      	bne.n	24fe4 <appSlaveLegAdvRestart+0x5c>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   24fd8:	4b04      	ldr	r3, [pc, #16]	; (24fec <appSlaveLegAdvRestart+0x64>)
   24fda:	2200      	movs	r2, #0
   24fdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* start advertising */
    appSlaveLegAdvStart();
   24fe0:	f7ff ff52 	bl	24e88 <appSlaveLegAdvStart>
  }
}
   24fe4:	b003      	add	sp, #12
   24fe6:	f85d fb04 	ldr.w	pc, [sp], #4
   24fea:	bf00      	nop
   24fec:	100097d0 	.word	0x100097d0

00024ff0 <appSlaveAdvMode>:
 *
 *  \return TRUE if legacy advertising mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveAdvMode(void)
{
   24ff0:	b508      	push	{r3, lr}
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   24ff2:	4b0c      	ldr	r3, [pc, #48]	; (25024 <appSlaveAdvMode+0x34>)
   24ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   24ff6:	2b00      	cmp	r3, #0
   24ff8:	d107      	bne.n	2500a <appSlaveAdvMode+0x1a>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   24ffa:	4b0a      	ldr	r3, [pc, #40]	; (25024 <appSlaveAdvMode+0x34>)
   24ffc:	4a0a      	ldr	r2, [pc, #40]	; (25028 <appSlaveAdvMode+0x38>)
   24ffe:	641a      	str	r2, [r3, #64]	; 0x40
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   25000:	4b08      	ldr	r3, [pc, #32]	; (25024 <appSlaveAdvMode+0x34>)
   25002:	4a0a      	ldr	r2, [pc, #40]	; (2502c <appSlaveAdvMode+0x3c>)
   25004:	645a      	str	r2, [r3, #68]	; 0x44

    return TRUE;
   25006:	2301      	movs	r3, #1
   25008:	e00a      	b.n	25020 <appSlaveAdvMode+0x30>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   2500a:	4b06      	ldr	r3, [pc, #24]	; (25024 <appSlaveAdvMode+0x34>)
   2500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2500e:	4a06      	ldr	r2, [pc, #24]	; (25028 <appSlaveAdvMode+0x38>)
   25010:	4293      	cmp	r3, r2
   25012:	d101      	bne.n	25018 <appSlaveAdvMode+0x28>
  {
    return TRUE;
   25014:	2301      	movs	r3, #1
   25016:	e003      	b.n	25020 <appSlaveAdvMode+0x30>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   25018:	4805      	ldr	r0, [pc, #20]	; (25030 <appSlaveAdvMode+0x40>)
   2501a:	f7f3 fe95 	bl	18d48 <WsfTrace>

  return FALSE;
   2501e:	2300      	movs	r3, #0
}
   25020:	4618      	mov	r0, r3
   25022:	bd08      	pop	{r3, pc}
   25024:	100097d0 	.word	0x100097d0
   25028:	00024f4d 	.word	0x00024f4d
   2502c:	00024f89 	.word	0x00024f89
   25030:	0002916c 	.word	0x0002916c

00025034 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   25034:	b500      	push	{lr}
   25036:	b085      	sub	sp, #20
   25038:	4603      	mov	r3, r0
   2503a:	9202      	str	r2, [sp, #8]
   2503c:	f88d 300f 	strb.w	r3, [sp, #15]
   25040:	460b      	mov	r3, r1
   25042:	f88d 300e 	strb.w	r3, [sp, #14]
  if (appSlaveAdvMode())
   25046:	f7ff ffd3 	bl	24ff0 <appSlaveAdvMode>
   2504a:	4603      	mov	r3, r0
   2504c:	2b00      	cmp	r3, #0
   2504e:	d013      	beq.n	25078 <AppAdvSetData+0x44>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   25050:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25054:	2b1f      	cmp	r3, #31
   25056:	d902      	bls.n	2505e <AppAdvSetData+0x2a>
    {
      len = HCI_ADV_DATA_LEN;
   25058:	231f      	movs	r3, #31
   2505a:	f88d 300e 	strb.w	r3, [sp, #14]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   2505e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25062:	b29a      	uxth	r2, r3
   25064:	f89d 100f 	ldrb.w	r1, [sp, #15]
   25068:	231f      	movs	r3, #31
   2506a:	9301      	str	r3, [sp, #4]
   2506c:	231f      	movs	r3, #31
   2506e:	9300      	str	r3, [sp, #0]
   25070:	9b02      	ldr	r3, [sp, #8]
   25072:	2000      	movs	r0, #0
   25074:	f7ff fcfc 	bl	24a70 <appAdvSetData>
  }
}
   25078:	bf00      	nop
   2507a:	b005      	add	sp, #20
   2507c:	f85d fb04 	ldr.w	pc, [sp], #4

00025080 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   25080:	b500      	push	{lr}
   25082:	b089      	sub	sp, #36	; 0x24
   25084:	4603      	mov	r3, r0
   25086:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   2508a:	f7ff ffb1 	bl	24ff0 <appSlaveAdvMode>
   2508e:	4603      	mov	r3, r0
   25090:	2b00      	cmp	r3, #0
   25092:	d01d      	beq.n	250d0 <AppAdvStart+0x50>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   25094:	2300      	movs	r3, #0
   25096:	f88d 301f 	strb.w	r3, [sp, #31]
    maxEaEvents = 0;
   2509a:	2300      	movs	r3, #0
   2509c:	f88d 301e 	strb.w	r3, [sp, #30]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   250a0:	4b0d      	ldr	r3, [pc, #52]	; (250d8 <AppAdvStart+0x58>)
   250a2:	2200      	movs	r2, #0
   250a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   250a8:	4b0c      	ldr	r3, [pc, #48]	; (250dc <AppAdvStart+0x5c>)
   250aa:	681b      	ldr	r3, [r3, #0]
   250ac:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   250ae:	4b0b      	ldr	r3, [pc, #44]	; (250dc <AppAdvStart+0x5c>)
   250b0:	681b      	ldr	r3, [r3, #0]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   250b2:	4618      	mov	r0, r3
   250b4:	f10d 011f 	add.w	r1, sp, #31
   250b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   250bc:	9302      	str	r3, [sp, #8]
   250be:	2301      	movs	r3, #1
   250c0:	9301      	str	r3, [sp, #4]
   250c2:	f10d 031e 	add.w	r3, sp, #30
   250c6:	9300      	str	r3, [sp, #0]
   250c8:	4603      	mov	r3, r0
   250ca:	2001      	movs	r0, #1
   250cc:	f7ff fdee 	bl	24cac <appSlaveAdvStart>
  }
}
   250d0:	bf00      	nop
   250d2:	b009      	add	sp, #36	; 0x24
   250d4:	f85d fb04 	ldr.w	pc, [sp], #4
   250d8:	100097d0 	.word	0x100097d0
   250dc:	1000976c 	.word	0x1000976c

000250e0 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   250e0:	b508      	push	{r3, lr}
  AttsAddGroup(&svcGapGroup);
   250e2:	4804      	ldr	r0, [pc, #16]	; (250f4 <SvcCoreAddGroup+0x14>)
   250e4:	f7f0 fc36 	bl	15954 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   250e8:	4803      	ldr	r0, [pc, #12]	; (250f8 <SvcCoreAddGroup+0x18>)
   250ea:	f7f0 fc33 	bl	15954 <AttsAddGroup>
}
   250ee:	bf00      	nop
   250f0:	bd08      	pop	{r3, pc}
   250f2:	bf00      	nop
   250f4:	10002bd0 	.word	0x10002bd0
   250f8:	10002be4 	.word	0x10002be4

000250fc <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   250fc:	b082      	sub	sp, #8
   250fe:	4603      	mov	r3, r0
   25100:	f88d 3007 	strb.w	r3, [sp, #7]
  gapValCar[0] = value;
   25104:	4a03      	ldr	r2, [pc, #12]	; (25114 <SvcCoreGapCentAddrResUpdate+0x18>)
   25106:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2510a:	7013      	strb	r3, [r2, #0]
}
   2510c:	bf00      	nop
   2510e:	b002      	add	sp, #8
   25110:	4770      	bx	lr
   25112:	bf00      	nop
   25114:	10008774 	.word	0x10008774

00025118 <SvcWpAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcWpAddGroup(void)
{
   25118:	b508      	push	{r3, lr}
  AttsAddGroup(&svcWpGroup);
   2511a:	4802      	ldr	r0, [pc, #8]	; (25124 <SvcWpAddGroup+0xc>)
   2511c:	f7f0 fc1a 	bl	15954 <AttsAddGroup>
}
   25120:	bf00      	nop
   25122:	bd08      	pop	{r3, pc}
   25124:	10002bf8 	.word	0x10002bf8

00025128 <SvcWpCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcWpCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   25128:	b082      	sub	sp, #8
   2512a:	9001      	str	r0, [sp, #4]
   2512c:	9100      	str	r1, [sp, #0]
  svcWpGroup.readCback = readCback;
   2512e:	4a04      	ldr	r2, [pc, #16]	; (25140 <SvcWpCbackRegister+0x18>)
   25130:	9b01      	ldr	r3, [sp, #4]
   25132:	6093      	str	r3, [r2, #8]
  svcWpGroup.writeCback = writeCback;
   25134:	4a02      	ldr	r2, [pc, #8]	; (25140 <SvcWpCbackRegister+0x18>)
   25136:	9b00      	ldr	r3, [sp, #0]
   25138:	60d3      	str	r3, [r2, #12]
}
   2513a:	bf00      	nop
   2513c:	b002      	add	sp, #8
   2513e:	4770      	bx	lr
   25140:	10002bf8 	.word	0x10002bf8

00025144 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   25144:	4811      	ldr	r0, [pc, #68]	; (2518c <zero_loop+0x12>)
   25146:	4912      	ldr	r1, [pc, #72]	; (25190 <zero_loop+0x16>)
   25148:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   2514a:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   2514e:	4811      	ldr	r0, [pc, #68]	; (25194 <zero_loop+0x1a>)
   25150:	6801      	ldr	r1, [r0, #0]
   25152:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   25156:	6001      	str	r1, [r0, #0]
   25158:	f3bf 8f4f 	dsb	sy
   2515c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   25160:	480d      	ldr	r0, [pc, #52]	; (25198 <zero_loop+0x1e>)
   25162:	490e      	ldr	r1, [pc, #56]	; (2519c <zero_loop+0x22>)
   25164:	4a0e      	ldr	r2, [pc, #56]	; (251a0 <zero_loop+0x26>)

00025166 <copy_loop>:
   25166:	f850 3b04 	ldr.w	r3, [r0], #4
   2516a:	f841 3b04 	str.w	r3, [r1], #4
   2516e:	4291      	cmp	r1, r2
   25170:	dbf9      	blt.n	25166 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   25172:	480c      	ldr	r0, [pc, #48]	; (251a4 <zero_loop+0x2a>)
   25174:	490c      	ldr	r1, [pc, #48]	; (251a8 <zero_loop+0x2e>)
   25176:	f04f 0200 	mov.w	r2, #0

0002517a <zero_loop>:
   2517a:	4288      	cmp	r0, r1
   2517c:	bfb8      	it	lt
   2517e:	f840 2b04 	strlt.w	r2, [r0], #4
   25182:	dbfa      	blt.n	2517a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   25184:	f7f5 ff04 	bl	1af90 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   25188:	be00      	bkpt	0x0000
}
   2518a:	bf00      	nop
   2518c:	e000ed08 	.word	0xe000ed08
   25190:	0000c000 	.word	0x0000c000
   25194:	e000ed88 	.word	0xe000ed88
   25198:	0002bb54 	.word	0x0002bb54
   2519c:	10002b00 	.word	0x10002b00
   251a0:	100035b0 	.word	0x100035b0
   251a4:	100035b0 	.word	0x100035b0
   251a8:	100099ac 	.word	0x100099ac

000251ac <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   251ac:	e7fe      	b.n	251ac <NMI_Handler>

000251ae <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   251ae:	e7fe      	b.n	251ae <BusFault_Handler>

000251b0 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   251b0:	e7fe      	b.n	251b0 <DebugMon_Handler>
	...

000251b4 <am_hal_ble_blocking_transfer.part.0>:
   251b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251b8:	4dbf      	ldr	r5, [pc, #764]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   251ba:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   251be:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   251c2:	f36f 13c7 	bfc	r3, #7, #1
   251c6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   251ca:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   251ce:	f36f 2308 	bfc	r3, #8, #1
   251d2:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   251d6:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   251da:	f36f 0300 	bfc	r3, #0, #1
   251de:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   251e2:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   251e6:	f36f 0341 	bfc	r3, #1, #1
   251ea:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   251ee:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   251f2:	f043 0301 	orr.w	r3, r3, #1
   251f6:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   251fa:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   251fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   25202:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   25206:	7a8b      	ldrb	r3, [r1, #10]
   25208:	2b01      	cmp	r3, #1
   2520a:	b085      	sub	sp, #20
   2520c:	460e      	mov	r6, r1
   2520e:	4604      	mov	r4, r0
   25210:	d03c      	beq.n	2528c <am_hal_ble_blocking_transfer.part.0+0xd8>
   25212:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   25216:	061a      	lsls	r2, r3, #24
   25218:	d532      	bpl.n	25280 <am_hal_ble_blocking_transfer.part.0+0xcc>
   2521a:	f001 fee3 	bl	26fe4 <am_hal_interrupt_master_disable>
   2521e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   25222:	9003      	str	r0, [sp, #12]
   25224:	9803      	ldr	r0, [sp, #12]
   25226:	2b00      	cmp	r3, #0
   25228:	d151      	bne.n	252ce <am_hal_ble_blocking_transfer.part.0+0x11a>
   2522a:	2301      	movs	r3, #1
   2522c:	6463      	str	r3, [r4, #68]	; 0x44
   2522e:	f001 fedd 	bl	26fec <am_hal_interrupt_master_set>
   25232:	7b33      	ldrb	r3, [r6, #12]
   25234:	b113      	cbz	r3, 2523c <am_hal_ble_blocking_transfer.part.0+0x88>
   25236:	2301      	movs	r3, #1
   25238:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   2523c:	6833      	ldr	r3, [r6, #0]
   2523e:	6872      	ldr	r2, [r6, #4]
   25240:	68b1      	ldr	r1, [r6, #8]
   25242:	68f0      	ldr	r0, [r6, #12]
   25244:	61a0      	str	r0, [r4, #24]
   25246:	60e3      	str	r3, [r4, #12]
   25248:	6122      	str	r2, [r4, #16]
   2524a:	6161      	str	r1, [r4, #20]
   2524c:	6933      	ldr	r3, [r6, #16]
   2524e:	6972      	ldr	r2, [r6, #20]
   25250:	6222      	str	r2, [r4, #32]
   25252:	61e3      	str	r3, [r4, #28]
   25254:	f001 fec6 	bl	26fe4 <am_hal_interrupt_master_disable>
   25258:	6823      	ldr	r3, [r4, #0]
   2525a:	4a98      	ldr	r2, [pc, #608]	; (254bc <am_hal_ble_blocking_transfer.part.0+0x308>)
   2525c:	9001      	str	r0, [sp, #4]
   2525e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25262:	4293      	cmp	r3, r2
   25264:	f104 070c 	add.w	r7, r4, #12
   25268:	f040 815f 	bne.w	2552a <am_hal_ble_blocking_transfer.part.0+0x376>
   2526c:	79f2      	ldrb	r2, [r6, #7]
   2526e:	2a03      	cmp	r2, #3
   25270:	f200 815b 	bhi.w	2552a <am_hal_ble_blocking_transfer.part.0+0x376>
   25274:	e8df f012 	tbh	[pc, r2, lsl #1]
   25278:	010c0076 	.word	0x010c0076
   2527c:	01000107 	.word	0x01000107
   25280:	488f      	ldr	r0, [pc, #572]	; (254c0 <am_hal_ble_blocking_transfer.part.0+0x30c>)
   25282:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   25286:	b005      	add	sp, #20
   25288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2528c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   25290:	b333      	cbz	r3, 252e0 <am_hal_ble_blocking_transfer.part.0+0x12c>
   25292:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
   25296:	2d00      	cmp	r5, #0
   25298:	f000 81cd 	beq.w	25636 <am_hal_ble_blocking_transfer.part.0+0x482>
   2529c:	2300      	movs	r3, #0
   2529e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
   252a2:	4f85      	ldr	r7, [pc, #532]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   252a4:	f240 152d 	movw	r5, #301	; 0x12d
   252a8:	f04f 0900 	mov.w	r9, #0
   252ac:	e008      	b.n	252c0 <am_hal_ble_blocking_transfer.part.0+0x10c>
   252ae:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   252b2:	071a      	lsls	r2, r3, #28
   252b4:	d518      	bpl.n	252e8 <am_hal_ble_blocking_transfer.part.0+0x134>
   252b6:	20a0      	movs	r0, #160	; 0xa0
   252b8:	f001 fcbc 	bl	26c34 <am_hal_flash_delay>
   252bc:	3d01      	subs	r5, #1
   252be:	d013      	beq.n	252e8 <am_hal_ble_blocking_transfer.part.0+0x134>
   252c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   252c4:	2b00      	cmp	r3, #0
   252c6:	d0f2      	beq.n	252ae <am_hal_ble_blocking_transfer.part.0+0xfa>
   252c8:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   252cc:	e7f3      	b.n	252b6 <am_hal_ble_blocking_transfer.part.0+0x102>
   252ce:	f001 fe8d 	bl	26fec <am_hal_interrupt_master_set>
   252d2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   252d6:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   252da:	b005      	add	sp, #20
   252dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   252e4:	2b00      	cmp	r3, #0
   252e6:	d1dc      	bne.n	252a2 <am_hal_ble_blocking_transfer.part.0+0xee>
   252e8:	4d73      	ldr	r5, [pc, #460]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   252ea:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   252ee:	f043 0302 	orr.w	r3, r3, #2
   252f2:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   252f6:	2050      	movs	r0, #80	; 0x50
   252f8:	f001 fc9c 	bl	26c34 <am_hal_flash_delay>
   252fc:	6823      	ldr	r3, [r4, #0]
   252fe:	4a6f      	ldr	r2, [pc, #444]	; (254bc <am_hal_ble_blocking_transfer.part.0+0x308>)
   25300:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25304:	4293      	cmp	r3, r2
   25306:	d105      	bne.n	25314 <am_hal_ble_blocking_transfer.part.0+0x160>
   25308:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   2530c:	f043 030c 	orr.w	r3, r3, #12
   25310:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   25314:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   25318:	4f67      	ldr	r7, [pc, #412]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   2531a:	2500      	movs	r5, #0
   2531c:	46a9      	mov	r9, r5
   2531e:	2b00      	cmp	r3, #0
   25320:	f040 80c6 	bne.w	254b0 <am_hal_ble_blocking_transfer.part.0+0x2fc>
   25324:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   25328:	2b00      	cmp	r3, #0
   2532a:	f000 80cd 	beq.w	254c8 <am_hal_ble_blocking_transfer.part.0+0x314>
   2532e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
   25332:	05d8      	lsls	r0, r3, #23
   25334:	f140 80cd 	bpl.w	254d2 <am_hal_ble_blocking_transfer.part.0+0x31e>
   25338:	f001 fe54 	bl	26fe4 <am_hal_interrupt_master_disable>
   2533c:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
   25340:	9002      	str	r0, [sp, #8]
   25342:	9802      	ldr	r0, [sp, #8]
   25344:	f1ba 0f00 	cmp.w	sl, #0
   25348:	f040 80a7 	bne.w	2549a <am_hal_ble_blocking_transfer.part.0+0x2e6>
   2534c:	2301      	movs	r3, #1
   2534e:	6463      	str	r3, [r4, #68]	; 0x44
   25350:	f001 fe4c 	bl	26fec <am_hal_interrupt_master_set>
   25354:	4b58      	ldr	r3, [pc, #352]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   25356:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2535a:	f36a 0241 	bfi	r2, sl, #1, #1
   2535e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   25362:	e766      	b.n	25232 <am_hal_ble_blocking_transfer.part.0+0x7e>
   25364:	2500      	movs	r5, #0
   25366:	46a9      	mov	r9, r5
   25368:	f896 e00a 	ldrb.w	lr, [r6, #10]
   2536c:	f896 c00c 	ldrb.w	ip, [r6, #12]
   25370:	8930      	ldrh	r0, [r6, #8]
   25372:	f8df a150 	ldr.w	sl, [pc, #336]	; 254c4 <am_hal_ble_blocking_transfer.part.0+0x310>
   25376:	0151      	lsls	r1, r2, #5
   25378:	ea4e 13cc 	orr.w	r3, lr, ip, lsl #7
   2537c:	f001 0b60 	and.w	fp, r1, #96	; 0x60
   25380:	ea0a 2a00 	and.w	sl, sl, r0, lsl #8
   25384:	ea43 030b 	orr.w	r3, r3, fp
   25388:	ea43 030a 	orr.w	r3, r3, sl
   2538c:	f8df a128 	ldr.w	sl, [pc, #296]	; 254b8 <am_hal_ble_blocking_transfer.part.0+0x304>
   25390:	ea43 0309 	orr.w	r3, r3, r9
   25394:	f1be 0f01 	cmp.w	lr, #1
   25398:	f8ca 5214 	str.w	r5, [sl, #532]	; 0x214
   2539c:	f8ca 320c 	str.w	r3, [sl, #524]	; 0x20c
   253a0:	f000 813e 	beq.w	25620 <am_hal_ble_blocking_transfer.part.0+0x46c>
   253a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   253a6:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   253aa:	f8df e110 	ldr.w	lr, [pc, #272]	; 254bc <am_hal_ble_blocking_transfer.part.0+0x308>
   253ae:	4a42      	ldr	r2, [pc, #264]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   253b0:	2500      	movs	r5, #0
   253b2:	459c      	cmp	ip, r3
   253b4:	d924      	bls.n	25400 <am_hal_ble_blocking_transfer.part.0+0x24c>
   253b6:	6821      	ldr	r1, [r4, #0]
   253b8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
   253bc:	4571      	cmp	r1, lr
   253be:	d1fd      	bne.n	253bc <am_hal_ble_blocking_transfer.part.0+0x208>
   253c0:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   253c4:	f3c1 4107 	ubfx	r1, r1, #16, #8
   253c8:	2903      	cmp	r1, #3
   253ca:	d9f2      	bls.n	253b2 <am_hal_ble_blocking_transfer.part.0+0x1fe>
   253cc:	458c      	cmp	ip, r1
   253ce:	f240 80a6 	bls.w	2551e <am_hal_ble_blocking_transfer.part.0+0x36a>
   253d2:	68e0      	ldr	r0, [r4, #12]
   253d4:	f021 0103 	bic.w	r1, r1, #3
   253d8:	f023 0303 	bic.w	r3, r3, #3
   253dc:	eb00 0903 	add.w	r9, r0, r3
   253e0:	464b      	mov	r3, r9
   253e2:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
   253e6:	f843 0b04 	str.w	r0, [r3], #4
   253ea:	eba3 0009 	sub.w	r0, r3, r9
   253ee:	4288      	cmp	r0, r1
   253f0:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
   253f4:	d3f5      	bcc.n	253e2 <am_hal_ble_blocking_transfer.part.0+0x22e>
   253f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   253f8:	440b      	add	r3, r1
   253fa:	459c      	cmp	ip, r3
   253fc:	63e3      	str	r3, [r4, #60]	; 0x3c
   253fe:	d8da      	bhi.n	253b6 <am_hal_ble_blocking_transfer.part.0+0x202>
   25400:	9801      	ldr	r0, [sp, #4]
   25402:	f001 fdf3 	bl	26fec <am_hal_interrupt_master_set>
   25406:	4b2c      	ldr	r3, [pc, #176]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   25408:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   2540c:	07d2      	lsls	r2, r2, #31
   2540e:	d40d      	bmi.n	2542c <am_hal_ble_blocking_transfer.part.0+0x278>
   25410:	4699      	mov	r9, r3
   25412:	f242 7510 	movw	r5, #10000	; 0x2710
   25416:	e002      	b.n	2541e <am_hal_ble_blocking_transfer.part.0+0x26a>
   25418:	3d01      	subs	r5, #1
   2541a:	f000 810a 	beq.w	25632 <am_hal_ble_blocking_transfer.part.0+0x47e>
   2541e:	2010      	movs	r0, #16
   25420:	f001 fc08 	bl	26c34 <am_hal_flash_delay>
   25424:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   25428:	07db      	lsls	r3, r3, #31
   2542a:	d5f5      	bpl.n	25418 <am_hal_ble_blocking_transfer.part.0+0x264>
   2542c:	4a22      	ldr	r2, [pc, #136]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   2542e:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   25432:	f043 0301 	orr.w	r3, r3, #1
   25436:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   2543a:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   2543e:	2300      	movs	r3, #0
   25440:	f041 0102 	orr.w	r1, r1, #2
   25444:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   25448:	60e3      	str	r3, [r4, #12]
   2544a:	607b      	str	r3, [r7, #4]
   2544c:	60bb      	str	r3, [r7, #8]
   2544e:	60fb      	str	r3, [r7, #12]
   25450:	613b      	str	r3, [r7, #16]
   25452:	617b      	str	r3, [r7, #20]
   25454:	63e3      	str	r3, [r4, #60]	; 0x3c
   25456:	7ab3      	ldrb	r3, [r6, #10]
   25458:	2b01      	cmp	r3, #1
   2545a:	f000 80cf 	beq.w	255fc <am_hal_ble_blocking_transfer.part.0+0x448>
   2545e:	2b02      	cmp	r3, #2
   25460:	f000 80c3 	beq.w	255ea <am_hal_ble_blocking_transfer.part.0+0x436>
   25464:	2300      	movs	r3, #0
   25466:	4a14      	ldr	r2, [pc, #80]	; (254b8 <am_hal_ble_blocking_transfer.part.0+0x304>)
   25468:	4618      	mov	r0, r3
   2546a:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   2546e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   25472:	b005      	add	sp, #20
   25474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25478:	88b5      	ldrh	r5, [r6, #4]
   2547a:	79b3      	ldrb	r3, [r6, #6]
   2547c:	ba6d      	rev16	r5, r5
   2547e:	b2ad      	uxth	r5, r5
   25480:	ea4f 6903 	mov.w	r9, r3, lsl #24
   25484:	e770      	b.n	25368 <am_hal_ble_blocking_transfer.part.0+0x1b4>
   25486:	7973      	ldrb	r3, [r6, #5]
   25488:	7935      	ldrb	r5, [r6, #4]
   2548a:	ea4f 6903 	mov.w	r9, r3, lsl #24
   2548e:	e76b      	b.n	25368 <am_hal_ble_blocking_transfer.part.0+0x1b4>
   25490:	7933      	ldrb	r3, [r6, #4]
   25492:	2500      	movs	r5, #0
   25494:	ea4f 6903 	mov.w	r9, r3, lsl #24
   25498:	e766      	b.n	25368 <am_hal_ble_blocking_transfer.part.0+0x1b4>
   2549a:	f001 fda7 	bl	26fec <am_hal_interrupt_master_set>
   2549e:	20a0      	movs	r0, #160	; 0xa0
   254a0:	f001 fbc8 	bl	26c34 <am_hal_flash_delay>
   254a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   254a8:	3501      	adds	r5, #1
   254aa:	2b00      	cmp	r3, #0
   254ac:	f43f af3a 	beq.w	25324 <am_hal_ble_blocking_transfer.part.0+0x170>
   254b0:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   254b4:	e740      	b.n	25338 <am_hal_ble_blocking_transfer.part.0+0x184>
   254b6:	bf00      	nop
   254b8:	5000c000 	.word	0x5000c000
   254bc:	01775230 	.word	0x01775230
   254c0:	08000001 	.word	0x08000001
   254c4:	000fff00 	.word	0x000fff00
   254c8:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   254cc:	071b      	lsls	r3, r3, #28
   254ce:	f53f af33 	bmi.w	25338 <am_hal_ble_blocking_transfer.part.0+0x184>
   254d2:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   254d6:	d003      	beq.n	254e0 <am_hal_ble_blocking_transfer.part.0+0x32c>
   254d8:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   254dc:	0619      	lsls	r1, r3, #24
   254de:	d5de      	bpl.n	2549e <am_hal_ble_blocking_transfer.part.0+0x2ea>
   254e0:	6823      	ldr	r3, [r4, #0]
   254e2:	4a6f      	ldr	r2, [pc, #444]	; (256a0 <am_hal_ble_blocking_transfer.part.0+0x4ec>)
   254e4:	486f      	ldr	r0, [pc, #444]	; (256a4 <am_hal_ble_blocking_transfer.part.0+0x4f0>)
   254e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   254ea:	4293      	cmp	r3, r2
   254ec:	4b6e      	ldr	r3, [pc, #440]	; (256a8 <am_hal_ble_blocking_transfer.part.0+0x4f4>)
   254ee:	f040 80cd 	bne.w	2568c <am_hal_ble_blocking_transfer.part.0+0x4d8>
   254f2:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   254f6:	2102      	movs	r1, #2
   254f8:	f361 0283 	bfi	r2, r1, #2, #2
   254fc:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   25500:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   25504:	f36f 0241 	bfc	r2, #1, #1
   25508:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   2550c:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   25510:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   25514:	f361 0283 	bfi	r2, r1, #2, #2
   25518:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   2551c:	e6b3      	b.n	25286 <am_hal_ble_blocking_transfer.part.0+0xd2>
   2551e:	ebac 0103 	sub.w	r1, ip, r3
   25522:	68e0      	ldr	r0, [r4, #12]
   25524:	f023 0303 	bic.w	r3, r3, #3
   25528:	e758      	b.n	253dc <am_hal_ble_blocking_transfer.part.0+0x228>
   2552a:	7ab3      	ldrb	r3, [r6, #10]
   2552c:	2b01      	cmp	r3, #1
   2552e:	f47f af39 	bne.w	253a4 <am_hal_ble_blocking_transfer.part.0+0x1f0>
   25532:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   25536:	68e5      	ldr	r5, [r4, #12]
   25538:	f8df b16c 	ldr.w	fp, [pc, #364]	; 256a8 <am_hal_ble_blocking_transfer.part.0+0x4f4>
   2553c:	f1b9 0f00 	cmp.w	r9, #0
   25540:	d019      	beq.n	25576 <am_hal_ble_blocking_transfer.part.0+0x3c2>
   25542:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   25546:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2554a:	2b03      	cmp	r3, #3
   2554c:	d835      	bhi.n	255ba <am_hal_ble_blocking_transfer.part.0+0x406>
   2554e:	f8df a160 	ldr.w	sl, [pc, #352]	; 256b0 <am_hal_ble_blocking_transfer.part.0+0x4fc>
   25552:	e00a      	b.n	2556a <am_hal_ble_blocking_transfer.part.0+0x3b6>
   25554:	f1ba 0a01 	subs.w	sl, sl, #1
   25558:	d00d      	beq.n	25576 <am_hal_ble_blocking_transfer.part.0+0x3c2>
   2555a:	f001 fb6b 	bl	26c34 <am_hal_flash_delay>
   2555e:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   25562:	f3c3 2307 	ubfx	r3, r3, #8, #8
   25566:	2b03      	cmp	r3, #3
   25568:	d827      	bhi.n	255ba <am_hal_ble_blocking_transfer.part.0+0x406>
   2556a:	f8db 3224 	ldr.w	r3, [fp, #548]	; 0x224
   2556e:	07db      	lsls	r3, r3, #31
   25570:	f04f 0010 	mov.w	r0, #16
   25574:	d5ee      	bpl.n	25554 <am_hal_ble_blocking_transfer.part.0+0x3a0>
   25576:	4d4c      	ldr	r5, [pc, #304]	; (256a8 <am_hal_ble_blocking_transfer.part.0+0x4f4>)
   25578:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
   2557c:	07d8      	lsls	r0, r3, #31
   2557e:	bf58      	it	pl
   25580:	f44f 69fa 	movpl.w	r9, #2000	; 0x7d0
   25584:	d409      	bmi.n	2559a <am_hal_ble_blocking_transfer.part.0+0x3e6>
   25586:	2010      	movs	r0, #16
   25588:	f001 fb54 	bl	26c34 <am_hal_flash_delay>
   2558c:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
   25590:	07d9      	lsls	r1, r3, #31
   25592:	d402      	bmi.n	2559a <am_hal_ble_blocking_transfer.part.0+0x3e6>
   25594:	f1b9 0901 	subs.w	r9, r9, #1
   25598:	d1f5      	bne.n	25586 <am_hal_ble_blocking_transfer.part.0+0x3d2>
   2559a:	6823      	ldr	r3, [r4, #0]
   2559c:	4a40      	ldr	r2, [pc, #256]	; (256a0 <am_hal_ble_blocking_transfer.part.0+0x4ec>)
   2559e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   255a2:	4293      	cmp	r3, r2
   255a4:	f47f af2c 	bne.w	25400 <am_hal_ble_blocking_transfer.part.0+0x24c>
   255a8:	4b3f      	ldr	r3, [pc, #252]	; (256a8 <am_hal_ble_blocking_transfer.part.0+0x4f4>)
   255aa:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   255ae:	2102      	movs	r1, #2
   255b0:	f361 0283 	bfi	r2, r1, #2, #2
   255b4:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   255b8:	e722      	b.n	25400 <am_hal_ble_blocking_transfer.part.0+0x24c>
   255ba:	f009 0003 	and.w	r0, r9, #3
   255be:	462a      	mov	r2, r5
   255c0:	f852 1b04 	ldr.w	r1, [r2], #4
   255c4:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
   255c8:	4581      	cmp	r9, r0
   255ca:	eba5 0102 	sub.w	r1, r5, r2
   255ce:	4419      	add	r1, r3
   255d0:	f1a9 0904 	sub.w	r9, r9, #4
   255d4:	d005      	beq.n	255e2 <am_hal_ble_blocking_transfer.part.0+0x42e>
   255d6:	2903      	cmp	r1, #3
   255d8:	d905      	bls.n	255e6 <am_hal_ble_blocking_transfer.part.0+0x432>
   255da:	f1b9 0f00 	cmp.w	r9, #0
   255de:	d1ef      	bne.n	255c0 <am_hal_ble_blocking_transfer.part.0+0x40c>
   255e0:	e7c9      	b.n	25576 <am_hal_ble_blocking_transfer.part.0+0x3c2>
   255e2:	f04f 0900 	mov.w	r9, #0
   255e6:	4615      	mov	r5, r2
   255e8:	e7a8      	b.n	2553c <am_hal_ble_blocking_transfer.part.0+0x388>
   255ea:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   255ee:	2b00      	cmp	r3, #0
   255f0:	f43f af38 	beq.w	25464 <am_hal_ble_blocking_transfer.part.0+0x2b0>
   255f4:	2300      	movs	r3, #0
   255f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   255fa:	e733      	b.n	25464 <am_hal_ble_blocking_transfer.part.0+0x2b0>
   255fc:	6823      	ldr	r3, [r4, #0]
   255fe:	4928      	ldr	r1, [pc, #160]	; (256a0 <am_hal_ble_blocking_transfer.part.0+0x4ec>)
   25600:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25604:	428b      	cmp	r3, r1
   25606:	d106      	bne.n	25616 <am_hal_ble_blocking_transfer.part.0+0x462>
   25608:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   2560c:	2102      	movs	r1, #2
   2560e:	f361 0383 	bfi	r3, r1, #2, #2
   25612:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   25616:	2301      	movs	r3, #1
   25618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2561c:	7ab3      	ldrb	r3, [r6, #10]
   2561e:	e71e      	b.n	2545e <am_hal_ble_blocking_transfer.part.0+0x2aa>
   25620:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   25624:	68e5      	ldr	r5, [r4, #12]
   25626:	2a03      	cmp	r2, #3
   25628:	d886      	bhi.n	25538 <am_hal_ble_blocking_transfer.part.0+0x384>
   2562a:	e8df f002 	tbb	[pc, r2]
   2562e:	2b0d      	.short	0x2b0d
   25630:	2127      	.short	0x2127
   25632:	481e      	ldr	r0, [pc, #120]	; (256ac <am_hal_ble_blocking_transfer.part.0+0x4f8>)
   25634:	e627      	b.n	25286 <am_hal_ble_blocking_transfer.part.0+0xd2>
   25636:	f64b 3080 	movw	r0, #48000	; 0xbb80
   2563a:	f001 fafb 	bl	26c34 <am_hal_flash_delay>
   2563e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   25642:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
   25646:	e64d      	b.n	252e4 <am_hal_ble_blocking_transfer.part.0+0x130>
   25648:	2200      	movs	r2, #0
   2564a:	4613      	mov	r3, r2
   2564c:	f8df e064 	ldr.w	lr, [pc, #100]	; 256b4 <am_hal_ble_blocking_transfer.part.0+0x500>
   25650:	f001 0160 	and.w	r1, r1, #96	; 0x60
   25654:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
   25658:	430b      	orrs	r3, r1
   2565a:	ea0e 2000 	and.w	r0, lr, r0, lsl #8
   2565e:	4912      	ldr	r1, [pc, #72]	; (256a8 <am_hal_ble_blocking_transfer.part.0+0x4f4>)
   25660:	4303      	orrs	r3, r0
   25662:	f043 0301 	orr.w	r3, r3, #1
   25666:	f8c1 2214 	str.w	r2, [r1, #532]	; 0x214
   2566a:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   2566e:	e763      	b.n	25538 <am_hal_ble_blocking_transfer.part.0+0x384>
   25670:	88b2      	ldrh	r2, [r6, #4]
   25672:	79b3      	ldrb	r3, [r6, #6]
   25674:	ba52      	rev16	r2, r2
   25676:	b292      	uxth	r2, r2
   25678:	061b      	lsls	r3, r3, #24
   2567a:	e7e7      	b.n	2564c <am_hal_ble_blocking_transfer.part.0+0x498>
   2567c:	7973      	ldrb	r3, [r6, #5]
   2567e:	7932      	ldrb	r2, [r6, #4]
   25680:	061b      	lsls	r3, r3, #24
   25682:	e7e3      	b.n	2564c <am_hal_ble_blocking_transfer.part.0+0x498>
   25684:	7933      	ldrb	r3, [r6, #4]
   25686:	2200      	movs	r2, #0
   25688:	061b      	lsls	r3, r3, #24
   2568a:	e7df      	b.n	2564c <am_hal_ble_blocking_transfer.part.0+0x498>
   2568c:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   25690:	f36f 0241 	bfc	r2, #1, #1
   25694:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   25698:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   2569c:	e5f3      	b.n	25286 <am_hal_ble_blocking_transfer.part.0+0xd2>
   2569e:	bf00      	nop
   256a0:	01775230 	.word	0x01775230
   256a4:	08000002 	.word	0x08000002
   256a8:	5000c000 	.word	0x5000c000
   256ac:	08000009 	.word	0x08000009
   256b0:	0007a121 	.word	0x0007a121
   256b4:	000fff00 	.word	0x000fff00

000256b8 <am_hal_ble_initialize>:
   256b8:	bb48      	cbnz	r0, 2570e <am_hal_ble_initialize+0x56>
   256ba:	b351      	cbz	r1, 25712 <am_hal_ble_initialize+0x5a>
   256bc:	4b16      	ldr	r3, [pc, #88]	; (25718 <am_hal_ble_initialize+0x60>)
   256be:	78d8      	ldrb	r0, [r3, #3]
   256c0:	b470      	push	{r4, r5, r6}
   256c2:	f3c0 0600 	ubfx	r6, r0, #0, #1
   256c6:	f010 0001 	ands.w	r0, r0, #1
   256ca:	d11d      	bne.n	25708 <am_hal_ble_initialize+0x50>
   256cc:	681a      	ldr	r2, [r3, #0]
   256ce:	4d13      	ldr	r5, [pc, #76]	; (2571c <am_hal_ble_initialize+0x64>)
   256d0:	60d8      	str	r0, [r3, #12]
   256d2:	e9c3 0004 	strd	r0, r0, [r3, #16]
   256d6:	e9c3 0006 	strd	r0, r0, [r3, #24]
   256da:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
   256de:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
   256e2:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   256e6:	4315      	orrs	r5, r2
   256e8:	6258      	str	r0, [r3, #36]	; 0x24
   256ea:	6218      	str	r0, [r3, #32]
   256ec:	6398      	str	r0, [r3, #56]	; 0x38
   256ee:	f883 6047 	strb.w	r6, [r3, #71]	; 0x47
   256f2:	721e      	strb	r6, [r3, #8]
   256f4:	601d      	str	r5, [r3, #0]
   256f6:	63d8      	str	r0, [r3, #60]	; 0x3c
   256f8:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
   256fc:	f8c3 0043 	str.w	r0, [r3, #67]	; 0x43
   25700:	6058      	str	r0, [r3, #4]
   25702:	bc70      	pop	{r4, r5, r6}
   25704:	600b      	str	r3, [r1, #0]
   25706:	4770      	bx	lr
   25708:	2007      	movs	r0, #7
   2570a:	bc70      	pop	{r4, r5, r6}
   2570c:	4770      	bx	lr
   2570e:	2005      	movs	r0, #5
   25710:	4770      	bx	lr
   25712:	2006      	movs	r0, #6
   25714:	4770      	bx	lr
   25716:	bf00      	nop
   25718:	10009818 	.word	0x10009818
   2571c:	01775230 	.word	0x01775230

00025720 <am_hal_ble_deinitialize>:
   25720:	b128      	cbz	r0, 2572e <am_hal_ble_deinitialize+0xe>
   25722:	6803      	ldr	r3, [r0, #0]
   25724:	4a0d      	ldr	r2, [pc, #52]	; (2575c <am_hal_ble_deinitialize+0x3c>)
   25726:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2572a:	4293      	cmp	r3, r2
   2572c:	d001      	beq.n	25732 <am_hal_ble_deinitialize+0x12>
   2572e:	2002      	movs	r0, #2
   25730:	4770      	bx	lr
   25732:	6802      	ldr	r2, [r0, #0]
   25734:	2300      	movs	r3, #0
   25736:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   2573a:	6002      	str	r2, [r0, #0]
   2573c:	60c3      	str	r3, [r0, #12]
   2573e:	6103      	str	r3, [r0, #16]
   25740:	6143      	str	r3, [r0, #20]
   25742:	6183      	str	r3, [r0, #24]
   25744:	61c3      	str	r3, [r0, #28]
   25746:	6203      	str	r3, [r0, #32]
   25748:	6043      	str	r3, [r0, #4]
   2574a:	63c3      	str	r3, [r0, #60]	; 0x3c
   2574c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
   25750:	f8c0 3043 	str.w	r3, [r0, #67]	; 0x43
   25754:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   25758:	4618      	mov	r0, r3
   2575a:	4770      	bx	lr
   2575c:	01775230 	.word	0x01775230

00025760 <am_hal_ble_config>:
   25760:	2800      	cmp	r0, #0
   25762:	d04e      	beq.n	25802 <am_hal_ble_config+0xa2>
   25764:	6803      	ldr	r3, [r0, #0]
   25766:	4a3e      	ldr	r2, [pc, #248]	; (25860 <am_hal_ble_config+0x100>)
   25768:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2576c:	4293      	cmp	r3, r2
   2576e:	d148      	bne.n	25802 <am_hal_ble_config+0xa2>
   25770:	b4f0      	push	{r4, r5, r6, r7}
   25772:	4b3c      	ldr	r3, [pc, #240]	; (25864 <am_hal_ble_config+0x104>)
   25774:	6844      	ldr	r4, [r0, #4]
   25776:	4d3b      	ldr	r5, [pc, #236]	; (25864 <am_hal_ble_config+0x104>)
   25778:	2203      	movs	r2, #3
   2577a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   2577e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   25782:	f36f 4251 	bfc	r2, #17, #1
   25786:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   2578a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2578e:	f36f 4210 	bfc	r2, #16, #1
   25792:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   25796:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2579a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   2579e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   257a2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   257a6:	6888      	ldr	r0, [r1, #8]
   257a8:	f360 220d 	bfi	r2, r0, #8, #6
   257ac:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   257b0:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   257b4:	6848      	ldr	r0, [r1, #4]
   257b6:	f360 0205 	bfi	r2, r0, #0, #6
   257ba:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   257be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   257c2:	f042 0201 	orr.w	r2, r2, #1
   257c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   257ca:	680b      	ldr	r3, [r1, #0]
   257cc:	68c8      	ldr	r0, [r1, #12]
   257ce:	4a26      	ldr	r2, [pc, #152]	; (25868 <am_hal_ble_config+0x108>)
   257d0:	021b      	lsls	r3, r3, #8
   257d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   257d6:	2802      	cmp	r0, #2
   257d8:	bf08      	it	eq
   257da:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   257de:	f043 0301 	orr.w	r3, r3, #1
   257e2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   257e6:	68d3      	ldr	r3, [r2, #12]
   257e8:	b2db      	uxtb	r3, r3
   257ea:	2b12      	cmp	r3, #18
   257ec:	d00b      	beq.n	25806 <am_hal_ble_config+0xa6>
   257ee:	4b1f      	ldr	r3, [pc, #124]	; (2586c <am_hal_ble_config+0x10c>)
   257f0:	7e8a      	ldrb	r2, [r1, #26]
   257f2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   257f6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   257fa:	2000      	movs	r0, #0
   257fc:	7222      	strb	r2, [r4, #8]
   257fe:	bcf0      	pop	{r4, r5, r6, r7}
   25800:	4770      	bx	lr
   25802:	2002      	movs	r0, #2
   25804:	4770      	bx	lr
   25806:	4f1a      	ldr	r7, [pc, #104]	; (25870 <am_hal_ble_config+0x110>)
   25808:	68fa      	ldr	r2, [r7, #12]
   2580a:	687b      	ldr	r3, [r7, #4]
   2580c:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   25810:	6908      	ldr	r0, [r1, #16]
   25812:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   25816:	6908      	ldr	r0, [r1, #16]
   25818:	0a00      	lsrs	r0, r0, #8
   2581a:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   2581e:	6948      	ldr	r0, [r1, #20]
   25820:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   25824:	6948      	ldr	r0, [r1, #20]
   25826:	0a00      	lsrs	r0, r0, #8
   25828:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   2582c:	7e48      	ldrb	r0, [r1, #25]
   2582e:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   25832:	7e08      	ldrb	r0, [r1, #24]
   25834:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   25838:	b17b      	cbz	r3, 2585a <am_hal_ble_config+0xfa>
   2583a:	3b01      	subs	r3, #1
   2583c:	4e0d      	ldr	r6, [pc, #52]	; (25874 <am_hal_ble_config+0x114>)
   2583e:	18d5      	adds	r5, r2, r3
   25840:	3a01      	subs	r2, #1
   25842:	2300      	movs	r3, #0
   25844:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   25848:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   2584c:	42aa      	cmp	r2, r5
   2584e:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   25852:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   25856:	b29b      	uxth	r3, r3
   25858:	d1f4      	bne.n	25844 <am_hal_ble_config+0xe4>
   2585a:	60bb      	str	r3, [r7, #8]
   2585c:	e7c7      	b.n	257ee <am_hal_ble_config+0x8e>
   2585e:	bf00      	nop
   25860:	01775230 	.word	0x01775230
   25864:	5000c000 	.word	0x5000c000
   25868:	40020000 	.word	0x40020000
   2586c:	10009818 	.word	0x10009818
   25870:	10002cdc 	.word	0x10002cdc
   25874:	00029dec 	.word	0x00029dec

00025878 <am_hal_ble_power_control>:
   25878:	b538      	push	{r3, r4, r5, lr}
   2587a:	4604      	mov	r4, r0
   2587c:	460d      	mov	r5, r1
   2587e:	f001 fd5f 	bl	27340 <am_hal_pwrctrl_blebuck_trim>
   25882:	2c00      	cmp	r4, #0
   25884:	f000 8086 	beq.w	25994 <am_hal_ble_power_control+0x11c>
   25888:	6823      	ldr	r3, [r4, #0]
   2588a:	4a50      	ldr	r2, [pc, #320]	; (259cc <am_hal_ble_power_control+0x154>)
   2588c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25890:	4293      	cmp	r3, r2
   25892:	d17f      	bne.n	25994 <am_hal_ble_power_control+0x11c>
   25894:	2d00      	cmp	r5, #0
   25896:	d154      	bne.n	25942 <am_hal_ble_power_control+0xca>
   25898:	4b4d      	ldr	r3, [pc, #308]	; (259d0 <am_hal_ble_power_control+0x158>)
   2589a:	699b      	ldr	r3, [r3, #24]
   2589c:	05db      	lsls	r3, r3, #23
   2589e:	d44d      	bmi.n	2593c <am_hal_ble_power_control+0xc4>
   258a0:	4d4c      	ldr	r5, [pc, #304]	; (259d4 <am_hal_ble_power_control+0x15c>)
   258a2:	69ab      	ldr	r3, [r5, #24]
   258a4:	f043 0301 	orr.w	r3, r3, #1
   258a8:	61ab      	str	r3, [r5, #24]
   258aa:	69ab      	ldr	r3, [r5, #24]
   258ac:	f003 0307 	and.w	r3, r3, #7
   258b0:	2b07      	cmp	r3, #7
   258b2:	d00c      	beq.n	258ce <am_hal_ble_power_control+0x56>
   258b4:	4c48      	ldr	r4, [pc, #288]	; (259d8 <am_hal_ble_power_control+0x160>)
   258b6:	e002      	b.n	258be <am_hal_ble_power_control+0x46>
   258b8:	3c01      	subs	r4, #1
   258ba:	f000 8082 	beq.w	259c2 <am_hal_ble_power_control+0x14a>
   258be:	2010      	movs	r0, #16
   258c0:	f001 f9b8 	bl	26c34 <am_hal_flash_delay>
   258c4:	69ab      	ldr	r3, [r5, #24]
   258c6:	f003 0307 	and.w	r3, r3, #7
   258ca:	2b07      	cmp	r3, #7
   258cc:	d1f4      	bne.n	258b8 <am_hal_ble_power_control+0x40>
   258ce:	200e      	movs	r0, #14
   258d0:	f001 fc2a 	bl	27128 <am_hal_pwrctrl_periph_enable>
   258d4:	2800      	cmp	r0, #0
   258d6:	d172      	bne.n	259be <am_hal_ble_power_control+0x146>
   258d8:	4b40      	ldr	r3, [pc, #256]	; (259dc <am_hal_ble_power_control+0x164>)
   258da:	493e      	ldr	r1, [pc, #248]	; (259d4 <am_hal_ble_power_control+0x15c>)
   258dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   258e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   258e4:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   258e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   258ec:	f360 02df 	bfi	r2, r0, #3, #29
   258f0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   258f4:	68cb      	ldr	r3, [r1, #12]
   258f6:	b2db      	uxtb	r3, r3
   258f8:	2b11      	cmp	r3, #17
   258fa:	d859      	bhi.n	259b0 <am_hal_ble_power_control+0x138>
   258fc:	4b38      	ldr	r3, [pc, #224]	; (259e0 <am_hal_ble_power_control+0x168>)
   258fe:	2204      	movs	r2, #4
   25900:	601a      	str	r2, [r3, #0]
   25902:	4d36      	ldr	r5, [pc, #216]	; (259dc <am_hal_ble_power_control+0x164>)
   25904:	4837      	ldr	r0, [pc, #220]	; (259e4 <am_hal_ble_power_control+0x16c>)
   25906:	f001 f995 	bl	26c34 <am_hal_flash_delay>
   2590a:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   2590e:	f043 0301 	orr.w	r3, r3, #1
   25912:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   25916:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2591a:	f3c3 2302 	ubfx	r3, r3, #8, #3
   2591e:	2b03      	cmp	r3, #3
   25920:	d00c      	beq.n	2593c <am_hal_ble_power_control+0xc4>
   25922:	4c31      	ldr	r4, [pc, #196]	; (259e8 <am_hal_ble_power_control+0x170>)
   25924:	e001      	b.n	2592a <am_hal_ble_power_control+0xb2>
   25926:	3c01      	subs	r4, #1
   25928:	d04d      	beq.n	259c6 <am_hal_ble_power_control+0x14e>
   2592a:	2010      	movs	r0, #16
   2592c:	f001 f982 	bl	26c34 <am_hal_flash_delay>
   25930:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   25934:	f3c3 2302 	ubfx	r3, r3, #8, #3
   25938:	2b03      	cmp	r3, #3
   2593a:	d1f4      	bne.n	25926 <am_hal_ble_power_control+0xae>
   2593c:	2400      	movs	r4, #0
   2593e:	4620      	mov	r0, r4
   25940:	bd38      	pop	{r3, r4, r5, pc}
   25942:	2d01      	cmp	r5, #1
   25944:	d129      	bne.n	2599a <am_hal_ble_power_control+0x122>
   25946:	4b25      	ldr	r3, [pc, #148]	; (259dc <am_hal_ble_power_control+0x164>)
   25948:	4822      	ldr	r0, [pc, #136]	; (259d4 <am_hal_ble_power_control+0x15c>)
   2594a:	2200      	movs	r2, #0
   2594c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   25950:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   25954:	f362 01df 	bfi	r1, r2, #3, #29
   25958:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   2595c:	68c3      	ldr	r3, [r0, #12]
   2595e:	b2db      	uxtb	r3, r3
   25960:	2b11      	cmp	r3, #17
   25962:	d91d      	bls.n	259a0 <am_hal_ble_power_control+0x128>
   25964:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   25968:	f362 1345 	bfi	r3, r2, #5, #1
   2596c:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   25970:	4b1a      	ldr	r3, [pc, #104]	; (259dc <am_hal_ble_power_control+0x164>)
   25972:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   25976:	f36f 0200 	bfc	r2, #0, #1
   2597a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   2597e:	200e      	movs	r0, #14
   25980:	f001 fbfc 	bl	2717c <am_hal_pwrctrl_periph_disable>
   25984:	4604      	mov	r4, r0
   25986:	b988      	cbnz	r0, 259ac <am_hal_ble_power_control+0x134>
   25988:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   2598c:	f001 f952 	bl	26c34 <am_hal_flash_delay>
   25990:	4620      	mov	r0, r4
   25992:	bd38      	pop	{r3, r4, r5, pc}
   25994:	2402      	movs	r4, #2
   25996:	4620      	mov	r0, r4
   25998:	bd38      	pop	{r3, r4, r5, pc}
   2599a:	2407      	movs	r4, #7
   2599c:	4620      	mov	r0, r4
   2599e:	bd38      	pop	{r3, r4, r5, pc}
   259a0:	4a0f      	ldr	r2, [pc, #60]	; (259e0 <am_hal_ble_power_control+0x168>)
   259a2:	6813      	ldr	r3, [r2, #0]
   259a4:	f023 0304 	bic.w	r3, r3, #4
   259a8:	6013      	str	r3, [r2, #0]
   259aa:	e7e1      	b.n	25970 <am_hal_ble_power_control+0xf8>
   259ac:	4c0f      	ldr	r4, [pc, #60]	; (259ec <am_hal_ble_power_control+0x174>)
   259ae:	e7c6      	b.n	2593e <am_hal_ble_power_control+0xc6>
   259b0:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   259b4:	f043 0320 	orr.w	r3, r3, #32
   259b8:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   259bc:	e7a1      	b.n	25902 <am_hal_ble_power_control+0x8a>
   259be:	4c0c      	ldr	r4, [pc, #48]	; (259f0 <am_hal_ble_power_control+0x178>)
   259c0:	e7bd      	b.n	2593e <am_hal_ble_power_control+0xc6>
   259c2:	4c0c      	ldr	r4, [pc, #48]	; (259f4 <am_hal_ble_power_control+0x17c>)
   259c4:	e7bb      	b.n	2593e <am_hal_ble_power_control+0xc6>
   259c6:	4c0c      	ldr	r4, [pc, #48]	; (259f8 <am_hal_ble_power_control+0x180>)
   259c8:	e7b9      	b.n	2593e <am_hal_ble_power_control+0xc6>
   259ca:	bf00      	nop
   259cc:	01775230 	.word	0x01775230
   259d0:	40021000 	.word	0x40021000
   259d4:	40020000 	.word	0x40020000
   259d8:	000186a0 	.word	0x000186a0
   259dc:	5000c000 	.word	0x5000c000
   259e0:	40020198 	.word	0x40020198
   259e4:	00013880 	.word	0x00013880
   259e8:	000f4240 	.word	0x000f4240
   259ec:	08000006 	.word	0x08000006
   259f0:	08000007 	.word	0x08000007
   259f4:	08000005 	.word	0x08000005
   259f8:	08000008 	.word	0x08000008

000259fc <am_hal_ble_patch_apply>:
   259fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a00:	b09b      	sub	sp, #108	; 0x6c
   25a02:	2800      	cmp	r0, #0
   25a04:	d05e      	beq.n	25ac4 <am_hal_ble_patch_apply+0xc8>
   25a06:	6803      	ldr	r3, [r0, #0]
   25a08:	4acc      	ldr	r2, [pc, #816]	; (25d3c <am_hal_ble_patch_apply+0x340>)
   25a0a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25a0e:	4293      	cmp	r3, r2
   25a10:	4605      	mov	r5, r0
   25a12:	d157      	bne.n	25ac4 <am_hal_ble_patch_apply+0xc8>
   25a14:	4688      	mov	r8, r1
   25a16:	2101      	movs	r1, #1
   25a18:	f8d8 0000 	ldr.w	r0, [r8]
   25a1c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   25a20:	f88d 1008 	strb.w	r1, [sp, #8]
   25a24:	f8df a328 	ldr.w	sl, [pc, #808]	; 25d50 <am_hal_ble_patch_apply+0x354>
   25a28:	f88d 0009 	strb.w	r0, [sp, #9]
   25a2c:	f240 21f1 	movw	r1, #753	; 0x2f1
   25a30:	f8ad 100a 	strh.w	r1, [sp, #10]
   25a34:	f8ad 200c 	strh.w	r2, [sp, #12]
   25a38:	f241 3788 	movw	r7, #5000	; 0x1388
   25a3c:	2400      	movs	r4, #0
   25a3e:	4699      	mov	r9, r3
   25a40:	aa02      	add	r2, sp, #8
   25a42:	454b      	cmp	r3, r9
   25a44:	e9cd 2412 	strd	r2, r4, [sp, #72]	; 0x48
   25a48:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
   25a4c:	a912      	add	r1, sp, #72	; 0x48
   25a4e:	4628      	mov	r0, r5
   25a50:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
   25a54:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
   25a58:	d014      	beq.n	25a84 <am_hal_ble_patch_apply+0x88>
   25a5a:	4bb9      	ldr	r3, [pc, #740]	; (25d40 <am_hal_ble_patch_apply+0x344>)
   25a5c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25a60:	061b      	lsls	r3, r3, #24
   25a62:	d41a      	bmi.n	25a9a <am_hal_ble_patch_apply+0x9e>
   25a64:	4eb7      	ldr	r6, [pc, #732]	; (25d44 <am_hal_ble_patch_apply+0x348>)
   25a66:	4cb6      	ldr	r4, [pc, #728]	; (25d40 <am_hal_ble_patch_apply+0x344>)
   25a68:	2010      	movs	r0, #16
   25a6a:	f001 f8e3 	bl	26c34 <am_hal_flash_delay>
   25a6e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   25a72:	061f      	lsls	r7, r3, #24
   25a74:	d411      	bmi.n	25a9a <am_hal_ble_patch_apply+0x9e>
   25a76:	3e01      	subs	r6, #1
   25a78:	d1f6      	bne.n	25a68 <am_hal_ble_patch_apply+0x6c>
   25a7a:	4eb3      	ldr	r6, [pc, #716]	; (25d48 <am_hal_ble_patch_apply+0x34c>)
   25a7c:	4630      	mov	r0, r6
   25a7e:	b01b      	add	sp, #108	; 0x6c
   25a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a84:	f7ff fb96 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25a88:	4606      	mov	r6, r0
   25a8a:	2800      	cmp	r0, #0
   25a8c:	d0e5      	beq.n	25a5a <am_hal_ble_patch_apply+0x5e>
   25a8e:	3f01      	subs	r7, #1
   25a90:	d0f4      	beq.n	25a7c <am_hal_ble_patch_apply+0x80>
   25a92:	682b      	ldr	r3, [r5, #0]
   25a94:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25a98:	e7d2      	b.n	25a40 <am_hal_ble_patch_apply+0x44>
   25a9a:	682c      	ldr	r4, [r5, #0]
   25a9c:	4aa7      	ldr	r2, [pc, #668]	; (25d3c <am_hal_ble_patch_apply+0x340>)
   25a9e:	ab02      	add	r3, sp, #8
   25aa0:	9306      	str	r3, [sp, #24]
   25aa2:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   25aa6:	2300      	movs	r3, #0
   25aa8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   25aac:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   25ab0:	2102      	movs	r1, #2
   25ab2:	930b      	str	r3, [sp, #44]	; 0x2c
   25ab4:	4294      	cmp	r4, r2
   25ab6:	f04f 0305 	mov.w	r3, #5
   25aba:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   25abe:	f8ad 3020 	strh.w	r3, [sp, #32]
   25ac2:	d004      	beq.n	25ace <am_hal_ble_patch_apply+0xd2>
   25ac4:	2602      	movs	r6, #2
   25ac6:	4630      	mov	r0, r6
   25ac8:	b01b      	add	sp, #108	; 0x6c
   25aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ace:	a906      	add	r1, sp, #24
   25ad0:	4628      	mov	r0, r5
   25ad2:	f7ff fb6f 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25ad6:	4606      	mov	r6, r0
   25ad8:	2800      	cmp	r0, #0
   25ada:	d1cf      	bne.n	25a7c <am_hal_ble_patch_apply+0x80>
   25adc:	f8d8 2000 	ldr.w	r2, [r8]
   25ae0:	f89d 1008 	ldrb.w	r1, [sp, #8]
   25ae4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   25ae8:	2004      	movs	r0, #4
   25aea:	b2d3      	uxtb	r3, r2
   25aec:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
   25af0:	2904      	cmp	r1, #4
   25af2:	f240 10f1 	movw	r0, #497	; 0x1f1
   25af6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   25afa:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   25afe:	f040 810a 	bne.w	25d16 <am_hal_ble_patch_apply+0x31a>
   25b02:	f89d 1009 	ldrb.w	r1, [sp, #9]
   25b06:	4299      	cmp	r1, r3
   25b08:	f040 8105 	bne.w	25d16 <am_hal_ble_patch_apply+0x31a>
   25b0c:	f89d 100a 	ldrb.w	r1, [sp, #10]
   25b10:	29f1      	cmp	r1, #241	; 0xf1
   25b12:	f040 8100 	bne.w	25d16 <am_hal_ble_patch_apply+0x31a>
   25b16:	f89d 100b 	ldrb.w	r1, [sp, #11]
   25b1a:	2901      	cmp	r1, #1
   25b1c:	f040 80fb 	bne.w	25d16 <am_hal_ble_patch_apply+0x31a>
   25b20:	f89d 100c 	ldrb.w	r1, [sp, #12]
   25b24:	2900      	cmp	r1, #0
   25b26:	f040 80f6 	bne.w	25d16 <am_hal_ble_patch_apply+0x31a>
   25b2a:	f8d8 b004 	ldr.w	fp, [r8, #4]
   25b2e:	f1bb 0f00 	cmp.w	fp, #0
   25b32:	f000 808d 	beq.w	25c50 <am_hal_ble_patch_apply+0x254>
   25b36:	f8df a21c 	ldr.w	sl, [pc, #540]	; 25d54 <am_hal_ble_patch_apply+0x358>
   25b3a:	4f81      	ldr	r7, [pc, #516]	; (25d40 <am_hal_ble_patch_apply+0x344>)
   25b3c:	9401      	str	r4, [sp, #4]
   25b3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   25b42:	f88a 2001 	strb.w	r2, [sl, #1]
   25b46:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   25b4a:	46d9      	mov	r9, fp
   25b4c:	f026 0103 	bic.w	r1, r6, #3
   25b50:	bf28      	it	cs
   25b52:	f04f 0980 	movcs.w	r9, #128	; 0x80
   25b56:	f109 0004 	add.w	r0, r9, #4
   25b5a:	4419      	add	r1, r3
   25b5c:	2300      	movs	r3, #0
   25b5e:	e9cd 3308 	strd	r3, r3, [sp, #32]
   25b62:	f8ad 0020 	strh.w	r0, [sp, #32]
   25b66:	2001      	movs	r0, #1
   25b68:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   25b6c:	464a      	mov	r2, r9
   25b6e:	9307      	str	r3, [sp, #28]
   25b70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   25b74:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   25b78:	23f2      	movs	r3, #242	; 0xf2
   25b7a:	f88a 0000 	strb.w	r0, [sl]
   25b7e:	4873      	ldr	r0, [pc, #460]	; (25d4c <am_hal_ble_patch_apply+0x350>)
   25b80:	f88a 3002 	strb.w	r3, [sl, #2]
   25b84:	f8cd a018 	str.w	sl, [sp, #24]
   25b88:	f88a 9003 	strb.w	r9, [sl, #3]
   25b8c:	f7e6 fae8 	bl	c160 <memcpy>
   25b90:	682b      	ldr	r3, [r5, #0]
   25b92:	9a01      	ldr	r2, [sp, #4]
   25b94:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25b98:	4293      	cmp	r3, r2
   25b9a:	d193      	bne.n	25ac4 <am_hal_ble_patch_apply+0xc8>
   25b9c:	a906      	add	r1, sp, #24
   25b9e:	4628      	mov	r0, r5
   25ba0:	f7ff fb08 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25ba4:	2800      	cmp	r0, #0
   25ba6:	f040 80c7 	bne.w	25d38 <am_hal_ble_patch_apply+0x33c>
   25baa:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   25bae:	061c      	lsls	r4, r3, #24
   25bb0:	d40b      	bmi.n	25bca <am_hal_ble_patch_apply+0x1ce>
   25bb2:	4c64      	ldr	r4, [pc, #400]	; (25d44 <am_hal_ble_patch_apply+0x348>)
   25bb4:	e002      	b.n	25bbc <am_hal_ble_patch_apply+0x1c0>
   25bb6:	3c01      	subs	r4, #1
   25bb8:	f43f af5f 	beq.w	25a7a <am_hal_ble_patch_apply+0x7e>
   25bbc:	2010      	movs	r0, #16
   25bbe:	f001 f839 	bl	26c34 <am_hal_flash_delay>
   25bc2:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   25bc6:	0618      	lsls	r0, r3, #24
   25bc8:	d5f5      	bpl.n	25bb6 <am_hal_ble_patch_apply+0x1ba>
   25bca:	ab02      	add	r3, sp, #8
   25bcc:	9306      	str	r3, [sp, #24]
   25bce:	2300      	movs	r3, #0
   25bd0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   25bd4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   25bd8:	682a      	ldr	r2, [r5, #0]
   25bda:	930b      	str	r3, [sp, #44]	; 0x2c
   25bdc:	2305      	movs	r3, #5
   25bde:	f8ad 3020 	strh.w	r3, [sp, #32]
   25be2:	9b01      	ldr	r3, [sp, #4]
   25be4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   25be8:	2102      	movs	r1, #2
   25bea:	429a      	cmp	r2, r3
   25bec:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   25bf0:	f47f af68 	bne.w	25ac4 <am_hal_ble_patch_apply+0xc8>
   25bf4:	a906      	add	r1, sp, #24
   25bf6:	4628      	mov	r0, r5
   25bf8:	f7ff fadc 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25bfc:	2800      	cmp	r0, #0
   25bfe:	f040 809b 	bne.w	25d38 <am_hal_ble_patch_apply+0x33c>
   25c02:	f8d8 2000 	ldr.w	r2, [r8]
   25c06:	f89d 1008 	ldrb.w	r1, [sp, #8]
   25c0a:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   25c0e:	2004      	movs	r0, #4
   25c10:	b2d3      	uxtb	r3, r2
   25c12:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
   25c16:	2904      	cmp	r1, #4
   25c18:	f44f 70f9 	mov.w	r0, #498	; 0x1f2
   25c1c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   25c20:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   25c24:	d177      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25c26:	f89d 1009 	ldrb.w	r1, [sp, #9]
   25c2a:	4299      	cmp	r1, r3
   25c2c:	d173      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25c2e:	f89d 100a 	ldrb.w	r1, [sp, #10]
   25c32:	29f2      	cmp	r1, #242	; 0xf2
   25c34:	d16f      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25c36:	f89d 100b 	ldrb.w	r1, [sp, #11]
   25c3a:	2901      	cmp	r1, #1
   25c3c:	d16b      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25c3e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   25c42:	2900      	cmp	r1, #0
   25c44:	d167      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25c46:	ebbb 0b09 	subs.w	fp, fp, r9
   25c4a:	444e      	add	r6, r9
   25c4c:	f47f af77 	bne.w	25b3e <am_hal_ble_patch_apply+0x142>
   25c50:	f88d 3009 	strb.w	r3, [sp, #9]
   25c54:	2301      	movs	r3, #1
   25c56:	682a      	ldr	r2, [r5, #0]
   25c58:	f88d 3008 	strb.w	r3, [sp, #8]
   25c5c:	f240 23f3 	movw	r3, #755	; 0x2f3
   25c60:	4936      	ldr	r1, [pc, #216]	; (25d3c <am_hal_ble_patch_apply+0x340>)
   25c62:	f8ad 300a 	strh.w	r3, [sp, #10]
   25c66:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   25c6a:	f8ad 300c 	strh.w	r3, [sp, #12]
   25c6e:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
   25c72:	2300      	movs	r3, #0
   25c74:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
   25c78:	ac02      	add	r4, sp, #8
   25c7a:	930d      	str	r3, [sp, #52]	; 0x34
   25c7c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   25c80:	4288      	cmp	r0, r1
   25c82:	4b33      	ldr	r3, [pc, #204]	; (25d50 <am_hal_ble_patch_apply+0x354>)
   25c84:	940c      	str	r4, [sp, #48]	; 0x30
   25c86:	930e      	str	r3, [sp, #56]	; 0x38
   25c88:	d04a      	beq.n	25d20 <am_hal_ble_patch_apply+0x324>
   25c8a:	4b2d      	ldr	r3, [pc, #180]	; (25d40 <am_hal_ble_patch_apply+0x344>)
   25c8c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25c90:	0619      	lsls	r1, r3, #24
   25c92:	d40d      	bmi.n	25cb0 <am_hal_ble_patch_apply+0x2b4>
   25c94:	4c2b      	ldr	r4, [pc, #172]	; (25d44 <am_hal_ble_patch_apply+0x348>)
   25c96:	4e2a      	ldr	r6, [pc, #168]	; (25d40 <am_hal_ble_patch_apply+0x344>)
   25c98:	e002      	b.n	25ca0 <am_hal_ble_patch_apply+0x2a4>
   25c9a:	3c01      	subs	r4, #1
   25c9c:	f43f aeed 	beq.w	25a7a <am_hal_ble_patch_apply+0x7e>
   25ca0:	2010      	movs	r0, #16
   25ca2:	f000 ffc7 	bl	26c34 <am_hal_flash_delay>
   25ca6:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   25caa:	061b      	lsls	r3, r3, #24
   25cac:	d5f5      	bpl.n	25c9a <am_hal_ble_patch_apply+0x29e>
   25cae:	682a      	ldr	r2, [r5, #0]
   25cb0:	4922      	ldr	r1, [pc, #136]	; (25d3c <am_hal_ble_patch_apply+0x340>)
   25cb2:	ab02      	add	r3, sp, #8
   25cb4:	9306      	str	r3, [sp, #24]
   25cb6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   25cba:	2300      	movs	r3, #0
   25cbc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   25cc0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   25cc4:	930b      	str	r3, [sp, #44]	; 0x2c
   25cc6:	2002      	movs	r0, #2
   25cc8:	2305      	movs	r3, #5
   25cca:	428a      	cmp	r2, r1
   25ccc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   25cd0:	f8ad 3020 	strh.w	r3, [sp, #32]
   25cd4:	f47f aef6 	bne.w	25ac4 <am_hal_ble_patch_apply+0xc8>
   25cd8:	a906      	add	r1, sp, #24
   25cda:	4628      	mov	r0, r5
   25cdc:	f7ff fa6a 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25ce0:	4606      	mov	r6, r0
   25ce2:	2800      	cmp	r0, #0
   25ce4:	f47f aeca 	bne.w	25a7c <am_hal_ble_patch_apply+0x80>
   25ce8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   25cec:	f898 3000 	ldrb.w	r3, [r8]
   25cf0:	2a04      	cmp	r2, #4
   25cf2:	d110      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25cf4:	f89d 2009 	ldrb.w	r2, [sp, #9]
   25cf8:	429a      	cmp	r2, r3
   25cfa:	d10c      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25cfc:	f89d 300a 	ldrb.w	r3, [sp, #10]
   25d00:	2bf3      	cmp	r3, #243	; 0xf3
   25d02:	d108      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25d04:	f89d 300b 	ldrb.w	r3, [sp, #11]
   25d08:	2b01      	cmp	r3, #1
   25d0a:	d104      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25d0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   25d10:	2b00      	cmp	r3, #0
   25d12:	f43f aeb3 	beq.w	25a7c <am_hal_ble_patch_apply+0x80>
   25d16:	2601      	movs	r6, #1
   25d18:	4630      	mov	r0, r6
   25d1a:	b01b      	add	sp, #108	; 0x6c
   25d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d20:	a90c      	add	r1, sp, #48	; 0x30
   25d22:	4628      	mov	r0, r5
   25d24:	f7ff fa46 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25d28:	2800      	cmp	r0, #0
   25d2a:	d1f4      	bne.n	25d16 <am_hal_ble_patch_apply+0x31a>
   25d2c:	4b04      	ldr	r3, [pc, #16]	; (25d40 <am_hal_ble_patch_apply+0x344>)
   25d2e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25d32:	061a      	lsls	r2, r3, #24
   25d34:	d5ae      	bpl.n	25c94 <am_hal_ble_patch_apply+0x298>
   25d36:	e7ba      	b.n	25cae <am_hal_ble_patch_apply+0x2b2>
   25d38:	4606      	mov	r6, r0
   25d3a:	e69f      	b.n	25a7c <am_hal_ble_patch_apply+0x80>
   25d3c:	01775230 	.word	0x01775230
   25d40:	5000c000 	.word	0x5000c000
   25d44:	000f4240 	.word	0x000f4240
   25d48:	08000004 	.word	0x08000004
   25d4c:	10009864 	.word	0x10009864
   25d50:	00010006 	.word	0x00010006
   25d54:	10009860 	.word	0x10009860

00025d58 <am_hal_ble_patch_copy_end_apply>:
   25d58:	2800      	cmp	r0, #0
   25d5a:	d07e      	beq.n	25e5a <am_hal_ble_patch_copy_end_apply+0x102>
   25d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d60:	6803      	ldr	r3, [r0, #0]
   25d62:	4a40      	ldr	r2, [pc, #256]	; (25e64 <am_hal_ble_patch_copy_end_apply+0x10c>)
   25d64:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25d68:	4293      	cmp	r3, r2
   25d6a:	b092      	sub	sp, #72	; 0x48
   25d6c:	4606      	mov	r6, r0
   25d6e:	d170      	bne.n	25e52 <am_hal_ble_patch_copy_end_apply+0xfa>
   25d70:	4a3d      	ldr	r2, [pc, #244]	; (25e68 <am_hal_ble_patch_copy_end_apply+0x110>)
   25d72:	f8df 8108 	ldr.w	r8, [pc, #264]	; 25e7c <am_hal_ble_patch_copy_end_apply+0x124>
   25d76:	9200      	str	r2, [sp, #0]
   25d78:	2400      	movs	r4, #0
   25d7a:	f8ad 4004 	strh.w	r4, [sp, #4]
   25d7e:	f241 3588 	movw	r5, #5000	; 0x1388
   25d82:	461f      	mov	r7, r3
   25d84:	42bb      	cmp	r3, r7
   25d86:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
   25d8a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
   25d8e:	a90a      	add	r1, sp, #40	; 0x28
   25d90:	4630      	mov	r0, r6
   25d92:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   25d96:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   25d9a:	d013      	beq.n	25dc4 <am_hal_ble_patch_copy_end_apply+0x6c>
   25d9c:	4b33      	ldr	r3, [pc, #204]	; (25e6c <am_hal_ble_patch_copy_end_apply+0x114>)
   25d9e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25da2:	061a      	lsls	r2, r3, #24
   25da4:	d418      	bmi.n	25dd8 <am_hal_ble_patch_copy_end_apply+0x80>
   25da6:	4d32      	ldr	r5, [pc, #200]	; (25e70 <am_hal_ble_patch_copy_end_apply+0x118>)
   25da8:	4c30      	ldr	r4, [pc, #192]	; (25e6c <am_hal_ble_patch_copy_end_apply+0x114>)
   25daa:	2010      	movs	r0, #16
   25dac:	f000 ff42 	bl	26c34 <am_hal_flash_delay>
   25db0:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   25db4:	061b      	lsls	r3, r3, #24
   25db6:	d40f      	bmi.n	25dd8 <am_hal_ble_patch_copy_end_apply+0x80>
   25db8:	3d01      	subs	r5, #1
   25dba:	d1f6      	bne.n	25daa <am_hal_ble_patch_copy_end_apply+0x52>
   25dbc:	482d      	ldr	r0, [pc, #180]	; (25e74 <am_hal_ble_patch_copy_end_apply+0x11c>)
   25dbe:	b012      	add	sp, #72	; 0x48
   25dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25dc4:	f7ff f9f6 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25dc8:	2800      	cmp	r0, #0
   25dca:	d0e7      	beq.n	25d9c <am_hal_ble_patch_copy_end_apply+0x44>
   25dcc:	3d01      	subs	r5, #1
   25dce:	d0f6      	beq.n	25dbe <am_hal_ble_patch_copy_end_apply+0x66>
   25dd0:	6833      	ldr	r3, [r6, #0]
   25dd2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25dd6:	e7d5      	b.n	25d84 <am_hal_ble_patch_copy_end_apply+0x2c>
   25dd8:	6832      	ldr	r2, [r6, #0]
   25dda:	4922      	ldr	r1, [pc, #136]	; (25e64 <am_hal_ble_patch_copy_end_apply+0x10c>)
   25ddc:	f8cd d010 	str.w	sp, [sp, #16]
   25de0:	2300      	movs	r3, #0
   25de2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   25de6:	e9cd 3305 	strd	r3, r3, [sp, #20]
   25dea:	e9cd 3307 	strd	r3, r3, [sp, #28]
   25dee:	2002      	movs	r0, #2
   25df0:	9309      	str	r3, [sp, #36]	; 0x24
   25df2:	428a      	cmp	r2, r1
   25df4:	f04f 0305 	mov.w	r3, #5
   25df8:	f88d 001a 	strb.w	r0, [sp, #26]
   25dfc:	f8ad 3018 	strh.w	r3, [sp, #24]
   25e00:	d127      	bne.n	25e52 <am_hal_ble_patch_copy_end_apply+0xfa>
   25e02:	a904      	add	r1, sp, #16
   25e04:	4630      	mov	r0, r6
   25e06:	f7ff f9d5 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25e0a:	2800      	cmp	r0, #0
   25e0c:	d1d7      	bne.n	25dbe <am_hal_ble_patch_copy_end_apply+0x66>
   25e0e:	4b1a      	ldr	r3, [pc, #104]	; (25e78 <am_hal_ble_patch_copy_end_apply+0x120>)
   25e10:	f89d 2000 	ldrb.w	r2, [sp]
   25e14:	930a      	str	r3, [sp, #40]	; 0x28
   25e16:	f003 0304 	and.w	r3, r3, #4
   25e1a:	429a      	cmp	r2, r3
   25e1c:	d11f      	bne.n	25e5e <am_hal_ble_patch_copy_end_apply+0x106>
   25e1e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
   25e22:	f89d 3001 	ldrb.w	r3, [sp, #1]
   25e26:	429a      	cmp	r2, r3
   25e28:	d119      	bne.n	25e5e <am_hal_ble_patch_copy_end_apply+0x106>
   25e2a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   25e2e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   25e32:	429a      	cmp	r2, r3
   25e34:	d113      	bne.n	25e5e <am_hal_ble_patch_copy_end_apply+0x106>
   25e36:	f89d 2003 	ldrb.w	r2, [sp, #3]
   25e3a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   25e3e:	429a      	cmp	r2, r3
   25e40:	d10d      	bne.n	25e5e <am_hal_ble_patch_copy_end_apply+0x106>
   25e42:	f89d 0004 	ldrb.w	r0, [sp, #4]
   25e46:	3800      	subs	r0, #0
   25e48:	bf18      	it	ne
   25e4a:	2001      	movne	r0, #1
   25e4c:	b012      	add	sp, #72	; 0x48
   25e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e52:	2002      	movs	r0, #2
   25e54:	b012      	add	sp, #72	; 0x48
   25e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e5a:	2002      	movs	r0, #2
   25e5c:	4770      	bx	lr
   25e5e:	2001      	movs	r0, #1
   25e60:	e7ad      	b.n	25dbe <am_hal_ble_patch_copy_end_apply+0x66>
   25e62:	bf00      	nop
   25e64:	01775230 	.word	0x01775230
   25e68:	02f1ee01 	.word	0x02f1ee01
   25e6c:	5000c000 	.word	0x5000c000
   25e70:	000f4240 	.word	0x000f4240
   25e74:	08000004 	.word	0x08000004
   25e78:	01f1ee04 	.word	0x01f1ee04
   25e7c:	00010006 	.word	0x00010006

00025e80 <am_hal_ble_default_patch_apply>:
   25e80:	4a1c      	ldr	r2, [pc, #112]	; (25ef4 <am_hal_ble_default_patch_apply+0x74>)
   25e82:	68d3      	ldr	r3, [r2, #12]
   25e84:	b2db      	uxtb	r3, r3
   25e86:	2b11      	cmp	r3, #17
   25e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e8c:	4605      	mov	r5, r0
   25e8e:	d02c      	beq.n	25eea <am_hal_ble_default_patch_apply+0x6a>
   25e90:	68d3      	ldr	r3, [r2, #12]
   25e92:	b2db      	uxtb	r3, r3
   25e94:	2b12      	cmp	r3, #18
   25e96:	d028      	beq.n	25eea <am_hal_ble_default_patch_apply+0x6a>
   25e98:	4a17      	ldr	r2, [pc, #92]	; (25ef8 <am_hal_ble_default_patch_apply+0x78>)
   25e9a:	4b18      	ldr	r3, [pc, #96]	; (25efc <am_hal_ble_default_patch_apply+0x7c>)
   25e9c:	6816      	ldr	r6, [r2, #0]
   25e9e:	681b      	ldr	r3, [r3, #0]
   25ea0:	b306      	cbz	r6, 25ee4 <am_hal_ble_default_patch_apply+0x64>
   25ea2:	4c17      	ldr	r4, [pc, #92]	; (25f00 <am_hal_ble_default_patch_apply+0x80>)
   25ea4:	f1a3 0804 	sub.w	r8, r3, #4
   25ea8:	2700      	movs	r7, #0
   25eaa:	f858 1f04 	ldr.w	r1, [r8, #4]!
   25eae:	684b      	ldr	r3, [r1, #4]
   25eb0:	68c8      	ldr	r0, [r1, #12]
   25eb2:	b17b      	cbz	r3, 25ed4 <am_hal_ble_default_patch_apply+0x54>
   25eb4:	3b01      	subs	r3, #1
   25eb6:	eb00 0c03 	add.w	ip, r0, r3
   25eba:	3801      	subs	r0, #1
   25ebc:	2300      	movs	r3, #0
   25ebe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   25ec2:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   25ec6:	4584      	cmp	ip, r0
   25ec8:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   25ecc:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   25ed0:	b29b      	uxth	r3, r3
   25ed2:	d1f4      	bne.n	25ebe <am_hal_ble_default_patch_apply+0x3e>
   25ed4:	608b      	str	r3, [r1, #8]
   25ed6:	4628      	mov	r0, r5
   25ed8:	f7ff fd90 	bl	259fc <am_hal_ble_patch_apply>
   25edc:	b918      	cbnz	r0, 25ee6 <am_hal_ble_default_patch_apply+0x66>
   25ede:	3701      	adds	r7, #1
   25ee0:	42be      	cmp	r6, r7
   25ee2:	d1e2      	bne.n	25eaa <am_hal_ble_default_patch_apply+0x2a>
   25ee4:	2000      	movs	r0, #0
   25ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25eea:	4a06      	ldr	r2, [pc, #24]	; (25f04 <am_hal_ble_default_patch_apply+0x84>)
   25eec:	4b06      	ldr	r3, [pc, #24]	; (25f08 <am_hal_ble_default_patch_apply+0x88>)
   25eee:	6816      	ldr	r6, [r2, #0]
   25ef0:	681b      	ldr	r3, [r3, #0]
   25ef2:	e7d5      	b.n	25ea0 <am_hal_ble_default_patch_apply+0x20>
   25ef4:	40020000 	.word	0x40020000
   25ef8:	0002b86c 	.word	0x0002b86c
   25efc:	1000357c 	.word	0x1000357c
   25f00:	00029dec 	.word	0x00029dec
   25f04:	0002b638 	.word	0x0002b638
   25f08:	10002e24 	.word	0x10002e24

00025f0c <am_hal_ble_default_trim_set_ramcode>:
   25f0c:	4b0e      	ldr	r3, [pc, #56]	; (25f48 <am_hal_ble_default_trim_set_ramcode+0x3c>)
   25f0e:	68db      	ldr	r3, [r3, #12]
   25f10:	b2db      	uxtb	r3, r3
   25f12:	2b21      	cmp	r3, #33	; 0x21
   25f14:	bf0c      	ite	eq
   25f16:	4b0d      	ldreq	r3, [pc, #52]	; (25f4c <am_hal_ble_default_trim_set_ramcode+0x40>)
   25f18:	4b0d      	ldrne	r3, [pc, #52]	; (25f50 <am_hal_ble_default_trim_set_ramcode+0x44>)
   25f1a:	68da      	ldr	r2, [r3, #12]
   25f1c:	4b0d      	ldr	r3, [pc, #52]	; (25f54 <am_hal_ble_default_trim_set_ramcode+0x48>)
   25f1e:	681b      	ldr	r3, [r3, #0]
   25f20:	ba19      	rev	r1, r3
   25f22:	3301      	adds	r3, #1
   25f24:	4b0c      	ldr	r3, [pc, #48]	; (25f58 <am_hal_ble_default_trim_set_ramcode+0x4c>)
   25f26:	bf18      	it	ne
   25f28:	6091      	strne	r1, [r2, #8]
   25f2a:	681b      	ldr	r3, [r3, #0]
   25f2c:	1c59      	adds	r1, r3, #1
   25f2e:	d009      	beq.n	25f44 <am_hal_ble_default_trim_set_ramcode+0x38>
   25f30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25f34:	ba19      	rev	r1, r3
   25f36:	3301      	adds	r3, #1
   25f38:	d004      	beq.n	25f44 <am_hal_ble_default_trim_set_ramcode+0x38>
   25f3a:	68d3      	ldr	r3, [r2, #12]
   25f3c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
   25f40:	430b      	orrs	r3, r1
   25f42:	60d3      	str	r3, [r2, #12]
   25f44:	2000      	movs	r0, #0
   25f46:	4770      	bx	lr
   25f48:	40020000 	.word	0x40020000
   25f4c:	10002f0c 	.word	0x10002f0c
   25f50:	10002cfc 	.word	0x10002cfc
   25f54:	50023800 	.word	0x50023800
   25f58:	50023804 	.word	0x50023804

00025f5c <am_hal_ble_blocking_hci_write>:
   25f5c:	b530      	push	{r4, r5, lr}
   25f5e:	b087      	sub	sp, #28
   25f60:	2400      	movs	r4, #0
   25f62:	b29b      	uxth	r3, r3
   25f64:	2501      	movs	r5, #1
   25f66:	e9cd 4404 	strd	r4, r4, [sp, #16]
   25f6a:	f88d 1004 	strb.w	r1, [sp, #4]
   25f6e:	f8ad 3008 	strh.w	r3, [sp, #8]
   25f72:	9200      	str	r2, [sp, #0]
   25f74:	f88d 4005 	strb.w	r4, [sp, #5]
   25f78:	f8ad 4006 	strh.w	r4, [sp, #6]
   25f7c:	f88d 400c 	strb.w	r4, [sp, #12]
   25f80:	f8ad 500a 	strh.w	r5, [sp, #10]
   25f84:	b128      	cbz	r0, 25f92 <am_hal_ble_blocking_hci_write+0x36>
   25f86:	6802      	ldr	r2, [r0, #0]
   25f88:	4c08      	ldr	r4, [pc, #32]	; (25fac <am_hal_ble_blocking_hci_write+0x50>)
   25f8a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   25f8e:	42a2      	cmp	r2, r4
   25f90:	d002      	beq.n	25f98 <am_hal_ble_blocking_hci_write+0x3c>
   25f92:	2000      	movs	r0, #0
   25f94:	b007      	add	sp, #28
   25f96:	bd30      	pop	{r4, r5, pc}
   25f98:	b109      	cbz	r1, 25f9e <am_hal_ble_blocking_hci_write+0x42>
   25f9a:	f88d 5007 	strb.w	r5, [sp, #7]
   25f9e:	2b00      	cmp	r3, #0
   25fa0:	d0f7      	beq.n	25f92 <am_hal_ble_blocking_hci_write+0x36>
   25fa2:	4669      	mov	r1, sp
   25fa4:	f7ff f906 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   25fa8:	b007      	add	sp, #28
   25faa:	bd30      	pop	{r4, r5, pc}
   25fac:	01775230 	.word	0x01775230

00025fb0 <am_hal_ble_blocking_hci_read>:
   25fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25fb2:	4b29      	ldr	r3, [pc, #164]	; (26058 <am_hal_ble_blocking_hci_read+0xa8>)
   25fb4:	b089      	sub	sp, #36	; 0x24
   25fb6:	681c      	ldr	r4, [r3, #0]
   25fb8:	f8ad 400c 	strh.w	r4, [sp, #12]
   25fbc:	2300      	movs	r3, #0
   25fbe:	0c24      	lsrs	r4, r4, #16
   25fc0:	ad01      	add	r5, sp, #4
   25fc2:	460e      	mov	r6, r1
   25fc4:	f04f 1102 	mov.w	r1, #131074	; 0x20002
   25fc8:	e9cd 3306 	strd	r3, r3, [sp, #24]
   25fcc:	f88d 400e 	strb.w	r4, [sp, #14]
   25fd0:	9502      	str	r5, [sp, #8]
   25fd2:	f88d 300f 	strb.w	r3, [sp, #15]
   25fd6:	f88d 3014 	strb.w	r3, [sp, #20]
   25fda:	9104      	str	r1, [sp, #16]
   25fdc:	b130      	cbz	r0, 25fec <am_hal_ble_blocking_hci_read+0x3c>
   25fde:	6805      	ldr	r5, [r0, #0]
   25fe0:	4b1e      	ldr	r3, [pc, #120]	; (2605c <am_hal_ble_blocking_hci_read+0xac>)
   25fe2:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   25fe6:	429d      	cmp	r5, r3
   25fe8:	4604      	mov	r4, r0
   25fea:	d002      	beq.n	25ff2 <am_hal_ble_blocking_hci_read+0x42>
   25fec:	2000      	movs	r0, #0
   25fee:	b009      	add	sp, #36	; 0x24
   25ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25ff2:	4b1b      	ldr	r3, [pc, #108]	; (26060 <am_hal_ble_blocking_hci_read+0xb0>)
   25ff4:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   25ff8:	4617      	mov	r7, r2
   25ffa:	060a      	lsls	r2, r1, #24
   25ffc:	f3c1 13c0 	ubfx	r3, r1, #7, #1
   26000:	d403      	bmi.n	2600a <am_hal_ble_blocking_hci_read+0x5a>
   26002:	2f00      	cmp	r7, #0
   26004:	d0f2      	beq.n	25fec <am_hal_ble_blocking_hci_read+0x3c>
   26006:	603b      	str	r3, [r7, #0]
   26008:	e7f0      	b.n	25fec <am_hal_ble_blocking_hci_read+0x3c>
   2600a:	a902      	add	r1, sp, #8
   2600c:	f7ff f8d2 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   26010:	2800      	cmp	r0, #0
   26012:	d1ec      	bne.n	25fee <am_hal_ble_blocking_hci_read+0x3e>
   26014:	f89d 1005 	ldrb.w	r1, [sp, #5]
   26018:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2601c:	9602      	str	r6, [sp, #8]
   2601e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   26022:	b29b      	uxth	r3, r3
   26024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   26028:	f8ad 3010 	strh.w	r3, [sp, #16]
   2602c:	d811      	bhi.n	26052 <am_hal_ble_blocking_hci_read+0xa2>
   2602e:	6821      	ldr	r1, [r4, #0]
   26030:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
   26034:	42a9      	cmp	r1, r5
   26036:	d10a      	bne.n	2604e <am_hal_ble_blocking_hci_read+0x9e>
   26038:	2b00      	cmp	r3, #0
   2603a:	d0e2      	beq.n	26002 <am_hal_ble_blocking_hci_read+0x52>
   2603c:	a902      	add	r1, sp, #8
   2603e:	4620      	mov	r0, r4
   26040:	f7ff f8b8 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   26044:	2800      	cmp	r0, #0
   26046:	d1d2      	bne.n	25fee <am_hal_ble_blocking_hci_read+0x3e>
   26048:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2604c:	e7d9      	b.n	26002 <am_hal_ble_blocking_hci_read+0x52>
   2604e:	2002      	movs	r0, #2
   26050:	e7cd      	b.n	25fee <am_hal_ble_blocking_hci_read+0x3e>
   26052:	2005      	movs	r0, #5
   26054:	e7cb      	b.n	25fee <am_hal_ble_blocking_hci_read+0x3e>
   26056:	bf00      	nop
   26058:	000291a8 	.word	0x000291a8
   2605c:	01775230 	.word	0x01775230
   26060:	5000c000 	.word	0x5000c000

00026064 <am_hal_ble_int_enable>:
   26064:	b128      	cbz	r0, 26072 <am_hal_ble_int_enable+0xe>
   26066:	6803      	ldr	r3, [r0, #0]
   26068:	4a0c      	ldr	r2, [pc, #48]	; (2609c <am_hal_ble_int_enable+0x38>)
   2606a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2606e:	4293      	cmp	r3, r2
   26070:	d001      	beq.n	26076 <am_hal_ble_int_enable+0x12>
   26072:	2002      	movs	r0, #2
   26074:	4770      	bx	lr
   26076:	b510      	push	{r4, lr}
   26078:	b082      	sub	sp, #8
   2607a:	460c      	mov	r4, r1
   2607c:	f000 ffb2 	bl	26fe4 <am_hal_interrupt_master_disable>
   26080:	4b07      	ldr	r3, [pc, #28]	; (260a0 <am_hal_ble_int_enable+0x3c>)
   26082:	9001      	str	r0, [sp, #4]
   26084:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   26088:	4321      	orrs	r1, r4
   2608a:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   2608e:	9801      	ldr	r0, [sp, #4]
   26090:	f000 ffac 	bl	26fec <am_hal_interrupt_master_set>
   26094:	2000      	movs	r0, #0
   26096:	b002      	add	sp, #8
   26098:	bd10      	pop	{r4, pc}
   2609a:	bf00      	nop
   2609c:	01775230 	.word	0x01775230
   260a0:	5000c000 	.word	0x5000c000

000260a4 <am_hal_ble_int_status>:
   260a4:	4b05      	ldr	r3, [pc, #20]	; (260bc <am_hal_ble_int_status+0x18>)
   260a6:	b129      	cbz	r1, 260b4 <am_hal_ble_int_status+0x10>
   260a8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   260ac:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   260b0:	4010      	ands	r0, r2
   260b2:	4770      	bx	lr
   260b4:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   260b8:	4770      	bx	lr
   260ba:	bf00      	nop
   260bc:	5000c000 	.word	0x5000c000

000260c0 <am_hal_ble_int_clear>:
   260c0:	b150      	cbz	r0, 260d8 <am_hal_ble_int_clear+0x18>
   260c2:	6803      	ldr	r3, [r0, #0]
   260c4:	4a05      	ldr	r2, [pc, #20]	; (260dc <am_hal_ble_int_clear+0x1c>)
   260c6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   260ca:	4293      	cmp	r3, r2
   260cc:	d104      	bne.n	260d8 <am_hal_ble_int_clear+0x18>
   260ce:	4b04      	ldr	r3, [pc, #16]	; (260e0 <am_hal_ble_int_clear+0x20>)
   260d0:	2000      	movs	r0, #0
   260d2:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   260d6:	4770      	bx	lr
   260d8:	2002      	movs	r0, #2
   260da:	4770      	bx	lr
   260dc:	01775230 	.word	0x01775230
   260e0:	5000c000 	.word	0x5000c000

000260e4 <am_hal_ble_plf_reg_read>:
   260e4:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   260e8:	4b2a      	ldr	r3, [pc, #168]	; (26194 <am_hal_ble_plf_reg_read+0xb0>)
   260ea:	4c2b      	ldr	r4, [pc, #172]	; (26198 <am_hal_ble_plf_reg_read+0xb4>)
   260ec:	b090      	sub	sp, #64	; 0x40
   260ee:	e9cd 3100 	strd	r3, r1, [sp]
   260f2:	f04f 0a00 	mov.w	sl, #0
   260f6:	2300      	movs	r3, #0
   260f8:	f04f 0b00 	mov.w	fp, #0
   260fc:	4617      	mov	r7, r2
   260fe:	4a27      	ldr	r2, [pc, #156]	; (2619c <am_hal_ble_plf_reg_read+0xb8>)
   26100:	f8d4 8220 	ldr.w	r8, [r4, #544]	; 0x220
   26104:	930a      	str	r3, [sp, #40]	; 0x28
   26106:	e9cd ab08 	strd	sl, fp, [sp, #32]
   2610a:	4606      	mov	r6, r0
   2610c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
   26110:	e9cd 3306 	strd	r3, r3, [sp, #24]
   26114:	9303      	str	r3, [sp, #12]
   26116:	f88d 3014 	strb.w	r3, [sp, #20]
   2611a:	f8cd d008 	str.w	sp, [sp, #8]
   2611e:	9204      	str	r2, [sp, #16]
   26120:	b128      	cbz	r0, 2612e <am_hal_ble_plf_reg_read+0x4a>
   26122:	6803      	ldr	r3, [r0, #0]
   26124:	4a1e      	ldr	r2, [pc, #120]	; (261a0 <am_hal_ble_plf_reg_read+0xbc>)
   26126:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2612a:	4293      	cmp	r3, r2
   2612c:	d029      	beq.n	26182 <am_hal_ble_plf_reg_read+0x9e>
   2612e:	4d1a      	ldr	r5, [pc, #104]	; (26198 <am_hal_ble_plf_reg_read+0xb4>)
   26130:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   26134:	f043 0302 	orr.w	r3, r3, #2
   26138:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   2613c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   26140:	061a      	lsls	r2, r3, #24
   26142:	d40a      	bmi.n	2615a <am_hal_ble_plf_reg_read+0x76>
   26144:	4c17      	ldr	r4, [pc, #92]	; (261a4 <am_hal_ble_plf_reg_read+0xc0>)
   26146:	e001      	b.n	2614c <am_hal_ble_plf_reg_read+0x68>
   26148:	3c01      	subs	r4, #1
   2614a:	d01e      	beq.n	2618a <am_hal_ble_plf_reg_read+0xa6>
   2614c:	2010      	movs	r0, #16
   2614e:	f000 fd71 	bl	26c34 <am_hal_flash_delay>
   26152:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   26156:	061b      	lsls	r3, r3, #24
   26158:	d5f6      	bpl.n	26148 <am_hal_ble_plf_reg_read+0x64>
   2615a:	a908      	add	r1, sp, #32
   2615c:	4630      	mov	r0, r6
   2615e:	2200      	movs	r2, #0
   26160:	f7ff ff26 	bl	25fb0 <am_hal_ble_blocking_hci_read>
   26164:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   26168:	990a      	ldr	r1, [sp, #40]	; 0x28
   2616a:	4a0b      	ldr	r2, [pc, #44]	; (26198 <am_hal_ble_plf_reg_read+0xb4>)
   2616c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   26170:	2000      	movs	r0, #0
   26172:	603b      	str	r3, [r7, #0]
   26174:	f8c2 8228 	str.w	r8, [r2, #552]	; 0x228
   26178:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   2617c:	b010      	add	sp, #64	; 0x40
   2617e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   26182:	a902      	add	r1, sp, #8
   26184:	f7ff f816 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   26188:	e7d1      	b.n	2612e <am_hal_ble_plf_reg_read+0x4a>
   2618a:	4807      	ldr	r0, [pc, #28]	; (261a8 <am_hal_ble_plf_reg_read+0xc4>)
   2618c:	b010      	add	sp, #64	; 0x40
   2618e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   26192:	bf00      	nop
   26194:	04fd0201 	.word	0x04fd0201
   26198:	5000c000 	.word	0x5000c000
   2619c:	00010008 	.word	0x00010008
   261a0:	01775230 	.word	0x01775230
   261a4:	0007a120 	.word	0x0007a120
   261a8:	08000004 	.word	0x08000004

000261ac <am_hal_ble_plf_reg_write>:
   261ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   261ae:	b08d      	sub	sp, #52	; 0x34
   261b0:	e9cd 1201 	strd	r1, r2, [sp, #4]
   261b4:	4b25      	ldr	r3, [pc, #148]	; (2624c <am_hal_ble_plf_reg_write+0xa0>)
   261b6:	9303      	str	r3, [sp, #12]
   261b8:	4606      	mov	r6, r0
   261ba:	9801      	ldr	r0, [sp, #4]
   261bc:	4611      	mov	r1, r2
   261be:	ab04      	add	r3, sp, #16
   261c0:	e883 0003 	stmia.w	r3, {r0, r1}
   261c4:	4a22      	ldr	r2, [pc, #136]	; (26250 <am_hal_ble_plf_reg_write+0xa4>)
   261c6:	4923      	ldr	r1, [pc, #140]	; (26254 <am_hal_ble_plf_reg_write+0xa8>)
   261c8:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   261cc:	2300      	movs	r3, #0
   261ce:	a803      	add	r0, sp, #12
   261d0:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   261d4:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   261d8:	9307      	str	r3, [sp, #28]
   261da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   261de:	9006      	str	r0, [sp, #24]
   261e0:	9108      	str	r1, [sp, #32]
   261e2:	b12e      	cbz	r6, 261f0 <am_hal_ble_plf_reg_write+0x44>
   261e4:	6833      	ldr	r3, [r6, #0]
   261e6:	4a1c      	ldr	r2, [pc, #112]	; (26258 <am_hal_ble_plf_reg_write+0xac>)
   261e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   261ec:	4293      	cmp	r3, r2
   261ee:	d024      	beq.n	2623a <am_hal_ble_plf_reg_write+0x8e>
   261f0:	4d17      	ldr	r5, [pc, #92]	; (26250 <am_hal_ble_plf_reg_write+0xa4>)
   261f2:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   261f6:	f043 0302 	orr.w	r3, r3, #2
   261fa:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   261fe:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   26202:	061a      	lsls	r2, r3, #24
   26204:	bf58      	it	pl
   26206:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   2620a:	d502      	bpl.n	26212 <am_hal_ble_plf_reg_write+0x66>
   2620c:	e008      	b.n	26220 <am_hal_ble_plf_reg_write+0x74>
   2620e:	3c01      	subs	r4, #1
   26210:	d018      	beq.n	26244 <am_hal_ble_plf_reg_write+0x98>
   26212:	2010      	movs	r0, #16
   26214:	f000 fd0e 	bl	26c34 <am_hal_flash_delay>
   26218:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2621c:	061b      	lsls	r3, r3, #24
   2621e:	d5f6      	bpl.n	2620e <am_hal_ble_plf_reg_write+0x62>
   26220:	4630      	mov	r0, r6
   26222:	2200      	movs	r2, #0
   26224:	a906      	add	r1, sp, #24
   26226:	f7ff fec3 	bl	25fb0 <am_hal_ble_blocking_hci_read>
   2622a:	4b09      	ldr	r3, [pc, #36]	; (26250 <am_hal_ble_plf_reg_write+0xa4>)
   2622c:	2000      	movs	r0, #0
   2622e:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   26232:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   26236:	b00d      	add	sp, #52	; 0x34
   26238:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2623a:	a906      	add	r1, sp, #24
   2623c:	4630      	mov	r0, r6
   2623e:	f7fe ffb9 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   26242:	e7d5      	b.n	261f0 <am_hal_ble_plf_reg_write+0x44>
   26244:	4805      	ldr	r0, [pc, #20]	; (2625c <am_hal_ble_plf_reg_write+0xb0>)
   26246:	b00d      	add	sp, #52	; 0x34
   26248:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2624a:	bf00      	nop
   2624c:	08fd0301 	.word	0x08fd0301
   26250:	5000c000 	.word	0x5000c000
   26254:	0001000c 	.word	0x0001000c
   26258:	01775230 	.word	0x01775230
   2625c:	08000004 	.word	0x08000004

00026260 <am_hal_ble_transmitter_modex_set>:
   26260:	b530      	push	{r4, r5, lr}
   26262:	b085      	sub	sp, #20
   26264:	4604      	mov	r4, r0
   26266:	2300      	movs	r3, #0
   26268:	466a      	mov	r2, sp
   2626a:	460d      	mov	r5, r1
   2626c:	4927      	ldr	r1, [pc, #156]	; (2630c <am_hal_ble_transmitter_modex_set+0xac>)
   2626e:	9303      	str	r3, [sp, #12]
   26270:	f7ff ff38 	bl	260e4 <am_hal_ble_plf_reg_read>
   26274:	4925      	ldr	r1, [pc, #148]	; (2630c <am_hal_ble_transmitter_modex_set+0xac>)
   26276:	4620      	mov	r0, r4
   26278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2627c:	f7ff ff96 	bl	261ac <am_hal_ble_plf_reg_write>
   26280:	aa03      	add	r2, sp, #12
   26282:	4923      	ldr	r1, [pc, #140]	; (26310 <am_hal_ble_transmitter_modex_set+0xb0>)
   26284:	4620      	mov	r0, r4
   26286:	f7ff ff2d 	bl	260e4 <am_hal_ble_plf_reg_read>
   2628a:	9b03      	ldr	r3, [sp, #12]
   2628c:	aa02      	add	r2, sp, #8
   2628e:	f043 0308 	orr.w	r3, r3, #8
   26292:	4620      	mov	r0, r4
   26294:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   26298:	9303      	str	r3, [sp, #12]
   2629a:	f7ff ff23 	bl	260e4 <am_hal_ble_plf_reg_read>
   2629e:	9a02      	ldr	r2, [sp, #8]
   262a0:	4620      	mov	r0, r4
   262a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   262a6:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   262aa:	9202      	str	r2, [sp, #8]
   262ac:	f7ff ff7e 	bl	261ac <am_hal_ble_plf_reg_write>
   262b0:	aa01      	add	r2, sp, #4
   262b2:	4918      	ldr	r1, [pc, #96]	; (26314 <am_hal_ble_transmitter_modex_set+0xb4>)
   262b4:	4620      	mov	r0, r4
   262b6:	f7ff ff15 	bl	260e4 <am_hal_ble_plf_reg_read>
   262ba:	9a01      	ldr	r2, [sp, #4]
   262bc:	4915      	ldr	r1, [pc, #84]	; (26314 <am_hal_ble_transmitter_modex_set+0xb4>)
   262be:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   262c2:	4620      	mov	r0, r4
   262c4:	f042 0208 	orr.w	r2, r2, #8
   262c8:	f7ff ff70 	bl	261ac <am_hal_ble_plf_reg_write>
   262cc:	006a      	lsls	r2, r5, #1
   262ce:	4912      	ldr	r1, [pc, #72]	; (26318 <am_hal_ble_transmitter_modex_set+0xb8>)
   262d0:	f042 0201 	orr.w	r2, r2, #1
   262d4:	4620      	mov	r0, r4
   262d6:	f7ff ff69 	bl	261ac <am_hal_ble_plf_reg_write>
   262da:	490d      	ldr	r1, [pc, #52]	; (26310 <am_hal_ble_transmitter_modex_set+0xb0>)
   262dc:	9a03      	ldr	r2, [sp, #12]
   262de:	4620      	mov	r0, r4
   262e0:	f7ff ff64 	bl	261ac <am_hal_ble_plf_reg_write>
   262e4:	4b0d      	ldr	r3, [pc, #52]	; (2631c <am_hal_ble_transmitter_modex_set+0xbc>)
   262e6:	68db      	ldr	r3, [r3, #12]
   262e8:	b2db      	uxtb	r3, r3
   262ea:	2b21      	cmp	r3, #33	; 0x21
   262ec:	bf0c      	ite	eq
   262ee:	490c      	ldreq	r1, [pc, #48]	; (26320 <am_hal_ble_transmitter_modex_set+0xc0>)
   262f0:	490c      	ldrne	r1, [pc, #48]	; (26324 <am_hal_ble_transmitter_modex_set+0xc4>)
   262f2:	462a      	mov	r2, r5
   262f4:	4620      	mov	r0, r4
   262f6:	f7ff ff59 	bl	261ac <am_hal_ble_plf_reg_write>
   262fa:	9a00      	ldr	r2, [sp, #0]
   262fc:	4903      	ldr	r1, [pc, #12]	; (2630c <am_hal_ble_transmitter_modex_set+0xac>)
   262fe:	4620      	mov	r0, r4
   26300:	f7ff ff54 	bl	261ac <am_hal_ble_plf_reg_write>
   26304:	2000      	movs	r0, #0
   26306:	b005      	add	sp, #20
   26308:	bd30      	pop	{r4, r5, pc}
   2630a:	bf00      	nop
   2630c:	43000004 	.word	0x43000004
   26310:	52000008 	.word	0x52000008
   26314:	45800070 	.word	0x45800070
   26318:	52000014 	.word	0x52000014
   2631c:	40020000 	.word	0x40020000
   26320:	20006874 	.word	0x20006874
   26324:	20006070 	.word	0x20006070

00026328 <am_hal_ble_patch_complete.part.0>:
   26328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2632c:	b08c      	sub	sp, #48	; 0x30
   2632e:	2300      	movs	r3, #0
   26330:	e9cd 3307 	strd	r3, r3, [sp, #28]
   26334:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   26338:	2101      	movs	r1, #1
   2633a:	2206      	movs	r2, #6
   2633c:	930b      	str	r3, [sp, #44]	; 0x2c
   2633e:	f8ad 3004 	strh.w	r3, [sp, #4]
   26342:	4b7d      	ldr	r3, [pc, #500]	; (26538 <am_hal_ble_patch_complete.part.0+0x210>)
   26344:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   26348:	4605      	mov	r5, r0
   2634a:	f8cd d018 	str.w	sp, [sp, #24]
   2634e:	f8ad 2020 	strh.w	r2, [sp, #32]
   26352:	9300      	str	r3, [sp, #0]
   26354:	2800      	cmp	r0, #0
   26356:	f000 80bc 	beq.w	264d2 <am_hal_ble_patch_complete.part.0+0x1aa>
   2635a:	4e78      	ldr	r6, [pc, #480]	; (2653c <am_hal_ble_patch_complete.part.0+0x214>)
   2635c:	f241 3488 	movw	r4, #5000	; 0x1388
   26360:	e004      	b.n	2636c <am_hal_ble_patch_complete.part.0+0x44>
   26362:	f7fe ff27 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   26366:	b160      	cbz	r0, 26382 <am_hal_ble_patch_complete.part.0+0x5a>
   26368:	3c01      	subs	r4, #1
   2636a:	d00a      	beq.n	26382 <am_hal_ble_patch_complete.part.0+0x5a>
   2636c:	682b      	ldr	r3, [r5, #0]
   2636e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26372:	42b3      	cmp	r3, r6
   26374:	a906      	add	r1, sp, #24
   26376:	4628      	mov	r0, r5
   26378:	d1f6      	bne.n	26368 <am_hal_ble_patch_complete.part.0+0x40>
   2637a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2637e:	2b00      	cmp	r3, #0
   26380:	d1ef      	bne.n	26362 <am_hal_ble_patch_complete.part.0+0x3a>
   26382:	4b6f      	ldr	r3, [pc, #444]	; (26540 <am_hal_ble_patch_complete.part.0+0x218>)
   26384:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   26388:	061a      	lsls	r2, r3, #24
   2638a:	d455      	bmi.n	26438 <am_hal_ble_patch_complete.part.0+0x110>
   2638c:	4c6d      	ldr	r4, [pc, #436]	; (26544 <am_hal_ble_patch_complete.part.0+0x21c>)
   2638e:	4e6c      	ldr	r6, [pc, #432]	; (26540 <am_hal_ble_patch_complete.part.0+0x218>)
   26390:	2010      	movs	r0, #16
   26392:	f000 fc4f 	bl	26c34 <am_hal_flash_delay>
   26396:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2639a:	061f      	lsls	r7, r3, #24
   2639c:	d406      	bmi.n	263ac <am_hal_ble_patch_complete.part.0+0x84>
   2639e:	3c01      	subs	r4, #1
   263a0:	d1f6      	bne.n	26390 <am_hal_ble_patch_complete.part.0+0x68>
   263a2:	4c69      	ldr	r4, [pc, #420]	; (26548 <am_hal_ble_patch_complete.part.0+0x220>)
   263a4:	4620      	mov	r0, r4
   263a6:	b00c      	add	sp, #48	; 0x30
   263a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   263ac:	2302      	movs	r3, #2
   263ae:	af03      	add	r7, sp, #12
   263b0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   263b4:	f8ad 3020 	strh.w	r3, [sp, #32]
   263b8:	9706      	str	r7, [sp, #24]
   263ba:	2d00      	cmp	r5, #0
   263bc:	d037      	beq.n	2642e <am_hal_ble_patch_complete.part.0+0x106>
   263be:	682e      	ldr	r6, [r5, #0]
   263c0:	4b5e      	ldr	r3, [pc, #376]	; (2653c <am_hal_ble_patch_complete.part.0+0x214>)
   263c2:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   263c6:	429e      	cmp	r6, r3
   263c8:	d131      	bne.n	2642e <am_hal_ble_patch_complete.part.0+0x106>
   263ca:	a906      	add	r1, sp, #24
   263cc:	4628      	mov	r0, r5
   263ce:	f7fe fef1 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   263d2:	4604      	mov	r4, r0
   263d4:	bb60      	cbnz	r0, 26430 <am_hal_ble_patch_complete.part.0+0x108>
   263d6:	f89d 100d 	ldrb.w	r1, [sp, #13]
   263da:	29ee      	cmp	r1, #238	; 0xee
   263dc:	d034      	beq.n	26448 <am_hal_ble_patch_complete.part.0+0x120>
   263de:	f89d 300c 	ldrb.w	r3, [sp, #12]
   263e2:	682a      	ldr	r2, [r5, #0]
   263e4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   263e8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   263ec:	b29b      	uxth	r3, r3
   263ee:	42b2      	cmp	r2, r6
   263f0:	f8ad 3020 	strh.w	r3, [sp, #32]
   263f4:	d11b      	bne.n	2642e <am_hal_ble_patch_complete.part.0+0x106>
   263f6:	b133      	cbz	r3, 26406 <am_hal_ble_patch_complete.part.0+0xde>
   263f8:	a906      	add	r1, sp, #24
   263fa:	4628      	mov	r0, r5
   263fc:	f7fe feda 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   26400:	2800      	cmp	r0, #0
   26402:	f040 8096 	bne.w	26532 <am_hal_ble_patch_complete.part.0+0x20a>
   26406:	2301      	movs	r3, #1
   26408:	4620      	mov	r0, r4
   2640a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   2640e:	b00c      	add	sp, #48	; 0x30
   26410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26414:	682e      	ldr	r6, [r5, #0]
   26416:	4b49      	ldr	r3, [pc, #292]	; (2653c <am_hal_ble_patch_complete.part.0+0x214>)
   26418:	9706      	str	r7, [sp, #24]
   2641a:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   2641e:	2702      	movs	r7, #2
   26420:	2209      	movs	r2, #9
   26422:	429e      	cmp	r6, r3
   26424:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   26428:	f8ad 2020 	strh.w	r2, [sp, #32]
   2642c:	d058      	beq.n	264e0 <am_hal_ble_patch_complete.part.0+0x1b8>
   2642e:	2402      	movs	r4, #2
   26430:	4620      	mov	r0, r4
   26432:	b00c      	add	sp, #48	; 0x30
   26434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26438:	2302      	movs	r3, #2
   2643a:	af03      	add	r7, sp, #12
   2643c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   26440:	f8ad 3020 	strh.w	r3, [sp, #32]
   26444:	9706      	str	r7, [sp, #24]
   26446:	e7ba      	b.n	263be <am_hal_ble_patch_complete.part.0+0x96>
   26448:	682b      	ldr	r3, [r5, #0]
   2644a:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   2644e:	2203      	movs	r2, #3
   26450:	45b0      	cmp	r8, r6
   26452:	f8ad 2020 	strh.w	r2, [sp, #32]
   26456:	d1ea      	bne.n	2642e <am_hal_ble_patch_complete.part.0+0x106>
   26458:	a906      	add	r1, sp, #24
   2645a:	4628      	mov	r0, r5
   2645c:	f7fe feaa 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   26460:	4604      	mov	r4, r0
   26462:	2800      	cmp	r0, #0
   26464:	d1e4      	bne.n	26430 <am_hal_ble_patch_complete.part.0+0x108>
   26466:	2301      	movs	r3, #1
   26468:	4a38      	ldr	r2, [pc, #224]	; (2654c <am_hal_ble_patch_complete.part.0+0x224>)
   2646a:	900b      	str	r0, [sp, #44]	; 0x2c
   2646c:	2105      	movs	r1, #5
   2646e:	e9cd 0007 	strd	r0, r0, [sp, #28]
   26472:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   26476:	f8cd d018 	str.w	sp, [sp, #24]
   2647a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   2647e:	f88d 3004 	strb.w	r3, [sp, #4]
   26482:	f8ad 1020 	strh.w	r1, [sp, #32]
   26486:	9200      	str	r2, [sp, #0]
   26488:	f241 3688 	movw	r6, #5000	; 0x1388
   2648c:	e008      	b.n	264a0 <am_hal_ble_patch_complete.part.0+0x178>
   2648e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26492:	b173      	cbz	r3, 264b2 <am_hal_ble_patch_complete.part.0+0x18a>
   26494:	f7fe fe8e 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   26498:	4604      	mov	r4, r0
   2649a:	b150      	cbz	r0, 264b2 <am_hal_ble_patch_complete.part.0+0x18a>
   2649c:	3e01      	subs	r6, #1
   2649e:	d0c7      	beq.n	26430 <am_hal_ble_patch_complete.part.0+0x108>
   264a0:	682b      	ldr	r3, [r5, #0]
   264a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   264a6:	4543      	cmp	r3, r8
   264a8:	a906      	add	r1, sp, #24
   264aa:	4628      	mov	r0, r5
   264ac:	d0ef      	beq.n	2648e <am_hal_ble_patch_complete.part.0+0x166>
   264ae:	2402      	movs	r4, #2
   264b0:	e7f4      	b.n	2649c <am_hal_ble_patch_complete.part.0+0x174>
   264b2:	4e23      	ldr	r6, [pc, #140]	; (26540 <am_hal_ble_patch_complete.part.0+0x218>)
   264b4:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   264b8:	0618      	lsls	r0, r3, #24
   264ba:	d4ab      	bmi.n	26414 <am_hal_ble_patch_complete.part.0+0xec>
   264bc:	4c21      	ldr	r4, [pc, #132]	; (26544 <am_hal_ble_patch_complete.part.0+0x21c>)
   264be:	2010      	movs	r0, #16
   264c0:	f000 fbb8 	bl	26c34 <am_hal_flash_delay>
   264c4:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   264c8:	0619      	lsls	r1, r3, #24
   264ca:	d4a3      	bmi.n	26414 <am_hal_ble_patch_complete.part.0+0xec>
   264cc:	3c01      	subs	r4, #1
   264ce:	d1f6      	bne.n	264be <am_hal_ble_patch_complete.part.0+0x196>
   264d0:	e767      	b.n	263a2 <am_hal_ble_patch_complete.part.0+0x7a>
   264d2:	4b1b      	ldr	r3, [pc, #108]	; (26540 <am_hal_ble_patch_complete.part.0+0x218>)
   264d4:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   264d8:	061b      	lsls	r3, r3, #24
   264da:	f57f af57 	bpl.w	2638c <am_hal_ble_patch_complete.part.0+0x64>
   264de:	e7a6      	b.n	2642e <am_hal_ble_patch_complete.part.0+0x106>
   264e0:	a906      	add	r1, sp, #24
   264e2:	4628      	mov	r0, r5
   264e4:	f7fe fe66 	bl	251b4 <am_hal_ble_blocking_transfer.part.0>
   264e8:	4604      	mov	r4, r0
   264ea:	2800      	cmp	r0, #0
   264ec:	d1a0      	bne.n	26430 <am_hal_ble_patch_complete.part.0+0x108>
   264ee:	682b      	ldr	r3, [r5, #0]
   264f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   264f4:	42b3      	cmp	r3, r6
   264f6:	d106      	bne.n	26506 <am_hal_ble_patch_complete.part.0+0x1de>
   264f8:	4b11      	ldr	r3, [pc, #68]	; (26540 <am_hal_ble_patch_complete.part.0+0x218>)
   264fa:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   264fe:	f367 0283 	bfi	r2, r7, #2, #2
   26502:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   26506:	2301      	movs	r3, #1
   26508:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   2650c:	4810      	ldr	r0, [pc, #64]	; (26550 <am_hal_ble_patch_complete.part.0+0x228>)
   2650e:	f000 fb91 	bl	26c34 <am_hal_flash_delay>
   26512:	4b10      	ldr	r3, [pc, #64]	; (26554 <am_hal_ble_patch_complete.part.0+0x22c>)
   26514:	4a10      	ldr	r2, [pc, #64]	; (26558 <am_hal_ble_patch_complete.part.0+0x230>)
   26516:	681b      	ldr	r3, [r3, #0]
   26518:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
   2651c:	4291      	cmp	r1, r2
   2651e:	d187      	bne.n	26430 <am_hal_ble_patch_complete.part.0+0x108>
   26520:	b2d9      	uxtb	r1, r3
   26522:	f1a1 0320 	sub.w	r3, r1, #32
   26526:	2b20      	cmp	r3, #32
   26528:	d882      	bhi.n	26430 <am_hal_ble_patch_complete.part.0+0x108>
   2652a:	4628      	mov	r0, r5
   2652c:	f7ff fe98 	bl	26260 <am_hal_ble_transmitter_modex_set>
   26530:	e77e      	b.n	26430 <am_hal_ble_patch_complete.part.0+0x108>
   26532:	4604      	mov	r4, r0
   26534:	e77c      	b.n	26430 <am_hal_ble_patch_complete.part.0+0x108>
   26536:	bf00      	nop
   26538:	02f1ee01 	.word	0x02f1ee01
   2653c:	01775230 	.word	0x01775230
   26540:	5000c000 	.word	0x5000c000
   26544:	000186a0 	.word	0x000186a0
   26548:	08000004 	.word	0x08000004
   2654c:	01fd0401 	.word	0x01fd0401
   26550:	007a1200 	.word	0x007a1200
   26554:	50023808 	.word	0x50023808
   26558:	18240600 	.word	0x18240600

0002655c <am_hal_ble_boot>:
   2655c:	2800      	cmp	r0, #0
   2655e:	d06b      	beq.n	26638 <am_hal_ble_boot+0xdc>
   26560:	b570      	push	{r4, r5, r6, lr}
   26562:	6803      	ldr	r3, [r0, #0]
   26564:	4a35      	ldr	r2, [pc, #212]	; (2663c <am_hal_ble_boot+0xe0>)
   26566:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2656a:	4293      	cmp	r3, r2
   2656c:	b082      	sub	sp, #8
   2656e:	4604      	mov	r4, r0
   26570:	d137      	bne.n	265e2 <am_hal_ble_boot+0x86>
   26572:	7a03      	ldrb	r3, [r0, #8]
   26574:	b1f3      	cbz	r3, 265b4 <am_hal_ble_boot+0x58>
   26576:	4a32      	ldr	r2, [pc, #200]	; (26640 <am_hal_ble_boot+0xe4>)
   26578:	68d3      	ldr	r3, [r2, #12]
   2657a:	b2db      	uxtb	r3, r3
   2657c:	2b11      	cmp	r3, #17
   2657e:	d039      	beq.n	265f4 <am_hal_ble_boot+0x98>
   26580:	68d3      	ldr	r3, [r2, #12]
   26582:	b2db      	uxtb	r3, r3
   26584:	2b12      	cmp	r3, #18
   26586:	d035      	beq.n	265f4 <am_hal_ble_boot+0x98>
   26588:	4620      	mov	r0, r4
   2658a:	f7ff fcbf 	bl	25f0c <am_hal_ble_default_trim_set_ramcode>
   2658e:	b108      	cbz	r0, 26594 <am_hal_ble_boot+0x38>
   26590:	b002      	add	sp, #8
   26592:	bd70      	pop	{r4, r5, r6, pc}
   26594:	4620      	mov	r0, r4
   26596:	f7ff fc73 	bl	25e80 <am_hal_ble_default_patch_apply>
   2659a:	2800      	cmp	r0, #0
   2659c:	d1f8      	bne.n	26590 <am_hal_ble_boot+0x34>
   2659e:	6823      	ldr	r3, [r4, #0]
   265a0:	4a26      	ldr	r2, [pc, #152]	; (2663c <am_hal_ble_boot+0xe0>)
   265a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   265a6:	4293      	cmp	r3, r2
   265a8:	d11b      	bne.n	265e2 <am_hal_ble_boot+0x86>
   265aa:	4620      	mov	r0, r4
   265ac:	f7ff febc 	bl	26328 <am_hal_ble_patch_complete.part.0>
   265b0:	2800      	cmp	r0, #0
   265b2:	d1ed      	bne.n	26590 <am_hal_ble_boot+0x34>
   265b4:	4b22      	ldr	r3, [pc, #136]	; (26640 <am_hal_ble_boot+0xe4>)
   265b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   265ba:	9201      	str	r2, [sp, #4]
   265bc:	68db      	ldr	r3, [r3, #12]
   265be:	b2db      	uxtb	r3, r3
   265c0:	2b21      	cmp	r3, #33	; 0x21
   265c2:	d011      	beq.n	265e8 <am_hal_ble_boot+0x8c>
   265c4:	491f      	ldr	r1, [pc, #124]	; (26644 <am_hal_ble_boot+0xe8>)
   265c6:	4620      	mov	r0, r4
   265c8:	aa01      	add	r2, sp, #4
   265ca:	f7ff fd8b 	bl	260e4 <am_hal_ble_plf_reg_read>
   265ce:	9b01      	ldr	r3, [sp, #4]
   265d0:	481d      	ldr	r0, [pc, #116]	; (26648 <am_hal_ble_boot+0xec>)
   265d2:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   265d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   265da:	bf98      	it	ls
   265dc:	2000      	movls	r0, #0
   265de:	b002      	add	sp, #8
   265e0:	bd70      	pop	{r4, r5, r6, pc}
   265e2:	2002      	movs	r0, #2
   265e4:	b002      	add	sp, #8
   265e6:	bd70      	pop	{r4, r5, r6, pc}
   265e8:	4918      	ldr	r1, [pc, #96]	; (2664c <am_hal_ble_boot+0xf0>)
   265ea:	4620      	mov	r0, r4
   265ec:	aa01      	add	r2, sp, #4
   265ee:	f7ff fd79 	bl	260e4 <am_hal_ble_plf_reg_read>
   265f2:	e7ec      	b.n	265ce <am_hal_ble_boot+0x72>
   265f4:	4b16      	ldr	r3, [pc, #88]	; (26650 <am_hal_ble_boot+0xf4>)
   265f6:	681b      	ldr	r3, [r3, #0]
   265f8:	6819      	ldr	r1, [r3, #0]
   265fa:	684b      	ldr	r3, [r1, #4]
   265fc:	68c8      	ldr	r0, [r1, #12]
   265fe:	b17b      	cbz	r3, 26620 <am_hal_ble_boot+0xc4>
   26600:	3b01      	subs	r3, #1
   26602:	4e14      	ldr	r6, [pc, #80]	; (26654 <am_hal_ble_boot+0xf8>)
   26604:	18c5      	adds	r5, r0, r3
   26606:	3801      	subs	r0, #1
   26608:	2300      	movs	r3, #0
   2660a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2660e:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   26612:	42a8      	cmp	r0, r5
   26614:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   26618:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   2661c:	b29b      	uxth	r3, r3
   2661e:	d1f4      	bne.n	2660a <am_hal_ble_boot+0xae>
   26620:	608b      	str	r3, [r1, #8]
   26622:	4620      	mov	r0, r4
   26624:	f7ff f9ea 	bl	259fc <am_hal_ble_patch_apply>
   26628:	2800      	cmp	r0, #0
   2662a:	d1b1      	bne.n	26590 <am_hal_ble_boot+0x34>
   2662c:	4620      	mov	r0, r4
   2662e:	f7ff fb93 	bl	25d58 <am_hal_ble_patch_copy_end_apply>
   26632:	2800      	cmp	r0, #0
   26634:	d0a8      	beq.n	26588 <am_hal_ble_boot+0x2c>
   26636:	e7ab      	b.n	26590 <am_hal_ble_boot+0x34>
   26638:	2002      	movs	r0, #2
   2663a:	4770      	bx	lr
   2663c:	01775230 	.word	0x01775230
   26640:	40020000 	.word	0x40020000
   26644:	20006054 	.word	0x20006054
   26648:	0800000b 	.word	0x0800000b
   2664c:	20006858 	.word	0x20006858
   26650:	10002e14 	.word	0x10002e14
   26654:	00029dec 	.word	0x00029dec

00026658 <am_hal_ble_tx_power_set>:
   26658:	b570      	push	{r4, r5, r6, lr}
   2665a:	b082      	sub	sp, #8
   2665c:	4604      	mov	r4, r0
   2665e:	2300      	movs	r3, #0
   26660:	460e      	mov	r6, r1
   26662:	466a      	mov	r2, sp
   26664:	040d      	lsls	r5, r1, #16
   26666:	4919      	ldr	r1, [pc, #100]	; (266cc <am_hal_ble_tx_power_set+0x74>)
   26668:	9301      	str	r3, [sp, #4]
   2666a:	f7ff fd3b 	bl	260e4 <am_hal_ble_plf_reg_read>
   2666e:	4917      	ldr	r1, [pc, #92]	; (266cc <am_hal_ble_tx_power_set+0x74>)
   26670:	4620      	mov	r0, r4
   26672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26676:	f7ff fd99 	bl	261ac <am_hal_ble_plf_reg_write>
   2667a:	4b15      	ldr	r3, [pc, #84]	; (266d0 <am_hal_ble_tx_power_set+0x78>)
   2667c:	68db      	ldr	r3, [r3, #12]
   2667e:	b2db      	uxtb	r3, r3
   26680:	2b21      	cmp	r3, #33	; 0x21
   26682:	f405 2570 	and.w	r5, r5, #983040	; 0xf0000
   26686:	bf0c      	ite	eq
   26688:	4912      	ldreq	r1, [pc, #72]	; (266d4 <am_hal_ble_tx_power_set+0x7c>)
   2668a:	4913      	ldrne	r1, [pc, #76]	; (266d8 <am_hal_ble_tx_power_set+0x80>)
   2668c:	aa01      	add	r2, sp, #4
   2668e:	f045 0508 	orr.w	r5, r5, #8
   26692:	4620      	mov	r0, r4
   26694:	f7ff fd26 	bl	260e4 <am_hal_ble_plf_reg_read>
   26698:	4910      	ldr	r1, [pc, #64]	; (266dc <am_hal_ble_tx_power_set+0x84>)
   2669a:	f88d 6004 	strb.w	r6, [sp, #4]
   2669e:	462a      	mov	r2, r5
   266a0:	4620      	mov	r0, r4
   266a2:	f7ff fd83 	bl	261ac <am_hal_ble_plf_reg_write>
   266a6:	4b0a      	ldr	r3, [pc, #40]	; (266d0 <am_hal_ble_tx_power_set+0x78>)
   266a8:	9a01      	ldr	r2, [sp, #4]
   266aa:	68db      	ldr	r3, [r3, #12]
   266ac:	b2db      	uxtb	r3, r3
   266ae:	2b21      	cmp	r3, #33	; 0x21
   266b0:	bf0c      	ite	eq
   266b2:	4908      	ldreq	r1, [pc, #32]	; (266d4 <am_hal_ble_tx_power_set+0x7c>)
   266b4:	4908      	ldrne	r1, [pc, #32]	; (266d8 <am_hal_ble_tx_power_set+0x80>)
   266b6:	4620      	mov	r0, r4
   266b8:	f7ff fd78 	bl	261ac <am_hal_ble_plf_reg_write>
   266bc:	9a00      	ldr	r2, [sp, #0]
   266be:	4903      	ldr	r1, [pc, #12]	; (266cc <am_hal_ble_tx_power_set+0x74>)
   266c0:	4620      	mov	r0, r4
   266c2:	f7ff fd73 	bl	261ac <am_hal_ble_plf_reg_write>
   266c6:	2000      	movs	r0, #0
   266c8:	b002      	add	sp, #8
   266ca:	bd70      	pop	{r4, r5, r6, pc}
   266cc:	43000004 	.word	0x43000004
   266d0:	40020000 	.word	0x40020000
   266d4:	20006838 	.word	0x20006838
   266d8:	20006038 	.word	0x20006038
   266dc:	52400018 	.word	0x52400018

000266e0 <am_hal_cachectrl_config>:
   266e0:	b530      	push	{r4, r5, lr}
   266e2:	b083      	sub	sp, #12
   266e4:	4604      	mov	r4, r0
   266e6:	f000 fc7d 	bl	26fe4 <am_hal_interrupt_master_disable>
   266ea:	4d0e      	ldr	r5, [pc, #56]	; (26724 <am_hal_cachectrl_config+0x44>)
   266ec:	9001      	str	r0, [sp, #4]
   266ee:	682b      	ldr	r3, [r5, #0]
   266f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   266f4:	602b      	str	r3, [r5, #0]
   266f6:	9801      	ldr	r0, [sp, #4]
   266f8:	f000 fc78 	bl	26fec <am_hal_interrupt_master_set>
   266fc:	7863      	ldrb	r3, [r4, #1]
   266fe:	7822      	ldrb	r2, [r4, #0]
   26700:	78a1      	ldrb	r1, [r4, #2]
   26702:	021b      	lsls	r3, r3, #8
   26704:	f403 7340 	and.w	r3, r3, #768	; 0x300
   26708:	0112      	lsls	r2, r2, #4
   2670a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   2670e:	b2d2      	uxtb	r2, r2
   26710:	4313      	orrs	r3, r2
   26712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   26716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2671a:	2000      	movs	r0, #0
   2671c:	602b      	str	r3, [r5, #0]
   2671e:	b003      	add	sp, #12
   26720:	bd30      	pop	{r4, r5, pc}
   26722:	bf00      	nop
   26724:	40018000 	.word	0x40018000

00026728 <am_hal_cachectrl_enable>:
   26728:	4a03      	ldr	r2, [pc, #12]	; (26738 <am_hal_cachectrl_enable+0x10>)
   2672a:	6813      	ldr	r3, [r2, #0]
   2672c:	f043 0301 	orr.w	r3, r3, #1
   26730:	6013      	str	r3, [r2, #0]
   26732:	2000      	movs	r0, #0
   26734:	4770      	bx	lr
   26736:	bf00      	nop
   26738:	40018000 	.word	0x40018000

0002673c <am_hal_cachectrl_control>:
   2673c:	b510      	push	{r4, lr}
   2673e:	3801      	subs	r0, #1
   26740:	b08e      	sub	sp, #56	; 0x38
   26742:	2810      	cmp	r0, #16
   26744:	f200 815e 	bhi.w	26a04 <am_hal_cachectrl_control+0x2c8>
   26748:	e8df f010 	tbh	[pc, r0, lsl #1]
   2674c:	00360018 	.word	0x00360018
   26750:	0040003d 	.word	0x0040003d
   26754:	00450043 	.word	0x00450043
   26758:	0011001a 	.word	0x0011001a
   2675c:	00540047 	.word	0x00540047
   26760:	009a0061 	.word	0x009a0061
   26764:	010c00d3 	.word	0x010c00d3
   26768:	013f0126 	.word	0x013f0126
   2676c:	001d      	.short	0x001d
   2676e:	f44f 7300 	mov.w	r3, #512	; 0x200
   26772:	4aac      	ldr	r2, [pc, #688]	; (26a24 <am_hal_cachectrl_control+0x2e8>)
   26774:	2000      	movs	r0, #0
   26776:	6093      	str	r3, [r2, #8]
   26778:	b00e      	add	sp, #56	; 0x38
   2677a:	bd10      	pop	{r4, pc}
   2677c:	2301      	movs	r3, #1
   2677e:	e7f8      	b.n	26772 <am_hal_cachectrl_control+0x36>
   26780:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26784:	e7f5      	b.n	26772 <am_hal_cachectrl_control+0x36>
   26786:	2900      	cmp	r1, #0
   26788:	f000 813c 	beq.w	26a04 <am_hal_cachectrl_control+0x2c8>
   2678c:	684a      	ldr	r2, [r1, #4]
   2678e:	48a6      	ldr	r0, [pc, #664]	; (26a28 <am_hal_cachectrl_control+0x2ec>)
   26790:	4202      	tst	r2, r0
   26792:	f040 8137 	bne.w	26a04 <am_hal_cachectrl_control+0x2c8>
   26796:	688b      	ldr	r3, [r1, #8]
   26798:	4018      	ands	r0, r3
   2679a:	f040 8133 	bne.w	26a04 <am_hal_cachectrl_control+0x2c8>
   2679e:	780c      	ldrb	r4, [r1, #0]
   267a0:	2c00      	cmp	r4, #0
   267a2:	f040 8133 	bne.w	26a0c <am_hal_cachectrl_control+0x2d0>
   267a6:	4c9f      	ldr	r4, [pc, #636]	; (26a24 <am_hal_cachectrl_control+0x2e8>)
   267a8:	7849      	ldrb	r1, [r1, #1]
   267aa:	6122      	str	r2, [r4, #16]
   267ac:	6163      	str	r3, [r4, #20]
   267ae:	6823      	ldr	r3, [r4, #0]
   267b0:	f361 0382 	bfi	r3, r1, #2, #1
   267b4:	6023      	str	r3, [r4, #0]
   267b6:	e7df      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   267b8:	4b9a      	ldr	r3, [pc, #616]	; (26a24 <am_hal_cachectrl_control+0x2e8>)
   267ba:	681b      	ldr	r3, [r3, #0]
   267bc:	01db      	lsls	r3, r3, #7
   267be:	f140 811f 	bpl.w	26a00 <am_hal_cachectrl_control+0x2c4>
   267c2:	2302      	movs	r3, #2
   267c4:	e7d5      	b.n	26772 <am_hal_cachectrl_control+0x36>
   267c6:	f44f 6388 	mov.w	r3, #1088	; 0x440
   267ca:	e7d2      	b.n	26772 <am_hal_cachectrl_control+0x36>
   267cc:	f44f 7308 	mov.w	r3, #544	; 0x220
   267d0:	e7cf      	b.n	26772 <am_hal_cachectrl_control+0x36>
   267d2:	2340      	movs	r3, #64	; 0x40
   267d4:	e7cd      	b.n	26772 <am_hal_cachectrl_control+0x36>
   267d6:	2320      	movs	r3, #32
   267d8:	e7cb      	b.n	26772 <am_hal_cachectrl_control+0x36>
   267da:	f000 fc03 	bl	26fe4 <am_hal_interrupt_master_disable>
   267de:	4a91      	ldr	r2, [pc, #580]	; (26a24 <am_hal_cachectrl_control+0x2e8>)
   267e0:	9000      	str	r0, [sp, #0]
   267e2:	6813      	ldr	r3, [r2, #0]
   267e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   267e8:	6013      	str	r3, [r2, #0]
   267ea:	9800      	ldr	r0, [sp, #0]
   267ec:	f000 fbfe 	bl	26fec <am_hal_interrupt_master_set>
   267f0:	2000      	movs	r0, #0
   267f2:	e7c1      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   267f4:	f000 fbf6 	bl	26fe4 <am_hal_interrupt_master_disable>
   267f8:	4a8a      	ldr	r2, [pc, #552]	; (26a24 <am_hal_cachectrl_control+0x2e8>)
   267fa:	9001      	str	r0, [sp, #4]
   267fc:	6813      	ldr	r3, [r2, #0]
   267fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   26802:	6013      	str	r3, [r2, #0]
   26804:	9801      	ldr	r0, [sp, #4]
   26806:	f000 fbf1 	bl	26fec <am_hal_interrupt_master_set>
   2680a:	2000      	movs	r0, #0
   2680c:	e7b4      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   2680e:	f000 fbe9 	bl	26fe4 <am_hal_interrupt_master_disable>
   26812:	4603      	mov	r3, r0
   26814:	4885      	ldr	r0, [pc, #532]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26816:	9302      	str	r3, [sp, #8]
   26818:	f000 fa56 	bl	26cc8 <am_hal_flash_load_ui32>
   2681c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   26820:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   26824:	4881      	ldr	r0, [pc, #516]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26826:	f000 fa53 	bl	26cd0 <am_hal_flash_store_ui32>
   2682a:	9802      	ldr	r0, [sp, #8]
   2682c:	f000 fbde 	bl	26fec <am_hal_interrupt_master_set>
   26830:	f000 fbd8 	bl	26fe4 <am_hal_interrupt_master_disable>
   26834:	4603      	mov	r3, r0
   26836:	487d      	ldr	r0, [pc, #500]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26838:	9303      	str	r3, [sp, #12]
   2683a:	f000 fa45 	bl	26cc8 <am_hal_flash_load_ui32>
   2683e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   26842:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
   26846:	4879      	ldr	r0, [pc, #484]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26848:	f000 fa42 	bl	26cd0 <am_hal_flash_store_ui32>
   2684c:	9803      	ldr	r0, [sp, #12]
   2684e:	f000 fbcd 	bl	26fec <am_hal_interrupt_master_set>
   26852:	f000 fbc7 	bl	26fe4 <am_hal_interrupt_master_disable>
   26856:	4603      	mov	r3, r0
   26858:	4874      	ldr	r0, [pc, #464]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   2685a:	9304      	str	r3, [sp, #16]
   2685c:	f000 fa34 	bl	26cc8 <am_hal_flash_load_ui32>
   26860:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   26864:	f020 000f 	bic.w	r0, r0, #15
   26868:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   2686c:	f041 0103 	orr.w	r1, r1, #3
   26870:	486e      	ldr	r0, [pc, #440]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26872:	f000 fa2d 	bl	26cd0 <am_hal_flash_store_ui32>
   26876:	9804      	ldr	r0, [sp, #16]
   26878:	f000 fbb8 	bl	26fec <am_hal_interrupt_master_set>
   2687c:	2000      	movs	r0, #0
   2687e:	e77b      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   26880:	f000 fbb0 	bl	26fe4 <am_hal_interrupt_master_disable>
   26884:	4603      	mov	r3, r0
   26886:	4869      	ldr	r0, [pc, #420]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26888:	9305      	str	r3, [sp, #20]
   2688a:	f000 fa1d 	bl	26cc8 <am_hal_flash_load_ui32>
   2688e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   26892:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   26896:	4865      	ldr	r0, [pc, #404]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26898:	f000 fa1a 	bl	26cd0 <am_hal_flash_store_ui32>
   2689c:	9805      	ldr	r0, [sp, #20]
   2689e:	f000 fba5 	bl	26fec <am_hal_interrupt_master_set>
   268a2:	f000 fb9f 	bl	26fe4 <am_hal_interrupt_master_disable>
   268a6:	4603      	mov	r3, r0
   268a8:	4860      	ldr	r0, [pc, #384]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   268aa:	9306      	str	r3, [sp, #24]
   268ac:	f000 fa0c 	bl	26cc8 <am_hal_flash_load_ui32>
   268b0:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   268b4:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
   268b8:	485c      	ldr	r0, [pc, #368]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   268ba:	f000 fa09 	bl	26cd0 <am_hal_flash_store_ui32>
   268be:	9806      	ldr	r0, [sp, #24]
   268c0:	f000 fb94 	bl	26fec <am_hal_interrupt_master_set>
   268c4:	f000 fb8e 	bl	26fe4 <am_hal_interrupt_master_disable>
   268c8:	4603      	mov	r3, r0
   268ca:	4858      	ldr	r0, [pc, #352]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   268cc:	9307      	str	r3, [sp, #28]
   268ce:	f000 f9fb 	bl	26cc8 <am_hal_flash_load_ui32>
   268d2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   268d6:	f020 000f 	bic.w	r0, r0, #15
   268da:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   268de:	f041 0101 	orr.w	r1, r1, #1
   268e2:	4852      	ldr	r0, [pc, #328]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   268e4:	f000 f9f4 	bl	26cd0 <am_hal_flash_store_ui32>
   268e8:	9807      	ldr	r0, [sp, #28]
   268ea:	f000 fb7f 	bl	26fec <am_hal_interrupt_master_set>
   268ee:	2000      	movs	r0, #0
   268f0:	e742      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   268f2:	f000 fb77 	bl	26fe4 <am_hal_interrupt_master_disable>
   268f6:	4603      	mov	r3, r0
   268f8:	484c      	ldr	r0, [pc, #304]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   268fa:	9308      	str	r3, [sp, #32]
   268fc:	f000 f9e4 	bl	26cc8 <am_hal_flash_load_ui32>
   26900:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   26904:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   26908:	4848      	ldr	r0, [pc, #288]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   2690a:	f000 f9e1 	bl	26cd0 <am_hal_flash_store_ui32>
   2690e:	9808      	ldr	r0, [sp, #32]
   26910:	f000 fb6c 	bl	26fec <am_hal_interrupt_master_set>
   26914:	f000 fb66 	bl	26fe4 <am_hal_interrupt_master_disable>
   26918:	4603      	mov	r3, r0
   2691a:	4844      	ldr	r0, [pc, #272]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   2691c:	9309      	str	r3, [sp, #36]	; 0x24
   2691e:	f000 f9d3 	bl	26cc8 <am_hal_flash_load_ui32>
   26922:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   26926:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
   2692a:	4840      	ldr	r0, [pc, #256]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   2692c:	f000 f9d0 	bl	26cd0 <am_hal_flash_store_ui32>
   26930:	9809      	ldr	r0, [sp, #36]	; 0x24
   26932:	f000 fb5b 	bl	26fec <am_hal_interrupt_master_set>
   26936:	f000 fb55 	bl	26fe4 <am_hal_interrupt_master_disable>
   2693a:	4603      	mov	r3, r0
   2693c:	483b      	ldr	r0, [pc, #236]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   2693e:	930a      	str	r3, [sp, #40]	; 0x28
   26940:	f000 f9c2 	bl	26cc8 <am_hal_flash_load_ui32>
   26944:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   26948:	f020 000f 	bic.w	r0, r0, #15
   2694c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   26950:	f041 0101 	orr.w	r1, r1, #1
   26954:	4835      	ldr	r0, [pc, #212]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26956:	f000 f9bb 	bl	26cd0 <am_hal_flash_store_ui32>
   2695a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2695c:	f000 fb46 	bl	26fec <am_hal_interrupt_master_set>
   26960:	2000      	movs	r0, #0
   26962:	e709      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   26964:	2900      	cmp	r1, #0
   26966:	d04d      	beq.n	26a04 <am_hal_cachectrl_control+0x2c8>
   26968:	680c      	ldr	r4, [r1, #0]
   2696a:	2c03      	cmp	r4, #3
   2696c:	d84c      	bhi.n	26a08 <am_hal_cachectrl_control+0x2cc>
   2696e:	f000 fb39 	bl	26fe4 <am_hal_interrupt_master_disable>
   26972:	4603      	mov	r3, r0
   26974:	482d      	ldr	r0, [pc, #180]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   26976:	930b      	str	r3, [sp, #44]	; 0x2c
   26978:	f000 f9a6 	bl	26cc8 <am_hal_flash_load_ui32>
   2697c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   26980:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   26984:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   26988:	4828      	ldr	r0, [pc, #160]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   2698a:	f000 f9a1 	bl	26cd0 <am_hal_flash_store_ui32>
   2698e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   26990:	f000 fb2c 	bl	26fec <am_hal_interrupt_master_set>
   26994:	2000      	movs	r0, #0
   26996:	e6ef      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   26998:	b3a1      	cbz	r1, 26a04 <am_hal_cachectrl_control+0x2c8>
   2699a:	680c      	ldr	r4, [r1, #0]
   2699c:	2c07      	cmp	r4, #7
   2699e:	d833      	bhi.n	26a08 <am_hal_cachectrl_control+0x2cc>
   269a0:	f000 fb20 	bl	26fe4 <am_hal_interrupt_master_disable>
   269a4:	4603      	mov	r3, r0
   269a6:	4821      	ldr	r0, [pc, #132]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   269a8:	930c      	str	r3, [sp, #48]	; 0x30
   269aa:	f000 f98d 	bl	26cc8 <am_hal_flash_load_ui32>
   269ae:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   269b2:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   269b6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   269ba:	481c      	ldr	r0, [pc, #112]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   269bc:	f000 f988 	bl	26cd0 <am_hal_flash_store_ui32>
   269c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   269c2:	f000 fb13 	bl	26fec <am_hal_interrupt_master_set>
   269c6:	2000      	movs	r0, #0
   269c8:	e6d6      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   269ca:	b1d9      	cbz	r1, 26a04 <am_hal_cachectrl_control+0x2c8>
   269cc:	680c      	ldr	r4, [r1, #0]
   269ce:	2c0f      	cmp	r4, #15
   269d0:	d81a      	bhi.n	26a08 <am_hal_cachectrl_control+0x2cc>
   269d2:	f000 fb07 	bl	26fe4 <am_hal_interrupt_master_disable>
   269d6:	4603      	mov	r3, r0
   269d8:	4814      	ldr	r0, [pc, #80]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   269da:	930d      	str	r3, [sp, #52]	; 0x34
   269dc:	f000 f974 	bl	26cc8 <am_hal_flash_load_ui32>
   269e0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   269e4:	f020 000f 	bic.w	r0, r0, #15
   269e8:	ea40 0104 	orr.w	r1, r0, r4
   269ec:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   269f0:	480e      	ldr	r0, [pc, #56]	; (26a2c <am_hal_cachectrl_control+0x2f0>)
   269f2:	f000 f96d 	bl	26cd0 <am_hal_flash_store_ui32>
   269f6:	980d      	ldr	r0, [sp, #52]	; 0x34
   269f8:	f000 faf8 	bl	26fec <am_hal_interrupt_master_set>
   269fc:	2000      	movs	r0, #0
   269fe:	e6bb      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   26a00:	2007      	movs	r0, #7
   26a02:	e6b9      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   26a04:	2006      	movs	r0, #6
   26a06:	e6b7      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   26a08:	2001      	movs	r0, #1
   26a0a:	e6b5      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   26a0c:	2c01      	cmp	r4, #1
   26a0e:	d1f9      	bne.n	26a04 <am_hal_cachectrl_control+0x2c8>
   26a10:	4c04      	ldr	r4, [pc, #16]	; (26a24 <am_hal_cachectrl_control+0x2e8>)
   26a12:	7849      	ldrb	r1, [r1, #1]
   26a14:	61a2      	str	r2, [r4, #24]
   26a16:	61e3      	str	r3, [r4, #28]
   26a18:	6823      	ldr	r3, [r4, #0]
   26a1a:	f361 03c3 	bfi	r3, r1, #3, #1
   26a1e:	6023      	str	r3, [r4, #0]
   26a20:	e6aa      	b.n	26778 <am_hal_cachectrl_control+0x3c>
   26a22:	bf00      	nop
   26a24:	40018000 	.word	0x40018000
   26a28:	f800000f 	.word	0xf800000f
   26a2c:	40018004 	.word	0x40018004

00026a30 <am_hal_clkgen_control>:
   26a30:	4b49      	ldr	r3, [pc, #292]	; (26b58 <am_hal_clkgen_control+0x128>)
   26a32:	681a      	ldr	r2, [r3, #0]
   26a34:	b912      	cbnz	r2, 26a3c <am_hal_clkgen_control+0xc>
   26a36:	4a49      	ldr	r2, [pc, #292]	; (26b5c <am_hal_clkgen_control+0x12c>)
   26a38:	6812      	ldr	r2, [r2, #0]
   26a3a:	601a      	str	r2, [r3, #0]
   26a3c:	2809      	cmp	r0, #9
   26a3e:	f200 8089 	bhi.w	26b54 <am_hal_clkgen_control+0x124>
   26a42:	e8df f000 	tbb	[pc, r0]
   26a46:	160d      	.short	0x160d
   26a48:	423a261e 	.word	0x423a261e
   26a4c:	055c544c 	.word	0x055c544c
   26a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26a54:	2000      	movs	r0, #0
   26a56:	6a1a      	ldr	r2, [r3, #32]
   26a58:	f36f 0200 	bfc	r2, #0, #1
   26a5c:	621a      	str	r2, [r3, #32]
   26a5e:	4770      	bx	lr
   26a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26a64:	2200      	movs	r2, #0
   26a66:	2147      	movs	r1, #71	; 0x47
   26a68:	6159      	str	r1, [r3, #20]
   26a6a:	4610      	mov	r0, r2
   26a6c:	619a      	str	r2, [r3, #24]
   26a6e:	615a      	str	r2, [r3, #20]
   26a70:	4770      	bx	lr
   26a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26a76:	2000      	movs	r0, #0
   26a78:	899a      	ldrh	r2, [r3, #12]
   26a7a:	f36f 0200 	bfc	r2, #0, #1
   26a7e:	819a      	strh	r2, [r3, #12]
   26a80:	4770      	bx	lr
   26a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26a86:	2000      	movs	r0, #0
   26a88:	899a      	ldrh	r2, [r3, #12]
   26a8a:	f36f 0241 	bfc	r2, #1, #1
   26a8e:	819a      	strh	r2, [r3, #12]
   26a90:	4770      	bx	lr
   26a92:	4a33      	ldr	r2, [pc, #204]	; (26b60 <am_hal_clkgen_control+0x130>)
   26a94:	68d3      	ldr	r3, [r2, #12]
   26a96:	b2db      	uxtb	r3, r3
   26a98:	2b21      	cmp	r3, #33	; 0x21
   26a9a:	d106      	bne.n	26aaa <am_hal_clkgen_control+0x7a>
   26a9c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   26aa0:	2101      	movs	r1, #1
   26aa2:	f361 2309 	bfi	r3, r1, #8, #2
   26aa6:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   26aaa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   26aae:	2000      	movs	r0, #0
   26ab0:	8993      	ldrh	r3, [r2, #12]
   26ab2:	f043 0301 	orr.w	r3, r3, #1
   26ab6:	8193      	strh	r3, [r2, #12]
   26ab8:	4770      	bx	lr
   26aba:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   26abe:	2000      	movs	r0, #0
   26ac0:	8993      	ldrh	r3, [r2, #12]
   26ac2:	f043 0302 	orr.w	r3, r3, #2
   26ac6:	8193      	strh	r3, [r2, #12]
   26ac8:	4770      	bx	lr
   26aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26ace:	2200      	movs	r2, #0
   26ad0:	2047      	movs	r0, #71	; 0x47
   26ad2:	2101      	movs	r1, #1
   26ad4:	6158      	str	r0, [r3, #20]
   26ad6:	6199      	str	r1, [r3, #24]
   26ad8:	4610      	mov	r0, r2
   26ada:	615a      	str	r2, [r3, #20]
   26adc:	4770      	bx	lr
   26ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26ae2:	2000      	movs	r0, #0
   26ae4:	899a      	ldrh	r2, [r3, #12]
   26ae6:	f36f 12c7 	bfc	r2, #7, #1
   26aea:	819a      	strh	r2, [r3, #12]
   26aec:	4770      	bx	lr
   26aee:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   26af2:	2000      	movs	r0, #0
   26af4:	8993      	ldrh	r3, [r2, #12]
   26af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26afa:	8193      	strh	r3, [r2, #12]
   26afc:	4770      	bx	lr
   26afe:	4a18      	ldr	r2, [pc, #96]	; (26b60 <am_hal_clkgen_control+0x130>)
   26b00:	68d3      	ldr	r3, [r2, #12]
   26b02:	b2db      	uxtb	r3, r3
   26b04:	2b21      	cmp	r3, #33	; 0x21
   26b06:	d00a      	beq.n	26b1e <am_hal_clkgen_control+0xee>
   26b08:	b139      	cbz	r1, 26b1a <am_hal_clkgen_control+0xea>
   26b0a:	680b      	ldr	r3, [r1, #0]
   26b0c:	f043 0301 	orr.w	r3, r3, #1
   26b10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   26b14:	2000      	movs	r0, #0
   26b16:	6213      	str	r3, [r2, #32]
   26b18:	4770      	bx	lr
   26b1a:	4b12      	ldr	r3, [pc, #72]	; (26b64 <am_hal_clkgen_control+0x134>)
   26b1c:	e7f8      	b.n	26b10 <am_hal_clkgen_control+0xe0>
   26b1e:	b500      	push	{lr}
   26b20:	b083      	sub	sp, #12
   26b22:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   26b26:	9101      	str	r1, [sp, #4]
   26b28:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   26b2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   26b30:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   26b34:	f000 f87e 	bl	26c34 <am_hal_flash_delay>
   26b38:	9901      	ldr	r1, [sp, #4]
   26b3a:	b149      	cbz	r1, 26b50 <am_hal_clkgen_control+0x120>
   26b3c:	680b      	ldr	r3, [r1, #0]
   26b3e:	f043 0301 	orr.w	r3, r3, #1
   26b42:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   26b46:	2000      	movs	r0, #0
   26b48:	6213      	str	r3, [r2, #32]
   26b4a:	b003      	add	sp, #12
   26b4c:	f85d fb04 	ldr.w	pc, [sp], #4
   26b50:	4b04      	ldr	r3, [pc, #16]	; (26b64 <am_hal_clkgen_control+0x134>)
   26b52:	e7f6      	b.n	26b42 <am_hal_clkgen_control+0x112>
   26b54:	2006      	movs	r0, #6
   26b56:	4770      	bx	lr
   26b58:	10008818 	.word	0x10008818
   26b5c:	4ffff000 	.word	0x4ffff000
   26b60:	40020000 	.word	0x40020000
   26b64:	0025b801 	.word	0x0025b801

00026b68 <am_hal_clkgen_status_get>:
   26b68:	b1a8      	cbz	r0, 26b96 <am_hal_clkgen_status_get+0x2e>
   26b6a:	b410      	push	{r4}
   26b6c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   26b70:	490a      	ldr	r1, [pc, #40]	; (26b9c <am_hal_clkgen_status_get+0x34>)
   26b72:	6994      	ldr	r4, [r2, #24]
   26b74:	4b0a      	ldr	r3, [pc, #40]	; (26ba0 <am_hal_clkgen_status_get+0x38>)
   26b76:	f014 0f01 	tst.w	r4, #1
   26b7a:	bf08      	it	eq
   26b7c:	460b      	moveq	r3, r1
   26b7e:	6003      	str	r3, [r0, #0]
   26b80:	69d3      	ldr	r3, [r2, #28]
   26b82:	f85d 4b04 	ldr.w	r4, [sp], #4
   26b86:	f003 0201 	and.w	r2, r3, #1
   26b8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   26b8e:	6042      	str	r2, [r0, #4]
   26b90:	7203      	strb	r3, [r0, #8]
   26b92:	2000      	movs	r0, #0
   26b94:	4770      	bx	lr
   26b96:	2006      	movs	r0, #6
   26b98:	4770      	bx	lr
   26b9a:	bf00      	nop
   26b9c:	02dc6c00 	.word	0x02dc6c00
   26ba0:	016e3600 	.word	0x016e3600

00026ba4 <am_hal_ctimer_int_service>:
   26ba4:	b198      	cbz	r0, 26bce <am_hal_ctimer_int_service+0x2a>
   26ba6:	b570      	push	{r4, r5, r6, lr}
   26ba8:	4e09      	ldr	r6, [pc, #36]	; (26bd0 <am_hal_ctimer_int_service+0x2c>)
   26baa:	4604      	mov	r4, r0
   26bac:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   26bb0:	fab4 f384 	clz	r3, r4
   26bb4:	f1c3 021f 	rsb	r2, r3, #31
   26bb8:	fa25 f303 	lsr.w	r3, r5, r3
   26bbc:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   26bc0:	ea24 0403 	bic.w	r4, r4, r3
   26bc4:	b102      	cbz	r2, 26bc8 <am_hal_ctimer_int_service+0x24>
   26bc6:	4790      	blx	r2
   26bc8:	2c00      	cmp	r4, #0
   26bca:	d1f1      	bne.n	26bb0 <am_hal_ctimer_int_service+0xc>
   26bcc:	bd70      	pop	{r4, r5, r6, pc}
   26bce:	4770      	bx	lr
   26bd0:	10008798 	.word	0x10008798

00026bd4 <am_hal_ctimer_int_clear>:
   26bd4:	b510      	push	{r4, lr}
   26bd6:	b082      	sub	sp, #8
   26bd8:	4604      	mov	r4, r0
   26bda:	f000 fa03 	bl	26fe4 <am_hal_interrupt_master_disable>
   26bde:	4b05      	ldr	r3, [pc, #20]	; (26bf4 <am_hal_ctimer_int_clear+0x20>)
   26be0:	9001      	str	r0, [sp, #4]
   26be2:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   26be6:	9801      	ldr	r0, [sp, #4]
   26be8:	b002      	add	sp, #8
   26bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26bee:	f000 b9fd 	b.w	26fec <am_hal_interrupt_master_set>
   26bf2:	bf00      	nop
   26bf4:	40008000 	.word	0x40008000

00026bf8 <am_hal_ctimer_int_status_get>:
   26bf8:	b510      	push	{r4, lr}
   26bfa:	b082      	sub	sp, #8
   26bfc:	4604      	mov	r4, r0
   26bfe:	f000 f9f1 	bl	26fe4 <am_hal_interrupt_master_disable>
   26c02:	4b0b      	ldr	r3, [pc, #44]	; (26c30 <am_hal_ctimer_int_status_get+0x38>)
   26c04:	9001      	str	r0, [sp, #4]
   26c06:	b154      	cbz	r4, 26c1e <am_hal_ctimer_int_status_get+0x26>
   26c08:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   26c0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   26c10:	9801      	ldr	r0, [sp, #4]
   26c12:	401c      	ands	r4, r3
   26c14:	f000 f9ea 	bl	26fec <am_hal_interrupt_master_set>
   26c18:	4620      	mov	r0, r4
   26c1a:	b002      	add	sp, #8
   26c1c:	bd10      	pop	{r4, pc}
   26c1e:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   26c22:	9801      	ldr	r0, [sp, #4]
   26c24:	f000 f9e2 	bl	26fec <am_hal_interrupt_master_set>
   26c28:	4620      	mov	r0, r4
   26c2a:	b002      	add	sp, #8
   26c2c:	bd10      	pop	{r4, pc}
   26c2e:	bf00      	nop
   26c30:	40008000 	.word	0x40008000

00026c34 <am_hal_flash_delay>:
   26c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   26c3a:	075b      	lsls	r3, r3, #29
   26c3c:	bf46      	itte	mi
   26c3e:	0040      	lslmi	r0, r0, #1
   26c40:	230e      	movmi	r3, #14
   26c42:	230b      	movpl	r3, #11
   26c44:	4298      	cmp	r0, r3
   26c46:	d902      	bls.n	26c4e <am_hal_flash_delay+0x1a>
   26c48:	1ac0      	subs	r0, r0, r3
   26c4a:	4b01      	ldr	r3, [pc, #4]	; (26c50 <am_hal_flash_delay+0x1c>)
   26c4c:	4718      	bx	r3
   26c4e:	4770      	bx	lr
   26c50:	0800009d 	.word	0x0800009d

00026c54 <am_hal_flash_delay_status_check>:
   26c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26c58:	f89d c020 	ldrb.w	ip, [sp, #32]
   26c5c:	4604      	mov	r4, r0
   26c5e:	460d      	mov	r5, r1
   26c60:	4616      	mov	r6, r2
   26c62:	461f      	mov	r7, r3
   26c64:	f1bc 0f00 	cmp.w	ip, #0
   26c68:	d015      	beq.n	26c96 <am_hal_flash_delay_status_check+0x42>
   26c6a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 26cc4 <am_hal_flash_delay_status_check+0x70>
   26c6e:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   26c72:	e009      	b.n	26c88 <am_hal_flash_delay_status_check+0x34>
   26c74:	b31c      	cbz	r4, 26cbe <am_hal_flash_delay_status_check+0x6a>
   26c76:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   26c7a:	f013 0f04 	tst.w	r3, #4
   26c7e:	bf0c      	ite	eq
   26c80:	2005      	moveq	r0, #5
   26c82:	2012      	movne	r0, #18
   26c84:	3c01      	subs	r4, #1
   26c86:	47c0      	blx	r8
   26c88:	6828      	ldr	r0, [r5, #0]
   26c8a:	4030      	ands	r0, r6
   26c8c:	42b8      	cmp	r0, r7
   26c8e:	d1f1      	bne.n	26c74 <am_hal_flash_delay_status_check+0x20>
   26c90:	2000      	movs	r0, #0
   26c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26c96:	f8df 902c 	ldr.w	r9, [pc, #44]	; 26cc4 <am_hal_flash_delay_status_check+0x70>
   26c9a:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
   26c9e:	e009      	b.n	26cb4 <am_hal_flash_delay_status_check+0x60>
   26ca0:	b16c      	cbz	r4, 26cbe <am_hal_flash_delay_status_check+0x6a>
   26ca2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   26ca6:	f013 0f04 	tst.w	r3, #4
   26caa:	bf0c      	ite	eq
   26cac:	2005      	moveq	r0, #5
   26cae:	2012      	movne	r0, #18
   26cb0:	3c01      	subs	r4, #1
   26cb2:	47c8      	blx	r9
   26cb4:	6828      	ldr	r0, [r5, #0]
   26cb6:	4030      	ands	r0, r6
   26cb8:	42b8      	cmp	r0, r7
   26cba:	d0f1      	beq.n	26ca0 <am_hal_flash_delay_status_check+0x4c>
   26cbc:	e7e8      	b.n	26c90 <am_hal_flash_delay_status_check+0x3c>
   26cbe:	2004      	movs	r0, #4
   26cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26cc4:	0800009d 	.word	0x0800009d

00026cc8 <am_hal_flash_load_ui32>:
   26cc8:	4b00      	ldr	r3, [pc, #0]	; (26ccc <am_hal_flash_load_ui32+0x4>)
   26cca:	4718      	bx	r3
   26ccc:	08000075 	.word	0x08000075

00026cd0 <am_hal_flash_store_ui32>:
   26cd0:	4b01      	ldr	r3, [pc, #4]	; (26cd8 <am_hal_flash_store_ui32+0x8>)
   26cd2:	f043 0301 	orr.w	r3, r3, #1
   26cd6:	4718      	bx	r3
   26cd8:	10003580 	.word	0x10003580

00026cdc <am_hal_gpio_pinconfig>:
   26cdc:	2831      	cmp	r0, #49	; 0x31
   26cde:	f200 80bc 	bhi.w	26e5a <am_hal_gpio_pinconfig+0x17e>
   26ce2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ce6:	4604      	mov	r4, r0
   26ce8:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
   26cec:	f001 0007 	and.w	r0, r1, #7
   26cf0:	b085      	sub	sp, #20
   26cf2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   26cf6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   26cfa:	d00f      	beq.n	26d1c <am_hal_gpio_pinconfig+0x40>
   26cfc:	f3c1 1642 	ubfx	r6, r1, #5, #3
   26d00:	1db5      	adds	r5, r6, #6
   26d02:	f005 0507 	and.w	r5, r5, #7
   26d06:	2d03      	cmp	r5, #3
   26d08:	f042 0201 	orr.w	r2, r2, #1
   26d0c:	f240 80a7 	bls.w	26e5e <am_hal_gpio_pinconfig+0x182>
   26d10:	2fc0      	cmp	r7, #192	; 0xc0
   26d12:	f000 80eb 	beq.w	26eec <am_hal_gpio_pinconfig+0x210>
   26d16:	2f20      	cmp	r7, #32
   26d18:	f000 80ed 	beq.w	26ef6 <am_hal_gpio_pinconfig+0x21a>
   26d1c:	b163      	cbz	r3, 26d38 <am_hal_gpio_pinconfig+0x5c>
   26d1e:	2b01      	cmp	r3, #1
   26d20:	f000 80dd 	beq.w	26ede <am_hal_gpio_pinconfig+0x202>
   26d24:	2b02      	cmp	r3, #2
   26d26:	f040 80c3 	bne.w	26eb0 <am_hal_gpio_pinconfig+0x1d4>
   26d2a:	4b7e      	ldr	r3, [pc, #504]	; (26f24 <am_hal_gpio_pinconfig+0x248>)
   26d2c:	5d1b      	ldrb	r3, [r3, r4]
   26d2e:	075b      	lsls	r3, r3, #29
   26d30:	f140 80be 	bpl.w	26eb0 <am_hal_gpio_pinconfig+0x1d4>
   26d34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   26d38:	4b7b      	ldr	r3, [pc, #492]	; (26f28 <am_hal_gpio_pinconfig+0x24c>)
   26d3a:	4d7c      	ldr	r5, [pc, #496]	; (26f2c <am_hal_gpio_pinconfig+0x250>)
   26d3c:	5d1b      	ldrb	r3, [r3, r4]
   26d3e:	5d2d      	ldrb	r5, [r5, r4]
   26d40:	4103      	asrs	r3, r0
   26d42:	005b      	lsls	r3, r3, #1
   26d44:	f003 0302 	and.w	r3, r3, #2
   26d48:	4285      	cmp	r5, r0
   26d4a:	ea43 0302 	orr.w	r3, r3, r2
   26d4e:	f000 8091 	beq.w	26e74 <am_hal_gpio_pinconfig+0x198>
   26d52:	f3c1 2607 	ubfx	r6, r1, #8, #8
   26d56:	f3c1 2581 	ubfx	r5, r1, #10, #2
   26d5a:	f3c1 3080 	ubfx	r0, r1, #14, #1
   26d5e:	0a8a      	lsrs	r2, r1, #10
   26d60:	f006 070c 	and.w	r7, r6, #12
   26d64:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
   26d68:	f002 0208 	and.w	r2, r2, #8
   26d6c:	f3c1 3500 	ubfx	r5, r1, #12, #1
   26d70:	2f04      	cmp	r7, #4
   26d72:	ea42 0200 	orr.w	r2, r2, r0
   26d76:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
   26d7a:	4628      	mov	r0, r5
   26d7c:	f000 80ac 	beq.w	26ed8 <am_hal_gpio_pinconfig+0x1fc>
   26d80:	486b      	ldr	r0, [pc, #428]	; (26f30 <am_hal_gpio_pinconfig+0x254>)
   26d82:	6800      	ldr	r0, [r0, #0]
   26d84:	eba1 0800 	sub.w	r8, r1, r0
   26d88:	fab8 f888 	clz	r8, r8
   26d8c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   26d90:	f016 0f60 	tst.w	r6, #96	; 0x60
   26d94:	bf04      	itt	eq
   26d96:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   26d9a:	f360 0200 	bfieq	r2, r0, #0, #1
   26d9e:	00a6      	lsls	r6, r4, #2
   26da0:	f3c1 2101 	ubfx	r1, r1, #8, #2
   26da4:	2902      	cmp	r1, #2
   26da6:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   26daa:	f000 808e 	beq.w	26eca <am_hal_gpio_pinconfig+0x1ee>
   26dae:	2903      	cmp	r1, #3
   26db0:	f000 8082 	beq.w	26eb8 <am_hal_gpio_pinconfig+0x1dc>
   26db4:	2901      	cmp	r1, #1
   26db6:	bf08      	it	eq
   26db8:	f043 0304 	orreq.w	r3, r3, #4
   26dbc:	f005 0518 	and.w	r5, r5, #24
   26dc0:	f04f 0900 	mov.w	r9, #0
   26dc4:	f006 061c 	and.w	r6, r6, #28
   26dc8:	210f      	movs	r1, #15
   26dca:	40b1      	lsls	r1, r6
   26dcc:	27ff      	movs	r7, #255	; 0xff
   26dce:	fa02 f606 	lsl.w	r6, r2, r6
   26dd2:	43ca      	mvns	r2, r1
   26dd4:	40af      	lsls	r7, r5
   26dd6:	9201      	str	r2, [sp, #4]
   26dd8:	fa03 f505 	lsl.w	r5, r3, r5
   26ddc:	f000 f902 	bl	26fe4 <am_hal_interrupt_master_disable>
   26de0:	f024 0b03 	bic.w	fp, r4, #3
   26de4:	ea4f 0a54 	mov.w	sl, r4, lsr #1
   26de8:	f10b 4c80 	add.w	ip, fp, #1073741824	; 0x40000000
   26dec:	4b51      	ldr	r3, [pc, #324]	; (26f34 <am_hal_gpio_pinconfig+0x258>)
   26dee:	4952      	ldr	r1, [pc, #328]	; (26f38 <am_hal_gpio_pinconfig+0x25c>)
   26df0:	9a01      	ldr	r2, [sp, #4]
   26df2:	9003      	str	r0, [sp, #12]
   26df4:	43ff      	mvns	r7, r7
   26df6:	f02a 0a03 	bic.w	sl, sl, #3
   26dfa:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
   26dfe:	f1b8 0f00 	cmp.w	r8, #0
   26e02:	d00b      	beq.n	26e1c <am_hal_gpio_pinconfig+0x140>
   26e04:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   26e08:	f004 081f 	and.w	r8, r4, #31
   26e0c:	484b      	ldr	r0, [pc, #300]	; (26f3c <am_hal_gpio_pinconfig+0x260>)
   26e0e:	f00e 0e04 	and.w	lr, lr, #4
   26e12:	2401      	movs	r4, #1
   26e14:	fa04 f408 	lsl.w	r4, r4, r8
   26e18:	f84e 4000 	str.w	r4, [lr, r0]
   26e1c:	4848      	ldr	r0, [pc, #288]	; (26f40 <am_hal_gpio_pinconfig+0x264>)
   26e1e:	2473      	movs	r4, #115	; 0x73
   26e20:	6604      	str	r4, [r0, #96]	; 0x60
   26e22:	f8dc 4000 	ldr.w	r4, [ip]
   26e26:	403c      	ands	r4, r7
   26e28:	4325      	orrs	r5, r4
   26e2a:	f8cc 5000 	str.w	r5, [ip]
   26e2e:	f85a 4003 	ldr.w	r4, [sl, r3]
   26e32:	4022      	ands	r2, r4
   26e34:	4332      	orrs	r2, r6
   26e36:	f84a 2003 	str.w	r2, [sl, r3]
   26e3a:	f85b 3001 	ldr.w	r3, [fp, r1]
   26e3e:	401f      	ands	r7, r3
   26e40:	2400      	movs	r4, #0
   26e42:	ea47 0709 	orr.w	r7, r7, r9
   26e46:	f84b 7001 	str.w	r7, [fp, r1]
   26e4a:	6604      	str	r4, [r0, #96]	; 0x60
   26e4c:	9803      	ldr	r0, [sp, #12]
   26e4e:	f000 f8cd 	bl	26fec <am_hal_interrupt_master_set>
   26e52:	4620      	mov	r0, r4
   26e54:	b005      	add	sp, #20
   26e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e5a:	2006      	movs	r0, #6
   26e5c:	4770      	bx	lr
   26e5e:	4d31      	ldr	r5, [pc, #196]	; (26f24 <am_hal_gpio_pinconfig+0x248>)
   26e60:	5d2d      	ldrb	r5, [r5, r4]
   26e62:	3e02      	subs	r6, #2
   26e64:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   26e68:	07ee      	lsls	r6, r5, #31
   26e6a:	d547      	bpl.n	26efc <am_hal_gpio_pinconfig+0x220>
   26e6c:	2b00      	cmp	r3, #0
   26e6e:	f43f af63 	beq.w	26d38 <am_hal_gpio_pinconfig+0x5c>
   26e72:	e754      	b.n	26d1e <am_hal_gpio_pinconfig+0x42>
   26e74:	f3c1 4202 	ubfx	r2, r1, #16, #3
   26e78:	2a07      	cmp	r2, #7
   26e7a:	d041      	beq.n	26f00 <am_hal_gpio_pinconfig+0x224>
   26e7c:	4d31      	ldr	r5, [pc, #196]	; (26f44 <am_hal_gpio_pinconfig+0x268>)
   26e7e:	4610      	mov	r0, r2
   26e80:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
   26e84:	f3c1 42c1 	ubfx	r2, r1, #19, #2
   26e88:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
   26e8c:	4286      	cmp	r6, r0
   26e8e:	d039      	beq.n	26f04 <am_hal_gpio_pinconfig+0x228>
   26e90:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   26e94:	00a6      	lsls	r6, r4, #2
   26e96:	786a      	ldrb	r2, [r5, #1]
   26e98:	4282      	cmp	r2, r0
   26e9a:	d03d      	beq.n	26f18 <am_hal_gpio_pinconfig+0x23c>
   26e9c:	78aa      	ldrb	r2, [r5, #2]
   26e9e:	4282      	cmp	r2, r0
   26ea0:	d03c      	beq.n	26f1c <am_hal_gpio_pinconfig+0x240>
   26ea2:	78ea      	ldrb	r2, [r5, #3]
   26ea4:	4282      	cmp	r2, r0
   26ea6:	d03b      	beq.n	26f20 <am_hal_gpio_pinconfig+0x244>
   26ea8:	4827      	ldr	r0, [pc, #156]	; (26f48 <am_hal_gpio_pinconfig+0x26c>)
   26eaa:	b005      	add	sp, #20
   26eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26eb0:	4826      	ldr	r0, [pc, #152]	; (26f4c <am_hal_gpio_pinconfig+0x270>)
   26eb2:	b005      	add	sp, #20
   26eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26eb8:	f005 0518 	and.w	r5, r5, #24
   26ebc:	f04f 0901 	mov.w	r9, #1
   26ec0:	f043 0304 	orr.w	r3, r3, #4
   26ec4:	fa09 f905 	lsl.w	r9, r9, r5
   26ec8:	e77c      	b.n	26dc4 <am_hal_gpio_pinconfig+0xe8>
   26eca:	f005 0518 	and.w	r5, r5, #24
   26ece:	f04f 0901 	mov.w	r9, #1
   26ed2:	fa09 f905 	lsl.w	r9, r9, r5
   26ed6:	e775      	b.n	26dc4 <am_hal_gpio_pinconfig+0xe8>
   26ed8:	f04f 0801 	mov.w	r8, #1
   26edc:	e758      	b.n	26d90 <am_hal_gpio_pinconfig+0xb4>
   26ede:	4b11      	ldr	r3, [pc, #68]	; (26f24 <am_hal_gpio_pinconfig+0x248>)
   26ee0:	5d1b      	ldrb	r3, [r3, r4]
   26ee2:	079d      	lsls	r5, r3, #30
   26ee4:	d5e4      	bpl.n	26eb0 <am_hal_gpio_pinconfig+0x1d4>
   26ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   26eea:	e725      	b.n	26d38 <am_hal_gpio_pinconfig+0x5c>
   26eec:	2c14      	cmp	r4, #20
   26eee:	f43f af15 	beq.w	26d1c <am_hal_gpio_pinconfig+0x40>
   26ef2:	4817      	ldr	r0, [pc, #92]	; (26f50 <am_hal_gpio_pinconfig+0x274>)
   26ef4:	e7ae      	b.n	26e54 <am_hal_gpio_pinconfig+0x178>
   26ef6:	2c14      	cmp	r4, #20
   26ef8:	f47f af10 	bne.w	26d1c <am_hal_gpio_pinconfig+0x40>
   26efc:	4815      	ldr	r0, [pc, #84]	; (26f54 <am_hal_gpio_pinconfig+0x278>)
   26efe:	e7a9      	b.n	26e54 <am_hal_gpio_pinconfig+0x178>
   26f00:	4815      	ldr	r0, [pc, #84]	; (26f58 <am_hal_gpio_pinconfig+0x27c>)
   26f02:	e7a7      	b.n	26e54 <am_hal_gpio_pinconfig+0x178>
   26f04:	2200      	movs	r2, #0
   26f06:	00a6      	lsls	r6, r4, #2
   26f08:	0052      	lsls	r2, r2, #1
   26f0a:	f3c1 5040 	ubfx	r0, r1, #21, #1
   26f0e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
   26f12:	f04f 0800 	mov.w	r8, #0
   26f16:	e743      	b.n	26da0 <am_hal_gpio_pinconfig+0xc4>
   26f18:	2201      	movs	r2, #1
   26f1a:	e7f5      	b.n	26f08 <am_hal_gpio_pinconfig+0x22c>
   26f1c:	2202      	movs	r2, #2
   26f1e:	e7f3      	b.n	26f08 <am_hal_gpio_pinconfig+0x22c>
   26f20:	2203      	movs	r2, #3
   26f22:	e7f1      	b.n	26f08 <am_hal_gpio_pinconfig+0x22c>
   26f24:	0002b87c 	.word	0x0002b87c
   26f28:	0002b8b0 	.word	0x0002b8b0
   26f2c:	0002b9ac 	.word	0x0002b9ac
   26f30:	0002b874 	.word	0x0002b874
   26f34:	40010040 	.word	0x40010040
   26f38:	400100e0 	.word	0x400100e0
   26f3c:	400100b4 	.word	0x400100b4
   26f40:	40010000 	.word	0x40010000
   26f44:	0002b8e4 	.word	0x0002b8e4
   26f48:	08000104 	.word	0x08000104
   26f4c:	08000102 	.word	0x08000102
   26f50:	08000101 	.word	0x08000101
   26f54:	08000100 	.word	0x08000100
   26f58:	08000103 	.word	0x08000103

00026f5c <am_hal_gpio_state_write>:
   26f5c:	2831      	cmp	r0, #49	; 0x31
   26f5e:	d81a      	bhi.n	26f96 <am_hal_gpio_state_write+0x3a>
   26f60:	b570      	push	{r4, r5, r6, lr}
   26f62:	2905      	cmp	r1, #5
   26f64:	b082      	sub	sp, #8
   26f66:	460d      	mov	r5, r1
   26f68:	d812      	bhi.n	26f90 <am_hal_gpio_state_write+0x34>
   26f6a:	f000 031f 	and.w	r3, r0, #31
   26f6e:	2201      	movs	r2, #1
   26f70:	08c0      	lsrs	r0, r0, #3
   26f72:	f000 0404 	and.w	r4, r0, #4
   26f76:	fa02 f603 	lsl.w	r6, r2, r3
   26f7a:	f000 f833 	bl	26fe4 <am_hal_interrupt_master_disable>
   26f7e:	3d01      	subs	r5, #1
   26f80:	9001      	str	r0, [sp, #4]
   26f82:	2d04      	cmp	r5, #4
   26f84:	d821      	bhi.n	26fca <am_hal_gpio_state_write+0x6e>
   26f86:	e8df f005 	tbb	[pc, r5]
   26f8a:	1512      	.short	0x1512
   26f8c:	1d1a      	.short	0x1d1a
   26f8e:	08          	.byte	0x08
   26f8f:	00          	.byte	0x00
   26f90:	2006      	movs	r0, #6
   26f92:	b002      	add	sp, #8
   26f94:	bd70      	pop	{r4, r5, r6, pc}
   26f96:	2005      	movs	r0, #5
   26f98:	4770      	bx	lr
   26f9a:	4a0d      	ldr	r2, [pc, #52]	; (26fd0 <am_hal_gpio_state_write+0x74>)
   26f9c:	58a3      	ldr	r3, [r4, r2]
   26f9e:	4073      	eors	r3, r6
   26fa0:	50a3      	str	r3, [r4, r2]
   26fa2:	9801      	ldr	r0, [sp, #4]
   26fa4:	f000 f822 	bl	26fec <am_hal_interrupt_master_set>
   26fa8:	2000      	movs	r0, #0
   26faa:	b002      	add	sp, #8
   26fac:	bd70      	pop	{r4, r5, r6, pc}
   26fae:	4b09      	ldr	r3, [pc, #36]	; (26fd4 <am_hal_gpio_state_write+0x78>)
   26fb0:	50e6      	str	r6, [r4, r3]
   26fb2:	e7f6      	b.n	26fa2 <am_hal_gpio_state_write+0x46>
   26fb4:	4a08      	ldr	r2, [pc, #32]	; (26fd8 <am_hal_gpio_state_write+0x7c>)
   26fb6:	58a3      	ldr	r3, [r4, r2]
   26fb8:	4073      	eors	r3, r6
   26fba:	50a3      	str	r3, [r4, r2]
   26fbc:	e7f1      	b.n	26fa2 <am_hal_gpio_state_write+0x46>
   26fbe:	4b04      	ldr	r3, [pc, #16]	; (26fd0 <am_hal_gpio_state_write+0x74>)
   26fc0:	50e6      	str	r6, [r4, r3]
   26fc2:	e7ee      	b.n	26fa2 <am_hal_gpio_state_write+0x46>
   26fc4:	4b05      	ldr	r3, [pc, #20]	; (26fdc <am_hal_gpio_state_write+0x80>)
   26fc6:	50e6      	str	r6, [r4, r3]
   26fc8:	e7eb      	b.n	26fa2 <am_hal_gpio_state_write+0x46>
   26fca:	4b05      	ldr	r3, [pc, #20]	; (26fe0 <am_hal_gpio_state_write+0x84>)
   26fcc:	50e6      	str	r6, [r4, r3]
   26fce:	e7e8      	b.n	26fa2 <am_hal_gpio_state_write+0x46>
   26fd0:	400100b4 	.word	0x400100b4
   26fd4:	40010090 	.word	0x40010090
   26fd8:	40010088 	.word	0x40010088
   26fdc:	400100a8 	.word	0x400100a8
   26fe0:	40010098 	.word	0x40010098

00026fe4 <am_hal_interrupt_master_disable>:
   26fe4:	f3ef 8010 	mrs	r0, PRIMASK
   26fe8:	b672      	cpsid	i
   26fea:	4770      	bx	lr

00026fec <am_hal_interrupt_master_set>:
   26fec:	f380 8810 	msr	PRIMASK, r0
   26ff0:	4770      	bx	lr
   26ff2:	bf00      	nop

00026ff4 <am_hal_mcuctrl_info_get>:
   26ff4:	2900      	cmp	r1, #0
   26ff6:	f000 808d 	beq.w	27114 <am_hal_mcuctrl_info_get+0x120>
   26ffa:	2801      	cmp	r0, #1
   26ffc:	b4f0      	push	{r4, r5, r6, r7}
   26ffe:	d006      	beq.n	2700e <am_hal_mcuctrl_info_get+0x1a>
   27000:	2802      	cmp	r0, #2
   27002:	d06b      	beq.n	270dc <am_hal_mcuctrl_info_get+0xe8>
   27004:	2800      	cmp	r0, #0
   27006:	d053      	beq.n	270b0 <am_hal_mcuctrl_info_get+0xbc>
   27008:	2006      	movs	r0, #6
   2700a:	bcf0      	pop	{r4, r5, r6, r7}
   2700c:	4770      	bx	lr
   2700e:	4a42      	ldr	r2, [pc, #264]	; (27118 <am_hal_mcuctrl_info_get+0x124>)
   27010:	4c42      	ldr	r4, [pc, #264]	; (2711c <am_hal_mcuctrl_info_get+0x128>)
   27012:	6813      	ldr	r3, [r2, #0]
   27014:	600b      	str	r3, [r1, #0]
   27016:	6850      	ldr	r0, [r2, #4]
   27018:	6048      	str	r0, [r1, #4]
   2701a:	6890      	ldr	r0, [r2, #8]
   2701c:	6088      	str	r0, [r1, #8]
   2701e:	68d0      	ldr	r0, [r2, #12]
   27020:	60c8      	str	r0, [r1, #12]
   27022:	f3c3 5703 	ubfx	r7, r3, #20, #4
   27026:	6915      	ldr	r5, [r2, #16]
   27028:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   2702c:	610d      	str	r5, [r1, #16]
   2702e:	f3c3 4603 	ubfx	r6, r3, #16, #4
   27032:	483b      	ldr	r0, [pc, #236]	; (27120 <am_hal_mcuctrl_info_get+0x12c>)
   27034:	6955      	ldr	r5, [r2, #20]
   27036:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   2703a:	4a3a      	ldr	r2, [pc, #232]	; (27124 <am_hal_mcuctrl_info_get+0x130>)
   2703c:	614d      	str	r5, [r1, #20]
   2703e:	f003 0301 	and.w	r3, r3, #1
   27042:	e9c1 3406 	strd	r3, r4, [r1, #24]
   27046:	6208      	str	r0, [r1, #32]
   27048:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2704c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
   27050:	b2db      	uxtb	r3, r3
   27052:	f000 000f 	and.w	r0, r0, #15
   27056:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2705a:	624b      	str	r3, [r1, #36]	; 0x24
   2705c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   27060:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
   27064:	f3c3 1303 	ubfx	r3, r3, #4, #4
   27068:	f000 000f 	and.w	r0, r0, #15
   2706c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   27070:	628b      	str	r3, [r1, #40]	; 0x28
   27072:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   27076:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
   2707a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2707e:	f3c0 1003 	ubfx	r0, r0, #4, #4
   27082:	4303      	orrs	r3, r0
   27084:	62cb      	str	r3, [r1, #44]	; 0x2c
   27086:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
   2708a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
   2708e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
   27092:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   27096:	b2db      	uxtb	r3, r3
   27098:	041b      	lsls	r3, r3, #16
   2709a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   2709e:	b2d2      	uxtb	r2, r2
   270a0:	4313      	orrs	r3, r2
   270a2:	b2c2      	uxtb	r2, r0
   270a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   270a8:	630b      	str	r3, [r1, #48]	; 0x30
   270aa:	2000      	movs	r0, #0
   270ac:	bcf0      	pop	{r4, r5, r6, r7}
   270ae:	4770      	bx	lr
   270b0:	4a19      	ldr	r2, [pc, #100]	; (27118 <am_hal_mcuctrl_info_get+0x124>)
   270b2:	6993      	ldr	r3, [r2, #24]
   270b4:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
   270b8:	f3c4 6481 	ubfx	r4, r4, #26, #2
   270bc:	710c      	strb	r4, [r1, #4]
   270be:	6952      	ldr	r2, [r2, #20]
   270c0:	f3c3 1480 	ubfx	r4, r3, #6, #1
   270c4:	f3c2 0540 	ubfx	r5, r2, #1, #1
   270c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
   270cc:	f002 0201 	and.w	r2, r2, #1
   270d0:	708d      	strb	r5, [r1, #2]
   270d2:	700c      	strb	r4, [r1, #0]
   270d4:	70ca      	strb	r2, [r1, #3]
   270d6:	bcf0      	pop	{r4, r5, r6, r7}
   270d8:	704b      	strb	r3, [r1, #1]
   270da:	4770      	bx	lr
   270dc:	4a0e      	ldr	r2, [pc, #56]	; (27118 <am_hal_mcuctrl_info_get+0x124>)
   270de:	684c      	ldr	r4, [r1, #4]
   270e0:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   270e4:	f8d2 01c4 	ldr.w	r0, [r2, #452]	; 0x1c4
   270e8:	60c8      	str	r0, [r1, #12]
   270ea:	f8d2 51c0 	ldr.w	r5, [r2, #448]	; 0x1c0
   270ee:	6948      	ldr	r0, [r1, #20]
   270f0:	432c      	orrs	r4, r5
   270f2:	604c      	str	r4, [r1, #4]
   270f4:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   270f8:	f003 0401 	and.w	r4, r3, #1
   270fc:	4310      	orrs	r0, r2
   270fe:	f3c3 0240 	ubfx	r2, r3, #1, #1
   27102:	f3c3 0380 	ubfx	r3, r3, #2, #1
   27106:	6148      	str	r0, [r1, #20]
   27108:	700c      	strb	r4, [r1, #0]
   2710a:	2000      	movs	r0, #0
   2710c:	bcf0      	pop	{r4, r5, r6, r7}
   2710e:	720a      	strb	r2, [r1, #8]
   27110:	740b      	strb	r3, [r1, #16]
   27112:	4770      	bx	lr
   27114:	2006      	movs	r0, #6
   27116:	4770      	bx	lr
   27118:	40020000 	.word	0x40020000
   2711c:	0002b9e0 	.word	0x0002b9e0
   27120:	0002ba20 	.word	0x0002ba20
   27124:	f0000f00 	.word	0xf0000f00

00027128 <am_hal_pwrctrl_periph_enable>:
   27128:	b570      	push	{r4, r5, r6, lr}
   2712a:	b082      	sub	sp, #8
   2712c:	4604      	mov	r4, r0
   2712e:	f7ff ff59 	bl	26fe4 <am_hal_interrupt_master_disable>
   27132:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   27136:	4e0f      	ldr	r6, [pc, #60]	; (27174 <am_hal_pwrctrl_periph_enable+0x4c>)
   27138:	4d0f      	ldr	r5, [pc, #60]	; (27178 <am_hal_pwrctrl_periph_enable+0x50>)
   2713a:	9001      	str	r0, [sp, #4]
   2713c:	00a4      	lsls	r4, r4, #2
   2713e:	68b3      	ldr	r3, [r6, #8]
   27140:	592a      	ldr	r2, [r5, r4]
   27142:	4313      	orrs	r3, r2
   27144:	60b3      	str	r3, [r6, #8]
   27146:	9801      	ldr	r0, [sp, #4]
   27148:	442c      	add	r4, r5
   2714a:	f7ff ff4f 	bl	26fec <am_hal_interrupt_master_set>
   2714e:	20a0      	movs	r0, #160	; 0xa0
   27150:	f7ff fd70 	bl	26c34 <am_hal_flash_delay>
   27154:	69b3      	ldr	r3, [r6, #24]
   27156:	6864      	ldr	r4, [r4, #4]
   27158:	4223      	tst	r3, r4
   2715a:	d103      	bne.n	27164 <am_hal_pwrctrl_periph_enable+0x3c>
   2715c:	20a0      	movs	r0, #160	; 0xa0
   2715e:	f7ff fd69 	bl	26c34 <am_hal_flash_delay>
   27162:	69b3      	ldr	r3, [r6, #24]
   27164:	4b03      	ldr	r3, [pc, #12]	; (27174 <am_hal_pwrctrl_periph_enable+0x4c>)
   27166:	699b      	ldr	r3, [r3, #24]
   27168:	4223      	tst	r3, r4
   2716a:	bf0c      	ite	eq
   2716c:	2001      	moveq	r0, #1
   2716e:	2000      	movne	r0, #0
   27170:	b002      	add	sp, #8
   27172:	bd70      	pop	{r4, r5, r6, pc}
   27174:	40021000 	.word	0x40021000
   27178:	0002ba60 	.word	0x0002ba60

0002717c <am_hal_pwrctrl_periph_disable>:
   2717c:	b570      	push	{r4, r5, r6, lr}
   2717e:	b082      	sub	sp, #8
   27180:	4604      	mov	r4, r0
   27182:	f7ff ff2f 	bl	26fe4 <am_hal_interrupt_master_disable>
   27186:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2718a:	4e10      	ldr	r6, [pc, #64]	; (271cc <am_hal_pwrctrl_periph_disable+0x50>)
   2718c:	4d10      	ldr	r5, [pc, #64]	; (271d0 <am_hal_pwrctrl_periph_disable+0x54>)
   2718e:	9001      	str	r0, [sp, #4]
   27190:	00a4      	lsls	r4, r4, #2
   27192:	68b3      	ldr	r3, [r6, #8]
   27194:	592a      	ldr	r2, [r5, r4]
   27196:	ea23 0302 	bic.w	r3, r3, r2
   2719a:	60b3      	str	r3, [r6, #8]
   2719c:	9801      	ldr	r0, [sp, #4]
   2719e:	442c      	add	r4, r5
   271a0:	f7ff ff24 	bl	26fec <am_hal_interrupt_master_set>
   271a4:	20a0      	movs	r0, #160	; 0xa0
   271a6:	f7ff fd45 	bl	26c34 <am_hal_flash_delay>
   271aa:	69b3      	ldr	r3, [r6, #24]
   271ac:	6864      	ldr	r4, [r4, #4]
   271ae:	4223      	tst	r3, r4
   271b0:	d003      	beq.n	271ba <am_hal_pwrctrl_periph_disable+0x3e>
   271b2:	20a0      	movs	r0, #160	; 0xa0
   271b4:	f7ff fd3e 	bl	26c34 <am_hal_flash_delay>
   271b8:	69b3      	ldr	r3, [r6, #24]
   271ba:	4b04      	ldr	r3, [pc, #16]	; (271cc <am_hal_pwrctrl_periph_disable+0x50>)
   271bc:	699b      	ldr	r3, [r3, #24]
   271be:	4223      	tst	r3, r4
   271c0:	bf14      	ite	ne
   271c2:	2001      	movne	r0, #1
   271c4:	2000      	moveq	r0, #0
   271c6:	b002      	add	sp, #8
   271c8:	bd70      	pop	{r4, r5, r6, pc}
   271ca:	bf00      	nop
   271cc:	40021000 	.word	0x40021000
   271d0:	0002ba60 	.word	0x0002ba60

000271d4 <am_hal_pwrctrl_low_power_init>:
   271d4:	b530      	push	{r4, r5, lr}
   271d6:	4b55      	ldr	r3, [pc, #340]	; (2732c <am_hal_pwrctrl_low_power_init+0x158>)
   271d8:	681a      	ldr	r2, [r3, #0]
   271da:	b085      	sub	sp, #20
   271dc:	b912      	cbnz	r2, 271e4 <am_hal_pwrctrl_low_power_init+0x10>
   271de:	4a54      	ldr	r2, [pc, #336]	; (27330 <am_hal_pwrctrl_low_power_init+0x15c>)
   271e0:	6812      	ldr	r2, [r2, #0]
   271e2:	601a      	str	r2, [r3, #0]
   271e4:	4b53      	ldr	r3, [pc, #332]	; (27334 <am_hal_pwrctrl_low_power_init+0x160>)
   271e6:	68db      	ldr	r3, [r3, #12]
   271e8:	b2db      	uxtb	r3, r3
   271ea:	2b12      	cmp	r3, #18
   271ec:	d050      	beq.n	27290 <am_hal_pwrctrl_low_power_init+0xbc>
   271ee:	4b51      	ldr	r3, [pc, #324]	; (27334 <am_hal_pwrctrl_low_power_init+0x160>)
   271f0:	68da      	ldr	r2, [r3, #12]
   271f2:	b2d2      	uxtb	r2, r2
   271f4:	2a20      	cmp	r2, #32
   271f6:	d934      	bls.n	27262 <am_hal_pwrctrl_low_power_init+0x8e>
   271f8:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   271fc:	2002      	movs	r0, #2
   271fe:	f360 4213 	bfi	r2, r0, #16, #4
   27202:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
   27206:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   2720a:	2203      	movs	r2, #3
   2720c:	f362 5117 	bfi	r1, r2, #20, #4
   27210:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   27214:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   27218:	2405      	movs	r4, #5
   2721a:	f364 0103 	bfi	r1, r4, #0, #4
   2721e:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   27222:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   27226:	f360 1107 	bfi	r1, r0, #4, #4
   2722a:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2722e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   27232:	2006      	movs	r0, #6
   27234:	f360 210b 	bfi	r1, r0, #8, #4
   27238:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2723c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   27240:	2001      	movs	r0, #1
   27242:	f360 310f 	bfi	r1, r0, #12, #4
   27246:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2724a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2724e:	f362 61de 	bfi	r1, r2, #27, #4
   27252:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   27256:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   2725a:	f362 0103 	bfi	r1, r2, #0, #4
   2725e:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   27262:	4a34      	ldr	r2, [pc, #208]	; (27334 <am_hal_pwrctrl_low_power_init+0x160>)
   27264:	68d3      	ldr	r3, [r2, #12]
   27266:	b2db      	uxtb	r3, r3
   27268:	2b11      	cmp	r3, #17
   2726a:	d80a      	bhi.n	27282 <am_hal_pwrctrl_low_power_init+0xae>
   2726c:	4c32      	ldr	r4, [pc, #200]	; (27338 <am_hal_pwrctrl_low_power_init+0x164>)
   2726e:	2100      	movs	r1, #0
   27270:	200c      	movs	r0, #12
   27272:	f7ff fa63 	bl	2673c <am_hal_cachectrl_control>
   27276:	69a3      	ldr	r3, [r4, #24]
   27278:	05db      	lsls	r3, r3, #23
   2727a:	d527      	bpl.n	272cc <am_hal_pwrctrl_low_power_init+0xf8>
   2727c:	2000      	movs	r0, #0
   2727e:	b005      	add	sp, #20
   27280:	bd30      	pop	{r4, r5, pc}
   27282:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
   27286:	f36f 6318 	bfc	r3, #24, #1
   2728a:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
   2728e:	e7ed      	b.n	2726c <am_hal_pwrctrl_low_power_init+0x98>
   27290:	4c29      	ldr	r4, [pc, #164]	; (27338 <am_hal_pwrctrl_low_power_init+0x164>)
   27292:	6863      	ldr	r3, [r4, #4]
   27294:	07d8      	lsls	r0, r3, #31
   27296:	d5aa      	bpl.n	271ee <am_hal_pwrctrl_low_power_init+0x1a>
   27298:	f7ff fea4 	bl	26fe4 <am_hal_interrupt_master_disable>
   2729c:	9003      	str	r0, [sp, #12]
   2729e:	68a3      	ldr	r3, [r4, #8]
   272a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   272a4:	60a3      	str	r3, [r4, #8]
   272a6:	9803      	ldr	r0, [sp, #12]
   272a8:	f7ff fea0 	bl	26fec <am_hal_interrupt_master_set>
   272ac:	20a0      	movs	r0, #160	; 0xa0
   272ae:	f7ff fcc1 	bl	26c34 <am_hal_flash_delay>
   272b2:	69a3      	ldr	r3, [r4, #24]
   272b4:	0619      	lsls	r1, r3, #24
   272b6:	d403      	bmi.n	272c0 <am_hal_pwrctrl_low_power_init+0xec>
   272b8:	20a0      	movs	r0, #160	; 0xa0
   272ba:	f7ff fcbb 	bl	26c34 <am_hal_flash_delay>
   272be:	69a3      	ldr	r3, [r4, #24]
   272c0:	4b1d      	ldr	r3, [pc, #116]	; (27338 <am_hal_pwrctrl_low_power_init+0x164>)
   272c2:	699b      	ldr	r3, [r3, #24]
   272c4:	061a      	lsls	r2, r3, #24
   272c6:	d492      	bmi.n	271ee <am_hal_pwrctrl_low_power_init+0x1a>
   272c8:	2001      	movs	r0, #1
   272ca:	e7d8      	b.n	2727e <am_hal_pwrctrl_low_power_init+0xaa>
   272cc:	4d19      	ldr	r5, [pc, #100]	; (27334 <am_hal_pwrctrl_low_power_init+0x160>)
   272ce:	491b      	ldr	r1, [pc, #108]	; (2733c <am_hal_pwrctrl_low_power_init+0x168>)
   272d0:	7e2a      	ldrb	r2, [r5, #24]
   272d2:	2001      	movs	r0, #1
   272d4:	4302      	orrs	r2, r0
   272d6:	2307      	movs	r3, #7
   272d8:	762a      	strb	r2, [r5, #24]
   272da:	9000      	str	r0, [sp, #0]
   272dc:	461a      	mov	r2, r3
   272de:	f242 7010 	movw	r0, #10000	; 0x2710
   272e2:	f7ff fcb7 	bl	26c54 <am_hal_flash_delay_status_check>
   272e6:	b9f8      	cbnz	r0, 27328 <am_hal_pwrctrl_low_power_init+0x154>
   272e8:	6823      	ldr	r3, [r4, #0]
   272ea:	f043 0301 	orr.w	r3, r3, #1
   272ee:	6023      	str	r3, [r4, #0]
   272f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   272f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   272f6:	6263      	str	r3, [r4, #36]	; 0x24
   272f8:	68eb      	ldr	r3, [r5, #12]
   272fa:	b2db      	uxtb	r3, r3
   272fc:	2b11      	cmp	r3, #17
   272fe:	d1bd      	bne.n	2727c <am_hal_pwrctrl_low_power_init+0xa8>
   27300:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   27304:	f360 5356 	bfi	r3, r0, #21, #2
   27308:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   2730c:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   27310:	220f      	movs	r2, #15
   27312:	f362 138b 	bfi	r3, r2, #6, #6
   27316:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   2731a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   2731e:	f362 0305 	bfi	r3, r2, #0, #6
   27322:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   27326:	e7aa      	b.n	2727e <am_hal_pwrctrl_low_power_init+0xaa>
   27328:	2004      	movs	r0, #4
   2732a:	e7a8      	b.n	2727e <am_hal_pwrctrl_low_power_init+0xaa>
   2732c:	10008818 	.word	0x10008818
   27330:	4ffff000 	.word	0x4ffff000
   27334:	40020000 	.word	0x40020000
   27338:	40021000 	.word	0x40021000
   2733c:	40020018 	.word	0x40020018

00027340 <am_hal_pwrctrl_blebuck_trim>:
   27340:	b510      	push	{r4, lr}
   27342:	4c12      	ldr	r4, [pc, #72]	; (2738c <am_hal_pwrctrl_blebuck_trim+0x4c>)
   27344:	68e3      	ldr	r3, [r4, #12]
   27346:	b2db      	uxtb	r3, r3
   27348:	2b11      	cmp	r3, #17
   2734a:	b082      	sub	sp, #8
   2734c:	d801      	bhi.n	27352 <am_hal_pwrctrl_blebuck_trim+0x12>
   2734e:	b002      	add	sp, #8
   27350:	bd10      	pop	{r4, pc}
   27352:	f7ff fe47 	bl	26fe4 <am_hal_interrupt_master_disable>
   27356:	9001      	str	r0, [sp, #4]
   27358:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   2735c:	2219      	movs	r2, #25
   2735e:	f362 138b 	bfi	r3, r2, #6, #6
   27362:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   27366:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
   2736a:	230c      	movs	r3, #12
   2736c:	f363 0205 	bfi	r2, r3, #0, #6
   27370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   27374:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
   27378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   2737a:	f36f 5296 	bfc	r2, #22, #1
   2737e:	63da      	str	r2, [r3, #60]	; 0x3c
   27380:	9801      	ldr	r0, [sp, #4]
   27382:	b002      	add	sp, #8
   27384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27388:	f7ff be30 	b.w	26fec <am_hal_interrupt_master_set>
   2738c:	40020000 	.word	0x40020000

00027390 <am_hal_queue_init>:
   27390:	b410      	push	{r4}
   27392:	2400      	movs	r4, #0
   27394:	e9c0 4400 	strd	r4, r4, [r0]
   27398:	6084      	str	r4, [r0, #8]
   2739a:	e9c0 2104 	strd	r2, r1, [r0, #16]
   2739e:	f85d 4b04 	ldr.w	r4, [sp], #4
   273a2:	60c3      	str	r3, [r0, #12]
   273a4:	4770      	bx	lr
   273a6:	bf00      	nop

000273a8 <am_hal_queue_item_add>:
   273a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   273aa:	6906      	ldr	r6, [r0, #16]
   273ac:	b083      	sub	sp, #12
   273ae:	4604      	mov	r4, r0
   273b0:	fb06 f602 	mul.w	r6, r6, r2
   273b4:	460d      	mov	r5, r1
   273b6:	f7ff fe15 	bl	26fe4 <am_hal_interrupt_master_disable>
   273ba:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   273be:	1a53      	subs	r3, r2, r1
   273c0:	42b3      	cmp	r3, r6
   273c2:	9001      	str	r0, [sp, #4]
   273c4:	d31c      	bcc.n	27400 <am_hal_queue_item_add+0x58>
   273c6:	b196      	cbz	r6, 273ee <am_hal_queue_item_add+0x46>
   273c8:	6823      	ldr	r3, [r4, #0]
   273ca:	b305      	cbz	r5, 2740e <am_hal_queue_item_add+0x66>
   273cc:	1e68      	subs	r0, r5, #1
   273ce:	1987      	adds	r7, r0, r6
   273d0:	6962      	ldr	r2, [r4, #20]
   273d2:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   273d6:	54d1      	strb	r1, [r2, r3]
   273d8:	6823      	ldr	r3, [r4, #0]
   273da:	68e5      	ldr	r5, [r4, #12]
   273dc:	1c59      	adds	r1, r3, #1
   273de:	4287      	cmp	r7, r0
   273e0:	fbb1 f3f5 	udiv	r3, r1, r5
   273e4:	fb05 1313 	mls	r3, r5, r3, r1
   273e8:	6023      	str	r3, [r4, #0]
   273ea:	d1f1      	bne.n	273d0 <am_hal_queue_item_add+0x28>
   273ec:	68a1      	ldr	r1, [r4, #8]
   273ee:	9801      	ldr	r0, [sp, #4]
   273f0:	440e      	add	r6, r1
   273f2:	60a6      	str	r6, [r4, #8]
   273f4:	f7ff fdfa 	bl	26fec <am_hal_interrupt_master_set>
   273f8:	2401      	movs	r4, #1
   273fa:	4620      	mov	r0, r4
   273fc:	b003      	add	sp, #12
   273fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27400:	9801      	ldr	r0, [sp, #4]
   27402:	f7ff fdf3 	bl	26fec <am_hal_interrupt_master_set>
   27406:	2400      	movs	r4, #0
   27408:	4620      	mov	r0, r4
   2740a:	b003      	add	sp, #12
   2740c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2740e:	4628      	mov	r0, r5
   27410:	3001      	adds	r0, #1
   27412:	3301      	adds	r3, #1
   27414:	4286      	cmp	r6, r0
   27416:	fbb3 f5f2 	udiv	r5, r3, r2
   2741a:	fb02 3315 	mls	r3, r2, r5, r3
   2741e:	d1f7      	bne.n	27410 <am_hal_queue_item_add+0x68>
   27420:	6023      	str	r3, [r4, #0]
   27422:	e7e4      	b.n	273ee <am_hal_queue_item_add+0x46>

00027424 <am_hal_queue_item_get>:
   27424:	b5f0      	push	{r4, r5, r6, r7, lr}
   27426:	6906      	ldr	r6, [r0, #16]
   27428:	4604      	mov	r4, r0
   2742a:	b083      	sub	sp, #12
   2742c:	fb06 f602 	mul.w	r6, r6, r2
   27430:	460d      	mov	r5, r1
   27432:	f7ff fdd7 	bl	26fe4 <am_hal_interrupt_master_disable>
   27436:	68a2      	ldr	r2, [r4, #8]
   27438:	9001      	str	r0, [sp, #4]
   2743a:	42b2      	cmp	r2, r6
   2743c:	d31c      	bcc.n	27478 <am_hal_queue_item_get+0x54>
   2743e:	b196      	cbz	r6, 27466 <am_hal_queue_item_get+0x42>
   27440:	6863      	ldr	r3, [r4, #4]
   27442:	b305      	cbz	r5, 27486 <am_hal_queue_item_get+0x62>
   27444:	1e68      	subs	r0, r5, #1
   27446:	1987      	adds	r7, r0, r6
   27448:	6962      	ldr	r2, [r4, #20]
   2744a:	5cd3      	ldrb	r3, [r2, r3]
   2744c:	f800 3f01 	strb.w	r3, [r0, #1]!
   27450:	6863      	ldr	r3, [r4, #4]
   27452:	68e5      	ldr	r5, [r4, #12]
   27454:	1c59      	adds	r1, r3, #1
   27456:	4287      	cmp	r7, r0
   27458:	fbb1 f3f5 	udiv	r3, r1, r5
   2745c:	fb05 1313 	mls	r3, r5, r3, r1
   27460:	6063      	str	r3, [r4, #4]
   27462:	d1f1      	bne.n	27448 <am_hal_queue_item_get+0x24>
   27464:	68a2      	ldr	r2, [r4, #8]
   27466:	9801      	ldr	r0, [sp, #4]
   27468:	1b92      	subs	r2, r2, r6
   2746a:	60a2      	str	r2, [r4, #8]
   2746c:	f7ff fdbe 	bl	26fec <am_hal_interrupt_master_set>
   27470:	2401      	movs	r4, #1
   27472:	4620      	mov	r0, r4
   27474:	b003      	add	sp, #12
   27476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27478:	9801      	ldr	r0, [sp, #4]
   2747a:	f7ff fdb7 	bl	26fec <am_hal_interrupt_master_set>
   2747e:	2400      	movs	r4, #0
   27480:	4620      	mov	r0, r4
   27482:	b003      	add	sp, #12
   27484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27486:	68e1      	ldr	r1, [r4, #12]
   27488:	4628      	mov	r0, r5
   2748a:	3001      	adds	r0, #1
   2748c:	3301      	adds	r3, #1
   2748e:	42b0      	cmp	r0, r6
   27490:	fbb3 f5f1 	udiv	r5, r3, r1
   27494:	fb01 3315 	mls	r3, r1, r5, r3
   27498:	d1f7      	bne.n	2748a <am_hal_queue_item_get+0x66>
   2749a:	6063      	str	r3, [r4, #4]
   2749c:	e7e3      	b.n	27466 <am_hal_queue_item_get+0x42>
   2749e:	bf00      	nop

000274a0 <am_hal_stimer_config>:
   274a0:	4a03      	ldr	r2, [pc, #12]	; (274b0 <am_hal_stimer_config+0x10>)
   274a2:	4603      	mov	r3, r0
   274a4:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   274a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
   274ac:	4770      	bx	lr
   274ae:	bf00      	nop
   274b0:	40008000 	.word	0x40008000

000274b4 <am_hal_stimer_counter_get>:
   274b4:	4b01      	ldr	r3, [pc, #4]	; (274bc <am_hal_stimer_counter_get+0x8>)
   274b6:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   274ba:	4770      	bx	lr
   274bc:	40008000 	.word	0x40008000

000274c0 <am_hal_stimer_compare_delta_set>:
   274c0:	2807      	cmp	r0, #7
   274c2:	d900      	bls.n	274c6 <am_hal_stimer_compare_delta_set+0x6>
   274c4:	4770      	bx	lr
   274c6:	b570      	push	{r4, r5, r6, lr}
   274c8:	b082      	sub	sp, #8
   274ca:	4605      	mov	r5, r0
   274cc:	460c      	mov	r4, r1
   274ce:	f7ff fd89 	bl	26fe4 <am_hal_interrupt_master_disable>
   274d2:	4924      	ldr	r1, [pc, #144]	; (27564 <am_hal_stimer_compare_delta_set+0xa4>)
   274d4:	9001      	str	r0, [sp, #4]
   274d6:	4b24      	ldr	r3, [pc, #144]	; (27568 <am_hal_stimer_compare_delta_set+0xa8>)
   274d8:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   274dc:	f8d1 6140 	ldr.w	r6, [r1, #320]	; 0x140
   274e0:	f44f 7280 	mov.w	r2, #256	; 0x100
   274e4:	40aa      	lsls	r2, r5
   274e6:	442b      	add	r3, r5
   274e8:	ea26 0602 	bic.w	r6, r6, r2
   274ec:	009b      	lsls	r3, r3, #2
   274ee:	f8c1 6140 	str.w	r6, [r1, #320]	; 0x140
   274f2:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   274f6:	601c      	str	r4, [r3, #0]
   274f8:	681d      	ldr	r5, [r3, #0]
   274fa:	4421      	add	r1, r4
   274fc:	1a6e      	subs	r6, r5, r1
   274fe:	2e00      	cmp	r6, #0
   27500:	db03      	blt.n	2750a <am_hal_stimer_compare_delta_set+0x4a>
   27502:	310a      	adds	r1, #10
   27504:	1a69      	subs	r1, r5, r1
   27506:	2900      	cmp	r1, #0
   27508:	dd1e      	ble.n	27548 <am_hal_stimer_compare_delta_set+0x88>
   2750a:	4916      	ldr	r1, [pc, #88]	; (27564 <am_hal_stimer_compare_delta_set+0xa4>)
   2750c:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   27510:	601c      	str	r4, [r3, #0]
   27512:	681d      	ldr	r5, [r3, #0]
   27514:	4421      	add	r1, r4
   27516:	1a6e      	subs	r6, r5, r1
   27518:	2e00      	cmp	r6, #0
   2751a:	db03      	blt.n	27524 <am_hal_stimer_compare_delta_set+0x64>
   2751c:	310a      	adds	r1, #10
   2751e:	1a69      	subs	r1, r5, r1
   27520:	2900      	cmp	r1, #0
   27522:	dd11      	ble.n	27548 <am_hal_stimer_compare_delta_set+0x88>
   27524:	490f      	ldr	r1, [pc, #60]	; (27564 <am_hal_stimer_compare_delta_set+0xa4>)
   27526:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2752a:	601c      	str	r4, [r3, #0]
   2752c:	681d      	ldr	r5, [r3, #0]
   2752e:	4421      	add	r1, r4
   27530:	1a6e      	subs	r6, r5, r1
   27532:	2e00      	cmp	r6, #0
   27534:	db03      	blt.n	2753e <am_hal_stimer_compare_delta_set+0x7e>
   27536:	310a      	adds	r1, #10
   27538:	1a69      	subs	r1, r5, r1
   2753a:	2900      	cmp	r1, #0
   2753c:	dd04      	ble.n	27548 <am_hal_stimer_compare_delta_set+0x88>
   2753e:	4909      	ldr	r1, [pc, #36]	; (27564 <am_hal_stimer_compare_delta_set+0xa4>)
   27540:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   27544:	601c      	str	r4, [r3, #0]
   27546:	681b      	ldr	r3, [r3, #0]
   27548:	4b06      	ldr	r3, [pc, #24]	; (27564 <am_hal_stimer_compare_delta_set+0xa4>)
   2754a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   2754e:	4002      	ands	r2, r0
   27550:	430a      	orrs	r2, r1
   27552:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   27556:	9801      	ldr	r0, [sp, #4]
   27558:	b002      	add	sp, #8
   2755a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2755e:	f7ff bd45 	b.w	26fec <am_hal_interrupt_master_set>
   27562:	bf00      	nop
   27564:	40008000 	.word	0x40008000
   27568:	10002054 	.word	0x10002054

0002756c <am_hal_stimer_int_enable>:
   2756c:	4a03      	ldr	r2, [pc, #12]	; (2757c <am_hal_stimer_int_enable+0x10>)
   2756e:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   27572:	4318      	orrs	r0, r3
   27574:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   27578:	4770      	bx	lr
   2757a:	bf00      	nop
   2757c:	40008000 	.word	0x40008000

00027580 <am_hal_stimer_int_clear>:
   27580:	4b01      	ldr	r3, [pc, #4]	; (27588 <am_hal_stimer_int_clear+0x8>)
   27582:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   27586:	4770      	bx	lr
   27588:	40008000 	.word	0x40008000

0002758c <am_hal_stimer_int_status_get>:
   2758c:	4a04      	ldr	r2, [pc, #16]	; (275a0 <am_hal_stimer_int_status_get+0x14>)
   2758e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   27592:	b110      	cbz	r0, 2759a <am_hal_stimer_int_status_get+0xe>
   27594:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   27598:	4013      	ands	r3, r2
   2759a:	4618      	mov	r0, r3
   2759c:	4770      	bx	lr
   2759e:	bf00      	nop
   275a0:	40008000 	.word	0x40008000

000275a4 <am_hal_sysctrl_sleep>:
   275a4:	b510      	push	{r4, lr}
   275a6:	b082      	sub	sp, #8
   275a8:	4604      	mov	r4, r0
   275aa:	f7ff fd1b 	bl	26fe4 <am_hal_interrupt_master_disable>
   275ae:	9001      	str	r0, [sp, #4]
   275b0:	b124      	cbz	r4, 275bc <am_hal_sysctrl_sleep+0x18>
   275b2:	4b12      	ldr	r3, [pc, #72]	; (275fc <am_hal_sysctrl_sleep+0x58>)
   275b4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   275b8:	07db      	lsls	r3, r3, #31
   275ba:	d513      	bpl.n	275e4 <am_hal_sysctrl_sleep+0x40>
   275bc:	4a10      	ldr	r2, [pc, #64]	; (27600 <am_hal_sysctrl_sleep+0x5c>)
   275be:	6913      	ldr	r3, [r2, #16]
   275c0:	f023 0304 	bic.w	r3, r3, #4
   275c4:	6113      	str	r3, [r2, #16]
   275c6:	f3bf 8f4f 	dsb	sy
   275ca:	4a0e      	ldr	r2, [pc, #56]	; (27604 <am_hal_sysctrl_sleep+0x60>)
   275cc:	4b0e      	ldr	r3, [pc, #56]	; (27608 <am_hal_sysctrl_sleep+0x64>)
   275ce:	6812      	ldr	r2, [r2, #0]
   275d0:	601a      	str	r2, [r3, #0]
   275d2:	bf30      	wfi
   275d4:	f3bf 8f6f 	isb	sy
   275d8:	9801      	ldr	r0, [sp, #4]
   275da:	b002      	add	sp, #8
   275dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   275e0:	f7ff bd04 	b.w	26fec <am_hal_interrupt_master_set>
   275e4:	4b09      	ldr	r3, [pc, #36]	; (2760c <am_hal_sysctrl_sleep+0x68>)
   275e6:	681a      	ldr	r2, [r3, #0]
   275e8:	b912      	cbnz	r2, 275f0 <am_hal_sysctrl_sleep+0x4c>
   275ea:	4a09      	ldr	r2, [pc, #36]	; (27610 <am_hal_sysctrl_sleep+0x6c>)
   275ec:	6812      	ldr	r2, [r2, #0]
   275ee:	601a      	str	r2, [r3, #0]
   275f0:	4a03      	ldr	r2, [pc, #12]	; (27600 <am_hal_sysctrl_sleep+0x5c>)
   275f2:	6913      	ldr	r3, [r2, #16]
   275f4:	f043 0304 	orr.w	r3, r3, #4
   275f8:	6113      	str	r3, [r2, #16]
   275fa:	e7e4      	b.n	275c6 <am_hal_sysctrl_sleep+0x22>
   275fc:	40020000 	.word	0x40020000
   27600:	e000ed00 	.word	0xe000ed00
   27604:	5fff0000 	.word	0x5fff0000
   27608:	1000881c 	.word	0x1000881c
   2760c:	10008818 	.word	0x10008818
   27610:	4ffff000 	.word	0x4ffff000

00027614 <am_hal_sysctrl_fpu_enable>:
   27614:	4b02      	ldr	r3, [pc, #8]	; (27620 <am_hal_sysctrl_fpu_enable+0xc>)
   27616:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   2761a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   2761e:	4770      	bx	lr
   27620:	e000ed00 	.word	0xe000ed00

00027624 <am_hal_sysctrl_fpu_stacking_enable>:
   27624:	b510      	push	{r4, lr}
   27626:	b082      	sub	sp, #8
   27628:	4604      	mov	r4, r0
   2762a:	f7ff fcdb 	bl	26fe4 <am_hal_interrupt_master_disable>
   2762e:	4909      	ldr	r1, [pc, #36]	; (27654 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   27630:	9001      	str	r0, [sp, #4]
   27632:	684a      	ldr	r2, [r1, #4]
   27634:	2c00      	cmp	r4, #0
   27636:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
   2763a:	bf14      	ite	ne
   2763c:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
   27640:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   27644:	4313      	orrs	r3, r2
   27646:	604b      	str	r3, [r1, #4]
   27648:	9801      	ldr	r0, [sp, #4]
   2764a:	b002      	add	sp, #8
   2764c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27650:	f7ff bccc 	b.w	26fec <am_hal_interrupt_master_set>
   27654:	e000ef30 	.word	0xe000ef30

00027658 <am_bsp_uart_string_print>:
   27658:	b510      	push	{r4, lr}
   2765a:	b086      	sub	sp, #24
   2765c:	7804      	ldrb	r4, [r0, #0]
   2765e:	2300      	movs	r3, #0
   27660:	9300      	str	r3, [sp, #0]
   27662:	b13c      	cbz	r4, 27674 <am_bsp_uart_string_print+0x1c>
   27664:	4603      	mov	r3, r0
   27666:	f1c0 0201 	rsb	r2, r0, #1
   2766a:	18d4      	adds	r4, r2, r3
   2766c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   27670:	2900      	cmp	r1, #0
   27672:	d1fa      	bne.n	2766a <am_bsp_uart_string_print+0x12>
   27674:	4b09      	ldr	r3, [pc, #36]	; (2769c <am_bsp_uart_string_print+0x44>)
   27676:	9002      	str	r0, [sp, #8]
   27678:	2200      	movs	r2, #0
   2767a:	6818      	ldr	r0, [r3, #0]
   2767c:	9403      	str	r4, [sp, #12]
   2767e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27682:	a901      	add	r1, sp, #4
   27684:	9304      	str	r3, [sp, #16]
   27686:	9201      	str	r2, [sp, #4]
   27688:	f8cd d014 	str.w	sp, [sp, #20]
   2768c:	f000 fa5a 	bl	27b44 <am_hal_uart_transfer>
   27690:	9b00      	ldr	r3, [sp, #0]
   27692:	42a3      	cmp	r3, r4
   27694:	d000      	beq.n	27698 <am_bsp_uart_string_print+0x40>
   27696:	e7fe      	b.n	27696 <am_bsp_uart_string_print+0x3e>
   27698:	b006      	add	sp, #24
   2769a:	bd10      	pop	{r4, pc}
   2769c:	10008820 	.word	0x10008820

000276a0 <am_bsp_low_power_init>:
   276a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   276a2:	f7ff fd97 	bl	271d4 <am_hal_pwrctrl_low_power_init>
   276a6:	f000 f8a5 	bl	277f4 <am_hal_rtc_osc_disable>
   276aa:	2100      	movs	r1, #0
   276ac:	2003      	movs	r0, #3
   276ae:	f7ff f9bf 	bl	26a30 <am_hal_clkgen_control>
   276b2:	f000 f84b 	bl	2774c <am_hal_itm_disable>
   276b6:	2000      	movs	r0, #0
   276b8:	f7f9 f92a 	bl	20910 <am_util_stdio_printf_init>
   276bc:	4b0a      	ldr	r3, [pc, #40]	; (276e8 <am_bsp_low_power_init+0x48>)
   276be:	4f0b      	ldr	r7, [pc, #44]	; (276ec <am_bsp_low_power_init+0x4c>)
   276c0:	681e      	ldr	r6, [r3, #0]
   276c2:	2400      	movs	r4, #0
   276c4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   276c8:	4631      	mov	r1, r6
   276ca:	4628      	mov	r0, r5
   276cc:	f7ff fb06 	bl	26cdc <am_hal_gpio_pinconfig>
   276d0:	2103      	movs	r1, #3
   276d2:	4628      	mov	r0, r5
   276d4:	f7ff fc42 	bl	26f5c <am_hal_gpio_state_write>
   276d8:	3401      	adds	r4, #1
   276da:	4628      	mov	r0, r5
   276dc:	2100      	movs	r1, #0
   276de:	f7ff fc3d 	bl	26f5c <am_hal_gpio_state_write>
   276e2:	2c04      	cmp	r4, #4
   276e4:	d1ee      	bne.n	276c4 <am_bsp_low_power_init+0x24>
   276e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   276e8:	0002b878 	.word	0x0002b878
   276ec:	1000358c 	.word	0x1000358c

000276f0 <am_bsp_uart_printf_enable>:
   276f0:	b510      	push	{r4, lr}
   276f2:	4c10      	ldr	r4, [pc, #64]	; (27734 <am_bsp_uart_printf_enable+0x44>)
   276f4:	4b10      	ldr	r3, [pc, #64]	; (27738 <am_bsp_uart_printf_enable+0x48>)
   276f6:	4621      	mov	r1, r4
   276f8:	2202      	movs	r2, #2
   276fa:	2000      	movs	r0, #0
   276fc:	601a      	str	r2, [r3, #0]
   276fe:	f000 f883 	bl	27808 <am_hal_uart_initialize>
   27702:	2200      	movs	r2, #0
   27704:	4611      	mov	r1, r2
   27706:	6820      	ldr	r0, [r4, #0]
   27708:	f000 f8a6 	bl	27858 <am_hal_uart_power_control>
   2770c:	6820      	ldr	r0, [r4, #0]
   2770e:	490b      	ldr	r1, [pc, #44]	; (2773c <am_bsp_uart_printf_enable+0x4c>)
   27710:	f000 f91a 	bl	27948 <am_hal_uart_configure>
   27714:	4b0a      	ldr	r3, [pc, #40]	; (27740 <am_bsp_uart_printf_enable+0x50>)
   27716:	2030      	movs	r0, #48	; 0x30
   27718:	6819      	ldr	r1, [r3, #0]
   2771a:	f7ff fadf 	bl	26cdc <am_hal_gpio_pinconfig>
   2771e:	4b09      	ldr	r3, [pc, #36]	; (27744 <am_bsp_uart_printf_enable+0x54>)
   27720:	2031      	movs	r0, #49	; 0x31
   27722:	6819      	ldr	r1, [r3, #0]
   27724:	f7ff fada 	bl	26cdc <am_hal_gpio_pinconfig>
   27728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2772c:	4806      	ldr	r0, [pc, #24]	; (27748 <am_bsp_uart_printf_enable+0x58>)
   2772e:	f7f9 b8ef 	b.w	20910 <am_util_stdio_printf_init>
   27732:	bf00      	nop
   27734:	10008820 	.word	0x10008820
   27738:	100035ac 	.word	0x100035ac
   2773c:	0002bb14 	.word	0x0002bb14
   27740:	0002bb40 	.word	0x0002bb40
   27744:	0002bb3c 	.word	0x0002bb3c
   27748:	00027659 	.word	0x00027659

0002774c <am_hal_itm_disable>:
   2774c:	4b24      	ldr	r3, [pc, #144]	; (277e0 <am_hal_itm_disable+0x94>)
   2774e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   27752:	b510      	push	{r4, lr}
   27754:	b9b3      	cbnz	r3, 27784 <am_hal_itm_disable+0x38>
   27756:	4b23      	ldr	r3, [pc, #140]	; (277e4 <am_hal_itm_disable+0x98>)
   27758:	68da      	ldr	r2, [r3, #12]
   2775a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   2775e:	60da      	str	r2, [r3, #12]
   27760:	68da      	ldr	r2, [r3, #12]
   27762:	01d2      	lsls	r2, r2, #7
   27764:	d5fc      	bpl.n	27760 <am_hal_itm_disable+0x14>
   27766:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   2776a:	491f      	ldr	r1, [pc, #124]	; (277e8 <am_hal_itm_disable+0x9c>)
   2776c:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   27770:	4a1e      	ldr	r2, [pc, #120]	; (277ec <am_hal_itm_disable+0xa0>)
   27772:	200f      	movs	r0, #15
   27774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27778:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   2777c:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   27780:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   27784:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   27788:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
   2778c:	021b      	lsls	r3, r3, #8
   2778e:	d4fb      	bmi.n	27788 <am_hal_itm_disable+0x3c>
   27790:	f44f 7048 	mov.w	r0, #800	; 0x320
   27794:	f7ff fa4e 	bl	26c34 <am_hal_flash_delay>
   27798:	4b13      	ldr	r3, [pc, #76]	; (277e8 <am_hal_itm_disable+0x9c>)
   2779a:	4915      	ldr	r1, [pc, #84]	; (277f0 <am_hal_itm_disable+0xa4>)
   2779c:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
   277a0:	2064      	movs	r0, #100	; 0x64
   277a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   277a6:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   277aa:	f023 0301 	bic.w	r3, r3, #1
   277ae:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
   277b2:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   277b6:	420b      	tst	r3, r1
   277b8:	d1fb      	bne.n	277b2 <am_hal_itm_disable+0x66>
   277ba:	3801      	subs	r0, #1
   277bc:	d1f3      	bne.n	277a6 <am_hal_itm_disable+0x5a>
   277be:	4a09      	ldr	r2, [pc, #36]	; (277e4 <am_hal_itm_disable+0x98>)
   277c0:	68d3      	ldr	r3, [r2, #12]
   277c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   277c6:	60d3      	str	r3, [r2, #12]
   277c8:	68d3      	ldr	r3, [r2, #12]
   277ca:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   277ce:	d1fb      	bne.n	277c8 <am_hal_itm_disable+0x7c>
   277d0:	4a03      	ldr	r2, [pc, #12]	; (277e0 <am_hal_itm_disable+0x94>)
   277d2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   277d6:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
   277da:	2b00      	cmp	r3, #0
   277dc:	d1fb      	bne.n	277d6 <am_hal_itm_disable+0x8a>
   277de:	bd10      	pop	{r4, pc}
   277e0:	40020000 	.word	0x40020000
   277e4:	e000edf0 	.word	0xe000edf0
   277e8:	c5acce55 	.word	0xc5acce55
   277ec:	00150511 	.word	0x00150511
   277f0:	00800001 	.word	0x00800001

000277f4 <am_hal_rtc_osc_disable>:
   277f4:	4a03      	ldr	r2, [pc, #12]	; (27804 <am_hal_rtc_osc_disable+0x10>)
   277f6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   277fa:	f043 0310 	orr.w	r3, r3, #16
   277fe:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   27802:	4770      	bx	lr
   27804:	40004200 	.word	0x40004200

00027808 <am_hal_uart_initialize>:
   27808:	2801      	cmp	r0, #1
   2780a:	d819      	bhi.n	27840 <am_hal_uart_initialize+0x38>
   2780c:	b1e9      	cbz	r1, 2784a <am_hal_uart_initialize+0x42>
   2780e:	b4f0      	push	{r4, r5, r6, r7}
   27810:	2264      	movs	r2, #100	; 0x64
   27812:	4d0f      	ldr	r5, [pc, #60]	; (27850 <am_hal_uart_initialize+0x48>)
   27814:	fb02 f200 	mul.w	r2, r2, r0
   27818:	18ac      	adds	r4, r5, r2
   2781a:	78e3      	ldrb	r3, [r4, #3]
   2781c:	f3c3 0700 	ubfx	r7, r3, #0, #1
   27820:	f013 0301 	ands.w	r3, r3, #1
   27824:	d10e      	bne.n	27844 <am_hal_uart_initialize+0x3c>
   27826:	6260      	str	r0, [r4, #36]	; 0x24
   27828:	58ae      	ldr	r6, [r5, r2]
   2782a:	480a      	ldr	r0, [pc, #40]	; (27854 <am_hal_uart_initialize+0x4c>)
   2782c:	f006 467e 	and.w	r6, r6, #4261412864	; 0xfe000000
   27830:	4330      	orrs	r0, r6
   27832:	50a8      	str	r0, [r5, r2]
   27834:	7127      	strb	r7, [r4, #4]
   27836:	6623      	str	r3, [r4, #96]	; 0x60
   27838:	4618      	mov	r0, r3
   2783a:	600c      	str	r4, [r1, #0]
   2783c:	bcf0      	pop	{r4, r5, r6, r7}
   2783e:	4770      	bx	lr
   27840:	2005      	movs	r0, #5
   27842:	4770      	bx	lr
   27844:	2007      	movs	r0, #7
   27846:	bcf0      	pop	{r4, r5, r6, r7}
   27848:	4770      	bx	lr
   2784a:	2006      	movs	r0, #6
   2784c:	4770      	bx	lr
   2784e:	bf00      	nop
   27850:	100098e4 	.word	0x100098e4
   27854:	01ea9e06 	.word	0x01ea9e06

00027858 <am_hal_uart_power_control>:
   27858:	b5f0      	push	{r4, r5, r6, r7, lr}
   2785a:	4604      	mov	r4, r0
   2785c:	6800      	ldr	r0, [r0, #0]
   2785e:	4b39      	ldr	r3, [pc, #228]	; (27944 <am_hal_uart_power_control+0xec>)
   27860:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
   27864:	429e      	cmp	r6, r3
   27866:	b085      	sub	sp, #20
   27868:	d13f      	bne.n	278ea <am_hal_uart_power_control+0x92>
   2786a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2786c:	f105 0008 	add.w	r0, r5, #8
   27870:	b2c7      	uxtb	r7, r0
   27872:	b1a1      	cbz	r1, 2789e <am_hal_uart_power_control+0x46>
   27874:	3901      	subs	r1, #1
   27876:	2901      	cmp	r1, #1
   27878:	d80e      	bhi.n	27898 <am_hal_uart_power_control+0x40>
   2787a:	2a00      	cmp	r2, #0
   2787c:	d138      	bne.n	278f0 <am_hal_uart_power_control+0x98>
   2787e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   27882:	351c      	adds	r5, #28
   27884:	032d      	lsls	r5, r5, #12
   27886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2788a:	646b      	str	r3, [r5, #68]	; 0x44
   2788c:	4638      	mov	r0, r7
   2788e:	f7ff fc75 	bl	2717c <am_hal_pwrctrl_periph_disable>
   27892:	2000      	movs	r0, #0
   27894:	b005      	add	sp, #20
   27896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27898:	2006      	movs	r0, #6
   2789a:	b005      	add	sp, #20
   2789c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2789e:	2a00      	cmp	r2, #0
   278a0:	d047      	beq.n	27932 <am_hal_uart_power_control+0xda>
   278a2:	7923      	ldrb	r3, [r4, #4]
   278a4:	2b00      	cmp	r3, #0
   278a6:	d04b      	beq.n	27940 <am_hal_uart_power_control+0xe8>
   278a8:	4638      	mov	r0, r7
   278aa:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   278ae:	9101      	str	r1, [sp, #4]
   278b0:	351c      	adds	r5, #28
   278b2:	f7ff fc39 	bl	27128 <am_hal_pwrctrl_periph_enable>
   278b6:	f7ff fb95 	bl	26fe4 <am_hal_interrupt_master_disable>
   278ba:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
   278be:	032d      	lsls	r5, r5, #12
   278c0:	9002      	str	r0, [sp, #8]
   278c2:	6922      	ldr	r2, [r4, #16]
   278c4:	622b      	str	r3, [r5, #32]
   278c6:	6963      	ldr	r3, [r4, #20]
   278c8:	69a0      	ldr	r0, [r4, #24]
   278ca:	626e      	str	r6, [r5, #36]	; 0x24
   278cc:	62aa      	str	r2, [r5, #40]	; 0x28
   278ce:	69e2      	ldr	r2, [r4, #28]
   278d0:	62eb      	str	r3, [r5, #44]	; 0x2c
   278d2:	6a23      	ldr	r3, [r4, #32]
   278d4:	9901      	ldr	r1, [sp, #4]
   278d6:	6328      	str	r0, [r5, #48]	; 0x30
   278d8:	636a      	str	r2, [r5, #52]	; 0x34
   278da:	63ab      	str	r3, [r5, #56]	; 0x38
   278dc:	9802      	ldr	r0, [sp, #8]
   278de:	7121      	strb	r1, [r4, #4]
   278e0:	f7ff fb84 	bl	26fec <am_hal_interrupt_master_set>
   278e4:	9901      	ldr	r1, [sp, #4]
   278e6:	4608      	mov	r0, r1
   278e8:	e7d7      	b.n	2789a <am_hal_uart_power_control+0x42>
   278ea:	2002      	movs	r0, #2
   278ec:	b005      	add	sp, #20
   278ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   278f0:	f7ff fb78 	bl	26fe4 <am_hal_interrupt_master_disable>
   278f4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   278f8:	351c      	adds	r5, #28
   278fa:	032d      	lsls	r5, r5, #12
   278fc:	9003      	str	r0, [sp, #12]
   278fe:	6a2a      	ldr	r2, [r5, #32]
   27900:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27902:	60a2      	str	r2, [r4, #8]
   27904:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   27906:	60e3      	str	r3, [r4, #12]
   27908:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2790a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2790c:	6163      	str	r3, [r4, #20]
   2790e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27910:	6122      	str	r2, [r4, #16]
   27912:	6baa      	ldr	r2, [r5, #56]	; 0x38
   27914:	61e3      	str	r3, [r4, #28]
   27916:	2301      	movs	r3, #1
   27918:	7123      	strb	r3, [r4, #4]
   2791a:	9803      	ldr	r0, [sp, #12]
   2791c:	61a1      	str	r1, [r4, #24]
   2791e:	6222      	str	r2, [r4, #32]
   27920:	f7ff fb64 	bl	26fec <am_hal_interrupt_master_set>
   27924:	6823      	ldr	r3, [r4, #0]
   27926:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2792a:	42b3      	cmp	r3, r6
   2792c:	d1ae      	bne.n	2788c <am_hal_uart_power_control+0x34>
   2792e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   27930:	e7a5      	b.n	2787e <am_hal_uart_power_control+0x26>
   27932:	4638      	mov	r0, r7
   27934:	9201      	str	r2, [sp, #4]
   27936:	f7ff fbf7 	bl	27128 <am_hal_pwrctrl_periph_enable>
   2793a:	9a01      	ldr	r2, [sp, #4]
   2793c:	4610      	mov	r0, r2
   2793e:	e7ac      	b.n	2789a <am_hal_uart_power_control+0x42>
   27940:	2007      	movs	r0, #7
   27942:	e7aa      	b.n	2789a <am_hal_uart_power_control+0x42>
   27944:	01ea9e06 	.word	0x01ea9e06

00027948 <am_hal_uart_configure>:
   27948:	6803      	ldr	r3, [r0, #0]
   2794a:	4a78      	ldr	r2, [pc, #480]	; (27b2c <am_hal_uart_configure+0x1e4>)
   2794c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   27950:	4293      	cmp	r3, r2
   27952:	d001      	beq.n	27958 <am_hal_uart_configure+0x10>
   27954:	2002      	movs	r0, #2
   27956:	4770      	bx	lr
   27958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2795c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2795e:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
   27962:	341c      	adds	r4, #28
   27964:	0324      	lsls	r4, r4, #12
   27966:	2700      	movs	r7, #0
   27968:	b084      	sub	sp, #16
   2796a:	6327      	str	r7, [r4, #48]	; 0x30
   2796c:	460e      	mov	r6, r1
   2796e:	4605      	mov	r5, r0
   27970:	f7ff fb38 	bl	26fe4 <am_hal_interrupt_master_disable>
   27974:	9001      	str	r0, [sp, #4]
   27976:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   27978:	f043 0308 	orr.w	r3, r3, #8
   2797c:	8623      	strh	r3, [r4, #48]	; 0x30
   2797e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   27980:	2201      	movs	r2, #1
   27982:	f362 1306 	bfi	r3, r2, #4, #3
   27986:	8623      	strh	r3, [r4, #48]	; 0x30
   27988:	9801      	ldr	r0, [sp, #4]
   2798a:	f7ff fb2f 	bl	26fec <am_hal_interrupt_master_set>
   2798e:	f7ff fb29 	bl	26fe4 <am_hal_interrupt_master_disable>
   27992:	9002      	str	r0, [sp, #8]
   27994:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   27996:	f367 0300 	bfi	r3, r7, #0, #1
   2799a:	8623      	strh	r3, [r4, #48]	; 0x30
   2799c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   2799e:	f367 2349 	bfi	r3, r7, #9, #1
   279a2:	8623      	strh	r3, [r4, #48]	; 0x30
   279a4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   279a6:	f367 2308 	bfi	r3, r7, #8, #1
   279aa:	8623      	strh	r3, [r4, #48]	; 0x30
   279ac:	9802      	ldr	r0, [sp, #8]
   279ae:	f7ff fb1d 	bl	26fec <am_hal_interrupt_master_set>
   279b2:	4b5f      	ldr	r3, [pc, #380]	; (27b30 <am_hal_uart_configure+0x1e8>)
   279b4:	6832      	ldr	r2, [r6, #0]
   279b6:	68db      	ldr	r3, [r3, #12]
   279b8:	b2db      	uxtb	r3, r3
   279ba:	2b12      	cmp	r3, #18
   279bc:	d076      	beq.n	27aac <am_hal_uart_configure+0x164>
   279be:	4b5c      	ldr	r3, [pc, #368]	; (27b30 <am_hal_uart_configure+0x1e8>)
   279c0:	68db      	ldr	r3, [r3, #12]
   279c2:	b2db      	uxtb	r3, r3
   279c4:	2b20      	cmp	r3, #32
   279c6:	d902      	bls.n	279ce <am_hal_uart_configure+0x86>
   279c8:	4b5a      	ldr	r3, [pc, #360]	; (27b34 <am_hal_uart_configure+0x1ec>)
   279ca:	429a      	cmp	r2, r3
   279cc:	d871      	bhi.n	27ab2 <am_hal_uart_configure+0x16a>
   279ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
   279d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
   279d4:	3b01      	subs	r3, #1
   279d6:	b2db      	uxtb	r3, r3
   279d8:	2b03      	cmp	r3, #3
   279da:	d86c      	bhi.n	27ab6 <am_hal_uart_configure+0x16e>
   279dc:	4956      	ldr	r1, [pc, #344]	; (27b38 <am_hal_uart_configure+0x1f0>)
   279de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   279e2:	0112      	lsls	r2, r2, #4
   279e4:	4291      	cmp	r1, r2
   279e6:	ea4f 1381 	mov.w	r3, r1, lsl #6
   279ea:	fbb1 f0f2 	udiv	r0, r1, r2
   279ee:	fbb3 f3f2 	udiv	r3, r3, r2
   279f2:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
   279f6:	d364      	bcc.n	27ac2 <am_hal_uart_configure+0x17a>
   279f8:	089a      	lsrs	r2, r3, #2
   279fa:	6260      	str	r0, [r4, #36]	; 0x24
   279fc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
   27a00:	6260      	str	r0, [r4, #36]	; 0x24
   27a02:	fbb1 f1f2 	udiv	r1, r1, r2
   27a06:	62a3      	str	r3, [r4, #40]	; 0x28
   27a08:	6629      	str	r1, [r5, #96]	; 0x60
   27a0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   27a0c:	f36f 338e 	bfc	r3, #14, #1
   27a10:	8623      	strh	r3, [r4, #48]	; 0x30
   27a12:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   27a14:	f36f 33cf 	bfc	r3, #15, #1
   27a18:	8623      	strh	r3, [r4, #48]	; 0x30
   27a1a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   27a1e:	6873      	ldr	r3, [r6, #4]
   27a20:	6b22      	ldr	r2, [r4, #48]	; 0x30
   27a22:	430b      	orrs	r3, r1
   27a24:	6931      	ldr	r1, [r6, #16]
   27a26:	4303      	orrs	r3, r0
   27a28:	430a      	orrs	r2, r1
   27a2a:	f043 0310 	orr.w	r3, r3, #16
   27a2e:	6971      	ldr	r1, [r6, #20]
   27a30:	6322      	str	r2, [r4, #48]	; 0x30
   27a32:	6361      	str	r1, [r4, #52]	; 0x34
   27a34:	62e3      	str	r3, [r4, #44]	; 0x2c
   27a36:	f7ff fad5 	bl	26fe4 <am_hal_interrupt_master_disable>
   27a3a:	9003      	str	r0, [sp, #12]
   27a3c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   27a3e:	f043 0301 	orr.w	r3, r3, #1
   27a42:	8623      	strh	r3, [r4, #48]	; 0x30
   27a44:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   27a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   27a4a:	8623      	strh	r3, [r4, #48]	; 0x30
   27a4c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   27a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   27a52:	8623      	strh	r3, [r4, #48]	; 0x30
   27a54:	9803      	ldr	r0, [sp, #12]
   27a56:	f7ff fac9 	bl	26fec <am_hal_interrupt_master_set>
   27a5a:	682a      	ldr	r2, [r5, #0]
   27a5c:	4b33      	ldr	r3, [pc, #204]	; (27b2c <am_hal_uart_configure+0x1e4>)
   27a5e:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
   27a62:	4598      	cmp	r8, r3
   27a64:	d11e      	bne.n	27aa4 <am_hal_uart_configure+0x15c>
   27a66:	69b1      	ldr	r1, [r6, #24]
   27a68:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
   27a6c:	b109      	cbz	r1, 27a72 <am_hal_uart_configure+0x12a>
   27a6e:	69f3      	ldr	r3, [r6, #28]
   27a70:	bb5b      	cbnz	r3, 27aca <am_hal_uart_configure+0x182>
   27a72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27a74:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   27a78:	331c      	adds	r3, #28
   27a7a:	031b      	lsls	r3, r3, #12
   27a7c:	2100      	movs	r1, #0
   27a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   27a80:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   27a84:	f022 0220 	bic.w	r2, r2, #32
   27a88:	639a      	str	r2, [r3, #56]	; 0x38
   27a8a:	b10c      	cbz	r4, 27a90 <am_hal_uart_configure+0x148>
   27a8c:	2f00      	cmp	r7, #0
   27a8e:	d132      	bne.n	27af6 <am_hal_uart_configure+0x1ae>
   27a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   27a92:	2000      	movs	r0, #0
   27a94:	f022 0250 	bic.w	r2, r2, #80	; 0x50
   27a98:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
   27a9c:	639a      	str	r2, [r3, #56]	; 0x38
   27a9e:	b004      	add	sp, #16
   27aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27aa4:	2000      	movs	r0, #0
   27aa6:	b004      	add	sp, #16
   27aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27aac:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
   27ab0:	d985      	bls.n	279be <am_hal_uart_configure+0x76>
   27ab2:	4822      	ldr	r0, [pc, #136]	; (27b3c <am_hal_uart_configure+0x1f4>)
   27ab4:	e7f3      	b.n	27a9e <am_hal_uart_configure+0x156>
   27ab6:	4822      	ldr	r0, [pc, #136]	; (27b40 <am_hal_uart_configure+0x1f8>)
   27ab8:	2300      	movs	r3, #0
   27aba:	662b      	str	r3, [r5, #96]	; 0x60
   27abc:	b004      	add	sp, #16
   27abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27ac2:	2300      	movs	r3, #0
   27ac4:	481d      	ldr	r0, [pc, #116]	; (27b3c <am_hal_uart_configure+0x1f4>)
   27ac6:	662b      	str	r3, [r5, #96]	; 0x60
   27ac8:	e7e9      	b.n	27a9e <am_hal_uart_configure+0x156>
   27aca:	2201      	movs	r2, #1
   27acc:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
   27ad0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   27ad4:	f7ff fc5c 	bl	27390 <am_hal_queue_init>
   27ad8:	682b      	ldr	r3, [r5, #0]
   27ada:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   27ade:	4543      	cmp	r3, r8
   27ae0:	d1e0      	bne.n	27aa4 <am_hal_uart_configure+0x15c>
   27ae2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27ae4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   27ae8:	331c      	adds	r3, #28
   27aea:	031b      	lsls	r3, r3, #12
   27aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   27aee:	f042 0220 	orr.w	r2, r2, #32
   27af2:	639a      	str	r2, [r3, #56]	; 0x38
   27af4:	e7c9      	b.n	27a8a <am_hal_uart_configure+0x142>
   27af6:	2201      	movs	r2, #1
   27af8:	463b      	mov	r3, r7
   27afa:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
   27afe:	4621      	mov	r1, r4
   27b00:	f105 0048 	add.w	r0, r5, #72	; 0x48
   27b04:	f7ff fc44 	bl	27390 <am_hal_queue_init>
   27b08:	682b      	ldr	r3, [r5, #0]
   27b0a:	4a08      	ldr	r2, [pc, #32]	; (27b2c <am_hal_uart_configure+0x1e4>)
   27b0c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   27b10:	4293      	cmp	r3, r2
   27b12:	d1c7      	bne.n	27aa4 <am_hal_uart_configure+0x15c>
   27b14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27b16:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   27b1a:	331c      	adds	r3, #28
   27b1c:	031b      	lsls	r3, r3, #12
   27b1e:	2000      	movs	r0, #0
   27b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   27b22:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   27b26:	639a      	str	r2, [r3, #56]	; 0x38
   27b28:	e7b9      	b.n	27a9e <am_hal_uart_configure+0x156>
   27b2a:	bf00      	nop
   27b2c:	01ea9e06 	.word	0x01ea9e06
   27b30:	40020000 	.word	0x40020000
   27b34:	0016e360 	.word	0x0016e360
   27b38:	0002bb44 	.word	0x0002bb44
   27b3c:	08000003 	.word	0x08000003
   27b40:	08000002 	.word	0x08000002

00027b44 <am_hal_uart_transfer>:
   27b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b48:	ed2d 8b02 	vpush	{d8}
   27b4c:	680d      	ldr	r5, [r1, #0]
   27b4e:	b091      	sub	sp, #68	; 0x44
   27b50:	4604      	mov	r4, r0
   27b52:	b14d      	cbz	r5, 27b68 <am_hal_uart_transfer+0x24>
   27b54:	2d01      	cmp	r5, #1
   27b56:	f000 8091 	beq.w	27c7c <am_hal_uart_transfer+0x138>
   27b5a:	2507      	movs	r5, #7
   27b5c:	4628      	mov	r0, r5
   27b5e:	b011      	add	sp, #68	; 0x44
   27b60:	ecbd 8b02 	vpop	{d8}
   27b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b68:	f8d1 900c 	ldr.w	r9, [r1, #12]
   27b6c:	684b      	ldr	r3, [r1, #4]
   27b6e:	690a      	ldr	r2, [r1, #16]
   27b70:	688e      	ldr	r6, [r1, #8]
   27b72:	9301      	str	r3, [sp, #4]
   27b74:	9203      	str	r2, [sp, #12]
   27b76:	f1b9 0f00 	cmp.w	r9, #0
   27b7a:	f000 8113 	beq.w	27da4 <am_hal_uart_transfer+0x260>
   27b7e:	2e00      	cmp	r6, #0
   27b80:	f000 8179 	beq.w	27e76 <am_hal_uart_transfer+0x332>
   27b84:	2800      	cmp	r0, #0
   27b86:	f000 8168 	beq.w	27e5a <am_hal_uart_transfer+0x316>
   27b8a:	46aa      	mov	sl, r5
   27b8c:	462f      	mov	r7, r5
   27b8e:	9502      	str	r5, [sp, #8]
   27b90:	4605      	mov	r5, r0
   27b92:	4619      	mov	r1, r3
   27b94:	682a      	ldr	r2, [r5, #0]
   27b96:	4bb4      	ldr	r3, [pc, #720]	; (27e68 <am_hal_uart_transfer+0x324>)
   27b98:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   27b9c:	429a      	cmp	r2, r3
   27b9e:	d12f      	bne.n	27c00 <am_hal_uart_transfer+0xbc>
   27ba0:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   27ba4:	2a00      	cmp	r2, #0
   27ba6:	d133      	bne.n	27c10 <am_hal_uart_transfer+0xcc>
   27ba8:	6a68      	ldr	r0, [r5, #36]	; 0x24
   27baa:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   27bae:	301c      	adds	r0, #28
   27bb0:	3901      	subs	r1, #1
   27bb2:	0300      	lsls	r0, r0, #12
   27bb4:	e005      	b.n	27bc2 <am_hal_uart_transfer+0x7e>
   27bb6:	3201      	adds	r2, #1
   27bb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   27bbc:	6003      	str	r3, [r0, #0]
   27bbe:	42b2      	cmp	r2, r6
   27bc0:	d023      	beq.n	27c0a <am_hal_uart_transfer+0xc6>
   27bc2:	6983      	ldr	r3, [r0, #24]
   27bc4:	069c      	lsls	r4, r3, #26
   27bc6:	d5f6      	bpl.n	27bb6 <am_hal_uart_transfer+0x72>
   27bc8:	4417      	add	r7, r2
   27bca:	1ab6      	subs	r6, r6, r2
   27bcc:	b936      	cbnz	r6, 27bdc <am_hal_uart_transfer+0x98>
   27bce:	9d02      	ldr	r5, [sp, #8]
   27bd0:	9b03      	ldr	r3, [sp, #12]
   27bd2:	2b00      	cmp	r3, #0
   27bd4:	f000 808d 	beq.w	27cf2 <am_hal_uart_transfer+0x1ae>
   27bd8:	601f      	str	r7, [r3, #0]
   27bda:	e7bf      	b.n	27b5c <am_hal_uart_transfer+0x18>
   27bdc:	2010      	movs	r0, #16
   27bde:	f7ff f829 	bl	26c34 <am_hal_flash_delay>
   27be2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   27be6:	bf18      	it	ne
   27be8:	f10a 0a01 	addne.w	sl, sl, #1
   27bec:	45d1      	cmp	r9, sl
   27bee:	d9ee      	bls.n	27bce <am_hal_uart_transfer+0x8a>
   27bf0:	9b01      	ldr	r3, [sp, #4]
   27bf2:	682a      	ldr	r2, [r5, #0]
   27bf4:	19d9      	adds	r1, r3, r7
   27bf6:	4b9c      	ldr	r3, [pc, #624]	; (27e68 <am_hal_uart_transfer+0x324>)
   27bf8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   27bfc:	429a      	cmp	r2, r3
   27bfe:	d0cf      	beq.n	27ba0 <am_hal_uart_transfer+0x5c>
   27c00:	9b03      	ldr	r3, [sp, #12]
   27c02:	b103      	cbz	r3, 27c06 <am_hal_uart_transfer+0xc2>
   27c04:	601f      	str	r7, [r3, #0]
   27c06:	2502      	movs	r5, #2
   27c08:	e7a8      	b.n	27b5c <am_hal_uart_transfer+0x18>
   27c0a:	9d02      	ldr	r5, [sp, #8]
   27c0c:	4417      	add	r7, r2
   27c0e:	e7df      	b.n	27bd0 <am_hal_uart_transfer+0x8c>
   27c10:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
   27c14:	eba2 0b00 	sub.w	fp, r2, r0
   27c18:	45b3      	cmp	fp, r6
   27c1a:	bf28      	it	cs
   27c1c:	46b3      	movcs	fp, r6
   27c1e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   27c22:	465a      	mov	r2, fp
   27c24:	4620      	mov	r0, r4
   27c26:	f7ff fbbf 	bl	273a8 <am_hal_queue_item_add>
   27c2a:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   27c2e:	f7ff f9d9 	bl	26fe4 <am_hal_interrupt_master_disable>
   27c32:	f508 2880 	add.w	r8, r8, #262144	; 0x40000
   27c36:	f108 081c 	add.w	r8, r8, #28
   27c3a:	ea4f 3808 	mov.w	r8, r8, lsl #12
   27c3e:	9008      	str	r0, [sp, #32]
   27c40:	e00d      	b.n	27c5e <am_hal_uart_transfer+0x11a>
   27c42:	f7ff fbef 	bl	27424 <am_hal_queue_item_get>
   27c46:	b190      	cbz	r0, 27c6e <am_hal_uart_transfer+0x12a>
   27c48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27c4a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   27c4e:	331c      	adds	r3, #28
   27c50:	031b      	lsls	r3, r3, #12
   27c52:	699a      	ldr	r2, [r3, #24]
   27c54:	0692      	lsls	r2, r2, #26
   27c56:	bf5c      	itt	pl
   27c58:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   27c5c:	601a      	strpl	r2, [r3, #0]
   27c5e:	f8d8 3018 	ldr.w	r3, [r8, #24]
   27c62:	069b      	lsls	r3, r3, #26
   27c64:	f04f 0201 	mov.w	r2, #1
   27c68:	a907      	add	r1, sp, #28
   27c6a:	4620      	mov	r0, r4
   27c6c:	d5e9      	bpl.n	27c42 <am_hal_uart_transfer+0xfe>
   27c6e:	9808      	ldr	r0, [sp, #32]
   27c70:	445f      	add	r7, fp
   27c72:	eba6 060b 	sub.w	r6, r6, fp
   27c76:	f7ff f9b9 	bl	26fec <am_hal_interrupt_master_set>
   27c7a:	e7a7      	b.n	27bcc <am_hal_uart_transfer+0x88>
   27c7c:	68cd      	ldr	r5, [r1, #12]
   27c7e:	690b      	ldr	r3, [r1, #16]
   27c80:	9301      	str	r3, [sp, #4]
   27c82:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
   27c86:	2d00      	cmp	r5, #0
   27c88:	f000 80b8 	beq.w	27dfc <am_hal_uart_transfer+0x2b8>
   27c8c:	2f00      	cmp	r7, #0
   27c8e:	f000 8123 	beq.w	27ed8 <am_hal_uart_transfer+0x394>
   27c92:	2800      	cmp	r0, #0
   27c94:	f000 80ec 	beq.w	27e70 <am_hal_uart_transfer+0x32c>
   27c98:	6822      	ldr	r2, [r4, #0]
   27c9a:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 27e68 <am_hal_uart_transfer+0x324>
   27c9e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   27ca2:	f04f 0900 	mov.w	r9, #0
   27ca6:	f100 0348 	add.w	r3, r0, #72	; 0x48
   27caa:	4552      	cmp	r2, sl
   27cac:	ee08 3a10 	vmov	s16, r3
   27cb0:	46c8      	mov	r8, r9
   27cb2:	465e      	mov	r6, fp
   27cb4:	d134      	bne.n	27d20 <am_hal_uart_transfer+0x1dc>
   27cb6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   27cba:	2a00      	cmp	r2, #0
   27cbc:	d138      	bne.n	27d30 <am_hal_uart_transfer+0x1ec>
   27cbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   27cc0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   27cc4:	311c      	adds	r1, #28
   27cc6:	1e73      	subs	r3, r6, #1
   27cc8:	0309      	lsls	r1, r1, #12
   27cca:	e008      	b.n	27cde <am_hal_uart_transfer+0x19a>
   27ccc:	6808      	ldr	r0, [r1, #0]
   27cce:	f410 6f70 	tst.w	r0, #3840	; 0xf00
   27cd2:	d163      	bne.n	27d9c <am_hal_uart_transfer+0x258>
   27cd4:	3201      	adds	r2, #1
   27cd6:	42ba      	cmp	r2, r7
   27cd8:	f803 0f01 	strb.w	r0, [r3, #1]!
   27cdc:	d056      	beq.n	27d8c <am_hal_uart_transfer+0x248>
   27cde:	6988      	ldr	r0, [r1, #24]
   27ce0:	06c0      	lsls	r0, r0, #27
   27ce2:	d5f3      	bpl.n	27ccc <am_hal_uart_transfer+0x188>
   27ce4:	4490      	add	r8, r2
   27ce6:	1abf      	subs	r7, r7, r2
   27ce8:	b957      	cbnz	r7, 27d00 <am_hal_uart_transfer+0x1bc>
   27cea:	9b01      	ldr	r3, [sp, #4]
   27cec:	b10b      	cbz	r3, 27cf2 <am_hal_uart_transfer+0x1ae>
   27cee:	f8c3 8000 	str.w	r8, [r3]
   27cf2:	2500      	movs	r5, #0
   27cf4:	4628      	mov	r0, r5
   27cf6:	b011      	add	sp, #68	; 0x44
   27cf8:	ecbd 8b02 	vpop	{d8}
   27cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d00:	2010      	movs	r0, #16
   27d02:	f7fe ff97 	bl	26c34 <am_hal_flash_delay>
   27d06:	1c6b      	adds	r3, r5, #1
   27d08:	bf18      	it	ne
   27d0a:	f109 0901 	addne.w	r9, r9, #1
   27d0e:	454d      	cmp	r5, r9
   27d10:	d9eb      	bls.n	27cea <am_hal_uart_transfer+0x1a6>
   27d12:	6822      	ldr	r2, [r4, #0]
   27d14:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   27d18:	4552      	cmp	r2, sl
   27d1a:	eb0b 0608 	add.w	r6, fp, r8
   27d1e:	d0ca      	beq.n	27cb6 <am_hal_uart_transfer+0x172>
   27d20:	2502      	movs	r5, #2
   27d22:	9b01      	ldr	r3, [sp, #4]
   27d24:	2b00      	cmp	r3, #0
   27d26:	f43f af19 	beq.w	27b5c <am_hal_uart_transfer+0x18>
   27d2a:	f8c3 8000 	str.w	r8, [r3]
   27d2e:	e715      	b.n	27b5c <am_hal_uart_transfer+0x18>
   27d30:	f7ff f958 	bl	26fe4 <am_hal_interrupt_master_disable>
   27d34:	6a62      	ldr	r2, [r4, #36]	; 0x24
   27d36:	9007      	str	r0, [sp, #28]
   27d38:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   27d3c:	321c      	adds	r2, #28
   27d3e:	0310      	lsls	r0, r2, #12
   27d40:	f10d 0c20 	add.w	ip, sp, #32
   27d44:	2200      	movs	r2, #0
   27d46:	6983      	ldr	r3, [r0, #24]
   27d48:	06db      	lsls	r3, r3, #27
   27d4a:	d409      	bmi.n	27d60 <am_hal_uart_transfer+0x21c>
   27d4c:	6803      	ldr	r3, [r0, #0]
   27d4e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   27d52:	f102 0201 	add.w	r2, r2, #1
   27d56:	d11b      	bne.n	27d90 <am_hal_uart_transfer+0x24c>
   27d58:	2a20      	cmp	r2, #32
   27d5a:	f80c 3b01 	strb.w	r3, [ip], #1
   27d5e:	d1f2      	bne.n	27d46 <am_hal_uart_transfer+0x202>
   27d60:	ee18 0a10 	vmov	r0, s16
   27d64:	a908      	add	r1, sp, #32
   27d66:	f7ff fb1f 	bl	273a8 <am_hal_queue_item_add>
   27d6a:	2800      	cmp	r0, #0
   27d6c:	d077      	beq.n	27e5e <am_hal_uart_transfer+0x31a>
   27d6e:	9807      	ldr	r0, [sp, #28]
   27d70:	f7ff f93c 	bl	26fec <am_hal_interrupt_master_set>
   27d74:	6d22      	ldr	r2, [r4, #80]	; 0x50
   27d76:	42ba      	cmp	r2, r7
   27d78:	bf28      	it	cs
   27d7a:	463a      	movcs	r2, r7
   27d7c:	ee18 0a10 	vmov	r0, s16
   27d80:	4631      	mov	r1, r6
   27d82:	4490      	add	r8, r2
   27d84:	1abf      	subs	r7, r7, r2
   27d86:	f7ff fb4d 	bl	27424 <am_hal_queue_item_get>
   27d8a:	e7ad      	b.n	27ce8 <am_hal_uart_transfer+0x1a4>
   27d8c:	4490      	add	r8, r2
   27d8e:	e7ac      	b.n	27cea <am_hal_uart_transfer+0x1a6>
   27d90:	9807      	ldr	r0, [sp, #28]
   27d92:	f7ff f92b 	bl	26fec <am_hal_interrupt_master_set>
   27d96:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   27d9a:	e7c2      	b.n	27d22 <am_hal_uart_transfer+0x1de>
   27d9c:	4490      	add	r8, r2
   27d9e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   27da2:	e7be      	b.n	27d22 <am_hal_uart_transfer+0x1de>
   27da4:	2800      	cmp	r0, #0
   27da6:	f43f af2e 	beq.w	27c06 <am_hal_uart_transfer+0xc2>
   27daa:	6803      	ldr	r3, [r0, #0]
   27dac:	4a2e      	ldr	r2, [pc, #184]	; (27e68 <am_hal_uart_transfer+0x324>)
   27dae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   27db2:	4293      	cmp	r3, r2
   27db4:	f47f af27 	bne.w	27c06 <am_hal_uart_transfer+0xc2>
   27db8:	9b03      	ldr	r3, [sp, #12]
   27dba:	b10b      	cbz	r3, 27dc0 <am_hal_uart_transfer+0x27c>
   27dbc:	f8c3 9000 	str.w	r9, [r3]
   27dc0:	2e00      	cmp	r6, #0
   27dc2:	d096      	beq.n	27cf2 <am_hal_uart_transfer+0x1ae>
   27dc4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   27dc8:	2d00      	cmp	r5, #0
   27dca:	d156      	bne.n	27e7a <am_hal_uart_transfer+0x336>
   27dcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   27dce:	9b01      	ldr	r3, [sp, #4]
   27dd0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   27dd4:	321c      	adds	r2, #28
   27dd6:	0312      	lsls	r2, r2, #12
   27dd8:	3b01      	subs	r3, #1
   27dda:	e005      	b.n	27de8 <am_hal_uart_transfer+0x2a4>
   27ddc:	3501      	adds	r5, #1
   27dde:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   27de2:	6011      	str	r1, [r2, #0]
   27de4:	42ae      	cmp	r6, r5
   27de6:	d002      	beq.n	27dee <am_hal_uart_transfer+0x2aa>
   27de8:	6991      	ldr	r1, [r2, #24]
   27dea:	0689      	lsls	r1, r1, #26
   27dec:	d5f6      	bpl.n	27ddc <am_hal_uart_transfer+0x298>
   27dee:	9b03      	ldr	r3, [sp, #12]
   27df0:	2b00      	cmp	r3, #0
   27df2:	f43f af7e 	beq.w	27cf2 <am_hal_uart_transfer+0x1ae>
   27df6:	601d      	str	r5, [r3, #0]
   27df8:	2500      	movs	r5, #0
   27dfa:	e6af      	b.n	27b5c <am_hal_uart_transfer+0x18>
   27dfc:	2800      	cmp	r0, #0
   27dfe:	f43f af02 	beq.w	27c06 <am_hal_uart_transfer+0xc2>
   27e02:	6802      	ldr	r2, [r0, #0]
   27e04:	4918      	ldr	r1, [pc, #96]	; (27e68 <am_hal_uart_transfer+0x324>)
   27e06:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   27e0a:	428a      	cmp	r2, r1
   27e0c:	f47f aefb 	bne.w	27c06 <am_hal_uart_transfer+0xc2>
   27e10:	b103      	cbz	r3, 27e14 <am_hal_uart_transfer+0x2d0>
   27e12:	601d      	str	r5, [r3, #0]
   27e14:	2f00      	cmp	r7, #0
   27e16:	f43f af6c 	beq.w	27cf2 <am_hal_uart_transfer+0x1ae>
   27e1a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   27e1e:	2a00      	cmp	r2, #0
   27e20:	d15c      	bne.n	27edc <am_hal_uart_transfer+0x398>
   27e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
   27e24:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   27e28:	301c      	adds	r0, #28
   27e2a:	0300      	lsls	r0, r0, #12
   27e2c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   27e30:	4614      	mov	r4, r2
   27e32:	e009      	b.n	27e48 <am_hal_uart_transfer+0x304>
   27e34:	6801      	ldr	r1, [r0, #0]
   27e36:	f411 6270 	ands.w	r2, r1, #3840	; 0xf00
   27e3a:	f040 8080 	bne.w	27f3e <am_hal_uart_transfer+0x3fa>
   27e3e:	3401      	adds	r4, #1
   27e40:	42a7      	cmp	r7, r4
   27e42:	f803 1f01 	strb.w	r1, [r3, #1]!
   27e46:	d07d      	beq.n	27f44 <am_hal_uart_transfer+0x400>
   27e48:	6982      	ldr	r2, [r0, #24]
   27e4a:	06d2      	lsls	r2, r2, #27
   27e4c:	d5f2      	bpl.n	27e34 <am_hal_uart_transfer+0x2f0>
   27e4e:	9b01      	ldr	r3, [sp, #4]
   27e50:	2b00      	cmp	r3, #0
   27e52:	f43f ae83 	beq.w	27b5c <am_hal_uart_transfer+0x18>
   27e56:	601c      	str	r4, [r3, #0]
   27e58:	e680      	b.n	27b5c <am_hal_uart_transfer+0x18>
   27e5a:	4607      	mov	r7, r0
   27e5c:	e6d0      	b.n	27c00 <am_hal_uart_transfer+0xbc>
   27e5e:	9807      	ldr	r0, [sp, #28]
   27e60:	4d02      	ldr	r5, [pc, #8]	; (27e6c <am_hal_uart_transfer+0x328>)
   27e62:	f7ff f8c3 	bl	26fec <am_hal_interrupt_master_set>
   27e66:	e75c      	b.n	27d22 <am_hal_uart_transfer+0x1de>
   27e68:	01ea9e06 	.word	0x01ea9e06
   27e6c:	08000001 	.word	0x08000001
   27e70:	4680      	mov	r8, r0
   27e72:	2502      	movs	r5, #2
   27e74:	e755      	b.n	27d22 <am_hal_uart_transfer+0x1de>
   27e76:	462f      	mov	r7, r5
   27e78:	e6aa      	b.n	27bd0 <am_hal_uart_transfer+0x8c>
   27e7a:	e9d4 530d 	ldrd	r5, r3, [r4, #52]	; 0x34
   27e7e:	1b5d      	subs	r5, r3, r5
   27e80:	42b5      	cmp	r5, r6
   27e82:	bf28      	it	cs
   27e84:	4635      	movcs	r5, r6
   27e86:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   27e8a:	9901      	ldr	r1, [sp, #4]
   27e8c:	462a      	mov	r2, r5
   27e8e:	4638      	mov	r0, r7
   27e90:	f7ff fa8a 	bl	273a8 <am_hal_queue_item_add>
   27e94:	6a66      	ldr	r6, [r4, #36]	; 0x24
   27e96:	f7ff f8a5 	bl	26fe4 <am_hal_interrupt_master_disable>
   27e9a:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
   27e9e:	361c      	adds	r6, #28
   27ea0:	0336      	lsls	r6, r6, #12
   27ea2:	9005      	str	r0, [sp, #20]
   27ea4:	e00d      	b.n	27ec2 <am_hal_uart_transfer+0x37e>
   27ea6:	f7ff fabd 	bl	27424 <am_hal_queue_item_get>
   27eaa:	b188      	cbz	r0, 27ed0 <am_hal_uart_transfer+0x38c>
   27eac:	6a62      	ldr	r2, [r4, #36]	; 0x24
   27eae:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   27eb2:	321c      	adds	r2, #28
   27eb4:	0312      	lsls	r2, r2, #12
   27eb6:	6993      	ldr	r3, [r2, #24]
   27eb8:	0699      	lsls	r1, r3, #26
   27eba:	bf5c      	itt	pl
   27ebc:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
   27ec0:	6013      	strpl	r3, [r2, #0]
   27ec2:	69b3      	ldr	r3, [r6, #24]
   27ec4:	069b      	lsls	r3, r3, #26
   27ec6:	f04f 0201 	mov.w	r2, #1
   27eca:	a908      	add	r1, sp, #32
   27ecc:	4638      	mov	r0, r7
   27ece:	d5ea      	bpl.n	27ea6 <am_hal_uart_transfer+0x362>
   27ed0:	9805      	ldr	r0, [sp, #20]
   27ed2:	f7ff f88b 	bl	26fec <am_hal_interrupt_master_set>
   27ed6:	e78a      	b.n	27dee <am_hal_uart_transfer+0x2aa>
   27ed8:	46b8      	mov	r8, r7
   27eda:	e706      	b.n	27cea <am_hal_uart_transfer+0x1a6>
   27edc:	f7ff f882 	bl	26fe4 <am_hal_interrupt_master_disable>
   27ee0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   27ee2:	9006      	str	r0, [sp, #24]
   27ee4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   27ee8:	321c      	adds	r2, #28
   27eea:	0310      	lsls	r0, r2, #12
   27eec:	ae08      	add	r6, sp, #32
   27eee:	2200      	movs	r2, #0
   27ef0:	6983      	ldr	r3, [r0, #24]
   27ef2:	06d9      	lsls	r1, r3, #27
   27ef4:	d409      	bmi.n	27f0a <am_hal_uart_transfer+0x3c6>
   27ef6:	6803      	ldr	r3, [r0, #0]
   27ef8:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   27efc:	f102 0201 	add.w	r2, r2, #1
   27f00:	d117      	bne.n	27f32 <am_hal_uart_transfer+0x3ee>
   27f02:	2a20      	cmp	r2, #32
   27f04:	f806 3b01 	strb.w	r3, [r6], #1
   27f08:	d1f2      	bne.n	27ef0 <am_hal_uart_transfer+0x3ac>
   27f0a:	f104 0648 	add.w	r6, r4, #72	; 0x48
   27f0e:	a908      	add	r1, sp, #32
   27f10:	4630      	mov	r0, r6
   27f12:	f7ff fa49 	bl	273a8 <am_hal_queue_item_add>
   27f16:	b1b8      	cbz	r0, 27f48 <am_hal_uart_transfer+0x404>
   27f18:	9806      	ldr	r0, [sp, #24]
   27f1a:	f7ff f867 	bl	26fec <am_hal_interrupt_master_set>
   27f1e:	6d24      	ldr	r4, [r4, #80]	; 0x50
   27f20:	42bc      	cmp	r4, r7
   27f22:	bf28      	it	cs
   27f24:	463c      	movcs	r4, r7
   27f26:	4659      	mov	r1, fp
   27f28:	4630      	mov	r0, r6
   27f2a:	4622      	mov	r2, r4
   27f2c:	f7ff fa7a 	bl	27424 <am_hal_queue_item_get>
   27f30:	e78d      	b.n	27e4e <am_hal_uart_transfer+0x30a>
   27f32:	9806      	ldr	r0, [sp, #24]
   27f34:	f7ff f85a 	bl	26fec <am_hal_interrupt_master_set>
   27f38:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   27f3c:	e60e      	b.n	27b5c <am_hal_uart_transfer+0x18>
   27f3e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   27f42:	e784      	b.n	27e4e <am_hal_uart_transfer+0x30a>
   27f44:	4615      	mov	r5, r2
   27f46:	e782      	b.n	27e4e <am_hal_uart_transfer+0x30a>
   27f48:	9806      	ldr	r0, [sp, #24]
   27f4a:	4d02      	ldr	r5, [pc, #8]	; (27f54 <am_hal_uart_transfer+0x410>)
   27f4c:	f7ff f84e 	bl	26fec <am_hal_interrupt_master_set>
   27f50:	e604      	b.n	27b5c <am_hal_uart_transfer+0x18>
   27f52:	bf00      	nop
   27f54:	08000001 	.word	0x08000001
   27f58:	72635370 	.word	0x72635370
   27f5c:	726c6120 	.word	0x726c6120
   27f60:	79646165 	.word	0x79646165
   27f64:	6c6c6120 	.word	0x6c6c6120
   27f68:	7461636f 	.word	0x7461636f
   27f6c:	00006465 	.word	0x00006465
   27f70:	646e6152 	.word	0x646e6152
   27f74:	00624e20 	.word	0x00624e20
   27f78:	434e574a 	.word	0x434e574a
   27f7c:	6e6f4320 	.word	0x6e6f4320
   27f80:	6d726966 	.word	0x6d726966
   27f84:	00000000 	.word	0x00000000
   27f88:	00696243 	.word	0x00696243
   27f8c:	00006143 	.word	0x00006143
   27f90:	50206143 	.word	0x50206143
   27f94:	00726565 	.word	0x00726565
   27f98:	654b4844 	.word	0x654b4844
   27f9c:	62452079 	.word	0x62452079
   27fa0:	00000000 	.word	0x00000000
   27fa4:	53706d73 	.word	0x53706d73
   27fa8:	4b646e65 	.word	0x4b646e65
   27fac:	75207965 	.word	0x75207965
   27fb0:	7078656e 	.word	0x7078656e
   27fb4:	65746365 	.word	0x65746365
   27fb8:	74732064 	.word	0x74732064
   27fbc:	20657461 	.word	0x20657461
   27fc0:	4479656b 	.word	0x4479656b
   27fc4:	3a747369 	.word	0x3a747369
   27fc8:	6c206425 	.word	0x6c206425
   27fcc:	53747361 	.word	0x53747361
   27fd0:	4b746e65 	.word	0x4b746e65
   27fd4:	253a7965 	.word	0x253a7965
   27fd8:	00000064 	.word	0x00000064
   27fdc:	53706d73 	.word	0x53706d73
   27fe0:	6578456d 	.word	0x6578456d
   27fe4:	65747563 	.word	0x65747563
   27fe8:	65766520 	.word	0x65766520
   27fec:	253d746e 	.word	0x253d746e
   27ff0:	74732064 	.word	0x74732064
   27ff4:	3d657461 	.word	0x3d657461
   27ff8:	00006425 	.word	0x00006425
   27ffc:	44706d73 	.word	0x44706d73
   28000:	64644162 	.word	0x64644162
   28004:	69766544 	.word	0x69766544
   28008:	00006563 	.word	0x00006563
   2800c:	44706d73 	.word	0x44706d73
   28010:	74654762 	.word	0x74654762
   28014:	6f636552 	.word	0x6f636552
   28018:	203a6472 	.word	0x203a6472
   2801c:	6e6e6f63 	.word	0x6e6e6f63
   28020:	203a6449 	.word	0x203a6449
   28024:	74206425 	.word	0x74206425
   28028:	3a657079 	.word	0x3a657079
   2802c:	00642520 	.word	0x00642520
   28030:	44706d73 	.word	0x44706d73
   28034:	74654762 	.word	0x74654762
   28038:	6f636552 	.word	0x6f636552
   2803c:	203a6472 	.word	0x203a6472
   28040:	6d6d6f63 	.word	0x6d6d6f63
   28044:	72206e6f 	.word	0x72206e6f
   28048:	726f6365 	.word	0x726f6365
   2804c:	00000064 	.word	0x00000064
   28050:	44706d53 	.word	0x44706d53
   28054:	74654762 	.word	0x74654762
   28058:	72696150 	.word	0x72696150
   2805c:	44676e69 	.word	0x44676e69
   28060:	62617369 	.word	0x62617369
   28064:	5464656c 	.word	0x5464656c
   28068:	3a656d69 	.word	0x3a656d69
   2806c:	6e6f6320 	.word	0x6e6f6320
   28070:	3a64496e 	.word	0x3a64496e
   28074:	20642520 	.word	0x20642520
   28078:	69726570 	.word	0x69726570
   2807c:	203a646f 	.word	0x203a646f
   28080:	61206425 	.word	0x61206425
   28084:	6d657474 	.word	0x6d657474
   28088:	754d7470 	.word	0x754d7470
   2808c:	203a746c 	.word	0x203a746c
   28090:	00006425 	.word	0x00006425
   28094:	44706d53 	.word	0x44706d53
   28098:	74655362 	.word	0x74655362
   2809c:	6c696146 	.word	0x6c696146
   280a0:	43657275 	.word	0x43657275
   280a4:	746e756f 	.word	0x746e756f
   280a8:	6f63203a 	.word	0x6f63203a
   280ac:	64496e6e 	.word	0x64496e6e
   280b0:	6425203a 	.word	0x6425203a
   280b4:	756f6320 	.word	0x756f6320
   280b8:	203a746e 	.word	0x203a746e
   280bc:	00006425 	.word	0x00006425
   280c0:	44706d53 	.word	0x44706d53
   280c4:	74654762 	.word	0x74654762
   280c8:	6c696146 	.word	0x6c696146
   280cc:	43657275 	.word	0x43657275
   280d0:	746e756f 	.word	0x746e756f
   280d4:	6f63203a 	.word	0x6f63203a
   280d8:	64496e6e 	.word	0x64496e6e
   280dc:	6425203a 	.word	0x6425203a
   280e0:	756f6320 	.word	0x756f6320
   280e4:	203a746e 	.word	0x203a746e
   280e8:	00006425 	.word	0x00006425
   280ec:	44706d53 	.word	0x44706d53
   280f0:	78614d62 	.word	0x78614d62
   280f4:	65747441 	.word	0x65747441
   280f8:	5274706d 	.word	0x5274706d
   280fc:	68636165 	.word	0x68636165
   28100:	203a6465 	.word	0x203a6465
   28104:	6e6e6f63 	.word	0x6e6e6f63
   28108:	203a6449 	.word	0x203a6449
   2810c:	00006425 	.word	0x00006425
   28110:	44706d53 	.word	0x44706d53
   28114:	69615062 	.word	0x69615062
   28118:	676e6972 	.word	0x676e6972
   2811c:	6c696146 	.word	0x6c696146
   28120:	203a6465 	.word	0x203a6465
   28124:	6e6e6f63 	.word	0x6e6e6f63
   28128:	203a6449 	.word	0x203a6449
   2812c:	00006425 	.word	0x00006425
   28130:	78656e75 	.word	0x78656e75
   28134:	74636570 	.word	0x74636570
   28138:	70206465 	.word	0x70206465
   2813c:	656b6361 	.word	0x656b6361
   28140:	6d632074 	.word	0x6d632074
   28144:	64253a64 	.word	0x64253a64
   28148:	6e656c20 	.word	0x6e656c20
   2814c:	2c64253a 	.word	0x2c64253a
   28150:	70786520 	.word	0x70786520
   28154:	65746365 	.word	0x65746365
   28158:	64253a64 	.word	0x64253a64
   2815c:	00000000 	.word	0x00000000
   28160:	53706d73 	.word	0x53706d73
   28164:	50646e65 	.word	0x50646e65
   28168:	7020746b 	.word	0x7020746b
   2816c:	656b6361 	.word	0x656b6361
   28170:	69642074 	.word	0x69642074
   28174:	72616373 	.word	0x72616373
   28178:	20646564 	.word	0x20646564
   2817c:	3a646d63 	.word	0x3a646d63
   28180:	00006425 	.word	0x00006425
   28184:	20534541 	.word	0x20534541
   28188:	656b6f74 	.word	0x656b6f74
   2818c:	696d206e 	.word	0x696d206e
   28190:	74616d73 	.word	0x74616d73
   28194:	203a6863 	.word	0x203a6863
   28198:	25206425 	.word	0x25206425
   2819c:	00000064 	.word	0x00000064
   281a0:	50203446 	.word	0x50203446
   281a4:	0000624b 	.word	0x0000624b
   281a8:	50203446 	.word	0x50203446
   281ac:	0000614b 	.word	0x0000614b
   281b0:	4e203446 	.word	0x4e203446
   281b4:	00000062 	.word	0x00000062
   281b8:	434e574a 	.word	0x434e574a
   281bc:	73694420 	.word	0x73694420
   281c0:	79616c70 	.word	0x79616c70
   281c4:	666e4320 	.word	0x666e4320
   281c8:	00000000 	.word	0x00000000
   281cc:	654b4844 	.word	0x654b4844
   281d0:	53282079 	.word	0x53282079
   281d4:	65726168 	.word	0x65726168
   281d8:	65532064 	.word	0x65532064
   281dc:	74657263 	.word	0x74657263
   281e0:	00000029 	.word	0x00000029
   281e4:	9183886c 	.word	0x9183886c
   281e8:	38a5f5aa 	.word	0x38a5f5aa
   281ec:	db0b3760 	.word	0xdb0b3760
   281f0:	be83605a 	.word	0xbe83605a
   281f4:	00000054 	.word	0x00000054
   281f8:	0043414d 	.word	0x0043414d
   281fc:	004b544c 	.word	0x004b544c
   28200:	654b4844 	.word	0x654b4844
   28204:	61452079 	.word	0x61452079
   28208:	00000000 	.word	0x00000000
   2820c:	20424f4f 	.word	0x20424f4f
   28210:	72656550 	.word	0x72656550
   28214:	6e6f4320 	.word	0x6e6f4320
   28218:	6d726966 	.word	0x6d726966
   2821c:	00000000 	.word	0x00000000
   28220:	20424f4f 	.word	0x20424f4f
   28224:	72656550 	.word	0x72656550
   28228:	6e615220 	.word	0x6e615220
   2822c:	006d6f64 	.word	0x006d6f64
   28230:	20424f4f 	.word	0x20424f4f
   28234:	61636f4c 	.word	0x61636f4c
   28238:	6f43206c 	.word	0x6f43206c
   2823c:	7269666e 	.word	0x7269666e
   28240:	0000006d 	.word	0x0000006d
   28244:	20424f4f 	.word	0x20424f4f
   28248:	61636f4c 	.word	0x61636f4c
   2824c:	6152206c 	.word	0x6152206c
   28250:	6d6f646e 	.word	0x6d6f646e
   28254:	00000000 	.word	0x00000000
   28258:	53706d53 	.word	0x53706d53
   2825c:	74654763 	.word	0x74654763
   28260:	636e6143 	.word	0x636e6143
   28264:	734d6c65 	.word	0x734d6c65
   28268:	74695767 	.word	0x74695767
   2826c:	61655268 	.word	0x61655268
   28270:	6d657474 	.word	0x6d657474
   28274:	203a7470 	.word	0x203a7470
   28278:	00006425 	.word	0x00006425
   2827c:	5f495041 	.word	0x5f495041
   28280:	52494150 	.word	0x52494150
   28284:	5145525f 	.word	0x5145525f
   28288:	00000000 	.word	0x00000000
   2828c:	5f495041 	.word	0x5f495041
   28290:	52494150 	.word	0x52494150
   28294:	5053525f 	.word	0x5053525f
   28298:	00000000 	.word	0x00000000
   2829c:	5f495041 	.word	0x5f495041
   282a0:	434e4143 	.word	0x434e4143
   282a4:	525f4c45 	.word	0x525f4c45
   282a8:	00005145 	.word	0x00005145
   282ac:	5f495041 	.word	0x5f495041
   282b0:	48545541 	.word	0x48545541
   282b4:	5053525f 	.word	0x5053525f
   282b8:	00000000 	.word	0x00000000
   282bc:	5f495041 	.word	0x5f495041
   282c0:	55434553 	.word	0x55434553
   282c4:	59544952 	.word	0x59544952
   282c8:	5145525f 	.word	0x5145525f
   282cc:	00000000 	.word	0x00000000
   282d0:	5f444d43 	.word	0x5f444d43
   282d4:	00544b50 	.word	0x00544b50
   282d8:	5f444d43 	.word	0x5f444d43
   282dc:	52494150 	.word	0x52494150
   282e0:	5f474e49 	.word	0x5f474e49
   282e4:	4c494146 	.word	0x4c494146
   282e8:	00004445 	.word	0x00004445
   282ec:	455f4d44 	.word	0x455f4d44
   282f0:	5952434e 	.word	0x5952434e
   282f4:	435f5450 	.word	0x435f5450
   282f8:	004c504d 	.word	0x004c504d
   282fc:	455f4d44 	.word	0x455f4d44
   28300:	5952434e 	.word	0x5952434e
   28304:	465f5450 	.word	0x465f5450
   28308:	454c4941 	.word	0x454c4941
   2830c:	00000044 	.word	0x00000044
   28310:	435f4d44 	.word	0x435f4d44
   28314:	5f4e4e4f 	.word	0x5f4e4e4f
   28318:	534f4c43 	.word	0x534f4c43
   2831c:	00000045 	.word	0x00000045
   28320:	5f465357 	.word	0x5f465357
   28324:	5f534541 	.word	0x5f534541
   28328:	4c504d43 	.word	0x4c504d43
   2832c:	00000000 	.word	0x00000000
   28330:	5f544e49 	.word	0x5f544e49
   28334:	444e4553 	.word	0x444e4553
   28338:	58454e5f 	.word	0x58454e5f
   2833c:	454b5f54 	.word	0x454b5f54
   28340:	00000059 	.word	0x00000059
   28344:	5f544e49 	.word	0x5f544e49
   28348:	5f58414d 	.word	0x5f58414d
   2834c:	45545441 	.word	0x45545441
   28350:	5354504d 	.word	0x5354504d
   28354:	00000000 	.word	0x00000000
   28358:	5f544e49 	.word	0x5f544e49
   2835c:	52494150 	.word	0x52494150
   28360:	5f474e49 	.word	0x5f474e49
   28364:	4c504d43 	.word	0x4c504d43
   28368:	00000000 	.word	0x00000000
   2836c:	5f544e49 	.word	0x5f544e49
   28370:	5f505352 	.word	0x5f505352
   28374:	454d4954 	.word	0x454d4954
   28378:	0054554f 	.word	0x0054554f
   2837c:	5f544e49 	.word	0x5f544e49
   28380:	545f4957 	.word	0x545f4957
   28384:	4f454d49 	.word	0x4f454d49
   28388:	00005455 	.word	0x00005455
   2838c:	5f544e49 	.word	0x5f544e49
   28390:	4353454c 	.word	0x4353454c
   28394:	00000000 	.word	0x00000000
   28398:	5f544e49 	.word	0x5f544e49
   2839c:	4147454c 	.word	0x4147454c
   283a0:	00005943 	.word	0x00005943
   283a4:	5f544e49 	.word	0x5f544e49
   283a8:	4e5f574a 	.word	0x4e5f574a
   283ac:	00000043 	.word	0x00000043
   283b0:	5f544e49 	.word	0x5f544e49
   283b4:	53534150 	.word	0x53534150
   283b8:	0059454b 	.word	0x0059454b
   283bc:	5f544e49 	.word	0x5f544e49
   283c0:	00424f4f 	.word	0x00424f4f
   283c4:	5f495041 	.word	0x5f495041
   283c8:	52455355 	.word	0x52455355
   283cc:	4e4f435f 	.word	0x4e4f435f
   283d0:	4d524946 	.word	0x4d524946
   283d4:	00000000 	.word	0x00000000
   283d8:	5f495041 	.word	0x5f495041
   283dc:	52455355 	.word	0x52455355
   283e0:	59454b5f 	.word	0x59454b5f
   283e4:	53455250 	.word	0x53455250
   283e8:	00000053 	.word	0x00000053
   283ec:	5f495041 	.word	0x5f495041
   283f0:	5059454b 	.word	0x5059454b
   283f4:	53534552 	.word	0x53534552
   283f8:	504d435f 	.word	0x504d435f
   283fc:	0000004c 	.word	0x0000004c
   28400:	5f465357 	.word	0x5f465357
   28404:	5f434345 	.word	0x5f434345
   28408:	4c504d43 	.word	0x4c504d43
   2840c:	00000000 	.word	0x00000000
   28410:	5f544e49 	.word	0x5f544e49
   28414:	4e5f4b50 	.word	0x4e5f4b50
   28418:	00545845 	.word	0x00545845
   2841c:	5f544e49 	.word	0x5f544e49
   28420:	435f4b50 	.word	0x435f4b50
   28424:	004c504d 	.word	0x004c504d
   28428:	5f465357 	.word	0x5f465357
   2842c:	43414d43 	.word	0x43414d43
   28430:	504d435f 	.word	0x504d435f
   28434:	0000004c 	.word	0x0000004c
   28438:	435f4844 	.word	0x435f4844
   2843c:	4b434548 	.word	0x4b434548
   28440:	4941465f 	.word	0x4941465f
   28444:	4552554c 	.word	0x4552554c
   28448:	00000000 	.word	0x00000000
   2844c:	6e6b6e55 	.word	0x6e6b6e55
   28450:	006e776f 	.word	0x006e776f
   28454:	64416d64 	.word	0x64416d64
   28458:	74634176 	.word	0x74634176
   2845c:	666e6f43 	.word	0x666e6f43
   28460:	203a6769 	.word	0x203a6769
   28464:	74617473 	.word	0x74617473
   28468:	25203a65 	.word	0x25203a65
   2846c:	00000064 	.word	0x00000064
   28470:	64416d44 	.word	0x64416d44
   28474:	6e6f4376 	.word	0x6e6f4376
   28478:	20676966 	.word	0x20676966
   2847c:	69727564 	.word	0x69727564
   28480:	6420676e 	.word	0x6420676e
   28484:	63657269 	.word	0x63657269
   28488:	20646574 	.word	0x20646574
   2848c:	65766461 	.word	0x65766461
   28490:	73697472 	.word	0x73697472
   28494:	21676e69 	.word	0x21676e69
   28498:	00000000 	.word	0x00000000
   2849c:	64416d64 	.word	0x64416d64
   284a0:	74634176 	.word	0x74634176
   284a4:	44746553 	.word	0x44746553
   284a8:	3a617461 	.word	0x3a617461
   284ac:	61747320 	.word	0x61747320
   284b0:	203a6574 	.word	0x203a6574
   284b4:	00006425 	.word	0x00006425
   284b8:	64416d64 	.word	0x64416d64
   284bc:	74634176 	.word	0x74634176
   284c0:	72617453 	.word	0x72617453
   284c4:	73203a74 	.word	0x73203a74
   284c8:	65746174 	.word	0x65746174
   284cc:	6425203a 	.word	0x6425203a
   284d0:	00000000 	.word	0x00000000
   284d4:	64416d64 	.word	0x64416d64
   284d8:	74634176 	.word	0x74634176
   284dc:	72617453 	.word	0x72617453
   284e0:	75642074 	.word	0x75642074
   284e4:	676e6972 	.word	0x676e6972
   284e8:	72696420 	.word	0x72696420
   284ec:	65746365 	.word	0x65746365
   284f0:	64612064 	.word	0x64612064
   284f4:	74726576 	.word	0x74726576
   284f8:	6e697369 	.word	0x6e697369
   284fc:	00002167 	.word	0x00002167
   28500:	64416d64 	.word	0x64416d64
   28504:	74634176 	.word	0x74634176
   28508:	706f7453 	.word	0x706f7453
   2850c:	7473203a 	.word	0x7473203a
   28510:	3a657461 	.word	0x3a657461
   28514:	00642520 	.word	0x00642520
   28518:	64416d44 	.word	0x64416d44
   2851c:	6f745376 	.word	0x6f745376
   28520:	75642070 	.word	0x75642070
   28524:	676e6972 	.word	0x676e6972
   28528:	72696420 	.word	0x72696420
   2852c:	65746365 	.word	0x65746365
   28530:	64612064 	.word	0x64612064
   28534:	74726576 	.word	0x74726576
   28538:	6e697369 	.word	0x6e697369
   2853c:	00002167 	.word	0x00002167
   28540:	64416d64 	.word	0x64416d64
   28544:	74634176 	.word	0x74634176
   28548:	656d6954 	.word	0x656d6954
   2854c:	2174756f 	.word	0x2174756f
   28550:	00000000 	.word	0x00000000
   28554:	5f494348 	.word	0x5f494348
   28558:	415f454c 	.word	0x415f454c
   2855c:	455f5644 	.word	0x455f5644
   28560:	4c42414e 	.word	0x4c42414e
   28564:	4d435f45 	.word	0x4d435f45
   28568:	4d435f44 	.word	0x4d435f44
   2856c:	435f4c50 	.word	0x435f4c50
   28570:	4b434142 	.word	0x4b434142
   28574:	5456455f 	.word	0x5456455f
   28578:	7473203a 	.word	0x7473203a
   2857c:	3a657461 	.word	0x3a657461
   28580:	00642520 	.word	0x00642520
   28584:	64416d64 	.word	0x64416d64
   28588:	61745376 	.word	0x61745376
   2858c:	69447472 	.word	0x69447472
   28590:	74636572 	.word	0x74636572
   28594:	203a6465 	.word	0x203a6465
   28598:	74617473 	.word	0x74617473
   2859c:	25203a65 	.word	0x25203a65
   285a0:	00000064 	.word	0x00000064
   285a4:	64416d64 	.word	0x64416d64
   285a8:	6f745376 	.word	0x6f745376
   285ac:	72694470 	.word	0x72694470
   285b0:	65746365 	.word	0x65746365
   285b4:	73203a64 	.word	0x73203a64
   285b8:	65746174 	.word	0x65746174
   285bc:	6425203a 	.word	0x6425203a
   285c0:	00000000 	.word	0x00000000
   285c4:	64416d64 	.word	0x64416d64
   285c8:	6e6f4376 	.word	0x6e6f4376
   285cc:	7463656e 	.word	0x7463656e
   285d0:	203a6465 	.word	0x203a6465
   285d4:	74617473 	.word	0x74617473
   285d8:	25203a65 	.word	0x25203a65
   285dc:	00000064 	.word	0x00000064
   285e0:	64416d64 	.word	0x64416d64
   285e4:	6e6f4376 	.word	0x6e6f4376
   285e8:	7463656e 	.word	0x7463656e
   285ec:	6c696146 	.word	0x6c696146
   285f0:	203a6465 	.word	0x203a6465
   285f4:	74617473 	.word	0x74617473
   285f8:	25203a65 	.word	0x25203a65
   285fc:	00000064 	.word	0x00000064
   28600:	6f436d64 	.word	0x6f436d64
   28604:	6d436e6e 	.word	0x6d436e6e
   28608:	74536c70 	.word	0x74536c70
   2860c:	73657461 	.word	0x73657461
   28610:	00642520 	.word	0x00642520
   28614:	6f436d64 	.word	0x6f436d64
   28618:	63436e6e 	.word	0x63436e6e
   2861c:	6c6c4162 	.word	0x6c6c4162
   28620:	2520636f 	.word	0x2520636f
   28624:	00000064 	.word	0x00000064
   28628:	6f436d64 	.word	0x6f436d64
   2862c:	63436e6e 	.word	0x63436e6e
   28630:	6c6c4162 	.word	0x6c6c4162
   28634:	6620636f 	.word	0x6620636f
   28638:	656c6961 	.word	0x656c6961
   2863c:	00000064 	.word	0x00000064
   28640:	6f436d64 	.word	0x6f436d64
   28644:	63436e6e 	.word	0x63436e6e
   28648:	61654462 	.word	0x61654462
   2864c:	636f6c6c 	.word	0x636f6c6c
   28650:	00642520 	.word	0x00642520
   28654:	6f436d64 	.word	0x6f436d64
   28658:	63436e6e 	.word	0x63436e6e
   2865c:	48794262 	.word	0x48794262
   28660:	6c646e61 	.word	0x6c646e61
   28664:	6f6e2065 	.word	0x6f6e2065
   28668:	6f662074 	.word	0x6f662074
   2866c:	20646e75 	.word	0x20646e75
   28670:	30257830 	.word	0x30257830
   28674:	00007834 	.word	0x00007834
   28678:	6f436d64 	.word	0x6f436d64
   2867c:	64496e6e 	.word	0x64496e6e
   28680:	64427942 	.word	0x64427942
   28684:	72646441 	.word	0x72646441
   28688:	746f6e20 	.word	0x746f6e20
   2868c:	756f6620 	.word	0x756f6620
   28690:	0000646e 	.word	0x0000646e
   28694:	6f436d44 	.word	0x6f436d44
   28698:	64496e6e 	.word	0x64496e6e
   2869c:	61487942 	.word	0x61487942
   286a0:	656c646e 	.word	0x656c646e
   286a4:	746f6e20 	.word	0x746f6e20
   286a8:	756f6620 	.word	0x756f6620
   286ac:	3020646e 	.word	0x3020646e
   286b0:	34302578 	.word	0x34302578
   286b4:	00000078 	.word	0x00000078
   286b8:	6e6e6f63 	.word	0x6e6e6f63
   286bc:	253d6449 	.word	0x253d6449
   286c0:	64692064 	.word	0x64692064
   286c4:	614d656c 	.word	0x614d656c
   286c8:	303d6b73 	.word	0x303d6b73
   286cc:	34302578 	.word	0x34302578
   286d0:	00000078 	.word	0x00000078
   286d4:	6f436d64 	.word	0x6f436d64
   286d8:	6d536e6e 	.word	0x6d536e6e
   286dc:	63657845 	.word	0x63657845
   286e0:	20657475 	.word	0x20657475
   286e4:	6e657665 	.word	0x6e657665
   286e8:	64253d74 	.word	0x64253d74
   286ec:	61747320 	.word	0x61747320
   286f0:	253d6574 	.word	0x253d6574
   286f4:	00000064 	.word	0x00000064
   286f8:	65446d64 	.word	0x65446d64
   286fc:	73615076 	.word	0x73615076
   28700:	74764573 	.word	0x74764573
   28704:	65446f54 	.word	0x65446f54
   28708:	69725076 	.word	0x69725076
   2870c:	65203a76 	.word	0x65203a76
   28710:	746e6576 	.word	0x746e6576
   28714:	6425203a 	.word	0x6425203a
   28718:	6170202c 	.word	0x6170202c
   2871c:	3a6d6172 	.word	0x3a6d6172
   28720:	2c642520 	.word	0x2c642520
   28724:	76646120 	.word	0x76646120
   28728:	646e6148 	.word	0x646e6148
   2872c:	203a656c 	.word	0x203a656c
   28730:	00006425 	.word	0x00006425
   28734:	65536d44 	.word	0x65536d44
   28738:	6c614363 	.word	0x6c614363
   2873c:	626f4f63 	.word	0x626f4f63
   28740:	20716552 	.word	0x20716552
   28744:	0079654b 	.word	0x0079654b
   28748:	65536d44 	.word	0x65536d44
   2874c:	6c614363 	.word	0x6c614363
   28750:	626f4f63 	.word	0x626f4f63
   28754:	20716552 	.word	0x20716552
   28758:	646e6152 	.word	0x646e6152
   2875c:	00000000 	.word	0x00000000
   28760:	75626544 	.word	0x75626544
   28764:	454c2067 	.word	0x454c2067
   28768:	4b204353 	.word	0x4b204353
   2876c:	20737965 	.word	0x20737965
   28770:	62616e45 	.word	0x62616e45
   28774:	0064656c 	.word	0x0064656c
   28778:	d4f6493f 	.word	0xd4f6493f
   2877c:	385fc5a3 	.word	0x385fc5a3
   28780:	e3b3c974 	.word	0xe3b3c974
   28784:	503f10d2 	.word	0x503f10d2
   28788:	7b60ff4a 	.word	0x7b60ff4a
   2878c:	99b740eb 	.word	0x99b740eb
   28790:	a6b89958 	.word	0xa6b89958
   28794:	bd1a3ccd 	.word	0xbd1a3ccd
   28798:	d203b020 	.word	0xd203b020
   2879c:	2cbe97f2 	.word	0x2cbe97f2
   287a0:	a7832c5e 	.word	0xa7832c5e
   287a4:	b9a5f9e9 	.word	0xb9a5f9e9
   287a8:	1191f4ef 	.word	0x1191f4ef
   287ac:	dbfdf4ac 	.word	0xdbfdf4ac
   287b0:	480103cc 	.word	0x480103cc
   287b4:	e69d350e 	.word	0xe69d350e
   287b8:	499c80dc 	.word	0x499c80dc
   287bc:	6deb2a65 	.word	0x6deb2a65
   287c0:	bf9a3263 	.word	0xbf9a3263
   287c4:	5c15525a 	.word	0x5c15525a
   287c8:	c2456376 	.word	0xc2456376
   287cc:	2430ed8f 	.word	0x2430ed8f
   287d0:	d08e1c74 	.word	0xd08e1c74
   287d4:	8bd28915 	.word	0x8bd28915
   287d8:	2055544d 	.word	0x2055544d
   287dc:	20716572 	.word	0x20716572
   287e0:	63736964 	.word	0x63736964
   287e4:	65647261 	.word	0x65647261
   287e8:	00000064 	.word	0x00000064
   287ec:	63747461 	.word	0x63747461
   287f0:	6b6e7520 	.word	0x6b6e7520
   287f4:	6e776f6e 	.word	0x6e776f6e
   287f8:	63706f20 	.word	0x63706f20
   287fc:	2065646f 	.word	0x2065646f
   28800:	30257830 	.word	0x30257830
   28804:	00007832 	.word	0x00007832
   28808:	63747461 	.word	0x63747461
   2880c:	62636320 	.word	0x62636320
   28810:	746f6e20 	.word	0x746f6e20
   28814:	206e6920 	.word	0x206e6920
   28818:	3a657375 	.word	0x3a657375
   2881c:	00642520 	.word	0x00642520
   28820:	73747461 	.word	0x73747461
   28824:	4d636343 	.word	0x4d636343
   28828:	436e6961 	.word	0x436e6961
   2882c:	6b636162 	.word	0x6b636162
   28830:	6e6f6320 	.word	0x6e6f6320
   28834:	3d64496e 	.word	0x3d64496e
   28838:	68206425 	.word	0x68206425
   2883c:	6c646e61 	.word	0x6c646e61
   28840:	64253d65 	.word	0x64253d65
   28844:	00000000 	.word	0x00000000
   28848:	73747441 	.word	0x73747441
   2884c:	49636343 	.word	0x49636343
   28850:	5474696e 	.word	0x5474696e
   28854:	656c6261 	.word	0x656c6261
   28858:	6e6f6320 	.word	0x6e6f6320
   2885c:	3d64496e 	.word	0x3d64496e
   28860:	00006425 	.word	0x00006425
   28864:	73747441 	.word	0x73747441
   28868:	43636343 	.word	0x43636343
   2886c:	7261656c 	.word	0x7261656c
   28870:	6c626154 	.word	0x6c626154
   28874:	6f632065 	.word	0x6f632065
   28878:	64496e6e 	.word	0x64496e6e
   2887c:	0064253d 	.word	0x0064253d
   28880:	61746144 	.word	0x61746144
   28884:	65736162 	.word	0x65736162
   28888:	73616820 	.word	0x73616820
   2888c:	61632068 	.word	0x61632068
   28890:	6c75636c 	.word	0x6c75636c
   28894:	6f697461 	.word	0x6f697461
   28898:	6f63206e 	.word	0x6f63206e
   2889c:	656c706d 	.word	0x656c706d
   288a0:	00006574 	.word	0x00006574
   288a4:	636c6143 	.word	0x636c6143
   288a8:	74616c75 	.word	0x74616c75
   288ac:	20676e69 	.word	0x20676e69
   288b0:	61746164 	.word	0x61746164
   288b4:	65736162 	.word	0x65736162
   288b8:	73616820 	.word	0x73616820
   288bc:	00000068 	.word	0x00000068
   288c0:	6e6e6f43 	.word	0x6e6e6f43
   288c4:	25206449 	.word	0x25206449
   288c8:	68632064 	.word	0x68632064
   288cc:	65676e61 	.word	0x65676e61
   288d0:	61776120 	.word	0x61776120
   288d4:	73206572 	.word	0x73206572
   288d8:	65746174 	.word	0x65746174
   288dc:	20736920 	.word	0x20736920
   288e0:	00006425 	.word	0x00006425
   288e4:	6e6e6f43 	.word	0x6e6e6f43
   288e8:	25206449 	.word	0x25206449
   288ec:	756f2064 	.word	0x756f2064
   288f0:	666f2074 	.word	0x666f2074
   288f4:	6e797320 	.word	0x6e797320
   288f8:	50202c63 	.word	0x50202c63
   288fc:	77205544 	.word	0x77205544
   28900:	20687469 	.word	0x20687469
   28904:	6f63706f 	.word	0x6f63706f
   28908:	30206564 	.word	0x30206564
   2890c:	32302578 	.word	0x32302578
   28910:	67692078 	.word	0x67692078
   28914:	65726f6e 	.word	0x65726f6e
   28918:	00002164 	.word	0x00002164
   2891c:	6e6e6f63 	.word	0x6e6e6f63
   28920:	25206449 	.word	0x25206449
   28924:	70752064 	.word	0x70752064
   28928:	65746164 	.word	0x65746164
   2892c:	73632064 	.word	0x73632064
   28930:	6f742066 	.word	0x6f742066
   28934:	25783020 	.word	0x25783020
   28938:	00783230 	.word	0x00783230
   2893c:	73747461 	.word	0x73747461
   28940:	62636320 	.word	0x62636320
   28944:	746f6e20 	.word	0x746f6e20
   28948:	206e6920 	.word	0x206e6920
   2894c:	3a657375 	.word	0x3a657375
   28950:	00642520 	.word	0x00642520
   28954:	00002801 	.word	0x00002801
   28958:	42667357 	.word	0x42667357
   2895c:	6c416675 	.word	0x6c416675
   28960:	20636f6c 	.word	0x20636f6c
   28964:	6c696166 	.word	0x6c696166
   28968:	6c206465 	.word	0x6c206465
   2896c:	253a6e65 	.word	0x253a6e65
   28970:	00000075 	.word	0x00000075
   28974:	20465357 	.word	0x20465357
   28978:	656d6954 	.word	0x656d6954
   2897c:	00000072 	.word	0x00000072
   28980:	58323025 	.word	0x58323025
   28984:	00000020 	.word	0x00000020
   28988:	0000000a 	.word	0x0000000a
   2898c:	00000a0a 	.word	0x00000a0a
   28990:	2e2f2e2e 	.word	0x2e2f2e2e
   28994:	2e2e2f2e 	.word	0x2e2e2f2e
   28998:	2f2e2e2f 	.word	0x2f2e2e2f
   2899c:	742f2e2e 	.word	0x742f2e2e
   289a0:	64726968 	.word	0x64726968
   289a4:	7261705f 	.word	0x7261705f
   289a8:	652f7974 	.word	0x652f7974
   289ac:	74636178 	.word	0x74636178
   289b0:	772f656c 	.word	0x772f656c
   289b4:	732f6673 	.word	0x732f6673
   289b8:	6372756f 	.word	0x6372756f
   289bc:	702f7365 	.word	0x702f7365
   289c0:	2f74726f 	.word	0x2f74726f
   289c4:	65657266 	.word	0x65657266
   289c8:	736f7472 	.word	0x736f7472
   289cc:	6673772f 	.word	0x6673772f
   289d0:	6172745f 	.word	0x6172745f
   289d4:	632e6563 	.word	0x632e6563
   289d8:	00000000 	.word	0x00000000
   289dc:	4f525245 	.word	0x4f525245
   289e0:	48435f52 	.word	0x48435f52
   289e4:	5f4b4345 	.word	0x5f4b4345
   289e8:	44494f56 	.word	0x44494f56
   289ec:	5f6d6120 	.word	0x5f6d6120
   289f0:	5f6c6168 	.word	0x5f6c6168
   289f4:	5f656c62 	.word	0x5f656c62
   289f8:	74696e69 	.word	0x74696e69
   289fc:	696c6169 	.word	0x696c6169
   28a00:	3028657a 	.word	0x3028657a
   28a04:	4226202c 	.word	0x4226202c
   28a08:	0a29454c 	.word	0x0a29454c
   28a0c:	00000000 	.word	0x00000000
   28a10:	4f525245 	.word	0x4f525245
   28a14:	48435f52 	.word	0x48435f52
   28a18:	5f4b4345 	.word	0x5f4b4345
   28a1c:	44494f56 	.word	0x44494f56
   28a20:	5f6d6120 	.word	0x5f6d6120
   28a24:	5f6c6168 	.word	0x5f6c6168
   28a28:	5f656c62 	.word	0x5f656c62
   28a2c:	65776f70 	.word	0x65776f70
   28a30:	6f635f72 	.word	0x6f635f72
   28a34:	6f72746e 	.word	0x6f72746e
   28a38:	4c42286c 	.word	0x4c42286c
   28a3c:	41202c45 	.word	0x41202c45
   28a40:	41485f4d 	.word	0x41485f4d
   28a44:	4c425f4c 	.word	0x4c425f4c
   28a48:	4f505f45 	.word	0x4f505f45
   28a4c:	5f524557 	.word	0x5f524557
   28a50:	49544341 	.word	0x49544341
   28a54:	0a294556 	.word	0x0a294556
   28a58:	00000000 	.word	0x00000000
   28a5c:	4f525245 	.word	0x4f525245
   28a60:	48435f52 	.word	0x48435f52
   28a64:	5f4b4345 	.word	0x5f4b4345
   28a68:	44494f56 	.word	0x44494f56
   28a6c:	5f6d6120 	.word	0x5f6d6120
   28a70:	5f6c6168 	.word	0x5f6c6168
   28a74:	5f656c62 	.word	0x5f656c62
   28a78:	666e6f63 	.word	0x666e6f63
   28a7c:	42286769 	.word	0x42286769
   28a80:	202c454c 	.word	0x202c454c
   28a84:	6c427326 	.word	0x6c427326
   28a88:	6e6f4365 	.word	0x6e6f4365
   28a8c:	29676966 	.word	0x29676966
   28a90:	0000000a 	.word	0x0000000a
   28a94:	4f525245 	.word	0x4f525245
   28a98:	48435f52 	.word	0x48435f52
   28a9c:	5f4b4345 	.word	0x5f4b4345
   28aa0:	44494f56 	.word	0x44494f56
   28aa4:	5f6d6120 	.word	0x5f6d6120
   28aa8:	5f6c6168 	.word	0x5f6c6168
   28aac:	5f656c62 	.word	0x5f656c62
   28ab0:	65776f70 	.word	0x65776f70
   28ab4:	6f635f72 	.word	0x6f635f72
   28ab8:	6f72746e 	.word	0x6f72746e
   28abc:	4c42286c 	.word	0x4c42286c
   28ac0:	41202c45 	.word	0x41202c45
   28ac4:	41485f4d 	.word	0x41485f4d
   28ac8:	4c425f4c 	.word	0x4c425f4c
   28acc:	4f505f45 	.word	0x4f505f45
   28ad0:	5f524557 	.word	0x5f524557
   28ad4:	2946464f 	.word	0x2946464f
   28ad8:	0000000a 	.word	0x0000000a
   28adc:	4f525245 	.word	0x4f525245
   28ae0:	48435f52 	.word	0x48435f52
   28ae4:	5f4b4345 	.word	0x5f4b4345
   28ae8:	44494f56 	.word	0x44494f56
   28aec:	5f6d6120 	.word	0x5f6d6120
   28af0:	5f6c6168 	.word	0x5f6c6168
   28af4:	5f656c62 	.word	0x5f656c62
   28af8:	6e696564 	.word	0x6e696564
   28afc:	61697469 	.word	0x61697469
   28b00:	657a696c 	.word	0x657a696c
   28b04:	454c4228 	.word	0x454c4228
   28b08:	00000a29 	.word	0x00000a29
   28b0c:	00000004 	.word	0x00000004
   28b10:	00000020 	.word	0x00000020
   28b14:	00000020 	.word	0x00000020
   28b18:	00000002 	.word	0x00000002
   28b1c:	00000000 	.word	0x00000000
   28b20:	00000032 	.word	0x00000032
   28b24:	00010101 	.word	0x00010101
   28b28:	4f525245 	.word	0x4f525245
   28b2c:	48435f52 	.word	0x48435f52
   28b30:	5f4b4345 	.word	0x5f4b4345
   28b34:	44494f56 	.word	0x44494f56
   28b38:	49434820 	.word	0x49434820
   28b3c:	5652445f 	.word	0x5652445f
   28b40:	5f58525f 	.word	0x5f58525f
   28b44:	4b434150 	.word	0x4b434150
   28b48:	545f5445 	.word	0x545f5445
   28b4c:	4c5f4f4f 	.word	0x4c5f4f4f
   28b50:	45475241 	.word	0x45475241
   28b54:	0000000a 	.word	0x0000000a
   28b58:	6c6c6548 	.word	0x6c6c6548
   28b5c:	6f57206f 	.word	0x6f57206f
   28b60:	2c646c72 	.word	0x2c646c72
   28b64:	54414420 	.word	0x54414420
   28b68:	65682053 	.word	0x65682053
   28b6c:	0a216572 	.word	0x0a216572
   28b70:	0000000a 	.word	0x0000000a
   28b74:	6f6d654d 	.word	0x6f6d654d
   28b78:	70207972 	.word	0x70207972
   28b7c:	206c6f6f 	.word	0x206c6f6f
   28b80:	74207369 	.word	0x74207369
   28b84:	73206f6f 	.word	0x73206f6f
   28b88:	6c6c616d 	.word	0x6c6c616d
   28b8c:	20796220 	.word	0x20796220
   28b90:	0a0d6425 	.word	0x0a0d6425
   28b94:	00000000 	.word	0x00000000
   28b98:	69646152 	.word	0x69646152
   28b9c:	7361546f 	.word	0x7361546f
   28ba0:	73203a6b 	.word	0x73203a6b
   28ba4:	70757465 	.word	0x70757465
   28ba8:	00000a0d 	.word	0x00000a0d
   28bac:	72617453 	.word	0x72617453
   28bb0:	676e6974 	.word	0x676e6974
   28bb4:	63697720 	.word	0x63697720
   28bb8:	72746e65 	.word	0x72746e65
   28bbc:	74206369 	.word	0x74206369
   28bc0:	65636172 	.word	0x65636172
   28bc4:	000a0a3a 	.word	0x000a0a3a
   28bc8:	6e6e7552 	.word	0x6e6e7552
   28bcc:	20676e69 	.word	0x20676e69
   28bd0:	75746573 	.word	0x75746573
   28bd4:	61742070 	.word	0x61742070
   28bd8:	2e736b73 	.word	0x2e736b73
   28bdc:	0a0d2e2e 	.word	0x0a0d2e2e
   28be0:	00000000 	.word	0x00000000
   28be4:	69646152 	.word	0x69646152
   28be8:	7361546f 	.word	0x7361546f
   28bec:	0000006b 	.word	0x0000006b
   28bf0:	75746553 	.word	0x75746553
   28bf4:	00000070 	.word	0x00000070
   28bf8:	64766372 	.word	0x64766372
   28bfc:	74616420 	.word	0x74616420
   28c00:	6e6f2061 	.word	0x6e6f2061
   28c04:	65727520 	.word	0x65727520
   28c08:	74736967 	.word	0x74736967
   28c0c:	64657265 	.word	0x64657265
   28c10:	64696320 	.word	0x64696320
   28c14:	00000000 	.word	0x00000000
   28c18:	6e6b6e75 	.word	0x6e6b6e75
   28c1c:	206e776f 	.word	0x206e776f
   28c20:	3d646963 	.word	0x3d646963
   28c24:	30257830 	.word	0x30257830
   28c28:	00007834 	.word	0x00007834
   28c2c:	61766e49 	.word	0x61766e49
   28c30:	2064696c 	.word	0x2064696c
   28c34:	656c6f72 	.word	0x656c6f72
   28c38:	6e6f6320 	.word	0x6e6f6320
   28c3c:	75676966 	.word	0x75676966
   28c40:	69746172 	.word	0x69746172
   28c44:	203a6e6f 	.word	0x203a6e6f
   28c48:	656c6f72 	.word	0x656c6f72
   28c4c:	0064253d 	.word	0x0064253d
   28c50:	676e656c 	.word	0x676e656c
   28c54:	6d206874 	.word	0x6d206874
   28c58:	616d7369 	.word	0x616d7369
   28c5c:	3a686374 	.word	0x3a686374
   28c60:	63326c20 	.word	0x63326c20
   28c64:	2075253d 	.word	0x2075253d
   28c68:	3d696368 	.word	0x3d696368
   28c6c:	00007525 	.word	0x00007525
   28c70:	6e6e6f63 	.word	0x6e6e6f63
   28c74:	64707520 	.word	0x64707520
   28c78:	20657461 	.word	0x20657461
   28c7c:	20716572 	.word	0x20716572
   28c80:	656d6974 	.word	0x656d6974
   28c84:	0074756f 	.word	0x0074756f
   28c88:	61766e69 	.word	0x61766e69
   28c8c:	2064696c 	.word	0x2064696c
   28c90:	2067736d 	.word	0x2067736d
   28c94:	65646f63 	.word	0x65646f63
   28c98:	2064253a 	.word	0x2064253a
   28c9c:	3a6e656c 	.word	0x3a6e656c
   28ca0:	6c206425 	.word	0x6c206425
   28ca4:	654c6332 	.word	0x654c6332
   28ca8:	64253a6e 	.word	0x64253a6e
   28cac:	00000000 	.word	0x00000000
   28cb0:	73746164 	.word	0x73746164
   28cb4:	646e6553 	.word	0x646e6553
   28cb8:	61746144 	.word	0x61746144
   28cbc:	00000000 	.word	0x00000000
   28cc0:	73746164 	.word	0x73746164
   28cc4:	43545441 	.word	0x43545441
   28cc8:	6b636162 	.word	0x6b636162
   28ccc:	00000000 	.word	0x00000000
   28cd0:	6c696146 	.word	0x6c696146
   28cd4:	74206465 	.word	0x74206465
   28cd8:	6573206f 	.word	0x6573206f
   28cdc:	6420646e 	.word	0x6420646e
   28ce0:	2c617461 	.word	0x2c617461
   28ce4:	72726520 	.word	0x72726520
   28ce8:	3020726f 	.word	0x3020726f
   28cec:	00782578 	.word	0x00782578
   28cf0:	73746164 	.word	0x73746164
   28cf4:	43636343 	.word	0x43636343
   28cf8:	6b636162 	.word	0x6b636162
   28cfc:	00000000 	.word	0x00000000
   28d00:	73746164 	.word	0x73746164
   28d04:	72577057 	.word	0x72577057
   28d08:	43657469 	.word	0x43657469
   28d0c:	6b636162 	.word	0x6b636162
   28d10:	6325203a 	.word	0x6325203a
   28d14:	00000000 	.word	0x00000000
   28d18:	6f67654e 	.word	0x6f67654e
   28d1c:	74616974 	.word	0x74616974
   28d20:	4d206465 	.word	0x4d206465
   28d24:	25205554 	.word	0x25205554
   28d28:	00000064 	.word	0x00000064
   28d2c:	73746144 	.word	0x73746144
   28d30:	646e6148 	.word	0x646e6148
   28d34:	4972656c 	.word	0x4972656c
   28d38:	0074696e 	.word	0x0074696e
   28d3c:	73746164 	.word	0x73746164
   28d40:	436e7442 	.word	0x436e7442
   28d44:	6b636162 	.word	0x6b636162
   28d48:	00000000 	.word	0x00000000
   28d4c:	73746144 	.word	0x73746144
   28d50:	746f6720 	.word	0x746f6720
   28d54:	46535720 	.word	0x46535720
   28d58:	66754220 	.word	0x66754220
   28d5c:	20726566 	.word	0x20726566
   28d60:	6f6c6c41 	.word	0x6f6c6c41
   28d64:	69746163 	.word	0x69746163
   28d68:	46206e6f 	.word	0x46206e6f
   28d6c:	756c6961 	.word	0x756c6961
   28d70:	2d206572 	.word	0x2d206572
   28d74:	73615420 	.word	0x73615420
   28d78:	25203a6b 	.word	0x25203a6b
   28d7c:	654c2064 	.word	0x654c2064
   28d80:	25203a6e 	.word	0x25203a6e
   28d84:	00000064 	.word	0x00000064
   28d88:	73746144 	.word	0x73746144
   28d8c:	746f6720 	.word	0x746f6720
   28d90:	74766520 	.word	0x74766520
   28d94:	00642520 	.word	0x00642520
   28d98:	73746144 	.word	0x73746144
   28d9c:	72617453 	.word	0x72617453
   28da0:	00000074 	.word	0x00000074
   28da4:	203e3e3e 	.word	0x203e3e3e
   28da8:	65736552 	.word	0x65736552
   28dac:	6f632074 	.word	0x6f632074
   28db0:	656c706d 	.word	0x656c706d
   28db4:	3c206574 	.word	0x3c206574
   28db8:	00003c3c 	.word	0x00003c3c
   28dbc:	203e3e3e 	.word	0x203e3e3e
   28dc0:	65766441 	.word	0x65766441
   28dc4:	73697472 	.word	0x73697472
   28dc8:	20676e69 	.word	0x20676e69
   28dcc:	72617473 	.word	0x72617473
   28dd0:	20646574 	.word	0x20646574
   28dd4:	003c3c3c 	.word	0x003c3c3c
   28dd8:	203e3e3e 	.word	0x203e3e3e
   28ddc:	65766441 	.word	0x65766441
   28de0:	73697472 	.word	0x73697472
   28de4:	20676e69 	.word	0x20676e69
   28de8:	706f7473 	.word	0x706f7473
   28dec:	20646570 	.word	0x20646570
   28df0:	003c3c3c 	.word	0x003c3c3c
   28df4:	203e3e3e 	.word	0x203e3e3e
   28df8:	6e616353 	.word	0x6e616353
   28dfc:	676e696e 	.word	0x676e696e
   28e00:	61747320 	.word	0x61747320
   28e04:	64657472 	.word	0x64657472
   28e08:	3c3c3c20 	.word	0x3c3c3c20
   28e0c:	00000000 	.word	0x00000000
   28e10:	203e3e3e 	.word	0x203e3e3e
   28e14:	6e616353 	.word	0x6e616353
   28e18:	676e696e 	.word	0x676e696e
   28e1c:	6f747320 	.word	0x6f747320
   28e20:	64657070 	.word	0x64657070
   28e24:	3c3c3c20 	.word	0x3c3c3c20
   28e28:	00000000 	.word	0x00000000
   28e2c:	203e3e3e 	.word	0x203e3e3e
   28e30:	6e616353 	.word	0x6e616353
   28e34:	74616420 	.word	0x74616420
   28e38:	65722061 	.word	0x65722061
   28e3c:	76696563 	.word	0x76696563
   28e40:	66206465 	.word	0x66206465
   28e44:	206d6f72 	.word	0x206d6f72
   28e48:	72656570 	.word	0x72656570
   28e4c:	3c3c3c20 	.word	0x3c3c3c20
   28e50:	00000000 	.word	0x00000000
   28e54:	203e3e3e 	.word	0x203e3e3e
   28e58:	6e6e6f43 	.word	0x6e6e6f43
   28e5c:	69746365 	.word	0x69746365
   28e60:	6f206e6f 	.word	0x6f206e6f
   28e64:	656e6570 	.word	0x656e6570
   28e68:	3c3c2064 	.word	0x3c3c2064
   28e6c:	0000003c 	.word	0x0000003c
   28e70:	203e3e3e 	.word	0x203e3e3e
   28e74:	6e6e6f43 	.word	0x6e6e6f43
   28e78:	69746365 	.word	0x69746365
   28e7c:	63206e6f 	.word	0x63206e6f
   28e80:	65736f6c 	.word	0x65736f6c
   28e84:	3c3c2064 	.word	0x3c3c2064
   28e88:	0000003c 	.word	0x0000003c
   28e8c:	203e3e3e 	.word	0x203e3e3e
   28e90:	72696150 	.word	0x72696150
   28e94:	20676e69 	.word	0x20676e69
   28e98:	706d6f63 	.word	0x706d6f63
   28e9c:	6574656c 	.word	0x6574656c
   28ea0:	75732064 	.word	0x75732064
   28ea4:	73656363 	.word	0x73656363
   28ea8:	6c756673 	.word	0x6c756673
   28eac:	3c20796c 	.word	0x3c20796c
   28eb0:	00003c3c 	.word	0x00003c3c
   28eb4:	203e3e3e 	.word	0x203e3e3e
   28eb8:	72696150 	.word	0x72696150
   28ebc:	20676e69 	.word	0x20676e69
   28ec0:	6c696166 	.word	0x6c696166
   28ec4:	3c206465 	.word	0x3c206465
   28ec8:	00003c3c 	.word	0x00003c3c
   28ecc:	203e3e3e 	.word	0x203e3e3e
   28ed0:	6e6e6f43 	.word	0x6e6e6f43
   28ed4:	69746365 	.word	0x69746365
   28ed8:	65206e6f 	.word	0x65206e6f
   28edc:	7972636e 	.word	0x7972636e
   28ee0:	64657470 	.word	0x64657470
   28ee4:	3c3c3c20 	.word	0x3c3c3c20
   28ee8:	00000000 	.word	0x00000000
   28eec:	203e3e3e 	.word	0x203e3e3e
   28ef0:	72636e45 	.word	0x72636e45
   28ef4:	69747079 	.word	0x69747079
   28ef8:	66206e6f 	.word	0x66206e6f
   28efc:	656c6961 	.word	0x656c6961
   28f00:	3c3c2064 	.word	0x3c3c2064
   28f04:	0000003c 	.word	0x0000003c
   28f08:	203e3e3e 	.word	0x203e3e3e
   28f0c:	6d6f7250 	.word	0x6d6f7250
   28f10:	75207470 	.word	0x75207470
   28f14:	20726573 	.word	0x20726573
   28f18:	65206f74 	.word	0x65206f74
   28f1c:	7265746e 	.word	0x7265746e
   28f20:	73617020 	.word	0x73617020
   28f24:	79656b73 	.word	0x79656b73
   28f28:	3c3c3c20 	.word	0x3c3c3c20
   28f2c:	00000000 	.word	0x00000000
   28f30:	203e3e3e 	.word	0x203e3e3e
   28f34:	636e6143 	.word	0x636e6143
   28f38:	61206c65 	.word	0x61206c65
   28f3c:	776f6c20 	.word	0x776f6c20
   28f40:	20726f20 	.word	0x20726f20
   28f44:	68676968 	.word	0x68676968
   28f48:	656c6120 	.word	0x656c6120
   28f4c:	3c207472 	.word	0x3c207472
   28f50:	00003c3c 	.word	0x00003c3c
   28f54:	203e3e3e 	.word	0x203e3e3e
   28f58:	20776f4c 	.word	0x20776f4c
   28f5c:	72656c61 	.word	0x72656c61
   28f60:	3c3c2074 	.word	0x3c3c2074
   28f64:	0000003c 	.word	0x0000003c
   28f68:	203e3e3e 	.word	0x203e3e3e
   28f6c:	68676948 	.word	0x68676948
   28f70:	656c6120 	.word	0x656c6120
   28f74:	3c207472 	.word	0x3c207472
   28f78:	00003c3c 	.word	0x00003c3c
   28f7c:	203e3e3e 	.word	0x203e3e3e
   28f80:	65766441 	.word	0x65766441
   28f84:	73697472 	.word	0x73697472
   28f88:	20676e69 	.word	0x20676e69
   28f8c:	73746573 	.word	0x73746573
   28f90:	61747320 	.word	0x61747320
   28f94:	64657472 	.word	0x64657472
   28f98:	3c3c3c20 	.word	0x3c3c3c20
   28f9c:	00000000 	.word	0x00000000
   28fa0:	203e3e3e 	.word	0x203e3e3e
   28fa4:	65766441 	.word	0x65766441
   28fa8:	73697472 	.word	0x73697472
   28fac:	20676e69 	.word	0x20676e69
   28fb0:	73746573 	.word	0x73746573
   28fb4:	6f747320 	.word	0x6f747320
   28fb8:	64657070 	.word	0x64657070
   28fbc:	3c3c3c20 	.word	0x3c3c3c20
   28fc0:	00000000 	.word	0x00000000
   28fc4:	203e3e3e 	.word	0x203e3e3e
   28fc8:	6e616353 	.word	0x6e616353
   28fcc:	71657220 	.word	0x71657220
   28fd0:	74736575 	.word	0x74736575
   28fd4:	63657220 	.word	0x63657220
   28fd8:	65766965 	.word	0x65766965
   28fdc:	3c3c2064 	.word	0x3c3c2064
   28fe0:	0000003c 	.word	0x0000003c
   28fe4:	203e3e3e 	.word	0x203e3e3e
   28fe8:	65747845 	.word	0x65747845
   28fec:	6465646e 	.word	0x6465646e
   28ff0:	61637320 	.word	0x61637320
   28ff4:	6e696e6e 	.word	0x6e696e6e
   28ff8:	74732067 	.word	0x74732067
   28ffc:	65747261 	.word	0x65747261
   29000:	3c3c2064 	.word	0x3c3c2064
   29004:	0000003c 	.word	0x0000003c
   29008:	203e3e3e 	.word	0x203e3e3e
   2900c:	65747845 	.word	0x65747845
   29010:	6465646e 	.word	0x6465646e
   29014:	61637320 	.word	0x61637320
   29018:	6e696e6e 	.word	0x6e696e6e
   2901c:	74732067 	.word	0x74732067
   29020:	6570706f 	.word	0x6570706f
   29024:	3c3c2064 	.word	0x3c3c2064
   29028:	0000003c 	.word	0x0000003c
   2902c:	203e3e3e 	.word	0x203e3e3e
   29030:	69726550 	.word	0x69726550
   29034:	6369646f 	.word	0x6369646f
   29038:	76646120 	.word	0x76646120
   2903c:	69747265 	.word	0x69747265
   29040:	676e6973 	.word	0x676e6973
   29044:	74657320 	.word	0x74657320
   29048:	61747320 	.word	0x61747320
   2904c:	64657472 	.word	0x64657472
   29050:	3c3c3c20 	.word	0x3c3c3c20
   29054:	00000000 	.word	0x00000000
   29058:	203e3e3e 	.word	0x203e3e3e
   2905c:	69726550 	.word	0x69726550
   29060:	6369646f 	.word	0x6369646f
   29064:	76646120 	.word	0x76646120
   29068:	69747265 	.word	0x69747265
   2906c:	676e6973 	.word	0x676e6973
   29070:	74657320 	.word	0x74657320
   29074:	6f747320 	.word	0x6f747320
   29078:	64657070 	.word	0x64657070
   2907c:	3c3c3c20 	.word	0x3c3c3c20
   29080:	00000000 	.word	0x00000000
   29084:	203e3e3e 	.word	0x203e3e3e
   29088:	69726550 	.word	0x69726550
   2908c:	6369646f 	.word	0x6369646f
   29090:	76646120 	.word	0x76646120
   29094:	69747265 	.word	0x69747265
   29098:	676e6973 	.word	0x676e6973
   2909c:	6e797320 	.word	0x6e797320
   290a0:	73652063 	.word	0x73652063
   290a4:	6c626174 	.word	0x6c626174
   290a8:	65687369 	.word	0x65687369
   290ac:	3c3c2064 	.word	0x3c3c2064
   290b0:	0000003c 	.word	0x0000003c
   290b4:	203e3e3e 	.word	0x203e3e3e
   290b8:	69726550 	.word	0x69726550
   290bc:	6369646f 	.word	0x6369646f
   290c0:	76646120 	.word	0x76646120
   290c4:	69747265 	.word	0x69747265
   290c8:	676e6973 	.word	0x676e6973
   290cc:	6e797320 	.word	0x6e797320
   290d0:	6f6c2063 	.word	0x6f6c2063
   290d4:	3c207473 	.word	0x3c207473
   290d8:	00003c3c 	.word	0x00003c3c
   290dc:	203e3e3e 	.word	0x203e3e3e
   290e0:	73736150 	.word	0x73736150
   290e4:	3a79656b 	.word	0x3a79656b
   290e8:	20642520 	.word	0x20642520
   290ec:	003c3c3c 	.word	0x003c3c3c
   290f0:	203e3e3e 	.word	0x203e3e3e
   290f4:	666e6f43 	.word	0x666e6f43
   290f8:	206d7269 	.word	0x206d7269
   290fc:	756c6156 	.word	0x756c6156
   29100:	25203a65 	.word	0x25203a65
   29104:	3c3c2064 	.word	0x3c3c2064
   29108:	0000003c 	.word	0x0000003c
   2910c:	203e3e3e 	.word	0x203e3e3e
   29110:	49535352 	.word	0x49535352
   29114:	6425203a 	.word	0x6425203a
   29118:	6d426420 	.word	0x6d426420
   2911c:	3c3c3c20 	.word	0x3c3c3c20
   29120:	00000000 	.word	0x00000000
   29124:	0a0a0a0a 	.word	0x0a0a0a0a
   29128:	0a0a0a0a 	.word	0x0a0a0a0a
   2912c:	0a0a0a0a 	.word	0x0a0a0a0a
   29130:	0a0a0a0a 	.word	0x0a0a0a0a
   29134:	00000a0a 	.word	0x00000a0a
   29138:	454c4449 	.word	0x454c4449
   2913c:	00000000 	.word	0x00000000
   29140:	20726d54 	.word	0x20726d54
   29144:	00637653 	.word	0x00637653
   29148:	20707041 	.word	0x20707041
   2914c:	20746f67 	.word	0x20746f67
   29150:	20747665 	.word	0x20747665
   29154:	00006425 	.word	0x00006425
   29158:	61656c43 	.word	0x61656c43
   2915c:	6f622072 	.word	0x6f622072
   29160:	6e69646e 	.word	0x6e69646e
   29164:	6e692067 	.word	0x6e692067
   29168:	00006f66 	.word	0x00006f66
   2916c:	61766e49 	.word	0x61766e49
   29170:	2064696c 	.word	0x2064696c
   29174:	61204d44 	.word	0x61204d44
   29178:	72657664 	.word	0x72657664
   2917c:	69736974 	.word	0x69736974
   29180:	6d20676e 	.word	0x6d20676e
   29184:	3b65646f 	.word	0x3b65646f
   29188:	646f6d20 	.word	0x646f6d20
   2918c:	6f632065 	.word	0x6f632065
   29190:	6769666e 	.word	0x6769666e
   29194:	64657275 	.word	0x64657275
   29198:	20736120 	.word	0x20736120
   2919c:	65747865 	.word	0x65747865
   291a0:	6465646e 	.word	0x6465646e
	...

000291ac <smprScActionTbl>:
   291ac:	0000d005 0000f0cf 0000f0ed 0000f10d     ................
   291bc:	0000c97d 0000d121 0000c901 0000d3ed     }...!...........
   291cc:	0000d427 0000d449 0000d4a9 0000d4df     '...I...........
   291dc:	0000d94b 0000da1b 0000d9e3 0000d99f     K...............
   291ec:	0000d9c1 0000d98b 0000c3d1 0000c419     ................
   291fc:	0000c4e5 0000c5d9 0000c99d 0000ca09     ................
   2920c:	0000ca39 0000ca69 0000f1d1 0000f41d     9...i...........
   2921c:	0000f48b 0000ca9b 0000cac5 0000cae5     ................
   2922c:	0000cb05 0000cb75 0000cba5 0000cbfd     ....u...........
   2923c:	0000cca9 0000ccbd 0000cd69 0000cdf9     ........i.......
   2924c:	0000ce2b 0000ce5f 0000f595 0000f619     +..._...........
   2925c:	0000f6ed 0000f7b9 0000f891 0000ce9d     ................
   2926c:	0000c609 0000c645 0000c6d5 0000c76b     ....E.......k...
   2927c:	0000c8b5 0000c7d5                       ........

00029284 <smprScStateTblCommon>:
   29284:	0702000a 00030200 02270f03 00000000     ..........'.....

00029294 <smprScStateTblIdle>:
   29294:	0a120105 02060100 00000713 0f010003     ................
	...

000292ac <smprScStateTblApiPairReq>:
   292ac:	0601000a 00071302 01000302 09010008     ................
   292bc:	00000100 00000000                       ........

000292c4 <smprScStateTblApiPairRsp>:
   292c4:	00140302 00000000                       ........

000292cc <smprScStateTblModeSelect>:
   292cc:	12000511 0000001c 00000000              ............

000292d8 <smprScStateTblLescPin>:
   292d8:	00060404 00000000                       ........

000292e0 <smprScStateTblPubKey>:
   292e0:	00040606 00000000                       ........

000292e8 <smprScStateTblAuthSelect>:
   292e8:	14160713 14151a0c 00000024              ........$...

000292f4 <smprScStateTblJwNcSetup>:
   292f4:	0017081c 00000000                       ........

000292fc <smprScStateTblJwNcWaitRand>:
   292fc:	00180906 00000000                       ........

00029304 <smprScStateTblJwNcCalcG2>:
   29304:	00190a1c 00000000                       ........

0002930c <smprScStateTblJwNcWaitUser>:
   2930c:	06281516 260d270b 0000000c              ..(..'.&....

00029318 <smprScStateTblJwNcWaitUserDhCheckRcvd>:
   29318:	0d291616 00000c26 00000000              ..).&.......

00029324 <smprScStateTblPassKeyKeypress>:
   29324:	1e1b0c06 0c171d0d 060e041c 00000000     ................

00029334 <smprScStateTblPassWaitAuthRsp>:
   29334:	001f0f04 00000000                       ........

0002933c <smprScStateTblPasskeyWaitCnf>:
   2933c:	001e0f06 00000000                       ........

00029344 <smprScStateTblPasskeyCalc>:
   29344:	0021101c 00000000                       ..!.....

0002934c <smprScStateTblPasskeyRand>:
   2934c:	00221106 00000000                       ..".....

00029354 <smprScStateTblPasskeyCheck>:
   29354:	0023121c 00000000                       ..#.....

0002935c <smprScStateTblPasskeyRepeat>:
   2935c:	1b000e1a 260d2815 0000000c              .....(.&....

00029368 <smprScStateTblOobWaitRand>:
   29368:	00251306 00000000                       ..%.....

00029370 <smprScStateTblOobSendRand>:
   29370:	0026151c 00000000                       ..&.....

00029378 <smprScStateTblWaitDhCheck>:
   29378:	0d291606 00000c26 00000000              ..).&.......

00029384 <smprScStateTblCalcDHKey>:
   29384:	002a1719 00000000                       ..*.....

0002938c <smprScStateTblCalcF5TKey>:
   2938c:	0d2b181c 00000c26 00000000              ..+.&.......

00029398 <smprScStateTblCalcF5MacKey>:
   29398:	002c191c 00000000                       ..,.....

000293a0 <smprScStateTblCalcF5LTK>:
   293a0:	002d1a1c 00000000                       ..-.....

000293a8 <smprScStateTblDhCalcF6Ea>:
   293a8:	002e1b1c 00000000                       ........

000293b0 <smprScStateTblDhCalcF6Eb>:
   293b0:	002f241c 00000000                       .$/.....

000293b8 <smprStateTblPinPair1>:
   293b8:	06051d04 0000151d 00000000              ............

000293c4 <smprStateTblPinPair2>:
   293c4:	06071e04 0000301e 00000000              .....0......

000293d0 <smprStateTblCnfCalc1>:
   293d0:	00081f0b 00000000                       ........

000293d8 <smprStateTblCnfCalc2>:
   293d8:	0009200b 00000000                       . ......

000293e0 <smprStateTblPairRand>:
   293e0:	000a2106 00000000                       .!......

000293e8 <smprStateTblCnfVerCalc1>:
   293e8:	000b220b 00000000                       ."......

000293f0 <smprStateTblCnfVerCalc2>:
   293f0:	0031230b 00000000                       .#1.....

000293f8 <smprScStateTblStkCalc>:
   293f8:	0d32240b 00000c26 00000000              .$2.&.......

00029404 <smprScStateTblEncrypt>:
   29404:	09332508 24030200 03001d00 000c260d     .%3....$.....&..
   29414:	00000000                                ....

00029418 <smprScStateTblKeyDist>:
   29418:	0c342506 000e3525 0025030d 00000000     .%4.%5....%.....

00029428 <smprScStateTblAttempts>:
   29428:	0f0e0010 26060227 0f000511 0301000a     ....'..&........
   29438:	26070100 00000000                       ...&....

00029440 <smprScStateTblRspTo>:
   29440:	0701000a 27030027 00270f00 00102705     ....'..'..'..'..
   29450:	00000000                                ....

00029454 <smprScStateTbl>:
   29454:	00029294 000292ac 000292c4 000292cc     ................
   29464:	000292e0 000292d8 000292e8 000292f4     ................
   29474:	000292fc 00029304 0002930c 00029318     ................
   29484:	00029324 00029334 0002933c 00029344     $...4...<...D...
   29494:	0002934c 00029354 0002935c 00029370     L...T...\...p...
   294a4:	00029368 00029378 00029384 0002938c     h...x...........
   294b4:	00029398 000293a0 000293a8 000293b0     ................
   294c4:	000293b8 000293c4 000293d0 000293d8     ................
   294d4:	000293e0 000293e8 000293f0 000293f8     ................
   294e4:	00029404 00029418 00029428 00029440     ........(...@...

000294f4 <smprScSmIf>:
   294f4:	00029454 000291ac 00029284              T...........

00029500 <smprActionTbl>:
   29500:	0000d005 0000d06f 0000d0cb 0000d0fd     ....o...........
   29510:	0000d121 0000d3ed 0000d427 0000d449     !.......'...I...
   29520:	0000d4a9 0000d4df 0000d94b 0000d98b     ........K.......
   29530:	0000d9e3 0000d99f 0000d9c1 0000da1b     ................
   29540:	0000c3d1 0000c419 0000c4e5 0000c5d9     ................
   29550:	0000c609 0000c645 0000c6d5 0000c76b     ....E.......k...
   29560:	0000c7d5 0000c8b5                       ........

00029568 <smprStateTblCommon>:
   29568:	0702000a 00030200 020e0f03 00000000     ................

00029578 <smprStateTblIdle>:
   29578:	0a100105 02060100 00000711 0f010003     ................
	...

00029590 <smprStateTblApiPairReq>:
   29590:	0601000a 00071102 01000302 09010008     ................
   295a0:	00000100 00000000                       ........

000295a8 <smprStateTblApiPairRsp>:
   295a8:	00120302 00000000                       ........

000295b0 <smprStateTblPinPair1>:
   295b0:	06040404 00001304 00000000              ............

000295bc <smprStateTblPinPair2>:
   295bc:	06050504 00001405 00000000              ............

000295c8 <smprStateTblCnfCalc1>:
   295c8:	0006060b 00000000                       ........

000295d0 <smprStateTblCnfCalc2>:
   295d0:	0007070b 00000000                       ........

000295d8 <smprStateTblPairRand>:
   295d8:	00080806 00000000                       ........

000295e0 <smprStateTblCnfVerCalc1>:
   295e0:	0009090b 00000000                       ........

000295e8 <smprStateTblCnfVerCalc2>:
   295e8:	00150a0b 00000000                       ........

000295f0 <smprStateTblStkCalc>:
   295f0:	0d160b0b 00000a0d 00000000              ............

000295fc <smprStateTblEncrypt>:
   295fc:	09170c08 0b030200 00000000              ............

00029608 <smprStateTblKeyDist>:
   29608:	06180c0c 000e190c 000c030f 00000000     ................

00029618 <smprStateTblAttempts>:
   29618:	0f0c0010 0d06020e 0d00050b 0301000a     ................
   29628:	0d070100 00000000                       ........

00029630 <smprStateTblRspTo>:
   29630:	0701000a 0e03000e 000e0f00 000e0e05     ................
   29640:	00000000                                ....

00029644 <smprStateTbl>:
   29644:	00029578 00029590 000295a8 000295b0     x...............
   29654:	000295bc 000295c8 000295d0 000295d8     ................
   29664:	000295e0 000295e8 000295f0 000295fc     ................
   29674:	00029608 00029618 00029630              ........0...

00029680 <smprSmIf>:
   29680:	00029644 00029500 00029568              D.......h...

0002968c <smpPktLenTbl>:
   2968c:	11070700 0b110211 02110811 00021141     ............A...

0002969c <smpScF5Key>:
   2969c:	656c7462                                btle

000296a0 <dmAdvAct>:
   296a0:	00010549 000105a1 000105f5 0001064d     I...........M...
   296b0:	0001069d 000106a7 000106b1 000106bd     ................

000296c0 <dmAdvFcnIf>:
   296c0:	000106ed 00010739 0001086d              ....9...m...

000296cc <dmConnSpecDefaults>:
   296cc:	00280018 07d00000 00000000              ..(.........

000296d8 <dmConnActSetMain>:
   296d8:	00010cc9 00010cd5 00010cf5 00010de5     ................
   296e8:	00010e3d 00010e89                       =.......

000296f0 <dmConnFcnIf>:
   296f0:	00010ead 00010faf 00010f85              ............

000296fc <dmConn2FcnIf>:
   296fc:	00011e91 00011119 00011051              ........Q...

00029708 <dmConnActSetSlave>:
   29708:	00011b01 00011b25 000119dd 00011b41     ....%.......A...
   29718:	00011b5d 00011a41                       ]...A...

00029720 <dmConnStateTbl>:
   29720:	00001001 00002002 00000000 00000000     ..... ..........
   29730:	00002303 00000000 00010000 00011104     .#..............
   29740:	00010001 00010001 02030300 00010300     ................
   29750:	00010001 21000002 00020002 00020002     .......!........
   29760:	24000002 24002303 00020002 00030002     ...$.#.$........
   29770:	00030104 22031203 25031303 00030003     ......."...%....
   29780:	05030400 05030003 00040004 00040004     ................
   29790:	00040004 04000004 04000104 00040004     ................
   297a0:	00000004                                ....

000297a4 <dmDevFcnIf>:
   297a4:	00011e91 00011cf9 00011d31              ........1...

000297b0 <dmHciToIdTbl>:
   297b0:	03030307 04020303 04040404 05050505     ................
   297c0:	07070705 06060607 05060606 07040405     ................
   297d0:	04070407 04050504 09090904 00000202     ................
   297e0:	070b0b0b 00020002 0c0b010a 0d0d0d0c     ................
   297f0:	0d0d0d0d                                ....

000297f4 <dmEvtCbackLen>:
   297f4:	00040004 000c0004 00040004 0024001c     ..............$.
   29804:	000e000a 00040006 00040006 00220006     ..............".
   29814:	00080010 00240006 00140064 00040006     ......$.d.......
   29824:	000a000a 00060006 000c0006 0006000c     ................
   29834:	000e000e 00060008 0006000a 0006000a     ................
   29844:	000c000a 00040004 00060024 00160006     ........$.......
   29854:	00060016 001a001a 00080008 00100010     ................
   29864:	001c000e 00080008 00080008 00080008     ................
   29874:	00080008 0008000a 00060004 00000006     ................

00029884 <dmFcnDefault>:
   29884:	00011e91 00011e95 00011e95              ............

00029890 <dmPrivAct>:
   29890:	00012055 000120e1 00012135 00012175     U ... ..5!..u!..
   298a0:	000121a5 000121b7 000121d3 000121f9     .!...!...!...!..
   298b0:	0001228d                                ."..

000298b4 <dmPrivFcnIf>:
   298b4:	00012439 000122ed 00012415              9$..."...$..

000298c0 <dmSecFcnIf>:
   298c0:	000128a5 00012599 000126bd              .(...%...&..

000298cc <dmSecLescFcnIf>:
   298cc:	00011e91 00011e95 000128b1              .........(..

000298d8 <attcFcnIf>:
   298d8:	000137f1 00013871 000139d5 000138b1     .7..q8...9...8..

000298e8 <attcSendReqTbl>:
   298e8:	00000000 000135e1 000134d9 000134d9     .....5...4...4..
   298f8:	000134d9 00013485 000134d9 00013485     .4...4...4...4..
   29908:	000134d9 00013485 00013631 00013675     .4...4..16..u6..
   29918:	00013485                                .4..

0002991c <attcProcRspTbl>:
   2991c:	00013cd9 00013d69 00013de1 000143b5     .<..i=...=...C..
   2992c:	00013de1 00013f89 000144c7 00013f89     .=...?...D...?..
   2993c:	00013de1 00013f9d 00000000 00014509     .=...?.......E..
   2994c:	00013f9d                                .?..

00029950 <attsIndFcnIf>:
   29950:	00017807 000150e7 00015021 00014fa5     .x...P..!P...O..

00029960 <attsFcnIf>:
   29960:	00015419 0001562d 000155cd 00015581     .T..-V...U...U..

00029970 <attsMinPduLen>:
   29970:	07050300 05050305 05030305 01000002     ................
   29980:	0000000f                                ....

00029984 <attFcnDefault>:
   29984:	00017807 000177f1 000177f1 000177fb     .x...w...w...w..

00029994 <attPrimSvcUuid>:
   29994:	00002800                                .(..

00029998 <attChUuid>:
   29998:	00002803                                .(..

0002999c <attCliChCfgUuid>:
   2999c:	00002902                                .)..

000299a0 <attApChUuid>:
   299a0:	00002a01                                .*..

000299a4 <attScChUuid>:
   299a4:	00002a05                                .*..

000299a8 <attCarChUuid>:
   299a8:	00002aa6                                .*..

000299ac <attRpaoChUuid>:
   299ac:	00002ac9                                .*..

000299b0 <attGattCsfChUuid>:
   299b0:	00002b29                                )+..

000299b4 <attGattDbhChUuid>:
   299b4:	00002b2a                                *+..

000299b8 <attCfg>:
   299b8:	0000000f 041e01e0                       ........

000299c0 <smpCfg>:
   299c0:	000001f4 01100703 00000000 0000fa00     ................
   299d0:	0000fa00 00000002                       ........

000299d8 <curve_p>:
   299d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   299f0:	00000001 ffffffff                       ........

000299f8 <curve_b>:
   299f8:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
   29a08:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

00029a18 <curve_G>:
   29a18:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
   29a28:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
   29a38:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
   29a48:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O

00029a58 <curve_n>:
   29a58:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
   29a68:	ffffffff ffffffff 00000000 ffffffff     ................

00029a78 <calc128Zeros>:
	...

00029a88 <datsAdvCfg>:
   29a88:	00007530 00600000 00000640              0u....`.@...

00029a94 <datsSlaveCfg>:
   29a94:	00000001                                ....

00029a98 <datsSecCfg>:
   29a98:	00030209 00000001                       ........

00029aa0 <datsSmpCfg>:
   29aa0:	00000bb8 03100703 00000000 00000000     ................
	...

00029ab8 <datsUpdateCfg>:
   29ab8:	000007d0 00a00096 02580004 00000005     ..........X.....

00029ac8 <datsAdvDataDisc>:
   29ac8:	03060102 00005fff                       ....._..

00029ad0 <datsScanDataDisc>:
   29ad0:	61440908 54206174 00000058              ..Data TX...

00029adc <datsCccSet>:
   29adc:	00020013 02030000 00000001              ............

00029ae8 <hciEventMask>:
   29ae8:	02008890 20008000                       ....... 

00029af0 <hciLeEventMask>:
   29af0:	000fffff 00000000                       ........

00029af8 <hciEventMaskPage2>:
   29af8:	00800000 00000000                       ........

00029b00 <hciEvtParseFcnTbl>:
   29b00:	00000000 0001e521 0001e625 0001e731     ....!...%...1...
   29b10:	0001e78b 0001e839 00000000 0001e85f     ....9......._...
   29b20:	0001e8bb 0001e91b 0001e967 0001ea01     ........g.......
   29b30:	0001ea61 0001eaaf 0001eafd 0001eb4b     a...........K...
   29b40:	0001eba5 0001ec17 0001ec49 0001eca3     ........I.......
   29b50:	0001ecc9 0001ed57 0001ed7d 0001eda3     ....W...}.......
   29b60:	0001edc9 0001ee05 0001ee41 0001ece7     ........A.......
   29b70:	0001ed1f 0001ee67 0001eeb5 0001ef03     ....g...........
   29b80:	0001ef69 0001ef8f 0001efdd 0001f083     i...............
   29b90:	0001f13d 0001f1f7 0001f22f 0001f267     =......./...g...
   29ba0:	0001f2b5 0001f2ef 0001f355 0001f37b     ........U...{...
   29bb0:	00000000 0001f6a9 0001f6bb 0001f721     ............!...
   29bc0:	0001f761 00000000 0001f907 00000000     a...............
   29bd0:	0001f8e9 0001f8e9 0001f8e9 0001f8e9     ................
   29be0:	0001f8e9                                ....

00029be4 <hciEvtCbackLen>:
   29be4:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   29bf4:	06080610 06060606 16060c0c 0a08080e     ................
   29c04:	0e0e0806 0826460e 0a060a06 0c0a0424     .....F&.....$...
   29c14:	04061016 04040404 00000004              ............

00029c20 <appReqActCfg>:
   29c20:	00000000                                ....

00029c24 <gapValSvc>:
   29c24:	00021800                                         ..

00029c26 <gapLenSvc>:
   29c26:	05020002                                         ..

00029c28 <gapValApCh>:
   29c28:	01000502 0005002a                                ....*.

00029c2e <gapLenApCh>:
   29c2e:	00020005                                         ..

00029c30 <gapLenAp>:
   29c30:	00000002                                ....

00029c34 <gapValCarCh>:
   29c34:	a6000702 0005002a                                ....*.

00029c3a <gapLenCarCh>:
   29c3a:	00010005                                         ..

00029c3c <gapLenCar>:
   29c3c:	00000001                                ....

00029c40 <gapValRpaoCh>:
   29c40:	c9000902 0005002a                                ....*.

00029c46 <gapLenRpaoCh>:
   29c46:	00010005                                         ..

00029c48 <gapLenRpao>:
   29c48:	00000001                                ....

00029c4c <gapList>:
   29c4c:	00029994 00029c24 00029c26 01000002     ....$...&.......
   29c5c:	00029998 00029c28 00029c2e 01000005     ....(...........
   29c6c:	000299a0 10008770 00029c30 01000002     ....p...0.......
   29c7c:	00029998 00029c34 00029c3a 01000005     ....4...:.......
   29c8c:	000299a8 10008774 00029c3c 01000001     ....t...<.......
   29c9c:	00029998 00029c40 00029c46 01000005     ....@...F.......
   29cac:	000299ac 10008778 00029c48 01000001     ....x...H.......

00029cbc <gattValSvc>:
   29cbc:	00021801                                         ..

00029cbe <gattLenSvc>:
   29cbe:	12200002                                         ..

00029cc0 <gattValScCh>:
   29cc0:	05001220 0005002a                                 ...*.

00029cc6 <gattLenScCh>:
   29cc6:	00010005                                         ..

00029cc8 <gattValSc>:
   29cc8:	ffff0001                                ....

00029ccc <gattLenSc>:
   29ccc:	00020004                                         ..

00029cce <gattLenScChCcc>:
   29cce:	15020002                                         ..

00029cd0 <gattValCsfCh>:
   29cd0:	29001502 0005002b                                ...)+.

00029cd6 <gattLenCsfCh>:
   29cd6:	00010005                                         ..

00029cd8 <gattLenCsf>:
   29cd8:	00000001                                ....

00029cdc <gattValDbhCh>:
   29cdc:	2a001702 0005002b                                ...*+.

00029ce2 <gattLenDbhCh>:
   29ce2:	00100005                                         ..

00029ce4 <gattLenDbh>:
   29ce4:	00000010                                ....

00029ce8 <gattList>:
   29ce8:	00029994 00029cbc 00029cbe 01000002     ................
   29cf8:	00029998 00029cc0 00029cc6 01000005     ................
   29d08:	000299a4 00029cc8 00029ccc 00000004     ................
   29d18:	0002999c 1000877c 00029cce 11200002     ....|......... .
   29d28:	00029998 00029cd0 00029cd6 01000005     ................
   29d38:	000299b0 10008780 00029cd8 11060001     ................
   29d48:	00029998 00029cdc 00029ce2 01000005     ................
   29d58:	000299b4 10008784 00029ce4 01040010     ................

00029d68 <svcDatUuid>:
   29d68:	c72e0001 90730e8a 08c211e1 e0262760     ......s.....`'&.

00029d78 <wpValSvc>:
   29d78:	c72e1001 90730e8a 08c211e1 e0262760     ......s.....`'&.

00029d88 <wpLenSvc>:
   29d88:	00000010                                ....

00029d8c <wpValDatCh>:
   29d8c:	01020214 8ac72e00 e190730e 6008c211     .........s.....`
   29d9c:	00e02627                                '&..

00029da0 <wpLenDatCh>:
   29da0:	00000013                                ....

00029da4 <wpValDat>:
	...

00029da6 <wpLenDat>:
   29da6:	00020001                                         ..

00029da8 <wpLenDatChCcc>:
   29da8:	00000002                                ....

00029dac <wpList>:
   29dac:	00029994 00029d78 00029d88 01000010     ....x...........
   29dbc:	00029998 00029d8c 00029da0 01000013     ................
   29dcc:	00029d68 00029da4 00029da6 100b0200     h...............
   29ddc:	0002999c 10008794 00029da8 11200002     .............. .

00029dec <ccitt_table>:
   29dec:	80050000 000a800f 001e801b 80110014     ................
   29dfc:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   29e0c:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   29e1c:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   29e2c:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   29e3c:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   29e4c:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   29e5c:	00968093 8099009c 808d0088 00828087     ................
   29e6c:	01868183 8189018c 819d0198 01928197     ................
   29e7c:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   29e8c:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   29e9c:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   29eac:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   29ebc:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   29ecc:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   29edc:	81150110 011a811f 010e810b 81010104     ................
   29eec:	03068303 8309030c 831d0318 03128317     ................
   29efc:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   29f0c:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   29f1c:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   29f2c:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   29f3c:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   29f4c:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   29f5c:	83950390 039a839f 038e838b 83810384     ................
   29f6c:	82850280 028a828f 029e829b 82910294     ................
   29f7c:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   29f8c:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   29f9c:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   29fac:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   29fbc:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   29fcc:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   29fdc:	02168213 8219021c 820d0208 02028207     ................

00029fec <am_ble_buffer_patch_data>:
   29fec:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   29ffc:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   2a00c:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   2a01c:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   2a02c:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   2a068:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   2a078:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   2a088:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   2a098:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   2a0a8:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   2a0b8:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   2a0c8:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   2a0d8:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   2a0e8:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   2a0f8:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   2a108:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   2a118:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   2a128:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   2a138:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   2a148:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   2a158:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   2a168:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   2a178:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   2a188:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   2a198:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   2a1a8:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   2a1b8:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   2a1c8:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   2a1d8:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   2a1e8:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   2a1f8:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   2a208:	8f809011 9812900e 900d3008 30309812     .........0....00
   2a218:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   2a228:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   2a238:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   2a248:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   2a258:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   2a268:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   2a278:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   2a288:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   2a298:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   2a2a8:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   2a2b8:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   2a2c8:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   2a2d8:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   2a2f8:	00000021 00000000 00000001 00000000     !...............
   2a308:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   2a318:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   2a328:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   2a338:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   2a348:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   2a358:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   2a368:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   2a378:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   2a388:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   2a398:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   2a3a8:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   2a3b8:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   2a3c8:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   2a3d8:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   2a3e8:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   2a3f8:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   2a408:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   2a418:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   2a428:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   2a438:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   2a448:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   2a458:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   2a468:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   2a478:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   2a488:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   2a498:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   2a4a8:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   2a4b8:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   2a4c8:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   2a4d8:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   2a4e8:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   2a4f8:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   2a508:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   2a518:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   2a528:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   2a538:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   2a548:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   2a558:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   2a568:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   2a578:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   2a588:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   2a598:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   2a5a8:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   2a5b8:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   2a5c8:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   2a5d8:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   2a5e8:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   2a5f8:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   2a608:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   2a618:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   2a628:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   2a638:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   2a648:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   2a658:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   2a668:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   2a678:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   2a688:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   2a698:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   2a6a8:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   2a6b8:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   2a6c8:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   2a6d8:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   2a6e8:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   2a6f8:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   2a708:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   2a718:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   2a728:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   2a738:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   2a748:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   2a758:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   2a768:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   2a778:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   2a788:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   2a798:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   2a7a8:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   2a7b8:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   2a7c8:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   2a7d8:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   2a7e8:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   2a7f8:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   2a808:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   2a818:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   2a828:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   2a838:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   2a848:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   2a858:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   2a868:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   2a878:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   2a888:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   2a898:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   2a8a8:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   2a8b8:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   2a8c8:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   2a8d8:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   2a8e8:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   2a8f8:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   2a908:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   2a918:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   2a928:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   2a938:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   2a948:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   2a958:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   2a968:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   2a978:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   2a988:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   2a998:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   2a9a8:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   2a9b8:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   2a9c8:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   2a9d8:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   2a9e8:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   2a9f8:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   2aa08:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   2aa18:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   2aa28:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   2aa38:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   2aa48:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   2aa58:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   2aa68:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   2aa78:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   2aa88:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   2aa98:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   2aaa8:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   2aab8:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   2aac8:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   2aad8:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   2aae8:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   2aaf8:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   2ab08:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   2ab18:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   2ab28:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   2ab38:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   2ab48:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   2ab58:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   2ab68:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   2ab78:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   2ab88:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   2ab98:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   2aba8:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   2abb8:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   2abc8:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   2abd8:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   2abe8:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   2abf8:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   2ac08:	00010341 50804000 000093a5 00000466     A....@.P....f...
   2ac18:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   2ac28:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   2ac38:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   2ac48:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   2ac58:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   2ac68:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   2ac78:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   2ac88:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   2ac98:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   2aca8:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   2acb8:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   2acc8:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   2acd8:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   2ace8:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   2acf8:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   2ad08:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   2ad18:	00004770 20006780 20006054              pG...g. T`. 

0002ad24 <am_ble_performance_copy_patch_data>:
   2ad24:	006e1100 00000400 00000000 01c50101     ..n.............
   2ad34:	00000039 00000000 00000000 00000000     9...............
   2ad44:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   2ad54:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   2ad64:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   2ad74:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   2ad84:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   2ad94:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   2ada4:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   2adb4:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   2adc4:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   2add4:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   2ade4:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   2adf4:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   2ae04:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   2ae14:	f000e00a e007fb94 b2c09801 fac7f000     ................
   2ae24:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   2ae34:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   2ae44:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   2ae54:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   2ae64:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   2ae74:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   2ae84:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   2ae94:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   2aea4:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   2aeb4:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   2aec4:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   2aed4:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   2aee4:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   2aef4:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   2af04:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   2af14:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   2af24:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   2af34:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   2af44:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   2af54:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   2af64:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   2af74:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   2af84:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   2af94:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   2afa4:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   2afb4:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   2afc4:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   2afd4:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   2afe4:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   2aff4:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   2b004:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   2b014:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   2b024:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   2b034:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   2b044:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   2b054:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   2b064:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   2b074:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   2b084:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   2b094:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   2b0a4:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   2b0b4:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   2b0c4:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   2b0d4:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   2b0e4:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   2b0f4:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   2b104:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   2b114:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   2b124:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   2b134:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   2b144:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   2b154:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   2b164:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   2b174:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   2b184:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   2b194:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   2b1a4:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   2b1b4:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   2b1c4:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   2b1d4:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   2b1e4:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   2b1f4:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   2b204:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   2b214:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   2b224:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   2b234:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   2b244:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   2b254:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   2b264:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   2b274:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   2b284:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   2b294:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   2b2a4:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   2b2b4:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   2b2c4:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   2b2d4:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   2b2e4:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   2b2f4:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   2b304:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   2b314:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   2b324:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   2b334:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   2b344:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   2b354:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   2b364:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   2b374:	00400000 00804580 021e4580 00030000     ..@..E...E......
   2b384:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   2b394:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   2b3a4:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   2b3b4:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   2b3c4:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   2b3d4:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   2b3e4:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   2b3f4:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   2b404:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   2b414:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   2b424:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   2b434:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   2b444:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   2b454:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   2b464:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   2b474:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   2b484:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   2b494:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   2b4a4:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   2b4b4:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   2b4c4:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   2b4d4:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   2b4e4:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   2b4f4:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   2b504:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   2b514:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   2b524:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   2b534:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   2b544:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   2b554:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   2b564:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   2b574:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   2b584:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   2b594:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   2b5a4:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   2b5b4:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   2b5c4:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   2b5d4:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   2b5e4:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   2b5f4:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   2b604:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   2b614:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   2b624:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   2b634:	00000001                                ....

0002b638 <am_hal_ble_num_default_patches>:
   2b638:	00000003                                ....

0002b63c <am_ble_buffer_patch_data_b0>:
   2b63c:	02302200 0000001f 00066584 00066d73     ."0......e..sm..
   2b64c:	00067575 00067b17 000685a9 00000000     uu...{..........
	...
   2b668:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   2b678:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   2b688:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   2b698:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   2b6a8:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   2b6b8:	20003441 7cca4e23 6ac96875 d01d2a00     A4. #N.|uh.j.*..
   2b6c8:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   2b6d8:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   2b6e8:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   2b6f8:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   2b708:	2000682c 20006e0c 47084900 200034b1     ,h. .n. .I.G.4. 
   2b718:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   2b728:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   2b738:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   2b748:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   2b758:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   2b768:	00000021 00000000 00000001 00000000     !...............
   2b778:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   2b788:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   2b798:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   2b7a8:	2300b4f0 69254c18 227d4918 02126809     ...#.L%i.I}".h..
   2b7b8:	d3024291 23011a8a 1a52e000 43564606     .B.....#..R..FVC
   2b7c8:	435113f2 261e1a71 104f434e 118f19f6     ..QCq..&NCO.....
   2b7d8:	124919f6 13ce1871 d0012b00 e0001a80     ..I.q....+......
   2b7e8:	19421810 008d0891 2b001b52 0143d004     ..B.....R..+..C.
   2b7f8:	18401a18 e0031b80 1a180143 19801840     ..@.....C...@...
   2b808:	bcf06122 00004770 20006e00 20006858     "a..pG...n. Xh. 
   2b818:	2300b410 46022114 4911434a 6809247d     ...#.!.FJC.I}$.h
   2b828:	42a10224 1b09d902 e0002301 43481a61     $..B.....#..a.HC
   2b838:	18410081 0c0c0a88 0c4c1900 0d4c1900     ..A.......L...L.
   2b848:	0e4c1900 0fc91900 08c01840 d0012b00     ..L.....@....+..
   2b858:	e0011810 1e401a10 bc101e40 00004770     ......@.@...pG..
   2b868:	20006858                                Xh. 

0002b86c <am_hal_ble_num_default_patches_b0>:
   2b86c:	00000003                                ....

0002b870 <am_hal_cachectrl_defaults>:
   2b870:	00000308                                ....

0002b874 <g_AM_HAL_GPIO_DISABLE>:
   2b874:	00000003                                ....

0002b878 <g_AM_HAL_GPIO_OUTPUT>:
   2b878:	00000403                                ....

0002b87c <g_ui8Bit76Capabilities>:
   2b87c:	02800101 80010180 80800101 80808080     ................
   2b88c:	80808080 80808008 01800180 80808080     ................
   2b89c:	80808080 01800402 01010401 80808080     ................
   2b8ac:	00000101                                ....

0002b8b0 <g_ui8Inpen>:
   2b8b0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   2b8c0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   2b8d0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   2b8e0:	00003130                                01..

0002b8e4 <g_ui8NCEtable>:
   2b8e4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   2b8f4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   2b904:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   2b914:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   2b924:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   2b934:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   2b944:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   2b954:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   2b964:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   2b974:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   2b984:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   2b994:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   2b9a4:	32221202 43231303                       .."2..#C

0002b9ac <g_ui8nCEpins>:
   2b9ac:	02070707 00080802 01020202 01010101     ................
   2b9bc:	01010101 01010101 01010101 01010101     ................
   2b9cc:	01010101 08010101 01010008 01010101     ................
   2b9dc:	00000101                                ....

0002b9e0 <g_am_hal_mcuctrl_flash_size>:
   2b9e0:	00004000 00008000 00010000 00020000     .@..............
   2b9f0:	00040000 00080000 00100000 00200000     .............. .
   2ba00:	00180000 00000000 00000000 00000000     ................
	...

0002ba20 <g_am_hal_mcuctrl_sram_size>:
   2ba20:	00004000 00008000 00010000 00020000     .@..............
   2ba30:	00040000 00080000 00100000 00060000     ................
   2ba40:	000c0000 00000000 00000000 00000000     ................
	...

0002ba60 <am_hal_pwrctrl_peripheral_control>:
	...
   2ba6c:	00000001 00000004 00000004 00000002     ................
   2ba7c:	00000008 00000008 00000004 00000008     ................
   2ba8c:	00000008 00000008 00000008 00000008     ................
   2ba9c:	00000010 00000010 00000010 00000020     ............ ...
   2baac:	00000010 00000010 00000040 00000010     ........@.......
   2babc:	00000010 00000080 00000004 00000004     ................
   2bacc:	00000100 00000004 00000004 00000200     ................
   2badc:	00000020 00000020 00000400 00000004      ... ...........
   2baec:	00000004 00000800 00000040 00000040     ........@...@...
   2bafc:	00001000 00000080 00000080 00002000     ............. ..
   2bb0c:	00000100 00000100                       ........

0002bb14 <g_sBspUartConfig>:
   2bb14:	0001c200 00000060 00000000 00000000     ....`...........
   2bb24:	00000000 00000012 00000000 00000000     ................
	...

0002bb3c <g_AM_BSP_GPIO_COM_UART_RX>:
   2bb3c:	00000000                                ....

0002bb40 <g_AM_BSP_GPIO_COM_UART_TX>:
   2bb40:	00000000                                ....

0002bb44 <CSWTCH.20>:
   2bb44:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
